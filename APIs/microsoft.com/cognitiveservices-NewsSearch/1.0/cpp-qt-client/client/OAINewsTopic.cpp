/**
 * News Search Client
 * The News Search API lets you send a search query to Bing and get back a list of news that are relevant to the search query. This section provides technical details about the query parameters and headers that you use to request news and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the web for news](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-news-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewsTopic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewsTopic::OAINewsTopic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewsTopic::OAINewsTopic() {
    this->initializeModel();
}

OAINewsTopic::~OAINewsTopic() {}

void OAINewsTopic::initializeModel() {

    m_is_breaking_news_isSet = false;
    m_is_breaking_news_isValid = false;

    m_news_search_url_isSet = false;
    m_news_search_url_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_alternate_name_isSet = false;
    m_alternate_name_isValid = false;

    m_bing_id_isSet = false;
    m_bing_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAINewsTopic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewsTopic::fromJsonObject(QJsonObject json) {

    m_is_breaking_news_isValid = ::OpenAPI::fromJsonValue(m_is_breaking_news, json[QString("isBreakingNews")]);
    m_is_breaking_news_isSet = !json[QString("isBreakingNews")].isNull() && m_is_breaking_news_isValid;

    m_news_search_url_isValid = ::OpenAPI::fromJsonValue(m_news_search_url, json[QString("newsSearchUrl")]);
    m_news_search_url_isSet = !json[QString("newsSearchUrl")].isNull() && m_news_search_url_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_alternate_name_isValid = ::OpenAPI::fromJsonValue(m_alternate_name, json[QString("alternateName")]);
    m_alternate_name_isSet = !json[QString("alternateName")].isNull() && m_alternate_name_isValid;

    m_bing_id_isValid = ::OpenAPI::fromJsonValue(m_bing_id, json[QString("bingId")]);
    m_bing_id_isSet = !json[QString("bingId")].isNull() && m_bing_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAINewsTopic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewsTopic::asJsonObject() const {
    QJsonObject obj;
    if (m_is_breaking_news_isSet) {
        obj.insert(QString("isBreakingNews"), ::OpenAPI::toJsonValue(m_is_breaking_news));
    }
    if (m_news_search_url_isSet) {
        obj.insert(QString("newsSearchUrl"), ::OpenAPI::toJsonValue(m_news_search_url));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_alternate_name_isSet) {
        obj.insert(QString("alternateName"), ::OpenAPI::toJsonValue(m_alternate_name));
    }
    if (m_bing_id_isSet) {
        obj.insert(QString("bingId"), ::OpenAPI::toJsonValue(m_bing_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

bool OAINewsTopic::isIsBreakingNews() const {
    return m_is_breaking_news;
}
void OAINewsTopic::setIsBreakingNews(const bool &is_breaking_news) {
    m_is_breaking_news = is_breaking_news;
    m_is_breaking_news_isSet = true;
}

bool OAINewsTopic::is_is_breaking_news_Set() const{
    return m_is_breaking_news_isSet;
}

bool OAINewsTopic::is_is_breaking_news_Valid() const{
    return m_is_breaking_news_isValid;
}

QString OAINewsTopic::getNewsSearchUrl() const {
    return m_news_search_url;
}
void OAINewsTopic::setNewsSearchUrl(const QString &news_search_url) {
    m_news_search_url = news_search_url;
    m_news_search_url_isSet = true;
}

bool OAINewsTopic::is_news_search_url_Set() const{
    return m_news_search_url_isSet;
}

bool OAINewsTopic::is_news_search_url_Valid() const{
    return m_news_search_url_isValid;
}

OAIQuery OAINewsTopic::getQuery() const {
    return m_query;
}
void OAINewsTopic::setQuery(const OAIQuery &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAINewsTopic::is_query_Set() const{
    return m_query_isSet;
}

bool OAINewsTopic::is_query_Valid() const{
    return m_query_isValid;
}

QString OAINewsTopic::getAlternateName() const {
    return m_alternate_name;
}
void OAINewsTopic::setAlternateName(const QString &alternate_name) {
    m_alternate_name = alternate_name;
    m_alternate_name_isSet = true;
}

bool OAINewsTopic::is_alternate_name_Set() const{
    return m_alternate_name_isSet;
}

bool OAINewsTopic::is_alternate_name_Valid() const{
    return m_alternate_name_isValid;
}

QString OAINewsTopic::getBingId() const {
    return m_bing_id;
}
void OAINewsTopic::setBingId(const QString &bing_id) {
    m_bing_id = bing_id;
    m_bing_id_isSet = true;
}

bool OAINewsTopic::is_bing_id_Set() const{
    return m_bing_id_isSet;
}

bool OAINewsTopic::is_bing_id_Valid() const{
    return m_bing_id_isValid;
}

QString OAINewsTopic::getDescription() const {
    return m_description;
}
void OAINewsTopic::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINewsTopic::is_description_Set() const{
    return m_description_isSet;
}

bool OAINewsTopic::is_description_Valid() const{
    return m_description_isValid;
}

OAIImageObject OAINewsTopic::getImage() const {
    return m_image;
}
void OAINewsTopic::setImage(const OAIImageObject &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAINewsTopic::is_image_Set() const{
    return m_image_isSet;
}

bool OAINewsTopic::is_image_Valid() const{
    return m_image_isValid;
}

QString OAINewsTopic::getName() const {
    return m_name;
}
void OAINewsTopic::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINewsTopic::is_name_Set() const{
    return m_name_isSet;
}

bool OAINewsTopic::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINewsTopic::getUrl() const {
    return m_url;
}
void OAINewsTopic::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINewsTopic::is_url_Set() const{
    return m_url_isSet;
}

bool OAINewsTopic::is_url_Valid() const{
    return m_url_isValid;
}

QString OAINewsTopic::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAINewsTopic::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAINewsTopic::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAINewsTopic::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAINewsTopic::getId() const {
    return m_id;
}
void OAINewsTopic::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINewsTopic::is_id_Set() const{
    return m_id_isSet;
}

bool OAINewsTopic::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINewsTopic::getType() const {
    return m__type;
}
void OAINewsTopic::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAINewsTopic::is__type_Set() const{
    return m__type_isSet;
}

bool OAINewsTopic::is__type_Valid() const{
    return m__type_isValid;
}

bool OAINewsTopic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_breaking_news_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_news_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewsTopic::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
