# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_object import ImageObject
from openapi_server.models.media_object import MediaObject
from openapi_server.models.thing import Thing
from openapi_server import util


class VideoObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_https_embed: bool=None, allow_mobile_embed: bool=None, embed_html: str=None, is_superfresh: bool=None, motion_thumbnail_id: str=None, motion_thumbnail_url: str=None, thumbnail: ImageObject=None, video_id: str=None, view_count: int=None, content_url: str=None, height: int=None, width: int=None, date_published: str=None, provider: List[Thing]=None, thumbnail_url: str=None, video: VideoObject=None, alternate_name: str=None, bing_id: str=None, description: str=None, image: ImageObject=None, name: str=None, url: str=None, web_search_url: str=None, id: str=None, type: str=None):
        """VideoObject - a model defined in OpenAPI

        :param allow_https_embed: The allow_https_embed of this VideoObject.
        :param allow_mobile_embed: The allow_mobile_embed of this VideoObject.
        :param embed_html: The embed_html of this VideoObject.
        :param is_superfresh: The is_superfresh of this VideoObject.
        :param motion_thumbnail_id: The motion_thumbnail_id of this VideoObject.
        :param motion_thumbnail_url: The motion_thumbnail_url of this VideoObject.
        :param thumbnail: The thumbnail of this VideoObject.
        :param video_id: The video_id of this VideoObject.
        :param view_count: The view_count of this VideoObject.
        :param content_url: The content_url of this VideoObject.
        :param height: The height of this VideoObject.
        :param width: The width of this VideoObject.
        :param date_published: The date_published of this VideoObject.
        :param provider: The provider of this VideoObject.
        :param thumbnail_url: The thumbnail_url of this VideoObject.
        :param video: The video of this VideoObject.
        :param alternate_name: The alternate_name of this VideoObject.
        :param bing_id: The bing_id of this VideoObject.
        :param description: The description of this VideoObject.
        :param image: The image of this VideoObject.
        :param name: The name of this VideoObject.
        :param url: The url of this VideoObject.
        :param web_search_url: The web_search_url of this VideoObject.
        :param id: The id of this VideoObject.
        :param type: The type of this VideoObject.
        """
        self.openapi_types = {
            'allow_https_embed': bool,
            'allow_mobile_embed': bool,
            'embed_html': str,
            'is_superfresh': bool,
            'motion_thumbnail_id': str,
            'motion_thumbnail_url': str,
            'thumbnail': ImageObject,
            'video_id': str,
            'view_count': int,
            'content_url': str,
            'height': int,
            'width': int,
            'date_published': str,
            'provider': List[Thing],
            'thumbnail_url': str,
            'video': VideoObject,
            'alternate_name': str,
            'bing_id': str,
            'description': str,
            'image': ImageObject,
            'name': str,
            'url': str,
            'web_search_url': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'allow_https_embed': 'allowHttpsEmbed',
            'allow_mobile_embed': 'allowMobileEmbed',
            'embed_html': 'embedHtml',
            'is_superfresh': 'isSuperfresh',
            'motion_thumbnail_id': 'motionThumbnailId',
            'motion_thumbnail_url': 'motionThumbnailUrl',
            'thumbnail': 'thumbnail',
            'video_id': 'videoId',
            'view_count': 'viewCount',
            'content_url': 'contentUrl',
            'height': 'height',
            'width': 'width',
            'date_published': 'datePublished',
            'provider': 'provider',
            'thumbnail_url': 'thumbnailUrl',
            'video': 'video',
            'alternate_name': 'alternateName',
            'bing_id': 'bingId',
            'description': 'description',
            'image': 'image',
            'name': 'name',
            'url': 'url',
            'web_search_url': 'webSearchUrl',
            'id': 'id',
            'type': '_type'
        }

        self._allow_https_embed = allow_https_embed
        self._allow_mobile_embed = allow_mobile_embed
        self._embed_html = embed_html
        self._is_superfresh = is_superfresh
        self._motion_thumbnail_id = motion_thumbnail_id
        self._motion_thumbnail_url = motion_thumbnail_url
        self._thumbnail = thumbnail
        self._video_id = video_id
        self._view_count = view_count
        self._content_url = content_url
        self._height = height
        self._width = width
        self._date_published = date_published
        self._provider = provider
        self._thumbnail_url = thumbnail_url
        self._video = video
        self._alternate_name = alternate_name
        self._bing_id = bing_id
        self._description = description
        self._image = image
        self._name = name
        self._url = url
        self._web_search_url = web_search_url
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoObject of this VideoObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_https_embed(self):
        """Gets the allow_https_embed of this VideoObject.


        :return: The allow_https_embed of this VideoObject.
        :rtype: bool
        """
        return self._allow_https_embed

    @allow_https_embed.setter
    def allow_https_embed(self, allow_https_embed):
        """Sets the allow_https_embed of this VideoObject.


        :param allow_https_embed: The allow_https_embed of this VideoObject.
        :type allow_https_embed: bool
        """

        self._allow_https_embed = allow_https_embed

    @property
    def allow_mobile_embed(self):
        """Gets the allow_mobile_embed of this VideoObject.


        :return: The allow_mobile_embed of this VideoObject.
        :rtype: bool
        """
        return self._allow_mobile_embed

    @allow_mobile_embed.setter
    def allow_mobile_embed(self, allow_mobile_embed):
        """Sets the allow_mobile_embed of this VideoObject.


        :param allow_mobile_embed: The allow_mobile_embed of this VideoObject.
        :type allow_mobile_embed: bool
        """

        self._allow_mobile_embed = allow_mobile_embed

    @property
    def embed_html(self):
        """Gets the embed_html of this VideoObject.


        :return: The embed_html of this VideoObject.
        :rtype: str
        """
        return self._embed_html

    @embed_html.setter
    def embed_html(self, embed_html):
        """Sets the embed_html of this VideoObject.


        :param embed_html: The embed_html of this VideoObject.
        :type embed_html: str
        """

        self._embed_html = embed_html

    @property
    def is_superfresh(self):
        """Gets the is_superfresh of this VideoObject.


        :return: The is_superfresh of this VideoObject.
        :rtype: bool
        """
        return self._is_superfresh

    @is_superfresh.setter
    def is_superfresh(self, is_superfresh):
        """Sets the is_superfresh of this VideoObject.


        :param is_superfresh: The is_superfresh of this VideoObject.
        :type is_superfresh: bool
        """

        self._is_superfresh = is_superfresh

    @property
    def motion_thumbnail_id(self):
        """Gets the motion_thumbnail_id of this VideoObject.


        :return: The motion_thumbnail_id of this VideoObject.
        :rtype: str
        """
        return self._motion_thumbnail_id

    @motion_thumbnail_id.setter
    def motion_thumbnail_id(self, motion_thumbnail_id):
        """Sets the motion_thumbnail_id of this VideoObject.


        :param motion_thumbnail_id: The motion_thumbnail_id of this VideoObject.
        :type motion_thumbnail_id: str
        """

        self._motion_thumbnail_id = motion_thumbnail_id

    @property
    def motion_thumbnail_url(self):
        """Gets the motion_thumbnail_url of this VideoObject.


        :return: The motion_thumbnail_url of this VideoObject.
        :rtype: str
        """
        return self._motion_thumbnail_url

    @motion_thumbnail_url.setter
    def motion_thumbnail_url(self, motion_thumbnail_url):
        """Sets the motion_thumbnail_url of this VideoObject.


        :param motion_thumbnail_url: The motion_thumbnail_url of this VideoObject.
        :type motion_thumbnail_url: str
        """

        self._motion_thumbnail_url = motion_thumbnail_url

    @property
    def thumbnail(self):
        """Gets the thumbnail of this VideoObject.


        :return: The thumbnail of this VideoObject.
        :rtype: ImageObject
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this VideoObject.


        :param thumbnail: The thumbnail of this VideoObject.
        :type thumbnail: ImageObject
        """

        self._thumbnail = thumbnail

    @property
    def video_id(self):
        """Gets the video_id of this VideoObject.


        :return: The video_id of this VideoObject.
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """Sets the video_id of this VideoObject.


        :param video_id: The video_id of this VideoObject.
        :type video_id: str
        """

        self._video_id = video_id

    @property
    def view_count(self):
        """Gets the view_count of this VideoObject.


        :return: The view_count of this VideoObject.
        :rtype: int
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """Sets the view_count of this VideoObject.


        :param view_count: The view_count of this VideoObject.
        :type view_count: int
        """

        self._view_count = view_count

    @property
    def content_url(self):
        """Gets the content_url of this VideoObject.

        Original URL to retrieve the source (file) for the media object (e.g the source URL for the image).

        :return: The content_url of this VideoObject.
        :rtype: str
        """
        return self._content_url

    @content_url.setter
    def content_url(self, content_url):
        """Sets the content_url of this VideoObject.

        Original URL to retrieve the source (file) for the media object (e.g the source URL for the image).

        :param content_url: The content_url of this VideoObject.
        :type content_url: str
        """

        self._content_url = content_url

    @property
    def height(self):
        """Gets the height of this VideoObject.

        The height of the source media object, in pixels.

        :return: The height of this VideoObject.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this VideoObject.

        The height of the source media object, in pixels.

        :param height: The height of this VideoObject.
        :type height: int
        """

        self._height = height

    @property
    def width(self):
        """Gets the width of this VideoObject.

        The width of the source media object, in pixels.

        :return: The width of this VideoObject.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this VideoObject.

        The width of the source media object, in pixels.

        :param width: The width of this VideoObject.
        :type width: int
        """

        self._width = width

    @property
    def date_published(self):
        """Gets the date_published of this VideoObject.

        The date on which the CreativeWork was published.

        :return: The date_published of this VideoObject.
        :rtype: str
        """
        return self._date_published

    @date_published.setter
    def date_published(self, date_published):
        """Sets the date_published of this VideoObject.

        The date on which the CreativeWork was published.

        :param date_published: The date_published of this VideoObject.
        :type date_published: str
        """

        self._date_published = date_published

    @property
    def provider(self):
        """Gets the provider of this VideoObject.

        The source of the creative work.

        :return: The provider of this VideoObject.
        :rtype: List[Thing]
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this VideoObject.

        The source of the creative work.

        :param provider: The provider of this VideoObject.
        :type provider: List[Thing]
        """

        self._provider = provider

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this VideoObject.

        The URL to a thumbnail of the item.

        :return: The thumbnail_url of this VideoObject.
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this VideoObject.

        The URL to a thumbnail of the item.

        :param thumbnail_url: The thumbnail_url of this VideoObject.
        :type thumbnail_url: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def video(self):
        """Gets the video of this VideoObject.


        :return: The video of this VideoObject.
        :rtype: VideoObject
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this VideoObject.


        :param video: The video of this VideoObject.
        :type video: VideoObject
        """

        self._video = video

    @property
    def alternate_name(self):
        """Gets the alternate_name of this VideoObject.

        An alias for the item

        :return: The alternate_name of this VideoObject.
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this VideoObject.

        An alias for the item

        :param alternate_name: The alternate_name of this VideoObject.
        :type alternate_name: str
        """

        self._alternate_name = alternate_name

    @property
    def bing_id(self):
        """Gets the bing_id of this VideoObject.

        An ID that uniquely identifies this item.

        :return: The bing_id of this VideoObject.
        :rtype: str
        """
        return self._bing_id

    @bing_id.setter
    def bing_id(self, bing_id):
        """Sets the bing_id of this VideoObject.

        An ID that uniquely identifies this item.

        :param bing_id: The bing_id of this VideoObject.
        :type bing_id: str
        """

        self._bing_id = bing_id

    @property
    def description(self):
        """Gets the description of this VideoObject.

        A short description of the item.

        :return: The description of this VideoObject.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VideoObject.

        A short description of the item.

        :param description: The description of this VideoObject.
        :type description: str
        """

        self._description = description

    @property
    def image(self):
        """Gets the image of this VideoObject.


        :return: The image of this VideoObject.
        :rtype: ImageObject
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this VideoObject.


        :param image: The image of this VideoObject.
        :type image: ImageObject
        """

        self._image = image

    @property
    def name(self):
        """Gets the name of this VideoObject.

        The name of the thing represented by this object.

        :return: The name of this VideoObject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VideoObject.

        The name of the thing represented by this object.

        :param name: The name of this VideoObject.
        :type name: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this VideoObject.

        The URL to get more information about the thing represented by this object.

        :return: The url of this VideoObject.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this VideoObject.

        The URL to get more information about the thing represented by this object.

        :param url: The url of this VideoObject.
        :type url: str
        """

        self._url = url

    @property
    def web_search_url(self):
        """Gets the web_search_url of this VideoObject.

        The URL To Bing's search result for this item.

        :return: The web_search_url of this VideoObject.
        :rtype: str
        """
        return self._web_search_url

    @web_search_url.setter
    def web_search_url(self, web_search_url):
        """Sets the web_search_url of this VideoObject.

        The URL To Bing's search result for this item.

        :param web_search_url: The web_search_url of this VideoObject.
        :type web_search_url: str
        """

        self._web_search_url = web_search_url

    @property
    def id(self):
        """Gets the id of this VideoObject.

        A String identifier.

        :return: The id of this VideoObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VideoObject.

        A String identifier.

        :param id: The id of this VideoObject.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this VideoObject.


        :return: The type of this VideoObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VideoObject.


        :param type: The type of this VideoObject.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
