# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.news_article import NewsArticle
from openapi_server.models.query import Query
from openapi_server.models.search_results_answer import SearchResultsAnswer
from openapi_server import util


class News(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: str=None, value: List[NewsArticle]=None, total_estimated_matches: int=None, follow_up_queries: List[Query]=None, web_search_url: str=None, id: str=None, type: str=None):
        """News - a model defined in OpenAPI

        :param location: The location of this News.
        :param value: The value of this News.
        :param total_estimated_matches: The total_estimated_matches of this News.
        :param follow_up_queries: The follow_up_queries of this News.
        :param web_search_url: The web_search_url of this News.
        :param id: The id of this News.
        :param type: The type of this News.
        """
        self.openapi_types = {
            'location': str,
            'value': List[NewsArticle],
            'total_estimated_matches': int,
            'follow_up_queries': List[Query],
            'web_search_url': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'location': 'location',
            'value': 'value',
            'total_estimated_matches': 'totalEstimatedMatches',
            'follow_up_queries': 'followUpQueries',
            'web_search_url': 'webSearchUrl',
            'id': 'id',
            'type': '_type'
        }

        self._location = location
        self._value = value
        self._total_estimated_matches = total_estimated_matches
        self._follow_up_queries = follow_up_queries
        self._web_search_url = web_search_url
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'News':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The News of this News.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this News.

        Location of local news

        :return: The location of this News.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this News.

        Location of local news

        :param location: The location of this News.
        :type location: str
        """

        self._location = location

    @property
    def value(self):
        """Gets the value of this News.

        An array of NewsArticle objects that contain information about news articles that are relevant to the query. If there are no results to return for the request, the array is empty.

        :return: The value of this News.
        :rtype: List[NewsArticle]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this News.

        An array of NewsArticle objects that contain information about news articles that are relevant to the query. If there are no results to return for the request, the array is empty.

        :param value: The value of this News.
        :type value: List[NewsArticle]
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def total_estimated_matches(self):
        """Gets the total_estimated_matches of this News.

        The estimated number of webpages that are relevant to the query. Use this number along with the count and offset query parameters to page the results.

        :return: The total_estimated_matches of this News.
        :rtype: int
        """
        return self._total_estimated_matches

    @total_estimated_matches.setter
    def total_estimated_matches(self, total_estimated_matches):
        """Sets the total_estimated_matches of this News.

        The estimated number of webpages that are relevant to the query. Use this number along with the count and offset query parameters to page the results.

        :param total_estimated_matches: The total_estimated_matches of this News.
        :type total_estimated_matches: int
        """

        self._total_estimated_matches = total_estimated_matches

    @property
    def follow_up_queries(self):
        """Gets the follow_up_queries of this News.


        :return: The follow_up_queries of this News.
        :rtype: List[Query]
        """
        return self._follow_up_queries

    @follow_up_queries.setter
    def follow_up_queries(self, follow_up_queries):
        """Sets the follow_up_queries of this News.


        :param follow_up_queries: The follow_up_queries of this News.
        :type follow_up_queries: List[Query]
        """

        self._follow_up_queries = follow_up_queries

    @property
    def web_search_url(self):
        """Gets the web_search_url of this News.

        The URL To Bing's search result for this item.

        :return: The web_search_url of this News.
        :rtype: str
        """
        return self._web_search_url

    @web_search_url.setter
    def web_search_url(self, web_search_url):
        """Sets the web_search_url of this News.

        The URL To Bing's search result for this item.

        :param web_search_url: The web_search_url of this News.
        :type web_search_url: str
        """

        self._web_search_url = web_search_url

    @property
    def id(self):
        """Gets the id of this News.

        A String identifier.

        :return: The id of this News.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this News.

        A String identifier.

        :param id: The id of this News.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this News.


        :return: The type of this News.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this News.


        :param type: The type of this News.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
