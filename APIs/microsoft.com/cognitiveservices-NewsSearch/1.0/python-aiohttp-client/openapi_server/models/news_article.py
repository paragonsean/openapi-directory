# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.article import Article
from openapi_server.models.image_object import ImageObject
from openapi_server.models.thing import Thing
from openapi_server.models.video_object import VideoObject
from openapi_server import util


class NewsArticle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, clustered_articles: List[NewsArticle]=None, headline: bool=None, word_count: int=None, date_published: str=None, provider: List[Thing]=None, thumbnail_url: str=None, video: VideoObject=None, alternate_name: str=None, bing_id: str=None, description: str=None, image: ImageObject=None, name: str=None, url: str=None, web_search_url: str=None, id: str=None, type: str=None):
        """NewsArticle - a model defined in OpenAPI

        :param category: The category of this NewsArticle.
        :param clustered_articles: The clustered_articles of this NewsArticle.
        :param headline: The headline of this NewsArticle.
        :param word_count: The word_count of this NewsArticle.
        :param date_published: The date_published of this NewsArticle.
        :param provider: The provider of this NewsArticle.
        :param thumbnail_url: The thumbnail_url of this NewsArticle.
        :param video: The video of this NewsArticle.
        :param alternate_name: The alternate_name of this NewsArticle.
        :param bing_id: The bing_id of this NewsArticle.
        :param description: The description of this NewsArticle.
        :param image: The image of this NewsArticle.
        :param name: The name of this NewsArticle.
        :param url: The url of this NewsArticle.
        :param web_search_url: The web_search_url of this NewsArticle.
        :param id: The id of this NewsArticle.
        :param type: The type of this NewsArticle.
        """
        self.openapi_types = {
            'category': str,
            'clustered_articles': List[NewsArticle],
            'headline': bool,
            'word_count': int,
            'date_published': str,
            'provider': List[Thing],
            'thumbnail_url': str,
            'video': VideoObject,
            'alternate_name': str,
            'bing_id': str,
            'description': str,
            'image': ImageObject,
            'name': str,
            'url': str,
            'web_search_url': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'category': 'category',
            'clustered_articles': 'clusteredArticles',
            'headline': 'headline',
            'word_count': 'wordCount',
            'date_published': 'datePublished',
            'provider': 'provider',
            'thumbnail_url': 'thumbnailUrl',
            'video': 'video',
            'alternate_name': 'alternateName',
            'bing_id': 'bingId',
            'description': 'description',
            'image': 'image',
            'name': 'name',
            'url': 'url',
            'web_search_url': 'webSearchUrl',
            'id': 'id',
            'type': '_type'
        }

        self._category = category
        self._clustered_articles = clustered_articles
        self._headline = headline
        self._word_count = word_count
        self._date_published = date_published
        self._provider = provider
        self._thumbnail_url = thumbnail_url
        self._video = video
        self._alternate_name = alternate_name
        self._bing_id = bing_id
        self._description = description
        self._image = image
        self._name = name
        self._url = url
        self._web_search_url = web_search_url
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewsArticle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewsArticle of this NewsArticle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this NewsArticle.

        The news category that the article belongs to. For example, Sports. If the news category cannot be determined, the article does not include this field.

        :return: The category of this NewsArticle.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this NewsArticle.

        The news category that the article belongs to. For example, Sports. If the news category cannot be determined, the article does not include this field.

        :param category: The category of this NewsArticle.
        :type category: str
        """

        self._category = category

    @property
    def clustered_articles(self):
        """Gets the clustered_articles of this NewsArticle.

        A list of related news articles.

        :return: The clustered_articles of this NewsArticle.
        :rtype: List[NewsArticle]
        """
        return self._clustered_articles

    @clustered_articles.setter
    def clustered_articles(self, clustered_articles):
        """Sets the clustered_articles of this NewsArticle.

        A list of related news articles.

        :param clustered_articles: The clustered_articles of this NewsArticle.
        :type clustered_articles: List[NewsArticle]
        """

        self._clustered_articles = clustered_articles

    @property
    def headline(self):
        """Gets the headline of this NewsArticle.

        A Boolean value that indicates whether the news article is a headline. If true, the article is a headline. The article includes this field only for news categories requests that do not specify the category query parameter.

        :return: The headline of this NewsArticle.
        :rtype: bool
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this NewsArticle.

        A Boolean value that indicates whether the news article is a headline. If true, the article is a headline. The article includes this field only for news categories requests that do not specify the category query parameter.

        :param headline: The headline of this NewsArticle.
        :type headline: bool
        """

        self._headline = headline

    @property
    def word_count(self):
        """Gets the word_count of this NewsArticle.

        The number of words in the text of the Article.

        :return: The word_count of this NewsArticle.
        :rtype: int
        """
        return self._word_count

    @word_count.setter
    def word_count(self, word_count):
        """Sets the word_count of this NewsArticle.

        The number of words in the text of the Article.

        :param word_count: The word_count of this NewsArticle.
        :type word_count: int
        """

        self._word_count = word_count

    @property
    def date_published(self):
        """Gets the date_published of this NewsArticle.

        The date on which the CreativeWork was published.

        :return: The date_published of this NewsArticle.
        :rtype: str
        """
        return self._date_published

    @date_published.setter
    def date_published(self, date_published):
        """Sets the date_published of this NewsArticle.

        The date on which the CreativeWork was published.

        :param date_published: The date_published of this NewsArticle.
        :type date_published: str
        """

        self._date_published = date_published

    @property
    def provider(self):
        """Gets the provider of this NewsArticle.

        The source of the creative work.

        :return: The provider of this NewsArticle.
        :rtype: List[Thing]
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this NewsArticle.

        The source of the creative work.

        :param provider: The provider of this NewsArticle.
        :type provider: List[Thing]
        """

        self._provider = provider

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this NewsArticle.

        The URL to a thumbnail of the item.

        :return: The thumbnail_url of this NewsArticle.
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this NewsArticle.

        The URL to a thumbnail of the item.

        :param thumbnail_url: The thumbnail_url of this NewsArticle.
        :type thumbnail_url: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def video(self):
        """Gets the video of this NewsArticle.


        :return: The video of this NewsArticle.
        :rtype: VideoObject
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this NewsArticle.


        :param video: The video of this NewsArticle.
        :type video: VideoObject
        """

        self._video = video

    @property
    def alternate_name(self):
        """Gets the alternate_name of this NewsArticle.

        An alias for the item

        :return: The alternate_name of this NewsArticle.
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this NewsArticle.

        An alias for the item

        :param alternate_name: The alternate_name of this NewsArticle.
        :type alternate_name: str
        """

        self._alternate_name = alternate_name

    @property
    def bing_id(self):
        """Gets the bing_id of this NewsArticle.

        An ID that uniquely identifies this item.

        :return: The bing_id of this NewsArticle.
        :rtype: str
        """
        return self._bing_id

    @bing_id.setter
    def bing_id(self, bing_id):
        """Sets the bing_id of this NewsArticle.

        An ID that uniquely identifies this item.

        :param bing_id: The bing_id of this NewsArticle.
        :type bing_id: str
        """

        self._bing_id = bing_id

    @property
    def description(self):
        """Gets the description of this NewsArticle.

        A short description of the item.

        :return: The description of this NewsArticle.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NewsArticle.

        A short description of the item.

        :param description: The description of this NewsArticle.
        :type description: str
        """

        self._description = description

    @property
    def image(self):
        """Gets the image of this NewsArticle.


        :return: The image of this NewsArticle.
        :rtype: ImageObject
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this NewsArticle.


        :param image: The image of this NewsArticle.
        :type image: ImageObject
        """

        self._image = image

    @property
    def name(self):
        """Gets the name of this NewsArticle.

        The name of the thing represented by this object.

        :return: The name of this NewsArticle.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewsArticle.

        The name of the thing represented by this object.

        :param name: The name of this NewsArticle.
        :type name: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this NewsArticle.

        The URL to get more information about the thing represented by this object.

        :return: The url of this NewsArticle.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NewsArticle.

        The URL to get more information about the thing represented by this object.

        :param url: The url of this NewsArticle.
        :type url: str
        """

        self._url = url

    @property
    def web_search_url(self):
        """Gets the web_search_url of this NewsArticle.

        The URL To Bing's search result for this item.

        :return: The web_search_url of this NewsArticle.
        :rtype: str
        """
        return self._web_search_url

    @web_search_url.setter
    def web_search_url(self, web_search_url):
        """Sets the web_search_url of this NewsArticle.

        The URL To Bing's search result for this item.

        :param web_search_url: The web_search_url of this NewsArticle.
        :type web_search_url: str
        """

        self._web_search_url = web_search_url

    @property
    def id(self):
        """Gets the id of this NewsArticle.

        A String identifier.

        :return: The id of this NewsArticle.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NewsArticle.

        A String identifier.

        :param id: The id of this NewsArticle.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this NewsArticle.


        :return: The type of this NewsArticle.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NewsArticle.


        :param type: The type of this NewsArticle.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
