/**
 * Local Search Client
 * The Local Search client lets you send a search query to Bing and get back search results that include local businesses such as restaurants, hotels, retail stores, or other local businesses. The query can specify the name of the local business or it can ask for a list (for example, restaurants near me).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LocalSearchClient);
  }
}(this, function(expect, LocalSearchClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LocalSearchClient.CreativeWork();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreativeWork', function() {
    it('should create an instance of CreativeWork', function() {
      // uncomment below and update the code to test CreativeWork
      //var instance = new LocalSearchClient.CreativeWork();
      //expect(instance).to.be.a(LocalSearchClient.CreativeWork);
    });

    it('should have the property about (base name: "about")', function() {
      // uncomment below and update the code to test the property about
      //var instance = new LocalSearchClient.CreativeWork();
      //expect(instance).to.be();
    });

    it('should have the property commentCount (base name: "commentCount")', function() {
      // uncomment below and update the code to test the property commentCount
      //var instance = new LocalSearchClient.CreativeWork();
      //expect(instance).to.be();
    });

    it('should have the property copyrightHolder (base name: "copyrightHolder")', function() {
      // uncomment below and update the code to test the property copyrightHolder
      //var instance = new LocalSearchClient.CreativeWork();
      //expect(instance).to.be();
    });

    it('should have the property copyrightYear (base name: "copyrightYear")', function() {
      // uncomment below and update the code to test the property copyrightYear
      //var instance = new LocalSearchClient.CreativeWork();
      //expect(instance).to.be();
    });

    it('should have the property creator (base name: "creator")', function() {
      // uncomment below and update the code to test the property creator
      //var instance = new LocalSearchClient.CreativeWork();
      //expect(instance).to.be();
    });

    it('should have the property disclaimer (base name: "disclaimer")', function() {
      // uncomment below and update the code to test the property disclaimer
      //var instance = new LocalSearchClient.CreativeWork();
      //expect(instance).to.be();
    });

    it('should have the property discussionUrl (base name: "discussionUrl")', function() {
      // uncomment below and update the code to test the property discussionUrl
      //var instance = new LocalSearchClient.CreativeWork();
      //expect(instance).to.be();
    });

    it('should have the property genre (base name: "genre")', function() {
      // uncomment below and update the code to test the property genre
      //var instance = new LocalSearchClient.CreativeWork();
      //expect(instance).to.be();
    });

    it('should have the property headLine (base name: "headLine")', function() {
      // uncomment below and update the code to test the property headLine
      //var instance = new LocalSearchClient.CreativeWork();
      //expect(instance).to.be();
    });

    it('should have the property isAccessibleForFree (base name: "isAccessibleForFree")', function() {
      // uncomment below and update the code to test the property isAccessibleForFree
      //var instance = new LocalSearchClient.CreativeWork();
      //expect(instance).to.be();
    });

    it('should have the property isFamilyFriendly (base name: "isFamilyFriendly")', function() {
      // uncomment below and update the code to test the property isFamilyFriendly
      //var instance = new LocalSearchClient.CreativeWork();
      //expect(instance).to.be();
    });

    it('should have the property mainEntity (base name: "mainEntity")', function() {
      // uncomment below and update the code to test the property mainEntity
      //var instance = new LocalSearchClient.CreativeWork();
      //expect(instance).to.be();
    });

    it('should have the property mentions (base name: "mentions")', function() {
      // uncomment below and update the code to test the property mentions
      //var instance = new LocalSearchClient.CreativeWork();
      //expect(instance).to.be();
    });

    it('should have the property provider (base name: "provider")', function() {
      // uncomment below and update the code to test the property provider
      //var instance = new LocalSearchClient.CreativeWork();
      //expect(instance).to.be();
    });

    it('should have the property text (base name: "text")', function() {
      // uncomment below and update the code to test the property text
      //var instance = new LocalSearchClient.CreativeWork();
      //expect(instance).to.be();
    });

    it('should have the property thumbnailUrl (base name: "thumbnailUrl")', function() {
      // uncomment below and update the code to test the property thumbnailUrl
      //var instance = new LocalSearchClient.CreativeWork();
      //expect(instance).to.be();
    });

  });

}));
