/**
 * Local Search Client
 * The Local Search client lets you send a search query to Bing and get back search results that include local businesses such as restaurants, hotels, retail stores, or other local businesses. The query can specify the name of the local business or it can ask for a list (for example, restaurants near me).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LocalSearchClient);
  }
}(this, function(expect, LocalSearchClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LocalSearchClient.EntitiesEntityPresentationInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('EntitiesEntityPresentationInfo', function() {
    it('should create an instance of EntitiesEntityPresentationInfo', function() {
      // uncomment below and update the code to test EntitiesEntityPresentationInfo
      //var instance = new LocalSearchClient.EntitiesEntityPresentationInfo();
      //expect(instance).to.be.a(LocalSearchClient.EntitiesEntityPresentationInfo);
    });

    it('should have the property type (base name: "_type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new LocalSearchClient.EntitiesEntityPresentationInfo();
      //expect(instance).to.be();
    });

    it('should have the property entityScenario (base name: "entityScenario")', function() {
      // uncomment below and update the code to test the property entityScenario
      //var instance = new LocalSearchClient.EntitiesEntityPresentationInfo();
      //expect(instance).to.be();
    });

    it('should have the property entitySubTypeHints (base name: "entitySubTypeHints")', function() {
      // uncomment below and update the code to test the property entitySubTypeHints
      //var instance = new LocalSearchClient.EntitiesEntityPresentationInfo();
      //expect(instance).to.be();
    });

    it('should have the property entityTypeDisplayHint (base name: "entityTypeDisplayHint")', function() {
      // uncomment below and update the code to test the property entityTypeDisplayHint
      //var instance = new LocalSearchClient.EntitiesEntityPresentationInfo();
      //expect(instance).to.be();
    });

    it('should have the property entityTypeHints (base name: "entityTypeHints")', function() {
      // uncomment below and update the code to test the property entityTypeHints
      //var instance = new LocalSearchClient.EntitiesEntityPresentationInfo();
      //expect(instance).to.be();
    });

    it('should have the property query (base name: "query")', function() {
      // uncomment below and update the code to test the property query
      //var instance = new LocalSearchClient.EntitiesEntityPresentationInfo();
      //expect(instance).to.be();
    });

  });

}));
