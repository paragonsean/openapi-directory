/**
 * Local Search Client
 * The Local Search client lets you send a search query to Bing and get back search results that include local businesses such as restaurants, hotels, retail stores, or other local businesses. The query can specify the name of the local business or it can ask for a list (for example, restaurants near me).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LocalSearchClient);
  }
}(this, function(expect, LocalSearchClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LocalSearchClient.PostalAddress();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PostalAddress', function() {
    it('should create an instance of PostalAddress', function() {
      // uncomment below and update the code to test PostalAddress
      //var instance = new LocalSearchClient.PostalAddress();
      //expect(instance).to.be.a(LocalSearchClient.PostalAddress);
    });

    it('should have the property addressCountry (base name: "addressCountry")', function() {
      // uncomment below and update the code to test the property addressCountry
      //var instance = new LocalSearchClient.PostalAddress();
      //expect(instance).to.be();
    });

    it('should have the property addressLocality (base name: "addressLocality")', function() {
      // uncomment below and update the code to test the property addressLocality
      //var instance = new LocalSearchClient.PostalAddress();
      //expect(instance).to.be();
    });

    it('should have the property addressRegion (base name: "addressRegion")', function() {
      // uncomment below and update the code to test the property addressRegion
      //var instance = new LocalSearchClient.PostalAddress();
      //expect(instance).to.be();
    });

    it('should have the property addressRegionAbbreviation (base name: "addressRegionAbbreviation")', function() {
      // uncomment below and update the code to test the property addressRegionAbbreviation
      //var instance = new LocalSearchClient.PostalAddress();
      //expect(instance).to.be();
    });

    it('should have the property addressSubregion (base name: "addressSubregion")', function() {
      // uncomment below and update the code to test the property addressSubregion
      //var instance = new LocalSearchClient.PostalAddress();
      //expect(instance).to.be();
    });

    it('should have the property countryIso (base name: "countryIso")', function() {
      // uncomment below and update the code to test the property countryIso
      //var instance = new LocalSearchClient.PostalAddress();
      //expect(instance).to.be();
    });

    it('should have the property formattingRuleId (base name: "formattingRuleId")', function() {
      // uncomment below and update the code to test the property formattingRuleId
      //var instance = new LocalSearchClient.PostalAddress();
      //expect(instance).to.be();
    });

    it('should have the property houseNumber (base name: "houseNumber")', function() {
      // uncomment below and update the code to test the property houseNumber
      //var instance = new LocalSearchClient.PostalAddress();
      //expect(instance).to.be();
    });

    it('should have the property neighborhood (base name: "neighborhood")', function() {
      // uncomment below and update the code to test the property neighborhood
      //var instance = new LocalSearchClient.PostalAddress();
      //expect(instance).to.be();
    });

    it('should have the property postOfficeBoxNumber (base name: "postOfficeBoxNumber")', function() {
      // uncomment below and update the code to test the property postOfficeBoxNumber
      //var instance = new LocalSearchClient.PostalAddress();
      //expect(instance).to.be();
    });

    it('should have the property postalCode (base name: "postalCode")', function() {
      // uncomment below and update the code to test the property postalCode
      //var instance = new LocalSearchClient.PostalAddress();
      //expect(instance).to.be();
    });

    it('should have the property streetAddress (base name: "streetAddress")', function() {
      // uncomment below and update the code to test the property streetAddress
      //var instance = new LocalSearchClient.PostalAddress();
      //expect(instance).to.be();
    });

    it('should have the property streetName (base name: "streetName")', function() {
      // uncomment below and update the code to test the property streetName
      //var instance = new LocalSearchClient.PostalAddress();
      //expect(instance).to.be();
    });

    it('should have the property text (base name: "text")', function() {
      // uncomment below and update the code to test the property text
      //var instance = new LocalSearchClient.PostalAddress();
      //expect(instance).to.be();
    });

  });

}));
