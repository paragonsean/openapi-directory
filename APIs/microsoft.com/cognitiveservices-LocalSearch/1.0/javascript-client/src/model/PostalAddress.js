/**
 * Local Search Client
 * The Local Search client lets you send a search query to Bing and get back search results that include local businesses such as restaurants, hotels, retail stores, or other local businesses. The query can specify the name of the local business or it can ask for a list (for example, restaurants near me).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Action from './Action';
import EntitiesEntityPresentationInfo from './EntitiesEntityPresentationInfo';
import StructuredValue from './StructuredValue';

/**
 * The PostalAddress model module.
 * @module model/PostalAddress
 * @version 1.0
 */
class PostalAddress {
    /**
     * Constructs a new <code>PostalAddress</code>.
     * Defines a postal address.
     * @alias module:model/PostalAddress
     * @extends module:model/StructuredValue
     * @implements module:model/StructuredValue
     * @param type {String} 
     */
    constructor(type) { 
        StructuredValue.initialize(this, type);
        PostalAddress.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>PostalAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostalAddress} obj Optional instance to populate.
     * @return {module:model/PostalAddress} The populated <code>PostalAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostalAddress();
            StructuredValue.constructFromObject(data, obj);
            StructuredValue.constructFromObject(data, obj);

            if (data.hasOwnProperty('addressCountry')) {
                obj['addressCountry'] = ApiClient.convertToType(data['addressCountry'], 'String');
            }
            if (data.hasOwnProperty('addressLocality')) {
                obj['addressLocality'] = ApiClient.convertToType(data['addressLocality'], 'String');
            }
            if (data.hasOwnProperty('addressRegion')) {
                obj['addressRegion'] = ApiClient.convertToType(data['addressRegion'], 'String');
            }
            if (data.hasOwnProperty('addressRegionAbbreviation')) {
                obj['addressRegionAbbreviation'] = ApiClient.convertToType(data['addressRegionAbbreviation'], 'String');
            }
            if (data.hasOwnProperty('addressSubregion')) {
                obj['addressSubregion'] = ApiClient.convertToType(data['addressSubregion'], 'String');
            }
            if (data.hasOwnProperty('countryIso')) {
                obj['countryIso'] = ApiClient.convertToType(data['countryIso'], 'String');
            }
            if (data.hasOwnProperty('formattingRuleId')) {
                obj['formattingRuleId'] = ApiClient.convertToType(data['formattingRuleId'], 'String');
            }
            if (data.hasOwnProperty('houseNumber')) {
                obj['houseNumber'] = ApiClient.convertToType(data['houseNumber'], 'String');
            }
            if (data.hasOwnProperty('neighborhood')) {
                obj['neighborhood'] = ApiClient.convertToType(data['neighborhood'], 'String');
            }
            if (data.hasOwnProperty('postOfficeBoxNumber')) {
                obj['postOfficeBoxNumber'] = ApiClient.convertToType(data['postOfficeBoxNumber'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('streetAddress')) {
                obj['streetAddress'] = ApiClient.convertToType(data['streetAddress'], 'String');
            }
            if (data.hasOwnProperty('streetName')) {
                obj['streetName'] = ApiClient.convertToType(data['streetName'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostalAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostalAddress</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostalAddress.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['addressCountry'] && !(typeof data['addressCountry'] === 'string' || data['addressCountry'] instanceof String)) {
            throw new Error("Expected the field `addressCountry` to be a primitive type in the JSON string but got " + data['addressCountry']);
        }
        // ensure the json data is a string
        if (data['addressLocality'] && !(typeof data['addressLocality'] === 'string' || data['addressLocality'] instanceof String)) {
            throw new Error("Expected the field `addressLocality` to be a primitive type in the JSON string but got " + data['addressLocality']);
        }
        // ensure the json data is a string
        if (data['addressRegion'] && !(typeof data['addressRegion'] === 'string' || data['addressRegion'] instanceof String)) {
            throw new Error("Expected the field `addressRegion` to be a primitive type in the JSON string but got " + data['addressRegion']);
        }
        // ensure the json data is a string
        if (data['addressRegionAbbreviation'] && !(typeof data['addressRegionAbbreviation'] === 'string' || data['addressRegionAbbreviation'] instanceof String)) {
            throw new Error("Expected the field `addressRegionAbbreviation` to be a primitive type in the JSON string but got " + data['addressRegionAbbreviation']);
        }
        // ensure the json data is a string
        if (data['addressSubregion'] && !(typeof data['addressSubregion'] === 'string' || data['addressSubregion'] instanceof String)) {
            throw new Error("Expected the field `addressSubregion` to be a primitive type in the JSON string but got " + data['addressSubregion']);
        }
        // ensure the json data is a string
        if (data['countryIso'] && !(typeof data['countryIso'] === 'string' || data['countryIso'] instanceof String)) {
            throw new Error("Expected the field `countryIso` to be a primitive type in the JSON string but got " + data['countryIso']);
        }
        // ensure the json data is a string
        if (data['formattingRuleId'] && !(typeof data['formattingRuleId'] === 'string' || data['formattingRuleId'] instanceof String)) {
            throw new Error("Expected the field `formattingRuleId` to be a primitive type in the JSON string but got " + data['formattingRuleId']);
        }
        // ensure the json data is a string
        if (data['houseNumber'] && !(typeof data['houseNumber'] === 'string' || data['houseNumber'] instanceof String)) {
            throw new Error("Expected the field `houseNumber` to be a primitive type in the JSON string but got " + data['houseNumber']);
        }
        // ensure the json data is a string
        if (data['neighborhood'] && !(typeof data['neighborhood'] === 'string' || data['neighborhood'] instanceof String)) {
            throw new Error("Expected the field `neighborhood` to be a primitive type in the JSON string but got " + data['neighborhood']);
        }
        // ensure the json data is a string
        if (data['postOfficeBoxNumber'] && !(typeof data['postOfficeBoxNumber'] === 'string' || data['postOfficeBoxNumber'] instanceof String)) {
            throw new Error("Expected the field `postOfficeBoxNumber` to be a primitive type in the JSON string but got " + data['postOfficeBoxNumber']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['streetAddress'] && !(typeof data['streetAddress'] === 'string' || data['streetAddress'] instanceof String)) {
            throw new Error("Expected the field `streetAddress` to be a primitive type in the JSON string but got " + data['streetAddress']);
        }
        // ensure the json data is a string
        if (data['streetName'] && !(typeof data['streetName'] === 'string' || data['streetName'] instanceof String)) {
            throw new Error("Expected the field `streetName` to be a primitive type in the JSON string but got " + data['streetName']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}

PostalAddress.RequiredProperties = ["_type"];

/**
 * The country/region where the street address is located. This could be the two-letter ISO code. For example, US, or the full name, United States.
 * @member {String} addressCountry
 */
PostalAddress.prototype['addressCountry'] = undefined;

/**
 * The city where the street address is located. For example, Seattle.
 * @member {String} addressLocality
 */
PostalAddress.prototype['addressLocality'] = undefined;

/**
 * The state or province code where the street address is located. This could be the two-letter code. For example, WA, or the full name , Washington.
 * @member {String} addressRegion
 */
PostalAddress.prototype['addressRegion'] = undefined;

/**
 * Region Abbreviation. For example, WA.
 * @member {String} addressRegionAbbreviation
 */
PostalAddress.prototype['addressRegionAbbreviation'] = undefined;

/**
 * @member {String} addressSubregion
 */
PostalAddress.prototype['addressSubregion'] = undefined;

/**
 * The two letter ISO code of this country. For example, US.
 * @member {String} countryIso
 */
PostalAddress.prototype['countryIso'] = undefined;

/**
 * @member {String} formattingRuleId
 */
PostalAddress.prototype['formattingRuleId'] = undefined;

/**
 * @member {String} houseNumber
 */
PostalAddress.prototype['houseNumber'] = undefined;

/**
 * The neighborhood where the street address is located. For example, Westlake.
 * @member {String} neighborhood
 */
PostalAddress.prototype['neighborhood'] = undefined;

/**
 * @member {String} postOfficeBoxNumber
 */
PostalAddress.prototype['postOfficeBoxNumber'] = undefined;

/**
 * The zip code or postal code where the street address is located. For example, 98052.
 * @member {String} postalCode
 */
PostalAddress.prototype['postalCode'] = undefined;

/**
 * @member {String} streetAddress
 */
PostalAddress.prototype['streetAddress'] = undefined;

/**
 * @member {String} streetName
 */
PostalAddress.prototype['streetName'] = undefined;

/**
 * The complete address. For example, 2100 Westlake Ave N, Bellevue, WA 98052.
 * @member {String} text
 */
PostalAddress.prototype['text'] = undefined;


// Implement StructuredValue interface:
/**
 * @member {module:model/EntitiesEntityPresentationInfo} entityPresentationInfo
 */
StructuredValue.prototype['entityPresentationInfo'] = undefined;
/**
 * The name of the thing represented by this object.
 * @member {String} name
 */
StructuredValue.prototype['name'] = undefined;
/**
 * The URL to get more information about the thing represented by this object.
 * @member {String} url
 */
StructuredValue.prototype['url'] = undefined;
/**
 * @member {String} adaptiveCard
 */
StructuredValue.prototype['adaptiveCard'] = undefined;
/**
 * @member {Array.<module:model/Action>} immediateAction
 */
StructuredValue.prototype['immediateAction'] = undefined;
/**
 * @member {Array.<module:model/Action>} potentialAction
 */
StructuredValue.prototype['potentialAction'] = undefined;
/**
 * @member {String} preferredClickthroughUrl
 */
StructuredValue.prototype['preferredClickthroughUrl'] = undefined;
/**
 * The URL that returns this resource.
 * @member {String} readLink
 */
StructuredValue.prototype['readLink'] = undefined;
/**
 * The URL to Bing's search result for this item.
 * @member {String} webSearchUrl
 */
StructuredValue.prototype['webSearchUrl'] = undefined;
/**
 * A String identifier.
 * @member {String} id
 */
StructuredValue.prototype['id'] = undefined;
/**
 * @member {String} _type
 */
StructuredValue.prototype['_type'] = undefined;




export default PostalAddress;

