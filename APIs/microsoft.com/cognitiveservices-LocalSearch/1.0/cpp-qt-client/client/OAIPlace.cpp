/**
 * Local Search Client
 * The Local Search client lets you send a search query to Bing and get back search results that include local businesses such as restaurants, hotels, retail stores, or other local businesses. The query can specify the name of the local business or it can ask for a list (for example, restaurants near me).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlace::OAIPlace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlace::OAIPlace() {
    this->initializeModel();
}

OAIPlace::~OAIPlace() {}

void OAIPlace::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_geo_isSet = false;
    m_geo_isValid = false;

    m_routable_point_isSet = false;
    m_routable_point_isValid = false;

    m_telephone_isSet = false;
    m_telephone_isValid = false;

    m_entity_presentation_info_isSet = false;
    m_entity_presentation_info_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_adaptive_card_isSet = false;
    m_adaptive_card_isValid = false;

    m_immediate_action_isSet = false;
    m_immediate_action_isValid = false;

    m_potential_action_isSet = false;
    m_potential_action_isValid = false;

    m_preferred_clickthrough_url_isSet = false;
    m_preferred_clickthrough_url_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIPlace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlace::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_geo_isValid = ::OpenAPI::fromJsonValue(m_geo, json[QString("geo")]);
    m_geo_isSet = !json[QString("geo")].isNull() && m_geo_isValid;

    m_routable_point_isValid = ::OpenAPI::fromJsonValue(m_routable_point, json[QString("routablePoint")]);
    m_routable_point_isSet = !json[QString("routablePoint")].isNull() && m_routable_point_isValid;

    m_telephone_isValid = ::OpenAPI::fromJsonValue(m_telephone, json[QString("telephone")]);
    m_telephone_isSet = !json[QString("telephone")].isNull() && m_telephone_isValid;

    m_entity_presentation_info_isValid = ::OpenAPI::fromJsonValue(m_entity_presentation_info, json[QString("entityPresentationInfo")]);
    m_entity_presentation_info_isSet = !json[QString("entityPresentationInfo")].isNull() && m_entity_presentation_info_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_adaptive_card_isValid = ::OpenAPI::fromJsonValue(m_adaptive_card, json[QString("adaptiveCard")]);
    m_adaptive_card_isSet = !json[QString("adaptiveCard")].isNull() && m_adaptive_card_isValid;

    m_immediate_action_isValid = ::OpenAPI::fromJsonValue(m_immediate_action, json[QString("immediateAction")]);
    m_immediate_action_isSet = !json[QString("immediateAction")].isNull() && m_immediate_action_isValid;

    m_potential_action_isValid = ::OpenAPI::fromJsonValue(m_potential_action, json[QString("potentialAction")]);
    m_potential_action_isSet = !json[QString("potentialAction")].isNull() && m_potential_action_isValid;

    m_preferred_clickthrough_url_isValid = ::OpenAPI::fromJsonValue(m_preferred_clickthrough_url, json[QString("preferredClickthroughUrl")]);
    m_preferred_clickthrough_url_isSet = !json[QString("preferredClickthroughUrl")].isNull() && m_preferred_clickthrough_url_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIPlace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlace::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_geo.isSet()) {
        obj.insert(QString("geo"), ::OpenAPI::toJsonValue(m_geo));
    }
    if (m_routable_point.isSet()) {
        obj.insert(QString("routablePoint"), ::OpenAPI::toJsonValue(m_routable_point));
    }
    if (m_telephone_isSet) {
        obj.insert(QString("telephone"), ::OpenAPI::toJsonValue(m_telephone));
    }
    if (m_entity_presentation_info.isSet()) {
        obj.insert(QString("entityPresentationInfo"), ::OpenAPI::toJsonValue(m_entity_presentation_info));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_adaptive_card_isSet) {
        obj.insert(QString("adaptiveCard"), ::OpenAPI::toJsonValue(m_adaptive_card));
    }
    if (m_immediate_action.size() > 0) {
        obj.insert(QString("immediateAction"), ::OpenAPI::toJsonValue(m_immediate_action));
    }
    if (m_potential_action.size() > 0) {
        obj.insert(QString("potentialAction"), ::OpenAPI::toJsonValue(m_potential_action));
    }
    if (m_preferred_clickthrough_url_isSet) {
        obj.insert(QString("preferredClickthroughUrl"), ::OpenAPI::toJsonValue(m_preferred_clickthrough_url));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

OAIPostalAddress OAIPlace::getAddress() const {
    return m_address;
}
void OAIPlace::setAddress(const OAIPostalAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIPlace::is_address_Set() const{
    return m_address_isSet;
}

bool OAIPlace::is_address_Valid() const{
    return m_address_isValid;
}

OAIGeoCoordinates OAIPlace::getGeo() const {
    return m_geo;
}
void OAIPlace::setGeo(const OAIGeoCoordinates &geo) {
    m_geo = geo;
    m_geo_isSet = true;
}

bool OAIPlace::is_geo_Set() const{
    return m_geo_isSet;
}

bool OAIPlace::is_geo_Valid() const{
    return m_geo_isValid;
}

OAIGeoCoordinates OAIPlace::getRoutablePoint() const {
    return m_routable_point;
}
void OAIPlace::setRoutablePoint(const OAIGeoCoordinates &routable_point) {
    m_routable_point = routable_point;
    m_routable_point_isSet = true;
}

bool OAIPlace::is_routable_point_Set() const{
    return m_routable_point_isSet;
}

bool OAIPlace::is_routable_point_Valid() const{
    return m_routable_point_isValid;
}

QString OAIPlace::getTelephone() const {
    return m_telephone;
}
void OAIPlace::setTelephone(const QString &telephone) {
    m_telephone = telephone;
    m_telephone_isSet = true;
}

bool OAIPlace::is_telephone_Set() const{
    return m_telephone_isSet;
}

bool OAIPlace::is_telephone_Valid() const{
    return m_telephone_isValid;
}

OAIEntitiesEntityPresentationInfo OAIPlace::getEntityPresentationInfo() const {
    return m_entity_presentation_info;
}
void OAIPlace::setEntityPresentationInfo(const OAIEntitiesEntityPresentationInfo &entity_presentation_info) {
    m_entity_presentation_info = entity_presentation_info;
    m_entity_presentation_info_isSet = true;
}

bool OAIPlace::is_entity_presentation_info_Set() const{
    return m_entity_presentation_info_isSet;
}

bool OAIPlace::is_entity_presentation_info_Valid() const{
    return m_entity_presentation_info_isValid;
}

QString OAIPlace::getName() const {
    return m_name;
}
void OAIPlace::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlace::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlace::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPlace::getUrl() const {
    return m_url;
}
void OAIPlace::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPlace::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPlace::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIPlace::getAdaptiveCard() const {
    return m_adaptive_card;
}
void OAIPlace::setAdaptiveCard(const QString &adaptive_card) {
    m_adaptive_card = adaptive_card;
    m_adaptive_card_isSet = true;
}

bool OAIPlace::is_adaptive_card_Set() const{
    return m_adaptive_card_isSet;
}

bool OAIPlace::is_adaptive_card_Valid() const{
    return m_adaptive_card_isValid;
}

QList<OAIAction> OAIPlace::getImmediateAction() const {
    return m_immediate_action;
}
void OAIPlace::setImmediateAction(const QList<OAIAction> &immediate_action) {
    m_immediate_action = immediate_action;
    m_immediate_action_isSet = true;
}

bool OAIPlace::is_immediate_action_Set() const{
    return m_immediate_action_isSet;
}

bool OAIPlace::is_immediate_action_Valid() const{
    return m_immediate_action_isValid;
}

QList<OAIAction> OAIPlace::getPotentialAction() const {
    return m_potential_action;
}
void OAIPlace::setPotentialAction(const QList<OAIAction> &potential_action) {
    m_potential_action = potential_action;
    m_potential_action_isSet = true;
}

bool OAIPlace::is_potential_action_Set() const{
    return m_potential_action_isSet;
}

bool OAIPlace::is_potential_action_Valid() const{
    return m_potential_action_isValid;
}

QString OAIPlace::getPreferredClickthroughUrl() const {
    return m_preferred_clickthrough_url;
}
void OAIPlace::setPreferredClickthroughUrl(const QString &preferred_clickthrough_url) {
    m_preferred_clickthrough_url = preferred_clickthrough_url;
    m_preferred_clickthrough_url_isSet = true;
}

bool OAIPlace::is_preferred_clickthrough_url_Set() const{
    return m_preferred_clickthrough_url_isSet;
}

bool OAIPlace::is_preferred_clickthrough_url_Valid() const{
    return m_preferred_clickthrough_url_isValid;
}

QString OAIPlace::getReadLink() const {
    return m_read_link;
}
void OAIPlace::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAIPlace::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAIPlace::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAIPlace::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIPlace::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIPlace::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIPlace::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIPlace::getId() const {
    return m_id;
}
void OAIPlace::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlace::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlace::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPlace::getType() const {
    return m__type;
}
void OAIPlace::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIPlace::is__type_Set() const{
    return m__type_isSet;
}

bool OAIPlace::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIPlace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_routable_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_telephone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_presentation_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adaptive_card_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_immediate_action.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_potential_action.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_clickthrough_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlace::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
