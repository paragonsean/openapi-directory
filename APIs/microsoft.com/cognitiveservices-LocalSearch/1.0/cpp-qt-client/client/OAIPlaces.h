/**
 * Local Search Client
 * The Local Search client lets you send a search query to Bing and get back search results that include local businesses such as restaurants, hotels, retail stores, or other local businesses. The query can specify the name of the local business or it can ask for a list (for example, restaurants near me).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlaces.h
 *
 * Defines a local entity answer.
 */

#ifndef OAIPlaces_H
#define OAIPlaces_H

#include <QJsonObject>

#include "OAIAction.h"
#include "OAIQueryContext.h"
#include "OAISearchResultsAnswer.h"
#include "OAIThing.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIThing;
class OAIQueryContext;
class OAIAction;

class OAIPlaces : public OAIObject {
public:
    OAIPlaces();
    OAIPlaces(QString json);
    ~OAIPlaces() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIThing> getValue() const;
    void setValue(const QList<OAIThing> &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    bool isIsFamilyFriendly() const;
    void setIsFamilyFriendly(const bool &is_family_friendly);
    bool is_is_family_friendly_Set() const;
    bool is_is_family_friendly_Valid() const;

    OAIQueryContext getQueryContext() const;
    void setQueryContext(const OAIQueryContext &query_context);
    bool is_query_context_Set() const;
    bool is_query_context_Valid() const;

    qint64 getTotalEstimatedMatches() const;
    void setTotalEstimatedMatches(const qint64 &total_estimated_matches);
    bool is_total_estimated_matches_Set() const;
    bool is_total_estimated_matches_Valid() const;

    QString getAdaptiveCard() const;
    void setAdaptiveCard(const QString &adaptive_card);
    bool is_adaptive_card_Set() const;
    bool is_adaptive_card_Valid() const;

    QList<OAIAction> getImmediateAction() const;
    void setImmediateAction(const QList<OAIAction> &immediate_action);
    bool is_immediate_action_Set() const;
    bool is_immediate_action_Valid() const;

    QList<OAIAction> getPotentialAction() const;
    void setPotentialAction(const QList<OAIAction> &potential_action);
    bool is_potential_action_Set() const;
    bool is_potential_action_Valid() const;

    QString getPreferredClickthroughUrl() const;
    void setPreferredClickthroughUrl(const QString &preferred_clickthrough_url);
    bool is_preferred_clickthrough_url_Set() const;
    bool is_preferred_clickthrough_url_Valid() const;

    QString getReadLink() const;
    void setReadLink(const QString &read_link);
    bool is_read_link_Set() const;
    bool is_read_link_Valid() const;

    QString getWebSearchUrl() const;
    void setWebSearchUrl(const QString &web_search_url);
    bool is_web_search_url_Set() const;
    bool is_web_search_url_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getType() const;
    void setType(const QString &_type);
    bool is__type_Set() const;
    bool is__type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIThing> m_value;
    bool m_value_isSet;
    bool m_value_isValid;

    bool m_is_family_friendly;
    bool m_is_family_friendly_isSet;
    bool m_is_family_friendly_isValid;

    OAIQueryContext m_query_context;
    bool m_query_context_isSet;
    bool m_query_context_isValid;

    qint64 m_total_estimated_matches;
    bool m_total_estimated_matches_isSet;
    bool m_total_estimated_matches_isValid;

    QString m_adaptive_card;
    bool m_adaptive_card_isSet;
    bool m_adaptive_card_isValid;

    QList<OAIAction> m_immediate_action;
    bool m_immediate_action_isSet;
    bool m_immediate_action_isValid;

    QList<OAIAction> m_potential_action;
    bool m_potential_action_isSet;
    bool m_potential_action_isValid;

    QString m_preferred_clickthrough_url;
    bool m_preferred_clickthrough_url_isSet;
    bool m_preferred_clickthrough_url_isValid;

    QString m_read_link;
    bool m_read_link_isSet;
    bool m_read_link_isValid;

    QString m_web_search_url;
    bool m_web_search_url_isSet;
    bool m_web_search_url_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m__type;
    bool m__type_isSet;
    bool m__type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlaces)

#endif // OAIPlaces_H
