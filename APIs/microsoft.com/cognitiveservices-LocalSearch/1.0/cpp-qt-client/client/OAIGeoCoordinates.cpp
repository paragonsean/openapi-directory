/**
 * Local Search Client
 * The Local Search client lets you send a search query to Bing and get back search results that include local businesses such as restaurants, hotels, retail stores, or other local businesses. The query can specify the name of the local business or it can ask for a list (for example, restaurants near me).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoCoordinates.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoCoordinates::OAIGeoCoordinates(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoCoordinates::OAIGeoCoordinates() {
    this->initializeModel();
}

OAIGeoCoordinates::~OAIGeoCoordinates() {}

void OAIGeoCoordinates::initializeModel() {

    m__type_isSet = false;
    m__type_isValid = false;

    m_elevation_isSet = false;
    m_elevation_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;
}

void OAIGeoCoordinates::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoCoordinates::fromJsonObject(QJsonObject json) {

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;

    m_elevation_isValid = ::OpenAPI::fromJsonValue(m_elevation, json[QString("elevation")]);
    m_elevation_isSet = !json[QString("elevation")].isNull() && m_elevation_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;
}

QString OAIGeoCoordinates::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoCoordinates::asJsonObject() const {
    QJsonObject obj;
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    if (m_elevation_isSet) {
        obj.insert(QString("elevation"), ::OpenAPI::toJsonValue(m_elevation));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    return obj;
}

QString OAIGeoCoordinates::getType() const {
    return m__type;
}
void OAIGeoCoordinates::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIGeoCoordinates::is__type_Set() const{
    return m__type_isSet;
}

bool OAIGeoCoordinates::is__type_Valid() const{
    return m__type_isValid;
}

double OAIGeoCoordinates::getElevation() const {
    return m_elevation;
}
void OAIGeoCoordinates::setElevation(const double &elevation) {
    m_elevation = elevation;
    m_elevation_isSet = true;
}

bool OAIGeoCoordinates::is_elevation_Set() const{
    return m_elevation_isSet;
}

bool OAIGeoCoordinates::is_elevation_Valid() const{
    return m_elevation_isValid;
}

double OAIGeoCoordinates::getLatitude() const {
    return m_latitude;
}
void OAIGeoCoordinates::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIGeoCoordinates::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIGeoCoordinates::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIGeoCoordinates::getLongitude() const {
    return m_longitude;
}
void OAIGeoCoordinates::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIGeoCoordinates::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIGeoCoordinates::is_longitude_Valid() const{
    return m_longitude_isValid;
}

bool OAIGeoCoordinates::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elevation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoCoordinates::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && m_latitude_isValid && m_longitude_isValid && true;
}

} // namespace OpenAPI
