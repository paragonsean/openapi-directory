/**
 * Local Search Client
 * The Local Search client lets you send a search query to Bing and get back search results that include local businesses such as restaurants, hotels, retail stores, or other local businesses. The query can specify the name of the local business or it can ask for a list (for example, restaurants near me).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThing::OAIThing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThing::OAIThing() {
    this->initializeModel();
}

OAIThing::~OAIThing() {}

void OAIThing::initializeModel() {

    m_entity_presentation_info_isSet = false;
    m_entity_presentation_info_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_adaptive_card_isSet = false;
    m_adaptive_card_isValid = false;

    m_immediate_action_isSet = false;
    m_immediate_action_isValid = false;

    m_potential_action_isSet = false;
    m_potential_action_isValid = false;

    m_preferred_clickthrough_url_isSet = false;
    m_preferred_clickthrough_url_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIThing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThing::fromJsonObject(QJsonObject json) {

    m_entity_presentation_info_isValid = ::OpenAPI::fromJsonValue(m_entity_presentation_info, json[QString("entityPresentationInfo")]);
    m_entity_presentation_info_isSet = !json[QString("entityPresentationInfo")].isNull() && m_entity_presentation_info_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_adaptive_card_isValid = ::OpenAPI::fromJsonValue(m_adaptive_card, json[QString("adaptiveCard")]);
    m_adaptive_card_isSet = !json[QString("adaptiveCard")].isNull() && m_adaptive_card_isValid;

    m_immediate_action_isValid = ::OpenAPI::fromJsonValue(m_immediate_action, json[QString("immediateAction")]);
    m_immediate_action_isSet = !json[QString("immediateAction")].isNull() && m_immediate_action_isValid;

    m_potential_action_isValid = ::OpenAPI::fromJsonValue(m_potential_action, json[QString("potentialAction")]);
    m_potential_action_isSet = !json[QString("potentialAction")].isNull() && m_potential_action_isValid;

    m_preferred_clickthrough_url_isValid = ::OpenAPI::fromJsonValue(m_preferred_clickthrough_url, json[QString("preferredClickthroughUrl")]);
    m_preferred_clickthrough_url_isSet = !json[QString("preferredClickthroughUrl")].isNull() && m_preferred_clickthrough_url_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIThing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThing::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_presentation_info.isSet()) {
        obj.insert(QString("entityPresentationInfo"), ::OpenAPI::toJsonValue(m_entity_presentation_info));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_adaptive_card_isSet) {
        obj.insert(QString("adaptiveCard"), ::OpenAPI::toJsonValue(m_adaptive_card));
    }
    if (m_immediate_action.size() > 0) {
        obj.insert(QString("immediateAction"), ::OpenAPI::toJsonValue(m_immediate_action));
    }
    if (m_potential_action.size() > 0) {
        obj.insert(QString("potentialAction"), ::OpenAPI::toJsonValue(m_potential_action));
    }
    if (m_preferred_clickthrough_url_isSet) {
        obj.insert(QString("preferredClickthroughUrl"), ::OpenAPI::toJsonValue(m_preferred_clickthrough_url));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

OAIEntitiesEntityPresentationInfo OAIThing::getEntityPresentationInfo() const {
    return m_entity_presentation_info;
}
void OAIThing::setEntityPresentationInfo(const OAIEntitiesEntityPresentationInfo &entity_presentation_info) {
    m_entity_presentation_info = entity_presentation_info;
    m_entity_presentation_info_isSet = true;
}

bool OAIThing::is_entity_presentation_info_Set() const{
    return m_entity_presentation_info_isSet;
}

bool OAIThing::is_entity_presentation_info_Valid() const{
    return m_entity_presentation_info_isValid;
}

QString OAIThing::getName() const {
    return m_name;
}
void OAIThing::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIThing::is_name_Set() const{
    return m_name_isSet;
}

bool OAIThing::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIThing::getUrl() const {
    return m_url;
}
void OAIThing::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIThing::is_url_Set() const{
    return m_url_isSet;
}

bool OAIThing::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIThing::getAdaptiveCard() const {
    return m_adaptive_card;
}
void OAIThing::setAdaptiveCard(const QString &adaptive_card) {
    m_adaptive_card = adaptive_card;
    m_adaptive_card_isSet = true;
}

bool OAIThing::is_adaptive_card_Set() const{
    return m_adaptive_card_isSet;
}

bool OAIThing::is_adaptive_card_Valid() const{
    return m_adaptive_card_isValid;
}

QList<OAIAction> OAIThing::getImmediateAction() const {
    return m_immediate_action;
}
void OAIThing::setImmediateAction(const QList<OAIAction> &immediate_action) {
    m_immediate_action = immediate_action;
    m_immediate_action_isSet = true;
}

bool OAIThing::is_immediate_action_Set() const{
    return m_immediate_action_isSet;
}

bool OAIThing::is_immediate_action_Valid() const{
    return m_immediate_action_isValid;
}

QList<OAIAction> OAIThing::getPotentialAction() const {
    return m_potential_action;
}
void OAIThing::setPotentialAction(const QList<OAIAction> &potential_action) {
    m_potential_action = potential_action;
    m_potential_action_isSet = true;
}

bool OAIThing::is_potential_action_Set() const{
    return m_potential_action_isSet;
}

bool OAIThing::is_potential_action_Valid() const{
    return m_potential_action_isValid;
}

QString OAIThing::getPreferredClickthroughUrl() const {
    return m_preferred_clickthrough_url;
}
void OAIThing::setPreferredClickthroughUrl(const QString &preferred_clickthrough_url) {
    m_preferred_clickthrough_url = preferred_clickthrough_url;
    m_preferred_clickthrough_url_isSet = true;
}

bool OAIThing::is_preferred_clickthrough_url_Set() const{
    return m_preferred_clickthrough_url_isSet;
}

bool OAIThing::is_preferred_clickthrough_url_Valid() const{
    return m_preferred_clickthrough_url_isValid;
}

QString OAIThing::getReadLink() const {
    return m_read_link;
}
void OAIThing::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAIThing::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAIThing::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAIThing::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIThing::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIThing::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIThing::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIThing::getId() const {
    return m_id;
}
void OAIThing::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIThing::is_id_Set() const{
    return m_id_isSet;
}

bool OAIThing::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIThing::getType() const {
    return m__type;
}
void OAIThing::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIThing::is__type_Set() const{
    return m__type_isSet;
}

bool OAIThing::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIThing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_presentation_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adaptive_card_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_immediate_action.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_potential_action.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_clickthrough_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThing::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
