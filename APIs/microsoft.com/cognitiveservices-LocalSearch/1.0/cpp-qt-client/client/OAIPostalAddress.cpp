/**
 * Local Search Client
 * The Local Search client lets you send a search query to Bing and get back search results that include local businesses such as restaurants, hotels, retail stores, or other local businesses. The query can specify the name of the local business or it can ask for a list (for example, restaurants near me).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostalAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostalAddress::OAIPostalAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostalAddress::OAIPostalAddress() {
    this->initializeModel();
}

OAIPostalAddress::~OAIPostalAddress() {}

void OAIPostalAddress::initializeModel() {

    m_address_country_isSet = false;
    m_address_country_isValid = false;

    m_address_locality_isSet = false;
    m_address_locality_isValid = false;

    m_address_region_isSet = false;
    m_address_region_isValid = false;

    m_address_region_abbreviation_isSet = false;
    m_address_region_abbreviation_isValid = false;

    m_address_subregion_isSet = false;
    m_address_subregion_isValid = false;

    m_country_iso_isSet = false;
    m_country_iso_isValid = false;

    m_formatting_rule_id_isSet = false;
    m_formatting_rule_id_isValid = false;

    m_house_number_isSet = false;
    m_house_number_isValid = false;

    m_neighborhood_isSet = false;
    m_neighborhood_isValid = false;

    m_post_office_box_number_isSet = false;
    m_post_office_box_number_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_street_address_isSet = false;
    m_street_address_isValid = false;

    m_street_name_isSet = false;
    m_street_name_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_entity_presentation_info_isSet = false;
    m_entity_presentation_info_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_adaptive_card_isSet = false;
    m_adaptive_card_isValid = false;

    m_immediate_action_isSet = false;
    m_immediate_action_isValid = false;

    m_potential_action_isSet = false;
    m_potential_action_isValid = false;

    m_preferred_clickthrough_url_isSet = false;
    m_preferred_clickthrough_url_isValid = false;

    m_read_link_isSet = false;
    m_read_link_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIPostalAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostalAddress::fromJsonObject(QJsonObject json) {

    m_address_country_isValid = ::OpenAPI::fromJsonValue(m_address_country, json[QString("addressCountry")]);
    m_address_country_isSet = !json[QString("addressCountry")].isNull() && m_address_country_isValid;

    m_address_locality_isValid = ::OpenAPI::fromJsonValue(m_address_locality, json[QString("addressLocality")]);
    m_address_locality_isSet = !json[QString("addressLocality")].isNull() && m_address_locality_isValid;

    m_address_region_isValid = ::OpenAPI::fromJsonValue(m_address_region, json[QString("addressRegion")]);
    m_address_region_isSet = !json[QString("addressRegion")].isNull() && m_address_region_isValid;

    m_address_region_abbreviation_isValid = ::OpenAPI::fromJsonValue(m_address_region_abbreviation, json[QString("addressRegionAbbreviation")]);
    m_address_region_abbreviation_isSet = !json[QString("addressRegionAbbreviation")].isNull() && m_address_region_abbreviation_isValid;

    m_address_subregion_isValid = ::OpenAPI::fromJsonValue(m_address_subregion, json[QString("addressSubregion")]);
    m_address_subregion_isSet = !json[QString("addressSubregion")].isNull() && m_address_subregion_isValid;

    m_country_iso_isValid = ::OpenAPI::fromJsonValue(m_country_iso, json[QString("countryIso")]);
    m_country_iso_isSet = !json[QString("countryIso")].isNull() && m_country_iso_isValid;

    m_formatting_rule_id_isValid = ::OpenAPI::fromJsonValue(m_formatting_rule_id, json[QString("formattingRuleId")]);
    m_formatting_rule_id_isSet = !json[QString("formattingRuleId")].isNull() && m_formatting_rule_id_isValid;

    m_house_number_isValid = ::OpenAPI::fromJsonValue(m_house_number, json[QString("houseNumber")]);
    m_house_number_isSet = !json[QString("houseNumber")].isNull() && m_house_number_isValid;

    m_neighborhood_isValid = ::OpenAPI::fromJsonValue(m_neighborhood, json[QString("neighborhood")]);
    m_neighborhood_isSet = !json[QString("neighborhood")].isNull() && m_neighborhood_isValid;

    m_post_office_box_number_isValid = ::OpenAPI::fromJsonValue(m_post_office_box_number, json[QString("postOfficeBoxNumber")]);
    m_post_office_box_number_isSet = !json[QString("postOfficeBoxNumber")].isNull() && m_post_office_box_number_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_street_address_isValid = ::OpenAPI::fromJsonValue(m_street_address, json[QString("streetAddress")]);
    m_street_address_isSet = !json[QString("streetAddress")].isNull() && m_street_address_isValid;

    m_street_name_isValid = ::OpenAPI::fromJsonValue(m_street_name, json[QString("streetName")]);
    m_street_name_isSet = !json[QString("streetName")].isNull() && m_street_name_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_entity_presentation_info_isValid = ::OpenAPI::fromJsonValue(m_entity_presentation_info, json[QString("entityPresentationInfo")]);
    m_entity_presentation_info_isSet = !json[QString("entityPresentationInfo")].isNull() && m_entity_presentation_info_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_adaptive_card_isValid = ::OpenAPI::fromJsonValue(m_adaptive_card, json[QString("adaptiveCard")]);
    m_adaptive_card_isSet = !json[QString("adaptiveCard")].isNull() && m_adaptive_card_isValid;

    m_immediate_action_isValid = ::OpenAPI::fromJsonValue(m_immediate_action, json[QString("immediateAction")]);
    m_immediate_action_isSet = !json[QString("immediateAction")].isNull() && m_immediate_action_isValid;

    m_potential_action_isValid = ::OpenAPI::fromJsonValue(m_potential_action, json[QString("potentialAction")]);
    m_potential_action_isSet = !json[QString("potentialAction")].isNull() && m_potential_action_isValid;

    m_preferred_clickthrough_url_isValid = ::OpenAPI::fromJsonValue(m_preferred_clickthrough_url, json[QString("preferredClickthroughUrl")]);
    m_preferred_clickthrough_url_isSet = !json[QString("preferredClickthroughUrl")].isNull() && m_preferred_clickthrough_url_isValid;

    m_read_link_isValid = ::OpenAPI::fromJsonValue(m_read_link, json[QString("readLink")]);
    m_read_link_isSet = !json[QString("readLink")].isNull() && m_read_link_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIPostalAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostalAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address_country_isSet) {
        obj.insert(QString("addressCountry"), ::OpenAPI::toJsonValue(m_address_country));
    }
    if (m_address_locality_isSet) {
        obj.insert(QString("addressLocality"), ::OpenAPI::toJsonValue(m_address_locality));
    }
    if (m_address_region_isSet) {
        obj.insert(QString("addressRegion"), ::OpenAPI::toJsonValue(m_address_region));
    }
    if (m_address_region_abbreviation_isSet) {
        obj.insert(QString("addressRegionAbbreviation"), ::OpenAPI::toJsonValue(m_address_region_abbreviation));
    }
    if (m_address_subregion_isSet) {
        obj.insert(QString("addressSubregion"), ::OpenAPI::toJsonValue(m_address_subregion));
    }
    if (m_country_iso_isSet) {
        obj.insert(QString("countryIso"), ::OpenAPI::toJsonValue(m_country_iso));
    }
    if (m_formatting_rule_id_isSet) {
        obj.insert(QString("formattingRuleId"), ::OpenAPI::toJsonValue(m_formatting_rule_id));
    }
    if (m_house_number_isSet) {
        obj.insert(QString("houseNumber"), ::OpenAPI::toJsonValue(m_house_number));
    }
    if (m_neighborhood_isSet) {
        obj.insert(QString("neighborhood"), ::OpenAPI::toJsonValue(m_neighborhood));
    }
    if (m_post_office_box_number_isSet) {
        obj.insert(QString("postOfficeBoxNumber"), ::OpenAPI::toJsonValue(m_post_office_box_number));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_street_address_isSet) {
        obj.insert(QString("streetAddress"), ::OpenAPI::toJsonValue(m_street_address));
    }
    if (m_street_name_isSet) {
        obj.insert(QString("streetName"), ::OpenAPI::toJsonValue(m_street_name));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_entity_presentation_info.isSet()) {
        obj.insert(QString("entityPresentationInfo"), ::OpenAPI::toJsonValue(m_entity_presentation_info));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_adaptive_card_isSet) {
        obj.insert(QString("adaptiveCard"), ::OpenAPI::toJsonValue(m_adaptive_card));
    }
    if (m_immediate_action.size() > 0) {
        obj.insert(QString("immediateAction"), ::OpenAPI::toJsonValue(m_immediate_action));
    }
    if (m_potential_action.size() > 0) {
        obj.insert(QString("potentialAction"), ::OpenAPI::toJsonValue(m_potential_action));
    }
    if (m_preferred_clickthrough_url_isSet) {
        obj.insert(QString("preferredClickthroughUrl"), ::OpenAPI::toJsonValue(m_preferred_clickthrough_url));
    }
    if (m_read_link_isSet) {
        obj.insert(QString("readLink"), ::OpenAPI::toJsonValue(m_read_link));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

QString OAIPostalAddress::getAddressCountry() const {
    return m_address_country;
}
void OAIPostalAddress::setAddressCountry(const QString &address_country) {
    m_address_country = address_country;
    m_address_country_isSet = true;
}

bool OAIPostalAddress::is_address_country_Set() const{
    return m_address_country_isSet;
}

bool OAIPostalAddress::is_address_country_Valid() const{
    return m_address_country_isValid;
}

QString OAIPostalAddress::getAddressLocality() const {
    return m_address_locality;
}
void OAIPostalAddress::setAddressLocality(const QString &address_locality) {
    m_address_locality = address_locality;
    m_address_locality_isSet = true;
}

bool OAIPostalAddress::is_address_locality_Set() const{
    return m_address_locality_isSet;
}

bool OAIPostalAddress::is_address_locality_Valid() const{
    return m_address_locality_isValid;
}

QString OAIPostalAddress::getAddressRegion() const {
    return m_address_region;
}
void OAIPostalAddress::setAddressRegion(const QString &address_region) {
    m_address_region = address_region;
    m_address_region_isSet = true;
}

bool OAIPostalAddress::is_address_region_Set() const{
    return m_address_region_isSet;
}

bool OAIPostalAddress::is_address_region_Valid() const{
    return m_address_region_isValid;
}

QString OAIPostalAddress::getAddressRegionAbbreviation() const {
    return m_address_region_abbreviation;
}
void OAIPostalAddress::setAddressRegionAbbreviation(const QString &address_region_abbreviation) {
    m_address_region_abbreviation = address_region_abbreviation;
    m_address_region_abbreviation_isSet = true;
}

bool OAIPostalAddress::is_address_region_abbreviation_Set() const{
    return m_address_region_abbreviation_isSet;
}

bool OAIPostalAddress::is_address_region_abbreviation_Valid() const{
    return m_address_region_abbreviation_isValid;
}

QString OAIPostalAddress::getAddressSubregion() const {
    return m_address_subregion;
}
void OAIPostalAddress::setAddressSubregion(const QString &address_subregion) {
    m_address_subregion = address_subregion;
    m_address_subregion_isSet = true;
}

bool OAIPostalAddress::is_address_subregion_Set() const{
    return m_address_subregion_isSet;
}

bool OAIPostalAddress::is_address_subregion_Valid() const{
    return m_address_subregion_isValid;
}

QString OAIPostalAddress::getCountryIso() const {
    return m_country_iso;
}
void OAIPostalAddress::setCountryIso(const QString &country_iso) {
    m_country_iso = country_iso;
    m_country_iso_isSet = true;
}

bool OAIPostalAddress::is_country_iso_Set() const{
    return m_country_iso_isSet;
}

bool OAIPostalAddress::is_country_iso_Valid() const{
    return m_country_iso_isValid;
}

QString OAIPostalAddress::getFormattingRuleId() const {
    return m_formatting_rule_id;
}
void OAIPostalAddress::setFormattingRuleId(const QString &formatting_rule_id) {
    m_formatting_rule_id = formatting_rule_id;
    m_formatting_rule_id_isSet = true;
}

bool OAIPostalAddress::is_formatting_rule_id_Set() const{
    return m_formatting_rule_id_isSet;
}

bool OAIPostalAddress::is_formatting_rule_id_Valid() const{
    return m_formatting_rule_id_isValid;
}

QString OAIPostalAddress::getHouseNumber() const {
    return m_house_number;
}
void OAIPostalAddress::setHouseNumber(const QString &house_number) {
    m_house_number = house_number;
    m_house_number_isSet = true;
}

bool OAIPostalAddress::is_house_number_Set() const{
    return m_house_number_isSet;
}

bool OAIPostalAddress::is_house_number_Valid() const{
    return m_house_number_isValid;
}

QString OAIPostalAddress::getNeighborhood() const {
    return m_neighborhood;
}
void OAIPostalAddress::setNeighborhood(const QString &neighborhood) {
    m_neighborhood = neighborhood;
    m_neighborhood_isSet = true;
}

bool OAIPostalAddress::is_neighborhood_Set() const{
    return m_neighborhood_isSet;
}

bool OAIPostalAddress::is_neighborhood_Valid() const{
    return m_neighborhood_isValid;
}

QString OAIPostalAddress::getPostOfficeBoxNumber() const {
    return m_post_office_box_number;
}
void OAIPostalAddress::setPostOfficeBoxNumber(const QString &post_office_box_number) {
    m_post_office_box_number = post_office_box_number;
    m_post_office_box_number_isSet = true;
}

bool OAIPostalAddress::is_post_office_box_number_Set() const{
    return m_post_office_box_number_isSet;
}

bool OAIPostalAddress::is_post_office_box_number_Valid() const{
    return m_post_office_box_number_isValid;
}

QString OAIPostalAddress::getPostalCode() const {
    return m_postal_code;
}
void OAIPostalAddress::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIPostalAddress::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIPostalAddress::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIPostalAddress::getStreetAddress() const {
    return m_street_address;
}
void OAIPostalAddress::setStreetAddress(const QString &street_address) {
    m_street_address = street_address;
    m_street_address_isSet = true;
}

bool OAIPostalAddress::is_street_address_Set() const{
    return m_street_address_isSet;
}

bool OAIPostalAddress::is_street_address_Valid() const{
    return m_street_address_isValid;
}

QString OAIPostalAddress::getStreetName() const {
    return m_street_name;
}
void OAIPostalAddress::setStreetName(const QString &street_name) {
    m_street_name = street_name;
    m_street_name_isSet = true;
}

bool OAIPostalAddress::is_street_name_Set() const{
    return m_street_name_isSet;
}

bool OAIPostalAddress::is_street_name_Valid() const{
    return m_street_name_isValid;
}

QString OAIPostalAddress::getText() const {
    return m_text;
}
void OAIPostalAddress::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIPostalAddress::is_text_Set() const{
    return m_text_isSet;
}

bool OAIPostalAddress::is_text_Valid() const{
    return m_text_isValid;
}

OAIEntitiesEntityPresentationInfo OAIPostalAddress::getEntityPresentationInfo() const {
    return m_entity_presentation_info;
}
void OAIPostalAddress::setEntityPresentationInfo(const OAIEntitiesEntityPresentationInfo &entity_presentation_info) {
    m_entity_presentation_info = entity_presentation_info;
    m_entity_presentation_info_isSet = true;
}

bool OAIPostalAddress::is_entity_presentation_info_Set() const{
    return m_entity_presentation_info_isSet;
}

bool OAIPostalAddress::is_entity_presentation_info_Valid() const{
    return m_entity_presentation_info_isValid;
}

QString OAIPostalAddress::getName() const {
    return m_name;
}
void OAIPostalAddress::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPostalAddress::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPostalAddress::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPostalAddress::getUrl() const {
    return m_url;
}
void OAIPostalAddress::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPostalAddress::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPostalAddress::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIPostalAddress::getAdaptiveCard() const {
    return m_adaptive_card;
}
void OAIPostalAddress::setAdaptiveCard(const QString &adaptive_card) {
    m_adaptive_card = adaptive_card;
    m_adaptive_card_isSet = true;
}

bool OAIPostalAddress::is_adaptive_card_Set() const{
    return m_adaptive_card_isSet;
}

bool OAIPostalAddress::is_adaptive_card_Valid() const{
    return m_adaptive_card_isValid;
}

QList<OAIAction> OAIPostalAddress::getImmediateAction() const {
    return m_immediate_action;
}
void OAIPostalAddress::setImmediateAction(const QList<OAIAction> &immediate_action) {
    m_immediate_action = immediate_action;
    m_immediate_action_isSet = true;
}

bool OAIPostalAddress::is_immediate_action_Set() const{
    return m_immediate_action_isSet;
}

bool OAIPostalAddress::is_immediate_action_Valid() const{
    return m_immediate_action_isValid;
}

QList<OAIAction> OAIPostalAddress::getPotentialAction() const {
    return m_potential_action;
}
void OAIPostalAddress::setPotentialAction(const QList<OAIAction> &potential_action) {
    m_potential_action = potential_action;
    m_potential_action_isSet = true;
}

bool OAIPostalAddress::is_potential_action_Set() const{
    return m_potential_action_isSet;
}

bool OAIPostalAddress::is_potential_action_Valid() const{
    return m_potential_action_isValid;
}

QString OAIPostalAddress::getPreferredClickthroughUrl() const {
    return m_preferred_clickthrough_url;
}
void OAIPostalAddress::setPreferredClickthroughUrl(const QString &preferred_clickthrough_url) {
    m_preferred_clickthrough_url = preferred_clickthrough_url;
    m_preferred_clickthrough_url_isSet = true;
}

bool OAIPostalAddress::is_preferred_clickthrough_url_Set() const{
    return m_preferred_clickthrough_url_isSet;
}

bool OAIPostalAddress::is_preferred_clickthrough_url_Valid() const{
    return m_preferred_clickthrough_url_isValid;
}

QString OAIPostalAddress::getReadLink() const {
    return m_read_link;
}
void OAIPostalAddress::setReadLink(const QString &read_link) {
    m_read_link = read_link;
    m_read_link_isSet = true;
}

bool OAIPostalAddress::is_read_link_Set() const{
    return m_read_link_isSet;
}

bool OAIPostalAddress::is_read_link_Valid() const{
    return m_read_link_isValid;
}

QString OAIPostalAddress::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIPostalAddress::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIPostalAddress::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIPostalAddress::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIPostalAddress::getId() const {
    return m_id;
}
void OAIPostalAddress::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPostalAddress::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPostalAddress::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPostalAddress::getType() const {
    return m__type;
}
void OAIPostalAddress::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIPostalAddress::is__type_Set() const{
    return m__type_isSet;
}

bool OAIPostalAddress::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIPostalAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_locality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_region_abbreviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_subregion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_iso_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatting_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neighborhood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_office_box_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_presentation_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adaptive_card_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_immediate_action.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_potential_action.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_clickthrough_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostalAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
