/**
 * Local Search Client
 * The Local Search client lets you send a search query to Bing and get back search results that include local businesses such as restaurants, hotels, retail stores, or other local businesses. The query can specify the name of the local business or it can ask for a list (for example, restaurants near me).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError::OAIError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError::OAIError() {
    this->initializeModel();
}

OAIError::~OAIError() {}

void OAIError::initializeModel() {

    m__type_isSet = false;
    m__type_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_more_details_isSet = false;
    m_more_details_isValid = false;

    m_parameter_isSet = false;
    m_parameter_isValid = false;

    m_sub_code_isSet = false;
    m_sub_code_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError::fromJsonObject(QJsonObject json) {

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_more_details_isValid = ::OpenAPI::fromJsonValue(m_more_details, json[QString("moreDetails")]);
    m_more_details_isSet = !json[QString("moreDetails")].isNull() && m_more_details_isValid;

    m_parameter_isValid = ::OpenAPI::fromJsonValue(m_parameter, json[QString("parameter")]);
    m_parameter_isSet = !json[QString("parameter")].isNull() && m_parameter_isValid;

    m_sub_code_isValid = ::OpenAPI::fromJsonValue(m_sub_code, json[QString("subCode")]);
    m_sub_code_isSet = !json[QString("subCode")].isNull() && m_sub_code_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError::asJsonObject() const {
    QJsonObject obj;
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_more_details_isSet) {
        obj.insert(QString("moreDetails"), ::OpenAPI::toJsonValue(m_more_details));
    }
    if (m_parameter_isSet) {
        obj.insert(QString("parameter"), ::OpenAPI::toJsonValue(m_parameter));
    }
    if (m_sub_code_isSet) {
        obj.insert(QString("subCode"), ::OpenAPI::toJsonValue(m_sub_code));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIError::getType() const {
    return m__type;
}
void OAIError::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIError::is__type_Set() const{
    return m__type_isSet;
}

bool OAIError::is__type_Valid() const{
    return m__type_isValid;
}

QString OAIError::getCode() const {
    return m_code;
}
void OAIError::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIError::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIError::getMessage() const {
    return m_message;
}
void OAIError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIError::getMoreDetails() const {
    return m_more_details;
}
void OAIError::setMoreDetails(const QString &more_details) {
    m_more_details = more_details;
    m_more_details_isSet = true;
}

bool OAIError::is_more_details_Set() const{
    return m_more_details_isSet;
}

bool OAIError::is_more_details_Valid() const{
    return m_more_details_isValid;
}

QString OAIError::getParameter() const {
    return m_parameter;
}
void OAIError::setParameter(const QString &parameter) {
    m_parameter = parameter;
    m_parameter_isSet = true;
}

bool OAIError::is_parameter_Set() const{
    return m_parameter_isSet;
}

bool OAIError::is_parameter_Valid() const{
    return m_parameter_isValid;
}

QString OAIError::getSubCode() const {
    return m_sub_code;
}
void OAIError::setSubCode(const QString &sub_code) {
    m_sub_code = sub_code;
    m_sub_code_isSet = true;
}

bool OAIError::is_sub_code_Set() const{
    return m_sub_code_isSet;
}

bool OAIError::is_sub_code_Valid() const{
    return m_sub_code_isValid;
}

QString OAIError::getValue() const {
    return m_value;
}
void OAIError::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIError::is_value_Set() const{
    return m_value_isSet;
}

bool OAIError::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && m_code_isValid && m_message_isValid && true;
}

} // namespace OpenAPI
