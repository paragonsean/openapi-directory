/*
 * Local Search Client
 * The Local Search client lets you send a search query to Bing and get back search results that include local businesses such as restaurants, hotels, retail stores, or other local businesses. The query can specify the name of the local business or it can ask for a list (for example, restaurants near me).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Action;
import org.openapitools.client.model.Identifiable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a response. All schemas that return at the root of the response must inherit from this object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:39.718837-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Response extends Identifiable {
  public static final String SERIALIZED_NAME_ADAPTIVE_CARD = "adaptiveCard";
  @SerializedName(SERIALIZED_NAME_ADAPTIVE_CARD)
  private String adaptiveCard;

  public static final String SERIALIZED_NAME_IMMEDIATE_ACTION = "immediateAction";
  @SerializedName(SERIALIZED_NAME_IMMEDIATE_ACTION)
  private List<Action> immediateAction = new ArrayList<>();

  public static final String SERIALIZED_NAME_POTENTIAL_ACTION = "potentialAction";
  @SerializedName(SERIALIZED_NAME_POTENTIAL_ACTION)
  private List<Action> potentialAction = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREFERRED_CLICKTHROUGH_URL = "preferredClickthroughUrl";
  @SerializedName(SERIALIZED_NAME_PREFERRED_CLICKTHROUGH_URL)
  private String preferredClickthroughUrl;

  public static final String SERIALIZED_NAME_READ_LINK = "readLink";
  @SerializedName(SERIALIZED_NAME_READ_LINK)
  private String readLink;

  public static final String SERIALIZED_NAME_WEB_SEARCH_URL = "webSearchUrl";
  @SerializedName(SERIALIZED_NAME_WEB_SEARCH_URL)
  private String webSearchUrl;

  public Response() {
    this.type = this.getClass().getSimpleName();
  }

  public Response(
     String adaptiveCard, 
     List<Action> immediateAction, 
     List<Action> potentialAction, 
     String preferredClickthroughUrl, 
     String readLink, 
     String webSearchUrl, 
     String id
  ) {
    this();
    this.adaptiveCard = adaptiveCard;
    this.immediateAction = immediateAction;
    this.potentialAction = potentialAction;
    this.preferredClickthroughUrl = preferredClickthroughUrl;
    this.readLink = readLink;
    this.webSearchUrl = webSearchUrl;
    this.id = id;
  }

  /**
   * Get adaptiveCard
   * @return adaptiveCard
   */
  @javax.annotation.Nullable
  public String getAdaptiveCard() {
    return adaptiveCard;
  }



  /**
   * Get immediateAction
   * @return immediateAction
   */
  @javax.annotation.Nullable
  public List<Action> getImmediateAction() {
    return immediateAction;
  }



  /**
   * Get potentialAction
   * @return potentialAction
   */
  @javax.annotation.Nullable
  public List<Action> getPotentialAction() {
    return potentialAction;
  }



  /**
   * Get preferredClickthroughUrl
   * @return preferredClickthroughUrl
   */
  @javax.annotation.Nullable
  public String getPreferredClickthroughUrl() {
    return preferredClickthroughUrl;
  }



  /**
   * The URL that returns this resource.
   * @return readLink
   */
  @javax.annotation.Nullable
  public String getReadLink() {
    return readLink;
  }



  /**
   * The URL to Bing&#39;s search result for this item.
   * @return webSearchUrl
   */
  @javax.annotation.Nullable
  public String getWebSearchUrl() {
    return webSearchUrl;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Response response = (Response) o;
    return Objects.equals(this.adaptiveCard, response.adaptiveCard) &&
        Objects.equals(this.immediateAction, response.immediateAction) &&
        Objects.equals(this.potentialAction, response.potentialAction) &&
        Objects.equals(this.preferredClickthroughUrl, response.preferredClickthroughUrl) &&
        Objects.equals(this.readLink, response.readLink) &&
        Objects.equals(this.webSearchUrl, response.webSearchUrl) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adaptiveCard, immediateAction, potentialAction, preferredClickthroughUrl, readLink, webSearchUrl, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Response {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    adaptiveCard: ").append(toIndentedString(adaptiveCard)).append("\n");
    sb.append("    immediateAction: ").append(toIndentedString(immediateAction)).append("\n");
    sb.append("    potentialAction: ").append(toIndentedString(potentialAction)).append("\n");
    sb.append("    preferredClickthroughUrl: ").append(toIndentedString(preferredClickthroughUrl)).append("\n");
    sb.append("    readLink: ").append(toIndentedString(readLink)).append("\n");
    sb.append("    webSearchUrl: ").append(toIndentedString(webSearchUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Response is not found in the empty JSON string", Response.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("_type").getAsString();
      switch (discriminatorValue) {
        case "Action":
          Action.validateJsonElement(jsonElement);
          break;
        case "Answer":
          Answer.validateJsonElement(jsonElement);
          break;
        case "CreativeWork":
          CreativeWork.validateJsonElement(jsonElement);
          break;
        case "ErrorResponse":
          ErrorResponse.validateJsonElement(jsonElement);
          break;
        case "Intangible":
          Intangible.validateJsonElement(jsonElement);
          break;
        case "Place":
          Place.validateJsonElement(jsonElement);
          break;
        case "Places":
          Places.validateJsonElement(jsonElement);
          break;
        case "PostalAddress":
          PostalAddress.validateJsonElement(jsonElement);
          break;
        case "SearchAction":
          SearchAction.validateJsonElement(jsonElement);
          break;
        case "SearchResponse":
          SearchResponse.validateJsonElement(jsonElement);
          break;
        case "SearchResultsAnswer":
          SearchResultsAnswer.validateJsonElement(jsonElement);
          break;
        case "StructuredValue":
          StructuredValue.validateJsonElement(jsonElement);
          break;
        case "Thing":
          Thing.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `_type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Response
   * @throws IOException if the JSON string is invalid with respect to Response
   */
  public static Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Response.class);
  }

  /**
   * Convert an instance of Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

