/*
 * Local Search Client
 * The Local Search client lets you send a search query to Bing and get back search results that include local businesses such as restaurants, hotels, retail stores, or other local businesses. The query can specify the name of the local business or it can ask for a list (for example, restaurants near me).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Action;
import org.openapitools.client.model.Answer;
import org.openapitools.client.model.EntitiesEntityPresentationInfo;
import org.openapitools.client.model.Place;
import org.openapitools.client.model.Thing;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchAction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:39.718837-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchAction extends Action {
  public static final String SERIALIZED_NAME_DISPLAY_TEXT = "displayText";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TEXT)
  private String displayText;

  public static final String SERIALIZED_NAME_FORMATTING_RULE_ID = "formattingRuleId";
  @SerializedName(SERIALIZED_NAME_FORMATTING_RULE_ID)
  private String formattingRuleId;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_RICH_CONTENT = "richContent";
  @SerializedName(SERIALIZED_NAME_RICH_CONTENT)
  private List<Answer> richContent = new ArrayList<>();

  public SearchAction() {
    this.type = this.getClass().getSimpleName();
  }

  public SearchAction(
     String displayText, 
     String formattingRuleId, 
     String query, 
     List<Answer> richContent, 
     String displayName, 
     Boolean isTopAction, 
     List<Place> location, 
     List<Thing> result, 
     String serviceUrl, 
     List<Thing> about, 
     Integer commentCount, 
     Integer copyrightYear, 
     String disclaimer, 
     String discussionUrl, 
     List<String> genre, 
     String headLine, 
     Boolean isAccessibleForFree, 
     Boolean isFamilyFriendly, 
     List<Thing> mentions, 
     List<Thing> provider, 
     String text, 
     String thumbnailUrl, 
     String name, 
     String url, 
     String adaptiveCard, 
     List<Action> immediateAction, 
     List<Action> potentialAction, 
     String preferredClickthroughUrl, 
     String readLink, 
     String webSearchUrl, 
     String id
  ) {
    this();
    this.displayText = displayText;
    this.formattingRuleId = formattingRuleId;
    this.query = query;
    this.richContent = richContent;
    this.displayName = displayName;
    this.isTopAction = isTopAction;
    this.location = location;
    this.result = result;
    this.serviceUrl = serviceUrl;
    this.about = about;
    this.commentCount = commentCount;
    this.copyrightYear = copyrightYear;
    this.disclaimer = disclaimer;
    this.discussionUrl = discussionUrl;
    this.genre = genre;
    this.headLine = headLine;
    this.isAccessibleForFree = isAccessibleForFree;
    this.isFamilyFriendly = isFamilyFriendly;
    this.mentions = mentions;
    this.provider = provider;
    this.text = text;
    this.thumbnailUrl = thumbnailUrl;
    this.name = name;
    this.url = url;
    this.adaptiveCard = adaptiveCard;
    this.immediateAction = immediateAction;
    this.potentialAction = potentialAction;
    this.preferredClickthroughUrl = preferredClickthroughUrl;
    this.readLink = readLink;
    this.webSearchUrl = webSearchUrl;
    this.id = id;
  }

  /**
   * Get displayText
   * @return displayText
   */
  @javax.annotation.Nullable
  public String getDisplayText() {
    return displayText;
  }



  /**
   * Get formattingRuleId
   * @return formattingRuleId
   */
  @javax.annotation.Nullable
  public String getFormattingRuleId() {
    return formattingRuleId;
  }



  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }



  /**
   * Get richContent
   * @return richContent
   */
  @javax.annotation.Nullable
  public List<Answer> getRichContent() {
    return richContent;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchAction searchAction = (SearchAction) o;
    return Objects.equals(this.displayText, searchAction.displayText) &&
        Objects.equals(this.formattingRuleId, searchAction.formattingRuleId) &&
        Objects.equals(this.query, searchAction.query) &&
        Objects.equals(this.richContent, searchAction.richContent) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayText, formattingRuleId, query, richContent, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchAction {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    displayText: ").append(toIndentedString(displayText)).append("\n");
    sb.append("    formattingRuleId: ").append(toIndentedString(formattingRuleId)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    richContent: ").append(toIndentedString(richContent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("isTopAction");
    openapiFields.add("location");
    openapiFields.add("result");
    openapiFields.add("serviceUrl");
    openapiFields.add("about");
    openapiFields.add("commentCount");
    openapiFields.add("copyrightHolder");
    openapiFields.add("copyrightYear");
    openapiFields.add("creator");
    openapiFields.add("disclaimer");
    openapiFields.add("discussionUrl");
    openapiFields.add("genre");
    openapiFields.add("headLine");
    openapiFields.add("isAccessibleForFree");
    openapiFields.add("isFamilyFriendly");
    openapiFields.add("mainEntity");
    openapiFields.add("mentions");
    openapiFields.add("provider");
    openapiFields.add("text");
    openapiFields.add("thumbnailUrl");
    openapiFields.add("entityPresentationInfo");
    openapiFields.add("name");
    openapiFields.add("url");
    openapiFields.add("adaptiveCard");
    openapiFields.add("immediateAction");
    openapiFields.add("potentialAction");
    openapiFields.add("preferredClickthroughUrl");
    openapiFields.add("readLink");
    openapiFields.add("webSearchUrl");
    openapiFields.add("id");
    openapiFields.add("_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchAction is not found in the empty JSON string", SearchAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchAction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchAction.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchAction>() {
           @Override
           public void write(JsonWriter out, SearchAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchAction
   * @throws IOException if the JSON string is invalid with respect to SearchAction
   */
  public static SearchAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchAction.class);
  }

  /**
   * Convert an instance of SearchAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

