/*
 * Local Search Client
 * The Local Search client lets you send a search query to Bing and get back search results that include local businesses such as restaurants, hotels, retail stores, or other local businesses. The query can specify the name of the local business or it can ask for a list (for example, restaurants near me).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Action;
import org.openapitools.client.model.EntitiesEntityPresentationInfo;
import org.openapitools.client.model.Thing;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The most generic kind of creative work, including books, movies, photographs, software programs, etc.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:39.718837-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreativeWork extends Thing {
  public static final String SERIALIZED_NAME_ABOUT = "about";
  @SerializedName(SERIALIZED_NAME_ABOUT)
  private List<Thing> about = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMENT_COUNT = "commentCount";
  @SerializedName(SERIALIZED_NAME_COMMENT_COUNT)
  private Integer commentCount;

  public static final String SERIALIZED_NAME_COPYRIGHT_HOLDER = "copyrightHolder";
  @SerializedName(SERIALIZED_NAME_COPYRIGHT_HOLDER)
  private Thing copyrightHolder;

  public static final String SERIALIZED_NAME_COPYRIGHT_YEAR = "copyrightYear";
  @SerializedName(SERIALIZED_NAME_COPYRIGHT_YEAR)
  private Integer copyrightYear;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private Thing creator;

  public static final String SERIALIZED_NAME_DISCLAIMER = "disclaimer";
  @SerializedName(SERIALIZED_NAME_DISCLAIMER)
  private String disclaimer;

  public static final String SERIALIZED_NAME_DISCUSSION_URL = "discussionUrl";
  @SerializedName(SERIALIZED_NAME_DISCUSSION_URL)
  private String discussionUrl;

  public static final String SERIALIZED_NAME_GENRE = "genre";
  @SerializedName(SERIALIZED_NAME_GENRE)
  private List<String> genre = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEAD_LINE = "headLine";
  @SerializedName(SERIALIZED_NAME_HEAD_LINE)
  private String headLine;

  public static final String SERIALIZED_NAME_IS_ACCESSIBLE_FOR_FREE = "isAccessibleForFree";
  @SerializedName(SERIALIZED_NAME_IS_ACCESSIBLE_FOR_FREE)
  private Boolean isAccessibleForFree;

  public static final String SERIALIZED_NAME_IS_FAMILY_FRIENDLY = "isFamilyFriendly";
  @SerializedName(SERIALIZED_NAME_IS_FAMILY_FRIENDLY)
  private Boolean isFamilyFriendly;

  public static final String SERIALIZED_NAME_MAIN_ENTITY = "mainEntity";
  @SerializedName(SERIALIZED_NAME_MAIN_ENTITY)
  private Thing mainEntity;

  public static final String SERIALIZED_NAME_MENTIONS = "mentions";
  @SerializedName(SERIALIZED_NAME_MENTIONS)
  private List<Thing> mentions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private List<Thing> provider = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_THUMBNAIL_URL = "thumbnailUrl";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_URL)
  private String thumbnailUrl;

  public CreativeWork() {
    this.type = this.getClass().getSimpleName();
  }

  public CreativeWork(
     List<Thing> about, 
     Integer commentCount, 
     Integer copyrightYear, 
     String disclaimer, 
     String discussionUrl, 
     List<String> genre, 
     String headLine, 
     Boolean isAccessibleForFree, 
     Boolean isFamilyFriendly, 
     List<Thing> mentions, 
     List<Thing> provider, 
     String text, 
     String thumbnailUrl, 
     String name, 
     String url, 
     String adaptiveCard, 
     List<Action> immediateAction, 
     List<Action> potentialAction, 
     String preferredClickthroughUrl, 
     String readLink, 
     String webSearchUrl, 
     String id
  ) {
    this();
    this.about = about;
    this.commentCount = commentCount;
    this.copyrightYear = copyrightYear;
    this.disclaimer = disclaimer;
    this.discussionUrl = discussionUrl;
    this.genre = genre;
    this.headLine = headLine;
    this.isAccessibleForFree = isAccessibleForFree;
    this.isFamilyFriendly = isFamilyFriendly;
    this.mentions = mentions;
    this.provider = provider;
    this.text = text;
    this.thumbnailUrl = thumbnailUrl;
    this.name = name;
    this.url = url;
    this.adaptiveCard = adaptiveCard;
    this.immediateAction = immediateAction;
    this.potentialAction = potentialAction;
    this.preferredClickthroughUrl = preferredClickthroughUrl;
    this.readLink = readLink;
    this.webSearchUrl = webSearchUrl;
    this.id = id;
  }

  /**
   * For internal use only.
   * @return about
   */
  @javax.annotation.Nullable
  public List<Thing> getAbout() {
    return about;
  }



  /**
   * Get commentCount
   * @return commentCount
   */
  @javax.annotation.Nullable
  public Integer getCommentCount() {
    return commentCount;
  }



  public CreativeWork copyrightHolder(Thing copyrightHolder) {
    this.copyrightHolder = copyrightHolder;
    return this;
  }

  /**
   * Get copyrightHolder
   * @return copyrightHolder
   */
  @javax.annotation.Nullable
  public Thing getCopyrightHolder() {
    return copyrightHolder;
  }

  public void setCopyrightHolder(Thing copyrightHolder) {
    this.copyrightHolder = copyrightHolder;
  }


  /**
   * Get copyrightYear
   * @return copyrightYear
   */
  @javax.annotation.Nullable
  public Integer getCopyrightYear() {
    return copyrightYear;
  }



  public CreativeWork creator(Thing creator) {
    this.creator = creator;
    return this;
  }

  /**
   * Get creator
   * @return creator
   */
  @javax.annotation.Nullable
  public Thing getCreator() {
    return creator;
  }

  public void setCreator(Thing creator) {
    this.creator = creator;
  }


  /**
   * Get disclaimer
   * @return disclaimer
   */
  @javax.annotation.Nullable
  public String getDisclaimer() {
    return disclaimer;
  }



  /**
   * Get discussionUrl
   * @return discussionUrl
   */
  @javax.annotation.Nullable
  public String getDiscussionUrl() {
    return discussionUrl;
  }



  /**
   * Get genre
   * @return genre
   */
  @javax.annotation.Nullable
  public List<String> getGenre() {
    return genre;
  }



  /**
   * Get headLine
   * @return headLine
   */
  @javax.annotation.Nullable
  public String getHeadLine() {
    return headLine;
  }



  /**
   * Get isAccessibleForFree
   * @return isAccessibleForFree
   */
  @javax.annotation.Nullable
  public Boolean getIsAccessibleForFree() {
    return isAccessibleForFree;
  }



  /**
   * Get isFamilyFriendly
   * @return isFamilyFriendly
   */
  @javax.annotation.Nullable
  public Boolean getIsFamilyFriendly() {
    return isFamilyFriendly;
  }



  public CreativeWork mainEntity(Thing mainEntity) {
    this.mainEntity = mainEntity;
    return this;
  }

  /**
   * Get mainEntity
   * @return mainEntity
   */
  @javax.annotation.Nullable
  public Thing getMainEntity() {
    return mainEntity;
  }

  public void setMainEntity(Thing mainEntity) {
    this.mainEntity = mainEntity;
  }


  /**
   * For internal use only.
   * @return mentions
   */
  @javax.annotation.Nullable
  public List<Thing> getMentions() {
    return mentions;
  }



  /**
   * The source of the creative work.
   * @return provider
   */
  @javax.annotation.Nullable
  public List<Thing> getProvider() {
    return provider;
  }



  /**
   * Text content of this creative work
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }



  /**
   * The URL to a thumbnail of the item.
   * @return thumbnailUrl
   */
  @javax.annotation.Nullable
  public String getThumbnailUrl() {
    return thumbnailUrl;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreativeWork creativeWork = (CreativeWork) o;
    return Objects.equals(this.about, creativeWork.about) &&
        Objects.equals(this.commentCount, creativeWork.commentCount) &&
        Objects.equals(this.copyrightHolder, creativeWork.copyrightHolder) &&
        Objects.equals(this.copyrightYear, creativeWork.copyrightYear) &&
        Objects.equals(this.creator, creativeWork.creator) &&
        Objects.equals(this.disclaimer, creativeWork.disclaimer) &&
        Objects.equals(this.discussionUrl, creativeWork.discussionUrl) &&
        Objects.equals(this.genre, creativeWork.genre) &&
        Objects.equals(this.headLine, creativeWork.headLine) &&
        Objects.equals(this.isAccessibleForFree, creativeWork.isAccessibleForFree) &&
        Objects.equals(this.isFamilyFriendly, creativeWork.isFamilyFriendly) &&
        Objects.equals(this.mainEntity, creativeWork.mainEntity) &&
        Objects.equals(this.mentions, creativeWork.mentions) &&
        Objects.equals(this.provider, creativeWork.provider) &&
        Objects.equals(this.text, creativeWork.text) &&
        Objects.equals(this.thumbnailUrl, creativeWork.thumbnailUrl) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(about, commentCount, copyrightHolder, copyrightYear, creator, disclaimer, discussionUrl, genre, headLine, isAccessibleForFree, isFamilyFriendly, mainEntity, mentions, provider, text, thumbnailUrl, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreativeWork {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    about: ").append(toIndentedString(about)).append("\n");
    sb.append("    commentCount: ").append(toIndentedString(commentCount)).append("\n");
    sb.append("    copyrightHolder: ").append(toIndentedString(copyrightHolder)).append("\n");
    sb.append("    copyrightYear: ").append(toIndentedString(copyrightYear)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    disclaimer: ").append(toIndentedString(disclaimer)).append("\n");
    sb.append("    discussionUrl: ").append(toIndentedString(discussionUrl)).append("\n");
    sb.append("    genre: ").append(toIndentedString(genre)).append("\n");
    sb.append("    headLine: ").append(toIndentedString(headLine)).append("\n");
    sb.append("    isAccessibleForFree: ").append(toIndentedString(isAccessibleForFree)).append("\n");
    sb.append("    isFamilyFriendly: ").append(toIndentedString(isFamilyFriendly)).append("\n");
    sb.append("    mainEntity: ").append(toIndentedString(mainEntity)).append("\n");
    sb.append("    mentions: ").append(toIndentedString(mentions)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    thumbnailUrl: ").append(toIndentedString(thumbnailUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entityPresentationInfo");
    openapiFields.add("name");
    openapiFields.add("url");
    openapiFields.add("adaptiveCard");
    openapiFields.add("immediateAction");
    openapiFields.add("potentialAction");
    openapiFields.add("preferredClickthroughUrl");
    openapiFields.add("readLink");
    openapiFields.add("webSearchUrl");
    openapiFields.add("id");
    openapiFields.add("_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreativeWork
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreativeWork.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreativeWork is not found in the empty JSON string", CreativeWork.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("_type").getAsString();
      switch (discriminatorValue) {
        case "Action":
          Action.validateJsonElement(jsonElement);
          break;
        case "SearchAction":
          SearchAction.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `_type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of CreativeWork given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreativeWork
   * @throws IOException if the JSON string is invalid with respect to CreativeWork
   */
  public static CreativeWork fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreativeWork.class);
  }

  /**
   * Convert an instance of CreativeWork to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

