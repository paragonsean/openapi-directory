/*
 * Local Search Client
 * The Local Search client lets you send a search query to Bing and get back search results that include local businesses such as restaurants, hotels, retail stores, or other local businesses. The query can specify the name of the local business or it can ask for a list (for example, restaurants near me).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreativeWork;
import org.openapitools.client.model.EntitiesEntityPresentationInfo;
import org.openapitools.client.model.Place;
import org.openapitools.client.model.Thing;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines an action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:39.718837-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Action extends CreativeWork {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_IS_TOP_ACTION = "isTopAction";
  @SerializedName(SERIALIZED_NAME_IS_TOP_ACTION)
  private Boolean isTopAction;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private List<Place> location = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private List<Thing> result = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_URL = "serviceUrl";
  @SerializedName(SERIALIZED_NAME_SERVICE_URL)
  private String serviceUrl;

  public Action() {
    this.type = this.getClass().getSimpleName();
  }

  public Action(
     String displayName, 
     Boolean isTopAction, 
     List<Place> location, 
     List<Thing> result, 
     String serviceUrl, 
     List<Thing> about, 
     Integer commentCount, 
     Integer copyrightYear, 
     String disclaimer, 
     String discussionUrl, 
     List<String> genre, 
     String headLine, 
     Boolean isAccessibleForFree, 
     Boolean isFamilyFriendly, 
     List<Thing> mentions, 
     List<Thing> provider, 
     String text, 
     String thumbnailUrl, 
     String name, 
     String url, 
     String adaptiveCard, 
     List<Action> immediateAction, 
     List<Action> potentialAction, 
     String preferredClickthroughUrl, 
     String readLink, 
     String webSearchUrl, 
     String id
  ) {
    this();
    this.displayName = displayName;
    this.isTopAction = isTopAction;
    this.location = location;
    this.result = result;
    this.serviceUrl = serviceUrl;
    this.about = about;
    this.commentCount = commentCount;
    this.copyrightYear = copyrightYear;
    this.disclaimer = disclaimer;
    this.discussionUrl = discussionUrl;
    this.genre = genre;
    this.headLine = headLine;
    this.isAccessibleForFree = isAccessibleForFree;
    this.isFamilyFriendly = isFamilyFriendly;
    this.mentions = mentions;
    this.provider = provider;
    this.text = text;
    this.thumbnailUrl = thumbnailUrl;
    this.name = name;
    this.url = url;
    this.adaptiveCard = adaptiveCard;
    this.immediateAction = immediateAction;
    this.potentialAction = potentialAction;
    this.preferredClickthroughUrl = preferredClickthroughUrl;
    this.readLink = readLink;
    this.webSearchUrl = webSearchUrl;
    this.id = id;
  }

  /**
   * A display name for the action.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * A Boolean representing whether this result is the top action.
   * @return isTopAction
   */
  @javax.annotation.Nullable
  public Boolean getIsTopAction() {
    return isTopAction;
  }



  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public List<Place> getLocation() {
    return location;
  }



  /**
   * The result produced in the action.
   * @return result
   */
  @javax.annotation.Nullable
  public List<Thing> getResult() {
    return result;
  }



  /**
   * Use this URL to get additional data to determine how to take the appropriate action. For example, the serviceUrl might return JSON along with an image URL.
   * @return serviceUrl
   */
  @javax.annotation.Nullable
  public String getServiceUrl() {
    return serviceUrl;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Action action = (Action) o;
    return Objects.equals(this.displayName, action.displayName) &&
        Objects.equals(this.isTopAction, action.isTopAction) &&
        Objects.equals(this.location, action.location) &&
        Objects.equals(this.result, action.result) &&
        Objects.equals(this.serviceUrl, action.serviceUrl) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, isTopAction, location, result, serviceUrl, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Action {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    isTopAction: ").append(toIndentedString(isTopAction)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    serviceUrl: ").append(toIndentedString(serviceUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("about");
    openapiFields.add("commentCount");
    openapiFields.add("copyrightHolder");
    openapiFields.add("copyrightYear");
    openapiFields.add("creator");
    openapiFields.add("disclaimer");
    openapiFields.add("discussionUrl");
    openapiFields.add("genre");
    openapiFields.add("headLine");
    openapiFields.add("isAccessibleForFree");
    openapiFields.add("isFamilyFriendly");
    openapiFields.add("mainEntity");
    openapiFields.add("mentions");
    openapiFields.add("provider");
    openapiFields.add("text");
    openapiFields.add("thumbnailUrl");
    openapiFields.add("entityPresentationInfo");
    openapiFields.add("name");
    openapiFields.add("url");
    openapiFields.add("adaptiveCard");
    openapiFields.add("immediateAction");
    openapiFields.add("potentialAction");
    openapiFields.add("preferredClickthroughUrl");
    openapiFields.add("readLink");
    openapiFields.add("webSearchUrl");
    openapiFields.add("id");
    openapiFields.add("_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Action
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Action.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Action is not found in the empty JSON string", Action.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("_type").getAsString();
      switch (discriminatorValue) {
        case "SearchAction":
          SearchAction.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `_type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of Action given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Action
   * @throws IOException if the JSON string is invalid with respect to Action
   */
  public static Action fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Action.class);
  }

  /**
   * Convert an instance of Action to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

