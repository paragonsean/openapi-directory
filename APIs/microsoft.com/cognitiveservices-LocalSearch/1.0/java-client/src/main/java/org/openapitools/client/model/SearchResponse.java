/*
 * Local Search Client
 * The Local Search client lets you send a search query to Bing and get back search results that include local businesses such as restaurants, hotels, retail stores, or other local businesses. The query can specify the name of the local business or it can ask for a list (for example, restaurants near me).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Action;
import org.openapitools.client.model.Places;
import org.openapitools.client.model.QueryContext;
import org.openapitools.client.model.Response;
import org.openapitools.client.model.SearchResultsAnswer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the top-level object that the response includes when the request succeeds.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:39.718837-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchResponse extends Response {
  public static final String SERIALIZED_NAME_LOTTERY = "lottery";
  @SerializedName(SERIALIZED_NAME_LOTTERY)
  private SearchResultsAnswer lottery;

  public static final String SERIALIZED_NAME_PLACES = "places";
  @SerializedName(SERIALIZED_NAME_PLACES)
  private Places places;

  public static final String SERIALIZED_NAME_QUERY_CONTEXT = "queryContext";
  @SerializedName(SERIALIZED_NAME_QUERY_CONTEXT)
  private QueryContext queryContext;

  public static final String SERIALIZED_NAME_SEARCH_RESULTS_CONFIDENCE_SCORE = "searchResultsConfidenceScore";
  @SerializedName(SERIALIZED_NAME_SEARCH_RESULTS_CONFIDENCE_SCORE)
  private Float searchResultsConfidenceScore;

  public SearchResponse() {
    this.type = this.getClass().getSimpleName();
  }

  public SearchResponse(
     Float searchResultsConfidenceScore, 
     String adaptiveCard, 
     List<Action> immediateAction, 
     List<Action> potentialAction, 
     String preferredClickthroughUrl, 
     String readLink, 
     String webSearchUrl, 
     String id
  ) {
    this();
    this.searchResultsConfidenceScore = searchResultsConfidenceScore;
    this.adaptiveCard = adaptiveCard;
    this.immediateAction = immediateAction;
    this.potentialAction = potentialAction;
    this.preferredClickthroughUrl = preferredClickthroughUrl;
    this.readLink = readLink;
    this.webSearchUrl = webSearchUrl;
    this.id = id;
  }

  public SearchResponse lottery(SearchResultsAnswer lottery) {
    this.lottery = lottery;
    return this;
  }

  /**
   * Get lottery
   * @return lottery
   */
  @javax.annotation.Nullable
  public SearchResultsAnswer getLottery() {
    return lottery;
  }

  public void setLottery(SearchResultsAnswer lottery) {
    this.lottery = lottery;
  }


  public SearchResponse places(Places places) {
    this.places = places;
    return this;
  }

  /**
   * Get places
   * @return places
   */
  @javax.annotation.Nullable
  public Places getPlaces() {
    return places;
  }

  public void setPlaces(Places places) {
    this.places = places;
  }


  public SearchResponse queryContext(QueryContext queryContext) {
    this.queryContext = queryContext;
    return this;
  }

  /**
   * Get queryContext
   * @return queryContext
   */
  @javax.annotation.Nullable
  public QueryContext getQueryContext() {
    return queryContext;
  }

  public void setQueryContext(QueryContext queryContext) {
    this.queryContext = queryContext;
  }


  /**
   * Get searchResultsConfidenceScore
   * @return searchResultsConfidenceScore
   */
  @javax.annotation.Nullable
  public Float getSearchResultsConfidenceScore() {
    return searchResultsConfidenceScore;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchResponse searchResponse = (SearchResponse) o;
    return Objects.equals(this.lottery, searchResponse.lottery) &&
        Objects.equals(this.places, searchResponse.places) &&
        Objects.equals(this.queryContext, searchResponse.queryContext) &&
        Objects.equals(this.searchResultsConfidenceScore, searchResponse.searchResultsConfidenceScore) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lottery, places, queryContext, searchResultsConfidenceScore, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchResponse {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    lottery: ").append(toIndentedString(lottery)).append("\n");
    sb.append("    places: ").append(toIndentedString(places)).append("\n");
    sb.append("    queryContext: ").append(toIndentedString(queryContext)).append("\n");
    sb.append("    searchResultsConfidenceScore: ").append(toIndentedString(searchResultsConfidenceScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adaptiveCard");
    openapiFields.add("immediateAction");
    openapiFields.add("potentialAction");
    openapiFields.add("preferredClickthroughUrl");
    openapiFields.add("readLink");
    openapiFields.add("webSearchUrl");
    openapiFields.add("id");
    openapiFields.add("_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchResponse is not found in the empty JSON string", SearchResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchResponse>() {
           @Override
           public void write(JsonWriter out, SearchResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchResponse
   * @throws IOException if the JSON string is invalid with respect to SearchResponse
   */
  public static SearchResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchResponse.class);
  }

  /**
   * Convert an instance of SearchResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

