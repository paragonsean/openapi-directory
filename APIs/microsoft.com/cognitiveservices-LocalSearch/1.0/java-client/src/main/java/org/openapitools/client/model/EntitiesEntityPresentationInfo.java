/*
 * Local Search Client
 * The Local Search client lets you send a search query to Bing and get back search results that include local businesses such as restaurants, hotels, retail stores, or other local businesses. The query can specify the name of the local business or it can ask for a list (for example, restaurants near me).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines additional information about an entity such as type hints.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:39.718837-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EntitiesEntityPresentationInfo {
  public static final String SERIALIZED_NAME_TYPE = "_type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  protected String type;

  /**
   * The supported scenario.
   */
  @JsonAdapter(EntityScenarioEnum.Adapter.class)
  public enum EntityScenarioEnum {
    DOMINANT_ENTITY("DominantEntity"),
    
    DISAMBIGUATION_ITEM("DisambiguationItem"),
    
    LIST_ITEM("ListItem");

    private String value;

    EntityScenarioEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityScenarioEnum fromValue(String value) {
      for (EntityScenarioEnum b : EntityScenarioEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityScenarioEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityScenarioEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityScenarioEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityScenarioEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntityScenarioEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_SCENARIO = "entityScenario";
  @SerializedName(SERIALIZED_NAME_ENTITY_SCENARIO)
  private EntityScenarioEnum entityScenario = EntityScenarioEnum.DOMINANT_ENTITY;

  public static final String SERIALIZED_NAME_ENTITY_SUB_TYPE_HINTS = "entitySubTypeHints";
  @SerializedName(SERIALIZED_NAME_ENTITY_SUB_TYPE_HINTS)
  private List<String> entitySubTypeHints = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTITY_TYPE_DISPLAY_HINT = "entityTypeDisplayHint";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE_DISPLAY_HINT)
  private String entityTypeDisplayHint;

  /**
   * Gets or Sets entityTypeHints
   */
  @JsonAdapter(EntityTypeHintsEnum.Adapter.class)
  public enum EntityTypeHintsEnum {
    PLACE("Place"),
    
    LOCAL_BUSINESS("LocalBusiness"),
    
    RESTAURANT("Restaurant"),
    
    HOTEL("Hotel");

    private String value;

    EntityTypeHintsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityTypeHintsEnum fromValue(String value) {
      for (EntityTypeHintsEnum b : EntityTypeHintsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityTypeHintsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeHintsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeHintsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityTypeHintsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntityTypeHintsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_TYPE_HINTS = "entityTypeHints";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE_HINTS)
  private List<EntityTypeHintsEnum> entityTypeHints = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public EntitiesEntityPresentationInfo() {
    this.type = this.getClass().getSimpleName();
  }

  public EntitiesEntityPresentationInfo(
     List<String> entitySubTypeHints, 
     String entityTypeDisplayHint, 
     List<EntityTypeHintsEnum> entityTypeHints, 
     String query
  ) {
    this();
    this.entitySubTypeHints = entitySubTypeHints;
    this.entityTypeDisplayHint = entityTypeDisplayHint;
    this.entityTypeHints = entityTypeHints;
    this.query = query;
  }

  public EntitiesEntityPresentationInfo type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public EntitiesEntityPresentationInfo entityScenario(EntityScenarioEnum entityScenario) {
    this.entityScenario = entityScenario;
    return this;
  }

  /**
   * The supported scenario.
   * @return entityScenario
   */
  @javax.annotation.Nonnull
  public EntityScenarioEnum getEntityScenario() {
    return entityScenario;
  }

  public void setEntityScenario(EntityScenarioEnum entityScenario) {
    this.entityScenario = entityScenario;
  }


  /**
   * Get entitySubTypeHints
   * @return entitySubTypeHints
   */
  @javax.annotation.Nullable
  public List<String> getEntitySubTypeHints() {
    return entitySubTypeHints;
  }



  /**
   * A display version of the entity hint. For example, if entityTypeHints is Artist, this field may be set to American Singer.
   * @return entityTypeDisplayHint
   */
  @javax.annotation.Nullable
  public String getEntityTypeDisplayHint() {
    return entityTypeDisplayHint;
  }



  /**
   * A list of hints that indicate the entity&#39;s type. The list could contain a single hint such as Movie or a list of hints such as Place, LocalBusiness, Restaurant. Each successive hint in the array narrows the entity&#39;s type.
   * @return entityTypeHints
   */
  @javax.annotation.Nullable
  public List<EntityTypeHintsEnum> getEntityTypeHints() {
    return entityTypeHints;
  }



  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntitiesEntityPresentationInfo entitiesEntityPresentationInfo = (EntitiesEntityPresentationInfo) o;
    return Objects.equals(this.type, entitiesEntityPresentationInfo.type) &&
        Objects.equals(this.entityScenario, entitiesEntityPresentationInfo.entityScenario) &&
        Objects.equals(this.entitySubTypeHints, entitiesEntityPresentationInfo.entitySubTypeHints) &&
        Objects.equals(this.entityTypeDisplayHint, entitiesEntityPresentationInfo.entityTypeDisplayHint) &&
        Objects.equals(this.entityTypeHints, entitiesEntityPresentationInfo.entityTypeHints) &&
        Objects.equals(this.query, entitiesEntityPresentationInfo.query);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, entityScenario, entitySubTypeHints, entityTypeDisplayHint, entityTypeHints, query);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntitiesEntityPresentationInfo {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    entityScenario: ").append(toIndentedString(entityScenario)).append("\n");
    sb.append("    entitySubTypeHints: ").append(toIndentedString(entitySubTypeHints)).append("\n");
    sb.append("    entityTypeDisplayHint: ").append(toIndentedString(entityTypeDisplayHint)).append("\n");
    sb.append("    entityTypeHints: ").append(toIndentedString(entityTypeHints)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_type");
    openapiFields.add("entityScenario");
    openapiFields.add("entitySubTypeHints");
    openapiFields.add("entityTypeDisplayHint");
    openapiFields.add("entityTypeHints");
    openapiFields.add("query");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
    openapiRequiredFields.add("entityScenario");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntitiesEntityPresentationInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntitiesEntityPresentationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntitiesEntityPresentationInfo is not found in the empty JSON string", EntitiesEntityPresentationInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntitiesEntityPresentationInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntitiesEntityPresentationInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EntitiesEntityPresentationInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntitiesEntityPresentationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntitiesEntityPresentationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntitiesEntityPresentationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntitiesEntityPresentationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<EntitiesEntityPresentationInfo>() {
           @Override
           public void write(JsonWriter out, EntitiesEntityPresentationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntitiesEntityPresentationInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntitiesEntityPresentationInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntitiesEntityPresentationInfo
   * @throws IOException if the JSON string is invalid with respect to EntitiesEntityPresentationInfo
   */
  public static EntitiesEntityPresentationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntitiesEntityPresentationInfo.class);
  }

  /**
   * Convert an instance of EntitiesEntityPresentationInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

