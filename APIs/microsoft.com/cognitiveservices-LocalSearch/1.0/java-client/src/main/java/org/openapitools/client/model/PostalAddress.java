/*
 * Local Search Client
 * The Local Search client lets you send a search query to Bing and get back search results that include local businesses such as restaurants, hotels, retail stores, or other local businesses. The query can specify the name of the local business or it can ask for a list (for example, restaurants near me).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Action;
import org.openapitools.client.model.EntitiesEntityPresentationInfo;
import org.openapitools.client.model.StructuredValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a postal address.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:39.718837-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostalAddress extends StructuredValue {
  public static final String SERIALIZED_NAME_ADDRESS_COUNTRY = "addressCountry";
  @SerializedName(SERIALIZED_NAME_ADDRESS_COUNTRY)
  private String addressCountry;

  public static final String SERIALIZED_NAME_ADDRESS_LOCALITY = "addressLocality";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LOCALITY)
  private String addressLocality;

  public static final String SERIALIZED_NAME_ADDRESS_REGION = "addressRegion";
  @SerializedName(SERIALIZED_NAME_ADDRESS_REGION)
  private String addressRegion;

  public static final String SERIALIZED_NAME_ADDRESS_REGION_ABBREVIATION = "addressRegionAbbreviation";
  @SerializedName(SERIALIZED_NAME_ADDRESS_REGION_ABBREVIATION)
  private String addressRegionAbbreviation;

  public static final String SERIALIZED_NAME_ADDRESS_SUBREGION = "addressSubregion";
  @SerializedName(SERIALIZED_NAME_ADDRESS_SUBREGION)
  private String addressSubregion;

  public static final String SERIALIZED_NAME_COUNTRY_ISO = "countryIso";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ISO)
  private String countryIso;

  public static final String SERIALIZED_NAME_FORMATTING_RULE_ID = "formattingRuleId";
  @SerializedName(SERIALIZED_NAME_FORMATTING_RULE_ID)
  private String formattingRuleId;

  public static final String SERIALIZED_NAME_HOUSE_NUMBER = "houseNumber";
  @SerializedName(SERIALIZED_NAME_HOUSE_NUMBER)
  private String houseNumber;

  public static final String SERIALIZED_NAME_NEIGHBORHOOD = "neighborhood";
  @SerializedName(SERIALIZED_NAME_NEIGHBORHOOD)
  private String neighborhood;

  public static final String SERIALIZED_NAME_POST_OFFICE_BOX_NUMBER = "postOfficeBoxNumber";
  @SerializedName(SERIALIZED_NAME_POST_OFFICE_BOX_NUMBER)
  private String postOfficeBoxNumber;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_STREET_ADDRESS = "streetAddress";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS)
  private String streetAddress;

  public static final String SERIALIZED_NAME_STREET_NAME = "streetName";
  @SerializedName(SERIALIZED_NAME_STREET_NAME)
  private String streetName;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public PostalAddress() {
    this.type = this.getClass().getSimpleName();
  }

  public PostalAddress(
     String addressCountry, 
     String addressLocality, 
     String addressRegion, 
     String addressRegionAbbreviation, 
     String addressSubregion, 
     String countryIso, 
     String formattingRuleId, 
     String houseNumber, 
     String neighborhood, 
     String postOfficeBoxNumber, 
     String postalCode, 
     String streetAddress, 
     String streetName, 
     String text, 
     String name, 
     String url, 
     String adaptiveCard, 
     List<Action> immediateAction, 
     List<Action> potentialAction, 
     String preferredClickthroughUrl, 
     String readLink, 
     String webSearchUrl, 
     String id
  ) {
    this();
    this.addressCountry = addressCountry;
    this.addressLocality = addressLocality;
    this.addressRegion = addressRegion;
    this.addressRegionAbbreviation = addressRegionAbbreviation;
    this.addressSubregion = addressSubregion;
    this.countryIso = countryIso;
    this.formattingRuleId = formattingRuleId;
    this.houseNumber = houseNumber;
    this.neighborhood = neighborhood;
    this.postOfficeBoxNumber = postOfficeBoxNumber;
    this.postalCode = postalCode;
    this.streetAddress = streetAddress;
    this.streetName = streetName;
    this.text = text;
    this.name = name;
    this.url = url;
    this.adaptiveCard = adaptiveCard;
    this.immediateAction = immediateAction;
    this.potentialAction = potentialAction;
    this.preferredClickthroughUrl = preferredClickthroughUrl;
    this.readLink = readLink;
    this.webSearchUrl = webSearchUrl;
    this.id = id;
  }

  /**
   * The country/region where the street address is located. This could be the two-letter ISO code. For example, US, or the full name, United States.
   * @return addressCountry
   */
  @javax.annotation.Nullable
  public String getAddressCountry() {
    return addressCountry;
  }



  /**
   * The city where the street address is located. For example, Seattle.
   * @return addressLocality
   */
  @javax.annotation.Nullable
  public String getAddressLocality() {
    return addressLocality;
  }



  /**
   * The state or province code where the street address is located. This could be the two-letter code. For example, WA, or the full name , Washington.
   * @return addressRegion
   */
  @javax.annotation.Nullable
  public String getAddressRegion() {
    return addressRegion;
  }



  /**
   * Region Abbreviation. For example, WA.
   * @return addressRegionAbbreviation
   */
  @javax.annotation.Nullable
  public String getAddressRegionAbbreviation() {
    return addressRegionAbbreviation;
  }



  /**
   * Get addressSubregion
   * @return addressSubregion
   */
  @javax.annotation.Nullable
  public String getAddressSubregion() {
    return addressSubregion;
  }



  /**
   * The two letter ISO code of this country. For example, US.
   * @return countryIso
   */
  @javax.annotation.Nullable
  public String getCountryIso() {
    return countryIso;
  }



  /**
   * Get formattingRuleId
   * @return formattingRuleId
   */
  @javax.annotation.Nullable
  public String getFormattingRuleId() {
    return formattingRuleId;
  }



  /**
   * Get houseNumber
   * @return houseNumber
   */
  @javax.annotation.Nullable
  public String getHouseNumber() {
    return houseNumber;
  }



  /**
   * The neighborhood where the street address is located. For example, Westlake.
   * @return neighborhood
   */
  @javax.annotation.Nullable
  public String getNeighborhood() {
    return neighborhood;
  }



  /**
   * Get postOfficeBoxNumber
   * @return postOfficeBoxNumber
   */
  @javax.annotation.Nullable
  public String getPostOfficeBoxNumber() {
    return postOfficeBoxNumber;
  }



  /**
   * The zip code or postal code where the street address is located. For example, 98052.
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }



  /**
   * Get streetAddress
   * @return streetAddress
   */
  @javax.annotation.Nullable
  public String getStreetAddress() {
    return streetAddress;
  }



  /**
   * Get streetName
   * @return streetName
   */
  @javax.annotation.Nullable
  public String getStreetName() {
    return streetName;
  }



  /**
   * The complete address. For example, 2100 Westlake Ave N, Bellevue, WA 98052.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostalAddress postalAddress = (PostalAddress) o;
    return Objects.equals(this.addressCountry, postalAddress.addressCountry) &&
        Objects.equals(this.addressLocality, postalAddress.addressLocality) &&
        Objects.equals(this.addressRegion, postalAddress.addressRegion) &&
        Objects.equals(this.addressRegionAbbreviation, postalAddress.addressRegionAbbreviation) &&
        Objects.equals(this.addressSubregion, postalAddress.addressSubregion) &&
        Objects.equals(this.countryIso, postalAddress.countryIso) &&
        Objects.equals(this.formattingRuleId, postalAddress.formattingRuleId) &&
        Objects.equals(this.houseNumber, postalAddress.houseNumber) &&
        Objects.equals(this.neighborhood, postalAddress.neighborhood) &&
        Objects.equals(this.postOfficeBoxNumber, postalAddress.postOfficeBoxNumber) &&
        Objects.equals(this.postalCode, postalAddress.postalCode) &&
        Objects.equals(this.streetAddress, postalAddress.streetAddress) &&
        Objects.equals(this.streetName, postalAddress.streetName) &&
        Objects.equals(this.text, postalAddress.text) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressCountry, addressLocality, addressRegion, addressRegionAbbreviation, addressSubregion, countryIso, formattingRuleId, houseNumber, neighborhood, postOfficeBoxNumber, postalCode, streetAddress, streetName, text, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostalAddress {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    addressCountry: ").append(toIndentedString(addressCountry)).append("\n");
    sb.append("    addressLocality: ").append(toIndentedString(addressLocality)).append("\n");
    sb.append("    addressRegion: ").append(toIndentedString(addressRegion)).append("\n");
    sb.append("    addressRegionAbbreviation: ").append(toIndentedString(addressRegionAbbreviation)).append("\n");
    sb.append("    addressSubregion: ").append(toIndentedString(addressSubregion)).append("\n");
    sb.append("    countryIso: ").append(toIndentedString(countryIso)).append("\n");
    sb.append("    formattingRuleId: ").append(toIndentedString(formattingRuleId)).append("\n");
    sb.append("    houseNumber: ").append(toIndentedString(houseNumber)).append("\n");
    sb.append("    neighborhood: ").append(toIndentedString(neighborhood)).append("\n");
    sb.append("    postOfficeBoxNumber: ").append(toIndentedString(postOfficeBoxNumber)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    streetAddress: ").append(toIndentedString(streetAddress)).append("\n");
    sb.append("    streetName: ").append(toIndentedString(streetName)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entityPresentationInfo");
    openapiFields.add("name");
    openapiFields.add("url");
    openapiFields.add("adaptiveCard");
    openapiFields.add("immediateAction");
    openapiFields.add("potentialAction");
    openapiFields.add("preferredClickthroughUrl");
    openapiFields.add("readLink");
    openapiFields.add("webSearchUrl");
    openapiFields.add("id");
    openapiFields.add("_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostalAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostalAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostalAddress is not found in the empty JSON string", PostalAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostalAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostalAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostalAddress.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostalAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostalAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostalAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostalAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<PostalAddress>() {
           @Override
           public void write(JsonWriter out, PostalAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostalAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostalAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostalAddress
   * @throws IOException if the JSON string is invalid with respect to PostalAddress
   */
  public static PostalAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostalAddress.class);
  }

  /**
   * Convert an instance of PostalAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

