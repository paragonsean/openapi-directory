# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server.models.entities_entity_presentation_info import EntitiesEntityPresentationInfo
from openapi_server.models.intangible import Intangible
from openapi_server import util


class StructuredValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_presentation_info: EntitiesEntityPresentationInfo=None, name: str=None, url: str=None, adaptive_card: str=None, immediate_action: List[Action]=None, potential_action: List[Action]=None, preferred_clickthrough_url: str=None, read_link: str=None, web_search_url: str=None, id: str=None, type: str=None):
        """StructuredValue - a model defined in OpenAPI

        :param entity_presentation_info: The entity_presentation_info of this StructuredValue.
        :param name: The name of this StructuredValue.
        :param url: The url of this StructuredValue.
        :param adaptive_card: The adaptive_card of this StructuredValue.
        :param immediate_action: The immediate_action of this StructuredValue.
        :param potential_action: The potential_action of this StructuredValue.
        :param preferred_clickthrough_url: The preferred_clickthrough_url of this StructuredValue.
        :param read_link: The read_link of this StructuredValue.
        :param web_search_url: The web_search_url of this StructuredValue.
        :param id: The id of this StructuredValue.
        :param type: The type of this StructuredValue.
        """
        self.openapi_types = {
            'entity_presentation_info': EntitiesEntityPresentationInfo,
            'name': str,
            'url': str,
            'adaptive_card': str,
            'immediate_action': List[Action],
            'potential_action': List[Action],
            'preferred_clickthrough_url': str,
            'read_link': str,
            'web_search_url': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'entity_presentation_info': 'entityPresentationInfo',
            'name': 'name',
            'url': 'url',
            'adaptive_card': 'adaptiveCard',
            'immediate_action': 'immediateAction',
            'potential_action': 'potentialAction',
            'preferred_clickthrough_url': 'preferredClickthroughUrl',
            'read_link': 'readLink',
            'web_search_url': 'webSearchUrl',
            'id': 'id',
            'type': '_type'
        }

        self._entity_presentation_info = entity_presentation_info
        self._name = name
        self._url = url
        self._adaptive_card = adaptive_card
        self._immediate_action = immediate_action
        self._potential_action = potential_action
        self._preferred_clickthrough_url = preferred_clickthrough_url
        self._read_link = read_link
        self._web_search_url = web_search_url
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StructuredValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StructuredValue of this StructuredValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_presentation_info(self):
        """Gets the entity_presentation_info of this StructuredValue.


        :return: The entity_presentation_info of this StructuredValue.
        :rtype: EntitiesEntityPresentationInfo
        """
        return self._entity_presentation_info

    @entity_presentation_info.setter
    def entity_presentation_info(self, entity_presentation_info):
        """Sets the entity_presentation_info of this StructuredValue.


        :param entity_presentation_info: The entity_presentation_info of this StructuredValue.
        :type entity_presentation_info: EntitiesEntityPresentationInfo
        """

        self._entity_presentation_info = entity_presentation_info

    @property
    def name(self):
        """Gets the name of this StructuredValue.

        The name of the thing represented by this object.

        :return: The name of this StructuredValue.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StructuredValue.

        The name of the thing represented by this object.

        :param name: The name of this StructuredValue.
        :type name: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this StructuredValue.

        The URL to get more information about the thing represented by this object.

        :return: The url of this StructuredValue.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this StructuredValue.

        The URL to get more information about the thing represented by this object.

        :param url: The url of this StructuredValue.
        :type url: str
        """

        self._url = url

    @property
    def adaptive_card(self):
        """Gets the adaptive_card of this StructuredValue.


        :return: The adaptive_card of this StructuredValue.
        :rtype: str
        """
        return self._adaptive_card

    @adaptive_card.setter
    def adaptive_card(self, adaptive_card):
        """Sets the adaptive_card of this StructuredValue.


        :param adaptive_card: The adaptive_card of this StructuredValue.
        :type adaptive_card: str
        """

        self._adaptive_card = adaptive_card

    @property
    def immediate_action(self):
        """Gets the immediate_action of this StructuredValue.


        :return: The immediate_action of this StructuredValue.
        :rtype: List[Action]
        """
        return self._immediate_action

    @immediate_action.setter
    def immediate_action(self, immediate_action):
        """Sets the immediate_action of this StructuredValue.


        :param immediate_action: The immediate_action of this StructuredValue.
        :type immediate_action: List[Action]
        """

        self._immediate_action = immediate_action

    @property
    def potential_action(self):
        """Gets the potential_action of this StructuredValue.


        :return: The potential_action of this StructuredValue.
        :rtype: List[Action]
        """
        return self._potential_action

    @potential_action.setter
    def potential_action(self, potential_action):
        """Sets the potential_action of this StructuredValue.


        :param potential_action: The potential_action of this StructuredValue.
        :type potential_action: List[Action]
        """

        self._potential_action = potential_action

    @property
    def preferred_clickthrough_url(self):
        """Gets the preferred_clickthrough_url of this StructuredValue.


        :return: The preferred_clickthrough_url of this StructuredValue.
        :rtype: str
        """
        return self._preferred_clickthrough_url

    @preferred_clickthrough_url.setter
    def preferred_clickthrough_url(self, preferred_clickthrough_url):
        """Sets the preferred_clickthrough_url of this StructuredValue.


        :param preferred_clickthrough_url: The preferred_clickthrough_url of this StructuredValue.
        :type preferred_clickthrough_url: str
        """

        self._preferred_clickthrough_url = preferred_clickthrough_url

    @property
    def read_link(self):
        """Gets the read_link of this StructuredValue.

        The URL that returns this resource.

        :return: The read_link of this StructuredValue.
        :rtype: str
        """
        return self._read_link

    @read_link.setter
    def read_link(self, read_link):
        """Sets the read_link of this StructuredValue.

        The URL that returns this resource.

        :param read_link: The read_link of this StructuredValue.
        :type read_link: str
        """

        self._read_link = read_link

    @property
    def web_search_url(self):
        """Gets the web_search_url of this StructuredValue.

        The URL to Bing's search result for this item.

        :return: The web_search_url of this StructuredValue.
        :rtype: str
        """
        return self._web_search_url

    @web_search_url.setter
    def web_search_url(self, web_search_url):
        """Sets the web_search_url of this StructuredValue.

        The URL to Bing's search result for this item.

        :param web_search_url: The web_search_url of this StructuredValue.
        :type web_search_url: str
        """

        self._web_search_url = web_search_url

    @property
    def id(self):
        """Gets the id of this StructuredValue.

        A String identifier.

        :return: The id of this StructuredValue.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StructuredValue.

        A String identifier.

        :param id: The id of this StructuredValue.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this StructuredValue.


        :return: The type of this StructuredValue.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StructuredValue.


        :param type: The type of this StructuredValue.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
