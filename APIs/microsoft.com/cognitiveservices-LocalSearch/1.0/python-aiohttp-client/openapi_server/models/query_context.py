# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueryContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, adult_intent: bool=None, alteration_display_query: str=None, alteration_override_query: str=None, altered_query: str=None, ask_user_for_location: bool=None, is_transactional: bool=None, original_query: str=None):
        """QueryContext - a model defined in OpenAPI

        :param type: The type of this QueryContext.
        :param adult_intent: The adult_intent of this QueryContext.
        :param alteration_display_query: The alteration_display_query of this QueryContext.
        :param alteration_override_query: The alteration_override_query of this QueryContext.
        :param altered_query: The altered_query of this QueryContext.
        :param ask_user_for_location: The ask_user_for_location of this QueryContext.
        :param is_transactional: The is_transactional of this QueryContext.
        :param original_query: The original_query of this QueryContext.
        """
        self.openapi_types = {
            'type': str,
            'adult_intent': bool,
            'alteration_display_query': str,
            'alteration_override_query': str,
            'altered_query': str,
            'ask_user_for_location': bool,
            'is_transactional': bool,
            'original_query': str
        }

        self.attribute_map = {
            'type': '_type',
            'adult_intent': 'adultIntent',
            'alteration_display_query': 'alterationDisplayQuery',
            'alteration_override_query': 'alterationOverrideQuery',
            'altered_query': 'alteredQuery',
            'ask_user_for_location': 'askUserForLocation',
            'is_transactional': 'isTransactional',
            'original_query': 'originalQuery'
        }

        self._type = type
        self._adult_intent = adult_intent
        self._alteration_display_query = alteration_display_query
        self._alteration_override_query = alteration_override_query
        self._altered_query = altered_query
        self._ask_user_for_location = ask_user_for_location
        self._is_transactional = is_transactional
        self._original_query = original_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryContext of this QueryContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this QueryContext.


        :return: The type of this QueryContext.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this QueryContext.


        :param type: The type of this QueryContext.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def adult_intent(self):
        """Gets the adult_intent of this QueryContext.

        A Boolean value that indicates whether the specified query has adult intent. The value is true if the query has adult intent; otherwise, false.

        :return: The adult_intent of this QueryContext.
        :rtype: bool
        """
        return self._adult_intent

    @adult_intent.setter
    def adult_intent(self, adult_intent):
        """Sets the adult_intent of this QueryContext.

        A Boolean value that indicates whether the specified query has adult intent. The value is true if the query has adult intent; otherwise, false.

        :param adult_intent: The adult_intent of this QueryContext.
        :type adult_intent: bool
        """

        self._adult_intent = adult_intent

    @property
    def alteration_display_query(self):
        """Gets the alteration_display_query of this QueryContext.

        AlteredQuery that is formatted for display purpose. The query string in the AlterationDisplayQuery can be html-escaped and can contain hit-highlighting characters

        :return: The alteration_display_query of this QueryContext.
        :rtype: str
        """
        return self._alteration_display_query

    @alteration_display_query.setter
    def alteration_display_query(self, alteration_display_query):
        """Sets the alteration_display_query of this QueryContext.

        AlteredQuery that is formatted for display purpose. The query string in the AlterationDisplayQuery can be html-escaped and can contain hit-highlighting characters

        :param alteration_display_query: The alteration_display_query of this QueryContext.
        :type alteration_display_query: str
        """

        self._alteration_display_query = alteration_display_query

    @property
    def alteration_override_query(self):
        """Gets the alteration_override_query of this QueryContext.

        The query string to use to force Bing to use the original string. For example, if the query string is \"saling downwind\", the override query string will be \"+saling downwind\". Remember to encode the query string which results in \"%2Bsaling+downwind\". This field is included only if the original query string contains a spelling mistake.

        :return: The alteration_override_query of this QueryContext.
        :rtype: str
        """
        return self._alteration_override_query

    @alteration_override_query.setter
    def alteration_override_query(self, alteration_override_query):
        """Sets the alteration_override_query of this QueryContext.

        The query string to use to force Bing to use the original string. For example, if the query string is \"saling downwind\", the override query string will be \"+saling downwind\". Remember to encode the query string which results in \"%2Bsaling+downwind\". This field is included only if the original query string contains a spelling mistake.

        :param alteration_override_query: The alteration_override_query of this QueryContext.
        :type alteration_override_query: str
        """

        self._alteration_override_query = alteration_override_query

    @property
    def altered_query(self):
        """Gets the altered_query of this QueryContext.

        The query string used by Bing to perform the query. Bing uses the altered query string if the original query string contained spelling mistakes. For example, if the query string is \"saling downwind\", the altered query string will be \"sailing downwind\". This field is included only if the original query string contains a spelling mistake.

        :return: The altered_query of this QueryContext.
        :rtype: str
        """
        return self._altered_query

    @altered_query.setter
    def altered_query(self, altered_query):
        """Sets the altered_query of this QueryContext.

        The query string used by Bing to perform the query. Bing uses the altered query string if the original query string contained spelling mistakes. For example, if the query string is \"saling downwind\", the altered query string will be \"sailing downwind\". This field is included only if the original query string contains a spelling mistake.

        :param altered_query: The altered_query of this QueryContext.
        :type altered_query: str
        """

        self._altered_query = altered_query

    @property
    def ask_user_for_location(self):
        """Gets the ask_user_for_location of this QueryContext.

        A Boolean value that indicates whether Bing requires the user's location to provide accurate results. If you specified the user's location by using the X-MSEdge-ClientIP and X-Search-Location headers, you can ignore this field. For location aware queries, such as \"today's weather\" or \"restaurants near me\" that need the user's location to provide accurate results, this field is set to true. For location aware queries that include the location (for example, \"Seattle weather\"), this field is set to false. This field is also set to false for queries that are not location aware, such as \"best sellers\".

        :return: The ask_user_for_location of this QueryContext.
        :rtype: bool
        """
        return self._ask_user_for_location

    @ask_user_for_location.setter
    def ask_user_for_location(self, ask_user_for_location):
        """Sets the ask_user_for_location of this QueryContext.

        A Boolean value that indicates whether Bing requires the user's location to provide accurate results. If you specified the user's location by using the X-MSEdge-ClientIP and X-Search-Location headers, you can ignore this field. For location aware queries, such as \"today's weather\" or \"restaurants near me\" that need the user's location to provide accurate results, this field is set to true. For location aware queries that include the location (for example, \"Seattle weather\"), this field is set to false. This field is also set to false for queries that are not location aware, such as \"best sellers\".

        :param ask_user_for_location: The ask_user_for_location of this QueryContext.
        :type ask_user_for_location: bool
        """

        self._ask_user_for_location = ask_user_for_location

    @property
    def is_transactional(self):
        """Gets the is_transactional of this QueryContext.


        :return: The is_transactional of this QueryContext.
        :rtype: bool
        """
        return self._is_transactional

    @is_transactional.setter
    def is_transactional(self, is_transactional):
        """Sets the is_transactional of this QueryContext.


        :param is_transactional: The is_transactional of this QueryContext.
        :type is_transactional: bool
        """

        self._is_transactional = is_transactional

    @property
    def original_query(self):
        """Gets the original_query of this QueryContext.

        The query string as specified in the request.

        :return: The original_query of this QueryContext.
        :rtype: str
        """
        return self._original_query

    @original_query.setter
    def original_query(self, original_query):
        """Sets the original_query of this QueryContext.

        The query string as specified in the request.

        :param original_query: The original_query of this QueryContext.
        :type original_query: str
        """
        if original_query is None:
            raise ValueError("Invalid value for `original_query`, must not be `None`")

        self._original_query = original_query
