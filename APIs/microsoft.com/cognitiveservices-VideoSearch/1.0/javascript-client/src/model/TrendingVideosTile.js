/**
 * Video Search Client
 * The Video Search API lets you search on Bing for video that are relevant to the user's search query, for insights about a video or for videos that are trending based on search requests made by others. This section provides technical details about the query parameters and headers that you use to request videos and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Videos](https://docs.microsoft.com/azure/cognitive-services/bing-video-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageObject from './ImageObject';
import Query from './Query';

/**
 * The TrendingVideosTile model module.
 * @module model/TrendingVideosTile
 * @version 1.0
 */
class TrendingVideosTile {
    /**
     * Constructs a new <code>TrendingVideosTile</code>.
     * @alias module:model/TrendingVideosTile
     * @param image {module:model/ImageObject} 
     * @param query {module:model/Query} 
     */
    constructor(image, query) { 
        
        TrendingVideosTile.initialize(this, image, query);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, image, query) { 
        obj['image'] = image;
        obj['query'] = query;
    }

    /**
     * Constructs a <code>TrendingVideosTile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrendingVideosTile} obj Optional instance to populate.
     * @return {module:model/TrendingVideosTile} The populated <code>TrendingVideosTile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrendingVideosTile();

            if (data.hasOwnProperty('image')) {
                obj['image'] = ImageObject.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = Query.constructFromObject(data['query']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrendingVideosTile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrendingVideosTile</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TrendingVideosTile.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          ImageObject.validateJSON(data['image']);
        }
        // validate the optional field `query`
        if (data['query']) { // data not null
          Query.validateJSON(data['query']);
        }

        return true;
    }


}

TrendingVideosTile.RequiredProperties = ["image", "query"];

/**
 * @member {module:model/ImageObject} image
 */
TrendingVideosTile.prototype['image'] = undefined;

/**
 * @member {module:model/Query} query
 */
TrendingVideosTile.prototype['query'] = undefined;






export default TrendingVideosTile;

