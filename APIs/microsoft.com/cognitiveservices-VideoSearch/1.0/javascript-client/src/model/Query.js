/**
 * Video Search Client
 * The Video Search API lets you search on Bing for video that are relevant to the user's search query, for insights about a video or for videos that are trending based on search requests made by others. This section provides technical details about the query parameters and headers that you use to request videos and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Videos](https://docs.microsoft.com/azure/cognitive-services/bing-video-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageObject from './ImageObject';

/**
 * The Query model module.
 * @module model/Query
 * @version 1.0
 */
class Query {
    /**
     * Constructs a new <code>Query</code>.
     * Defines a search query.
     * @alias module:model/Query
     * @param text {String} The query string. Use this string as the query term in a new search request.
     */
    constructor(text) { 
        
        Query.initialize(this, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, text) { 
        obj['text'] = text;
    }

    /**
     * Constructs a <code>Query</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Query} obj Optional instance to populate.
     * @return {module:model/Query} The populated <code>Query</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Query();

            if (data.hasOwnProperty('displayText')) {
                obj['displayText'] = ApiClient.convertToType(data['displayText'], 'String');
            }
            if (data.hasOwnProperty('searchLink')) {
                obj['searchLink'] = ApiClient.convertToType(data['searchLink'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('thumbnail')) {
                obj['thumbnail'] = ImageObject.constructFromObject(data['thumbnail']);
            }
            if (data.hasOwnProperty('webSearchUrl')) {
                obj['webSearchUrl'] = ApiClient.convertToType(data['webSearchUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Query</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Query</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Query.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['displayText'] && !(typeof data['displayText'] === 'string' || data['displayText'] instanceof String)) {
            throw new Error("Expected the field `displayText` to be a primitive type in the JSON string but got " + data['displayText']);
        }
        // ensure the json data is a string
        if (data['searchLink'] && !(typeof data['searchLink'] === 'string' || data['searchLink'] instanceof String)) {
            throw new Error("Expected the field `searchLink` to be a primitive type in the JSON string but got " + data['searchLink']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // validate the optional field `thumbnail`
        if (data['thumbnail']) { // data not null
          ImageObject.validateJSON(data['thumbnail']);
        }
        // ensure the json data is a string
        if (data['webSearchUrl'] && !(typeof data['webSearchUrl'] === 'string' || data['webSearchUrl'] instanceof String)) {
            throw new Error("Expected the field `webSearchUrl` to be a primitive type in the JSON string but got " + data['webSearchUrl']);
        }

        return true;
    }


}

Query.RequiredProperties = ["text"];

/**
 * The display version of the query term. This version of the query term may contain special characters that highlight the search term found in the query string. The string contains the highlighting characters only if the query enabled hit highlighting
 * @member {String} displayText
 */
Query.prototype['displayText'] = undefined;

/**
 * @member {String} searchLink
 */
Query.prototype['searchLink'] = undefined;

/**
 * The query string. Use this string as the query term in a new search request.
 * @member {String} text
 */
Query.prototype['text'] = undefined;

/**
 * @member {module:model/ImageObject} thumbnail
 */
Query.prototype['thumbnail'] = undefined;

/**
 * The URL that takes the user to the Bing search results page for the query.Only related search results include this field.
 * @member {String} webSearchUrl
 */
Query.prototype['webSearchUrl'] = undefined;






export default Query;

