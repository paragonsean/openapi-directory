/**
 * Video Search Client
 * The Video Search API lets you search on Bing for video that are relevant to the user's search query, for insights about a video or for videos that are trending based on search requests made by others. This section provides technical details about the query parameters and headers that you use to request videos and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Videos](https://docs.microsoft.com/azure/cognitive-services/bing-video-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VideoSearchClient);
  }
}(this, function(expect, VideoSearchClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new VideoSearchClient.QueryContext();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('QueryContext', function() {
    it('should create an instance of QueryContext', function() {
      // uncomment below and update the code to test QueryContext
      //var instance = new VideoSearchClient.QueryContext();
      //expect(instance).to.be.a(VideoSearchClient.QueryContext);
    });

    it('should have the property adultIntent (base name: "adultIntent")', function() {
      // uncomment below and update the code to test the property adultIntent
      //var instance = new VideoSearchClient.QueryContext();
      //expect(instance).to.be();
    });

    it('should have the property alterationOverrideQuery (base name: "alterationOverrideQuery")', function() {
      // uncomment below and update the code to test the property alterationOverrideQuery
      //var instance = new VideoSearchClient.QueryContext();
      //expect(instance).to.be();
    });

    it('should have the property alteredQuery (base name: "alteredQuery")', function() {
      // uncomment below and update the code to test the property alteredQuery
      //var instance = new VideoSearchClient.QueryContext();
      //expect(instance).to.be();
    });

    it('should have the property askUserForLocation (base name: "askUserForLocation")', function() {
      // uncomment below and update the code to test the property askUserForLocation
      //var instance = new VideoSearchClient.QueryContext();
      //expect(instance).to.be();
    });

    it('should have the property isTransactional (base name: "isTransactional")', function() {
      // uncomment below and update the code to test the property isTransactional
      //var instance = new VideoSearchClient.QueryContext();
      //expect(instance).to.be();
    });

    it('should have the property originalQuery (base name: "originalQuery")', function() {
      // uncomment below and update the code to test the property originalQuery
      //var instance = new VideoSearchClient.QueryContext();
      //expect(instance).to.be();
    });

  });

}));
