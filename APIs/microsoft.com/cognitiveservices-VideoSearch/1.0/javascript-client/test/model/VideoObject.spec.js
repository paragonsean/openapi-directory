/**
 * Video Search Client
 * The Video Search API lets you search on Bing for video that are relevant to the user's search query, for insights about a video or for videos that are trending based on search requests made by others. This section provides technical details about the query parameters and headers that you use to request videos and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Videos](https://docs.microsoft.com/azure/cognitive-services/bing-video-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VideoSearchClient);
  }
}(this, function(expect, VideoSearchClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new VideoSearchClient.VideoObject();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VideoObject', function() {
    it('should create an instance of VideoObject', function() {
      // uncomment below and update the code to test VideoObject
      //var instance = new VideoSearchClient.VideoObject();
      //expect(instance).to.be.a(VideoSearchClient.VideoObject);
    });

    it('should have the property allowHttpsEmbed (base name: "allowHttpsEmbed")', function() {
      // uncomment below and update the code to test the property allowHttpsEmbed
      //var instance = new VideoSearchClient.VideoObject();
      //expect(instance).to.be();
    });

    it('should have the property allowMobileEmbed (base name: "allowMobileEmbed")', function() {
      // uncomment below and update the code to test the property allowMobileEmbed
      //var instance = new VideoSearchClient.VideoObject();
      //expect(instance).to.be();
    });

    it('should have the property embedHtml (base name: "embedHtml")', function() {
      // uncomment below and update the code to test the property embedHtml
      //var instance = new VideoSearchClient.VideoObject();
      //expect(instance).to.be();
    });

    it('should have the property isSuperfresh (base name: "isSuperfresh")', function() {
      // uncomment below and update the code to test the property isSuperfresh
      //var instance = new VideoSearchClient.VideoObject();
      //expect(instance).to.be();
    });

    it('should have the property motionThumbnailId (base name: "motionThumbnailId")', function() {
      // uncomment below and update the code to test the property motionThumbnailId
      //var instance = new VideoSearchClient.VideoObject();
      //expect(instance).to.be();
    });

    it('should have the property motionThumbnailUrl (base name: "motionThumbnailUrl")', function() {
      // uncomment below and update the code to test the property motionThumbnailUrl
      //var instance = new VideoSearchClient.VideoObject();
      //expect(instance).to.be();
    });

    it('should have the property thumbnail (base name: "thumbnail")', function() {
      // uncomment below and update the code to test the property thumbnail
      //var instance = new VideoSearchClient.VideoObject();
      //expect(instance).to.be();
    });

    it('should have the property videoId (base name: "videoId")', function() {
      // uncomment below and update the code to test the property videoId
      //var instance = new VideoSearchClient.VideoObject();
      //expect(instance).to.be();
    });

    it('should have the property viewCount (base name: "viewCount")', function() {
      // uncomment below and update the code to test the property viewCount
      //var instance = new VideoSearchClient.VideoObject();
      //expect(instance).to.be();
    });

  });

}));
