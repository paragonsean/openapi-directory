# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.trending_videos_subcategory import TrendingVideosSubcategory
from openapi_server import util


class TrendingVideosCategory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subcategories: List[TrendingVideosSubcategory]=None, title: str=None):
        """TrendingVideosCategory - a model defined in OpenAPI

        :param subcategories: The subcategories of this TrendingVideosCategory.
        :param title: The title of this TrendingVideosCategory.
        """
        self.openapi_types = {
            'subcategories': List[TrendingVideosSubcategory],
            'title': str
        }

        self.attribute_map = {
            'subcategories': 'subcategories',
            'title': 'title'
        }

        self._subcategories = subcategories
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrendingVideosCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrendingVideosCategory of this TrendingVideosCategory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subcategories(self):
        """Gets the subcategories of this TrendingVideosCategory.


        :return: The subcategories of this TrendingVideosCategory.
        :rtype: List[TrendingVideosSubcategory]
        """
        return self._subcategories

    @subcategories.setter
    def subcategories(self, subcategories):
        """Sets the subcategories of this TrendingVideosCategory.


        :param subcategories: The subcategories of this TrendingVideosCategory.
        :type subcategories: List[TrendingVideosSubcategory]
        """
        if subcategories is None:
            raise ValueError("Invalid value for `subcategories`, must not be `None`")

        self._subcategories = subcategories

    @property
    def title(self):
        """Gets the title of this TrendingVideosCategory.


        :return: The title of this TrendingVideosCategory.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TrendingVideosCategory.


        :param title: The title of this TrendingVideosCategory.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
