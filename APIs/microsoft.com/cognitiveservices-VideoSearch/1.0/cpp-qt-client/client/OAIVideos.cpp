/**
 * Video Search Client
 * The Video Search API lets you search on Bing for video that are relevant to the user's search query, for insights about a video or for videos that are trending based on search requests made by others. This section provides technical details about the query parameters and headers that you use to request videos and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Videos](https://docs.microsoft.com/azure/cognitive-services/bing-video-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideos.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideos::OAIVideos(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideos::OAIVideos() {
    this->initializeModel();
}

OAIVideos::~OAIVideos() {}

void OAIVideos::initializeModel() {

    m_next_offset_isSet = false;
    m_next_offset_isValid = false;

    m_pivot_suggestions_isSet = false;
    m_pivot_suggestions_isValid = false;

    m_query_expansions_isSet = false;
    m_query_expansions_isValid = false;

    m_scenario_isSet = false;
    m_scenario_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_is_family_friendly_isSet = false;
    m_is_family_friendly_isValid = false;

    m_total_estimated_matches_isSet = false;
    m_total_estimated_matches_isValid = false;

    m_follow_up_queries_isSet = false;
    m_follow_up_queries_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIVideos::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideos::fromJsonObject(QJsonObject json) {

    m_next_offset_isValid = ::OpenAPI::fromJsonValue(m_next_offset, json[QString("nextOffset")]);
    m_next_offset_isSet = !json[QString("nextOffset")].isNull() && m_next_offset_isValid;

    m_pivot_suggestions_isValid = ::OpenAPI::fromJsonValue(m_pivot_suggestions, json[QString("pivotSuggestions")]);
    m_pivot_suggestions_isSet = !json[QString("pivotSuggestions")].isNull() && m_pivot_suggestions_isValid;

    m_query_expansions_isValid = ::OpenAPI::fromJsonValue(m_query_expansions, json[QString("queryExpansions")]);
    m_query_expansions_isSet = !json[QString("queryExpansions")].isNull() && m_query_expansions_isValid;

    m_scenario_isValid = ::OpenAPI::fromJsonValue(m_scenario, json[QString("scenario")]);
    m_scenario_isSet = !json[QString("scenario")].isNull() && m_scenario_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_is_family_friendly_isValid = ::OpenAPI::fromJsonValue(m_is_family_friendly, json[QString("isFamilyFriendly")]);
    m_is_family_friendly_isSet = !json[QString("isFamilyFriendly")].isNull() && m_is_family_friendly_isValid;

    m_total_estimated_matches_isValid = ::OpenAPI::fromJsonValue(m_total_estimated_matches, json[QString("totalEstimatedMatches")]);
    m_total_estimated_matches_isSet = !json[QString("totalEstimatedMatches")].isNull() && m_total_estimated_matches_isValid;

    m_follow_up_queries_isValid = ::OpenAPI::fromJsonValue(m_follow_up_queries, json[QString("followUpQueries")]);
    m_follow_up_queries_isSet = !json[QString("followUpQueries")].isNull() && m_follow_up_queries_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIVideos::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideos::asJsonObject() const {
    QJsonObject obj;
    if (m_next_offset_isSet) {
        obj.insert(QString("nextOffset"), ::OpenAPI::toJsonValue(m_next_offset));
    }
    if (m_pivot_suggestions.size() > 0) {
        obj.insert(QString("pivotSuggestions"), ::OpenAPI::toJsonValue(m_pivot_suggestions));
    }
    if (m_query_expansions.size() > 0) {
        obj.insert(QString("queryExpansions"), ::OpenAPI::toJsonValue(m_query_expansions));
    }
    if (m_scenario_isSet) {
        obj.insert(QString("scenario"), ::OpenAPI::toJsonValue(m_scenario));
    }
    if (m_value.size() > 0) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_is_family_friendly_isSet) {
        obj.insert(QString("isFamilyFriendly"), ::OpenAPI::toJsonValue(m_is_family_friendly));
    }
    if (m_total_estimated_matches_isSet) {
        obj.insert(QString("totalEstimatedMatches"), ::OpenAPI::toJsonValue(m_total_estimated_matches));
    }
    if (m_follow_up_queries.size() > 0) {
        obj.insert(QString("followUpQueries"), ::OpenAPI::toJsonValue(m_follow_up_queries));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

qint32 OAIVideos::getNextOffset() const {
    return m_next_offset;
}
void OAIVideos::setNextOffset(const qint32 &next_offset) {
    m_next_offset = next_offset;
    m_next_offset_isSet = true;
}

bool OAIVideos::is_next_offset_Set() const{
    return m_next_offset_isSet;
}

bool OAIVideos::is_next_offset_Valid() const{
    return m_next_offset_isValid;
}

QList<OAIPivotSuggestions> OAIVideos::getPivotSuggestions() const {
    return m_pivot_suggestions;
}
void OAIVideos::setPivotSuggestions(const QList<OAIPivotSuggestions> &pivot_suggestions) {
    m_pivot_suggestions = pivot_suggestions;
    m_pivot_suggestions_isSet = true;
}

bool OAIVideos::is_pivot_suggestions_Set() const{
    return m_pivot_suggestions_isSet;
}

bool OAIVideos::is_pivot_suggestions_Valid() const{
    return m_pivot_suggestions_isValid;
}

QList<OAIQuery> OAIVideos::getQueryExpansions() const {
    return m_query_expansions;
}
void OAIVideos::setQueryExpansions(const QList<OAIQuery> &query_expansions) {
    m_query_expansions = query_expansions;
    m_query_expansions_isSet = true;
}

bool OAIVideos::is_query_expansions_Set() const{
    return m_query_expansions_isSet;
}

bool OAIVideos::is_query_expansions_Valid() const{
    return m_query_expansions_isValid;
}

QString OAIVideos::getScenario() const {
    return m_scenario;
}
void OAIVideos::setScenario(const QString &scenario) {
    m_scenario = scenario;
    m_scenario_isSet = true;
}

bool OAIVideos::is_scenario_Set() const{
    return m_scenario_isSet;
}

bool OAIVideos::is_scenario_Valid() const{
    return m_scenario_isValid;
}

QList<OAIVideoObject> OAIVideos::getValue() const {
    return m_value;
}
void OAIVideos::setValue(const QList<OAIVideoObject> &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIVideos::is_value_Set() const{
    return m_value_isSet;
}

bool OAIVideos::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIVideos::isIsFamilyFriendly() const {
    return m_is_family_friendly;
}
void OAIVideos::setIsFamilyFriendly(const bool &is_family_friendly) {
    m_is_family_friendly = is_family_friendly;
    m_is_family_friendly_isSet = true;
}

bool OAIVideos::is_is_family_friendly_Set() const{
    return m_is_family_friendly_isSet;
}

bool OAIVideos::is_is_family_friendly_Valid() const{
    return m_is_family_friendly_isValid;
}

qint64 OAIVideos::getTotalEstimatedMatches() const {
    return m_total_estimated_matches;
}
void OAIVideos::setTotalEstimatedMatches(const qint64 &total_estimated_matches) {
    m_total_estimated_matches = total_estimated_matches;
    m_total_estimated_matches_isSet = true;
}

bool OAIVideos::is_total_estimated_matches_Set() const{
    return m_total_estimated_matches_isSet;
}

bool OAIVideos::is_total_estimated_matches_Valid() const{
    return m_total_estimated_matches_isValid;
}

QList<OAIQuery> OAIVideos::getFollowUpQueries() const {
    return m_follow_up_queries;
}
void OAIVideos::setFollowUpQueries(const QList<OAIQuery> &follow_up_queries) {
    m_follow_up_queries = follow_up_queries;
    m_follow_up_queries_isSet = true;
}

bool OAIVideos::is_follow_up_queries_Set() const{
    return m_follow_up_queries_isSet;
}

bool OAIVideos::is_follow_up_queries_Valid() const{
    return m_follow_up_queries_isValid;
}

QString OAIVideos::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIVideos::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIVideos::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIVideos::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIVideos::getId() const {
    return m_id;
}
void OAIVideos::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVideos::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVideos::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIVideos::getType() const {
    return m__type;
}
void OAIVideos::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIVideos::is__type_Set() const{
    return m__type_isSet;
}

bool OAIVideos::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIVideos::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pivot_suggestions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_expansions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scenario_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_family_friendly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_estimated_matches_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_follow_up_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideos::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid && m__type_isValid && true;
}

} // namespace OpenAPI
