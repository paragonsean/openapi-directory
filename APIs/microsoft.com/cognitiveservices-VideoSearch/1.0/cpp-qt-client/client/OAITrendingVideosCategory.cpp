/**
 * Video Search Client
 * The Video Search API lets you search on Bing for video that are relevant to the user's search query, for insights about a video or for videos that are trending based on search requests made by others. This section provides technical details about the query parameters and headers that you use to request videos and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Videos](https://docs.microsoft.com/azure/cognitive-services/bing-video-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrendingVideosCategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrendingVideosCategory::OAITrendingVideosCategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrendingVideosCategory::OAITrendingVideosCategory() {
    this->initializeModel();
}

OAITrendingVideosCategory::~OAITrendingVideosCategory() {}

void OAITrendingVideosCategory::initializeModel() {

    m_subcategories_isSet = false;
    m_subcategories_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAITrendingVideosCategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrendingVideosCategory::fromJsonObject(QJsonObject json) {

    m_subcategories_isValid = ::OpenAPI::fromJsonValue(m_subcategories, json[QString("subcategories")]);
    m_subcategories_isSet = !json[QString("subcategories")].isNull() && m_subcategories_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAITrendingVideosCategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrendingVideosCategory::asJsonObject() const {
    QJsonObject obj;
    if (m_subcategories.size() > 0) {
        obj.insert(QString("subcategories"), ::OpenAPI::toJsonValue(m_subcategories));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<OAITrendingVideosSubcategory> OAITrendingVideosCategory::getSubcategories() const {
    return m_subcategories;
}
void OAITrendingVideosCategory::setSubcategories(const QList<OAITrendingVideosSubcategory> &subcategories) {
    m_subcategories = subcategories;
    m_subcategories_isSet = true;
}

bool OAITrendingVideosCategory::is_subcategories_Set() const{
    return m_subcategories_isSet;
}

bool OAITrendingVideosCategory::is_subcategories_Valid() const{
    return m_subcategories_isValid;
}

QString OAITrendingVideosCategory::getTitle() const {
    return m_title;
}
void OAITrendingVideosCategory::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAITrendingVideosCategory::is_title_Set() const{
    return m_title_isSet;
}

bool OAITrendingVideosCategory::is_title_Valid() const{
    return m_title_isValid;
}

bool OAITrendingVideosCategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subcategories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrendingVideosCategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_subcategories_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
