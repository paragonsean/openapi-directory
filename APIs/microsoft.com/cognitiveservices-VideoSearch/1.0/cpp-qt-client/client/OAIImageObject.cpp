/**
 * Video Search Client
 * The Video Search API lets you search on Bing for video that are relevant to the user's search query, for insights about a video or for videos that are trending based on search requests made by others. This section provides technical details about the query parameters and headers that you use to request videos and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Videos](https://docs.microsoft.com/azure/cognitive-services/bing-video-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageObject::OAIImageObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageObject::OAIImageObject() {
    this->initializeModel();
}

OAIImageObject::~OAIImageObject() {}

void OAIImageObject::initializeModel() {

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;

    m_content_url_isSet = false;
    m_content_url_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_host_page_url_isSet = false;
    m_host_page_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;

    m_alternate_name_isSet = false;
    m_alternate_name_isValid = false;

    m_bing_id_isSet = false;
    m_bing_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIImageObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageObject::fromJsonObject(QJsonObject json) {

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;

    m_content_url_isValid = ::OpenAPI::fromJsonValue(m_content_url, json[QString("contentUrl")]);
    m_content_url_isSet = !json[QString("contentUrl")].isNull() && m_content_url_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_host_page_url_isValid = ::OpenAPI::fromJsonValue(m_host_page_url, json[QString("hostPageUrl")]);
    m_host_page_url_isSet = !json[QString("hostPageUrl")].isNull() && m_host_page_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnailUrl")]);
    m_thumbnail_url_isSet = !json[QString("thumbnailUrl")].isNull() && m_thumbnail_url_isValid;

    m_alternate_name_isValid = ::OpenAPI::fromJsonValue(m_alternate_name, json[QString("alternateName")]);
    m_alternate_name_isSet = !json[QString("alternateName")].isNull() && m_alternate_name_isValid;

    m_bing_id_isValid = ::OpenAPI::fromJsonValue(m_bing_id, json[QString("bingId")]);
    m_bing_id_isSet = !json[QString("bingId")].isNull() && m_bing_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIImageObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageObject::asJsonObject() const {
    QJsonObject obj;
    if (m_thumbnail.isSet()) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    if (m_content_url_isSet) {
        obj.insert(QString("contentUrl"), ::OpenAPI::toJsonValue(m_content_url));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_host_page_url_isSet) {
        obj.insert(QString("hostPageUrl"), ::OpenAPI::toJsonValue(m_host_page_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_provider.size() > 0) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnailUrl"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    if (m_alternate_name_isSet) {
        obj.insert(QString("alternateName"), ::OpenAPI::toJsonValue(m_alternate_name));
    }
    if (m_bing_id_isSet) {
        obj.insert(QString("bingId"), ::OpenAPI::toJsonValue(m_bing_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

OAIImageObject OAIImageObject::getThumbnail() const {
    return m_thumbnail;
}
void OAIImageObject::setThumbnail(const OAIImageObject &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAIImageObject::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAIImageObject::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

QString OAIImageObject::getContentUrl() const {
    return m_content_url;
}
void OAIImageObject::setContentUrl(const QString &content_url) {
    m_content_url = content_url;
    m_content_url_isSet = true;
}

bool OAIImageObject::is_content_url_Set() const{
    return m_content_url_isSet;
}

bool OAIImageObject::is_content_url_Valid() const{
    return m_content_url_isValid;
}

qint32 OAIImageObject::getHeight() const {
    return m_height;
}
void OAIImageObject::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIImageObject::is_height_Set() const{
    return m_height_isSet;
}

bool OAIImageObject::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIImageObject::getHostPageUrl() const {
    return m_host_page_url;
}
void OAIImageObject::setHostPageUrl(const QString &host_page_url) {
    m_host_page_url = host_page_url;
    m_host_page_url_isSet = true;
}

bool OAIImageObject::is_host_page_url_Set() const{
    return m_host_page_url_isSet;
}

bool OAIImageObject::is_host_page_url_Valid() const{
    return m_host_page_url_isValid;
}

qint32 OAIImageObject::getWidth() const {
    return m_width;
}
void OAIImageObject::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIImageObject::is_width_Set() const{
    return m_width_isSet;
}

bool OAIImageObject::is_width_Valid() const{
    return m_width_isValid;
}

QList<OAIThing> OAIImageObject::getProvider() const {
    return m_provider;
}
void OAIImageObject::setProvider(const QList<OAIThing> &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIImageObject::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIImageObject::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIImageObject::getText() const {
    return m_text;
}
void OAIImageObject::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIImageObject::is_text_Set() const{
    return m_text_isSet;
}

bool OAIImageObject::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIImageObject::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAIImageObject::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAIImageObject::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAIImageObject::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

QString OAIImageObject::getAlternateName() const {
    return m_alternate_name;
}
void OAIImageObject::setAlternateName(const QString &alternate_name) {
    m_alternate_name = alternate_name;
    m_alternate_name_isSet = true;
}

bool OAIImageObject::is_alternate_name_Set() const{
    return m_alternate_name_isSet;
}

bool OAIImageObject::is_alternate_name_Valid() const{
    return m_alternate_name_isValid;
}

QString OAIImageObject::getBingId() const {
    return m_bing_id;
}
void OAIImageObject::setBingId(const QString &bing_id) {
    m_bing_id = bing_id;
    m_bing_id_isSet = true;
}

bool OAIImageObject::is_bing_id_Set() const{
    return m_bing_id_isSet;
}

bool OAIImageObject::is_bing_id_Valid() const{
    return m_bing_id_isValid;
}

QString OAIImageObject::getDescription() const {
    return m_description;
}
void OAIImageObject::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIImageObject::is_description_Set() const{
    return m_description_isSet;
}

bool OAIImageObject::is_description_Valid() const{
    return m_description_isValid;
}

OAIImageObject OAIImageObject::getImage() const {
    return m_image;
}
void OAIImageObject::setImage(const OAIImageObject &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIImageObject::is_image_Set() const{
    return m_image_isSet;
}

bool OAIImageObject::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIImageObject::getName() const {
    return m_name;
}
void OAIImageObject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImageObject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImageObject::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIImageObject::getUrl() const {
    return m_url;
}
void OAIImageObject::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIImageObject::is_url_Set() const{
    return m_url_isSet;
}

bool OAIImageObject::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIImageObject::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIImageObject::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIImageObject::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIImageObject::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIImageObject::getId() const {
    return m_id;
}
void OAIImageObject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImageObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImageObject::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIImageObject::getType() const {
    return m__type;
}
void OAIImageObject::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIImageObject::is__type_Set() const{
    return m__type_isSet;
}

bool OAIImageObject::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIImageObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_thumbnail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_page_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
