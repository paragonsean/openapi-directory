/**
 * Video Search Client
 * The Video Search API lets you search on Bing for video that are relevant to the user's search query, for insights about a video or for videos that are trending based on search requests made by others. This section provides technical details about the query parameters and headers that you use to request videos and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Videos](https://docs.microsoft.com/azure/cognitive-services/bing-video-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoObject::OAIVideoObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoObject::OAIVideoObject() {
    this->initializeModel();
}

OAIVideoObject::~OAIVideoObject() {}

void OAIVideoObject::initializeModel() {

    m_allow_https_embed_isSet = false;
    m_allow_https_embed_isValid = false;

    m_allow_mobile_embed_isSet = false;
    m_allow_mobile_embed_isValid = false;

    m_embed_html_isSet = false;
    m_embed_html_isValid = false;

    m_is_superfresh_isSet = false;
    m_is_superfresh_isValid = false;

    m_motion_thumbnail_id_isSet = false;
    m_motion_thumbnail_id_isValid = false;

    m_motion_thumbnail_url_isSet = false;
    m_motion_thumbnail_url_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;

    m_video_id_isSet = false;
    m_video_id_isValid = false;

    m_view_count_isSet = false;
    m_view_count_isValid = false;

    m_content_url_isSet = false;
    m_content_url_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_host_page_url_isSet = false;
    m_host_page_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_thumbnail_url_isSet = false;
    m_thumbnail_url_isValid = false;

    m_alternate_name_isSet = false;
    m_alternate_name_isValid = false;

    m_bing_id_isSet = false;
    m_bing_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIVideoObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoObject::fromJsonObject(QJsonObject json) {

    m_allow_https_embed_isValid = ::OpenAPI::fromJsonValue(m_allow_https_embed, json[QString("allowHttpsEmbed")]);
    m_allow_https_embed_isSet = !json[QString("allowHttpsEmbed")].isNull() && m_allow_https_embed_isValid;

    m_allow_mobile_embed_isValid = ::OpenAPI::fromJsonValue(m_allow_mobile_embed, json[QString("allowMobileEmbed")]);
    m_allow_mobile_embed_isSet = !json[QString("allowMobileEmbed")].isNull() && m_allow_mobile_embed_isValid;

    m_embed_html_isValid = ::OpenAPI::fromJsonValue(m_embed_html, json[QString("embedHtml")]);
    m_embed_html_isSet = !json[QString("embedHtml")].isNull() && m_embed_html_isValid;

    m_is_superfresh_isValid = ::OpenAPI::fromJsonValue(m_is_superfresh, json[QString("isSuperfresh")]);
    m_is_superfresh_isSet = !json[QString("isSuperfresh")].isNull() && m_is_superfresh_isValid;

    m_motion_thumbnail_id_isValid = ::OpenAPI::fromJsonValue(m_motion_thumbnail_id, json[QString("motionThumbnailId")]);
    m_motion_thumbnail_id_isSet = !json[QString("motionThumbnailId")].isNull() && m_motion_thumbnail_id_isValid;

    m_motion_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_motion_thumbnail_url, json[QString("motionThumbnailUrl")]);
    m_motion_thumbnail_url_isSet = !json[QString("motionThumbnailUrl")].isNull() && m_motion_thumbnail_url_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;

    m_video_id_isValid = ::OpenAPI::fromJsonValue(m_video_id, json[QString("videoId")]);
    m_video_id_isSet = !json[QString("videoId")].isNull() && m_video_id_isValid;

    m_view_count_isValid = ::OpenAPI::fromJsonValue(m_view_count, json[QString("viewCount")]);
    m_view_count_isSet = !json[QString("viewCount")].isNull() && m_view_count_isValid;

    m_content_url_isValid = ::OpenAPI::fromJsonValue(m_content_url, json[QString("contentUrl")]);
    m_content_url_isSet = !json[QString("contentUrl")].isNull() && m_content_url_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_host_page_url_isValid = ::OpenAPI::fromJsonValue(m_host_page_url, json[QString("hostPageUrl")]);
    m_host_page_url_isSet = !json[QString("hostPageUrl")].isNull() && m_host_page_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_url, json[QString("thumbnailUrl")]);
    m_thumbnail_url_isSet = !json[QString("thumbnailUrl")].isNull() && m_thumbnail_url_isValid;

    m_alternate_name_isValid = ::OpenAPI::fromJsonValue(m_alternate_name, json[QString("alternateName")]);
    m_alternate_name_isSet = !json[QString("alternateName")].isNull() && m_alternate_name_isValid;

    m_bing_id_isValid = ::OpenAPI::fromJsonValue(m_bing_id, json[QString("bingId")]);
    m_bing_id_isSet = !json[QString("bingId")].isNull() && m_bing_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIVideoObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoObject::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_https_embed_isSet) {
        obj.insert(QString("allowHttpsEmbed"), ::OpenAPI::toJsonValue(m_allow_https_embed));
    }
    if (m_allow_mobile_embed_isSet) {
        obj.insert(QString("allowMobileEmbed"), ::OpenAPI::toJsonValue(m_allow_mobile_embed));
    }
    if (m_embed_html_isSet) {
        obj.insert(QString("embedHtml"), ::OpenAPI::toJsonValue(m_embed_html));
    }
    if (m_is_superfresh_isSet) {
        obj.insert(QString("isSuperfresh"), ::OpenAPI::toJsonValue(m_is_superfresh));
    }
    if (m_motion_thumbnail_id_isSet) {
        obj.insert(QString("motionThumbnailId"), ::OpenAPI::toJsonValue(m_motion_thumbnail_id));
    }
    if (m_motion_thumbnail_url_isSet) {
        obj.insert(QString("motionThumbnailUrl"), ::OpenAPI::toJsonValue(m_motion_thumbnail_url));
    }
    if (m_thumbnail.isSet()) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    if (m_video_id_isSet) {
        obj.insert(QString("videoId"), ::OpenAPI::toJsonValue(m_video_id));
    }
    if (m_view_count_isSet) {
        obj.insert(QString("viewCount"), ::OpenAPI::toJsonValue(m_view_count));
    }
    if (m_content_url_isSet) {
        obj.insert(QString("contentUrl"), ::OpenAPI::toJsonValue(m_content_url));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_host_page_url_isSet) {
        obj.insert(QString("hostPageUrl"), ::OpenAPI::toJsonValue(m_host_page_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_provider.size() > 0) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_thumbnail_url_isSet) {
        obj.insert(QString("thumbnailUrl"), ::OpenAPI::toJsonValue(m_thumbnail_url));
    }
    if (m_alternate_name_isSet) {
        obj.insert(QString("alternateName"), ::OpenAPI::toJsonValue(m_alternate_name));
    }
    if (m_bing_id_isSet) {
        obj.insert(QString("bingId"), ::OpenAPI::toJsonValue(m_bing_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

bool OAIVideoObject::isAllowHttpsEmbed() const {
    return m_allow_https_embed;
}
void OAIVideoObject::setAllowHttpsEmbed(const bool &allow_https_embed) {
    m_allow_https_embed = allow_https_embed;
    m_allow_https_embed_isSet = true;
}

bool OAIVideoObject::is_allow_https_embed_Set() const{
    return m_allow_https_embed_isSet;
}

bool OAIVideoObject::is_allow_https_embed_Valid() const{
    return m_allow_https_embed_isValid;
}

bool OAIVideoObject::isAllowMobileEmbed() const {
    return m_allow_mobile_embed;
}
void OAIVideoObject::setAllowMobileEmbed(const bool &allow_mobile_embed) {
    m_allow_mobile_embed = allow_mobile_embed;
    m_allow_mobile_embed_isSet = true;
}

bool OAIVideoObject::is_allow_mobile_embed_Set() const{
    return m_allow_mobile_embed_isSet;
}

bool OAIVideoObject::is_allow_mobile_embed_Valid() const{
    return m_allow_mobile_embed_isValid;
}

QString OAIVideoObject::getEmbedHtml() const {
    return m_embed_html;
}
void OAIVideoObject::setEmbedHtml(const QString &embed_html) {
    m_embed_html = embed_html;
    m_embed_html_isSet = true;
}

bool OAIVideoObject::is_embed_html_Set() const{
    return m_embed_html_isSet;
}

bool OAIVideoObject::is_embed_html_Valid() const{
    return m_embed_html_isValid;
}

bool OAIVideoObject::isIsSuperfresh() const {
    return m_is_superfresh;
}
void OAIVideoObject::setIsSuperfresh(const bool &is_superfresh) {
    m_is_superfresh = is_superfresh;
    m_is_superfresh_isSet = true;
}

bool OAIVideoObject::is_is_superfresh_Set() const{
    return m_is_superfresh_isSet;
}

bool OAIVideoObject::is_is_superfresh_Valid() const{
    return m_is_superfresh_isValid;
}

QString OAIVideoObject::getMotionThumbnailId() const {
    return m_motion_thumbnail_id;
}
void OAIVideoObject::setMotionThumbnailId(const QString &motion_thumbnail_id) {
    m_motion_thumbnail_id = motion_thumbnail_id;
    m_motion_thumbnail_id_isSet = true;
}

bool OAIVideoObject::is_motion_thumbnail_id_Set() const{
    return m_motion_thumbnail_id_isSet;
}

bool OAIVideoObject::is_motion_thumbnail_id_Valid() const{
    return m_motion_thumbnail_id_isValid;
}

QString OAIVideoObject::getMotionThumbnailUrl() const {
    return m_motion_thumbnail_url;
}
void OAIVideoObject::setMotionThumbnailUrl(const QString &motion_thumbnail_url) {
    m_motion_thumbnail_url = motion_thumbnail_url;
    m_motion_thumbnail_url_isSet = true;
}

bool OAIVideoObject::is_motion_thumbnail_url_Set() const{
    return m_motion_thumbnail_url_isSet;
}

bool OAIVideoObject::is_motion_thumbnail_url_Valid() const{
    return m_motion_thumbnail_url_isValid;
}

OAIImageObject OAIVideoObject::getThumbnail() const {
    return m_thumbnail;
}
void OAIVideoObject::setThumbnail(const OAIImageObject &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAIVideoObject::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAIVideoObject::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

QString OAIVideoObject::getVideoId() const {
    return m_video_id;
}
void OAIVideoObject::setVideoId(const QString &video_id) {
    m_video_id = video_id;
    m_video_id_isSet = true;
}

bool OAIVideoObject::is_video_id_Set() const{
    return m_video_id_isSet;
}

bool OAIVideoObject::is_video_id_Valid() const{
    return m_video_id_isValid;
}

qint32 OAIVideoObject::getViewCount() const {
    return m_view_count;
}
void OAIVideoObject::setViewCount(const qint32 &view_count) {
    m_view_count = view_count;
    m_view_count_isSet = true;
}

bool OAIVideoObject::is_view_count_Set() const{
    return m_view_count_isSet;
}

bool OAIVideoObject::is_view_count_Valid() const{
    return m_view_count_isValid;
}

QString OAIVideoObject::getContentUrl() const {
    return m_content_url;
}
void OAIVideoObject::setContentUrl(const QString &content_url) {
    m_content_url = content_url;
    m_content_url_isSet = true;
}

bool OAIVideoObject::is_content_url_Set() const{
    return m_content_url_isSet;
}

bool OAIVideoObject::is_content_url_Valid() const{
    return m_content_url_isValid;
}

qint32 OAIVideoObject::getHeight() const {
    return m_height;
}
void OAIVideoObject::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIVideoObject::is_height_Set() const{
    return m_height_isSet;
}

bool OAIVideoObject::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIVideoObject::getHostPageUrl() const {
    return m_host_page_url;
}
void OAIVideoObject::setHostPageUrl(const QString &host_page_url) {
    m_host_page_url = host_page_url;
    m_host_page_url_isSet = true;
}

bool OAIVideoObject::is_host_page_url_Set() const{
    return m_host_page_url_isSet;
}

bool OAIVideoObject::is_host_page_url_Valid() const{
    return m_host_page_url_isValid;
}

qint32 OAIVideoObject::getWidth() const {
    return m_width;
}
void OAIVideoObject::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIVideoObject::is_width_Set() const{
    return m_width_isSet;
}

bool OAIVideoObject::is_width_Valid() const{
    return m_width_isValid;
}

QList<OAIThing> OAIVideoObject::getProvider() const {
    return m_provider;
}
void OAIVideoObject::setProvider(const QList<OAIThing> &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIVideoObject::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIVideoObject::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIVideoObject::getText() const {
    return m_text;
}
void OAIVideoObject::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIVideoObject::is_text_Set() const{
    return m_text_isSet;
}

bool OAIVideoObject::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIVideoObject::getThumbnailUrl() const {
    return m_thumbnail_url;
}
void OAIVideoObject::setThumbnailUrl(const QString &thumbnail_url) {
    m_thumbnail_url = thumbnail_url;
    m_thumbnail_url_isSet = true;
}

bool OAIVideoObject::is_thumbnail_url_Set() const{
    return m_thumbnail_url_isSet;
}

bool OAIVideoObject::is_thumbnail_url_Valid() const{
    return m_thumbnail_url_isValid;
}

QString OAIVideoObject::getAlternateName() const {
    return m_alternate_name;
}
void OAIVideoObject::setAlternateName(const QString &alternate_name) {
    m_alternate_name = alternate_name;
    m_alternate_name_isSet = true;
}

bool OAIVideoObject::is_alternate_name_Set() const{
    return m_alternate_name_isSet;
}

bool OAIVideoObject::is_alternate_name_Valid() const{
    return m_alternate_name_isValid;
}

QString OAIVideoObject::getBingId() const {
    return m_bing_id;
}
void OAIVideoObject::setBingId(const QString &bing_id) {
    m_bing_id = bing_id;
    m_bing_id_isSet = true;
}

bool OAIVideoObject::is_bing_id_Set() const{
    return m_bing_id_isSet;
}

bool OAIVideoObject::is_bing_id_Valid() const{
    return m_bing_id_isValid;
}

QString OAIVideoObject::getDescription() const {
    return m_description;
}
void OAIVideoObject::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVideoObject::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVideoObject::is_description_Valid() const{
    return m_description_isValid;
}

OAIImageObject OAIVideoObject::getImage() const {
    return m_image;
}
void OAIVideoObject::setImage(const OAIImageObject &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIVideoObject::is_image_Set() const{
    return m_image_isSet;
}

bool OAIVideoObject::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIVideoObject::getName() const {
    return m_name;
}
void OAIVideoObject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVideoObject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVideoObject::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVideoObject::getUrl() const {
    return m_url;
}
void OAIVideoObject::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVideoObject::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVideoObject::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIVideoObject::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIVideoObject::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIVideoObject::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIVideoObject::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIVideoObject::getId() const {
    return m_id;
}
void OAIVideoObject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVideoObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVideoObject::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIVideoObject::getType() const {
    return m__type;
}
void OAIVideoObject::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIVideoObject::is__type_Set() const{
    return m__type_isSet;
}

bool OAIVideoObject::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIVideoObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_https_embed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_mobile_embed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embed_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_superfresh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_motion_thumbnail_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_motion_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_page_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
