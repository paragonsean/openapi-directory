/**
 * Video Search Client
 * The Video Search API lets you search on Bing for video that are relevant to the user's search query, for insights about a video or for videos that are trending based on search requests made by others. This section provides technical details about the query parameters and headers that you use to request videos and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Videos](https://docs.microsoft.com/azure/cognitive-services/bing-video-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrendingVideosTile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrendingVideosTile::OAITrendingVideosTile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrendingVideosTile::OAITrendingVideosTile() {
    this->initializeModel();
}

OAITrendingVideosTile::~OAITrendingVideosTile() {}

void OAITrendingVideosTile::initializeModel() {

    m_image_isSet = false;
    m_image_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;
}

void OAITrendingVideosTile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrendingVideosTile::fromJsonObject(QJsonObject json) {

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;
}

QString OAITrendingVideosTile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrendingVideosTile::asJsonObject() const {
    QJsonObject obj;
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    return obj;
}

OAIImageObject OAITrendingVideosTile::getImage() const {
    return m_image;
}
void OAITrendingVideosTile::setImage(const OAIImageObject &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAITrendingVideosTile::is_image_Set() const{
    return m_image_isSet;
}

bool OAITrendingVideosTile::is_image_Valid() const{
    return m_image_isValid;
}

OAIQuery OAITrendingVideosTile::getQuery() const {
    return m_query;
}
void OAITrendingVideosTile::setQuery(const OAIQuery &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAITrendingVideosTile::is_query_Set() const{
    return m_query_isSet;
}

bool OAITrendingVideosTile::is_query_Valid() const{
    return m_query_isValid;
}

bool OAITrendingVideosTile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrendingVideosTile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_isValid && m_query_isValid && true;
}

} // namespace OpenAPI
