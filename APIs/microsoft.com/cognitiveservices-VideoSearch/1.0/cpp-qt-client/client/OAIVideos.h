/**
 * Video Search Client
 * The Video Search API lets you search on Bing for video that are relevant to the user's search query, for insights about a video or for videos that are trending based on search requests made by others. This section provides technical details about the query parameters and headers that you use to request videos and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Videos](https://docs.microsoft.com/azure/cognitive-services/bing-video-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVideos.h
 *
 * Defines a video answer.
 */

#ifndef OAIVideos_H
#define OAIVideos_H

#include <QJsonObject>

#include "OAIPivotSuggestions.h"
#include "OAIQuery.h"
#include "OAISearchResultsAnswer.h"
#include "OAIVideoObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPivotSuggestions;
class OAIQuery;
class OAIVideoObject;

class OAIVideos : public OAIObject {
public:
    OAIVideos();
    OAIVideos(QString json);
    ~OAIVideos() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getNextOffset() const;
    void setNextOffset(const qint32 &next_offset);
    bool is_next_offset_Set() const;
    bool is_next_offset_Valid() const;

    QList<OAIPivotSuggestions> getPivotSuggestions() const;
    void setPivotSuggestions(const QList<OAIPivotSuggestions> &pivot_suggestions);
    bool is_pivot_suggestions_Set() const;
    bool is_pivot_suggestions_Valid() const;

    QList<OAIQuery> getQueryExpansions() const;
    void setQueryExpansions(const QList<OAIQuery> &query_expansions);
    bool is_query_expansions_Set() const;
    bool is_query_expansions_Valid() const;

    QString getScenario() const;
    void setScenario(const QString &scenario);
    bool is_scenario_Set() const;
    bool is_scenario_Valid() const;

    QList<OAIVideoObject> getValue() const;
    void setValue(const QList<OAIVideoObject> &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    bool isIsFamilyFriendly() const;
    void setIsFamilyFriendly(const bool &is_family_friendly);
    bool is_is_family_friendly_Set() const;
    bool is_is_family_friendly_Valid() const;

    qint64 getTotalEstimatedMatches() const;
    void setTotalEstimatedMatches(const qint64 &total_estimated_matches);
    bool is_total_estimated_matches_Set() const;
    bool is_total_estimated_matches_Valid() const;

    QList<OAIQuery> getFollowUpQueries() const;
    void setFollowUpQueries(const QList<OAIQuery> &follow_up_queries);
    bool is_follow_up_queries_Set() const;
    bool is_follow_up_queries_Valid() const;

    QString getWebSearchUrl() const;
    void setWebSearchUrl(const QString &web_search_url);
    bool is_web_search_url_Set() const;
    bool is_web_search_url_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getType() const;
    void setType(const QString &_type);
    bool is__type_Set() const;
    bool is__type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_next_offset;
    bool m_next_offset_isSet;
    bool m_next_offset_isValid;

    QList<OAIPivotSuggestions> m_pivot_suggestions;
    bool m_pivot_suggestions_isSet;
    bool m_pivot_suggestions_isValid;

    QList<OAIQuery> m_query_expansions;
    bool m_query_expansions_isSet;
    bool m_query_expansions_isValid;

    QString m_scenario;
    bool m_scenario_isSet;
    bool m_scenario_isValid;

    QList<OAIVideoObject> m_value;
    bool m_value_isSet;
    bool m_value_isValid;

    bool m_is_family_friendly;
    bool m_is_family_friendly_isSet;
    bool m_is_family_friendly_isValid;

    qint64 m_total_estimated_matches;
    bool m_total_estimated_matches_isSet;
    bool m_total_estimated_matches_isValid;

    QList<OAIQuery> m_follow_up_queries;
    bool m_follow_up_queries_isSet;
    bool m_follow_up_queries_isValid;

    QString m_web_search_url;
    bool m_web_search_url_isSet;
    bool m_web_search_url_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m__type;
    bool m__type_isSet;
    bool m__type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVideos)

#endif // OAIVideos_H
