/**
 * Video Search Client
 * The Video Search API lets you search on Bing for video that are relevant to the user's search query, for insights about a video or for videos that are trending based on search requests made by others. This section provides technical details about the query parameters and headers that you use to request videos and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Videos](https://docs.microsoft.com/azure/cognitive-services/bing-video-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoDetails::OAIVideoDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoDetails::OAIVideoDetails() {
    this->initializeModel();
}

OAIVideoDetails::~OAIVideoDetails() {}

void OAIVideoDetails::initializeModel() {

    m_related_videos_isSet = false;
    m_related_videos_isValid = false;

    m_video_result_isSet = false;
    m_video_result_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIVideoDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoDetails::fromJsonObject(QJsonObject json) {

    m_related_videos_isValid = ::OpenAPI::fromJsonValue(m_related_videos, json[QString("relatedVideos")]);
    m_related_videos_isSet = !json[QString("relatedVideos")].isNull() && m_related_videos_isValid;

    m_video_result_isValid = ::OpenAPI::fromJsonValue(m_video_result, json[QString("videoResult")]);
    m_video_result_isSet = !json[QString("videoResult")].isNull() && m_video_result_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIVideoDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_related_videos.isSet()) {
        obj.insert(QString("relatedVideos"), ::OpenAPI::toJsonValue(m_related_videos));
    }
    if (m_video_result.isSet()) {
        obj.insert(QString("videoResult"), ::OpenAPI::toJsonValue(m_video_result));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

OAIVideosModule OAIVideoDetails::getRelatedVideos() const {
    return m_related_videos;
}
void OAIVideoDetails::setRelatedVideos(const OAIVideosModule &related_videos) {
    m_related_videos = related_videos;
    m_related_videos_isSet = true;
}

bool OAIVideoDetails::is_related_videos_Set() const{
    return m_related_videos_isSet;
}

bool OAIVideoDetails::is_related_videos_Valid() const{
    return m_related_videos_isValid;
}

OAIVideoObject OAIVideoDetails::getVideoResult() const {
    return m_video_result;
}
void OAIVideoDetails::setVideoResult(const OAIVideoObject &video_result) {
    m_video_result = video_result;
    m_video_result_isSet = true;
}

bool OAIVideoDetails::is_video_result_Set() const{
    return m_video_result_isSet;
}

bool OAIVideoDetails::is_video_result_Valid() const{
    return m_video_result_isValid;
}

QString OAIVideoDetails::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIVideoDetails::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIVideoDetails::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIVideoDetails::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIVideoDetails::getId() const {
    return m_id;
}
void OAIVideoDetails::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVideoDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVideoDetails::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIVideoDetails::getType() const {
    return m__type;
}
void OAIVideoDetails::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIVideoDetails::is__type_Set() const{
    return m__type_isSet;
}

bool OAIVideoDetails::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIVideoDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_related_videos.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
