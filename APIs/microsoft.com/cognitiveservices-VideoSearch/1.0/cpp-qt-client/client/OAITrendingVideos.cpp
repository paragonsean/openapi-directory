/**
 * Video Search Client
 * The Video Search API lets you search on Bing for video that are relevant to the user's search query, for insights about a video or for videos that are trending based on search requests made by others. This section provides technical details about the query parameters and headers that you use to request videos and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Videos](https://docs.microsoft.com/azure/cognitive-services/bing-video-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrendingVideos.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrendingVideos::OAITrendingVideos(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrendingVideos::OAITrendingVideos() {
    this->initializeModel();
}

OAITrendingVideos::~OAITrendingVideos() {}

void OAITrendingVideos::initializeModel() {

    m_banner_tiles_isSet = false;
    m_banner_tiles_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAITrendingVideos::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrendingVideos::fromJsonObject(QJsonObject json) {

    m_banner_tiles_isValid = ::OpenAPI::fromJsonValue(m_banner_tiles, json[QString("bannerTiles")]);
    m_banner_tiles_isSet = !json[QString("bannerTiles")].isNull() && m_banner_tiles_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAITrendingVideos::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrendingVideos::asJsonObject() const {
    QJsonObject obj;
    if (m_banner_tiles.size() > 0) {
        obj.insert(QString("bannerTiles"), ::OpenAPI::toJsonValue(m_banner_tiles));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

QList<OAITrendingVideosTile> OAITrendingVideos::getBannerTiles() const {
    return m_banner_tiles;
}
void OAITrendingVideos::setBannerTiles(const QList<OAITrendingVideosTile> &banner_tiles) {
    m_banner_tiles = banner_tiles;
    m_banner_tiles_isSet = true;
}

bool OAITrendingVideos::is_banner_tiles_Set() const{
    return m_banner_tiles_isSet;
}

bool OAITrendingVideos::is_banner_tiles_Valid() const{
    return m_banner_tiles_isValid;
}

QList<OAITrendingVideosCategory> OAITrendingVideos::getCategories() const {
    return m_categories;
}
void OAITrendingVideos::setCategories(const QList<OAITrendingVideosCategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAITrendingVideos::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAITrendingVideos::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAITrendingVideos::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAITrendingVideos::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAITrendingVideos::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAITrendingVideos::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAITrendingVideos::getId() const {
    return m_id;
}
void OAITrendingVideos::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITrendingVideos::is_id_Set() const{
    return m_id_isSet;
}

bool OAITrendingVideos::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITrendingVideos::getType() const {
    return m__type;
}
void OAITrendingVideos::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAITrendingVideos::is__type_Set() const{
    return m__type_isSet;
}

bool OAITrendingVideos::is__type_Valid() const{
    return m__type_isValid;
}

bool OAITrendingVideos::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_banner_tiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrendingVideos::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_banner_tiles_isValid && m_categories_isValid && m__type_isValid && true;
}

} // namespace OpenAPI
