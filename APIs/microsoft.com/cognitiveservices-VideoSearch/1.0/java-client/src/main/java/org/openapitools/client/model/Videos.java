/*
 * Video Search Client
 * The Video Search API lets you search on Bing for video that are relevant to the user's search query, for insights about a video or for videos that are trending based on search requests made by others. This section provides technical details about the query parameters and headers that you use to request videos and the JSON response objects that contain them. For examples that show how to make requests, see [Searching the Web for Videos](https://docs.microsoft.com/azure/cognitive-services/bing-video-search/search-the-web).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PivotSuggestions;
import org.openapitools.client.model.Query;
import org.openapitools.client.model.SearchResultsAnswer;
import org.openapitools.client.model.VideoObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a video answer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:48.256609-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Videos extends SearchResultsAnswer {
  public static final String SERIALIZED_NAME_NEXT_OFFSET = "nextOffset";
  @SerializedName(SERIALIZED_NAME_NEXT_OFFSET)
  private Integer nextOffset;

  public static final String SERIALIZED_NAME_PIVOT_SUGGESTIONS = "pivotSuggestions";
  @SerializedName(SERIALIZED_NAME_PIVOT_SUGGESTIONS)
  private List<PivotSuggestions> pivotSuggestions = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUERY_EXPANSIONS = "queryExpansions";
  @SerializedName(SERIALIZED_NAME_QUERY_EXPANSIONS)
  private List<Query> queryExpansions = new ArrayList<>();

  /**
   * Gets or Sets scenario
   */
  @JsonAdapter(ScenarioEnum.Adapter.class)
  public enum ScenarioEnum {
    LIST("List"),
    
    SINGLE_DOMINANT_VIDEO("SingleDominantVideo");

    private String value;

    ScenarioEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScenarioEnum fromValue(String value) {
      for (ScenarioEnum b : ScenarioEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScenarioEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScenarioEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScenarioEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScenarioEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScenarioEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCENARIO = "scenario";
  @SerializedName(SERIALIZED_NAME_SCENARIO)
  private ScenarioEnum scenario;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private List<VideoObject> value = new ArrayList<>();

  public Videos() {
    this.type = this.getClass().getSimpleName();
  }

  public Videos(
     Integer nextOffset, 
     List<PivotSuggestions> pivotSuggestions, 
     List<Query> queryExpansions, 
     ScenarioEnum scenario, 
     Boolean isFamilyFriendly, 
     Long totalEstimatedMatches, 
     List<Query> followUpQueries, 
     String webSearchUrl, 
     String id
  ) {
    this();
    this.nextOffset = nextOffset;
    this.pivotSuggestions = pivotSuggestions;
    this.queryExpansions = queryExpansions;
    this.scenario = scenario;
    this.isFamilyFriendly = isFamilyFriendly;
    this.totalEstimatedMatches = totalEstimatedMatches;
    this.followUpQueries = followUpQueries;
    this.webSearchUrl = webSearchUrl;
    this.id = id;
  }

  /**
   * Get nextOffset
   * @return nextOffset
   */
  @javax.annotation.Nullable
  public Integer getNextOffset() {
    return nextOffset;
  }



  /**
   * Get pivotSuggestions
   * @return pivotSuggestions
   */
  @javax.annotation.Nullable
  public List<PivotSuggestions> getPivotSuggestions() {
    return pivotSuggestions;
  }



  /**
   * Get queryExpansions
   * @return queryExpansions
   */
  @javax.annotation.Nullable
  public List<Query> getQueryExpansions() {
    return queryExpansions;
  }



  /**
   * Get scenario
   * @return scenario
   */
  @javax.annotation.Nullable
  public ScenarioEnum getScenario() {
    return scenario;
  }



  public Videos value(List<VideoObject> value) {
    this.value = value;
    return this;
  }

  public Videos addValueItem(VideoObject valueItem) {
    if (this.value == null) {
      this.value = new ArrayList<>();
    }
    this.value.add(valueItem);
    return this;
  }

  /**
   * A list of video objects that are relevant to the query.
   * @return value
   */
  @javax.annotation.Nonnull
  public List<VideoObject> getValue() {
    return value;
  }

  public void setValue(List<VideoObject> value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Videos videos = (Videos) o;
    return Objects.equals(this.nextOffset, videos.nextOffset) &&
        Objects.equals(this.pivotSuggestions, videos.pivotSuggestions) &&
        Objects.equals(this.queryExpansions, videos.queryExpansions) &&
        Objects.equals(this.scenario, videos.scenario) &&
        Objects.equals(this.value, videos.value) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nextOffset, pivotSuggestions, queryExpansions, scenario, value, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Videos {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    nextOffset: ").append(toIndentedString(nextOffset)).append("\n");
    sb.append("    pivotSuggestions: ").append(toIndentedString(pivotSuggestions)).append("\n");
    sb.append("    queryExpansions: ").append(toIndentedString(queryExpansions)).append("\n");
    sb.append("    scenario: ").append(toIndentedString(scenario)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isFamilyFriendly");
    openapiFields.add("totalEstimatedMatches");
    openapiFields.add("followUpQueries");
    openapiFields.add("webSearchUrl");
    openapiFields.add("id");
    openapiFields.add("_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("value");
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Videos
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Videos.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Videos is not found in the empty JSON string", Videos.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Videos.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Videos` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Videos.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Videos.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Videos' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Videos> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Videos.class));

       return (TypeAdapter<T>) new TypeAdapter<Videos>() {
           @Override
           public void write(JsonWriter out, Videos value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Videos read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Videos given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Videos
   * @throws IOException if the JSON string is invalid with respect to Videos
   */
  public static Videos fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Videos.class);
  }

  /**
   * Convert an instance of Videos to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

