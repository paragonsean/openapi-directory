# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contractual_rules_contractual_rule import ContractualRulesContractualRule
from openapi_server.models.entities_entity_presentation_info import EntitiesEntityPresentationInfo
from openapi_server.models.image_object import ImageObject
from openapi_server.models.structured_value import StructuredValue
from openapi_server import util


class PostalAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_country: str=None, address_locality: str=None, address_region: str=None, address_region_abbreviation: str=None, address_subregion: str=None, country_iso: str=None, neighborhood: str=None, post_office_box_number: str=None, postal_code: str=None, street_address: str=None, text: str=None, bing_id: str=None, description: str=None, entity_presentation_info: EntitiesEntityPresentationInfo=None, image: ImageObject=None, name: str=None, url: str=None, contractual_rules: List[ContractualRulesContractualRule]=None, web_search_url: str=None, id: str=None, type: str=None):
        """PostalAddress - a model defined in OpenAPI

        :param address_country: The address_country of this PostalAddress.
        :param address_locality: The address_locality of this PostalAddress.
        :param address_region: The address_region of this PostalAddress.
        :param address_region_abbreviation: The address_region_abbreviation of this PostalAddress.
        :param address_subregion: The address_subregion of this PostalAddress.
        :param country_iso: The country_iso of this PostalAddress.
        :param neighborhood: The neighborhood of this PostalAddress.
        :param post_office_box_number: The post_office_box_number of this PostalAddress.
        :param postal_code: The postal_code of this PostalAddress.
        :param street_address: The street_address of this PostalAddress.
        :param text: The text of this PostalAddress.
        :param bing_id: The bing_id of this PostalAddress.
        :param description: The description of this PostalAddress.
        :param entity_presentation_info: The entity_presentation_info of this PostalAddress.
        :param image: The image of this PostalAddress.
        :param name: The name of this PostalAddress.
        :param url: The url of this PostalAddress.
        :param contractual_rules: The contractual_rules of this PostalAddress.
        :param web_search_url: The web_search_url of this PostalAddress.
        :param id: The id of this PostalAddress.
        :param type: The type of this PostalAddress.
        """
        self.openapi_types = {
            'address_country': str,
            'address_locality': str,
            'address_region': str,
            'address_region_abbreviation': str,
            'address_subregion': str,
            'country_iso': str,
            'neighborhood': str,
            'post_office_box_number': str,
            'postal_code': str,
            'street_address': str,
            'text': str,
            'bing_id': str,
            'description': str,
            'entity_presentation_info': EntitiesEntityPresentationInfo,
            'image': ImageObject,
            'name': str,
            'url': str,
            'contractual_rules': List[ContractualRulesContractualRule],
            'web_search_url': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'address_country': 'addressCountry',
            'address_locality': 'addressLocality',
            'address_region': 'addressRegion',
            'address_region_abbreviation': 'addressRegionAbbreviation',
            'address_subregion': 'addressSubregion',
            'country_iso': 'countryIso',
            'neighborhood': 'neighborhood',
            'post_office_box_number': 'postOfficeBoxNumber',
            'postal_code': 'postalCode',
            'street_address': 'streetAddress',
            'text': 'text',
            'bing_id': 'bingId',
            'description': 'description',
            'entity_presentation_info': 'entityPresentationInfo',
            'image': 'image',
            'name': 'name',
            'url': 'url',
            'contractual_rules': 'contractualRules',
            'web_search_url': 'webSearchUrl',
            'id': 'id',
            'type': '_type'
        }

        self._address_country = address_country
        self._address_locality = address_locality
        self._address_region = address_region
        self._address_region_abbreviation = address_region_abbreviation
        self._address_subregion = address_subregion
        self._country_iso = country_iso
        self._neighborhood = neighborhood
        self._post_office_box_number = post_office_box_number
        self._postal_code = postal_code
        self._street_address = street_address
        self._text = text
        self._bing_id = bing_id
        self._description = description
        self._entity_presentation_info = entity_presentation_info
        self._image = image
        self._name = name
        self._url = url
        self._contractual_rules = contractual_rules
        self._web_search_url = web_search_url
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostalAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostalAddress of this PostalAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_country(self):
        """Gets the address_country of this PostalAddress.

        The country/region where the street address is located. This could be the two-letter ISO code. For example, US, or the full name, United States.

        :return: The address_country of this PostalAddress.
        :rtype: str
        """
        return self._address_country

    @address_country.setter
    def address_country(self, address_country):
        """Sets the address_country of this PostalAddress.

        The country/region where the street address is located. This could be the two-letter ISO code. For example, US, or the full name, United States.

        :param address_country: The address_country of this PostalAddress.
        :type address_country: str
        """

        self._address_country = address_country

    @property
    def address_locality(self):
        """Gets the address_locality of this PostalAddress.

        The city where the street address is located. For example, Seattle.

        :return: The address_locality of this PostalAddress.
        :rtype: str
        """
        return self._address_locality

    @address_locality.setter
    def address_locality(self, address_locality):
        """Sets the address_locality of this PostalAddress.

        The city where the street address is located. For example, Seattle.

        :param address_locality: The address_locality of this PostalAddress.
        :type address_locality: str
        """

        self._address_locality = address_locality

    @property
    def address_region(self):
        """Gets the address_region of this PostalAddress.

        The state or province code where the street address is located. This could be the two-letter code. For example, WA, or the full name , Washington.

        :return: The address_region of this PostalAddress.
        :rtype: str
        """
        return self._address_region

    @address_region.setter
    def address_region(self, address_region):
        """Sets the address_region of this PostalAddress.

        The state or province code where the street address is located. This could be the two-letter code. For example, WA, or the full name , Washington.

        :param address_region: The address_region of this PostalAddress.
        :type address_region: str
        """

        self._address_region = address_region

    @property
    def address_region_abbreviation(self):
        """Gets the address_region_abbreviation of this PostalAddress.

        Region Abbreviation. For example, WA.

        :return: The address_region_abbreviation of this PostalAddress.
        :rtype: str
        """
        return self._address_region_abbreviation

    @address_region_abbreviation.setter
    def address_region_abbreviation(self, address_region_abbreviation):
        """Sets the address_region_abbreviation of this PostalAddress.

        Region Abbreviation. For example, WA.

        :param address_region_abbreviation: The address_region_abbreviation of this PostalAddress.
        :type address_region_abbreviation: str
        """

        self._address_region_abbreviation = address_region_abbreviation

    @property
    def address_subregion(self):
        """Gets the address_subregion of this PostalAddress.


        :return: The address_subregion of this PostalAddress.
        :rtype: str
        """
        return self._address_subregion

    @address_subregion.setter
    def address_subregion(self, address_subregion):
        """Sets the address_subregion of this PostalAddress.


        :param address_subregion: The address_subregion of this PostalAddress.
        :type address_subregion: str
        """

        self._address_subregion = address_subregion

    @property
    def country_iso(self):
        """Gets the country_iso of this PostalAddress.

        The two letter ISO code of this country. For example, US.

        :return: The country_iso of this PostalAddress.
        :rtype: str
        """
        return self._country_iso

    @country_iso.setter
    def country_iso(self, country_iso):
        """Sets the country_iso of this PostalAddress.

        The two letter ISO code of this country. For example, US.

        :param country_iso: The country_iso of this PostalAddress.
        :type country_iso: str
        """

        self._country_iso = country_iso

    @property
    def neighborhood(self):
        """Gets the neighborhood of this PostalAddress.

        The neighborhood where the street address is located. For example, Westlake.

        :return: The neighborhood of this PostalAddress.
        :rtype: str
        """
        return self._neighborhood

    @neighborhood.setter
    def neighborhood(self, neighborhood):
        """Sets the neighborhood of this PostalAddress.

        The neighborhood where the street address is located. For example, Westlake.

        :param neighborhood: The neighborhood of this PostalAddress.
        :type neighborhood: str
        """

        self._neighborhood = neighborhood

    @property
    def post_office_box_number(self):
        """Gets the post_office_box_number of this PostalAddress.


        :return: The post_office_box_number of this PostalAddress.
        :rtype: str
        """
        return self._post_office_box_number

    @post_office_box_number.setter
    def post_office_box_number(self, post_office_box_number):
        """Sets the post_office_box_number of this PostalAddress.


        :param post_office_box_number: The post_office_box_number of this PostalAddress.
        :type post_office_box_number: str
        """

        self._post_office_box_number = post_office_box_number

    @property
    def postal_code(self):
        """Gets the postal_code of this PostalAddress.

        The zip code or postal code where the street address is located. For example, 98052.

        :return: The postal_code of this PostalAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this PostalAddress.

        The zip code or postal code where the street address is located. For example, 98052.

        :param postal_code: The postal_code of this PostalAddress.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def street_address(self):
        """Gets the street_address of this PostalAddress.


        :return: The street_address of this PostalAddress.
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this PostalAddress.


        :param street_address: The street_address of this PostalAddress.
        :type street_address: str
        """

        self._street_address = street_address

    @property
    def text(self):
        """Gets the text of this PostalAddress.

        The complete address. For example, 2100 Westlake Ave N, Bellevue, WA 98052.

        :return: The text of this PostalAddress.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this PostalAddress.

        The complete address. For example, 2100 Westlake Ave N, Bellevue, WA 98052.

        :param text: The text of this PostalAddress.
        :type text: str
        """

        self._text = text

    @property
    def bing_id(self):
        """Gets the bing_id of this PostalAddress.

        An ID that uniquely identifies this item.

        :return: The bing_id of this PostalAddress.
        :rtype: str
        """
        return self._bing_id

    @bing_id.setter
    def bing_id(self, bing_id):
        """Sets the bing_id of this PostalAddress.

        An ID that uniquely identifies this item.

        :param bing_id: The bing_id of this PostalAddress.
        :type bing_id: str
        """

        self._bing_id = bing_id

    @property
    def description(self):
        """Gets the description of this PostalAddress.

        A short description of the item.

        :return: The description of this PostalAddress.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostalAddress.

        A short description of the item.

        :param description: The description of this PostalAddress.
        :type description: str
        """

        self._description = description

    @property
    def entity_presentation_info(self):
        """Gets the entity_presentation_info of this PostalAddress.


        :return: The entity_presentation_info of this PostalAddress.
        :rtype: EntitiesEntityPresentationInfo
        """
        return self._entity_presentation_info

    @entity_presentation_info.setter
    def entity_presentation_info(self, entity_presentation_info):
        """Sets the entity_presentation_info of this PostalAddress.


        :param entity_presentation_info: The entity_presentation_info of this PostalAddress.
        :type entity_presentation_info: EntitiesEntityPresentationInfo
        """

        self._entity_presentation_info = entity_presentation_info

    @property
    def image(self):
        """Gets the image of this PostalAddress.


        :return: The image of this PostalAddress.
        :rtype: ImageObject
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this PostalAddress.


        :param image: The image of this PostalAddress.
        :type image: ImageObject
        """

        self._image = image

    @property
    def name(self):
        """Gets the name of this PostalAddress.

        The name of the thing represented by this object.

        :return: The name of this PostalAddress.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostalAddress.

        The name of the thing represented by this object.

        :param name: The name of this PostalAddress.
        :type name: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this PostalAddress.

        The URL to get more information about the thing represented by this object.

        :return: The url of this PostalAddress.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PostalAddress.

        The URL to get more information about the thing represented by this object.

        :param url: The url of this PostalAddress.
        :type url: str
        """

        self._url = url

    @property
    def contractual_rules(self):
        """Gets the contractual_rules of this PostalAddress.

        A list of rules that you must adhere to if you display the item.

        :return: The contractual_rules of this PostalAddress.
        :rtype: List[ContractualRulesContractualRule]
        """
        return self._contractual_rules

    @contractual_rules.setter
    def contractual_rules(self, contractual_rules):
        """Sets the contractual_rules of this PostalAddress.

        A list of rules that you must adhere to if you display the item.

        :param contractual_rules: The contractual_rules of this PostalAddress.
        :type contractual_rules: List[ContractualRulesContractualRule]
        """

        self._contractual_rules = contractual_rules

    @property
    def web_search_url(self):
        """Gets the web_search_url of this PostalAddress.

        The URL To Bing's search result for this item.

        :return: The web_search_url of this PostalAddress.
        :rtype: str
        """
        return self._web_search_url

    @web_search_url.setter
    def web_search_url(self, web_search_url):
        """Sets the web_search_url of this PostalAddress.

        The URL To Bing's search result for this item.

        :param web_search_url: The web_search_url of this PostalAddress.
        :type web_search_url: str
        """

        self._web_search_url = web_search_url

    @property
    def id(self):
        """Gets the id of this PostalAddress.

        A String identifier.

        :return: The id of this PostalAddress.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PostalAddress.

        A String identifier.

        :param id: The id of this PostalAddress.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this PostalAddress.


        :return: The type of this PostalAddress.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PostalAddress.


        :param type: The type of this PostalAddress.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
