# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EntitiesEntityPresentationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_scenario: str='DominantEntity', entity_type_display_hint: str=None, entity_type_hints: List[str]=None):
        """EntitiesEntityPresentationInfo - a model defined in OpenAPI

        :param entity_scenario: The entity_scenario of this EntitiesEntityPresentationInfo.
        :param entity_type_display_hint: The entity_type_display_hint of this EntitiesEntityPresentationInfo.
        :param entity_type_hints: The entity_type_hints of this EntitiesEntityPresentationInfo.
        """
        self.openapi_types = {
            'entity_scenario': str,
            'entity_type_display_hint': str,
            'entity_type_hints': List[str]
        }

        self.attribute_map = {
            'entity_scenario': 'entityScenario',
            'entity_type_display_hint': 'entityTypeDisplayHint',
            'entity_type_hints': 'entityTypeHints'
        }

        self._entity_scenario = entity_scenario
        self._entity_type_display_hint = entity_type_display_hint
        self._entity_type_hints = entity_type_hints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntitiesEntityPresentationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntitiesEntityPresentationInfo of this EntitiesEntityPresentationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_scenario(self):
        """Gets the entity_scenario of this EntitiesEntityPresentationInfo.

        The supported scenario.

        :return: The entity_scenario of this EntitiesEntityPresentationInfo.
        :rtype: str
        """
        return self._entity_scenario

    @entity_scenario.setter
    def entity_scenario(self, entity_scenario):
        """Sets the entity_scenario of this EntitiesEntityPresentationInfo.

        The supported scenario.

        :param entity_scenario: The entity_scenario of this EntitiesEntityPresentationInfo.
        :type entity_scenario: str
        """
        allowed_values = ["DominantEntity", "DisambiguationItem", "ListItem"]  # noqa: E501
        if entity_scenario not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_scenario` ({0}), must be one of {1}"
                .format(entity_scenario, allowed_values)
            )

        self._entity_scenario = entity_scenario

    @property
    def entity_type_display_hint(self):
        """Gets the entity_type_display_hint of this EntitiesEntityPresentationInfo.

        A display version of the entity hint. For example, if entityTypeHints is Artist, this field may be set to American Singer.

        :return: The entity_type_display_hint of this EntitiesEntityPresentationInfo.
        :rtype: str
        """
        return self._entity_type_display_hint

    @entity_type_display_hint.setter
    def entity_type_display_hint(self, entity_type_display_hint):
        """Sets the entity_type_display_hint of this EntitiesEntityPresentationInfo.

        A display version of the entity hint. For example, if entityTypeHints is Artist, this field may be set to American Singer.

        :param entity_type_display_hint: The entity_type_display_hint of this EntitiesEntityPresentationInfo.
        :type entity_type_display_hint: str
        """

        self._entity_type_display_hint = entity_type_display_hint

    @property
    def entity_type_hints(self):
        """Gets the entity_type_hints of this EntitiesEntityPresentationInfo.

        A list of hints that indicate the entity's type. The list could contain a single hint such as Movie or a list of hints such as Place, LocalBusiness, Restaurant. Each successive hint in the array narrows the entity's type.

        :return: The entity_type_hints of this EntitiesEntityPresentationInfo.
        :rtype: List[str]
        """
        return self._entity_type_hints

    @entity_type_hints.setter
    def entity_type_hints(self, entity_type_hints):
        """Sets the entity_type_hints of this EntitiesEntityPresentationInfo.

        A list of hints that indicate the entity's type. The list could contain a single hint such as Movie or a list of hints such as Place, LocalBusiness, Restaurant. Each successive hint in the array narrows the entity's type.

        :param entity_type_hints: The entity_type_hints of this EntitiesEntityPresentationInfo.
        :type entity_type_hints: List[str]
        """
        allowed_values = ["Generic", "Person", "Place", "Media", "Organization", "LocalBusiness", "Restaurant", "Hotel", "TouristAttraction", "Travel", "City", "Country", "Attraction", "House", "State", "RadioStation", "StreetAddress", "Neighborhood", "Locality", "PostalCode", "Region", "SubRegion", "MinorRegion", "Continent", "PointOfInterest", "Other", "Movie", "Book", "TelevisionShow", "TelevisionSeason", "VideoGame", "MusicAlbum", "MusicRecording", "MusicGroup", "Composition", "TheaterPlay", "Event", "Actor", "Artist", "Attorney", "Speciality", "CollegeOrUniversity", "School", "Food", "Drug", "Animal", "SportsTeam", "Product", "Car"]  # noqa: E501
        if not set(entity_type_hints).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `entity_type_hints` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(entity_type_hints) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._entity_type_hints = entity_type_hints
