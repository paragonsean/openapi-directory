# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contractual_rules_attribution import ContractualRulesAttribution
from openapi_server.models.license import License
from openapi_server import util


class ContractualRulesLicenseAttribution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, license: License=None, license_notice: str=None, must_be_close_to_content: bool=None, type: str=None, target_property_name: str=None):
        """ContractualRulesLicenseAttribution - a model defined in OpenAPI

        :param license: The license of this ContractualRulesLicenseAttribution.
        :param license_notice: The license_notice of this ContractualRulesLicenseAttribution.
        :param must_be_close_to_content: The must_be_close_to_content of this ContractualRulesLicenseAttribution.
        :param type: The type of this ContractualRulesLicenseAttribution.
        :param target_property_name: The target_property_name of this ContractualRulesLicenseAttribution.
        """
        self.openapi_types = {
            'license': License,
            'license_notice': str,
            'must_be_close_to_content': bool,
            'type': str,
            'target_property_name': str
        }

        self.attribute_map = {
            'license': 'license',
            'license_notice': 'licenseNotice',
            'must_be_close_to_content': 'mustBeCloseToContent',
            'type': '_type',
            'target_property_name': 'targetPropertyName'
        }

        self._license = license
        self._license_notice = license_notice
        self._must_be_close_to_content = must_be_close_to_content
        self._type = type
        self._target_property_name = target_property_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContractualRulesLicenseAttribution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContractualRulesLicenseAttribution of this ContractualRulesLicenseAttribution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license(self):
        """Gets the license of this ContractualRulesLicenseAttribution.


        :return: The license of this ContractualRulesLicenseAttribution.
        :rtype: License
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this ContractualRulesLicenseAttribution.


        :param license: The license of this ContractualRulesLicenseAttribution.
        :type license: License
        """

        self._license = license

    @property
    def license_notice(self):
        """Gets the license_notice of this ContractualRulesLicenseAttribution.

        The license to display next to the targeted field.

        :return: The license_notice of this ContractualRulesLicenseAttribution.
        :rtype: str
        """
        return self._license_notice

    @license_notice.setter
    def license_notice(self, license_notice):
        """Sets the license_notice of this ContractualRulesLicenseAttribution.

        The license to display next to the targeted field.

        :param license_notice: The license_notice of this ContractualRulesLicenseAttribution.
        :type license_notice: str
        """

        self._license_notice = license_notice

    @property
    def must_be_close_to_content(self):
        """Gets the must_be_close_to_content of this ContractualRulesLicenseAttribution.

        A Boolean value that determines whether the contents of the rule must be placed in close proximity to the field that the rule applies to. If true, the contents must be placed in close proximity. If false, or this field does not exist, the contents may be placed at the caller's discretion.

        :return: The must_be_close_to_content of this ContractualRulesLicenseAttribution.
        :rtype: bool
        """
        return self._must_be_close_to_content

    @must_be_close_to_content.setter
    def must_be_close_to_content(self, must_be_close_to_content):
        """Sets the must_be_close_to_content of this ContractualRulesLicenseAttribution.

        A Boolean value that determines whether the contents of the rule must be placed in close proximity to the field that the rule applies to. If true, the contents must be placed in close proximity. If false, or this field does not exist, the contents may be placed at the caller's discretion.

        :param must_be_close_to_content: The must_be_close_to_content of this ContractualRulesLicenseAttribution.
        :type must_be_close_to_content: bool
        """

        self._must_be_close_to_content = must_be_close_to_content

    @property
    def type(self):
        """Gets the type of this ContractualRulesLicenseAttribution.


        :return: The type of this ContractualRulesLicenseAttribution.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContractualRulesLicenseAttribution.


        :param type: The type of this ContractualRulesLicenseAttribution.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def target_property_name(self):
        """Gets the target_property_name of this ContractualRulesLicenseAttribution.

        The name of the field that the rule applies to.

        :return: The target_property_name of this ContractualRulesLicenseAttribution.
        :rtype: str
        """
        return self._target_property_name

    @target_property_name.setter
    def target_property_name(self, target_property_name):
        """Sets the target_property_name of this ContractualRulesLicenseAttribution.

        The name of the field that the rule applies to.

        :param target_property_name: The target_property_name of this ContractualRulesLicenseAttribution.
        :type target_property_name: str
        """

        self._target_property_name = target_property_name
