# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contractual_rules_attribution import ContractualRulesAttribution
from openapi_server import util


class ContractualRulesLinkAttribution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, optional_for_list_display: bool=None, text: str=None, url: str=None, must_be_close_to_content: bool=None, type: str=None, target_property_name: str=None):
        """ContractualRulesLinkAttribution - a model defined in OpenAPI

        :param optional_for_list_display: The optional_for_list_display of this ContractualRulesLinkAttribution.
        :param text: The text of this ContractualRulesLinkAttribution.
        :param url: The url of this ContractualRulesLinkAttribution.
        :param must_be_close_to_content: The must_be_close_to_content of this ContractualRulesLinkAttribution.
        :param type: The type of this ContractualRulesLinkAttribution.
        :param target_property_name: The target_property_name of this ContractualRulesLinkAttribution.
        """
        self.openapi_types = {
            'optional_for_list_display': bool,
            'text': str,
            'url': str,
            'must_be_close_to_content': bool,
            'type': str,
            'target_property_name': str
        }

        self.attribute_map = {
            'optional_for_list_display': 'optionalForListDisplay',
            'text': 'text',
            'url': 'url',
            'must_be_close_to_content': 'mustBeCloseToContent',
            'type': '_type',
            'target_property_name': 'targetPropertyName'
        }

        self._optional_for_list_display = optional_for_list_display
        self._text = text
        self._url = url
        self._must_be_close_to_content = must_be_close_to_content
        self._type = type
        self._target_property_name = target_property_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContractualRulesLinkAttribution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContractualRulesLinkAttribution of this ContractualRulesLinkAttribution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def optional_for_list_display(self):
        """Gets the optional_for_list_display of this ContractualRulesLinkAttribution.

        Indicates whether this provider's attribution is optional.

        :return: The optional_for_list_display of this ContractualRulesLinkAttribution.
        :rtype: bool
        """
        return self._optional_for_list_display

    @optional_for_list_display.setter
    def optional_for_list_display(self, optional_for_list_display):
        """Sets the optional_for_list_display of this ContractualRulesLinkAttribution.

        Indicates whether this provider's attribution is optional.

        :param optional_for_list_display: The optional_for_list_display of this ContractualRulesLinkAttribution.
        :type optional_for_list_display: bool
        """

        self._optional_for_list_display = optional_for_list_display

    @property
    def text(self):
        """Gets the text of this ContractualRulesLinkAttribution.

        The attribution text.

        :return: The text of this ContractualRulesLinkAttribution.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ContractualRulesLinkAttribution.

        The attribution text.

        :param text: The text of this ContractualRulesLinkAttribution.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def url(self):
        """Gets the url of this ContractualRulesLinkAttribution.

        The URL to the provider's website. Use text and URL to create the hyperlink.

        :return: The url of this ContractualRulesLinkAttribution.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ContractualRulesLinkAttribution.

        The URL to the provider's website. Use text and URL to create the hyperlink.

        :param url: The url of this ContractualRulesLinkAttribution.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def must_be_close_to_content(self):
        """Gets the must_be_close_to_content of this ContractualRulesLinkAttribution.

        A Boolean value that determines whether the contents of the rule must be placed in close proximity to the field that the rule applies to. If true, the contents must be placed in close proximity. If false, or this field does not exist, the contents may be placed at the caller's discretion.

        :return: The must_be_close_to_content of this ContractualRulesLinkAttribution.
        :rtype: bool
        """
        return self._must_be_close_to_content

    @must_be_close_to_content.setter
    def must_be_close_to_content(self, must_be_close_to_content):
        """Sets the must_be_close_to_content of this ContractualRulesLinkAttribution.

        A Boolean value that determines whether the contents of the rule must be placed in close proximity to the field that the rule applies to. If true, the contents must be placed in close proximity. If false, or this field does not exist, the contents may be placed at the caller's discretion.

        :param must_be_close_to_content: The must_be_close_to_content of this ContractualRulesLinkAttribution.
        :type must_be_close_to_content: bool
        """

        self._must_be_close_to_content = must_be_close_to_content

    @property
    def type(self):
        """Gets the type of this ContractualRulesLinkAttribution.


        :return: The type of this ContractualRulesLinkAttribution.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContractualRulesLinkAttribution.


        :param type: The type of this ContractualRulesLinkAttribution.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def target_property_name(self):
        """Gets the target_property_name of this ContractualRulesLinkAttribution.

        The name of the field that the rule applies to.

        :return: The target_property_name of this ContractualRulesLinkAttribution.
        :rtype: str
        """
        return self._target_property_name

    @target_property_name.setter
    def target_property_name(self, target_property_name):
        """Sets the target_property_name of this ContractualRulesLinkAttribution.

        The name of the field that the rule applies to.

        :param target_property_name: The target_property_name of this ContractualRulesLinkAttribution.
        :type target_property_name: str
        """

        self._target_property_name = target_property_name
