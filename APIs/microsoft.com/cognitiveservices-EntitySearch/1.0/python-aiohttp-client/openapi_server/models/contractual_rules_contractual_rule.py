# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContractualRulesContractualRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, target_property_name: str=None):
        """ContractualRulesContractualRule - a model defined in OpenAPI

        :param type: The type of this ContractualRulesContractualRule.
        :param target_property_name: The target_property_name of this ContractualRulesContractualRule.
        """
        self.openapi_types = {
            'type': str,
            'target_property_name': str
        }

        self.attribute_map = {
            'type': '_type',
            'target_property_name': 'targetPropertyName'
        }

        self._type = type
        self._target_property_name = target_property_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContractualRulesContractualRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContractualRulesContractualRule of this ContractualRulesContractualRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ContractualRulesContractualRule.


        :return: The type of this ContractualRulesContractualRule.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContractualRulesContractualRule.


        :param type: The type of this ContractualRulesContractualRule.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def target_property_name(self):
        """Gets the target_property_name of this ContractualRulesContractualRule.

        The name of the field that the rule applies to.

        :return: The target_property_name of this ContractualRulesContractualRule.
        :rtype: str
        """
        return self._target_property_name

    @target_property_name.setter
    def target_property_name(self, target_property_name):
        """Sets the target_property_name of this ContractualRulesContractualRule.

        The name of the field that the rule applies to.

        :param target_property_name: The target_property_name of this ContractualRulesContractualRule.
        :type target_property_name: str
        """

        self._target_property_name = target_property_name
