# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contractual_rules_attribution import ContractualRulesAttribution
from openapi_server import util


class ContractualRulesMediaAttribution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, url: str=None, must_be_close_to_content: bool=None, type: str=None, target_property_name: str=None):
        """ContractualRulesMediaAttribution - a model defined in OpenAPI

        :param url: The url of this ContractualRulesMediaAttribution.
        :param must_be_close_to_content: The must_be_close_to_content of this ContractualRulesMediaAttribution.
        :param type: The type of this ContractualRulesMediaAttribution.
        :param target_property_name: The target_property_name of this ContractualRulesMediaAttribution.
        """
        self.openapi_types = {
            'url': str,
            'must_be_close_to_content': bool,
            'type': str,
            'target_property_name': str
        }

        self.attribute_map = {
            'url': 'url',
            'must_be_close_to_content': 'mustBeCloseToContent',
            'type': '_type',
            'target_property_name': 'targetPropertyName'
        }

        self._url = url
        self._must_be_close_to_content = must_be_close_to_content
        self._type = type
        self._target_property_name = target_property_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContractualRulesMediaAttribution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContractualRulesMediaAttribution of this ContractualRulesMediaAttribution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def url(self):
        """Gets the url of this ContractualRulesMediaAttribution.

        The URL that you use to create of hyperlink of the media content. For example, if the target is an image, you would use the URL to make the image clickable.

        :return: The url of this ContractualRulesMediaAttribution.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ContractualRulesMediaAttribution.

        The URL that you use to create of hyperlink of the media content. For example, if the target is an image, you would use the URL to make the image clickable.

        :param url: The url of this ContractualRulesMediaAttribution.
        :type url: str
        """

        self._url = url

    @property
    def must_be_close_to_content(self):
        """Gets the must_be_close_to_content of this ContractualRulesMediaAttribution.

        A Boolean value that determines whether the contents of the rule must be placed in close proximity to the field that the rule applies to. If true, the contents must be placed in close proximity. If false, or this field does not exist, the contents may be placed at the caller's discretion.

        :return: The must_be_close_to_content of this ContractualRulesMediaAttribution.
        :rtype: bool
        """
        return self._must_be_close_to_content

    @must_be_close_to_content.setter
    def must_be_close_to_content(self, must_be_close_to_content):
        """Sets the must_be_close_to_content of this ContractualRulesMediaAttribution.

        A Boolean value that determines whether the contents of the rule must be placed in close proximity to the field that the rule applies to. If true, the contents must be placed in close proximity. If false, or this field does not exist, the contents may be placed at the caller's discretion.

        :param must_be_close_to_content: The must_be_close_to_content of this ContractualRulesMediaAttribution.
        :type must_be_close_to_content: bool
        """

        self._must_be_close_to_content = must_be_close_to_content

    @property
    def type(self):
        """Gets the type of this ContractualRulesMediaAttribution.


        :return: The type of this ContractualRulesMediaAttribution.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContractualRulesMediaAttribution.


        :param type: The type of this ContractualRulesMediaAttribution.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def target_property_name(self):
        """Gets the target_property_name of this ContractualRulesMediaAttribution.

        The name of the field that the rule applies to.

        :return: The target_property_name of this ContractualRulesMediaAttribution.
        :rtype: str
        """
        return self._target_property_name

    @target_property_name.setter
    def target_property_name(self, target_property_name):
        """Sets the target_property_name of this ContractualRulesMediaAttribution.

        The name of the field that the rule applies to.

        :param target_property_name: The target_property_name of this ContractualRulesMediaAttribution.
        :type target_property_name: str
        """

        self._target_property_name = target_property_name
