# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contractual_rules_contractual_rule import ContractualRulesContractualRule
from openapi_server.models.query_context import QueryContext
from openapi_server.models.search_results_answer import SearchResultsAnswer
from openapi_server.models.thing import Thing
from openapi_server import util


class Places(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, value: List[Thing]=None, query_context: QueryContext=None, contractual_rules: List[ContractualRulesContractualRule]=None, web_search_url: str=None, id: str=None, type: str=None):
        """Places - a model defined in OpenAPI

        :param value: The value of this Places.
        :param query_context: The query_context of this Places.
        :param contractual_rules: The contractual_rules of this Places.
        :param web_search_url: The web_search_url of this Places.
        :param id: The id of this Places.
        :param type: The type of this Places.
        """
        self.openapi_types = {
            'value': List[Thing],
            'query_context': QueryContext,
            'contractual_rules': List[ContractualRulesContractualRule],
            'web_search_url': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'value': 'value',
            'query_context': 'queryContext',
            'contractual_rules': 'contractualRules',
            'web_search_url': 'webSearchUrl',
            'id': 'id',
            'type': '_type'
        }

        self._value = value
        self._query_context = query_context
        self._contractual_rules = contractual_rules
        self._web_search_url = web_search_url
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Places':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Places of this Places.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self):
        """Gets the value of this Places.

        A list of local entities, such as restaurants or hotels.

        :return: The value of this Places.
        :rtype: List[Thing]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Places.

        A list of local entities, such as restaurants or hotels.

        :param value: The value of this Places.
        :type value: List[Thing]
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def query_context(self):
        """Gets the query_context of this Places.


        :return: The query_context of this Places.
        :rtype: QueryContext
        """
        return self._query_context

    @query_context.setter
    def query_context(self, query_context):
        """Sets the query_context of this Places.


        :param query_context: The query_context of this Places.
        :type query_context: QueryContext
        """

        self._query_context = query_context

    @property
    def contractual_rules(self):
        """Gets the contractual_rules of this Places.

        A list of rules that you must adhere to if you display the item.

        :return: The contractual_rules of this Places.
        :rtype: List[ContractualRulesContractualRule]
        """
        return self._contractual_rules

    @contractual_rules.setter
    def contractual_rules(self, contractual_rules):
        """Sets the contractual_rules of this Places.

        A list of rules that you must adhere to if you display the item.

        :param contractual_rules: The contractual_rules of this Places.
        :type contractual_rules: List[ContractualRulesContractualRule]
        """

        self._contractual_rules = contractual_rules

    @property
    def web_search_url(self):
        """Gets the web_search_url of this Places.

        The URL To Bing's search result for this item.

        :return: The web_search_url of this Places.
        :rtype: str
        """
        return self._web_search_url

    @web_search_url.setter
    def web_search_url(self, web_search_url):
        """Sets the web_search_url of this Places.

        The URL To Bing's search result for this item.

        :param web_search_url: The web_search_url of this Places.
        :type web_search_url: str
        """

        self._web_search_url = web_search_url

    @property
    def id(self):
        """Gets the id of this Places.

        A String identifier.

        :return: The id of this Places.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Places.

        A String identifier.

        :param id: The id of this Places.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Places.


        :return: The type of this Places.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Places.


        :param type: The type of this Places.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
