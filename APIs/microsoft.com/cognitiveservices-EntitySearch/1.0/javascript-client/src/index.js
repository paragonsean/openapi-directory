/**
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Airport from './model/Airport';
import Answer from './model/Answer';
import CivicStructure from './model/CivicStructure';
import ContractualRulesAttribution from './model/ContractualRulesAttribution';
import ContractualRulesContractualRule from './model/ContractualRulesContractualRule';
import ContractualRulesLicenseAttribution from './model/ContractualRulesLicenseAttribution';
import ContractualRulesLinkAttribution from './model/ContractualRulesLinkAttribution';
import ContractualRulesMediaAttribution from './model/ContractualRulesMediaAttribution';
import ContractualRulesTextAttribution from './model/ContractualRulesTextAttribution';
import CreativeWork from './model/CreativeWork';
import EntertainmentBusiness from './model/EntertainmentBusiness';
import Entities from './model/Entities';
import EntitiesEntityPresentationInfo from './model/EntitiesEntityPresentationInfo';
import Error from './model/Error';
import ErrorResponse from './model/ErrorResponse';
import FoodEstablishment from './model/FoodEstablishment';
import Hotel from './model/Hotel';
import Identifiable from './model/Identifiable';
import ImageObject from './model/ImageObject';
import Intangible from './model/Intangible';
import License from './model/License';
import LocalBusiness from './model/LocalBusiness';
import LodgingBusiness from './model/LodgingBusiness';
import MediaObject from './model/MediaObject';
import MovieTheater from './model/MovieTheater';
import Organization from './model/Organization';
import Place from './model/Place';
import Places from './model/Places';
import PostalAddress from './model/PostalAddress';
import QueryContext from './model/QueryContext';
import Response from './model/Response';
import ResponseBase from './model/ResponseBase';
import Restaurant from './model/Restaurant';
import SearchResponse from './model/SearchResponse';
import SearchResultsAnswer from './model/SearchResultsAnswer';
import StructuredValue from './model/StructuredValue';
import Thing from './model/Thing';
import TouristAttraction from './model/TouristAttraction';
import EntitySearchApi from './api/EntitySearchApi';


/**
* The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var EntitySearchClient = require('index'); // See note below*.
* var xxxSvc = new EntitySearchClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new EntitySearchClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new EntitySearchClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new EntitySearchClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Airport model constructor.
     * @property {module:model/Airport}
     */
    Airport,

    /**
     * The Answer model constructor.
     * @property {module:model/Answer}
     */
    Answer,

    /**
     * The CivicStructure model constructor.
     * @property {module:model/CivicStructure}
     */
    CivicStructure,

    /**
     * The ContractualRulesAttribution model constructor.
     * @property {module:model/ContractualRulesAttribution}
     */
    ContractualRulesAttribution,

    /**
     * The ContractualRulesContractualRule model constructor.
     * @property {module:model/ContractualRulesContractualRule}
     */
    ContractualRulesContractualRule,

    /**
     * The ContractualRulesLicenseAttribution model constructor.
     * @property {module:model/ContractualRulesLicenseAttribution}
     */
    ContractualRulesLicenseAttribution,

    /**
     * The ContractualRulesLinkAttribution model constructor.
     * @property {module:model/ContractualRulesLinkAttribution}
     */
    ContractualRulesLinkAttribution,

    /**
     * The ContractualRulesMediaAttribution model constructor.
     * @property {module:model/ContractualRulesMediaAttribution}
     */
    ContractualRulesMediaAttribution,

    /**
     * The ContractualRulesTextAttribution model constructor.
     * @property {module:model/ContractualRulesTextAttribution}
     */
    ContractualRulesTextAttribution,

    /**
     * The CreativeWork model constructor.
     * @property {module:model/CreativeWork}
     */
    CreativeWork,

    /**
     * The EntertainmentBusiness model constructor.
     * @property {module:model/EntertainmentBusiness}
     */
    EntertainmentBusiness,

    /**
     * The Entities model constructor.
     * @property {module:model/Entities}
     */
    Entities,

    /**
     * The EntitiesEntityPresentationInfo model constructor.
     * @property {module:model/EntitiesEntityPresentationInfo}
     */
    EntitiesEntityPresentationInfo,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The ErrorResponse model constructor.
     * @property {module:model/ErrorResponse}
     */
    ErrorResponse,

    /**
     * The FoodEstablishment model constructor.
     * @property {module:model/FoodEstablishment}
     */
    FoodEstablishment,

    /**
     * The Hotel model constructor.
     * @property {module:model/Hotel}
     */
    Hotel,

    /**
     * The Identifiable model constructor.
     * @property {module:model/Identifiable}
     */
    Identifiable,

    /**
     * The ImageObject model constructor.
     * @property {module:model/ImageObject}
     */
    ImageObject,

    /**
     * The Intangible model constructor.
     * @property {module:model/Intangible}
     */
    Intangible,

    /**
     * The License model constructor.
     * @property {module:model/License}
     */
    License,

    /**
     * The LocalBusiness model constructor.
     * @property {module:model/LocalBusiness}
     */
    LocalBusiness,

    /**
     * The LodgingBusiness model constructor.
     * @property {module:model/LodgingBusiness}
     */
    LodgingBusiness,

    /**
     * The MediaObject model constructor.
     * @property {module:model/MediaObject}
     */
    MediaObject,

    /**
     * The MovieTheater model constructor.
     * @property {module:model/MovieTheater}
     */
    MovieTheater,

    /**
     * The Organization model constructor.
     * @property {module:model/Organization}
     */
    Organization,

    /**
     * The Place model constructor.
     * @property {module:model/Place}
     */
    Place,

    /**
     * The Places model constructor.
     * @property {module:model/Places}
     */
    Places,

    /**
     * The PostalAddress model constructor.
     * @property {module:model/PostalAddress}
     */
    PostalAddress,

    /**
     * The QueryContext model constructor.
     * @property {module:model/QueryContext}
     */
    QueryContext,

    /**
     * The Response model constructor.
     * @property {module:model/Response}
     */
    Response,

    /**
     * The ResponseBase model constructor.
     * @property {module:model/ResponseBase}
     */
    ResponseBase,

    /**
     * The Restaurant model constructor.
     * @property {module:model/Restaurant}
     */
    Restaurant,

    /**
     * The SearchResponse model constructor.
     * @property {module:model/SearchResponse}
     */
    SearchResponse,

    /**
     * The SearchResultsAnswer model constructor.
     * @property {module:model/SearchResultsAnswer}
     */
    SearchResultsAnswer,

    /**
     * The StructuredValue model constructor.
     * @property {module:model/StructuredValue}
     */
    StructuredValue,

    /**
     * The Thing model constructor.
     * @property {module:model/Thing}
     */
    Thing,

    /**
     * The TouristAttraction model constructor.
     * @property {module:model/TouristAttraction}
     */
    TouristAttraction,

    /**
    * The EntitySearchApi service constructor.
    * @property {module:api/EntitySearchApi}
    */
    EntitySearchApi
};
