/**
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CivicStructure from './CivicStructure';
import ContractualRulesContractualRule from './ContractualRulesContractualRule';
import EntitiesEntityPresentationInfo from './EntitiesEntityPresentationInfo';
import ImageObject from './ImageObject';
import PostalAddress from './PostalAddress';

/**
 * The Airport model module.
 * @module model/Airport
 * @version 1.0
 */
class Airport {
    /**
     * Constructs a new <code>Airport</code>.
     * @alias module:model/Airport
     * @extends module:model/CivicStructure
     * @implements module:model/CivicStructure
     * @param type {String} 
     */
    constructor(type) { 
        CivicStructure.initialize(this, type);
        Airport.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>Airport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Airport} obj Optional instance to populate.
     * @return {module:model/Airport} The populated <code>Airport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Airport();
            CivicStructure.constructFromObject(data, obj);
            CivicStructure.constructFromObject(data, obj);

            if (data.hasOwnProperty('iataCode')) {
                obj['iataCode'] = ApiClient.convertToType(data['iataCode'], 'String');
            }
            if (data.hasOwnProperty('icaoCode')) {
                obj['icaoCode'] = ApiClient.convertToType(data['icaoCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Airport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Airport</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Airport.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['iataCode'] && !(typeof data['iataCode'] === 'string' || data['iataCode'] instanceof String)) {
            throw new Error("Expected the field `iataCode` to be a primitive type in the JSON string but got " + data['iataCode']);
        }
        // ensure the json data is a string
        if (data['icaoCode'] && !(typeof data['icaoCode'] === 'string' || data['icaoCode'] instanceof String)) {
            throw new Error("Expected the field `icaoCode` to be a primitive type in the JSON string but got " + data['icaoCode']);
        }

        return true;
    }


}

Airport.RequiredProperties = ["_type"];

/**
 * @member {String} iataCode
 */
Airport.prototype['iataCode'] = undefined;

/**
 * @member {String} icaoCode
 */
Airport.prototype['icaoCode'] = undefined;


// Implement CivicStructure interface:
/**
 * @member {module:model/PostalAddress} address
 */
CivicStructure.prototype['address'] = undefined;
/**
 * The entity's telephone number
 * @member {String} telephone
 */
CivicStructure.prototype['telephone'] = undefined;
/**
 * An ID that uniquely identifies this item.
 * @member {String} bingId
 */
CivicStructure.prototype['bingId'] = undefined;
/**
 * A short description of the item.
 * @member {String} description
 */
CivicStructure.prototype['description'] = undefined;
/**
 * @member {module:model/EntitiesEntityPresentationInfo} entityPresentationInfo
 */
CivicStructure.prototype['entityPresentationInfo'] = undefined;
/**
 * @member {module:model/ImageObject} image
 */
CivicStructure.prototype['image'] = undefined;
/**
 * The name of the thing represented by this object.
 * @member {String} name
 */
CivicStructure.prototype['name'] = undefined;
/**
 * The URL to get more information about the thing represented by this object.
 * @member {String} url
 */
CivicStructure.prototype['url'] = undefined;
/**
 * A list of rules that you must adhere to if you display the item.
 * @member {Array.<module:model/ContractualRulesContractualRule>} contractualRules
 */
CivicStructure.prototype['contractualRules'] = undefined;
/**
 * The URL To Bing's search result for this item.
 * @member {String} webSearchUrl
 */
CivicStructure.prototype['webSearchUrl'] = undefined;
/**
 * A String identifier.
 * @member {String} id
 */
CivicStructure.prototype['id'] = undefined;
/**
 * @member {String} _type
 */
CivicStructure.prototype['_type'] = undefined;




export default Airport;

