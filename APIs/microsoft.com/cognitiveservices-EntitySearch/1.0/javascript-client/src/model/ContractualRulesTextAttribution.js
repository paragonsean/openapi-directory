/**
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContractualRulesAttribution from './ContractualRulesAttribution';

/**
 * The ContractualRulesTextAttribution model module.
 * @module model/ContractualRulesTextAttribution
 * @version 1.0
 */
class ContractualRulesTextAttribution {
    /**
     * Constructs a new <code>ContractualRulesTextAttribution</code>.
     * Defines a contractual rule for text attribution.
     * @alias module:model/ContractualRulesTextAttribution
     * @extends module:model/ContractualRulesAttribution
     * @implements module:model/ContractualRulesAttribution
     * @param type {String} 
     */
    constructor(type) { 
        ContractualRulesAttribution.initialize(this, type);
        ContractualRulesTextAttribution.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['text'] = text;
    }

    /**
     * Constructs a <code>ContractualRulesTextAttribution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContractualRulesTextAttribution} obj Optional instance to populate.
     * @return {module:model/ContractualRulesTextAttribution} The populated <code>ContractualRulesTextAttribution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContractualRulesTextAttribution();
            ContractualRulesAttribution.constructFromObject(data, obj);
            ContractualRulesAttribution.constructFromObject(data, obj);

            if (data.hasOwnProperty('optionalForListDisplay')) {
                obj['optionalForListDisplay'] = ApiClient.convertToType(data['optionalForListDisplay'], 'Boolean');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContractualRulesTextAttribution</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContractualRulesTextAttribution</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContractualRulesTextAttribution.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}

ContractualRulesTextAttribution.RequiredProperties = ["text", "_type"];

/**
 * Indicates whether this provider's attribution is optional.
 * @member {Boolean} optionalForListDisplay
 */
ContractualRulesTextAttribution.prototype['optionalForListDisplay'] = undefined;

/**
 * The attribution text. Text attribution applies to the entity as a whole and should be displayed immediately following the entity presentation. If there are multiple text or link attribution rules that do not specify a target, you should concatenate them and display them using a \"Data from:\" label.
 * @member {String} text
 */
ContractualRulesTextAttribution.prototype['text'] = undefined;


// Implement ContractualRulesAttribution interface:
/**
 * @member {String} _type
 */
ContractualRulesAttribution.prototype['_type'] = undefined;
/**
 * The name of the field that the rule applies to.
 * @member {String} targetPropertyName
 */
ContractualRulesAttribution.prototype['targetPropertyName'] = undefined;




export default ContractualRulesTextAttribution;

