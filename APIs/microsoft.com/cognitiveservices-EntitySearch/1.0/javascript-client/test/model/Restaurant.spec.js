/**
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EntitySearchClient);
  }
}(this, function(expect, EntitySearchClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EntitySearchClient.Restaurant();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Restaurant', function() {
    it('should create an instance of Restaurant', function() {
      // uncomment below and update the code to test Restaurant
      //var instance = new EntitySearchClient.Restaurant();
      //expect(instance).to.be.a(EntitySearchClient.Restaurant);
    });

    it('should have the property acceptsReservations (base name: "acceptsReservations")', function() {
      // uncomment below and update the code to test the property acceptsReservations
      //var instance = new EntitySearchClient.Restaurant();
      //expect(instance).to.be();
    });

    it('should have the property menuUrl (base name: "menuUrl")', function() {
      // uncomment below and update the code to test the property menuUrl
      //var instance = new EntitySearchClient.Restaurant();
      //expect(instance).to.be();
    });

    it('should have the property reservationUrl (base name: "reservationUrl")', function() {
      // uncomment below and update the code to test the property reservationUrl
      //var instance = new EntitySearchClient.Restaurant();
      //expect(instance).to.be();
    });

    it('should have the property servesCuisine (base name: "servesCuisine")', function() {
      // uncomment below and update the code to test the property servesCuisine
      //var instance = new EntitySearchClient.Restaurant();
      //expect(instance).to.be();
    });

  });

}));
