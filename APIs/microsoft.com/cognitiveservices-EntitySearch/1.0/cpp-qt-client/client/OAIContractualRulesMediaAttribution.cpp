/**
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContractualRulesMediaAttribution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContractualRulesMediaAttribution::OAIContractualRulesMediaAttribution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContractualRulesMediaAttribution::OAIContractualRulesMediaAttribution() {
    this->initializeModel();
}

OAIContractualRulesMediaAttribution::~OAIContractualRulesMediaAttribution() {}

void OAIContractualRulesMediaAttribution::initializeModel() {

    m_url_isSet = false;
    m_url_isValid = false;

    m_must_be_close_to_content_isSet = false;
    m_must_be_close_to_content_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;

    m_target_property_name_isSet = false;
    m_target_property_name_isValid = false;
}

void OAIContractualRulesMediaAttribution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContractualRulesMediaAttribution::fromJsonObject(QJsonObject json) {

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_must_be_close_to_content_isValid = ::OpenAPI::fromJsonValue(m_must_be_close_to_content, json[QString("mustBeCloseToContent")]);
    m_must_be_close_to_content_isSet = !json[QString("mustBeCloseToContent")].isNull() && m_must_be_close_to_content_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;

    m_target_property_name_isValid = ::OpenAPI::fromJsonValue(m_target_property_name, json[QString("targetPropertyName")]);
    m_target_property_name_isSet = !json[QString("targetPropertyName")].isNull() && m_target_property_name_isValid;
}

QString OAIContractualRulesMediaAttribution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContractualRulesMediaAttribution::asJsonObject() const {
    QJsonObject obj;
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_must_be_close_to_content_isSet) {
        obj.insert(QString("mustBeCloseToContent"), ::OpenAPI::toJsonValue(m_must_be_close_to_content));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    if (m_target_property_name_isSet) {
        obj.insert(QString("targetPropertyName"), ::OpenAPI::toJsonValue(m_target_property_name));
    }
    return obj;
}

QString OAIContractualRulesMediaAttribution::getUrl() const {
    return m_url;
}
void OAIContractualRulesMediaAttribution::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIContractualRulesMediaAttribution::is_url_Set() const{
    return m_url_isSet;
}

bool OAIContractualRulesMediaAttribution::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIContractualRulesMediaAttribution::isMustBeCloseToContent() const {
    return m_must_be_close_to_content;
}
void OAIContractualRulesMediaAttribution::setMustBeCloseToContent(const bool &must_be_close_to_content) {
    m_must_be_close_to_content = must_be_close_to_content;
    m_must_be_close_to_content_isSet = true;
}

bool OAIContractualRulesMediaAttribution::is_must_be_close_to_content_Set() const{
    return m_must_be_close_to_content_isSet;
}

bool OAIContractualRulesMediaAttribution::is_must_be_close_to_content_Valid() const{
    return m_must_be_close_to_content_isValid;
}

QString OAIContractualRulesMediaAttribution::getType() const {
    return m__type;
}
void OAIContractualRulesMediaAttribution::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIContractualRulesMediaAttribution::is__type_Set() const{
    return m__type_isSet;
}

bool OAIContractualRulesMediaAttribution::is__type_Valid() const{
    return m__type_isValid;
}

QString OAIContractualRulesMediaAttribution::getTargetPropertyName() const {
    return m_target_property_name;
}
void OAIContractualRulesMediaAttribution::setTargetPropertyName(const QString &target_property_name) {
    m_target_property_name = target_property_name;
    m_target_property_name_isSet = true;
}

bool OAIContractualRulesMediaAttribution::is_target_property_name_Set() const{
    return m_target_property_name_isSet;
}

bool OAIContractualRulesMediaAttribution::is_target_property_name_Valid() const{
    return m_target_property_name_isValid;
}

bool OAIContractualRulesMediaAttribution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_must_be_close_to_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_property_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContractualRulesMediaAttribution::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
