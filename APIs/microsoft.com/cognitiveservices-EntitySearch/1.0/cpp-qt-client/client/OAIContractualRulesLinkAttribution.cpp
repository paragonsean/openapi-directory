/**
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContractualRulesLinkAttribution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContractualRulesLinkAttribution::OAIContractualRulesLinkAttribution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContractualRulesLinkAttribution::OAIContractualRulesLinkAttribution() {
    this->initializeModel();
}

OAIContractualRulesLinkAttribution::~OAIContractualRulesLinkAttribution() {}

void OAIContractualRulesLinkAttribution::initializeModel() {

    m_optional_for_list_display_isSet = false;
    m_optional_for_list_display_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_must_be_close_to_content_isSet = false;
    m_must_be_close_to_content_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;

    m_target_property_name_isSet = false;
    m_target_property_name_isValid = false;
}

void OAIContractualRulesLinkAttribution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContractualRulesLinkAttribution::fromJsonObject(QJsonObject json) {

    m_optional_for_list_display_isValid = ::OpenAPI::fromJsonValue(m_optional_for_list_display, json[QString("optionalForListDisplay")]);
    m_optional_for_list_display_isSet = !json[QString("optionalForListDisplay")].isNull() && m_optional_for_list_display_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_must_be_close_to_content_isValid = ::OpenAPI::fromJsonValue(m_must_be_close_to_content, json[QString("mustBeCloseToContent")]);
    m_must_be_close_to_content_isSet = !json[QString("mustBeCloseToContent")].isNull() && m_must_be_close_to_content_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;

    m_target_property_name_isValid = ::OpenAPI::fromJsonValue(m_target_property_name, json[QString("targetPropertyName")]);
    m_target_property_name_isSet = !json[QString("targetPropertyName")].isNull() && m_target_property_name_isValid;
}

QString OAIContractualRulesLinkAttribution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContractualRulesLinkAttribution::asJsonObject() const {
    QJsonObject obj;
    if (m_optional_for_list_display_isSet) {
        obj.insert(QString("optionalForListDisplay"), ::OpenAPI::toJsonValue(m_optional_for_list_display));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_must_be_close_to_content_isSet) {
        obj.insert(QString("mustBeCloseToContent"), ::OpenAPI::toJsonValue(m_must_be_close_to_content));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    if (m_target_property_name_isSet) {
        obj.insert(QString("targetPropertyName"), ::OpenAPI::toJsonValue(m_target_property_name));
    }
    return obj;
}

bool OAIContractualRulesLinkAttribution::isOptionalForListDisplay() const {
    return m_optional_for_list_display;
}
void OAIContractualRulesLinkAttribution::setOptionalForListDisplay(const bool &optional_for_list_display) {
    m_optional_for_list_display = optional_for_list_display;
    m_optional_for_list_display_isSet = true;
}

bool OAIContractualRulesLinkAttribution::is_optional_for_list_display_Set() const{
    return m_optional_for_list_display_isSet;
}

bool OAIContractualRulesLinkAttribution::is_optional_for_list_display_Valid() const{
    return m_optional_for_list_display_isValid;
}

QString OAIContractualRulesLinkAttribution::getText() const {
    return m_text;
}
void OAIContractualRulesLinkAttribution::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIContractualRulesLinkAttribution::is_text_Set() const{
    return m_text_isSet;
}

bool OAIContractualRulesLinkAttribution::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIContractualRulesLinkAttribution::getUrl() const {
    return m_url;
}
void OAIContractualRulesLinkAttribution::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIContractualRulesLinkAttribution::is_url_Set() const{
    return m_url_isSet;
}

bool OAIContractualRulesLinkAttribution::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIContractualRulesLinkAttribution::isMustBeCloseToContent() const {
    return m_must_be_close_to_content;
}
void OAIContractualRulesLinkAttribution::setMustBeCloseToContent(const bool &must_be_close_to_content) {
    m_must_be_close_to_content = must_be_close_to_content;
    m_must_be_close_to_content_isSet = true;
}

bool OAIContractualRulesLinkAttribution::is_must_be_close_to_content_Set() const{
    return m_must_be_close_to_content_isSet;
}

bool OAIContractualRulesLinkAttribution::is_must_be_close_to_content_Valid() const{
    return m_must_be_close_to_content_isValid;
}

QString OAIContractualRulesLinkAttribution::getType() const {
    return m__type;
}
void OAIContractualRulesLinkAttribution::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIContractualRulesLinkAttribution::is__type_Set() const{
    return m__type_isSet;
}

bool OAIContractualRulesLinkAttribution::is__type_Valid() const{
    return m__type_isValid;
}

QString OAIContractualRulesLinkAttribution::getTargetPropertyName() const {
    return m_target_property_name;
}
void OAIContractualRulesLinkAttribution::setTargetPropertyName(const QString &target_property_name) {
    m_target_property_name = target_property_name;
    m_target_property_name_isSet = true;
}

bool OAIContractualRulesLinkAttribution::is_target_property_name_Set() const{
    return m_target_property_name_isSet;
}

bool OAIContractualRulesLinkAttribution::is_target_property_name_Valid() const{
    return m_target_property_name_isValid;
}

bool OAIContractualRulesLinkAttribution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_optional_for_list_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_must_be_close_to_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_property_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContractualRulesLinkAttribution::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_text_isValid && m_url_isValid && m__type_isValid && true;
}

} // namespace OpenAPI
