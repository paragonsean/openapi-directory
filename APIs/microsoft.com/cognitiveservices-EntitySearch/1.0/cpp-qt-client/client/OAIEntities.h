/**
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEntities.h
 *
 * Defines an entity answer.
 */

#ifndef OAIEntities_H
#define OAIEntities_H

#include <QJsonObject>

#include "OAIContractualRulesContractualRule.h"
#include "OAIQueryContext.h"
#include "OAISearchResultsAnswer.h"
#include "OAIThing.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIThing;
class OAIQueryContext;
class OAIContractualRulesContractualRule;

class OAIEntities : public OAIObject {
public:
    OAIEntities();
    OAIEntities(QString json);
    ~OAIEntities() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getQueryScenario() const;
    void setQueryScenario(const QString &query_scenario);
    bool is_query_scenario_Set() const;
    bool is_query_scenario_Valid() const;

    QList<OAIThing> getValue() const;
    void setValue(const QList<OAIThing> &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    OAIQueryContext getQueryContext() const;
    void setQueryContext(const OAIQueryContext &query_context);
    bool is_query_context_Set() const;
    bool is_query_context_Valid() const;

    QList<OAIContractualRulesContractualRule> getContractualRules() const;
    void setContractualRules(const QList<OAIContractualRulesContractualRule> &contractual_rules);
    bool is_contractual_rules_Set() const;
    bool is_contractual_rules_Valid() const;

    QString getWebSearchUrl() const;
    void setWebSearchUrl(const QString &web_search_url);
    bool is_web_search_url_Set() const;
    bool is_web_search_url_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getType() const;
    void setType(const QString &_type);
    bool is__type_Set() const;
    bool is__type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_query_scenario;
    bool m_query_scenario_isSet;
    bool m_query_scenario_isValid;

    QList<OAIThing> m_value;
    bool m_value_isSet;
    bool m_value_isValid;

    OAIQueryContext m_query_context;
    bool m_query_context_isSet;
    bool m_query_context_isValid;

    QList<OAIContractualRulesContractualRule> m_contractual_rules;
    bool m_contractual_rules_isSet;
    bool m_contractual_rules_isValid;

    QString m_web_search_url;
    bool m_web_search_url_isSet;
    bool m_web_search_url_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m__type;
    bool m__type_isSet;
    bool m__type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEntities)

#endif // OAIEntities_H
