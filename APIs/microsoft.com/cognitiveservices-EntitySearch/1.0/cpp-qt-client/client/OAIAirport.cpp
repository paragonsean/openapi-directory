/**
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAirport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAirport::OAIAirport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAirport::OAIAirport() {
    this->initializeModel();
}

OAIAirport::~OAIAirport() {}

void OAIAirport::initializeModel() {

    m_iata_code_isSet = false;
    m_iata_code_isValid = false;

    m_icao_code_isSet = false;
    m_icao_code_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_telephone_isSet = false;
    m_telephone_isValid = false;

    m_bing_id_isSet = false;
    m_bing_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_entity_presentation_info_isSet = false;
    m_entity_presentation_info_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_contractual_rules_isSet = false;
    m_contractual_rules_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIAirport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAirport::fromJsonObject(QJsonObject json) {

    m_iata_code_isValid = ::OpenAPI::fromJsonValue(m_iata_code, json[QString("iataCode")]);
    m_iata_code_isSet = !json[QString("iataCode")].isNull() && m_iata_code_isValid;

    m_icao_code_isValid = ::OpenAPI::fromJsonValue(m_icao_code, json[QString("icaoCode")]);
    m_icao_code_isSet = !json[QString("icaoCode")].isNull() && m_icao_code_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_telephone_isValid = ::OpenAPI::fromJsonValue(m_telephone, json[QString("telephone")]);
    m_telephone_isSet = !json[QString("telephone")].isNull() && m_telephone_isValid;

    m_bing_id_isValid = ::OpenAPI::fromJsonValue(m_bing_id, json[QString("bingId")]);
    m_bing_id_isSet = !json[QString("bingId")].isNull() && m_bing_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_entity_presentation_info_isValid = ::OpenAPI::fromJsonValue(m_entity_presentation_info, json[QString("entityPresentationInfo")]);
    m_entity_presentation_info_isSet = !json[QString("entityPresentationInfo")].isNull() && m_entity_presentation_info_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_contractual_rules_isValid = ::OpenAPI::fromJsonValue(m_contractual_rules, json[QString("contractualRules")]);
    m_contractual_rules_isSet = !json[QString("contractualRules")].isNull() && m_contractual_rules_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIAirport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAirport::asJsonObject() const {
    QJsonObject obj;
    if (m_iata_code_isSet) {
        obj.insert(QString("iataCode"), ::OpenAPI::toJsonValue(m_iata_code));
    }
    if (m_icao_code_isSet) {
        obj.insert(QString("icaoCode"), ::OpenAPI::toJsonValue(m_icao_code));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_telephone_isSet) {
        obj.insert(QString("telephone"), ::OpenAPI::toJsonValue(m_telephone));
    }
    if (m_bing_id_isSet) {
        obj.insert(QString("bingId"), ::OpenAPI::toJsonValue(m_bing_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_entity_presentation_info.isSet()) {
        obj.insert(QString("entityPresentationInfo"), ::OpenAPI::toJsonValue(m_entity_presentation_info));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_contractual_rules.size() > 0) {
        obj.insert(QString("contractualRules"), ::OpenAPI::toJsonValue(m_contractual_rules));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

QString OAIAirport::getIataCode() const {
    return m_iata_code;
}
void OAIAirport::setIataCode(const QString &iata_code) {
    m_iata_code = iata_code;
    m_iata_code_isSet = true;
}

bool OAIAirport::is_iata_code_Set() const{
    return m_iata_code_isSet;
}

bool OAIAirport::is_iata_code_Valid() const{
    return m_iata_code_isValid;
}

QString OAIAirport::getIcaoCode() const {
    return m_icao_code;
}
void OAIAirport::setIcaoCode(const QString &icao_code) {
    m_icao_code = icao_code;
    m_icao_code_isSet = true;
}

bool OAIAirport::is_icao_code_Set() const{
    return m_icao_code_isSet;
}

bool OAIAirport::is_icao_code_Valid() const{
    return m_icao_code_isValid;
}

OAIPostalAddress OAIAirport::getAddress() const {
    return m_address;
}
void OAIAirport::setAddress(const OAIPostalAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIAirport::is_address_Set() const{
    return m_address_isSet;
}

bool OAIAirport::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIAirport::getTelephone() const {
    return m_telephone;
}
void OAIAirport::setTelephone(const QString &telephone) {
    m_telephone = telephone;
    m_telephone_isSet = true;
}

bool OAIAirport::is_telephone_Set() const{
    return m_telephone_isSet;
}

bool OAIAirport::is_telephone_Valid() const{
    return m_telephone_isValid;
}

QString OAIAirport::getBingId() const {
    return m_bing_id;
}
void OAIAirport::setBingId(const QString &bing_id) {
    m_bing_id = bing_id;
    m_bing_id_isSet = true;
}

bool OAIAirport::is_bing_id_Set() const{
    return m_bing_id_isSet;
}

bool OAIAirport::is_bing_id_Valid() const{
    return m_bing_id_isValid;
}

QString OAIAirport::getDescription() const {
    return m_description;
}
void OAIAirport::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAirport::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAirport::is_description_Valid() const{
    return m_description_isValid;
}

OAIEntitiesEntityPresentationInfo OAIAirport::getEntityPresentationInfo() const {
    return m_entity_presentation_info;
}
void OAIAirport::setEntityPresentationInfo(const OAIEntitiesEntityPresentationInfo &entity_presentation_info) {
    m_entity_presentation_info = entity_presentation_info;
    m_entity_presentation_info_isSet = true;
}

bool OAIAirport::is_entity_presentation_info_Set() const{
    return m_entity_presentation_info_isSet;
}

bool OAIAirport::is_entity_presentation_info_Valid() const{
    return m_entity_presentation_info_isValid;
}

OAIImageObject OAIAirport::getImage() const {
    return m_image;
}
void OAIAirport::setImage(const OAIImageObject &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIAirport::is_image_Set() const{
    return m_image_isSet;
}

bool OAIAirport::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIAirport::getName() const {
    return m_name;
}
void OAIAirport::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAirport::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAirport::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAirport::getUrl() const {
    return m_url;
}
void OAIAirport::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAirport::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAirport::is_url_Valid() const{
    return m_url_isValid;
}

QList<OAIContractualRulesContractualRule> OAIAirport::getContractualRules() const {
    return m_contractual_rules;
}
void OAIAirport::setContractualRules(const QList<OAIContractualRulesContractualRule> &contractual_rules) {
    m_contractual_rules = contractual_rules;
    m_contractual_rules_isSet = true;
}

bool OAIAirport::is_contractual_rules_Set() const{
    return m_contractual_rules_isSet;
}

bool OAIAirport::is_contractual_rules_Valid() const{
    return m_contractual_rules_isValid;
}

QString OAIAirport::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIAirport::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIAirport::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIAirport::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIAirport::getId() const {
    return m_id;
}
void OAIAirport::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAirport::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAirport::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAirport::getType() const {
    return m__type;
}
void OAIAirport::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIAirport::is__type_Set() const{
    return m__type_isSet;
}

bool OAIAirport::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIAirport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iata_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icao_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_telephone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_presentation_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contractual_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAirport::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
