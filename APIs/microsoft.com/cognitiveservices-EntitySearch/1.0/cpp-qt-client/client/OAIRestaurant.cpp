/**
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestaurant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestaurant::OAIRestaurant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestaurant::OAIRestaurant() {
    this->initializeModel();
}

OAIRestaurant::~OAIRestaurant() {}

void OAIRestaurant::initializeModel() {

    m_accepts_reservations_isSet = false;
    m_accepts_reservations_isValid = false;

    m_menu_url_isSet = false;
    m_menu_url_isValid = false;

    m_reservation_url_isSet = false;
    m_reservation_url_isValid = false;

    m_serves_cuisine_isSet = false;
    m_serves_cuisine_isValid = false;

    m_is_permanently_closed_isSet = false;
    m_is_permanently_closed_isValid = false;

    m_panoramas_isSet = false;
    m_panoramas_isValid = false;

    m_price_range_isSet = false;
    m_price_range_isValid = false;

    m_tag_line_isSet = false;
    m_tag_line_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_telephone_isSet = false;
    m_telephone_isValid = false;

    m_bing_id_isSet = false;
    m_bing_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_entity_presentation_info_isSet = false;
    m_entity_presentation_info_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_contractual_rules_isSet = false;
    m_contractual_rules_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIRestaurant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestaurant::fromJsonObject(QJsonObject json) {

    m_accepts_reservations_isValid = ::OpenAPI::fromJsonValue(m_accepts_reservations, json[QString("acceptsReservations")]);
    m_accepts_reservations_isSet = !json[QString("acceptsReservations")].isNull() && m_accepts_reservations_isValid;

    m_menu_url_isValid = ::OpenAPI::fromJsonValue(m_menu_url, json[QString("menuUrl")]);
    m_menu_url_isSet = !json[QString("menuUrl")].isNull() && m_menu_url_isValid;

    m_reservation_url_isValid = ::OpenAPI::fromJsonValue(m_reservation_url, json[QString("reservationUrl")]);
    m_reservation_url_isSet = !json[QString("reservationUrl")].isNull() && m_reservation_url_isValid;

    m_serves_cuisine_isValid = ::OpenAPI::fromJsonValue(m_serves_cuisine, json[QString("servesCuisine")]);
    m_serves_cuisine_isSet = !json[QString("servesCuisine")].isNull() && m_serves_cuisine_isValid;

    m_is_permanently_closed_isValid = ::OpenAPI::fromJsonValue(m_is_permanently_closed, json[QString("isPermanentlyClosed")]);
    m_is_permanently_closed_isSet = !json[QString("isPermanentlyClosed")].isNull() && m_is_permanently_closed_isValid;

    m_panoramas_isValid = ::OpenAPI::fromJsonValue(m_panoramas, json[QString("panoramas")]);
    m_panoramas_isSet = !json[QString("panoramas")].isNull() && m_panoramas_isValid;

    m_price_range_isValid = ::OpenAPI::fromJsonValue(m_price_range, json[QString("priceRange")]);
    m_price_range_isSet = !json[QString("priceRange")].isNull() && m_price_range_isValid;

    m_tag_line_isValid = ::OpenAPI::fromJsonValue(m_tag_line, json[QString("tagLine")]);
    m_tag_line_isSet = !json[QString("tagLine")].isNull() && m_tag_line_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_telephone_isValid = ::OpenAPI::fromJsonValue(m_telephone, json[QString("telephone")]);
    m_telephone_isSet = !json[QString("telephone")].isNull() && m_telephone_isValid;

    m_bing_id_isValid = ::OpenAPI::fromJsonValue(m_bing_id, json[QString("bingId")]);
    m_bing_id_isSet = !json[QString("bingId")].isNull() && m_bing_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_entity_presentation_info_isValid = ::OpenAPI::fromJsonValue(m_entity_presentation_info, json[QString("entityPresentationInfo")]);
    m_entity_presentation_info_isSet = !json[QString("entityPresentationInfo")].isNull() && m_entity_presentation_info_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_contractual_rules_isValid = ::OpenAPI::fromJsonValue(m_contractual_rules, json[QString("contractualRules")]);
    m_contractual_rules_isSet = !json[QString("contractualRules")].isNull() && m_contractual_rules_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIRestaurant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestaurant::asJsonObject() const {
    QJsonObject obj;
    if (m_accepts_reservations_isSet) {
        obj.insert(QString("acceptsReservations"), ::OpenAPI::toJsonValue(m_accepts_reservations));
    }
    if (m_menu_url_isSet) {
        obj.insert(QString("menuUrl"), ::OpenAPI::toJsonValue(m_menu_url));
    }
    if (m_reservation_url_isSet) {
        obj.insert(QString("reservationUrl"), ::OpenAPI::toJsonValue(m_reservation_url));
    }
    if (m_serves_cuisine.size() > 0) {
        obj.insert(QString("servesCuisine"), ::OpenAPI::toJsonValue(m_serves_cuisine));
    }
    if (m_is_permanently_closed_isSet) {
        obj.insert(QString("isPermanentlyClosed"), ::OpenAPI::toJsonValue(m_is_permanently_closed));
    }
    if (m_panoramas.size() > 0) {
        obj.insert(QString("panoramas"), ::OpenAPI::toJsonValue(m_panoramas));
    }
    if (m_price_range_isSet) {
        obj.insert(QString("priceRange"), ::OpenAPI::toJsonValue(m_price_range));
    }
    if (m_tag_line_isSet) {
        obj.insert(QString("tagLine"), ::OpenAPI::toJsonValue(m_tag_line));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_telephone_isSet) {
        obj.insert(QString("telephone"), ::OpenAPI::toJsonValue(m_telephone));
    }
    if (m_bing_id_isSet) {
        obj.insert(QString("bingId"), ::OpenAPI::toJsonValue(m_bing_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_entity_presentation_info.isSet()) {
        obj.insert(QString("entityPresentationInfo"), ::OpenAPI::toJsonValue(m_entity_presentation_info));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_contractual_rules.size() > 0) {
        obj.insert(QString("contractualRules"), ::OpenAPI::toJsonValue(m_contractual_rules));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

bool OAIRestaurant::isAcceptsReservations() const {
    return m_accepts_reservations;
}
void OAIRestaurant::setAcceptsReservations(const bool &accepts_reservations) {
    m_accepts_reservations = accepts_reservations;
    m_accepts_reservations_isSet = true;
}

bool OAIRestaurant::is_accepts_reservations_Set() const{
    return m_accepts_reservations_isSet;
}

bool OAIRestaurant::is_accepts_reservations_Valid() const{
    return m_accepts_reservations_isValid;
}

QString OAIRestaurant::getMenuUrl() const {
    return m_menu_url;
}
void OAIRestaurant::setMenuUrl(const QString &menu_url) {
    m_menu_url = menu_url;
    m_menu_url_isSet = true;
}

bool OAIRestaurant::is_menu_url_Set() const{
    return m_menu_url_isSet;
}

bool OAIRestaurant::is_menu_url_Valid() const{
    return m_menu_url_isValid;
}

QString OAIRestaurant::getReservationUrl() const {
    return m_reservation_url;
}
void OAIRestaurant::setReservationUrl(const QString &reservation_url) {
    m_reservation_url = reservation_url;
    m_reservation_url_isSet = true;
}

bool OAIRestaurant::is_reservation_url_Set() const{
    return m_reservation_url_isSet;
}

bool OAIRestaurant::is_reservation_url_Valid() const{
    return m_reservation_url_isValid;
}

QList<QString> OAIRestaurant::getServesCuisine() const {
    return m_serves_cuisine;
}
void OAIRestaurant::setServesCuisine(const QList<QString> &serves_cuisine) {
    m_serves_cuisine = serves_cuisine;
    m_serves_cuisine_isSet = true;
}

bool OAIRestaurant::is_serves_cuisine_Set() const{
    return m_serves_cuisine_isSet;
}

bool OAIRestaurant::is_serves_cuisine_Valid() const{
    return m_serves_cuisine_isValid;
}

bool OAIRestaurant::isIsPermanentlyClosed() const {
    return m_is_permanently_closed;
}
void OAIRestaurant::setIsPermanentlyClosed(const bool &is_permanently_closed) {
    m_is_permanently_closed = is_permanently_closed;
    m_is_permanently_closed_isSet = true;
}

bool OAIRestaurant::is_is_permanently_closed_Set() const{
    return m_is_permanently_closed_isSet;
}

bool OAIRestaurant::is_is_permanently_closed_Valid() const{
    return m_is_permanently_closed_isValid;
}

QList<OAIImageObject> OAIRestaurant::getPanoramas() const {
    return m_panoramas;
}
void OAIRestaurant::setPanoramas(const QList<OAIImageObject> &panoramas) {
    m_panoramas = panoramas;
    m_panoramas_isSet = true;
}

bool OAIRestaurant::is_panoramas_Set() const{
    return m_panoramas_isSet;
}

bool OAIRestaurant::is_panoramas_Valid() const{
    return m_panoramas_isValid;
}

QString OAIRestaurant::getPriceRange() const {
    return m_price_range;
}
void OAIRestaurant::setPriceRange(const QString &price_range) {
    m_price_range = price_range;
    m_price_range_isSet = true;
}

bool OAIRestaurant::is_price_range_Set() const{
    return m_price_range_isSet;
}

bool OAIRestaurant::is_price_range_Valid() const{
    return m_price_range_isValid;
}

QString OAIRestaurant::getTagLine() const {
    return m_tag_line;
}
void OAIRestaurant::setTagLine(const QString &tag_line) {
    m_tag_line = tag_line;
    m_tag_line_isSet = true;
}

bool OAIRestaurant::is_tag_line_Set() const{
    return m_tag_line_isSet;
}

bool OAIRestaurant::is_tag_line_Valid() const{
    return m_tag_line_isValid;
}

OAIPostalAddress OAIRestaurant::getAddress() const {
    return m_address;
}
void OAIRestaurant::setAddress(const OAIPostalAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIRestaurant::is_address_Set() const{
    return m_address_isSet;
}

bool OAIRestaurant::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIRestaurant::getTelephone() const {
    return m_telephone;
}
void OAIRestaurant::setTelephone(const QString &telephone) {
    m_telephone = telephone;
    m_telephone_isSet = true;
}

bool OAIRestaurant::is_telephone_Set() const{
    return m_telephone_isSet;
}

bool OAIRestaurant::is_telephone_Valid() const{
    return m_telephone_isValid;
}

QString OAIRestaurant::getBingId() const {
    return m_bing_id;
}
void OAIRestaurant::setBingId(const QString &bing_id) {
    m_bing_id = bing_id;
    m_bing_id_isSet = true;
}

bool OAIRestaurant::is_bing_id_Set() const{
    return m_bing_id_isSet;
}

bool OAIRestaurant::is_bing_id_Valid() const{
    return m_bing_id_isValid;
}

QString OAIRestaurant::getDescription() const {
    return m_description;
}
void OAIRestaurant::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRestaurant::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRestaurant::is_description_Valid() const{
    return m_description_isValid;
}

OAIEntitiesEntityPresentationInfo OAIRestaurant::getEntityPresentationInfo() const {
    return m_entity_presentation_info;
}
void OAIRestaurant::setEntityPresentationInfo(const OAIEntitiesEntityPresentationInfo &entity_presentation_info) {
    m_entity_presentation_info = entity_presentation_info;
    m_entity_presentation_info_isSet = true;
}

bool OAIRestaurant::is_entity_presentation_info_Set() const{
    return m_entity_presentation_info_isSet;
}

bool OAIRestaurant::is_entity_presentation_info_Valid() const{
    return m_entity_presentation_info_isValid;
}

OAIImageObject OAIRestaurant::getImage() const {
    return m_image;
}
void OAIRestaurant::setImage(const OAIImageObject &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIRestaurant::is_image_Set() const{
    return m_image_isSet;
}

bool OAIRestaurant::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIRestaurant::getName() const {
    return m_name;
}
void OAIRestaurant::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRestaurant::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRestaurant::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRestaurant::getUrl() const {
    return m_url;
}
void OAIRestaurant::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIRestaurant::is_url_Set() const{
    return m_url_isSet;
}

bool OAIRestaurant::is_url_Valid() const{
    return m_url_isValid;
}

QList<OAIContractualRulesContractualRule> OAIRestaurant::getContractualRules() const {
    return m_contractual_rules;
}
void OAIRestaurant::setContractualRules(const QList<OAIContractualRulesContractualRule> &contractual_rules) {
    m_contractual_rules = contractual_rules;
    m_contractual_rules_isSet = true;
}

bool OAIRestaurant::is_contractual_rules_Set() const{
    return m_contractual_rules_isSet;
}

bool OAIRestaurant::is_contractual_rules_Valid() const{
    return m_contractual_rules_isValid;
}

QString OAIRestaurant::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIRestaurant::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIRestaurant::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIRestaurant::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIRestaurant::getId() const {
    return m_id;
}
void OAIRestaurant::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRestaurant::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRestaurant::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRestaurant::getType() const {
    return m__type;
}
void OAIRestaurant::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIRestaurant::is__type_Set() const{
    return m__type_isSet;
}

bool OAIRestaurant::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIRestaurant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepts_reservations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_menu_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serves_cuisine.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_permanently_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_panoramas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_telephone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_presentation_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contractual_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestaurant::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
