/**
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEntitySearchApi_H
#define OAI_OAIEntitySearchApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAISearchResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEntitySearchApi : public QObject {
    Q_OBJECT

public:
    OAIEntitySearchApi(const int timeOut = 0);
    ~OAIEntitySearchApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_bing_apis_sdk QString [required]
    * @param[in]  q QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  accept_language QString [optional]
    * @param[in]  pragma QString [optional]
    * @param[in]  user_agent QString [optional]
    * @param[in]  x_ms_edge_client_id QString [optional]
    * @param[in]  x_ms_edge_client_ip QString [optional]
    * @param[in]  x_search_location QString [optional]
    * @param[in]  cc QString [optional]
    * @param[in]  mkt QString [optional]
    * @param[in]  response_filter QList<QString> [optional]
    * @param[in]  response_format QList<QString> [optional]
    * @param[in]  safe_search QString [optional]
    * @param[in]  set_lang QString [optional]
    */
    virtual void entitiesSearch(const QString &x_bing_apis_sdk, const QString &q, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pragma = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_ms_edge_client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_ms_edge_client_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_search_location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mkt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &response_filter = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &response_format = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &safe_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &set_lang = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void entitiesSearchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void entitiesSearchSignal(OAISearchResponse summary);


    void entitiesSearchSignalFull(OAIHttpRequestWorker *worker, OAISearchResponse summary);

    Q_DECL_DEPRECATED_X("Use entitiesSearchSignalError() instead")
    void entitiesSearchSignalE(OAISearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void entitiesSearchSignalError(OAISearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use entitiesSearchSignalErrorFull() instead")
    void entitiesSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void entitiesSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
