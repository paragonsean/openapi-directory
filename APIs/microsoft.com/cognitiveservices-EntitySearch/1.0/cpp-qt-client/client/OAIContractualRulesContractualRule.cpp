/**
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContractualRulesContractualRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContractualRulesContractualRule::OAIContractualRulesContractualRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContractualRulesContractualRule::OAIContractualRulesContractualRule() {
    this->initializeModel();
}

OAIContractualRulesContractualRule::~OAIContractualRulesContractualRule() {}

void OAIContractualRulesContractualRule::initializeModel() {

    m__type_isSet = false;
    m__type_isValid = false;

    m_target_property_name_isSet = false;
    m_target_property_name_isValid = false;
}

void OAIContractualRulesContractualRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContractualRulesContractualRule::fromJsonObject(QJsonObject json) {

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;

    m_target_property_name_isValid = ::OpenAPI::fromJsonValue(m_target_property_name, json[QString("targetPropertyName")]);
    m_target_property_name_isSet = !json[QString("targetPropertyName")].isNull() && m_target_property_name_isValid;
}

QString OAIContractualRulesContractualRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContractualRulesContractualRule::asJsonObject() const {
    QJsonObject obj;
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    if (m_target_property_name_isSet) {
        obj.insert(QString("targetPropertyName"), ::OpenAPI::toJsonValue(m_target_property_name));
    }
    return obj;
}

QString OAIContractualRulesContractualRule::getType() const {
    return m__type;
}
void OAIContractualRulesContractualRule::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIContractualRulesContractualRule::is__type_Set() const{
    return m__type_isSet;
}

bool OAIContractualRulesContractualRule::is__type_Valid() const{
    return m__type_isValid;
}

QString OAIContractualRulesContractualRule::getTargetPropertyName() const {
    return m_target_property_name;
}
void OAIContractualRulesContractualRule::setTargetPropertyName(const QString &target_property_name) {
    m_target_property_name = target_property_name;
    m_target_property_name_isSet = true;
}

bool OAIContractualRulesContractualRule::is_target_property_name_Set() const{
    return m_target_property_name_isSet;
}

bool OAIContractualRulesContractualRule::is_target_property_name_Valid() const{
    return m_target_property_name_isValid;
}

bool OAIContractualRulesContractualRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_property_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContractualRulesContractualRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
