/**
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchResultsAnswer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchResultsAnswer::OAISearchResultsAnswer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchResultsAnswer::OAISearchResultsAnswer() {
    this->initializeModel();
}

OAISearchResultsAnswer::~OAISearchResultsAnswer() {}

void OAISearchResultsAnswer::initializeModel() {

    m_query_context_isSet = false;
    m_query_context_isValid = false;

    m_contractual_rules_isSet = false;
    m_contractual_rules_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAISearchResultsAnswer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchResultsAnswer::fromJsonObject(QJsonObject json) {

    m_query_context_isValid = ::OpenAPI::fromJsonValue(m_query_context, json[QString("queryContext")]);
    m_query_context_isSet = !json[QString("queryContext")].isNull() && m_query_context_isValid;

    m_contractual_rules_isValid = ::OpenAPI::fromJsonValue(m_contractual_rules, json[QString("contractualRules")]);
    m_contractual_rules_isSet = !json[QString("contractualRules")].isNull() && m_contractual_rules_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAISearchResultsAnswer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchResultsAnswer::asJsonObject() const {
    QJsonObject obj;
    if (m_query_context.isSet()) {
        obj.insert(QString("queryContext"), ::OpenAPI::toJsonValue(m_query_context));
    }
    if (m_contractual_rules.size() > 0) {
        obj.insert(QString("contractualRules"), ::OpenAPI::toJsonValue(m_contractual_rules));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

OAIQueryContext OAISearchResultsAnswer::getQueryContext() const {
    return m_query_context;
}
void OAISearchResultsAnswer::setQueryContext(const OAIQueryContext &query_context) {
    m_query_context = query_context;
    m_query_context_isSet = true;
}

bool OAISearchResultsAnswer::is_query_context_Set() const{
    return m_query_context_isSet;
}

bool OAISearchResultsAnswer::is_query_context_Valid() const{
    return m_query_context_isValid;
}

QList<OAIContractualRulesContractualRule> OAISearchResultsAnswer::getContractualRules() const {
    return m_contractual_rules;
}
void OAISearchResultsAnswer::setContractualRules(const QList<OAIContractualRulesContractualRule> &contractual_rules) {
    m_contractual_rules = contractual_rules;
    m_contractual_rules_isSet = true;
}

bool OAISearchResultsAnswer::is_contractual_rules_Set() const{
    return m_contractual_rules_isSet;
}

bool OAISearchResultsAnswer::is_contractual_rules_Valid() const{
    return m_contractual_rules_isValid;
}

QString OAISearchResultsAnswer::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAISearchResultsAnswer::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAISearchResultsAnswer::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAISearchResultsAnswer::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAISearchResultsAnswer::getId() const {
    return m_id;
}
void OAISearchResultsAnswer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISearchResultsAnswer::is_id_Set() const{
    return m_id_isSet;
}

bool OAISearchResultsAnswer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISearchResultsAnswer::getType() const {
    return m__type;
}
void OAISearchResultsAnswer::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAISearchResultsAnswer::is__type_Set() const{
    return m__type_isSet;
}

bool OAISearchResultsAnswer::is__type_Valid() const{
    return m__type_isValid;
}

bool OAISearchResultsAnswer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contractual_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchResultsAnswer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
