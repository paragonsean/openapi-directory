/**
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContractualRulesLicenseAttribution.h
 *
 * Defines a contractual rule for license attribution.
 */

#ifndef OAIContractualRulesLicenseAttribution_H
#define OAIContractualRulesLicenseAttribution_H

#include <QJsonObject>

#include "OAIContractualRulesAttribution.h"
#include "OAILicense.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILicense;

class OAIContractualRulesLicenseAttribution : public OAIObject {
public:
    OAIContractualRulesLicenseAttribution();
    OAIContractualRulesLicenseAttribution(QString json);
    ~OAIContractualRulesLicenseAttribution() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAILicense getLicense() const;
    void setLicense(const OAILicense &license);
    bool is_license_Set() const;
    bool is_license_Valid() const;

    QString getLicenseNotice() const;
    void setLicenseNotice(const QString &license_notice);
    bool is_license_notice_Set() const;
    bool is_license_notice_Valid() const;

    bool isMustBeCloseToContent() const;
    void setMustBeCloseToContent(const bool &must_be_close_to_content);
    bool is_must_be_close_to_content_Set() const;
    bool is_must_be_close_to_content_Valid() const;

    QString getType() const;
    void setType(const QString &_type);
    bool is__type_Set() const;
    bool is__type_Valid() const;

    QString getTargetPropertyName() const;
    void setTargetPropertyName(const QString &target_property_name);
    bool is_target_property_name_Set() const;
    bool is_target_property_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAILicense m_license;
    bool m_license_isSet;
    bool m_license_isValid;

    QString m_license_notice;
    bool m_license_notice_isSet;
    bool m_license_notice_isValid;

    bool m_must_be_close_to_content;
    bool m_must_be_close_to_content_isSet;
    bool m_must_be_close_to_content_isValid;

    QString m__type;
    bool m__type_isSet;
    bool m__type_isValid;

    QString m_target_property_name;
    bool m_target_property_name_isSet;
    bool m_target_property_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContractualRulesLicenseAttribution)

#endif // OAIContractualRulesLicenseAttribution_H
