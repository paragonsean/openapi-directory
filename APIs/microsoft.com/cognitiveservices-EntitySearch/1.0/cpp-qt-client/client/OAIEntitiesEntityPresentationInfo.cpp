/**
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntitiesEntityPresentationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntitiesEntityPresentationInfo::OAIEntitiesEntityPresentationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntitiesEntityPresentationInfo::OAIEntitiesEntityPresentationInfo() {
    this->initializeModel();
}

OAIEntitiesEntityPresentationInfo::~OAIEntitiesEntityPresentationInfo() {}

void OAIEntitiesEntityPresentationInfo::initializeModel() {

    m_entity_scenario_isSet = false;
    m_entity_scenario_isValid = false;

    m_entity_type_display_hint_isSet = false;
    m_entity_type_display_hint_isValid = false;

    m_entity_type_hints_isSet = false;
    m_entity_type_hints_isValid = false;
}

void OAIEntitiesEntityPresentationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntitiesEntityPresentationInfo::fromJsonObject(QJsonObject json) {

    m_entity_scenario_isValid = ::OpenAPI::fromJsonValue(m_entity_scenario, json[QString("entityScenario")]);
    m_entity_scenario_isSet = !json[QString("entityScenario")].isNull() && m_entity_scenario_isValid;

    m_entity_type_display_hint_isValid = ::OpenAPI::fromJsonValue(m_entity_type_display_hint, json[QString("entityTypeDisplayHint")]);
    m_entity_type_display_hint_isSet = !json[QString("entityTypeDisplayHint")].isNull() && m_entity_type_display_hint_isValid;

    m_entity_type_hints_isValid = ::OpenAPI::fromJsonValue(m_entity_type_hints, json[QString("entityTypeHints")]);
    m_entity_type_hints_isSet = !json[QString("entityTypeHints")].isNull() && m_entity_type_hints_isValid;
}

QString OAIEntitiesEntityPresentationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntitiesEntityPresentationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_scenario_isSet) {
        obj.insert(QString("entityScenario"), ::OpenAPI::toJsonValue(m_entity_scenario));
    }
    if (m_entity_type_display_hint_isSet) {
        obj.insert(QString("entityTypeDisplayHint"), ::OpenAPI::toJsonValue(m_entity_type_display_hint));
    }
    if (m_entity_type_hints.size() > 0) {
        obj.insert(QString("entityTypeHints"), ::OpenAPI::toJsonValue(m_entity_type_hints));
    }
    return obj;
}

QString OAIEntitiesEntityPresentationInfo::getEntityScenario() const {
    return m_entity_scenario;
}
void OAIEntitiesEntityPresentationInfo::setEntityScenario(const QString &entity_scenario) {
    m_entity_scenario = entity_scenario;
    m_entity_scenario_isSet = true;
}

bool OAIEntitiesEntityPresentationInfo::is_entity_scenario_Set() const{
    return m_entity_scenario_isSet;
}

bool OAIEntitiesEntityPresentationInfo::is_entity_scenario_Valid() const{
    return m_entity_scenario_isValid;
}

QString OAIEntitiesEntityPresentationInfo::getEntityTypeDisplayHint() const {
    return m_entity_type_display_hint;
}
void OAIEntitiesEntityPresentationInfo::setEntityTypeDisplayHint(const QString &entity_type_display_hint) {
    m_entity_type_display_hint = entity_type_display_hint;
    m_entity_type_display_hint_isSet = true;
}

bool OAIEntitiesEntityPresentationInfo::is_entity_type_display_hint_Set() const{
    return m_entity_type_display_hint_isSet;
}

bool OAIEntitiesEntityPresentationInfo::is_entity_type_display_hint_Valid() const{
    return m_entity_type_display_hint_isValid;
}

QList<QString> OAIEntitiesEntityPresentationInfo::getEntityTypeHints() const {
    return m_entity_type_hints;
}
void OAIEntitiesEntityPresentationInfo::setEntityTypeHints(const QList<QString> &entity_type_hints) {
    m_entity_type_hints = entity_type_hints;
    m_entity_type_hints_isSet = true;
}

bool OAIEntitiesEntityPresentationInfo::is_entity_type_hints_Set() const{
    return m_entity_type_hints_isSet;
}

bool OAIEntitiesEntityPresentationInfo::is_entity_type_hints_Valid() const{
    return m_entity_type_hints_isValid;
}

bool OAIEntitiesEntityPresentationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_scenario_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_display_hint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_hints.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntitiesEntityPresentationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_entity_scenario_isValid && true;
}

} // namespace OpenAPI
