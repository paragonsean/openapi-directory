/**
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContractualRulesLicenseAttribution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContractualRulesLicenseAttribution::OAIContractualRulesLicenseAttribution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContractualRulesLicenseAttribution::OAIContractualRulesLicenseAttribution() {
    this->initializeModel();
}

OAIContractualRulesLicenseAttribution::~OAIContractualRulesLicenseAttribution() {}

void OAIContractualRulesLicenseAttribution::initializeModel() {

    m_license_isSet = false;
    m_license_isValid = false;

    m_license_notice_isSet = false;
    m_license_notice_isValid = false;

    m_must_be_close_to_content_isSet = false;
    m_must_be_close_to_content_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;

    m_target_property_name_isSet = false;
    m_target_property_name_isValid = false;
}

void OAIContractualRulesLicenseAttribution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContractualRulesLicenseAttribution::fromJsonObject(QJsonObject json) {

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_license_notice_isValid = ::OpenAPI::fromJsonValue(m_license_notice, json[QString("licenseNotice")]);
    m_license_notice_isSet = !json[QString("licenseNotice")].isNull() && m_license_notice_isValid;

    m_must_be_close_to_content_isValid = ::OpenAPI::fromJsonValue(m_must_be_close_to_content, json[QString("mustBeCloseToContent")]);
    m_must_be_close_to_content_isSet = !json[QString("mustBeCloseToContent")].isNull() && m_must_be_close_to_content_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;

    m_target_property_name_isValid = ::OpenAPI::fromJsonValue(m_target_property_name, json[QString("targetPropertyName")]);
    m_target_property_name_isSet = !json[QString("targetPropertyName")].isNull() && m_target_property_name_isValid;
}

QString OAIContractualRulesLicenseAttribution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContractualRulesLicenseAttribution::asJsonObject() const {
    QJsonObject obj;
    if (m_license.isSet()) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_license_notice_isSet) {
        obj.insert(QString("licenseNotice"), ::OpenAPI::toJsonValue(m_license_notice));
    }
    if (m_must_be_close_to_content_isSet) {
        obj.insert(QString("mustBeCloseToContent"), ::OpenAPI::toJsonValue(m_must_be_close_to_content));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    if (m_target_property_name_isSet) {
        obj.insert(QString("targetPropertyName"), ::OpenAPI::toJsonValue(m_target_property_name));
    }
    return obj;
}

OAILicense OAIContractualRulesLicenseAttribution::getLicense() const {
    return m_license;
}
void OAIContractualRulesLicenseAttribution::setLicense(const OAILicense &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIContractualRulesLicenseAttribution::is_license_Set() const{
    return m_license_isSet;
}

bool OAIContractualRulesLicenseAttribution::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIContractualRulesLicenseAttribution::getLicenseNotice() const {
    return m_license_notice;
}
void OAIContractualRulesLicenseAttribution::setLicenseNotice(const QString &license_notice) {
    m_license_notice = license_notice;
    m_license_notice_isSet = true;
}

bool OAIContractualRulesLicenseAttribution::is_license_notice_Set() const{
    return m_license_notice_isSet;
}

bool OAIContractualRulesLicenseAttribution::is_license_notice_Valid() const{
    return m_license_notice_isValid;
}

bool OAIContractualRulesLicenseAttribution::isMustBeCloseToContent() const {
    return m_must_be_close_to_content;
}
void OAIContractualRulesLicenseAttribution::setMustBeCloseToContent(const bool &must_be_close_to_content) {
    m_must_be_close_to_content = must_be_close_to_content;
    m_must_be_close_to_content_isSet = true;
}

bool OAIContractualRulesLicenseAttribution::is_must_be_close_to_content_Set() const{
    return m_must_be_close_to_content_isSet;
}

bool OAIContractualRulesLicenseAttribution::is_must_be_close_to_content_Valid() const{
    return m_must_be_close_to_content_isValid;
}

QString OAIContractualRulesLicenseAttribution::getType() const {
    return m__type;
}
void OAIContractualRulesLicenseAttribution::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIContractualRulesLicenseAttribution::is__type_Set() const{
    return m__type_isSet;
}

bool OAIContractualRulesLicenseAttribution::is__type_Valid() const{
    return m__type_isValid;
}

QString OAIContractualRulesLicenseAttribution::getTargetPropertyName() const {
    return m_target_property_name;
}
void OAIContractualRulesLicenseAttribution::setTargetPropertyName(const QString &target_property_name) {
    m_target_property_name = target_property_name;
    m_target_property_name_isSet = true;
}

bool OAIContractualRulesLicenseAttribution::is_target_property_name_Set() const{
    return m_target_property_name_isSet;
}

bool OAIContractualRulesLicenseAttribution::is_target_property_name_Valid() const{
    return m_target_property_name_isValid;
}

bool OAIContractualRulesLicenseAttribution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_license.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_notice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_must_be_close_to_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_property_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContractualRulesLicenseAttribution::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
