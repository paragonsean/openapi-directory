/*
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContractualRulesContractualRule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:51.118196-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContractualRulesContractualRule {
  public static final String SERIALIZED_NAME_TYPE = "_type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  protected String type;

  public static final String SERIALIZED_NAME_TARGET_PROPERTY_NAME = "targetPropertyName";
  @SerializedName(SERIALIZED_NAME_TARGET_PROPERTY_NAME)
  private String targetPropertyName;

  public ContractualRulesContractualRule() {
    this.type = this.getClass().getSimpleName();
  }

  public ContractualRulesContractualRule(
     String targetPropertyName
  ) {
    this();
    this.targetPropertyName = targetPropertyName;
  }

  public ContractualRulesContractualRule type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  /**
   * The name of the field that the rule applies to.
   * @return targetPropertyName
   */
  @javax.annotation.Nullable
  public String getTargetPropertyName() {
    return targetPropertyName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractualRulesContractualRule contractualRulesContractualRule = (ContractualRulesContractualRule) o;
    return Objects.equals(this.type, contractualRulesContractualRule.type) &&
        Objects.equals(this.targetPropertyName, contractualRulesContractualRule.targetPropertyName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, targetPropertyName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractualRulesContractualRule {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    targetPropertyName: ").append(toIndentedString(targetPropertyName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_type");
    openapiFields.add("targetPropertyName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContractualRulesContractualRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContractualRulesContractualRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContractualRulesContractualRule is not found in the empty JSON string", ContractualRulesContractualRule.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("_type").getAsString();
      switch (discriminatorValue) {
        case "ContractualRulesAttribution":
          ContractualRulesAttribution.validateJsonElement(jsonElement);
          break;
        case "ContractualRulesLicenseAttribution":
          ContractualRulesLicenseAttribution.validateJsonElement(jsonElement);
          break;
        case "ContractualRulesLinkAttribution":
          ContractualRulesLinkAttribution.validateJsonElement(jsonElement);
          break;
        case "ContractualRulesMediaAttribution":
          ContractualRulesMediaAttribution.validateJsonElement(jsonElement);
          break;
        case "ContractualRulesTextAttribution":
          ContractualRulesTextAttribution.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `_type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of ContractualRulesContractualRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContractualRulesContractualRule
   * @throws IOException if the JSON string is invalid with respect to ContractualRulesContractualRule
   */
  public static ContractualRulesContractualRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractualRulesContractualRule.class);
  }

  /**
   * Convert an instance of ContractualRulesContractualRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

