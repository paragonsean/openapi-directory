/*
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContractualRulesContractualRule;
import org.openapitools.client.model.EntitiesEntityPresentationInfo;
import org.openapitools.client.model.ImageObject;
import org.openapitools.client.model.Response;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Thing
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:51.118196-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Thing extends Response {
  public static final String SERIALIZED_NAME_BING_ID = "bingId";
  @SerializedName(SERIALIZED_NAME_BING_ID)
  private String bingId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENTITY_PRESENTATION_INFO = "entityPresentationInfo";
  @SerializedName(SERIALIZED_NAME_ENTITY_PRESENTATION_INFO)
  private EntitiesEntityPresentationInfo entityPresentationInfo;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private ImageObject image;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Thing() {
    this.type = this.getClass().getSimpleName();
  }

  public Thing(
     String bingId, 
     String description, 
     String name, 
     String url, 
     List<ContractualRulesContractualRule> contractualRules, 
     String webSearchUrl, 
     String id
  ) {
    this();
    this.bingId = bingId;
    this.description = description;
    this.name = name;
    this.url = url;
    this.contractualRules = contractualRules;
    this.webSearchUrl = webSearchUrl;
    this.id = id;
  }

  /**
   * An ID that uniquely identifies this item.
   * @return bingId
   */
  @javax.annotation.Nullable
  public String getBingId() {
    return bingId;
  }



  /**
   * A short description of the item.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  public Thing entityPresentationInfo(EntitiesEntityPresentationInfo entityPresentationInfo) {
    this.entityPresentationInfo = entityPresentationInfo;
    return this;
  }

  /**
   * Get entityPresentationInfo
   * @return entityPresentationInfo
   */
  @javax.annotation.Nullable
  public EntitiesEntityPresentationInfo getEntityPresentationInfo() {
    return entityPresentationInfo;
  }

  public void setEntityPresentationInfo(EntitiesEntityPresentationInfo entityPresentationInfo) {
    this.entityPresentationInfo = entityPresentationInfo;
  }


  public Thing image(ImageObject image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public ImageObject getImage() {
    return image;
  }

  public void setImage(ImageObject image) {
    this.image = image;
  }


  /**
   * The name of the thing represented by this object.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * The URL to get more information about the thing represented by this object.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Thing thing = (Thing) o;
    return Objects.equals(this.bingId, thing.bingId) &&
        Objects.equals(this.description, thing.description) &&
        Objects.equals(this.entityPresentationInfo, thing.entityPresentationInfo) &&
        Objects.equals(this.image, thing.image) &&
        Objects.equals(this.name, thing.name) &&
        Objects.equals(this.url, thing.url) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bingId, description, entityPresentationInfo, image, name, url, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Thing {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    bingId: ").append(toIndentedString(bingId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    entityPresentationInfo: ").append(toIndentedString(entityPresentationInfo)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contractualRules");
    openapiFields.add("webSearchUrl");
    openapiFields.add("id");
    openapiFields.add("_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Thing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Thing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Thing is not found in the empty JSON string", Thing.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("_type").getAsString();
      switch (discriminatorValue) {
        case "Airport":
          Airport.validateJsonElement(jsonElement);
          break;
        case "CivicStructure":
          CivicStructure.validateJsonElement(jsonElement);
          break;
        case "CreativeWork":
          CreativeWork.validateJsonElement(jsonElement);
          break;
        case "EntertainmentBusiness":
          EntertainmentBusiness.validateJsonElement(jsonElement);
          break;
        case "FoodEstablishment":
          FoodEstablishment.validateJsonElement(jsonElement);
          break;
        case "Hotel":
          Hotel.validateJsonElement(jsonElement);
          break;
        case "ImageObject":
          ImageObject.validateJsonElement(jsonElement);
          break;
        case "Intangible":
          Intangible.validateJsonElement(jsonElement);
          break;
        case "License":
          License.validateJsonElement(jsonElement);
          break;
        case "LocalBusiness":
          LocalBusiness.validateJsonElement(jsonElement);
          break;
        case "LodgingBusiness":
          LodgingBusiness.validateJsonElement(jsonElement);
          break;
        case "MediaObject":
          MediaObject.validateJsonElement(jsonElement);
          break;
        case "MovieTheater":
          MovieTheater.validateJsonElement(jsonElement);
          break;
        case "Organization":
          Organization.validateJsonElement(jsonElement);
          break;
        case "Place":
          Place.validateJsonElement(jsonElement);
          break;
        case "PostalAddress":
          PostalAddress.validateJsonElement(jsonElement);
          break;
        case "Restaurant":
          Restaurant.validateJsonElement(jsonElement);
          break;
        case "StructuredValue":
          StructuredValue.validateJsonElement(jsonElement);
          break;
        case "TouristAttraction":
          TouristAttraction.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `_type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of Thing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Thing
   * @throws IOException if the JSON string is invalid with respect to Thing
   */
  public static Thing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Thing.class);
  }

  /**
   * Convert an instance of Thing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

