/*
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ContractualRulesContractualRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContractualRulesAttribution
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:51.118196-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContractualRulesAttribution extends ContractualRulesContractualRule {
  public static final String SERIALIZED_NAME_MUST_BE_CLOSE_TO_CONTENT = "mustBeCloseToContent";
  @SerializedName(SERIALIZED_NAME_MUST_BE_CLOSE_TO_CONTENT)
  private Boolean mustBeCloseToContent;

  public ContractualRulesAttribution() {
    this.type = this.getClass().getSimpleName();
  }

  public ContractualRulesAttribution(
     Boolean mustBeCloseToContent, 
     String targetPropertyName
  ) {
    this();
    this.mustBeCloseToContent = mustBeCloseToContent;
    this.targetPropertyName = targetPropertyName;
  }

  /**
   * A Boolean value that determines whether the contents of the rule must be placed in close proximity to the field that the rule applies to. If true, the contents must be placed in close proximity. If false, or this field does not exist, the contents may be placed at the caller&#39;s discretion.
   * @return mustBeCloseToContent
   */
  @javax.annotation.Nullable
  public Boolean getMustBeCloseToContent() {
    return mustBeCloseToContent;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractualRulesAttribution contractualRulesAttribution = (ContractualRulesAttribution) o;
    return Objects.equals(this.mustBeCloseToContent, contractualRulesAttribution.mustBeCloseToContent) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mustBeCloseToContent, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractualRulesAttribution {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    mustBeCloseToContent: ").append(toIndentedString(mustBeCloseToContent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_type");
    openapiFields.add("targetPropertyName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContractualRulesAttribution
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContractualRulesAttribution.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContractualRulesAttribution is not found in the empty JSON string", ContractualRulesAttribution.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("_type").getAsString();
      switch (discriminatorValue) {
        case "ContractualRulesLicenseAttribution":
          ContractualRulesLicenseAttribution.validateJsonElement(jsonElement);
          break;
        case "ContractualRulesLinkAttribution":
          ContractualRulesLinkAttribution.validateJsonElement(jsonElement);
          break;
        case "ContractualRulesMediaAttribution":
          ContractualRulesMediaAttribution.validateJsonElement(jsonElement);
          break;
        case "ContractualRulesTextAttribution":
          ContractualRulesTextAttribution.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `_type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of ContractualRulesAttribution given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContractualRulesAttribution
   * @throws IOException if the JSON string is invalid with respect to ContractualRulesAttribution
   */
  public static ContractualRulesAttribution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractualRulesAttribution.class);
  }

  /**
   * Convert an instance of ContractualRulesAttribution to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

