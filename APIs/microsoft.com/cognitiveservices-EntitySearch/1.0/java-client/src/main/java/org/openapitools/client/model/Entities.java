/*
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContractualRulesContractualRule;
import org.openapitools.client.model.QueryContext;
import org.openapitools.client.model.SearchResultsAnswer;
import org.openapitools.client.model.Thing;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines an entity answer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:51.118196-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Entities extends SearchResultsAnswer {
  /**
   * The supported query scenario. This field is set to DominantEntity or DisambiguationItem. The field is set to DominantEntity if Bing determines that only a single entity satisfies the request. For example, a book, movie, person, or attraction. If multiple entities could satisfy the request, the field is set to DisambiguationItem. For example, if the request uses the generic title of a movie franchise, the entity&#39;s type would likely be DisambiguationItem. But, if the request specifies a specific title from the franchise, the entity&#39;s type would likely be DominantEntity.
   */
  @JsonAdapter(QueryScenarioEnum.Adapter.class)
  public enum QueryScenarioEnum {
    DOMINANT_ENTITY("DominantEntity"),
    
    DOMINANT_ENTITY_WITH_DISAMBIGUATION("DominantEntityWithDisambiguation"),
    
    DISAMBIGUATION("Disambiguation"),
    
    LIST("List"),
    
    LIST_WITH_PIVOT("ListWithPivot");

    private String value;

    QueryScenarioEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QueryScenarioEnum fromValue(String value) {
      for (QueryScenarioEnum b : QueryScenarioEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QueryScenarioEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QueryScenarioEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QueryScenarioEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QueryScenarioEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QueryScenarioEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUERY_SCENARIO = "queryScenario";
  @SerializedName(SERIALIZED_NAME_QUERY_SCENARIO)
  private QueryScenarioEnum queryScenario = QueryScenarioEnum.DOMINANT_ENTITY;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private List<Thing> value = new ArrayList<>();

  public Entities() {
    this.type = this.getClass().getSimpleName();
  }

  public Entities(
     QueryScenarioEnum queryScenario, 
     List<ContractualRulesContractualRule> contractualRules, 
     String webSearchUrl, 
     String id
  ) {
    this();
    this.queryScenario = queryScenario;
    this.contractualRules = contractualRules;
    this.webSearchUrl = webSearchUrl;
    this.id = id;
  }

  /**
   * The supported query scenario. This field is set to DominantEntity or DisambiguationItem. The field is set to DominantEntity if Bing determines that only a single entity satisfies the request. For example, a book, movie, person, or attraction. If multiple entities could satisfy the request, the field is set to DisambiguationItem. For example, if the request uses the generic title of a movie franchise, the entity&#39;s type would likely be DisambiguationItem. But, if the request specifies a specific title from the franchise, the entity&#39;s type would likely be DominantEntity.
   * @return queryScenario
   */
  @javax.annotation.Nullable
  public QueryScenarioEnum getQueryScenario() {
    return queryScenario;
  }



  public Entities value(List<Thing> value) {
    this.value = value;
    return this;
  }

  public Entities addValueItem(Thing valueItem) {
    if (this.value == null) {
      this.value = new ArrayList<>();
    }
    this.value.add(valueItem);
    return this;
  }

  /**
   * A list of entities.
   * @return value
   */
  @javax.annotation.Nonnull
  public List<Thing> getValue() {
    return value;
  }

  public void setValue(List<Thing> value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Entities entities = (Entities) o;
    return Objects.equals(this.queryScenario, entities.queryScenario) &&
        Objects.equals(this.value, entities.value) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(queryScenario, value, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Entities {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    queryScenario: ").append(toIndentedString(queryScenario)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("queryContext");
    openapiFields.add("contractualRules");
    openapiFields.add("webSearchUrl");
    openapiFields.add("id");
    openapiFields.add("_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("value");
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Entities
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Entities.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Entities is not found in the empty JSON string", Entities.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Entities.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Entities` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Entities.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Entities.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Entities' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Entities> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Entities.class));

       return (TypeAdapter<T>) new TypeAdapter<Entities>() {
           @Override
           public void write(JsonWriter out, Entities value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Entities read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Entities given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Entities
   * @throws IOException if the JSON string is invalid with respect to Entities
   */
  public static Entities fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Entities.class);
  }

  /**
   * Convert an instance of Entities to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

