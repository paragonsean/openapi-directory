/*
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContractualRulesContractualRule;
import org.openapitools.client.model.EntitiesEntityPresentationInfo;
import org.openapitools.client.model.ImageObject;
import org.openapitools.client.model.PostalAddress;
import org.openapitools.client.model.Thing;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines information about a local entity, such as a restaurant or hotel.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:51.118196-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Place extends Thing {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private PostalAddress address;

  public static final String SERIALIZED_NAME_TELEPHONE = "telephone";
  @SerializedName(SERIALIZED_NAME_TELEPHONE)
  private String telephone;

  public Place() {
    this.type = this.getClass().getSimpleName();
  }

  public Place(
     String telephone, 
     String bingId, 
     String description, 
     String name, 
     String url, 
     List<ContractualRulesContractualRule> contractualRules, 
     String webSearchUrl, 
     String id
  ) {
    this();
    this.telephone = telephone;
    this.bingId = bingId;
    this.description = description;
    this.name = name;
    this.url = url;
    this.contractualRules = contractualRules;
    this.webSearchUrl = webSearchUrl;
    this.id = id;
  }

  public Place address(PostalAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public PostalAddress getAddress() {
    return address;
  }

  public void setAddress(PostalAddress address) {
    this.address = address;
  }


  /**
   * The entity&#39;s telephone number
   * @return telephone
   */
  @javax.annotation.Nullable
  public String getTelephone() {
    return telephone;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Place place = (Place) o;
    return Objects.equals(this.address, place.address) &&
        Objects.equals(this.telephone, place.telephone) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, telephone, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Place {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    telephone: ").append(toIndentedString(telephone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bingId");
    openapiFields.add("description");
    openapiFields.add("entityPresentationInfo");
    openapiFields.add("image");
    openapiFields.add("name");
    openapiFields.add("url");
    openapiFields.add("contractualRules");
    openapiFields.add("webSearchUrl");
    openapiFields.add("id");
    openapiFields.add("_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Place
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Place.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Place is not found in the empty JSON string", Place.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("_type").getAsString();
      switch (discriminatorValue) {
        case "Airport":
          Airport.validateJsonElement(jsonElement);
          break;
        case "CivicStructure":
          CivicStructure.validateJsonElement(jsonElement);
          break;
        case "EntertainmentBusiness":
          EntertainmentBusiness.validateJsonElement(jsonElement);
          break;
        case "FoodEstablishment":
          FoodEstablishment.validateJsonElement(jsonElement);
          break;
        case "Hotel":
          Hotel.validateJsonElement(jsonElement);
          break;
        case "LocalBusiness":
          LocalBusiness.validateJsonElement(jsonElement);
          break;
        case "LodgingBusiness":
          LodgingBusiness.validateJsonElement(jsonElement);
          break;
        case "MovieTheater":
          MovieTheater.validateJsonElement(jsonElement);
          break;
        case "Restaurant":
          Restaurant.validateJsonElement(jsonElement);
          break;
        case "TouristAttraction":
          TouristAttraction.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `_type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of Place given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Place
   * @throws IOException if the JSON string is invalid with respect to Place
   */
  public static Place fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Place.class);
  }

  /**
   * Convert an instance of Place to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

