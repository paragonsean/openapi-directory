/*
 * Entity Search Client
 * The Entity Search API lets you send a search query to Bing and get back search results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ContractualRulesAttribution;
import org.openapitools.client.model.License;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a contractual rule for license attribution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:51.118196-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContractualRulesLicenseAttribution extends ContractualRulesAttribution {
  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private License license;

  public static final String SERIALIZED_NAME_LICENSE_NOTICE = "licenseNotice";
  @SerializedName(SERIALIZED_NAME_LICENSE_NOTICE)
  private String licenseNotice;

  public ContractualRulesLicenseAttribution() {
    this.type = this.getClass().getSimpleName();
  }

  public ContractualRulesLicenseAttribution(
     String licenseNotice, 
     Boolean mustBeCloseToContent, 
     String targetPropertyName
  ) {
    this();
    this.licenseNotice = licenseNotice;
    this.mustBeCloseToContent = mustBeCloseToContent;
    this.targetPropertyName = targetPropertyName;
  }

  public ContractualRulesLicenseAttribution license(License license) {
    this.license = license;
    return this;
  }

  /**
   * Get license
   * @return license
   */
  @javax.annotation.Nullable
  public License getLicense() {
    return license;
  }

  public void setLicense(License license) {
    this.license = license;
  }


  /**
   * The license to display next to the targeted field.
   * @return licenseNotice
   */
  @javax.annotation.Nullable
  public String getLicenseNotice() {
    return licenseNotice;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractualRulesLicenseAttribution contractualRulesLicenseAttribution = (ContractualRulesLicenseAttribution) o;
    return Objects.equals(this.license, contractualRulesLicenseAttribution.license) &&
        Objects.equals(this.licenseNotice, contractualRulesLicenseAttribution.licenseNotice) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(license, licenseNotice, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractualRulesLicenseAttribution {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    licenseNotice: ").append(toIndentedString(licenseNotice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mustBeCloseToContent");
    openapiFields.add("_type");
    openapiFields.add("targetPropertyName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContractualRulesLicenseAttribution
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContractualRulesLicenseAttribution.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContractualRulesLicenseAttribution is not found in the empty JSON string", ContractualRulesLicenseAttribution.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContractualRulesLicenseAttribution.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContractualRulesLicenseAttribution` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContractualRulesLicenseAttribution.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContractualRulesLicenseAttribution.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContractualRulesLicenseAttribution' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContractualRulesLicenseAttribution> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContractualRulesLicenseAttribution.class));

       return (TypeAdapter<T>) new TypeAdapter<ContractualRulesLicenseAttribution>() {
           @Override
           public void write(JsonWriter out, ContractualRulesLicenseAttribution value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContractualRulesLicenseAttribution read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContractualRulesLicenseAttribution given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContractualRulesLicenseAttribution
   * @throws IOException if the JSON string is invalid with respect to ContractualRulesLicenseAttribution
   */
  public static ContractualRulesLicenseAttribution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractualRulesLicenseAttribution.class);
  }

  /**
   * Convert an instance of ContractualRulesLicenseAttribution to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

