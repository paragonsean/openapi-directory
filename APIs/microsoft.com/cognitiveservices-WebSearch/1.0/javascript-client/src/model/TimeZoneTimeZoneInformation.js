/**
 * Web Search Client
 * The Web Search API lets you send a search query to Bing and get back search results that include links to webpages, images, and more.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TimeZoneTimeZoneInformation model module.
 * @module model/TimeZoneTimeZoneInformation
 * @version 1.0
 */
class TimeZoneTimeZoneInformation {
    /**
     * Constructs a new <code>TimeZoneTimeZoneInformation</code>.
     * Defines a date and time for a geographical location.
     * @alias module:model/TimeZoneTimeZoneInformation
     * @param location {String} The name of the geographical location.For example, County; City; City, State; City, State, Country; or Time Zone.
     * @param time {String} The data and time specified in the form, YYYY-MM-DDThh;mm:ss.ssssssZ.
     * @param utcOffset {String} The offset from UTC. For example, UTC-7.
     */
    constructor(location, time, utcOffset) { 
        
        TimeZoneTimeZoneInformation.initialize(this, location, time, utcOffset);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, location, time, utcOffset) { 
        obj['location'] = location;
        obj['time'] = time;
        obj['utcOffset'] = utcOffset;
    }

    /**
     * Constructs a <code>TimeZoneTimeZoneInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeZoneTimeZoneInformation} obj Optional instance to populate.
     * @return {module:model/TimeZoneTimeZoneInformation} The populated <code>TimeZoneTimeZoneInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeZoneTimeZoneInformation();

            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'String');
            }
            if (data.hasOwnProperty('utcOffset')) {
                obj['utcOffset'] = ApiClient.convertToType(data['utcOffset'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeZoneTimeZoneInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeZoneTimeZoneInformation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TimeZoneTimeZoneInformation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['time'] && !(typeof data['time'] === 'string' || data['time'] instanceof String)) {
            throw new Error("Expected the field `time` to be a primitive type in the JSON string but got " + data['time']);
        }
        // ensure the json data is a string
        if (data['utcOffset'] && !(typeof data['utcOffset'] === 'string' || data['utcOffset'] instanceof String)) {
            throw new Error("Expected the field `utcOffset` to be a primitive type in the JSON string but got " + data['utcOffset']);
        }

        return true;
    }


}

TimeZoneTimeZoneInformation.RequiredProperties = ["location", "time", "utcOffset"];

/**
 * The name of the geographical location.For example, County; City; City, State; City, State, Country; or Time Zone.
 * @member {String} location
 */
TimeZoneTimeZoneInformation.prototype['location'] = undefined;

/**
 * The data and time specified in the form, YYYY-MM-DDThh;mm:ss.ssssssZ.
 * @member {String} time
 */
TimeZoneTimeZoneInformation.prototype['time'] = undefined;

/**
 * The offset from UTC. For example, UTC-7.
 * @member {String} utcOffset
 */
TimeZoneTimeZoneInformation.prototype['utcOffset'] = undefined;






export default TimeZoneTimeZoneInformation;

