/**
 * Web Search Client
 * The Web Search API lets you send a search query to Bing and get back search results that include links to webpages, images, and more.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Answer from './Answer';
import Query from './Query';

/**
 * The Computation model module.
 * @module model/Computation
 * @version 1.0
 */
class Computation {
    /**
     * Constructs a new <code>Computation</code>.
     * Defines an expression and its answer
     * @alias module:model/Computation
     * @extends module:model/Answer
     * @implements module:model/Answer
     * @param type {String} 
     */
    constructor(type) { 
        Answer.initialize(this, type);
        Computation.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['expression'] = expression;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Computation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Computation} obj Optional instance to populate.
     * @return {module:model/Computation} The populated <code>Computation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Computation();
            Answer.constructFromObject(data, obj);
            Answer.constructFromObject(data, obj);

            if (data.hasOwnProperty('expression')) {
                obj['expression'] = ApiClient.convertToType(data['expression'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Computation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Computation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Computation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['expression'] && !(typeof data['expression'] === 'string' || data['expression'] instanceof String)) {
            throw new Error("Expected the field `expression` to be a primitive type in the JSON string but got " + data['expression']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

Computation.RequiredProperties = ["expression", "value", "_type"];

/**
 * The math or conversion expression. If the query contains a request to convert units of measure (for example, meters to feet), this field contains the from units and value contains the to units. If the query contains a mathematical expression such as 2+2, this field contains the expression and value contains the answer. Note that mathematical expressions may be normalized. For example, if the query was sqrt(4^2+8^2), the normalized expression may be sqrt((4^2)+(8^2)). If the user's query is a math question and the textDecorations query parameter is set to true, the expression string may include formatting markers. For example, if the user's query is log(2), the normalized expression includes the subscript markers. For more information, see Hit Highlighting.
 * @member {String} expression
 */
Computation.prototype['expression'] = undefined;

/**
 * The expression's answer.
 * @member {String} value
 */
Computation.prototype['value'] = undefined;


// Implement Answer interface:
/**
 * The URL To Bing's search result for this item.
 * @member {String} webSearchUrl
 */
Answer.prototype['webSearchUrl'] = undefined;
/**
 * A String identifier.
 * @member {String} id
 */
Answer.prototype['id'] = undefined;
/**
 * @member {String} _type
 */
Answer.prototype['_type'] = undefined;




export default Computation;

