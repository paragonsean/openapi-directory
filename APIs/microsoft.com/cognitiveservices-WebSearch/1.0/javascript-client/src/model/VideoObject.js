/**
 * Web Search Client
 * The Web Search API lets you send a search query to Bing and get back search results that include links to webpages, images, and more.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageObject from './ImageObject';
import MediaObject from './MediaObject';
import Thing from './Thing';

/**
 * The VideoObject model module.
 * @module model/VideoObject
 * @version 1.0
 */
class VideoObject {
    /**
     * Constructs a new <code>VideoObject</code>.
     * Defines a video object that is relevant to the query.
     * @alias module:model/VideoObject
     * @extends module:model/MediaObject
     * @implements module:model/MediaObject
     * @param type {String} 
     */
    constructor(type) { 
        MediaObject.initialize(this, type);
        VideoObject.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>VideoObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoObject} obj Optional instance to populate.
     * @return {module:model/VideoObject} The populated <code>VideoObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoObject();
            MediaObject.constructFromObject(data, obj);
            MediaObject.constructFromObject(data, obj);

            if (data.hasOwnProperty('allowHttpsEmbed')) {
                obj['allowHttpsEmbed'] = ApiClient.convertToType(data['allowHttpsEmbed'], 'Boolean');
            }
            if (data.hasOwnProperty('allowMobileEmbed')) {
                obj['allowMobileEmbed'] = ApiClient.convertToType(data['allowMobileEmbed'], 'Boolean');
            }
            if (data.hasOwnProperty('embedHtml')) {
                obj['embedHtml'] = ApiClient.convertToType(data['embedHtml'], 'String');
            }
            if (data.hasOwnProperty('isSuperfresh')) {
                obj['isSuperfresh'] = ApiClient.convertToType(data['isSuperfresh'], 'Boolean');
            }
            if (data.hasOwnProperty('motionThumbnailId')) {
                obj['motionThumbnailId'] = ApiClient.convertToType(data['motionThumbnailId'], 'String');
            }
            if (data.hasOwnProperty('motionThumbnailUrl')) {
                obj['motionThumbnailUrl'] = ApiClient.convertToType(data['motionThumbnailUrl'], 'String');
            }
            if (data.hasOwnProperty('thumbnail')) {
                obj['thumbnail'] = ImageObject.constructFromObject(data['thumbnail']);
            }
            if (data.hasOwnProperty('videoId')) {
                obj['videoId'] = ApiClient.convertToType(data['videoId'], 'String');
            }
            if (data.hasOwnProperty('viewCount')) {
                obj['viewCount'] = ApiClient.convertToType(data['viewCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VideoObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['embedHtml'] && !(typeof data['embedHtml'] === 'string' || data['embedHtml'] instanceof String)) {
            throw new Error("Expected the field `embedHtml` to be a primitive type in the JSON string but got " + data['embedHtml']);
        }
        // ensure the json data is a string
        if (data['motionThumbnailId'] && !(typeof data['motionThumbnailId'] === 'string' || data['motionThumbnailId'] instanceof String)) {
            throw new Error("Expected the field `motionThumbnailId` to be a primitive type in the JSON string but got " + data['motionThumbnailId']);
        }
        // ensure the json data is a string
        if (data['motionThumbnailUrl'] && !(typeof data['motionThumbnailUrl'] === 'string' || data['motionThumbnailUrl'] instanceof String)) {
            throw new Error("Expected the field `motionThumbnailUrl` to be a primitive type in the JSON string but got " + data['motionThumbnailUrl']);
        }
        // validate the optional field `thumbnail`
        if (data['thumbnail']) { // data not null
          ImageObject.validateJSON(data['thumbnail']);
        }
        // ensure the json data is a string
        if (data['videoId'] && !(typeof data['videoId'] === 'string' || data['videoId'] instanceof String)) {
            throw new Error("Expected the field `videoId` to be a primitive type in the JSON string but got " + data['videoId']);
        }

        return true;
    }


}

VideoObject.RequiredProperties = ["_type"];

/**
 * @member {Boolean} allowHttpsEmbed
 */
VideoObject.prototype['allowHttpsEmbed'] = undefined;

/**
 * @member {Boolean} allowMobileEmbed
 */
VideoObject.prototype['allowMobileEmbed'] = undefined;

/**
 * @member {String} embedHtml
 */
VideoObject.prototype['embedHtml'] = undefined;

/**
 * @member {Boolean} isSuperfresh
 */
VideoObject.prototype['isSuperfresh'] = undefined;

/**
 * @member {String} motionThumbnailId
 */
VideoObject.prototype['motionThumbnailId'] = undefined;

/**
 * @member {String} motionThumbnailUrl
 */
VideoObject.prototype['motionThumbnailUrl'] = undefined;

/**
 * @member {module:model/ImageObject} thumbnail
 */
VideoObject.prototype['thumbnail'] = undefined;

/**
 * @member {String} videoId
 */
VideoObject.prototype['videoId'] = undefined;

/**
 * @member {Number} viewCount
 */
VideoObject.prototype['viewCount'] = undefined;


// Implement MediaObject interface:
/**
 * The source of the creative work.
 * @member {Array.<module:model/Thing>} provider
 */
MediaObject.prototype['provider'] = undefined;
/**
 * @member {String} text
 */
MediaObject.prototype['text'] = undefined;
/**
 * The URL to a thumbnail of the item.
 * @member {String} thumbnailUrl
 */
MediaObject.prototype['thumbnailUrl'] = undefined;
/**
 * An ID that uniquely identifies this item.
 * @member {String} bingId
 */
MediaObject.prototype['bingId'] = undefined;
/**
 * A short description of the item.
 * @member {String} description
 */
MediaObject.prototype['description'] = undefined;
/**
 * @member {module:model/ImageObject} image
 */
MediaObject.prototype['image'] = undefined;
/**
 * The name of the thing represented by this object.
 * @member {String} name
 */
MediaObject.prototype['name'] = undefined;
/**
 * The URL to get more information about the thing represented by this object.
 * @member {String} url
 */
MediaObject.prototype['url'] = undefined;
/**
 * The URL To Bing's search result for this item.
 * @member {String} webSearchUrl
 */
MediaObject.prototype['webSearchUrl'] = undefined;
/**
 * A String identifier.
 * @member {String} id
 */
MediaObject.prototype['id'] = undefined;
/**
 * @member {String} _type
 */
MediaObject.prototype['_type'] = undefined;




export default VideoObject;

