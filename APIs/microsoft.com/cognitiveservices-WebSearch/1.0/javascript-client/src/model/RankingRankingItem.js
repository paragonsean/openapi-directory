/**
 * Web Search Client
 * The Web Search API lets you send a search query to Bing and get back search results that include links to webpages, images, and more.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Identifiable from './Identifiable';

/**
 * The RankingRankingItem model module.
 * @module model/RankingRankingItem
 * @version 1.0
 */
class RankingRankingItem {
    /**
     * Constructs a new <code>RankingRankingItem</code>.
     * Defines a search result item to display
     * @alias module:model/RankingRankingItem
     * @param answerType {module:model/RankingRankingItem.AnswerTypeEnum} The answer that contains the item to display. Use the type to find the answer in the SearchResponse object. The type is the name of a SearchResponse field.
     */
    constructor(answerType) { 
        
        RankingRankingItem.initialize(this, answerType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, answerType) { 
        obj['answerType'] = answerType || 'WebPages';
    }

    /**
     * Constructs a <code>RankingRankingItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RankingRankingItem} obj Optional instance to populate.
     * @return {module:model/RankingRankingItem} The populated <code>RankingRankingItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RankingRankingItem();

            if (data.hasOwnProperty('answerType')) {
                obj['answerType'] = ApiClient.convertToType(data['answerType'], 'String');
            }
            if (data.hasOwnProperty('htmlIndex')) {
                obj['htmlIndex'] = ApiClient.convertToType(data['htmlIndex'], 'Number');
            }
            if (data.hasOwnProperty('resultIndex')) {
                obj['resultIndex'] = ApiClient.convertToType(data['resultIndex'], 'Number');
            }
            if (data.hasOwnProperty('screenshotIndex')) {
                obj['screenshotIndex'] = ApiClient.convertToType(data['screenshotIndex'], 'Number');
            }
            if (data.hasOwnProperty('textualIndex')) {
                obj['textualIndex'] = ApiClient.convertToType(data['textualIndex'], 'Number');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = Identifiable.constructFromObject(data['value']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RankingRankingItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RankingRankingItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RankingRankingItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['answerType'] && !(typeof data['answerType'] === 'string' || data['answerType'] instanceof String)) {
            throw new Error("Expected the field `answerType` to be a primitive type in the JSON string but got " + data['answerType']);
        }
        // validate the optional field `value`
        if (data['value']) { // data not null
          Identifiable.validateJSON(data['value']);
        }

        return true;
    }


}

RankingRankingItem.RequiredProperties = ["answerType"];

/**
 * The answer that contains the item to display. Use the type to find the answer in the SearchResponse object. The type is the name of a SearchResponse field.
 * @member {module:model/RankingRankingItem.AnswerTypeEnum} answerType
 * @default 'WebPages'
 */
RankingRankingItem.prototype['answerType'] = 'WebPages';

/**
 * @member {Number} htmlIndex
 */
RankingRankingItem.prototype['htmlIndex'] = undefined;

/**
 * A zero-based index of the item in the answer.If the item does not include this field, display all items in the answer. For example, display all news articles in the News answer.
 * @member {Number} resultIndex
 */
RankingRankingItem.prototype['resultIndex'] = undefined;

/**
 * @member {Number} screenshotIndex
 */
RankingRankingItem.prototype['screenshotIndex'] = undefined;

/**
 * @member {Number} textualIndex
 */
RankingRankingItem.prototype['textualIndex'] = undefined;

/**
 * @member {module:model/Identifiable} value
 */
RankingRankingItem.prototype['value'] = undefined;





/**
 * Allowed values for the <code>answerType</code> property.
 * @enum {String}
 * @readonly
 */
RankingRankingItem['AnswerTypeEnum'] = {

    /**
     * value: "WebPages"
     * @const
     */
    "WebPages": "WebPages",

    /**
     * value: "Images"
     * @const
     */
    "Images": "Images",

    /**
     * value: "SpellSuggestions"
     * @const
     */
    "SpellSuggestions": "SpellSuggestions",

    /**
     * value: "News"
     * @const
     */
    "News": "News",

    /**
     * value: "RelatedSearches"
     * @const
     */
    "RelatedSearches": "RelatedSearches",

    /**
     * value: "Videos"
     * @const
     */
    "Videos": "Videos",

    /**
     * value: "Computation"
     * @const
     */
    "Computation": "Computation",

    /**
     * value: "TimeZone"
     * @const
     */
    "TimeZone": "TimeZone"
};



export default RankingRankingItem;

