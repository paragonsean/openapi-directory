/**
 * Web Search Client
 * The Web Search API lets you send a search query to Bing and get back search results that include links to webpages, images, and more.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRankingRankingItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRankingRankingItem::OAIRankingRankingItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRankingRankingItem::OAIRankingRankingItem() {
    this->initializeModel();
}

OAIRankingRankingItem::~OAIRankingRankingItem() {}

void OAIRankingRankingItem::initializeModel() {

    m_answer_type_isSet = false;
    m_answer_type_isValid = false;

    m_html_index_isSet = false;
    m_html_index_isValid = false;

    m_result_index_isSet = false;
    m_result_index_isValid = false;

    m_screenshot_index_isSet = false;
    m_screenshot_index_isValid = false;

    m_textual_index_isSet = false;
    m_textual_index_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIRankingRankingItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRankingRankingItem::fromJsonObject(QJsonObject json) {

    m_answer_type_isValid = ::OpenAPI::fromJsonValue(m_answer_type, json[QString("answerType")]);
    m_answer_type_isSet = !json[QString("answerType")].isNull() && m_answer_type_isValid;

    m_html_index_isValid = ::OpenAPI::fromJsonValue(m_html_index, json[QString("htmlIndex")]);
    m_html_index_isSet = !json[QString("htmlIndex")].isNull() && m_html_index_isValid;

    m_result_index_isValid = ::OpenAPI::fromJsonValue(m_result_index, json[QString("resultIndex")]);
    m_result_index_isSet = !json[QString("resultIndex")].isNull() && m_result_index_isValid;

    m_screenshot_index_isValid = ::OpenAPI::fromJsonValue(m_screenshot_index, json[QString("screenshotIndex")]);
    m_screenshot_index_isSet = !json[QString("screenshotIndex")].isNull() && m_screenshot_index_isValid;

    m_textual_index_isValid = ::OpenAPI::fromJsonValue(m_textual_index, json[QString("textualIndex")]);
    m_textual_index_isSet = !json[QString("textualIndex")].isNull() && m_textual_index_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIRankingRankingItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRankingRankingItem::asJsonObject() const {
    QJsonObject obj;
    if (m_answer_type_isSet) {
        obj.insert(QString("answerType"), ::OpenAPI::toJsonValue(m_answer_type));
    }
    if (m_html_index_isSet) {
        obj.insert(QString("htmlIndex"), ::OpenAPI::toJsonValue(m_html_index));
    }
    if (m_result_index_isSet) {
        obj.insert(QString("resultIndex"), ::OpenAPI::toJsonValue(m_result_index));
    }
    if (m_screenshot_index_isSet) {
        obj.insert(QString("screenshotIndex"), ::OpenAPI::toJsonValue(m_screenshot_index));
    }
    if (m_textual_index_isSet) {
        obj.insert(QString("textualIndex"), ::OpenAPI::toJsonValue(m_textual_index));
    }
    if (m_value.isSet()) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIRankingRankingItem::getAnswerType() const {
    return m_answer_type;
}
void OAIRankingRankingItem::setAnswerType(const QString &answer_type) {
    m_answer_type = answer_type;
    m_answer_type_isSet = true;
}

bool OAIRankingRankingItem::is_answer_type_Set() const{
    return m_answer_type_isSet;
}

bool OAIRankingRankingItem::is_answer_type_Valid() const{
    return m_answer_type_isValid;
}

qint32 OAIRankingRankingItem::getHtmlIndex() const {
    return m_html_index;
}
void OAIRankingRankingItem::setHtmlIndex(const qint32 &html_index) {
    m_html_index = html_index;
    m_html_index_isSet = true;
}

bool OAIRankingRankingItem::is_html_index_Set() const{
    return m_html_index_isSet;
}

bool OAIRankingRankingItem::is_html_index_Valid() const{
    return m_html_index_isValid;
}

qint32 OAIRankingRankingItem::getResultIndex() const {
    return m_result_index;
}
void OAIRankingRankingItem::setResultIndex(const qint32 &result_index) {
    m_result_index = result_index;
    m_result_index_isSet = true;
}

bool OAIRankingRankingItem::is_result_index_Set() const{
    return m_result_index_isSet;
}

bool OAIRankingRankingItem::is_result_index_Valid() const{
    return m_result_index_isValid;
}

qint32 OAIRankingRankingItem::getScreenshotIndex() const {
    return m_screenshot_index;
}
void OAIRankingRankingItem::setScreenshotIndex(const qint32 &screenshot_index) {
    m_screenshot_index = screenshot_index;
    m_screenshot_index_isSet = true;
}

bool OAIRankingRankingItem::is_screenshot_index_Set() const{
    return m_screenshot_index_isSet;
}

bool OAIRankingRankingItem::is_screenshot_index_Valid() const{
    return m_screenshot_index_isValid;
}

qint32 OAIRankingRankingItem::getTextualIndex() const {
    return m_textual_index;
}
void OAIRankingRankingItem::setTextualIndex(const qint32 &textual_index) {
    m_textual_index = textual_index;
    m_textual_index_isSet = true;
}

bool OAIRankingRankingItem::is_textual_index_Set() const{
    return m_textual_index_isSet;
}

bool OAIRankingRankingItem::is_textual_index_Valid() const{
    return m_textual_index_isValid;
}

OAIIdentifiable OAIRankingRankingItem::getValue() const {
    return m_value;
}
void OAIRankingRankingItem::setValue(const OAIIdentifiable &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIRankingRankingItem::is_value_Set() const{
    return m_value_isSet;
}

bool OAIRankingRankingItem::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIRankingRankingItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answer_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screenshot_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_textual_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRankingRankingItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_answer_type_isValid && true;
}

} // namespace OpenAPI
