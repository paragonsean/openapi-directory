/**
 * Web Search Client
 * The Web Search API lets you send a search query to Bing and get back search results that include links to webpages, images, and more.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchResponse::OAISearchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchResponse::OAISearchResponse() {
    this->initializeModel();
}

OAISearchResponse::~OAISearchResponse() {}

void OAISearchResponse::initializeModel() {

    m_computation_isSet = false;
    m_computation_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_news_isSet = false;
    m_news_isValid = false;

    m_query_context_isSet = false;
    m_query_context_isValid = false;

    m_ranking_response_isSet = false;
    m_ranking_response_isValid = false;

    m_related_searches_isSet = false;
    m_related_searches_isValid = false;

    m_spell_suggestions_isSet = false;
    m_spell_suggestions_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_videos_isSet = false;
    m_videos_isValid = false;

    m_web_pages_isSet = false;
    m_web_pages_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAISearchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchResponse::fromJsonObject(QJsonObject json) {

    m_computation_isValid = ::OpenAPI::fromJsonValue(m_computation, json[QString("computation")]);
    m_computation_isSet = !json[QString("computation")].isNull() && m_computation_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_news_isValid = ::OpenAPI::fromJsonValue(m_news, json[QString("news")]);
    m_news_isSet = !json[QString("news")].isNull() && m_news_isValid;

    m_query_context_isValid = ::OpenAPI::fromJsonValue(m_query_context, json[QString("queryContext")]);
    m_query_context_isSet = !json[QString("queryContext")].isNull() && m_query_context_isValid;

    m_ranking_response_isValid = ::OpenAPI::fromJsonValue(m_ranking_response, json[QString("rankingResponse")]);
    m_ranking_response_isSet = !json[QString("rankingResponse")].isNull() && m_ranking_response_isValid;

    m_related_searches_isValid = ::OpenAPI::fromJsonValue(m_related_searches, json[QString("relatedSearches")]);
    m_related_searches_isSet = !json[QString("relatedSearches")].isNull() && m_related_searches_isValid;

    m_spell_suggestions_isValid = ::OpenAPI::fromJsonValue(m_spell_suggestions, json[QString("spellSuggestions")]);
    m_spell_suggestions_isSet = !json[QString("spellSuggestions")].isNull() && m_spell_suggestions_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_videos_isValid = ::OpenAPI::fromJsonValue(m_videos, json[QString("videos")]);
    m_videos_isSet = !json[QString("videos")].isNull() && m_videos_isValid;

    m_web_pages_isValid = ::OpenAPI::fromJsonValue(m_web_pages, json[QString("webPages")]);
    m_web_pages_isSet = !json[QString("webPages")].isNull() && m_web_pages_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAISearchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_computation.isSet()) {
        obj.insert(QString("computation"), ::OpenAPI::toJsonValue(m_computation));
    }
    if (m_images.isSet()) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_news.isSet()) {
        obj.insert(QString("news"), ::OpenAPI::toJsonValue(m_news));
    }
    if (m_query_context.isSet()) {
        obj.insert(QString("queryContext"), ::OpenAPI::toJsonValue(m_query_context));
    }
    if (m_ranking_response.isSet()) {
        obj.insert(QString("rankingResponse"), ::OpenAPI::toJsonValue(m_ranking_response));
    }
    if (m_related_searches.isSet()) {
        obj.insert(QString("relatedSearches"), ::OpenAPI::toJsonValue(m_related_searches));
    }
    if (m_spell_suggestions.isSet()) {
        obj.insert(QString("spellSuggestions"), ::OpenAPI::toJsonValue(m_spell_suggestions));
    }
    if (m_time_zone.isSet()) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_videos.isSet()) {
        obj.insert(QString("videos"), ::OpenAPI::toJsonValue(m_videos));
    }
    if (m_web_pages.isSet()) {
        obj.insert(QString("webPages"), ::OpenAPI::toJsonValue(m_web_pages));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

OAIComputation OAISearchResponse::getComputation() const {
    return m_computation;
}
void OAISearchResponse::setComputation(const OAIComputation &computation) {
    m_computation = computation;
    m_computation_isSet = true;
}

bool OAISearchResponse::is_computation_Set() const{
    return m_computation_isSet;
}

bool OAISearchResponse::is_computation_Valid() const{
    return m_computation_isValid;
}

OAIImages OAISearchResponse::getImages() const {
    return m_images;
}
void OAISearchResponse::setImages(const OAIImages &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAISearchResponse::is_images_Set() const{
    return m_images_isSet;
}

bool OAISearchResponse::is_images_Valid() const{
    return m_images_isValid;
}

OAINews OAISearchResponse::getNews() const {
    return m_news;
}
void OAISearchResponse::setNews(const OAINews &news) {
    m_news = news;
    m_news_isSet = true;
}

bool OAISearchResponse::is_news_Set() const{
    return m_news_isSet;
}

bool OAISearchResponse::is_news_Valid() const{
    return m_news_isValid;
}

OAIQueryContext OAISearchResponse::getQueryContext() const {
    return m_query_context;
}
void OAISearchResponse::setQueryContext(const OAIQueryContext &query_context) {
    m_query_context = query_context;
    m_query_context_isSet = true;
}

bool OAISearchResponse::is_query_context_Set() const{
    return m_query_context_isSet;
}

bool OAISearchResponse::is_query_context_Valid() const{
    return m_query_context_isValid;
}

OAIRankingRankingResponse OAISearchResponse::getRankingResponse() const {
    return m_ranking_response;
}
void OAISearchResponse::setRankingResponse(const OAIRankingRankingResponse &ranking_response) {
    m_ranking_response = ranking_response;
    m_ranking_response_isSet = true;
}

bool OAISearchResponse::is_ranking_response_Set() const{
    return m_ranking_response_isSet;
}

bool OAISearchResponse::is_ranking_response_Valid() const{
    return m_ranking_response_isValid;
}

OAIRelatedSearchesRelatedSearchAnswer OAISearchResponse::getRelatedSearches() const {
    return m_related_searches;
}
void OAISearchResponse::setRelatedSearches(const OAIRelatedSearchesRelatedSearchAnswer &related_searches) {
    m_related_searches = related_searches;
    m_related_searches_isSet = true;
}

bool OAISearchResponse::is_related_searches_Set() const{
    return m_related_searches_isSet;
}

bool OAISearchResponse::is_related_searches_Valid() const{
    return m_related_searches_isValid;
}

OAISpellSuggestions OAISearchResponse::getSpellSuggestions() const {
    return m_spell_suggestions;
}
void OAISearchResponse::setSpellSuggestions(const OAISpellSuggestions &spell_suggestions) {
    m_spell_suggestions = spell_suggestions;
    m_spell_suggestions_isSet = true;
}

bool OAISearchResponse::is_spell_suggestions_Set() const{
    return m_spell_suggestions_isSet;
}

bool OAISearchResponse::is_spell_suggestions_Valid() const{
    return m_spell_suggestions_isValid;
}

OAITimeZone OAISearchResponse::getTimeZone() const {
    return m_time_zone;
}
void OAISearchResponse::setTimeZone(const OAITimeZone &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAISearchResponse::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAISearchResponse::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

OAIVideos OAISearchResponse::getVideos() const {
    return m_videos;
}
void OAISearchResponse::setVideos(const OAIVideos &videos) {
    m_videos = videos;
    m_videos_isSet = true;
}

bool OAISearchResponse::is_videos_Set() const{
    return m_videos_isSet;
}

bool OAISearchResponse::is_videos_Valid() const{
    return m_videos_isValid;
}

OAIWebWebAnswer OAISearchResponse::getWebPages() const {
    return m_web_pages;
}
void OAISearchResponse::setWebPages(const OAIWebWebAnswer &web_pages) {
    m_web_pages = web_pages;
    m_web_pages_isSet = true;
}

bool OAISearchResponse::is_web_pages_Set() const{
    return m_web_pages_isSet;
}

bool OAISearchResponse::is_web_pages_Valid() const{
    return m_web_pages_isValid;
}

QString OAISearchResponse::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAISearchResponse::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAISearchResponse::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAISearchResponse::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAISearchResponse::getId() const {
    return m_id;
}
void OAISearchResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISearchResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAISearchResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISearchResponse::getType() const {
    return m__type;
}
void OAISearchResponse::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAISearchResponse::is__type_Set() const{
    return m__type_isSet;
}

bool OAISearchResponse::is__type_Valid() const{
    return m__type_isValid;
}

bool OAISearchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_news.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ranking_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_searches.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spell_suggestions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_videos.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_pages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__type_isValid && true;
}

} // namespace OpenAPI
