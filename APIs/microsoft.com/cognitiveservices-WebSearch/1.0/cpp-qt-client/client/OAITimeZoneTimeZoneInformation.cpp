/**
 * Web Search Client
 * The Web Search API lets you send a search query to Bing and get back search results that include links to webpages, images, and more.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeZoneTimeZoneInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeZoneTimeZoneInformation::OAITimeZoneTimeZoneInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeZoneTimeZoneInformation::OAITimeZoneTimeZoneInformation() {
    this->initializeModel();
}

OAITimeZoneTimeZoneInformation::~OAITimeZoneTimeZoneInformation() {}

void OAITimeZoneTimeZoneInformation::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_utc_offset_isSet = false;
    m_utc_offset_isValid = false;
}

void OAITimeZoneTimeZoneInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeZoneTimeZoneInformation::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_utc_offset_isValid = ::OpenAPI::fromJsonValue(m_utc_offset, json[QString("utcOffset")]);
    m_utc_offset_isSet = !json[QString("utcOffset")].isNull() && m_utc_offset_isValid;
}

QString OAITimeZoneTimeZoneInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeZoneTimeZoneInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_utc_offset_isSet) {
        obj.insert(QString("utcOffset"), ::OpenAPI::toJsonValue(m_utc_offset));
    }
    return obj;
}

QString OAITimeZoneTimeZoneInformation::getLocation() const {
    return m_location;
}
void OAITimeZoneTimeZoneInformation::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAITimeZoneTimeZoneInformation::is_location_Set() const{
    return m_location_isSet;
}

bool OAITimeZoneTimeZoneInformation::is_location_Valid() const{
    return m_location_isValid;
}

QString OAITimeZoneTimeZoneInformation::getTime() const {
    return m_time;
}
void OAITimeZoneTimeZoneInformation::setTime(const QString &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAITimeZoneTimeZoneInformation::is_time_Set() const{
    return m_time_isSet;
}

bool OAITimeZoneTimeZoneInformation::is_time_Valid() const{
    return m_time_isValid;
}

QString OAITimeZoneTimeZoneInformation::getUtcOffset() const {
    return m_utc_offset;
}
void OAITimeZoneTimeZoneInformation::setUtcOffset(const QString &utc_offset) {
    m_utc_offset = utc_offset;
    m_utc_offset_isSet = true;
}

bool OAITimeZoneTimeZoneInformation::is_utc_offset_Set() const{
    return m_utc_offset_isSet;
}

bool OAITimeZoneTimeZoneInformation::is_utc_offset_Valid() const{
    return m_utc_offset_isValid;
}

bool OAITimeZoneTimeZoneInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utc_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeZoneTimeZoneInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_isValid && m_time_isValid && m_utc_offset_isValid && true;
}

} // namespace OpenAPI
