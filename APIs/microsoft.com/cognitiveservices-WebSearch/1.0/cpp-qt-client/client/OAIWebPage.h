/**
 * Web Search Client
 * The Web Search API lets you send a search query to Bing and get back search results that include links to webpages, images, and more.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWebPage.h
 *
 * Defines a webpage that is relevant to the query.
 */

#ifndef OAIWebPage_H
#define OAIWebPage_H

#include <QJsonObject>

#include "OAICreativeWork.h"
#include "OAIImageObject.h"
#include "OAIThing.h"
#include "OAIWebMetaTag.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImageObject;
class OAIWebMetaTag;
class OAIThing;

class OAIWebPage : public OAIObject {
public:
    OAIWebPage();
    OAIWebPage(QString json);
    ~OAIWebPage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDateLastCrawled() const;
    void setDateLastCrawled(const QString &date_last_crawled);
    bool is_date_last_crawled_Set() const;
    bool is_date_last_crawled_Valid() const;

    QList<OAIWebPage> getDeepLinks() const;
    void setDeepLinks(const QList<OAIWebPage> &deep_links);
    bool is_deep_links_Set() const;
    bool is_deep_links_Valid() const;

    QString getDisplayUrl() const;
    void setDisplayUrl(const QString &display_url);
    bool is_display_url_Set() const;
    bool is_display_url_Valid() const;

    OAIImageObject getPrimaryImageOfPage() const;
    void setPrimaryImageOfPage(const OAIImageObject &primary_image_of_page);
    bool is_primary_image_of_page_Set() const;
    bool is_primary_image_of_page_Valid() const;

    QList<OAIWebMetaTag> getSearchTags() const;
    void setSearchTags(const QList<OAIWebMetaTag> &search_tags);
    bool is_search_tags_Set() const;
    bool is_search_tags_Valid() const;

    QString getSnippet() const;
    void setSnippet(const QString &snippet);
    bool is_snippet_Set() const;
    bool is_snippet_Valid() const;

    QList<OAIThing> getProvider() const;
    void setProvider(const QList<OAIThing> &provider);
    bool is_provider_Set() const;
    bool is_provider_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    QString getThumbnailUrl() const;
    void setThumbnailUrl(const QString &thumbnail_url);
    bool is_thumbnail_url_Set() const;
    bool is_thumbnail_url_Valid() const;

    QString getBingId() const;
    void setBingId(const QString &bing_id);
    bool is_bing_id_Set() const;
    bool is_bing_id_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIImageObject getImage() const;
    void setImage(const OAIImageObject &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getWebSearchUrl() const;
    void setWebSearchUrl(const QString &web_search_url);
    bool is_web_search_url_Set() const;
    bool is_web_search_url_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getType() const;
    void setType(const QString &_type);
    bool is__type_Set() const;
    bool is__type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_date_last_crawled;
    bool m_date_last_crawled_isSet;
    bool m_date_last_crawled_isValid;

    QList<OAIWebPage> m_deep_links;
    bool m_deep_links_isSet;
    bool m_deep_links_isValid;

    QString m_display_url;
    bool m_display_url_isSet;
    bool m_display_url_isValid;

    OAIImageObject m_primary_image_of_page;
    bool m_primary_image_of_page_isSet;
    bool m_primary_image_of_page_isValid;

    QList<OAIWebMetaTag> m_search_tags;
    bool m_search_tags_isSet;
    bool m_search_tags_isValid;

    QString m_snippet;
    bool m_snippet_isSet;
    bool m_snippet_isValid;

    QList<OAIThing> m_provider;
    bool m_provider_isSet;
    bool m_provider_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;

    QString m_thumbnail_url;
    bool m_thumbnail_url_isSet;
    bool m_thumbnail_url_isValid;

    QString m_bing_id;
    bool m_bing_id_isSet;
    bool m_bing_id_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIImageObject m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_web_search_url;
    bool m_web_search_url_isSet;
    bool m_web_search_url_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m__type;
    bool m__type_isSet;
    bool m__type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWebPage)

#endif // OAIWebPage_H
