/**
 * Web Search Client
 * The Web Search API lets you send a search query to Bing and get back search results that include links to webpages, images, and more.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComputation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComputation::OAIComputation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComputation::OAIComputation() {
    this->initializeModel();
}

OAIComputation::~OAIComputation() {}

void OAIComputation::initializeModel() {

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_follow_up_queries_isSet = false;
    m_follow_up_queries_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAIComputation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComputation::fromJsonObject(QJsonObject json) {

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_follow_up_queries_isValid = ::OpenAPI::fromJsonValue(m_follow_up_queries, json[QString("followUpQueries")]);
    m_follow_up_queries_isSet = !json[QString("followUpQueries")].isNull() && m_follow_up_queries_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAIComputation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComputation::asJsonObject() const {
    QJsonObject obj;
    if (m_expression_isSet) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_follow_up_queries.size() > 0) {
        obj.insert(QString("followUpQueries"), ::OpenAPI::toJsonValue(m_follow_up_queries));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

QString OAIComputation::getExpression() const {
    return m_expression;
}
void OAIComputation::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIComputation::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIComputation::is_expression_Valid() const{
    return m_expression_isValid;
}

QString OAIComputation::getValue() const {
    return m_value;
}
void OAIComputation::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIComputation::is_value_Set() const{
    return m_value_isSet;
}

bool OAIComputation::is_value_Valid() const{
    return m_value_isValid;
}

QList<OAIQuery> OAIComputation::getFollowUpQueries() const {
    return m_follow_up_queries;
}
void OAIComputation::setFollowUpQueries(const QList<OAIQuery> &follow_up_queries) {
    m_follow_up_queries = follow_up_queries;
    m_follow_up_queries_isSet = true;
}

bool OAIComputation::is_follow_up_queries_Set() const{
    return m_follow_up_queries_isSet;
}

bool OAIComputation::is_follow_up_queries_Valid() const{
    return m_follow_up_queries_isValid;
}

QString OAIComputation::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAIComputation::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAIComputation::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAIComputation::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAIComputation::getId() const {
    return m_id;
}
void OAIComputation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIComputation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIComputation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIComputation::getType() const {
    return m__type;
}
void OAIComputation::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIComputation::is__type_Set() const{
    return m__type_isSet;
}

bool OAIComputation::is__type_Valid() const{
    return m__type_isValid;
}

bool OAIComputation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_follow_up_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComputation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expression_isValid && m_value_isValid && m__type_isValid && true;
}

} // namespace OpenAPI
