/**
 * Web Search Client
 * The Web Search API lets you send a search query to Bing and get back search results that include links to webpages, images, and more.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeZone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeZone::OAITimeZone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeZone::OAITimeZone() {
    this->initializeModel();
}

OAITimeZone::~OAITimeZone() {}

void OAITimeZone::initializeModel() {

    m_other_city_times_isSet = false;
    m_other_city_times_isValid = false;

    m_primary_city_time_isSet = false;
    m_primary_city_time_isValid = false;

    m_is_family_friendly_isSet = false;
    m_is_family_friendly_isValid = false;

    m_query_context_isSet = false;
    m_query_context_isValid = false;

    m_total_estimated_matches_isSet = false;
    m_total_estimated_matches_isValid = false;

    m_follow_up_queries_isSet = false;
    m_follow_up_queries_isValid = false;

    m_web_search_url_isSet = false;
    m_web_search_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m__type_isSet = false;
    m__type_isValid = false;
}

void OAITimeZone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeZone::fromJsonObject(QJsonObject json) {

    m_other_city_times_isValid = ::OpenAPI::fromJsonValue(m_other_city_times, json[QString("otherCityTimes")]);
    m_other_city_times_isSet = !json[QString("otherCityTimes")].isNull() && m_other_city_times_isValid;

    m_primary_city_time_isValid = ::OpenAPI::fromJsonValue(m_primary_city_time, json[QString("primaryCityTime")]);
    m_primary_city_time_isSet = !json[QString("primaryCityTime")].isNull() && m_primary_city_time_isValid;

    m_is_family_friendly_isValid = ::OpenAPI::fromJsonValue(m_is_family_friendly, json[QString("isFamilyFriendly")]);
    m_is_family_friendly_isSet = !json[QString("isFamilyFriendly")].isNull() && m_is_family_friendly_isValid;

    m_query_context_isValid = ::OpenAPI::fromJsonValue(m_query_context, json[QString("queryContext")]);
    m_query_context_isSet = !json[QString("queryContext")].isNull() && m_query_context_isValid;

    m_total_estimated_matches_isValid = ::OpenAPI::fromJsonValue(m_total_estimated_matches, json[QString("totalEstimatedMatches")]);
    m_total_estimated_matches_isSet = !json[QString("totalEstimatedMatches")].isNull() && m_total_estimated_matches_isValid;

    m_follow_up_queries_isValid = ::OpenAPI::fromJsonValue(m_follow_up_queries, json[QString("followUpQueries")]);
    m_follow_up_queries_isSet = !json[QString("followUpQueries")].isNull() && m_follow_up_queries_isValid;

    m_web_search_url_isValid = ::OpenAPI::fromJsonValue(m_web_search_url, json[QString("webSearchUrl")]);
    m_web_search_url_isSet = !json[QString("webSearchUrl")].isNull() && m_web_search_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;
}

QString OAITimeZone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeZone::asJsonObject() const {
    QJsonObject obj;
    if (m_other_city_times.size() > 0) {
        obj.insert(QString("otherCityTimes"), ::OpenAPI::toJsonValue(m_other_city_times));
    }
    if (m_primary_city_time.isSet()) {
        obj.insert(QString("primaryCityTime"), ::OpenAPI::toJsonValue(m_primary_city_time));
    }
    if (m_is_family_friendly_isSet) {
        obj.insert(QString("isFamilyFriendly"), ::OpenAPI::toJsonValue(m_is_family_friendly));
    }
    if (m_query_context.isSet()) {
        obj.insert(QString("queryContext"), ::OpenAPI::toJsonValue(m_query_context));
    }
    if (m_total_estimated_matches_isSet) {
        obj.insert(QString("totalEstimatedMatches"), ::OpenAPI::toJsonValue(m_total_estimated_matches));
    }
    if (m_follow_up_queries.size() > 0) {
        obj.insert(QString("followUpQueries"), ::OpenAPI::toJsonValue(m_follow_up_queries));
    }
    if (m_web_search_url_isSet) {
        obj.insert(QString("webSearchUrl"), ::OpenAPI::toJsonValue(m_web_search_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    return obj;
}

QList<OAITimeZoneTimeZoneInformation> OAITimeZone::getOtherCityTimes() const {
    return m_other_city_times;
}
void OAITimeZone::setOtherCityTimes(const QList<OAITimeZoneTimeZoneInformation> &other_city_times) {
    m_other_city_times = other_city_times;
    m_other_city_times_isSet = true;
}

bool OAITimeZone::is_other_city_times_Set() const{
    return m_other_city_times_isSet;
}

bool OAITimeZone::is_other_city_times_Valid() const{
    return m_other_city_times_isValid;
}

OAITimeZoneTimeZoneInformation OAITimeZone::getPrimaryCityTime() const {
    return m_primary_city_time;
}
void OAITimeZone::setPrimaryCityTime(const OAITimeZoneTimeZoneInformation &primary_city_time) {
    m_primary_city_time = primary_city_time;
    m_primary_city_time_isSet = true;
}

bool OAITimeZone::is_primary_city_time_Set() const{
    return m_primary_city_time_isSet;
}

bool OAITimeZone::is_primary_city_time_Valid() const{
    return m_primary_city_time_isValid;
}

bool OAITimeZone::isIsFamilyFriendly() const {
    return m_is_family_friendly;
}
void OAITimeZone::setIsFamilyFriendly(const bool &is_family_friendly) {
    m_is_family_friendly = is_family_friendly;
    m_is_family_friendly_isSet = true;
}

bool OAITimeZone::is_is_family_friendly_Set() const{
    return m_is_family_friendly_isSet;
}

bool OAITimeZone::is_is_family_friendly_Valid() const{
    return m_is_family_friendly_isValid;
}

OAIQueryContext OAITimeZone::getQueryContext() const {
    return m_query_context;
}
void OAITimeZone::setQueryContext(const OAIQueryContext &query_context) {
    m_query_context = query_context;
    m_query_context_isSet = true;
}

bool OAITimeZone::is_query_context_Set() const{
    return m_query_context_isSet;
}

bool OAITimeZone::is_query_context_Valid() const{
    return m_query_context_isValid;
}

qint64 OAITimeZone::getTotalEstimatedMatches() const {
    return m_total_estimated_matches;
}
void OAITimeZone::setTotalEstimatedMatches(const qint64 &total_estimated_matches) {
    m_total_estimated_matches = total_estimated_matches;
    m_total_estimated_matches_isSet = true;
}

bool OAITimeZone::is_total_estimated_matches_Set() const{
    return m_total_estimated_matches_isSet;
}

bool OAITimeZone::is_total_estimated_matches_Valid() const{
    return m_total_estimated_matches_isValid;
}

QList<OAIQuery> OAITimeZone::getFollowUpQueries() const {
    return m_follow_up_queries;
}
void OAITimeZone::setFollowUpQueries(const QList<OAIQuery> &follow_up_queries) {
    m_follow_up_queries = follow_up_queries;
    m_follow_up_queries_isSet = true;
}

bool OAITimeZone::is_follow_up_queries_Set() const{
    return m_follow_up_queries_isSet;
}

bool OAITimeZone::is_follow_up_queries_Valid() const{
    return m_follow_up_queries_isValid;
}

QString OAITimeZone::getWebSearchUrl() const {
    return m_web_search_url;
}
void OAITimeZone::setWebSearchUrl(const QString &web_search_url) {
    m_web_search_url = web_search_url;
    m_web_search_url_isSet = true;
}

bool OAITimeZone::is_web_search_url_Set() const{
    return m_web_search_url_isSet;
}

bool OAITimeZone::is_web_search_url_Valid() const{
    return m_web_search_url_isValid;
}

QString OAITimeZone::getId() const {
    return m_id;
}
void OAITimeZone::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITimeZone::is_id_Set() const{
    return m_id_isSet;
}

bool OAITimeZone::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITimeZone::getType() const {
    return m__type;
}
void OAITimeZone::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAITimeZone::is__type_Set() const{
    return m__type_isSet;
}

bool OAITimeZone::is__type_Valid() const{
    return m__type_isValid;
}

bool OAITimeZone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_other_city_times.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_city_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_family_friendly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_estimated_matches_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_follow_up_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeZone::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_primary_city_time_isValid && m__type_isValid && true;
}

} // namespace OpenAPI
