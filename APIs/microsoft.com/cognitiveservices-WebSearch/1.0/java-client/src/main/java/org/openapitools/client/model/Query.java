/*
 * Web Search Client
 * The Web Search API lets you send a search query to Bing and get back search results that include links to webpages, images, and more.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ImageObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a search query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:34.600618-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Query {
  public static final String SERIALIZED_NAME_DISPLAY_TEXT = "displayText";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TEXT)
  private String displayText;

  public static final String SERIALIZED_NAME_SEARCH_LINK = "searchLink";
  @SerializedName(SERIALIZED_NAME_SEARCH_LINK)
  private String searchLink;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_THUMBNAIL = "thumbnail";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL)
  private ImageObject thumbnail;

  public static final String SERIALIZED_NAME_WEB_SEARCH_URL = "webSearchUrl";
  @SerializedName(SERIALIZED_NAME_WEB_SEARCH_URL)
  private String webSearchUrl;

  public Query() {
  }

  public Query(
     String displayText, 
     String searchLink, 
     String webSearchUrl
  ) {
    this();
    this.displayText = displayText;
    this.searchLink = searchLink;
    this.webSearchUrl = webSearchUrl;
  }

  /**
   * The display version of the query term. This version of the query term may contain special characters that highlight the search term found in the query string. The string contains the highlighting characters only if the query enabled hit highlighting
   * @return displayText
   */
  @javax.annotation.Nullable
  public String getDisplayText() {
    return displayText;
  }



  /**
   * Get searchLink
   * @return searchLink
   */
  @javax.annotation.Nullable
  public String getSearchLink() {
    return searchLink;
  }



  public Query text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The query string. Use this string as the query term in a new search request.
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public Query thumbnail(ImageObject thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

  /**
   * Get thumbnail
   * @return thumbnail
   */
  @javax.annotation.Nullable
  public ImageObject getThumbnail() {
    return thumbnail;
  }

  public void setThumbnail(ImageObject thumbnail) {
    this.thumbnail = thumbnail;
  }


  /**
   * The URL that takes the user to the Bing search results page for the query.Only related search results include this field.
   * @return webSearchUrl
   */
  @javax.annotation.Nullable
  public String getWebSearchUrl() {
    return webSearchUrl;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Query query = (Query) o;
    return Objects.equals(this.displayText, query.displayText) &&
        Objects.equals(this.searchLink, query.searchLink) &&
        Objects.equals(this.text, query.text) &&
        Objects.equals(this.thumbnail, query.thumbnail) &&
        Objects.equals(this.webSearchUrl, query.webSearchUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayText, searchLink, text, thumbnail, webSearchUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Query {\n");
    sb.append("    displayText: ").append(toIndentedString(displayText)).append("\n");
    sb.append("    searchLink: ").append(toIndentedString(searchLink)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("    webSearchUrl: ").append(toIndentedString(webSearchUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayText");
    openapiFields.add("searchLink");
    openapiFields.add("text");
    openapiFields.add("thumbnail");
    openapiFields.add("webSearchUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("text");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Query
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Query.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Query is not found in the empty JSON string", Query.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Query.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Query` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Query.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayText") != null && !jsonObj.get("displayText").isJsonNull()) && !jsonObj.get("displayText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayText").toString()));
      }
      if ((jsonObj.get("searchLink") != null && !jsonObj.get("searchLink").isJsonNull()) && !jsonObj.get("searchLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchLink").toString()));
      }
      if (!jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      // validate the optional field `thumbnail`
      if (jsonObj.get("thumbnail") != null && !jsonObj.get("thumbnail").isJsonNull()) {
        ImageObject.validateJsonElement(jsonObj.get("thumbnail"));
      }
      if ((jsonObj.get("webSearchUrl") != null && !jsonObj.get("webSearchUrl").isJsonNull()) && !jsonObj.get("webSearchUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webSearchUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webSearchUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Query.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Query' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Query> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Query.class));

       return (TypeAdapter<T>) new TypeAdapter<Query>() {
           @Override
           public void write(JsonWriter out, Query value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Query read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Query given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Query
   * @throws IOException if the JSON string is invalid with respect to Query
   */
  public static Query fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Query.class);
  }

  /**
   * Convert an instance of Query to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

