/*
 * Web Search Client
 * The Web Search API lets you send a search query to Bing and get back search results that include links to webpages, images, and more.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Identifiable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a search result item to display
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:34.600618-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RankingRankingItem {
  /**
   * The answer that contains the item to display. Use the type to find the answer in the SearchResponse object. The type is the name of a SearchResponse field.
   */
  @JsonAdapter(AnswerTypeEnum.Adapter.class)
  public enum AnswerTypeEnum {
    WEB_PAGES("WebPages"),
    
    IMAGES("Images"),
    
    SPELL_SUGGESTIONS("SpellSuggestions"),
    
    NEWS("News"),
    
    RELATED_SEARCHES("RelatedSearches"),
    
    VIDEOS("Videos"),
    
    COMPUTATION("Computation"),
    
    TIME_ZONE("TimeZone");

    private String value;

    AnswerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnswerTypeEnum fromValue(String value) {
      for (AnswerTypeEnum b : AnswerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnswerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnswerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnswerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnswerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnswerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANSWER_TYPE = "answerType";
  @SerializedName(SERIALIZED_NAME_ANSWER_TYPE)
  private AnswerTypeEnum answerType = AnswerTypeEnum.WEB_PAGES;

  public static final String SERIALIZED_NAME_HTML_INDEX = "htmlIndex";
  @SerializedName(SERIALIZED_NAME_HTML_INDEX)
  private Integer htmlIndex;

  public static final String SERIALIZED_NAME_RESULT_INDEX = "resultIndex";
  @SerializedName(SERIALIZED_NAME_RESULT_INDEX)
  private Integer resultIndex;

  public static final String SERIALIZED_NAME_SCREENSHOT_INDEX = "screenshotIndex";
  @SerializedName(SERIALIZED_NAME_SCREENSHOT_INDEX)
  private Integer screenshotIndex;

  public static final String SERIALIZED_NAME_TEXTUAL_INDEX = "textualIndex";
  @SerializedName(SERIALIZED_NAME_TEXTUAL_INDEX)
  private Integer textualIndex;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Identifiable value;

  public RankingRankingItem() {
  }

  public RankingRankingItem(
     Integer htmlIndex, 
     Integer resultIndex, 
     Integer screenshotIndex, 
     Integer textualIndex
  ) {
    this();
    this.htmlIndex = htmlIndex;
    this.resultIndex = resultIndex;
    this.screenshotIndex = screenshotIndex;
    this.textualIndex = textualIndex;
  }

  public RankingRankingItem answerType(AnswerTypeEnum answerType) {
    this.answerType = answerType;
    return this;
  }

  /**
   * The answer that contains the item to display. Use the type to find the answer in the SearchResponse object. The type is the name of a SearchResponse field.
   * @return answerType
   */
  @javax.annotation.Nonnull
  public AnswerTypeEnum getAnswerType() {
    return answerType;
  }

  public void setAnswerType(AnswerTypeEnum answerType) {
    this.answerType = answerType;
  }


  /**
   * Get htmlIndex
   * @return htmlIndex
   */
  @javax.annotation.Nullable
  public Integer getHtmlIndex() {
    return htmlIndex;
  }



  /**
   * A zero-based index of the item in the answer.If the item does not include this field, display all items in the answer. For example, display all news articles in the News answer.
   * @return resultIndex
   */
  @javax.annotation.Nullable
  public Integer getResultIndex() {
    return resultIndex;
  }



  /**
   * Get screenshotIndex
   * @return screenshotIndex
   */
  @javax.annotation.Nullable
  public Integer getScreenshotIndex() {
    return screenshotIndex;
  }



  /**
   * Get textualIndex
   * @return textualIndex
   */
  @javax.annotation.Nullable
  public Integer getTextualIndex() {
    return textualIndex;
  }



  public RankingRankingItem value(Identifiable value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public Identifiable getValue() {
    return value;
  }

  public void setValue(Identifiable value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RankingRankingItem rankingRankingItem = (RankingRankingItem) o;
    return Objects.equals(this.answerType, rankingRankingItem.answerType) &&
        Objects.equals(this.htmlIndex, rankingRankingItem.htmlIndex) &&
        Objects.equals(this.resultIndex, rankingRankingItem.resultIndex) &&
        Objects.equals(this.screenshotIndex, rankingRankingItem.screenshotIndex) &&
        Objects.equals(this.textualIndex, rankingRankingItem.textualIndex) &&
        Objects.equals(this.value, rankingRankingItem.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answerType, htmlIndex, resultIndex, screenshotIndex, textualIndex, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RankingRankingItem {\n");
    sb.append("    answerType: ").append(toIndentedString(answerType)).append("\n");
    sb.append("    htmlIndex: ").append(toIndentedString(htmlIndex)).append("\n");
    sb.append("    resultIndex: ").append(toIndentedString(resultIndex)).append("\n");
    sb.append("    screenshotIndex: ").append(toIndentedString(screenshotIndex)).append("\n");
    sb.append("    textualIndex: ").append(toIndentedString(textualIndex)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answerType");
    openapiFields.add("htmlIndex");
    openapiFields.add("resultIndex");
    openapiFields.add("screenshotIndex");
    openapiFields.add("textualIndex");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("answerType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RankingRankingItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RankingRankingItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RankingRankingItem is not found in the empty JSON string", RankingRankingItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RankingRankingItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RankingRankingItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RankingRankingItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("answerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `answerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("answerType").toString()));
      }
      // validate the required field `answerType`
      AnswerTypeEnum.validateJsonElement(jsonObj.get("answerType"));
      // validate the optional field `value`
      if (jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) {
        Identifiable.validateJsonElement(jsonObj.get("value"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RankingRankingItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RankingRankingItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RankingRankingItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RankingRankingItem.class));

       return (TypeAdapter<T>) new TypeAdapter<RankingRankingItem>() {
           @Override
           public void write(JsonWriter out, RankingRankingItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RankingRankingItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RankingRankingItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RankingRankingItem
   * @throws IOException if the JSON string is invalid with respect to RankingRankingItem
   */
  public static RankingRankingItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RankingRankingItem.class);
  }

  /**
   * Convert an instance of RankingRankingItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

