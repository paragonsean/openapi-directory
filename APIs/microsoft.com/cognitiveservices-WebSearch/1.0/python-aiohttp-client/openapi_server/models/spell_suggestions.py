# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query import Query
from openapi_server.models.query_context import QueryContext
from openapi_server.models.search_results_answer import SearchResultsAnswer
from openapi_server import util


class SpellSuggestions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, value: List[Query]=None, is_family_friendly: bool=None, query_context: QueryContext=None, total_estimated_matches: int=None, follow_up_queries: List[Query]=None, web_search_url: str=None, id: str=None, type: str=None):
        """SpellSuggestions - a model defined in OpenAPI

        :param value: The value of this SpellSuggestions.
        :param is_family_friendly: The is_family_friendly of this SpellSuggestions.
        :param query_context: The query_context of this SpellSuggestions.
        :param total_estimated_matches: The total_estimated_matches of this SpellSuggestions.
        :param follow_up_queries: The follow_up_queries of this SpellSuggestions.
        :param web_search_url: The web_search_url of this SpellSuggestions.
        :param id: The id of this SpellSuggestions.
        :param type: The type of this SpellSuggestions.
        """
        self.openapi_types = {
            'value': List[Query],
            'is_family_friendly': bool,
            'query_context': QueryContext,
            'total_estimated_matches': int,
            'follow_up_queries': List[Query],
            'web_search_url': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'value': 'value',
            'is_family_friendly': 'isFamilyFriendly',
            'query_context': 'queryContext',
            'total_estimated_matches': 'totalEstimatedMatches',
            'follow_up_queries': 'followUpQueries',
            'web_search_url': 'webSearchUrl',
            'id': 'id',
            'type': '_type'
        }

        self._value = value
        self._is_family_friendly = is_family_friendly
        self._query_context = query_context
        self._total_estimated_matches = total_estimated_matches
        self._follow_up_queries = follow_up_queries
        self._web_search_url = web_search_url
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpellSuggestions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpellSuggestions of this SpellSuggestions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self):
        """Gets the value of this SpellSuggestions.

        A list of suggested query strings that may represent the user's intention. The list contains only one Query object.

        :return: The value of this SpellSuggestions.
        :rtype: List[Query]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SpellSuggestions.

        A list of suggested query strings that may represent the user's intention. The list contains only one Query object.

        :param value: The value of this SpellSuggestions.
        :type value: List[Query]
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def is_family_friendly(self):
        """Gets the is_family_friendly of this SpellSuggestions.


        :return: The is_family_friendly of this SpellSuggestions.
        :rtype: bool
        """
        return self._is_family_friendly

    @is_family_friendly.setter
    def is_family_friendly(self, is_family_friendly):
        """Sets the is_family_friendly of this SpellSuggestions.


        :param is_family_friendly: The is_family_friendly of this SpellSuggestions.
        :type is_family_friendly: bool
        """

        self._is_family_friendly = is_family_friendly

    @property
    def query_context(self):
        """Gets the query_context of this SpellSuggestions.


        :return: The query_context of this SpellSuggestions.
        :rtype: QueryContext
        """
        return self._query_context

    @query_context.setter
    def query_context(self, query_context):
        """Sets the query_context of this SpellSuggestions.


        :param query_context: The query_context of this SpellSuggestions.
        :type query_context: QueryContext
        """

        self._query_context = query_context

    @property
    def total_estimated_matches(self):
        """Gets the total_estimated_matches of this SpellSuggestions.

        The estimated number of webpages that are relevant to the query. Use this number along with the count and offset query parameters to page the results.

        :return: The total_estimated_matches of this SpellSuggestions.
        :rtype: int
        """
        return self._total_estimated_matches

    @total_estimated_matches.setter
    def total_estimated_matches(self, total_estimated_matches):
        """Sets the total_estimated_matches of this SpellSuggestions.

        The estimated number of webpages that are relevant to the query. Use this number along with the count and offset query parameters to page the results.

        :param total_estimated_matches: The total_estimated_matches of this SpellSuggestions.
        :type total_estimated_matches: int
        """

        self._total_estimated_matches = total_estimated_matches

    @property
    def follow_up_queries(self):
        """Gets the follow_up_queries of this SpellSuggestions.


        :return: The follow_up_queries of this SpellSuggestions.
        :rtype: List[Query]
        """
        return self._follow_up_queries

    @follow_up_queries.setter
    def follow_up_queries(self, follow_up_queries):
        """Sets the follow_up_queries of this SpellSuggestions.


        :param follow_up_queries: The follow_up_queries of this SpellSuggestions.
        :type follow_up_queries: List[Query]
        """

        self._follow_up_queries = follow_up_queries

    @property
    def web_search_url(self):
        """Gets the web_search_url of this SpellSuggestions.

        The URL To Bing's search result for this item.

        :return: The web_search_url of this SpellSuggestions.
        :rtype: str
        """
        return self._web_search_url

    @web_search_url.setter
    def web_search_url(self, web_search_url):
        """Sets the web_search_url of this SpellSuggestions.

        The URL To Bing's search result for this item.

        :param web_search_url: The web_search_url of this SpellSuggestions.
        :type web_search_url: str
        """

        self._web_search_url = web_search_url

    @property
    def id(self):
        """Gets the id of this SpellSuggestions.

        A String identifier.

        :return: The id of this SpellSuggestions.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SpellSuggestions.

        A String identifier.

        :param id: The id of this SpellSuggestions.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this SpellSuggestions.


        :return: The type of this SpellSuggestions.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SpellSuggestions.


        :param type: The type of this SpellSuggestions.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
