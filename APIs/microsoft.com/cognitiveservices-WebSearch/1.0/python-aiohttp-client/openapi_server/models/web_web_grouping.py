# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.web_page import WebPage
from openapi_server import util


class WebWebGrouping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, web_pages: List[WebPage]=None):
        """WebWebGrouping - a model defined in OpenAPI

        :param type: The type of this WebWebGrouping.
        :param web_pages: The web_pages of this WebWebGrouping.
        """
        self.openapi_types = {
            'type': str,
            'web_pages': List[WebPage]
        }

        self.attribute_map = {
            'type': '_type',
            'web_pages': 'webPages'
        }

        self._type = type
        self._web_pages = web_pages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebWebGrouping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebWebGrouping of this WebWebGrouping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this WebWebGrouping.


        :return: The type of this WebWebGrouping.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WebWebGrouping.


        :param type: The type of this WebWebGrouping.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def web_pages(self):
        """Gets the web_pages of this WebWebGrouping.


        :return: The web_pages of this WebWebGrouping.
        :rtype: List[WebPage]
        """
        return self._web_pages

    @web_pages.setter
    def web_pages(self, web_pages):
        """Sets the web_pages of this WebWebGrouping.


        :param web_pages: The web_pages of this WebWebGrouping.
        :type web_pages: List[WebPage]
        """
        if web_pages is None:
            raise ValueError("Invalid value for `web_pages`, must not be `None`")

        self._web_pages = web_pages
