# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.answer import Answer
from openapi_server.models.query import Query
from openapi_server import util


class Computation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expression: str=None, value: str=None, follow_up_queries: List[Query]=None, web_search_url: str=None, id: str=None, type: str=None):
        """Computation - a model defined in OpenAPI

        :param expression: The expression of this Computation.
        :param value: The value of this Computation.
        :param follow_up_queries: The follow_up_queries of this Computation.
        :param web_search_url: The web_search_url of this Computation.
        :param id: The id of this Computation.
        :param type: The type of this Computation.
        """
        self.openapi_types = {
            'expression': str,
            'value': str,
            'follow_up_queries': List[Query],
            'web_search_url': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'expression': 'expression',
            'value': 'value',
            'follow_up_queries': 'followUpQueries',
            'web_search_url': 'webSearchUrl',
            'id': 'id',
            'type': '_type'
        }

        self._expression = expression
        self._value = value
        self._follow_up_queries = follow_up_queries
        self._web_search_url = web_search_url
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Computation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Computation of this Computation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expression(self):
        """Gets the expression of this Computation.

        The math or conversion expression. If the query contains a request to convert units of measure (for example, meters to feet), this field contains the from units and value contains the to units. If the query contains a mathematical expression such as 2+2, this field contains the expression and value contains the answer. Note that mathematical expressions may be normalized. For example, if the query was sqrt(4^2+8^2), the normalized expression may be sqrt((4^2)+(8^2)). If the user's query is a math question and the textDecorations query parameter is set to true, the expression string may include formatting markers. For example, if the user's query is log(2), the normalized expression includes the subscript markers. For more information, see Hit Highlighting.

        :return: The expression of this Computation.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this Computation.

        The math or conversion expression. If the query contains a request to convert units of measure (for example, meters to feet), this field contains the from units and value contains the to units. If the query contains a mathematical expression such as 2+2, this field contains the expression and value contains the answer. Note that mathematical expressions may be normalized. For example, if the query was sqrt(4^2+8^2), the normalized expression may be sqrt((4^2)+(8^2)). If the user's query is a math question and the textDecorations query parameter is set to true, the expression string may include formatting markers. For example, if the user's query is log(2), the normalized expression includes the subscript markers. For more information, see Hit Highlighting.

        :param expression: The expression of this Computation.
        :type expression: str
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")

        self._expression = expression

    @property
    def value(self):
        """Gets the value of this Computation.

        The expression's answer.

        :return: The value of this Computation.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Computation.

        The expression's answer.

        :param value: The value of this Computation.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def follow_up_queries(self):
        """Gets the follow_up_queries of this Computation.


        :return: The follow_up_queries of this Computation.
        :rtype: List[Query]
        """
        return self._follow_up_queries

    @follow_up_queries.setter
    def follow_up_queries(self, follow_up_queries):
        """Sets the follow_up_queries of this Computation.


        :param follow_up_queries: The follow_up_queries of this Computation.
        :type follow_up_queries: List[Query]
        """

        self._follow_up_queries = follow_up_queries

    @property
    def web_search_url(self):
        """Gets the web_search_url of this Computation.

        The URL To Bing's search result for this item.

        :return: The web_search_url of this Computation.
        :rtype: str
        """
        return self._web_search_url

    @web_search_url.setter
    def web_search_url(self, web_search_url):
        """Sets the web_search_url of this Computation.

        The URL To Bing's search result for this item.

        :param web_search_url: The web_search_url of this Computation.
        :type web_search_url: str
        """

        self._web_search_url = web_search_url

    @property
    def id(self):
        """Gets the id of this Computation.

        A String identifier.

        :return: The id of this Computation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Computation.

        A String identifier.

        :param id: The id of this Computation.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Computation.


        :return: The type of this Computation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Computation.


        :param type: The type of this Computation.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
