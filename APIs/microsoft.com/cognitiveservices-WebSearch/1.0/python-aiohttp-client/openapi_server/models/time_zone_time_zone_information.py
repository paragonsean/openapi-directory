# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimeZoneTimeZoneInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: str=None, time: str=None, utc_offset: str=None):
        """TimeZoneTimeZoneInformation - a model defined in OpenAPI

        :param location: The location of this TimeZoneTimeZoneInformation.
        :param time: The time of this TimeZoneTimeZoneInformation.
        :param utc_offset: The utc_offset of this TimeZoneTimeZoneInformation.
        """
        self.openapi_types = {
            'location': str,
            'time': str,
            'utc_offset': str
        }

        self.attribute_map = {
            'location': 'location',
            'time': 'time',
            'utc_offset': 'utcOffset'
        }

        self._location = location
        self._time = time
        self._utc_offset = utc_offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeZoneTimeZoneInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeZoneTimeZoneInformation of this TimeZoneTimeZoneInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this TimeZoneTimeZoneInformation.

        The name of the geographical location.For example, County; City; City, State; City, State, Country; or Time Zone.

        :return: The location of this TimeZoneTimeZoneInformation.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this TimeZoneTimeZoneInformation.

        The name of the geographical location.For example, County; City; City, State; City, State, Country; or Time Zone.

        :param location: The location of this TimeZoneTimeZoneInformation.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def time(self):
        """Gets the time of this TimeZoneTimeZoneInformation.

        The data and time specified in the form, YYYY-MM-DDThh;mm:ss.ssssssZ.

        :return: The time of this TimeZoneTimeZoneInformation.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this TimeZoneTimeZoneInformation.

        The data and time specified in the form, YYYY-MM-DDThh;mm:ss.ssssssZ.

        :param time: The time of this TimeZoneTimeZoneInformation.
        :type time: str
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time

    @property
    def utc_offset(self):
        """Gets the utc_offset of this TimeZoneTimeZoneInformation.

        The offset from UTC. For example, UTC-7.

        :return: The utc_offset of this TimeZoneTimeZoneInformation.
        :rtype: str
        """
        return self._utc_offset

    @utc_offset.setter
    def utc_offset(self, utc_offset):
        """Sets the utc_offset of this TimeZoneTimeZoneInformation.

        The offset from UTC. For example, UTC-7.

        :param utc_offset: The utc_offset of this TimeZoneTimeZoneInformation.
        :type utc_offset: str
        """
        if utc_offset is None:
            raise ValueError("Invalid value for `utc_offset`, must not be `None`")

        self._utc_offset = utc_offset
