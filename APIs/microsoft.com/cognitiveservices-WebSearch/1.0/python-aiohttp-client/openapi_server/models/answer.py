# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query import Query
from openapi_server.models.response import Response
from openapi_server import util


class Answer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, follow_up_queries: List[Query]=None, web_search_url: str=None, id: str=None, type: str=None):
        """Answer - a model defined in OpenAPI

        :param follow_up_queries: The follow_up_queries of this Answer.
        :param web_search_url: The web_search_url of this Answer.
        :param id: The id of this Answer.
        :param type: The type of this Answer.
        """
        self.openapi_types = {
            'follow_up_queries': List[Query],
            'web_search_url': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'follow_up_queries': 'followUpQueries',
            'web_search_url': 'webSearchUrl',
            'id': 'id',
            'type': '_type'
        }

        self._follow_up_queries = follow_up_queries
        self._web_search_url = web_search_url
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Answer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Answer of this Answer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def follow_up_queries(self):
        """Gets the follow_up_queries of this Answer.


        :return: The follow_up_queries of this Answer.
        :rtype: List[Query]
        """
        return self._follow_up_queries

    @follow_up_queries.setter
    def follow_up_queries(self, follow_up_queries):
        """Sets the follow_up_queries of this Answer.


        :param follow_up_queries: The follow_up_queries of this Answer.
        :type follow_up_queries: List[Query]
        """

        self._follow_up_queries = follow_up_queries

    @property
    def web_search_url(self):
        """Gets the web_search_url of this Answer.

        The URL To Bing's search result for this item.

        :return: The web_search_url of this Answer.
        :rtype: str
        """
        return self._web_search_url

    @web_search_url.setter
    def web_search_url(self, web_search_url):
        """Sets the web_search_url of this Answer.

        The URL To Bing's search result for this item.

        :param web_search_url: The web_search_url of this Answer.
        :type web_search_url: str
        """

        self._web_search_url = web_search_url

    @property
    def id(self):
        """Gets the id of this Answer.

        A String identifier.

        :return: The id of this Answer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Answer.

        A String identifier.

        :param id: The id of this Answer.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Answer.


        :return: The type of this Answer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Answer.


        :param type: The type of this Answer.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
