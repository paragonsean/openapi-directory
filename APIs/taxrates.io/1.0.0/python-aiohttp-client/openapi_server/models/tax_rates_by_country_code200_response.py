# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tax_rates_by_country_code200_response_taxes_inner import TaxRatesByCountryCode200ResponseTaxesInner
from openapi_server import util


class TaxRatesByCountryCode200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_name: str=None, taxes: List[TaxRatesByCountryCode200ResponseTaxesInner]=None):
        """TaxRatesByCountryCode200Response - a model defined in OpenAPI

        :param country_name: The country_name of this TaxRatesByCountryCode200Response.
        :param taxes: The taxes of this TaxRatesByCountryCode200Response.
        """
        self.openapi_types = {
            'country_name': str,
            'taxes': List[TaxRatesByCountryCode200ResponseTaxesInner]
        }

        self.attribute_map = {
            'country_name': 'country_name',
            'taxes': 'taxes'
        }

        self._country_name = country_name
        self._taxes = taxes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxRatesByCountryCode200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The taxRatesByCountryCode_200_response of this TaxRatesByCountryCode200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_name(self):
        """Gets the country_name of this TaxRatesByCountryCode200Response.


        :return: The country_name of this TaxRatesByCountryCode200Response.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this TaxRatesByCountryCode200Response.


        :param country_name: The country_name of this TaxRatesByCountryCode200Response.
        :type country_name: str
        """

        self._country_name = country_name

    @property
    def taxes(self):
        """Gets the taxes of this TaxRatesByCountryCode200Response.


        :return: The taxes of this TaxRatesByCountryCode200Response.
        :rtype: List[TaxRatesByCountryCode200ResponseTaxesInner]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this TaxRatesByCountryCode200Response.


        :param taxes: The taxes of this TaxRatesByCountryCode200Response.
        :type taxes: List[TaxRatesByCountryCode200ResponseTaxesInner]
        """

        self._taxes = taxes
