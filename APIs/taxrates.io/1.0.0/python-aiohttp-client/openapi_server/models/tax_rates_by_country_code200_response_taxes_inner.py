# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaxRatesByCountryCode200ResponseTaxesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, type: str=None, data_name: str=None, data_value: str=None):
        """TaxRatesByCountryCode200ResponseTaxesInner - a model defined in OpenAPI

        :param country: The country of this TaxRatesByCountryCode200ResponseTaxesInner.
        :param type: The type of this TaxRatesByCountryCode200ResponseTaxesInner.
        :param data_name: The data_name of this TaxRatesByCountryCode200ResponseTaxesInner.
        :param data_value: The data_value of this TaxRatesByCountryCode200ResponseTaxesInner.
        """
        self.openapi_types = {
            'country': str,
            'type': str,
            'data_name': str,
            'data_value': str
        }

        self.attribute_map = {
            'country': 'Country',
            'type': 'Type',
            'data_name': 'data_name',
            'data_value': 'data_value'
        }

        self._country = country
        self._type = type
        self._data_name = data_name
        self._data_value = data_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxRatesByCountryCode200ResponseTaxesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The taxRatesByCountryCode_200_response_taxes_inner of this TaxRatesByCountryCode200ResponseTaxesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this TaxRatesByCountryCode200ResponseTaxesInner.


        :return: The country of this TaxRatesByCountryCode200ResponseTaxesInner.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this TaxRatesByCountryCode200ResponseTaxesInner.


        :param country: The country of this TaxRatesByCountryCode200ResponseTaxesInner.
        :type country: str
        """

        self._country = country

    @property
    def type(self):
        """Gets the type of this TaxRatesByCountryCode200ResponseTaxesInner.


        :return: The type of this TaxRatesByCountryCode200ResponseTaxesInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TaxRatesByCountryCode200ResponseTaxesInner.


        :param type: The type of this TaxRatesByCountryCode200ResponseTaxesInner.
        :type type: str
        """

        self._type = type

    @property
    def data_name(self):
        """Gets the data_name of this TaxRatesByCountryCode200ResponseTaxesInner.


        :return: The data_name of this TaxRatesByCountryCode200ResponseTaxesInner.
        :rtype: str
        """
        return self._data_name

    @data_name.setter
    def data_name(self, data_name):
        """Sets the data_name of this TaxRatesByCountryCode200ResponseTaxesInner.


        :param data_name: The data_name of this TaxRatesByCountryCode200ResponseTaxesInner.
        :type data_name: str
        """

        self._data_name = data_name

    @property
    def data_value(self):
        """Gets the data_value of this TaxRatesByCountryCode200ResponseTaxesInner.


        :return: The data_value of this TaxRatesByCountryCode200ResponseTaxesInner.
        :rtype: str
        """
        return self._data_value

    @data_value.setter
    def data_value(self, data_value):
        """Sets the data_value of this TaxRatesByCountryCode200ResponseTaxesInner.


        :param data_value: The data_value of this TaxRatesByCountryCode200ResponseTaxesInner.
        :type data_value: str
        """

        self._data_value = data_value
