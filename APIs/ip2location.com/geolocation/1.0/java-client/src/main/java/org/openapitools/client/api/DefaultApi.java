/*
 * IP2Location IP Geolocation
 * IP2Location web service providing a service to do a reverse lookup of an IP address to an ISO3166 country code, region or state, city, latitude and longitude, ZIP/Postal code, time zone, Internet Service Provider (ISP) or company name, domain name, net speed, area code, weather station code, weather station name, mobile country code (MCC), mobile network code (MNC) and carrier brand, elevation, usage type, address type and IAB category. There are also 7 categories of additional add-on response fields supported such as metro, olson time zone, translations and more. Refer to https://www.ip2location.com/web-service/ip2location for further information.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for rootGet
     * @param ip IP address (IPv4 or IPv6) for reverse IP location lookup purpose. If not present, the server IP address will be used for the location lookup. (required)
     * @param key API Key. Please sign up free trial license key at ip2location.com (required)
     * @param _package Web service package of different granularity of return information. (optional)
     * @param addon Extra information in addition to the above selected package. (optional)
     * @param format Format of the response message. (optional)
     * @param lang Translation information. The translation only applicable for continent, country, region and city name for the addon package. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get response from IP lookup </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rootGetCall(String ip, String key, String _package, List<String> addon, String format, String lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_package != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("package", _package));
        }

        if (addon != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "addon", addon));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rootGetValidateBeforeCall(String ip, String key, String _package, List<String> addon, String format, String lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ip' is set
        if (ip == null) {
            throw new ApiException("Missing the required parameter 'ip' when calling rootGet(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling rootGet(Async)");
        }

        return rootGetCall(ip, key, _package, addon, format, lang, _callback);

    }

    /**
     * 
     * Get geolocation information via IP address
     * @param ip IP address (IPv4 or IPv6) for reverse IP location lookup purpose. If not present, the server IP address will be used for the location lookup. (required)
     * @param key API Key. Please sign up free trial license key at ip2location.com (required)
     * @param _package Web service package of different granularity of return information. (optional)
     * @param addon Extra information in addition to the above selected package. (optional)
     * @param format Format of the response message. (optional)
     * @param lang Translation information. The translation only applicable for continent, country, region and city name for the addon package. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get response from IP lookup </td><td>  -  </td></tr>
     </table>
     */
    public String rootGet(String ip, String key, String _package, List<String> addon, String format, String lang) throws ApiException {
        ApiResponse<String> localVarResp = rootGetWithHttpInfo(ip, key, _package, addon, format, lang);
        return localVarResp.getData();
    }

    /**
     * 
     * Get geolocation information via IP address
     * @param ip IP address (IPv4 or IPv6) for reverse IP location lookup purpose. If not present, the server IP address will be used for the location lookup. (required)
     * @param key API Key. Please sign up free trial license key at ip2location.com (required)
     * @param _package Web service package of different granularity of return information. (optional)
     * @param addon Extra information in addition to the above selected package. (optional)
     * @param format Format of the response message. (optional)
     * @param lang Translation information. The translation only applicable for continent, country, region and city name for the addon package. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get response from IP lookup </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> rootGetWithHttpInfo(String ip, String key, String _package, List<String> addon, String format, String lang) throws ApiException {
        okhttp3.Call localVarCall = rootGetValidateBeforeCall(ip, key, _package, addon, format, lang, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get geolocation information via IP address
     * @param ip IP address (IPv4 or IPv6) for reverse IP location lookup purpose. If not present, the server IP address will be used for the location lookup. (required)
     * @param key API Key. Please sign up free trial license key at ip2location.com (required)
     * @param _package Web service package of different granularity of return information. (optional)
     * @param addon Extra information in addition to the above selected package. (optional)
     * @param format Format of the response message. (optional)
     * @param lang Translation information. The translation only applicable for continent, country, region and city name for the addon package. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get response from IP lookup </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rootGetAsync(String ip, String key, String _package, List<String> addon, String format, String lang, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = rootGetValidateBeforeCall(ip, key, _package, addon, format, lang, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
