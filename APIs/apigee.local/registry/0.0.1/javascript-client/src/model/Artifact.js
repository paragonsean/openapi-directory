/**
 * Registry API
 * The Registry service allows teams to manage descriptions of APIs.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Artifact model module.
 * @module model/Artifact
 * @version 0.0.1
 */
class Artifact {
    /**
     * Constructs a new <code>Artifact</code>.
     * Artifacts of resources. Artifacts are unique (single-value) per resource and are used to store metadata that is too large or numerous to be stored directly on the resource. Since artifacts are stored separately from parent resources, they should generally be used for metadata that is needed infrequently, i.e. not for display in primary views of the resource but perhaps displayed or downloaded upon request. The ListArtifacts method allows artifacts to be quickly enumerated and checked for presence without downloading their (potentially-large) contents.
     * @alias module:model/Artifact
     */
    constructor() { 
        
        Artifact.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Artifact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Artifact} obj Optional instance to populate.
     * @return {module:model/Artifact} The populated <code>Artifact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Artifact();

            if (data.hasOwnProperty('contents')) {
                obj['contents'] = ApiClient.convertToType(data['contents'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'Date');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
            }
            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sizeBytes')) {
                obj['sizeBytes'] = ApiClient.convertToType(data['sizeBytes'], 'Number');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Artifact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Artifact</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['contents'] && !(typeof data['contents'] === 'string' || data['contents'] instanceof String)) {
            throw new Error("Expected the field `contents` to be a primitive type in the JSON string but got " + data['contents']);
        }
        // ensure the json data is a string
        if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
            throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
        }
        // ensure the json data is a string
        if (data['mimeType'] && !(typeof data['mimeType'] === 'string' || data['mimeType'] instanceof String)) {
            throw new Error("Expected the field `mimeType` to be a primitive type in the JSON string but got " + data['mimeType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.
 * @member {String} contents
 */
Artifact.prototype['contents'] = undefined;

/**
 * Output only. Creation timestamp.
 * @member {Date} createTime
 */
Artifact.prototype['createTime'] = undefined;

/**
 * Output only. A SHA-256 hash of the artifact's contents. If the artifact is gzipped, this is the hash of the uncompressed artifact.
 * @member {String} hash
 */
Artifact.prototype['hash'] = undefined;

/**
 * A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible \"schema\" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with \"+gzip\").
 * @member {String} mimeType
 */
Artifact.prototype['mimeType'] = undefined;

/**
 * Resource name.
 * @member {String} name
 */
Artifact.prototype['name'] = undefined;

/**
 * Output only. The size of the artifact in bytes. If the artifact is gzipped, this is the size of the uncompressed artifact.
 * @member {Number} sizeBytes
 */
Artifact.prototype['sizeBytes'] = undefined;

/**
 * Output only. Last update timestamp.
 * @member {Date} updateTime
 */
Artifact.prototype['updateTime'] = undefined;






export default Artifact;

