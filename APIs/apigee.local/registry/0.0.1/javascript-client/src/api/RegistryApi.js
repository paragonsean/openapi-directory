/**
 * Registry API
 * The Registry service allows teams to manage descriptions of APIs.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Api from '../model/Api';
import ApiDeployment from '../model/ApiDeployment';
import ApiSpec from '../model/ApiSpec';
import ApiVersion from '../model/ApiVersion';
import Artifact from '../model/Artifact';
import ListApiDeploymentRevisionsResponse from '../model/ListApiDeploymentRevisionsResponse';
import ListApiDeploymentsResponse from '../model/ListApiDeploymentsResponse';
import ListApiSpecRevisionsResponse from '../model/ListApiSpecRevisionsResponse';
import ListApiSpecsResponse from '../model/ListApiSpecsResponse';
import ListApiVersionsResponse from '../model/ListApiVersionsResponse';
import ListApisResponse from '../model/ListApisResponse';
import ListArtifactsResponse from '../model/ListArtifactsResponse';
import RollbackApiDeploymentRequest from '../model/RollbackApiDeploymentRequest';
import RollbackApiSpecRequest from '../model/RollbackApiSpecRequest';
import Status from '../model/Status';
import TagApiDeploymentRevisionRequest from '../model/TagApiDeploymentRevisionRequest';
import TagApiSpecRevisionRequest from '../model/TagApiSpecRevisionRequest';

/**
* Registry service.
* @module api/RegistryApi
* @version 0.0.1
*/
export default class RegistryApi {

    /**
    * Constructs a new RegistryApi. 
    * @alias module:api/RegistryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the registryCreateApi operation.
     * @callback module:api/RegistryApi~registryCreateApiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Api} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateApi creates a specified API.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {module:model/Api} api 
     * @param {Object} opts Optional parameters
     * @param {String} [apiId] Required. The ID to use for the api, which will become the final component of the api's resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID.
     * @param {module:api/RegistryApi~registryCreateApiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Api}
     */
    registryCreateApi(project, location, api, opts, callback) {
      opts = opts || {};
      let postBody = api;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryCreateApi");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryCreateApi");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryCreateApi");
      }

      let pathParams = {
        'project': project,
        'location': location
      };
      let queryParams = {
        'apiId': opts['apiId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Api;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryCreateApiDeployment operation.
     * @callback module:api/RegistryApi~registryCreateApiDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiDeployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateApiDeployment creates a specified deployment.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {module:model/ApiDeployment} apiDeployment 
     * @param {Object} opts Optional parameters
     * @param {String} [apiDeploymentId] Required. The ID to use for the deployment, which will become the final component of the deployment's resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID.
     * @param {module:api/RegistryApi~registryCreateApiDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiDeployment}
     */
    registryCreateApiDeployment(project, location, api, apiDeployment, opts, callback) {
      opts = opts || {};
      let postBody = apiDeployment;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryCreateApiDeployment");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryCreateApiDeployment");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryCreateApiDeployment");
      }
      // verify the required parameter 'apiDeployment' is set
      if (apiDeployment === undefined || apiDeployment === null) {
        throw new Error("Missing the required parameter 'apiDeployment' when calling registryCreateApiDeployment");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api
      };
      let queryParams = {
        'apiDeploymentId': opts['apiDeploymentId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiDeployment;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/deployments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryCreateApiSpec operation.
     * @callback module:api/RegistryApi~registryCreateApiSpecCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSpec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateApiSpec creates a specified spec.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {String} version The version id.
     * @param {module:model/ApiSpec} apiSpec 
     * @param {Object} opts Optional parameters
     * @param {String} [apiSpecId] Required. The ID to use for the spec, which will become the final component of the spec's resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID.
     * @param {module:api/RegistryApi~registryCreateApiSpecCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSpec}
     */
    registryCreateApiSpec(project, location, api, version, apiSpec, opts, callback) {
      opts = opts || {};
      let postBody = apiSpec;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryCreateApiSpec");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryCreateApiSpec");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryCreateApiSpec");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling registryCreateApiSpec");
      }
      // verify the required parameter 'apiSpec' is set
      if (apiSpec === undefined || apiSpec === null) {
        throw new Error("Missing the required parameter 'apiSpec' when calling registryCreateApiSpec");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api,
        'version': version
      };
      let queryParams = {
        'apiSpecId': opts['apiSpecId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiSpec;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryCreateApiVersion operation.
     * @callback module:api/RegistryApi~registryCreateApiVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateApiVersion creates a specified version.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {module:model/ApiVersion} apiVersion 
     * @param {Object} opts Optional parameters
     * @param {String} [apiVersionId] Required. The ID to use for the version, which will become the final component of the version's resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID.
     * @param {module:api/RegistryApi~registryCreateApiVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiVersion}
     */
    registryCreateApiVersion(project, location, api, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = apiVersion;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryCreateApiVersion");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryCreateApiVersion");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryCreateApiVersion");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling registryCreateApiVersion");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api
      };
      let queryParams = {
        'apiVersionId': opts['apiVersionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiVersion;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/versions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryCreateArtifact operation.
     * @callback module:api/RegistryApi~registryCreateArtifactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Artifact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CreateArtifact creates a specified artifact.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {module:model/Artifact} artifact 
     * @param {Object} opts Optional parameters
     * @param {String} [artifactId] Required. The ID to use for the artifact, which will become the final component of the artifact's resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID.
     * @param {module:api/RegistryApi~registryCreateArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Artifact}
     */
    registryCreateArtifact(project, location, artifact, opts, callback) {
      opts = opts || {};
      let postBody = artifact;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryCreateArtifact");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryCreateArtifact");
      }
      // verify the required parameter 'artifact' is set
      if (artifact === undefined || artifact === null) {
        throw new Error("Missing the required parameter 'artifact' when calling registryCreateArtifact");
      }

      let pathParams = {
        'project': project,
        'location': location
      };
      let queryParams = {
        'artifactId': opts['artifactId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Artifact;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/artifacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryDeleteApi operation.
     * @callback module:api/RegistryApi~registryDeleteApiCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeleteApi removes a specified API and all of the resources that it  owns.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force] If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.)
     * @param {module:api/RegistryApi~registryDeleteApiCallback} callback The callback function, accepting three arguments: error, data, response
     */
    registryDeleteApi(project, location, api, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryDeleteApi");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryDeleteApi");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryDeleteApi");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryDeleteApiDeployment operation.
     * @callback module:api/RegistryApi~registryDeleteApiDeploymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeleteApiDeployment removes a specified deployment, all revisions, and all  child resources (e.g. artifacts).
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {String} deployment The deployment id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force] If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.)
     * @param {module:api/RegistryApi~registryDeleteApiDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    registryDeleteApiDeployment(project, location, api, deployment, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryDeleteApiDeployment");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryDeleteApiDeployment");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryDeleteApiDeployment");
      }
      // verify the required parameter 'deployment' is set
      if (deployment === undefined || deployment === null) {
        throw new Error("Missing the required parameter 'deployment' when calling registryDeleteApiDeployment");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api,
        'deployment': deployment
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryDeleteApiDeploymentRevision operation.
     * @callback module:api/RegistryApi~registryDeleteApiDeploymentRevisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiDeployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeleteApiDeploymentRevision deletes a revision of a deployment.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {String} deployment The deployment id.
     * @param {module:api/RegistryApi~registryDeleteApiDeploymentRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiDeployment}
     */
    registryDeleteApiDeploymentRevision(project, location, api, deployment, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryDeleteApiDeploymentRevision");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryDeleteApiDeploymentRevision");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryDeleteApiDeploymentRevision");
      }
      // verify the required parameter 'deployment' is set
      if (deployment === undefined || deployment === null) {
        throw new Error("Missing the required parameter 'deployment' when calling registryDeleteApiDeploymentRevision");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api,
        'deployment': deployment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiDeployment;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}:deleteRevision', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryDeleteApiSpec operation.
     * @callback module:api/RegistryApi~registryDeleteApiSpecCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeleteApiSpec removes a specified spec, all revisions, and all child  resources (e.g. artifacts).
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {String} version The version id.
     * @param {String} spec The spec id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force] If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.)
     * @param {module:api/RegistryApi~registryDeleteApiSpecCallback} callback The callback function, accepting three arguments: error, data, response
     */
    registryDeleteApiSpec(project, location, api, version, spec, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryDeleteApiSpec");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryDeleteApiSpec");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryDeleteApiSpec");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling registryDeleteApiSpec");
      }
      // verify the required parameter 'spec' is set
      if (spec === undefined || spec === null) {
        throw new Error("Missing the required parameter 'spec' when calling registryDeleteApiSpec");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api,
        'version': version,
        'spec': spec
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryDeleteApiSpecRevision operation.
     * @callback module:api/RegistryApi~registryDeleteApiSpecRevisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSpec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeleteApiSpecRevision deletes a revision of a spec.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {String} version The version id.
     * @param {String} spec The spec id.
     * @param {module:api/RegistryApi~registryDeleteApiSpecRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSpec}
     */
    registryDeleteApiSpecRevision(project, location, api, version, spec, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryDeleteApiSpecRevision");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryDeleteApiSpecRevision");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryDeleteApiSpecRevision");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling registryDeleteApiSpecRevision");
      }
      // verify the required parameter 'spec' is set
      if (spec === undefined || spec === null) {
        throw new Error("Missing the required parameter 'spec' when calling registryDeleteApiSpecRevision");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api,
        'version': version,
        'spec': spec
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiSpec;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:deleteRevision', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryDeleteApiVersion operation.
     * @callback module:api/RegistryApi~registryDeleteApiVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeleteApiVersion removes a specified version and all of the resources that  it owns.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {String} version The version id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force] If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.)
     * @param {module:api/RegistryApi~registryDeleteApiVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    registryDeleteApiVersion(project, location, api, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryDeleteApiVersion");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryDeleteApiVersion");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryDeleteApiVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling registryDeleteApiVersion");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api,
        'version': version
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryDeleteArtifact operation.
     * @callback module:api/RegistryApi~registryDeleteArtifactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DeleteArtifact removes a specified artifact.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} artifact The artifact id.
     * @param {module:api/RegistryApi~registryDeleteArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    registryDeleteArtifact(project, location, artifact, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryDeleteArtifact");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryDeleteArtifact");
      }
      // verify the required parameter 'artifact' is set
      if (artifact === undefined || artifact === null) {
        throw new Error("Missing the required parameter 'artifact' when calling registryDeleteArtifact");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'artifact': artifact
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/artifacts/{artifact}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryGetApi operation.
     * @callback module:api/RegistryApi~registryGetApiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Api} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetApi returns a specified API.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {module:api/RegistryApi~registryGetApiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Api}
     */
    registryGetApi(project, location, api, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryGetApi");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryGetApi");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryGetApi");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Api;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryGetApiDeployment operation.
     * @callback module:api/RegistryApi~registryGetApiDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiDeployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetApiDeployment returns a specified deployment.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {String} deployment The deployment id.
     * @param {module:api/RegistryApi~registryGetApiDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiDeployment}
     */
    registryGetApiDeployment(project, location, api, deployment, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryGetApiDeployment");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryGetApiDeployment");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryGetApiDeployment");
      }
      // verify the required parameter 'deployment' is set
      if (deployment === undefined || deployment === null) {
        throw new Error("Missing the required parameter 'deployment' when calling registryGetApiDeployment");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api,
        'deployment': deployment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiDeployment;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryGetApiSpec operation.
     * @callback module:api/RegistryApi~registryGetApiSpecCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSpec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetApiSpec returns a specified spec.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {String} version The version id.
     * @param {String} spec The spec id.
     * @param {module:api/RegistryApi~registryGetApiSpecCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSpec}
     */
    registryGetApiSpec(project, location, api, version, spec, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryGetApiSpec");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryGetApiSpec");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryGetApiSpec");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling registryGetApiSpec");
      }
      // verify the required parameter 'spec' is set
      if (spec === undefined || spec === null) {
        throw new Error("Missing the required parameter 'spec' when calling registryGetApiSpec");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api,
        'version': version,
        'spec': spec
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiSpec;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryGetApiSpecContents operation.
     * @callback module:api/RegistryApi~registryGetApiSpecContentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetApiSpecContents returns the contents of a specified spec.  If specs are stored with GZip compression, the default behavior  is to return the spec uncompressed (the mime_type response field  indicates the exact format returned).
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {String} version The version id.
     * @param {String} spec The spec id.
     * @param {module:api/RegistryApi~registryGetApiSpecContentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    registryGetApiSpecContents(project, location, api, version, spec, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryGetApiSpecContents");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryGetApiSpecContents");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryGetApiSpecContents");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling registryGetApiSpecContents");
      }
      // verify the required parameter 'spec' is set
      if (spec === undefined || spec === null) {
        throw new Error("Missing the required parameter 'spec' when calling registryGetApiSpecContents");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api,
        'version': version,
        'spec': spec
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:getContents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryGetApiVersion operation.
     * @callback module:api/RegistryApi~registryGetApiVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetApiVersion returns a specified version.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {String} version The version id.
     * @param {module:api/RegistryApi~registryGetApiVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiVersion}
     */
    registryGetApiVersion(project, location, api, version, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryGetApiVersion");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryGetApiVersion");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryGetApiVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling registryGetApiVersion");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiVersion;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryGetArtifact operation.
     * @callback module:api/RegistryApi~registryGetArtifactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Artifact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetArtifact returns a specified artifact.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} artifact The artifact id.
     * @param {module:api/RegistryApi~registryGetArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Artifact}
     */
    registryGetArtifact(project, location, artifact, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryGetArtifact");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryGetArtifact");
      }
      // verify the required parameter 'artifact' is set
      if (artifact === undefined || artifact === null) {
        throw new Error("Missing the required parameter 'artifact' when calling registryGetArtifact");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'artifact': artifact
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Artifact;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/artifacts/{artifact}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryGetArtifactContents operation.
     * @callback module:api/RegistryApi~registryGetArtifactContentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetArtifactContents returns the contents of a specified artifact.  If artifacts are stored with GZip compression, the default behavior  is to return the artifact uncompressed (the mime_type response field  indicates the exact format returned).
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} artifact The artifact id.
     * @param {module:api/RegistryApi~registryGetArtifactContentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    registryGetArtifactContents(project, location, artifact, callback) {
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryGetArtifactContents");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryGetArtifactContents");
      }
      // verify the required parameter 'artifact' is set
      if (artifact === undefined || artifact === null) {
        throw new Error("Missing the required parameter 'artifact' when calling registryGetArtifactContents");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'artifact': artifact
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/artifacts/{artifact}:getContents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryListApiDeploymentRevisions operation.
     * @callback module:api/RegistryApi~registryListApiDeploymentRevisionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApiDeploymentRevisionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListApiDeploymentRevisions lists all revisions of a deployment.  Revisions are returned in descending order of revision creation time.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {String} deployment The deployment id.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] The maximum number of revisions to return per page.
     * @param {String} [pageToken] The page token, received from a previous ListApiDeploymentRevisions call. Provide this to retrieve the subsequent page.
     * @param {module:api/RegistryApi~registryListApiDeploymentRevisionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApiDeploymentRevisionsResponse}
     */
    registryListApiDeploymentRevisions(project, location, api, deployment, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryListApiDeploymentRevisions");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryListApiDeploymentRevisions");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryListApiDeploymentRevisions");
      }
      // verify the required parameter 'deployment' is set
      if (deployment === undefined || deployment === null) {
        throw new Error("Missing the required parameter 'deployment' when calling registryListApiDeploymentRevisions");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api,
        'deployment': deployment
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListApiDeploymentRevisionsResponse;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}:listRevisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryListApiDeployments operation.
     * @callback module:api/RegistryApi~registryListApiDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApiDeploymentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListApiDeployments returns matching deployments.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] The maximum number of deployments to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000.
     * @param {String} [pageToken] A page token, received from a previous `ListApiDeployments` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListApiDeployments` must match the call that provided the page token.
     * @param {String} [filter] An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields.
     * @param {module:api/RegistryApi~registryListApiDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApiDeploymentsResponse}
     */
    registryListApiDeployments(project, location, api, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryListApiDeployments");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryListApiDeployments");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryListApiDeployments");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListApiDeploymentsResponse;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryListApiSpecRevisions operation.
     * @callback module:api/RegistryApi~registryListApiSpecRevisionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApiSpecRevisionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListApiSpecRevisions lists all revisions of a spec.  Revisions are returned in descending order of revision creation time.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {String} version The version id.
     * @param {String} spec The spec id.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] The maximum number of revisions to return per page.
     * @param {String} [pageToken] The page token, received from a previous ListApiSpecRevisions call. Provide this to retrieve the subsequent page.
     * @param {module:api/RegistryApi~registryListApiSpecRevisionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApiSpecRevisionsResponse}
     */
    registryListApiSpecRevisions(project, location, api, version, spec, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryListApiSpecRevisions");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryListApiSpecRevisions");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryListApiSpecRevisions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling registryListApiSpecRevisions");
      }
      // verify the required parameter 'spec' is set
      if (spec === undefined || spec === null) {
        throw new Error("Missing the required parameter 'spec' when calling registryListApiSpecRevisions");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api,
        'version': version,
        'spec': spec
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListApiSpecRevisionsResponse;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:listRevisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryListApiSpecs operation.
     * @callback module:api/RegistryApi~registryListApiSpecsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApiSpecsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListApiSpecs returns matching specs.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {String} version The version id.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] The maximum number of specs to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000.
     * @param {String} [pageToken] A page token, received from a previous `ListApiSpecs` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListApiSpecs` must match the call that provided the page token.
     * @param {String} [filter] An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields except contents.
     * @param {module:api/RegistryApi~registryListApiSpecsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApiSpecsResponse}
     */
    registryListApiSpecs(project, location, api, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryListApiSpecs");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryListApiSpecs");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryListApiSpecs");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling registryListApiSpecs");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api,
        'version': version
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListApiSpecsResponse;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryListApiVersions operation.
     * @callback module:api/RegistryApi~registryListApiVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApiVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListApiVersions returns matching versions.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] The maximum number of versions to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000.
     * @param {String} [pageToken] A page token, received from a previous `ListApiVersions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListApiVersions` must match the call that provided the page token.
     * @param {String} [filter] An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields.
     * @param {module:api/RegistryApi~registryListApiVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApiVersionsResponse}
     */
    registryListApiVersions(project, location, api, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryListApiVersions");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryListApiVersions");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryListApiVersions");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListApiVersionsResponse;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryListApis operation.
     * @callback module:api/RegistryApi~registryListApisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApisResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListApis returns matching APIs.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] The maximum number of APIs to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000.
     * @param {String} [pageToken] A page token, received from a previous `ListApis` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListApis` must match the call that provided the page token.
     * @param {String} [filter] An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields.
     * @param {module:api/RegistryApi~registryListApisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApisResponse}
     */
    registryListApis(project, location, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryListApis");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryListApis");
      }

      let pathParams = {
        'project': project,
        'location': location
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListApisResponse;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryListArtifacts operation.
     * @callback module:api/RegistryApi~registryListArtifactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListArtifactsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListArtifacts returns matching artifacts.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] The maximum number of artifacts to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000.
     * @param {String} [pageToken] A page token, received from a previous `ListArtifacts` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListArtifacts` must match the call that provided the page token.
     * @param {String} [filter] An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields except contents.
     * @param {module:api/RegistryApi~registryListArtifactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListArtifactsResponse}
     */
    registryListArtifacts(project, location, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryListArtifacts");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryListArtifacts");
      }

      let pathParams = {
        'project': project,
        'location': location
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListArtifactsResponse;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/artifacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryReplaceArtifact operation.
     * @callback module:api/RegistryApi~registryReplaceArtifactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Artifact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ReplaceArtifact can be used to replace a specified artifact.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} artifact The artifact id.
     * @param {module:model/Artifact} artifact2 
     * @param {module:api/RegistryApi~registryReplaceArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Artifact}
     */
    registryReplaceArtifact(project, location, artifact, artifact2, callback) {
      let postBody = artifact2;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryReplaceArtifact");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryReplaceArtifact");
      }
      // verify the required parameter 'artifact' is set
      if (artifact === undefined || artifact === null) {
        throw new Error("Missing the required parameter 'artifact' when calling registryReplaceArtifact");
      }
      // verify the required parameter 'artifact2' is set
      if (artifact2 === undefined || artifact2 === null) {
        throw new Error("Missing the required parameter 'artifact2' when calling registryReplaceArtifact");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'artifact': artifact
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Artifact;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/artifacts/{artifact}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryRollbackApiDeployment operation.
     * @callback module:api/RegistryApi~registryRollbackApiDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiDeployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RollbackApiDeployment sets the current revision to a specified prior  revision. Note that this creates a new revision with a new revision ID.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {String} deployment The deployment id.
     * @param {module:model/RollbackApiDeploymentRequest} rollbackApiDeploymentRequest 
     * @param {module:api/RegistryApi~registryRollbackApiDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiDeployment}
     */
    registryRollbackApiDeployment(project, location, api, deployment, rollbackApiDeploymentRequest, callback) {
      let postBody = rollbackApiDeploymentRequest;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryRollbackApiDeployment");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryRollbackApiDeployment");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryRollbackApiDeployment");
      }
      // verify the required parameter 'deployment' is set
      if (deployment === undefined || deployment === null) {
        throw new Error("Missing the required parameter 'deployment' when calling registryRollbackApiDeployment");
      }
      // verify the required parameter 'rollbackApiDeploymentRequest' is set
      if (rollbackApiDeploymentRequest === undefined || rollbackApiDeploymentRequest === null) {
        throw new Error("Missing the required parameter 'rollbackApiDeploymentRequest' when calling registryRollbackApiDeployment");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api,
        'deployment': deployment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiDeployment;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}:rollback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryRollbackApiSpec operation.
     * @callback module:api/RegistryApi~registryRollbackApiSpecCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSpec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RollbackApiSpec sets the current revision to a specified prior revision.  Note that this creates a new revision with a new revision ID.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {String} version The version id.
     * @param {String} spec The spec id.
     * @param {module:model/RollbackApiSpecRequest} rollbackApiSpecRequest 
     * @param {module:api/RegistryApi~registryRollbackApiSpecCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSpec}
     */
    registryRollbackApiSpec(project, location, api, version, spec, rollbackApiSpecRequest, callback) {
      let postBody = rollbackApiSpecRequest;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryRollbackApiSpec");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryRollbackApiSpec");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryRollbackApiSpec");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling registryRollbackApiSpec");
      }
      // verify the required parameter 'spec' is set
      if (spec === undefined || spec === null) {
        throw new Error("Missing the required parameter 'spec' when calling registryRollbackApiSpec");
      }
      // verify the required parameter 'rollbackApiSpecRequest' is set
      if (rollbackApiSpecRequest === undefined || rollbackApiSpecRequest === null) {
        throw new Error("Missing the required parameter 'rollbackApiSpecRequest' when calling registryRollbackApiSpec");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api,
        'version': version,
        'spec': spec
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiSpec;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:rollback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryTagApiDeploymentRevision operation.
     * @callback module:api/RegistryApi~registryTagApiDeploymentRevisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiDeployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TagApiDeploymentRevision adds a tag to a specified revision of a  deployment.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {String} deployment The deployment id.
     * @param {module:model/TagApiDeploymentRevisionRequest} tagApiDeploymentRevisionRequest 
     * @param {module:api/RegistryApi~registryTagApiDeploymentRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiDeployment}
     */
    registryTagApiDeploymentRevision(project, location, api, deployment, tagApiDeploymentRevisionRequest, callback) {
      let postBody = tagApiDeploymentRevisionRequest;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryTagApiDeploymentRevision");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryTagApiDeploymentRevision");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryTagApiDeploymentRevision");
      }
      // verify the required parameter 'deployment' is set
      if (deployment === undefined || deployment === null) {
        throw new Error("Missing the required parameter 'deployment' when calling registryTagApiDeploymentRevision");
      }
      // verify the required parameter 'tagApiDeploymentRevisionRequest' is set
      if (tagApiDeploymentRevisionRequest === undefined || tagApiDeploymentRevisionRequest === null) {
        throw new Error("Missing the required parameter 'tagApiDeploymentRevisionRequest' when calling registryTagApiDeploymentRevision");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api,
        'deployment': deployment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiDeployment;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}:tagRevision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryTagApiSpecRevision operation.
     * @callback module:api/RegistryApi~registryTagApiSpecRevisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSpec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TagApiSpecRevision adds a tag to a specified revision of a spec.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {String} version The version id.
     * @param {String} spec The spec id.
     * @param {module:model/TagApiSpecRevisionRequest} tagApiSpecRevisionRequest 
     * @param {module:api/RegistryApi~registryTagApiSpecRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSpec}
     */
    registryTagApiSpecRevision(project, location, api, version, spec, tagApiSpecRevisionRequest, callback) {
      let postBody = tagApiSpecRevisionRequest;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryTagApiSpecRevision");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryTagApiSpecRevision");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryTagApiSpecRevision");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling registryTagApiSpecRevision");
      }
      // verify the required parameter 'spec' is set
      if (spec === undefined || spec === null) {
        throw new Error("Missing the required parameter 'spec' when calling registryTagApiSpecRevision");
      }
      // verify the required parameter 'tagApiSpecRevisionRequest' is set
      if (tagApiSpecRevisionRequest === undefined || tagApiSpecRevisionRequest === null) {
        throw new Error("Missing the required parameter 'tagApiSpecRevisionRequest' when calling registryTagApiSpecRevision");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api,
        'version': version,
        'spec': spec
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiSpec;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:tagRevision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryUpdateApi operation.
     * @callback module:api/RegistryApi~registryUpdateApiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Api} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpdateApi can be used to modify a specified API.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {module:model/Api} api2 
     * @param {Object} opts Optional parameters
     * @param {String} [updateMask] The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \"*\" is specified, all fields are updated, including fields that are unspecified/default in the request.
     * @param {Boolean} [allowMissing] If set to true, and the api is not found, a new api_versions will be created. In this situation, `update_mask` is ignored.
     * @param {module:api/RegistryApi~registryUpdateApiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Api}
     */
    registryUpdateApi(project, location, api, api2, opts, callback) {
      opts = opts || {};
      let postBody = api2;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryUpdateApi");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryUpdateApi");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryUpdateApi");
      }
      // verify the required parameter 'api2' is set
      if (api2 === undefined || api2 === null) {
        throw new Error("Missing the required parameter 'api2' when calling registryUpdateApi");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api
      };
      let queryParams = {
        'updateMask': opts['updateMask'],
        'allowMissing': opts['allowMissing']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Api;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryUpdateApiDeployment operation.
     * @callback module:api/RegistryApi~registryUpdateApiDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiDeployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpdateApiDeployment can be used to modify a specified deployment.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {String} deployment The deployment id.
     * @param {module:model/ApiDeployment} apiDeployment 
     * @param {Object} opts Optional parameters
     * @param {String} [updateMask] The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \"*\" is specified, all fields are updated, including fields that are unspecified/default in the request.
     * @param {Boolean} [allowMissing] If set to true, and the deployment is not found, a new deployment will be created. In this situation, `update_mask` is ignored.
     * @param {module:api/RegistryApi~registryUpdateApiDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiDeployment}
     */
    registryUpdateApiDeployment(project, location, api, deployment, apiDeployment, opts, callback) {
      opts = opts || {};
      let postBody = apiDeployment;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryUpdateApiDeployment");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryUpdateApiDeployment");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryUpdateApiDeployment");
      }
      // verify the required parameter 'deployment' is set
      if (deployment === undefined || deployment === null) {
        throw new Error("Missing the required parameter 'deployment' when calling registryUpdateApiDeployment");
      }
      // verify the required parameter 'apiDeployment' is set
      if (apiDeployment === undefined || apiDeployment === null) {
        throw new Error("Missing the required parameter 'apiDeployment' when calling registryUpdateApiDeployment");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api,
        'deployment': deployment
      };
      let queryParams = {
        'updateMask': opts['updateMask'],
        'allowMissing': opts['allowMissing']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiDeployment;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryUpdateApiSpec operation.
     * @callback module:api/RegistryApi~registryUpdateApiSpecCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiSpec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpdateApiSpec can be used to modify a specified spec.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {String} version The version id.
     * @param {String} spec The spec id.
     * @param {module:model/ApiSpec} apiSpec 
     * @param {Object} opts Optional parameters
     * @param {String} [updateMask] The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \"*\" is specified, all fields are updated, including fields that are unspecified/default in the request.
     * @param {Boolean} [allowMissing] If set to true, and the spec is not found, a new spec will be created. In this situation, `update_mask` is ignored.
     * @param {module:api/RegistryApi~registryUpdateApiSpecCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiSpec}
     */
    registryUpdateApiSpec(project, location, api, version, spec, apiSpec, opts, callback) {
      opts = opts || {};
      let postBody = apiSpec;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryUpdateApiSpec");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryUpdateApiSpec");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryUpdateApiSpec");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling registryUpdateApiSpec");
      }
      // verify the required parameter 'spec' is set
      if (spec === undefined || spec === null) {
        throw new Error("Missing the required parameter 'spec' when calling registryUpdateApiSpec");
      }
      // verify the required parameter 'apiSpec' is set
      if (apiSpec === undefined || apiSpec === null) {
        throw new Error("Missing the required parameter 'apiSpec' when calling registryUpdateApiSpec");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api,
        'version': version,
        'spec': spec
      };
      let queryParams = {
        'updateMask': opts['updateMask'],
        'allowMissing': opts['allowMissing']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiSpec;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registryUpdateApiVersion operation.
     * @callback module:api/RegistryApi~registryUpdateApiVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UpdateApiVersion can be used to modify a specified version.
     * @param {String} project The project id.
     * @param {String} location The location id.
     * @param {String} api The api id.
     * @param {String} version The version id.
     * @param {module:model/ApiVersion} apiVersion 
     * @param {Object} opts Optional parameters
     * @param {String} [updateMask] The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \"*\" is specified, all fields are updated, including fields that are unspecified/default in the request.
     * @param {Boolean} [allowMissing] If set to true, and the version is not found, a new version will be created. In this situation, `update_mask` is ignored.
     * @param {module:api/RegistryApi~registryUpdateApiVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiVersion}
     */
    registryUpdateApiVersion(project, location, api, version, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = apiVersion;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling registryUpdateApiVersion");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling registryUpdateApiVersion");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling registryUpdateApiVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling registryUpdateApiVersion");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling registryUpdateApiVersion");
      }

      let pathParams = {
        'project': project,
        'location': location,
        'api': api,
        'version': version
      };
      let queryParams = {
        'updateMask': opts['updateMask'],
        'allowMissing': opts['allowMissing']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiVersion;
      return this.apiClient.callApi(
        '/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
