# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, create_time: datetime=None, description: str=None, display_name: str=None, labels: Dict[str, str]=None, name: str=None, state: str=None, update_time: datetime=None):
        """ApiVersion - a model defined in OpenAPI

        :param annotations: The annotations of this ApiVersion.
        :param create_time: The create_time of this ApiVersion.
        :param description: The description of this ApiVersion.
        :param display_name: The display_name of this ApiVersion.
        :param labels: The labels of this ApiVersion.
        :param name: The name of this ApiVersion.
        :param state: The state of this ApiVersion.
        :param update_time: The update_time of this ApiVersion.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'create_time': datetime,
            'description': str,
            'display_name': str,
            'labels': Dict[str, str],
            'name': str,
            'state': str,
            'update_time': datetime
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'create_time': 'createTime',
            'description': 'description',
            'display_name': 'displayName',
            'labels': 'labels',
            'name': 'name',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._annotations = annotations
        self._create_time = create_time
        self._description = description
        self._display_name = display_name
        self._labels = labels
        self._name = name
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiVersion of this ApiVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this ApiVersion.

        Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.

        :return: The annotations of this ApiVersion.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this ApiVersion.

        Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.

        :param annotations: The annotations of this ApiVersion.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def create_time(self):
        """Gets the create_time of this ApiVersion.

        Output only. Creation timestamp.

        :return: The create_time of this ApiVersion.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ApiVersion.

        Output only. Creation timestamp.

        :param create_time: The create_time of this ApiVersion.
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this ApiVersion.

        A detailed description.

        :return: The description of this ApiVersion.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiVersion.

        A detailed description.

        :param description: The description of this ApiVersion.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this ApiVersion.

        Human-meaningful name.

        :return: The display_name of this ApiVersion.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ApiVersion.

        Human-meaningful name.

        :param display_name: The display_name of this ApiVersion.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def labels(self):
        """Gets the labels of this ApiVersion.

        Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"apigeeregistry.googleapis.com/\" and cannot be changed.

        :return: The labels of this ApiVersion.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ApiVersion.

        Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"apigeeregistry.googleapis.com/\" and cannot be changed.

        :param labels: The labels of this ApiVersion.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this ApiVersion.

        Resource name.

        :return: The name of this ApiVersion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiVersion.

        Resource name.

        :param name: The name of this ApiVersion.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this ApiVersion.

        A user-definable description of the lifecycle phase of this API version. Format: free-form, but we expect single words that describe API maturity, e.g. \"CONCEPT\", \"DESIGN\", \"DEVELOPMENT\", \"STAGING\", \"PRODUCTION\", \"DEPRECATED\", \"RETIRED\".

        :return: The state of this ApiVersion.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ApiVersion.

        A user-definable description of the lifecycle phase of this API version. Format: free-form, but we expect single words that describe API maturity, e.g. \"CONCEPT\", \"DESIGN\", \"DEVELOPMENT\", \"STAGING\", \"PRODUCTION\", \"DEPRECATED\", \"RETIRED\".

        :param state: The state of this ApiVersion.
        :type state: str
        """

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this ApiVersion.

        Output only. Last update timestamp.

        :return: The update_time of this ApiVersion.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ApiVersion.

        Output only. Last update timestamp.

        :param update_time: The update_time of this ApiVersion.
        :type update_time: datetime
        """

        self._update_time = update_time
