# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Artifact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contents: str=None, create_time: datetime=None, hash: str=None, mime_type: str=None, name: str=None, size_bytes: int=None, update_time: datetime=None):
        """Artifact - a model defined in OpenAPI

        :param contents: The contents of this Artifact.
        :param create_time: The create_time of this Artifact.
        :param hash: The hash of this Artifact.
        :param mime_type: The mime_type of this Artifact.
        :param name: The name of this Artifact.
        :param size_bytes: The size_bytes of this Artifact.
        :param update_time: The update_time of this Artifact.
        """
        self.openapi_types = {
            'contents': str,
            'create_time': datetime,
            'hash': str,
            'mime_type': str,
            'name': str,
            'size_bytes': int,
            'update_time': datetime
        }

        self.attribute_map = {
            'contents': 'contents',
            'create_time': 'createTime',
            'hash': 'hash',
            'mime_type': 'mimeType',
            'name': 'name',
            'size_bytes': 'sizeBytes',
            'update_time': 'updateTime'
        }

        self._contents = contents
        self._create_time = create_time
        self._hash = hash
        self._mime_type = mime_type
        self._name = name
        self._size_bytes = size_bytes
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Artifact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Artifact of this Artifact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contents(self):
        """Gets the contents of this Artifact.

        Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.

        :return: The contents of this Artifact.
        :rtype: str
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this Artifact.

        Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.

        :param contents: The contents of this Artifact.
        :type contents: str
        """

        self._contents = contents

    @property
    def create_time(self):
        """Gets the create_time of this Artifact.

        Output only. Creation timestamp.

        :return: The create_time of this Artifact.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Artifact.

        Output only. Creation timestamp.

        :param create_time: The create_time of this Artifact.
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def hash(self):
        """Gets the hash of this Artifact.

        Output only. A SHA-256 hash of the artifact's contents. If the artifact is gzipped, this is the hash of the uncompressed artifact.

        :return: The hash of this Artifact.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Artifact.

        Output only. A SHA-256 hash of the artifact's contents. If the artifact is gzipped, this is the hash of the uncompressed artifact.

        :param hash: The hash of this Artifact.
        :type hash: str
        """

        self._hash = hash

    @property
    def mime_type(self):
        """Gets the mime_type of this Artifact.

        A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible \"schema\" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with \"+gzip\").

        :return: The mime_type of this Artifact.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Artifact.

        A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible \"schema\" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with \"+gzip\").

        :param mime_type: The mime_type of this Artifact.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def name(self):
        """Gets the name of this Artifact.

        Resource name.

        :return: The name of this Artifact.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Artifact.

        Resource name.

        :param name: The name of this Artifact.
        :type name: str
        """

        self._name = name

    @property
    def size_bytes(self):
        """Gets the size_bytes of this Artifact.

        Output only. The size of the artifact in bytes. If the artifact is gzipped, this is the size of the uncompressed artifact.

        :return: The size_bytes of this Artifact.
        :rtype: int
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this Artifact.

        Output only. The size of the artifact in bytes. If the artifact is gzipped, this is the size of the uncompressed artifact.

        :param size_bytes: The size_bytes of this Artifact.
        :type size_bytes: int
        """

        self._size_bytes = size_bytes

    @property
    def update_time(self):
        """Gets the update_time of this Artifact.

        Output only. Last update timestamp.

        :return: The update_time of this Artifact.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Artifact.

        Output only. Last update timestamp.

        :param update_time: The update_time of this Artifact.
        :type update_time: datetime
        """

        self._update_time = update_time
