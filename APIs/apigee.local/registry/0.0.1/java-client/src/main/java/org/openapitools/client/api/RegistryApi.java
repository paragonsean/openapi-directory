/*
 * Registry API
 * The Registry service allows teams to manage descriptions of APIs.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Api;
import org.openapitools.client.model.ApiDeployment;
import org.openapitools.client.model.ApiSpec;
import org.openapitools.client.model.ApiVersion;
import org.openapitools.client.model.Artifact;
import org.openapitools.client.model.ListApiDeploymentRevisionsResponse;
import org.openapitools.client.model.ListApiDeploymentsResponse;
import org.openapitools.client.model.ListApiSpecRevisionsResponse;
import org.openapitools.client.model.ListApiSpecsResponse;
import org.openapitools.client.model.ListApiVersionsResponse;
import org.openapitools.client.model.ListApisResponse;
import org.openapitools.client.model.ListArtifactsResponse;
import org.openapitools.client.model.RollbackApiDeploymentRequest;
import org.openapitools.client.model.RollbackApiSpecRequest;
import org.openapitools.client.model.Status;
import org.openapitools.client.model.TagApiDeploymentRevisionRequest;
import org.openapitools.client.model.TagApiSpecRevisionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegistryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RegistryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegistryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for registryCreateApi
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api  (required)
     * @param apiId Required. The ID to use for the api, which will become the final component of the api&#39;s resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryCreateApiCall(String project, String location, Api api, String apiId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = api;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiId", apiId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryCreateApiValidateBeforeCall(String project, String location, Api api, String apiId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryCreateApi(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryCreateApi(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryCreateApi(Async)");
        }

        return registryCreateApiCall(project, location, api, apiId, _callback);

    }

    /**
     * 
     * CreateApi creates a specified API.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api  (required)
     * @param apiId Required. The ID to use for the api, which will become the final component of the api&#39;s resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID. (optional)
     * @return Api
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public Api registryCreateApi(String project, String location, Api api, String apiId) throws ApiException {
        ApiResponse<Api> localVarResp = registryCreateApiWithHttpInfo(project, location, api, apiId);
        return localVarResp.getData();
    }

    /**
     * 
     * CreateApi creates a specified API.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api  (required)
     * @param apiId Required. The ID to use for the api, which will become the final component of the api&#39;s resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID. (optional)
     * @return ApiResponse&lt;Api&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Api> registryCreateApiWithHttpInfo(String project, String location, Api api, String apiId) throws ApiException {
        okhttp3.Call localVarCall = registryCreateApiValidateBeforeCall(project, location, api, apiId, null);
        Type localVarReturnType = new TypeToken<Api>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * CreateApi creates a specified API.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api  (required)
     * @param apiId Required. The ID to use for the api, which will become the final component of the api&#39;s resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryCreateApiAsync(String project, String location, Api api, String apiId, final ApiCallback<Api> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryCreateApiValidateBeforeCall(project, location, api, apiId, _callback);
        Type localVarReturnType = new TypeToken<Api>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryCreateApiDeployment
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param apiDeployment  (required)
     * @param apiDeploymentId Required. The ID to use for the deployment, which will become the final component of the deployment&#39;s resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryCreateApiDeploymentCall(String project, String location, String api, ApiDeployment apiDeployment, String apiDeploymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiDeployment;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/deployments"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiDeploymentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiDeploymentId", apiDeploymentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryCreateApiDeploymentValidateBeforeCall(String project, String location, String api, ApiDeployment apiDeployment, String apiDeploymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryCreateApiDeployment(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryCreateApiDeployment(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryCreateApiDeployment(Async)");
        }

        // verify the required parameter 'apiDeployment' is set
        if (apiDeployment == null) {
            throw new ApiException("Missing the required parameter 'apiDeployment' when calling registryCreateApiDeployment(Async)");
        }

        return registryCreateApiDeploymentCall(project, location, api, apiDeployment, apiDeploymentId, _callback);

    }

    /**
     * 
     * CreateApiDeployment creates a specified deployment.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param apiDeployment  (required)
     * @param apiDeploymentId Required. The ID to use for the deployment, which will become the final component of the deployment&#39;s resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID. (optional)
     * @return ApiDeployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiDeployment registryCreateApiDeployment(String project, String location, String api, ApiDeployment apiDeployment, String apiDeploymentId) throws ApiException {
        ApiResponse<ApiDeployment> localVarResp = registryCreateApiDeploymentWithHttpInfo(project, location, api, apiDeployment, apiDeploymentId);
        return localVarResp.getData();
    }

    /**
     * 
     * CreateApiDeployment creates a specified deployment.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param apiDeployment  (required)
     * @param apiDeploymentId Required. The ID to use for the deployment, which will become the final component of the deployment&#39;s resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID. (optional)
     * @return ApiResponse&lt;ApiDeployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiDeployment> registryCreateApiDeploymentWithHttpInfo(String project, String location, String api, ApiDeployment apiDeployment, String apiDeploymentId) throws ApiException {
        okhttp3.Call localVarCall = registryCreateApiDeploymentValidateBeforeCall(project, location, api, apiDeployment, apiDeploymentId, null);
        Type localVarReturnType = new TypeToken<ApiDeployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * CreateApiDeployment creates a specified deployment.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param apiDeployment  (required)
     * @param apiDeploymentId Required. The ID to use for the deployment, which will become the final component of the deployment&#39;s resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryCreateApiDeploymentAsync(String project, String location, String api, ApiDeployment apiDeployment, String apiDeploymentId, final ApiCallback<ApiDeployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryCreateApiDeploymentValidateBeforeCall(project, location, api, apiDeployment, apiDeploymentId, _callback);
        Type localVarReturnType = new TypeToken<ApiDeployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryCreateApiSpec
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param apiSpec  (required)
     * @param apiSpecId Required. The ID to use for the spec, which will become the final component of the spec&#39;s resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryCreateApiSpecCall(String project, String location, String api, String version, ApiSpec apiSpec, String apiSpecId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiSpec;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiSpecId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiSpecId", apiSpecId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryCreateApiSpecValidateBeforeCall(String project, String location, String api, String version, ApiSpec apiSpec, String apiSpecId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryCreateApiSpec(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryCreateApiSpec(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryCreateApiSpec(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling registryCreateApiSpec(Async)");
        }

        // verify the required parameter 'apiSpec' is set
        if (apiSpec == null) {
            throw new ApiException("Missing the required parameter 'apiSpec' when calling registryCreateApiSpec(Async)");
        }

        return registryCreateApiSpecCall(project, location, api, version, apiSpec, apiSpecId, _callback);

    }

    /**
     * 
     * CreateApiSpec creates a specified spec.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param apiSpec  (required)
     * @param apiSpecId Required. The ID to use for the spec, which will become the final component of the spec&#39;s resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID. (optional)
     * @return ApiSpec
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiSpec registryCreateApiSpec(String project, String location, String api, String version, ApiSpec apiSpec, String apiSpecId) throws ApiException {
        ApiResponse<ApiSpec> localVarResp = registryCreateApiSpecWithHttpInfo(project, location, api, version, apiSpec, apiSpecId);
        return localVarResp.getData();
    }

    /**
     * 
     * CreateApiSpec creates a specified spec.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param apiSpec  (required)
     * @param apiSpecId Required. The ID to use for the spec, which will become the final component of the spec&#39;s resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID. (optional)
     * @return ApiResponse&lt;ApiSpec&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiSpec> registryCreateApiSpecWithHttpInfo(String project, String location, String api, String version, ApiSpec apiSpec, String apiSpecId) throws ApiException {
        okhttp3.Call localVarCall = registryCreateApiSpecValidateBeforeCall(project, location, api, version, apiSpec, apiSpecId, null);
        Type localVarReturnType = new TypeToken<ApiSpec>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * CreateApiSpec creates a specified spec.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param apiSpec  (required)
     * @param apiSpecId Required. The ID to use for the spec, which will become the final component of the spec&#39;s resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryCreateApiSpecAsync(String project, String location, String api, String version, ApiSpec apiSpec, String apiSpecId, final ApiCallback<ApiSpec> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryCreateApiSpecValidateBeforeCall(project, location, api, version, apiSpec, apiSpecId, _callback);
        Type localVarReturnType = new TypeToken<ApiSpec>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryCreateApiVersion
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param apiVersion  (required)
     * @param apiVersionId Required. The ID to use for the version, which will become the final component of the version&#39;s resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryCreateApiVersionCall(String project, String location, String api, ApiVersion apiVersion, String apiVersionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiVersion;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/versions"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiVersionId", apiVersionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryCreateApiVersionValidateBeforeCall(String project, String location, String api, ApiVersion apiVersion, String apiVersionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryCreateApiVersion(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryCreateApiVersion(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryCreateApiVersion(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling registryCreateApiVersion(Async)");
        }

        return registryCreateApiVersionCall(project, location, api, apiVersion, apiVersionId, _callback);

    }

    /**
     * 
     * CreateApiVersion creates a specified version.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param apiVersion  (required)
     * @param apiVersionId Required. The ID to use for the version, which will become the final component of the version&#39;s resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID. (optional)
     * @return ApiVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiVersion registryCreateApiVersion(String project, String location, String api, ApiVersion apiVersion, String apiVersionId) throws ApiException {
        ApiResponse<ApiVersion> localVarResp = registryCreateApiVersionWithHttpInfo(project, location, api, apiVersion, apiVersionId);
        return localVarResp.getData();
    }

    /**
     * 
     * CreateApiVersion creates a specified version.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param apiVersion  (required)
     * @param apiVersionId Required. The ID to use for the version, which will become the final component of the version&#39;s resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID. (optional)
     * @return ApiResponse&lt;ApiVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiVersion> registryCreateApiVersionWithHttpInfo(String project, String location, String api, ApiVersion apiVersion, String apiVersionId) throws ApiException {
        okhttp3.Call localVarCall = registryCreateApiVersionValidateBeforeCall(project, location, api, apiVersion, apiVersionId, null);
        Type localVarReturnType = new TypeToken<ApiVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * CreateApiVersion creates a specified version.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param apiVersion  (required)
     * @param apiVersionId Required. The ID to use for the version, which will become the final component of the version&#39;s resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryCreateApiVersionAsync(String project, String location, String api, ApiVersion apiVersion, String apiVersionId, final ApiCallback<ApiVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryCreateApiVersionValidateBeforeCall(project, location, api, apiVersion, apiVersionId, _callback);
        Type localVarReturnType = new TypeToken<ApiVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryCreateArtifact
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param artifact  (required)
     * @param artifactId Required. The ID to use for the artifact, which will become the final component of the artifact&#39;s resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryCreateArtifactCall(String project, String location, Artifact artifact, String artifactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = artifact;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/artifacts"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (artifactId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("artifactId", artifactId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryCreateArtifactValidateBeforeCall(String project, String location, Artifact artifact, String artifactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryCreateArtifact(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryCreateArtifact(Async)");
        }

        // verify the required parameter 'artifact' is set
        if (artifact == null) {
            throw new ApiException("Missing the required parameter 'artifact' when calling registryCreateArtifact(Async)");
        }

        return registryCreateArtifactCall(project, location, artifact, artifactId, _callback);

    }

    /**
     * 
     * CreateArtifact creates a specified artifact.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param artifact  (required)
     * @param artifactId Required. The ID to use for the artifact, which will become the final component of the artifact&#39;s resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID. (optional)
     * @return Artifact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public Artifact registryCreateArtifact(String project, String location, Artifact artifact, String artifactId) throws ApiException {
        ApiResponse<Artifact> localVarResp = registryCreateArtifactWithHttpInfo(project, location, artifact, artifactId);
        return localVarResp.getData();
    }

    /**
     * 
     * CreateArtifact creates a specified artifact.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param artifact  (required)
     * @param artifactId Required. The ID to use for the artifact, which will become the final component of the artifact&#39;s resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID. (optional)
     * @return ApiResponse&lt;Artifact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Artifact> registryCreateArtifactWithHttpInfo(String project, String location, Artifact artifact, String artifactId) throws ApiException {
        okhttp3.Call localVarCall = registryCreateArtifactValidateBeforeCall(project, location, artifact, artifactId, null);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * CreateArtifact creates a specified artifact.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param artifact  (required)
     * @param artifactId Required. The ID to use for the artifact, which will become the final component of the artifact&#39;s resource name. This value should be 4-63 characters, and valid characters are /[a-z][0-9]-/. Following AIP-162, IDs must not have the form of a UUID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryCreateArtifactAsync(String project, String location, Artifact artifact, String artifactId, final ApiCallback<Artifact> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryCreateArtifactValidateBeforeCall(project, location, artifact, artifactId, _callback);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryDeleteApi
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param force If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryDeleteApiCall(String project, String location, String api, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryDeleteApiValidateBeforeCall(String project, String location, String api, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryDeleteApi(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryDeleteApi(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryDeleteApi(Async)");
        }

        return registryDeleteApiCall(project, location, api, force, _callback);

    }

    /**
     * 
     * DeleteApi removes a specified API and all of the resources that it  owns.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param force If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public void registryDeleteApi(String project, String location, String api, Boolean force) throws ApiException {
        registryDeleteApiWithHttpInfo(project, location, api, force);
    }

    /**
     * 
     * DeleteApi removes a specified API and all of the resources that it  owns.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param force If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> registryDeleteApiWithHttpInfo(String project, String location, String api, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = registryDeleteApiValidateBeforeCall(project, location, api, force, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * DeleteApi removes a specified API and all of the resources that it  owns.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param force If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryDeleteApiAsync(String project, String location, String api, Boolean force, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryDeleteApiValidateBeforeCall(project, location, api, force, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryDeleteApiDeployment
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param force If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryDeleteApiDeploymentCall(String project, String location, String api, String deployment, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "deployment" + "}", localVarApiClient.escapeString(deployment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryDeleteApiDeploymentValidateBeforeCall(String project, String location, String api, String deployment, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryDeleteApiDeployment(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryDeleteApiDeployment(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryDeleteApiDeployment(Async)");
        }

        // verify the required parameter 'deployment' is set
        if (deployment == null) {
            throw new ApiException("Missing the required parameter 'deployment' when calling registryDeleteApiDeployment(Async)");
        }

        return registryDeleteApiDeploymentCall(project, location, api, deployment, force, _callback);

    }

    /**
     * 
     * DeleteApiDeployment removes a specified deployment, all revisions, and all  child resources (e.g. artifacts).
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param force If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public void registryDeleteApiDeployment(String project, String location, String api, String deployment, Boolean force) throws ApiException {
        registryDeleteApiDeploymentWithHttpInfo(project, location, api, deployment, force);
    }

    /**
     * 
     * DeleteApiDeployment removes a specified deployment, all revisions, and all  child resources (e.g. artifacts).
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param force If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> registryDeleteApiDeploymentWithHttpInfo(String project, String location, String api, String deployment, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = registryDeleteApiDeploymentValidateBeforeCall(project, location, api, deployment, force, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * DeleteApiDeployment removes a specified deployment, all revisions, and all  child resources (e.g. artifacts).
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param force If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryDeleteApiDeploymentAsync(String project, String location, String api, String deployment, Boolean force, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryDeleteApiDeploymentValidateBeforeCall(project, location, api, deployment, force, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryDeleteApiDeploymentRevision
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryDeleteApiDeploymentRevisionCall(String project, String location, String api, String deployment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}:deleteRevision"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "deployment" + "}", localVarApiClient.escapeString(deployment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryDeleteApiDeploymentRevisionValidateBeforeCall(String project, String location, String api, String deployment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryDeleteApiDeploymentRevision(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryDeleteApiDeploymentRevision(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryDeleteApiDeploymentRevision(Async)");
        }

        // verify the required parameter 'deployment' is set
        if (deployment == null) {
            throw new ApiException("Missing the required parameter 'deployment' when calling registryDeleteApiDeploymentRevision(Async)");
        }

        return registryDeleteApiDeploymentRevisionCall(project, location, api, deployment, _callback);

    }

    /**
     * 
     * DeleteApiDeploymentRevision deletes a revision of a deployment.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @return ApiDeployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiDeployment registryDeleteApiDeploymentRevision(String project, String location, String api, String deployment) throws ApiException {
        ApiResponse<ApiDeployment> localVarResp = registryDeleteApiDeploymentRevisionWithHttpInfo(project, location, api, deployment);
        return localVarResp.getData();
    }

    /**
     * 
     * DeleteApiDeploymentRevision deletes a revision of a deployment.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @return ApiResponse&lt;ApiDeployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiDeployment> registryDeleteApiDeploymentRevisionWithHttpInfo(String project, String location, String api, String deployment) throws ApiException {
        okhttp3.Call localVarCall = registryDeleteApiDeploymentRevisionValidateBeforeCall(project, location, api, deployment, null);
        Type localVarReturnType = new TypeToken<ApiDeployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * DeleteApiDeploymentRevision deletes a revision of a deployment.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryDeleteApiDeploymentRevisionAsync(String project, String location, String api, String deployment, final ApiCallback<ApiDeployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryDeleteApiDeploymentRevisionValidateBeforeCall(project, location, api, deployment, _callback);
        Type localVarReturnType = new TypeToken<ApiDeployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryDeleteApiSpec
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param force If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryDeleteApiSpecCall(String project, String location, String api, String version, String spec, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "spec" + "}", localVarApiClient.escapeString(spec.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryDeleteApiSpecValidateBeforeCall(String project, String location, String api, String version, String spec, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryDeleteApiSpec(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryDeleteApiSpec(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryDeleteApiSpec(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling registryDeleteApiSpec(Async)");
        }

        // verify the required parameter 'spec' is set
        if (spec == null) {
            throw new ApiException("Missing the required parameter 'spec' when calling registryDeleteApiSpec(Async)");
        }

        return registryDeleteApiSpecCall(project, location, api, version, spec, force, _callback);

    }

    /**
     * 
     * DeleteApiSpec removes a specified spec, all revisions, and all child  resources (e.g. artifacts).
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param force If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public void registryDeleteApiSpec(String project, String location, String api, String version, String spec, Boolean force) throws ApiException {
        registryDeleteApiSpecWithHttpInfo(project, location, api, version, spec, force);
    }

    /**
     * 
     * DeleteApiSpec removes a specified spec, all revisions, and all child  resources (e.g. artifacts).
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param force If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> registryDeleteApiSpecWithHttpInfo(String project, String location, String api, String version, String spec, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = registryDeleteApiSpecValidateBeforeCall(project, location, api, version, spec, force, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * DeleteApiSpec removes a specified spec, all revisions, and all child  resources (e.g. artifacts).
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param force If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryDeleteApiSpecAsync(String project, String location, String api, String version, String spec, Boolean force, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryDeleteApiSpecValidateBeforeCall(project, location, api, version, spec, force, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryDeleteApiSpecRevision
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryDeleteApiSpecRevisionCall(String project, String location, String api, String version, String spec, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:deleteRevision"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "spec" + "}", localVarApiClient.escapeString(spec.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryDeleteApiSpecRevisionValidateBeforeCall(String project, String location, String api, String version, String spec, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryDeleteApiSpecRevision(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryDeleteApiSpecRevision(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryDeleteApiSpecRevision(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling registryDeleteApiSpecRevision(Async)");
        }

        // verify the required parameter 'spec' is set
        if (spec == null) {
            throw new ApiException("Missing the required parameter 'spec' when calling registryDeleteApiSpecRevision(Async)");
        }

        return registryDeleteApiSpecRevisionCall(project, location, api, version, spec, _callback);

    }

    /**
     * 
     * DeleteApiSpecRevision deletes a revision of a spec.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @return ApiSpec
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiSpec registryDeleteApiSpecRevision(String project, String location, String api, String version, String spec) throws ApiException {
        ApiResponse<ApiSpec> localVarResp = registryDeleteApiSpecRevisionWithHttpInfo(project, location, api, version, spec);
        return localVarResp.getData();
    }

    /**
     * 
     * DeleteApiSpecRevision deletes a revision of a spec.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @return ApiResponse&lt;ApiSpec&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiSpec> registryDeleteApiSpecRevisionWithHttpInfo(String project, String location, String api, String version, String spec) throws ApiException {
        okhttp3.Call localVarCall = registryDeleteApiSpecRevisionValidateBeforeCall(project, location, api, version, spec, null);
        Type localVarReturnType = new TypeToken<ApiSpec>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * DeleteApiSpecRevision deletes a revision of a spec.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryDeleteApiSpecRevisionAsync(String project, String location, String api, String version, String spec, final ApiCallback<ApiSpec> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryDeleteApiSpecRevisionValidateBeforeCall(project, location, api, version, spec, _callback);
        Type localVarReturnType = new TypeToken<ApiSpec>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryDeleteApiVersion
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param force If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryDeleteApiVersionCall(String project, String location, String api, String version, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryDeleteApiVersionValidateBeforeCall(String project, String location, String api, String version, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryDeleteApiVersion(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryDeleteApiVersion(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryDeleteApiVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling registryDeleteApiVersion(Async)");
        }

        return registryDeleteApiVersionCall(project, location, api, version, force, _callback);

    }

    /**
     * 
     * DeleteApiVersion removes a specified version and all of the resources that  it owns.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param force If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public void registryDeleteApiVersion(String project, String location, String api, String version, Boolean force) throws ApiException {
        registryDeleteApiVersionWithHttpInfo(project, location, api, version, force);
    }

    /**
     * 
     * DeleteApiVersion removes a specified version and all of the resources that  it owns.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param force If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> registryDeleteApiVersionWithHttpInfo(String project, String location, String api, String version, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = registryDeleteApiVersionValidateBeforeCall(project, location, api, version, force, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * DeleteApiVersion removes a specified version and all of the resources that  it owns.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param force If set to true, any child resources will also be deleted. (Otherwise, the request will only work if there are no child resources.) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryDeleteApiVersionAsync(String project, String location, String api, String version, Boolean force, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryDeleteApiVersionValidateBeforeCall(project, location, api, version, force, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryDeleteArtifact
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param artifact The artifact id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryDeleteArtifactCall(String project, String location, String artifact, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/artifacts/{artifact}"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "artifact" + "}", localVarApiClient.escapeString(artifact.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryDeleteArtifactValidateBeforeCall(String project, String location, String artifact, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryDeleteArtifact(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryDeleteArtifact(Async)");
        }

        // verify the required parameter 'artifact' is set
        if (artifact == null) {
            throw new ApiException("Missing the required parameter 'artifact' when calling registryDeleteArtifact(Async)");
        }

        return registryDeleteArtifactCall(project, location, artifact, _callback);

    }

    /**
     * 
     * DeleteArtifact removes a specified artifact.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param artifact The artifact id. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public void registryDeleteArtifact(String project, String location, String artifact) throws ApiException {
        registryDeleteArtifactWithHttpInfo(project, location, artifact);
    }

    /**
     * 
     * DeleteArtifact removes a specified artifact.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param artifact The artifact id. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> registryDeleteArtifactWithHttpInfo(String project, String location, String artifact) throws ApiException {
        okhttp3.Call localVarCall = registryDeleteArtifactValidateBeforeCall(project, location, artifact, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * DeleteArtifact removes a specified artifact.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param artifact The artifact id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryDeleteArtifactAsync(String project, String location, String artifact, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryDeleteArtifactValidateBeforeCall(project, location, artifact, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryGetApi
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryGetApiCall(String project, String location, String api, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryGetApiValidateBeforeCall(String project, String location, String api, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryGetApi(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryGetApi(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryGetApi(Async)");
        }

        return registryGetApiCall(project, location, api, _callback);

    }

    /**
     * 
     * GetApi returns a specified API.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @return Api
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public Api registryGetApi(String project, String location, String api) throws ApiException {
        ApiResponse<Api> localVarResp = registryGetApiWithHttpInfo(project, location, api);
        return localVarResp.getData();
    }

    /**
     * 
     * GetApi returns a specified API.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @return ApiResponse&lt;Api&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Api> registryGetApiWithHttpInfo(String project, String location, String api) throws ApiException {
        okhttp3.Call localVarCall = registryGetApiValidateBeforeCall(project, location, api, null);
        Type localVarReturnType = new TypeToken<Api>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GetApi returns a specified API.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryGetApiAsync(String project, String location, String api, final ApiCallback<Api> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryGetApiValidateBeforeCall(project, location, api, _callback);
        Type localVarReturnType = new TypeToken<Api>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryGetApiDeployment
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryGetApiDeploymentCall(String project, String location, String api, String deployment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "deployment" + "}", localVarApiClient.escapeString(deployment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryGetApiDeploymentValidateBeforeCall(String project, String location, String api, String deployment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryGetApiDeployment(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryGetApiDeployment(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryGetApiDeployment(Async)");
        }

        // verify the required parameter 'deployment' is set
        if (deployment == null) {
            throw new ApiException("Missing the required parameter 'deployment' when calling registryGetApiDeployment(Async)");
        }

        return registryGetApiDeploymentCall(project, location, api, deployment, _callback);

    }

    /**
     * 
     * GetApiDeployment returns a specified deployment.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @return ApiDeployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiDeployment registryGetApiDeployment(String project, String location, String api, String deployment) throws ApiException {
        ApiResponse<ApiDeployment> localVarResp = registryGetApiDeploymentWithHttpInfo(project, location, api, deployment);
        return localVarResp.getData();
    }

    /**
     * 
     * GetApiDeployment returns a specified deployment.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @return ApiResponse&lt;ApiDeployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiDeployment> registryGetApiDeploymentWithHttpInfo(String project, String location, String api, String deployment) throws ApiException {
        okhttp3.Call localVarCall = registryGetApiDeploymentValidateBeforeCall(project, location, api, deployment, null);
        Type localVarReturnType = new TypeToken<ApiDeployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GetApiDeployment returns a specified deployment.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryGetApiDeploymentAsync(String project, String location, String api, String deployment, final ApiCallback<ApiDeployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryGetApiDeploymentValidateBeforeCall(project, location, api, deployment, _callback);
        Type localVarReturnType = new TypeToken<ApiDeployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryGetApiSpec
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryGetApiSpecCall(String project, String location, String api, String version, String spec, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "spec" + "}", localVarApiClient.escapeString(spec.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryGetApiSpecValidateBeforeCall(String project, String location, String api, String version, String spec, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryGetApiSpec(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryGetApiSpec(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryGetApiSpec(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling registryGetApiSpec(Async)");
        }

        // verify the required parameter 'spec' is set
        if (spec == null) {
            throw new ApiException("Missing the required parameter 'spec' when calling registryGetApiSpec(Async)");
        }

        return registryGetApiSpecCall(project, location, api, version, spec, _callback);

    }

    /**
     * 
     * GetApiSpec returns a specified spec.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @return ApiSpec
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiSpec registryGetApiSpec(String project, String location, String api, String version, String spec) throws ApiException {
        ApiResponse<ApiSpec> localVarResp = registryGetApiSpecWithHttpInfo(project, location, api, version, spec);
        return localVarResp.getData();
    }

    /**
     * 
     * GetApiSpec returns a specified spec.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @return ApiResponse&lt;ApiSpec&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiSpec> registryGetApiSpecWithHttpInfo(String project, String location, String api, String version, String spec) throws ApiException {
        okhttp3.Call localVarCall = registryGetApiSpecValidateBeforeCall(project, location, api, version, spec, null);
        Type localVarReturnType = new TypeToken<ApiSpec>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GetApiSpec returns a specified spec.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryGetApiSpecAsync(String project, String location, String api, String version, String spec, final ApiCallback<ApiSpec> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryGetApiSpecValidateBeforeCall(project, location, api, version, spec, _callback);
        Type localVarReturnType = new TypeToken<ApiSpec>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryGetApiSpecContents
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryGetApiSpecContentsCall(String project, String location, String api, String version, String spec, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:getContents"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "spec" + "}", localVarApiClient.escapeString(spec.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryGetApiSpecContentsValidateBeforeCall(String project, String location, String api, String version, String spec, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryGetApiSpecContents(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryGetApiSpecContents(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryGetApiSpecContents(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling registryGetApiSpecContents(Async)");
        }

        // verify the required parameter 'spec' is set
        if (spec == null) {
            throw new ApiException("Missing the required parameter 'spec' when calling registryGetApiSpecContents(Async)");
        }

        return registryGetApiSpecContentsCall(project, location, api, version, spec, _callback);

    }

    /**
     * 
     * GetApiSpecContents returns the contents of a specified spec.  If specs are stored with GZip compression, the default behavior  is to return the spec uncompressed (the mime_type response field  indicates the exact format returned).
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public void registryGetApiSpecContents(String project, String location, String api, String version, String spec) throws ApiException {
        registryGetApiSpecContentsWithHttpInfo(project, location, api, version, spec);
    }

    /**
     * 
     * GetApiSpecContents returns the contents of a specified spec.  If specs are stored with GZip compression, the default behavior  is to return the spec uncompressed (the mime_type response field  indicates the exact format returned).
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> registryGetApiSpecContentsWithHttpInfo(String project, String location, String api, String version, String spec) throws ApiException {
        okhttp3.Call localVarCall = registryGetApiSpecContentsValidateBeforeCall(project, location, api, version, spec, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * GetApiSpecContents returns the contents of a specified spec.  If specs are stored with GZip compression, the default behavior  is to return the spec uncompressed (the mime_type response field  indicates the exact format returned).
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryGetApiSpecContentsAsync(String project, String location, String api, String version, String spec, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryGetApiSpecContentsValidateBeforeCall(project, location, api, version, spec, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryGetApiVersion
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryGetApiVersionCall(String project, String location, String api, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryGetApiVersionValidateBeforeCall(String project, String location, String api, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryGetApiVersion(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryGetApiVersion(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryGetApiVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling registryGetApiVersion(Async)");
        }

        return registryGetApiVersionCall(project, location, api, version, _callback);

    }

    /**
     * 
     * GetApiVersion returns a specified version.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @return ApiVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiVersion registryGetApiVersion(String project, String location, String api, String version) throws ApiException {
        ApiResponse<ApiVersion> localVarResp = registryGetApiVersionWithHttpInfo(project, location, api, version);
        return localVarResp.getData();
    }

    /**
     * 
     * GetApiVersion returns a specified version.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @return ApiResponse&lt;ApiVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiVersion> registryGetApiVersionWithHttpInfo(String project, String location, String api, String version) throws ApiException {
        okhttp3.Call localVarCall = registryGetApiVersionValidateBeforeCall(project, location, api, version, null);
        Type localVarReturnType = new TypeToken<ApiVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GetApiVersion returns a specified version.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryGetApiVersionAsync(String project, String location, String api, String version, final ApiCallback<ApiVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryGetApiVersionValidateBeforeCall(project, location, api, version, _callback);
        Type localVarReturnType = new TypeToken<ApiVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryGetArtifact
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param artifact The artifact id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryGetArtifactCall(String project, String location, String artifact, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/artifacts/{artifact}"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "artifact" + "}", localVarApiClient.escapeString(artifact.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryGetArtifactValidateBeforeCall(String project, String location, String artifact, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryGetArtifact(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryGetArtifact(Async)");
        }

        // verify the required parameter 'artifact' is set
        if (artifact == null) {
            throw new ApiException("Missing the required parameter 'artifact' when calling registryGetArtifact(Async)");
        }

        return registryGetArtifactCall(project, location, artifact, _callback);

    }

    /**
     * 
     * GetArtifact returns a specified artifact.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param artifact The artifact id. (required)
     * @return Artifact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public Artifact registryGetArtifact(String project, String location, String artifact) throws ApiException {
        ApiResponse<Artifact> localVarResp = registryGetArtifactWithHttpInfo(project, location, artifact);
        return localVarResp.getData();
    }

    /**
     * 
     * GetArtifact returns a specified artifact.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param artifact The artifact id. (required)
     * @return ApiResponse&lt;Artifact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Artifact> registryGetArtifactWithHttpInfo(String project, String location, String artifact) throws ApiException {
        okhttp3.Call localVarCall = registryGetArtifactValidateBeforeCall(project, location, artifact, null);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GetArtifact returns a specified artifact.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param artifact The artifact id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryGetArtifactAsync(String project, String location, String artifact, final ApiCallback<Artifact> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryGetArtifactValidateBeforeCall(project, location, artifact, _callback);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryGetArtifactContents
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param artifact The artifact id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryGetArtifactContentsCall(String project, String location, String artifact, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/artifacts/{artifact}:getContents"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "artifact" + "}", localVarApiClient.escapeString(artifact.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryGetArtifactContentsValidateBeforeCall(String project, String location, String artifact, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryGetArtifactContents(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryGetArtifactContents(Async)");
        }

        // verify the required parameter 'artifact' is set
        if (artifact == null) {
            throw new ApiException("Missing the required parameter 'artifact' when calling registryGetArtifactContents(Async)");
        }

        return registryGetArtifactContentsCall(project, location, artifact, _callback);

    }

    /**
     * 
     * GetArtifactContents returns the contents of a specified artifact.  If artifacts are stored with GZip compression, the default behavior  is to return the artifact uncompressed (the mime_type response field  indicates the exact format returned).
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param artifact The artifact id. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public void registryGetArtifactContents(String project, String location, String artifact) throws ApiException {
        registryGetArtifactContentsWithHttpInfo(project, location, artifact);
    }

    /**
     * 
     * GetArtifactContents returns the contents of a specified artifact.  If artifacts are stored with GZip compression, the default behavior  is to return the artifact uncompressed (the mime_type response field  indicates the exact format returned).
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param artifact The artifact id. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> registryGetArtifactContentsWithHttpInfo(String project, String location, String artifact) throws ApiException {
        okhttp3.Call localVarCall = registryGetArtifactContentsValidateBeforeCall(project, location, artifact, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * GetArtifactContents returns the contents of a specified artifact.  If artifacts are stored with GZip compression, the default behavior  is to return the artifact uncompressed (the mime_type response field  indicates the exact format returned).
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param artifact The artifact id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryGetArtifactContentsAsync(String project, String location, String artifact, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryGetArtifactContentsValidateBeforeCall(project, location, artifact, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryListApiDeploymentRevisions
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param pageSize The maximum number of revisions to return per page. (optional)
     * @param pageToken The page token, received from a previous ListApiDeploymentRevisions call. Provide this to retrieve the subsequent page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryListApiDeploymentRevisionsCall(String project, String location, String api, String deployment, Integer pageSize, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}:listRevisions"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "deployment" + "}", localVarApiClient.escapeString(deployment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryListApiDeploymentRevisionsValidateBeforeCall(String project, String location, String api, String deployment, Integer pageSize, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryListApiDeploymentRevisions(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryListApiDeploymentRevisions(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryListApiDeploymentRevisions(Async)");
        }

        // verify the required parameter 'deployment' is set
        if (deployment == null) {
            throw new ApiException("Missing the required parameter 'deployment' when calling registryListApiDeploymentRevisions(Async)");
        }

        return registryListApiDeploymentRevisionsCall(project, location, api, deployment, pageSize, pageToken, _callback);

    }

    /**
     * 
     * ListApiDeploymentRevisions lists all revisions of a deployment.  Revisions are returned in descending order of revision creation time.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param pageSize The maximum number of revisions to return per page. (optional)
     * @param pageToken The page token, received from a previous ListApiDeploymentRevisions call. Provide this to retrieve the subsequent page. (optional)
     * @return ListApiDeploymentRevisionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ListApiDeploymentRevisionsResponse registryListApiDeploymentRevisions(String project, String location, String api, String deployment, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListApiDeploymentRevisionsResponse> localVarResp = registryListApiDeploymentRevisionsWithHttpInfo(project, location, api, deployment, pageSize, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * ListApiDeploymentRevisions lists all revisions of a deployment.  Revisions are returned in descending order of revision creation time.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param pageSize The maximum number of revisions to return per page. (optional)
     * @param pageToken The page token, received from a previous ListApiDeploymentRevisions call. Provide this to retrieve the subsequent page. (optional)
     * @return ApiResponse&lt;ListApiDeploymentRevisionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListApiDeploymentRevisionsResponse> registryListApiDeploymentRevisionsWithHttpInfo(String project, String location, String api, String deployment, Integer pageSize, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = registryListApiDeploymentRevisionsValidateBeforeCall(project, location, api, deployment, pageSize, pageToken, null);
        Type localVarReturnType = new TypeToken<ListApiDeploymentRevisionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ListApiDeploymentRevisions lists all revisions of a deployment.  Revisions are returned in descending order of revision creation time.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param pageSize The maximum number of revisions to return per page. (optional)
     * @param pageToken The page token, received from a previous ListApiDeploymentRevisions call. Provide this to retrieve the subsequent page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryListApiDeploymentRevisionsAsync(String project, String location, String api, String deployment, Integer pageSize, String pageToken, final ApiCallback<ListApiDeploymentRevisionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryListApiDeploymentRevisionsValidateBeforeCall(project, location, api, deployment, pageSize, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListApiDeploymentRevisionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryListApiDeployments
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param pageSize The maximum number of deployments to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous &#x60;ListApiDeployments&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;ListApiDeployments&#x60; must match the call that provided the page token. (optional)
     * @param filter An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryListApiDeploymentsCall(String project, String location, String api, Integer pageSize, String pageToken, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/deployments"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryListApiDeploymentsValidateBeforeCall(String project, String location, String api, Integer pageSize, String pageToken, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryListApiDeployments(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryListApiDeployments(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryListApiDeployments(Async)");
        }

        return registryListApiDeploymentsCall(project, location, api, pageSize, pageToken, filter, _callback);

    }

    /**
     * 
     * ListApiDeployments returns matching deployments.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param pageSize The maximum number of deployments to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous &#x60;ListApiDeployments&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;ListApiDeployments&#x60; must match the call that provided the page token. (optional)
     * @param filter An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields. (optional)
     * @return ListApiDeploymentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ListApiDeploymentsResponse registryListApiDeployments(String project, String location, String api, Integer pageSize, String pageToken, String filter) throws ApiException {
        ApiResponse<ListApiDeploymentsResponse> localVarResp = registryListApiDeploymentsWithHttpInfo(project, location, api, pageSize, pageToken, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * ListApiDeployments returns matching deployments.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param pageSize The maximum number of deployments to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous &#x60;ListApiDeployments&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;ListApiDeployments&#x60; must match the call that provided the page token. (optional)
     * @param filter An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields. (optional)
     * @return ApiResponse&lt;ListApiDeploymentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListApiDeploymentsResponse> registryListApiDeploymentsWithHttpInfo(String project, String location, String api, Integer pageSize, String pageToken, String filter) throws ApiException {
        okhttp3.Call localVarCall = registryListApiDeploymentsValidateBeforeCall(project, location, api, pageSize, pageToken, filter, null);
        Type localVarReturnType = new TypeToken<ListApiDeploymentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ListApiDeployments returns matching deployments.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param pageSize The maximum number of deployments to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous &#x60;ListApiDeployments&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;ListApiDeployments&#x60; must match the call that provided the page token. (optional)
     * @param filter An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryListApiDeploymentsAsync(String project, String location, String api, Integer pageSize, String pageToken, String filter, final ApiCallback<ListApiDeploymentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryListApiDeploymentsValidateBeforeCall(project, location, api, pageSize, pageToken, filter, _callback);
        Type localVarReturnType = new TypeToken<ListApiDeploymentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryListApiSpecRevisions
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param pageSize The maximum number of revisions to return per page. (optional)
     * @param pageToken The page token, received from a previous ListApiSpecRevisions call. Provide this to retrieve the subsequent page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryListApiSpecRevisionsCall(String project, String location, String api, String version, String spec, Integer pageSize, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:listRevisions"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "spec" + "}", localVarApiClient.escapeString(spec.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryListApiSpecRevisionsValidateBeforeCall(String project, String location, String api, String version, String spec, Integer pageSize, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryListApiSpecRevisions(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryListApiSpecRevisions(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryListApiSpecRevisions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling registryListApiSpecRevisions(Async)");
        }

        // verify the required parameter 'spec' is set
        if (spec == null) {
            throw new ApiException("Missing the required parameter 'spec' when calling registryListApiSpecRevisions(Async)");
        }

        return registryListApiSpecRevisionsCall(project, location, api, version, spec, pageSize, pageToken, _callback);

    }

    /**
     * 
     * ListApiSpecRevisions lists all revisions of a spec.  Revisions are returned in descending order of revision creation time.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param pageSize The maximum number of revisions to return per page. (optional)
     * @param pageToken The page token, received from a previous ListApiSpecRevisions call. Provide this to retrieve the subsequent page. (optional)
     * @return ListApiSpecRevisionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ListApiSpecRevisionsResponse registryListApiSpecRevisions(String project, String location, String api, String version, String spec, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListApiSpecRevisionsResponse> localVarResp = registryListApiSpecRevisionsWithHttpInfo(project, location, api, version, spec, pageSize, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * ListApiSpecRevisions lists all revisions of a spec.  Revisions are returned in descending order of revision creation time.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param pageSize The maximum number of revisions to return per page. (optional)
     * @param pageToken The page token, received from a previous ListApiSpecRevisions call. Provide this to retrieve the subsequent page. (optional)
     * @return ApiResponse&lt;ListApiSpecRevisionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListApiSpecRevisionsResponse> registryListApiSpecRevisionsWithHttpInfo(String project, String location, String api, String version, String spec, Integer pageSize, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = registryListApiSpecRevisionsValidateBeforeCall(project, location, api, version, spec, pageSize, pageToken, null);
        Type localVarReturnType = new TypeToken<ListApiSpecRevisionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ListApiSpecRevisions lists all revisions of a spec.  Revisions are returned in descending order of revision creation time.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param pageSize The maximum number of revisions to return per page. (optional)
     * @param pageToken The page token, received from a previous ListApiSpecRevisions call. Provide this to retrieve the subsequent page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryListApiSpecRevisionsAsync(String project, String location, String api, String version, String spec, Integer pageSize, String pageToken, final ApiCallback<ListApiSpecRevisionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryListApiSpecRevisionsValidateBeforeCall(project, location, api, version, spec, pageSize, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListApiSpecRevisionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryListApiSpecs
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param pageSize The maximum number of specs to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous &#x60;ListApiSpecs&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;ListApiSpecs&#x60; must match the call that provided the page token. (optional)
     * @param filter An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields except contents. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryListApiSpecsCall(String project, String location, String api, String version, Integer pageSize, String pageToken, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryListApiSpecsValidateBeforeCall(String project, String location, String api, String version, Integer pageSize, String pageToken, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryListApiSpecs(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryListApiSpecs(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryListApiSpecs(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling registryListApiSpecs(Async)");
        }

        return registryListApiSpecsCall(project, location, api, version, pageSize, pageToken, filter, _callback);

    }

    /**
     * 
     * ListApiSpecs returns matching specs.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param pageSize The maximum number of specs to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous &#x60;ListApiSpecs&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;ListApiSpecs&#x60; must match the call that provided the page token. (optional)
     * @param filter An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields except contents. (optional)
     * @return ListApiSpecsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ListApiSpecsResponse registryListApiSpecs(String project, String location, String api, String version, Integer pageSize, String pageToken, String filter) throws ApiException {
        ApiResponse<ListApiSpecsResponse> localVarResp = registryListApiSpecsWithHttpInfo(project, location, api, version, pageSize, pageToken, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * ListApiSpecs returns matching specs.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param pageSize The maximum number of specs to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous &#x60;ListApiSpecs&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;ListApiSpecs&#x60; must match the call that provided the page token. (optional)
     * @param filter An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields except contents. (optional)
     * @return ApiResponse&lt;ListApiSpecsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListApiSpecsResponse> registryListApiSpecsWithHttpInfo(String project, String location, String api, String version, Integer pageSize, String pageToken, String filter) throws ApiException {
        okhttp3.Call localVarCall = registryListApiSpecsValidateBeforeCall(project, location, api, version, pageSize, pageToken, filter, null);
        Type localVarReturnType = new TypeToken<ListApiSpecsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ListApiSpecs returns matching specs.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param pageSize The maximum number of specs to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous &#x60;ListApiSpecs&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;ListApiSpecs&#x60; must match the call that provided the page token. (optional)
     * @param filter An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields except contents. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryListApiSpecsAsync(String project, String location, String api, String version, Integer pageSize, String pageToken, String filter, final ApiCallback<ListApiSpecsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryListApiSpecsValidateBeforeCall(project, location, api, version, pageSize, pageToken, filter, _callback);
        Type localVarReturnType = new TypeToken<ListApiSpecsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryListApiVersions
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param pageSize The maximum number of versions to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous &#x60;ListApiVersions&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;ListApiVersions&#x60; must match the call that provided the page token. (optional)
     * @param filter An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryListApiVersionsCall(String project, String location, String api, Integer pageSize, String pageToken, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/versions"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryListApiVersionsValidateBeforeCall(String project, String location, String api, Integer pageSize, String pageToken, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryListApiVersions(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryListApiVersions(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryListApiVersions(Async)");
        }

        return registryListApiVersionsCall(project, location, api, pageSize, pageToken, filter, _callback);

    }

    /**
     * 
     * ListApiVersions returns matching versions.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param pageSize The maximum number of versions to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous &#x60;ListApiVersions&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;ListApiVersions&#x60; must match the call that provided the page token. (optional)
     * @param filter An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields. (optional)
     * @return ListApiVersionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ListApiVersionsResponse registryListApiVersions(String project, String location, String api, Integer pageSize, String pageToken, String filter) throws ApiException {
        ApiResponse<ListApiVersionsResponse> localVarResp = registryListApiVersionsWithHttpInfo(project, location, api, pageSize, pageToken, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * ListApiVersions returns matching versions.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param pageSize The maximum number of versions to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous &#x60;ListApiVersions&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;ListApiVersions&#x60; must match the call that provided the page token. (optional)
     * @param filter An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields. (optional)
     * @return ApiResponse&lt;ListApiVersionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListApiVersionsResponse> registryListApiVersionsWithHttpInfo(String project, String location, String api, Integer pageSize, String pageToken, String filter) throws ApiException {
        okhttp3.Call localVarCall = registryListApiVersionsValidateBeforeCall(project, location, api, pageSize, pageToken, filter, null);
        Type localVarReturnType = new TypeToken<ListApiVersionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ListApiVersions returns matching versions.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param pageSize The maximum number of versions to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous &#x60;ListApiVersions&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;ListApiVersions&#x60; must match the call that provided the page token. (optional)
     * @param filter An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryListApiVersionsAsync(String project, String location, String api, Integer pageSize, String pageToken, String filter, final ApiCallback<ListApiVersionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryListApiVersionsValidateBeforeCall(project, location, api, pageSize, pageToken, filter, _callback);
        Type localVarReturnType = new TypeToken<ListApiVersionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryListApis
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param pageSize The maximum number of APIs to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous &#x60;ListApis&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;ListApis&#x60; must match the call that provided the page token. (optional)
     * @param filter An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryListApisCall(String project, String location, Integer pageSize, String pageToken, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryListApisValidateBeforeCall(String project, String location, Integer pageSize, String pageToken, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryListApis(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryListApis(Async)");
        }

        return registryListApisCall(project, location, pageSize, pageToken, filter, _callback);

    }

    /**
     * 
     * ListApis returns matching APIs.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param pageSize The maximum number of APIs to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous &#x60;ListApis&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;ListApis&#x60; must match the call that provided the page token. (optional)
     * @param filter An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields. (optional)
     * @return ListApisResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ListApisResponse registryListApis(String project, String location, Integer pageSize, String pageToken, String filter) throws ApiException {
        ApiResponse<ListApisResponse> localVarResp = registryListApisWithHttpInfo(project, location, pageSize, pageToken, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * ListApis returns matching APIs.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param pageSize The maximum number of APIs to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous &#x60;ListApis&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;ListApis&#x60; must match the call that provided the page token. (optional)
     * @param filter An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields. (optional)
     * @return ApiResponse&lt;ListApisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListApisResponse> registryListApisWithHttpInfo(String project, String location, Integer pageSize, String pageToken, String filter) throws ApiException {
        okhttp3.Call localVarCall = registryListApisValidateBeforeCall(project, location, pageSize, pageToken, filter, null);
        Type localVarReturnType = new TypeToken<ListApisResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ListApis returns matching APIs.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param pageSize The maximum number of APIs to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous &#x60;ListApis&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;ListApis&#x60; must match the call that provided the page token. (optional)
     * @param filter An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryListApisAsync(String project, String location, Integer pageSize, String pageToken, String filter, final ApiCallback<ListApisResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryListApisValidateBeforeCall(project, location, pageSize, pageToken, filter, _callback);
        Type localVarReturnType = new TypeToken<ListApisResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryListArtifacts
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param pageSize The maximum number of artifacts to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous &#x60;ListArtifacts&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;ListArtifacts&#x60; must match the call that provided the page token. (optional)
     * @param filter An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields except contents. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryListArtifactsCall(String project, String location, Integer pageSize, String pageToken, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/artifacts"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryListArtifactsValidateBeforeCall(String project, String location, Integer pageSize, String pageToken, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryListArtifacts(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryListArtifacts(Async)");
        }

        return registryListArtifactsCall(project, location, pageSize, pageToken, filter, _callback);

    }

    /**
     * 
     * ListArtifacts returns matching artifacts.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param pageSize The maximum number of artifacts to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous &#x60;ListArtifacts&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;ListArtifacts&#x60; must match the call that provided the page token. (optional)
     * @param filter An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields except contents. (optional)
     * @return ListArtifactsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ListArtifactsResponse registryListArtifacts(String project, String location, Integer pageSize, String pageToken, String filter) throws ApiException {
        ApiResponse<ListArtifactsResponse> localVarResp = registryListArtifactsWithHttpInfo(project, location, pageSize, pageToken, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * ListArtifacts returns matching artifacts.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param pageSize The maximum number of artifacts to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous &#x60;ListArtifacts&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;ListArtifacts&#x60; must match the call that provided the page token. (optional)
     * @param filter An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields except contents. (optional)
     * @return ApiResponse&lt;ListArtifactsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListArtifactsResponse> registryListArtifactsWithHttpInfo(String project, String location, Integer pageSize, String pageToken, String filter) throws ApiException {
        okhttp3.Call localVarCall = registryListArtifactsValidateBeforeCall(project, location, pageSize, pageToken, filter, null);
        Type localVarReturnType = new TypeToken<ListArtifactsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ListArtifacts returns matching artifacts.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param pageSize The maximum number of artifacts to return. The service may return fewer than this value. If unspecified, at most 50 values will be returned. The maximum is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous &#x60;ListArtifacts&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;ListArtifacts&#x60; must match the call that provided the page token. (optional)
     * @param filter An expression that can be used to filter the list. Filters use the Common Expression Language and can refer to all message fields except contents. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryListArtifactsAsync(String project, String location, Integer pageSize, String pageToken, String filter, final ApiCallback<ListArtifactsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryListArtifactsValidateBeforeCall(project, location, pageSize, pageToken, filter, _callback);
        Type localVarReturnType = new TypeToken<ListArtifactsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryReplaceArtifact
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param artifact The artifact id. (required)
     * @param artifact2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryReplaceArtifactCall(String project, String location, String artifact, Artifact artifact2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = artifact2;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/artifacts/{artifact}"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "artifact" + "}", localVarApiClient.escapeString(artifact.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryReplaceArtifactValidateBeforeCall(String project, String location, String artifact, Artifact artifact2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryReplaceArtifact(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryReplaceArtifact(Async)");
        }

        // verify the required parameter 'artifact' is set
        if (artifact == null) {
            throw new ApiException("Missing the required parameter 'artifact' when calling registryReplaceArtifact(Async)");
        }

        // verify the required parameter 'artifact2' is set
        if (artifact2 == null) {
            throw new ApiException("Missing the required parameter 'artifact2' when calling registryReplaceArtifact(Async)");
        }

        return registryReplaceArtifactCall(project, location, artifact, artifact2, _callback);

    }

    /**
     * 
     * ReplaceArtifact can be used to replace a specified artifact.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param artifact The artifact id. (required)
     * @param artifact2  (required)
     * @return Artifact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public Artifact registryReplaceArtifact(String project, String location, String artifact, Artifact artifact2) throws ApiException {
        ApiResponse<Artifact> localVarResp = registryReplaceArtifactWithHttpInfo(project, location, artifact, artifact2);
        return localVarResp.getData();
    }

    /**
     * 
     * ReplaceArtifact can be used to replace a specified artifact.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param artifact The artifact id. (required)
     * @param artifact2  (required)
     * @return ApiResponse&lt;Artifact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Artifact> registryReplaceArtifactWithHttpInfo(String project, String location, String artifact, Artifact artifact2) throws ApiException {
        okhttp3.Call localVarCall = registryReplaceArtifactValidateBeforeCall(project, location, artifact, artifact2, null);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ReplaceArtifact can be used to replace a specified artifact.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param artifact The artifact id. (required)
     * @param artifact2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryReplaceArtifactAsync(String project, String location, String artifact, Artifact artifact2, final ApiCallback<Artifact> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryReplaceArtifactValidateBeforeCall(project, location, artifact, artifact2, _callback);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryRollbackApiDeployment
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param rollbackApiDeploymentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryRollbackApiDeploymentCall(String project, String location, String api, String deployment, RollbackApiDeploymentRequest rollbackApiDeploymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rollbackApiDeploymentRequest;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}:rollback"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "deployment" + "}", localVarApiClient.escapeString(deployment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryRollbackApiDeploymentValidateBeforeCall(String project, String location, String api, String deployment, RollbackApiDeploymentRequest rollbackApiDeploymentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryRollbackApiDeployment(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryRollbackApiDeployment(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryRollbackApiDeployment(Async)");
        }

        // verify the required parameter 'deployment' is set
        if (deployment == null) {
            throw new ApiException("Missing the required parameter 'deployment' when calling registryRollbackApiDeployment(Async)");
        }

        // verify the required parameter 'rollbackApiDeploymentRequest' is set
        if (rollbackApiDeploymentRequest == null) {
            throw new ApiException("Missing the required parameter 'rollbackApiDeploymentRequest' when calling registryRollbackApiDeployment(Async)");
        }

        return registryRollbackApiDeploymentCall(project, location, api, deployment, rollbackApiDeploymentRequest, _callback);

    }

    /**
     * 
     * RollbackApiDeployment sets the current revision to a specified prior  revision. Note that this creates a new revision with a new revision ID.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param rollbackApiDeploymentRequest  (required)
     * @return ApiDeployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiDeployment registryRollbackApiDeployment(String project, String location, String api, String deployment, RollbackApiDeploymentRequest rollbackApiDeploymentRequest) throws ApiException {
        ApiResponse<ApiDeployment> localVarResp = registryRollbackApiDeploymentWithHttpInfo(project, location, api, deployment, rollbackApiDeploymentRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * RollbackApiDeployment sets the current revision to a specified prior  revision. Note that this creates a new revision with a new revision ID.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param rollbackApiDeploymentRequest  (required)
     * @return ApiResponse&lt;ApiDeployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiDeployment> registryRollbackApiDeploymentWithHttpInfo(String project, String location, String api, String deployment, RollbackApiDeploymentRequest rollbackApiDeploymentRequest) throws ApiException {
        okhttp3.Call localVarCall = registryRollbackApiDeploymentValidateBeforeCall(project, location, api, deployment, rollbackApiDeploymentRequest, null);
        Type localVarReturnType = new TypeToken<ApiDeployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * RollbackApiDeployment sets the current revision to a specified prior  revision. Note that this creates a new revision with a new revision ID.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param rollbackApiDeploymentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryRollbackApiDeploymentAsync(String project, String location, String api, String deployment, RollbackApiDeploymentRequest rollbackApiDeploymentRequest, final ApiCallback<ApiDeployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryRollbackApiDeploymentValidateBeforeCall(project, location, api, deployment, rollbackApiDeploymentRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiDeployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryRollbackApiSpec
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param rollbackApiSpecRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryRollbackApiSpecCall(String project, String location, String api, String version, String spec, RollbackApiSpecRequest rollbackApiSpecRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rollbackApiSpecRequest;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:rollback"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "spec" + "}", localVarApiClient.escapeString(spec.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryRollbackApiSpecValidateBeforeCall(String project, String location, String api, String version, String spec, RollbackApiSpecRequest rollbackApiSpecRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryRollbackApiSpec(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryRollbackApiSpec(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryRollbackApiSpec(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling registryRollbackApiSpec(Async)");
        }

        // verify the required parameter 'spec' is set
        if (spec == null) {
            throw new ApiException("Missing the required parameter 'spec' when calling registryRollbackApiSpec(Async)");
        }

        // verify the required parameter 'rollbackApiSpecRequest' is set
        if (rollbackApiSpecRequest == null) {
            throw new ApiException("Missing the required parameter 'rollbackApiSpecRequest' when calling registryRollbackApiSpec(Async)");
        }

        return registryRollbackApiSpecCall(project, location, api, version, spec, rollbackApiSpecRequest, _callback);

    }

    /**
     * 
     * RollbackApiSpec sets the current revision to a specified prior revision.  Note that this creates a new revision with a new revision ID.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param rollbackApiSpecRequest  (required)
     * @return ApiSpec
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiSpec registryRollbackApiSpec(String project, String location, String api, String version, String spec, RollbackApiSpecRequest rollbackApiSpecRequest) throws ApiException {
        ApiResponse<ApiSpec> localVarResp = registryRollbackApiSpecWithHttpInfo(project, location, api, version, spec, rollbackApiSpecRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * RollbackApiSpec sets the current revision to a specified prior revision.  Note that this creates a new revision with a new revision ID.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param rollbackApiSpecRequest  (required)
     * @return ApiResponse&lt;ApiSpec&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiSpec> registryRollbackApiSpecWithHttpInfo(String project, String location, String api, String version, String spec, RollbackApiSpecRequest rollbackApiSpecRequest) throws ApiException {
        okhttp3.Call localVarCall = registryRollbackApiSpecValidateBeforeCall(project, location, api, version, spec, rollbackApiSpecRequest, null);
        Type localVarReturnType = new TypeToken<ApiSpec>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * RollbackApiSpec sets the current revision to a specified prior revision.  Note that this creates a new revision with a new revision ID.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param rollbackApiSpecRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryRollbackApiSpecAsync(String project, String location, String api, String version, String spec, RollbackApiSpecRequest rollbackApiSpecRequest, final ApiCallback<ApiSpec> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryRollbackApiSpecValidateBeforeCall(project, location, api, version, spec, rollbackApiSpecRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiSpec>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryTagApiDeploymentRevision
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param tagApiDeploymentRevisionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryTagApiDeploymentRevisionCall(String project, String location, String api, String deployment, TagApiDeploymentRevisionRequest tagApiDeploymentRevisionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagApiDeploymentRevisionRequest;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}:tagRevision"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "deployment" + "}", localVarApiClient.escapeString(deployment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryTagApiDeploymentRevisionValidateBeforeCall(String project, String location, String api, String deployment, TagApiDeploymentRevisionRequest tagApiDeploymentRevisionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryTagApiDeploymentRevision(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryTagApiDeploymentRevision(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryTagApiDeploymentRevision(Async)");
        }

        // verify the required parameter 'deployment' is set
        if (deployment == null) {
            throw new ApiException("Missing the required parameter 'deployment' when calling registryTagApiDeploymentRevision(Async)");
        }

        // verify the required parameter 'tagApiDeploymentRevisionRequest' is set
        if (tagApiDeploymentRevisionRequest == null) {
            throw new ApiException("Missing the required parameter 'tagApiDeploymentRevisionRequest' when calling registryTagApiDeploymentRevision(Async)");
        }

        return registryTagApiDeploymentRevisionCall(project, location, api, deployment, tagApiDeploymentRevisionRequest, _callback);

    }

    /**
     * 
     * TagApiDeploymentRevision adds a tag to a specified revision of a  deployment.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param tagApiDeploymentRevisionRequest  (required)
     * @return ApiDeployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiDeployment registryTagApiDeploymentRevision(String project, String location, String api, String deployment, TagApiDeploymentRevisionRequest tagApiDeploymentRevisionRequest) throws ApiException {
        ApiResponse<ApiDeployment> localVarResp = registryTagApiDeploymentRevisionWithHttpInfo(project, location, api, deployment, tagApiDeploymentRevisionRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * TagApiDeploymentRevision adds a tag to a specified revision of a  deployment.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param tagApiDeploymentRevisionRequest  (required)
     * @return ApiResponse&lt;ApiDeployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiDeployment> registryTagApiDeploymentRevisionWithHttpInfo(String project, String location, String api, String deployment, TagApiDeploymentRevisionRequest tagApiDeploymentRevisionRequest) throws ApiException {
        okhttp3.Call localVarCall = registryTagApiDeploymentRevisionValidateBeforeCall(project, location, api, deployment, tagApiDeploymentRevisionRequest, null);
        Type localVarReturnType = new TypeToken<ApiDeployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * TagApiDeploymentRevision adds a tag to a specified revision of a  deployment.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param tagApiDeploymentRevisionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryTagApiDeploymentRevisionAsync(String project, String location, String api, String deployment, TagApiDeploymentRevisionRequest tagApiDeploymentRevisionRequest, final ApiCallback<ApiDeployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryTagApiDeploymentRevisionValidateBeforeCall(project, location, api, deployment, tagApiDeploymentRevisionRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiDeployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryTagApiSpecRevision
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param tagApiSpecRevisionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryTagApiSpecRevisionCall(String project, String location, String api, String version, String spec, TagApiSpecRevisionRequest tagApiSpecRevisionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagApiSpecRevisionRequest;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}:tagRevision"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "spec" + "}", localVarApiClient.escapeString(spec.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryTagApiSpecRevisionValidateBeforeCall(String project, String location, String api, String version, String spec, TagApiSpecRevisionRequest tagApiSpecRevisionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryTagApiSpecRevision(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryTagApiSpecRevision(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryTagApiSpecRevision(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling registryTagApiSpecRevision(Async)");
        }

        // verify the required parameter 'spec' is set
        if (spec == null) {
            throw new ApiException("Missing the required parameter 'spec' when calling registryTagApiSpecRevision(Async)");
        }

        // verify the required parameter 'tagApiSpecRevisionRequest' is set
        if (tagApiSpecRevisionRequest == null) {
            throw new ApiException("Missing the required parameter 'tagApiSpecRevisionRequest' when calling registryTagApiSpecRevision(Async)");
        }

        return registryTagApiSpecRevisionCall(project, location, api, version, spec, tagApiSpecRevisionRequest, _callback);

    }

    /**
     * 
     * TagApiSpecRevision adds a tag to a specified revision of a spec.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param tagApiSpecRevisionRequest  (required)
     * @return ApiSpec
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiSpec registryTagApiSpecRevision(String project, String location, String api, String version, String spec, TagApiSpecRevisionRequest tagApiSpecRevisionRequest) throws ApiException {
        ApiResponse<ApiSpec> localVarResp = registryTagApiSpecRevisionWithHttpInfo(project, location, api, version, spec, tagApiSpecRevisionRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * TagApiSpecRevision adds a tag to a specified revision of a spec.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param tagApiSpecRevisionRequest  (required)
     * @return ApiResponse&lt;ApiSpec&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiSpec> registryTagApiSpecRevisionWithHttpInfo(String project, String location, String api, String version, String spec, TagApiSpecRevisionRequest tagApiSpecRevisionRequest) throws ApiException {
        okhttp3.Call localVarCall = registryTagApiSpecRevisionValidateBeforeCall(project, location, api, version, spec, tagApiSpecRevisionRequest, null);
        Type localVarReturnType = new TypeToken<ApiSpec>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * TagApiSpecRevision adds a tag to a specified revision of a spec.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param tagApiSpecRevisionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryTagApiSpecRevisionAsync(String project, String location, String api, String version, String spec, TagApiSpecRevisionRequest tagApiSpecRevisionRequest, final ApiCallback<ApiSpec> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryTagApiSpecRevisionValidateBeforeCall(project, location, api, version, spec, tagApiSpecRevisionRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiSpec>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryUpdateApi
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param api2  (required)
     * @param updateMask The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \&quot;*\&quot; is specified, all fields are updated, including fields that are unspecified/default in the request. (optional)
     * @param allowMissing If set to true, and the api is not found, a new api_versions will be created. In this situation, &#x60;update_mask&#x60; is ignored. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryUpdateApiCall(String project, String location, String api, Api api2, String updateMask, Boolean allowMissing, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = api2;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMask != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMask", updateMask));
        }

        if (allowMissing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowMissing", allowMissing));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryUpdateApiValidateBeforeCall(String project, String location, String api, Api api2, String updateMask, Boolean allowMissing, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryUpdateApi(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryUpdateApi(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryUpdateApi(Async)");
        }

        // verify the required parameter 'api2' is set
        if (api2 == null) {
            throw new ApiException("Missing the required parameter 'api2' when calling registryUpdateApi(Async)");
        }

        return registryUpdateApiCall(project, location, api, api2, updateMask, allowMissing, _callback);

    }

    /**
     * 
     * UpdateApi can be used to modify a specified API.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param api2  (required)
     * @param updateMask The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \&quot;*\&quot; is specified, all fields are updated, including fields that are unspecified/default in the request. (optional)
     * @param allowMissing If set to true, and the api is not found, a new api_versions will be created. In this situation, &#x60;update_mask&#x60; is ignored. (optional)
     * @return Api
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public Api registryUpdateApi(String project, String location, String api, Api api2, String updateMask, Boolean allowMissing) throws ApiException {
        ApiResponse<Api> localVarResp = registryUpdateApiWithHttpInfo(project, location, api, api2, updateMask, allowMissing);
        return localVarResp.getData();
    }

    /**
     * 
     * UpdateApi can be used to modify a specified API.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param api2  (required)
     * @param updateMask The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \&quot;*\&quot; is specified, all fields are updated, including fields that are unspecified/default in the request. (optional)
     * @param allowMissing If set to true, and the api is not found, a new api_versions will be created. In this situation, &#x60;update_mask&#x60; is ignored. (optional)
     * @return ApiResponse&lt;Api&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Api> registryUpdateApiWithHttpInfo(String project, String location, String api, Api api2, String updateMask, Boolean allowMissing) throws ApiException {
        okhttp3.Call localVarCall = registryUpdateApiValidateBeforeCall(project, location, api, api2, updateMask, allowMissing, null);
        Type localVarReturnType = new TypeToken<Api>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UpdateApi can be used to modify a specified API.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param api2  (required)
     * @param updateMask The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \&quot;*\&quot; is specified, all fields are updated, including fields that are unspecified/default in the request. (optional)
     * @param allowMissing If set to true, and the api is not found, a new api_versions will be created. In this situation, &#x60;update_mask&#x60; is ignored. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryUpdateApiAsync(String project, String location, String api, Api api2, String updateMask, Boolean allowMissing, final ApiCallback<Api> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryUpdateApiValidateBeforeCall(project, location, api, api2, updateMask, allowMissing, _callback);
        Type localVarReturnType = new TypeToken<Api>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryUpdateApiDeployment
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param apiDeployment  (required)
     * @param updateMask The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \&quot;*\&quot; is specified, all fields are updated, including fields that are unspecified/default in the request. (optional)
     * @param allowMissing If set to true, and the deployment is not found, a new deployment will be created. In this situation, &#x60;update_mask&#x60; is ignored. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryUpdateApiDeploymentCall(String project, String location, String api, String deployment, ApiDeployment apiDeployment, String updateMask, Boolean allowMissing, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiDeployment;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "deployment" + "}", localVarApiClient.escapeString(deployment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMask != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMask", updateMask));
        }

        if (allowMissing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowMissing", allowMissing));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryUpdateApiDeploymentValidateBeforeCall(String project, String location, String api, String deployment, ApiDeployment apiDeployment, String updateMask, Boolean allowMissing, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryUpdateApiDeployment(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryUpdateApiDeployment(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryUpdateApiDeployment(Async)");
        }

        // verify the required parameter 'deployment' is set
        if (deployment == null) {
            throw new ApiException("Missing the required parameter 'deployment' when calling registryUpdateApiDeployment(Async)");
        }

        // verify the required parameter 'apiDeployment' is set
        if (apiDeployment == null) {
            throw new ApiException("Missing the required parameter 'apiDeployment' when calling registryUpdateApiDeployment(Async)");
        }

        return registryUpdateApiDeploymentCall(project, location, api, deployment, apiDeployment, updateMask, allowMissing, _callback);

    }

    /**
     * 
     * UpdateApiDeployment can be used to modify a specified deployment.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param apiDeployment  (required)
     * @param updateMask The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \&quot;*\&quot; is specified, all fields are updated, including fields that are unspecified/default in the request. (optional)
     * @param allowMissing If set to true, and the deployment is not found, a new deployment will be created. In this situation, &#x60;update_mask&#x60; is ignored. (optional)
     * @return ApiDeployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiDeployment registryUpdateApiDeployment(String project, String location, String api, String deployment, ApiDeployment apiDeployment, String updateMask, Boolean allowMissing) throws ApiException {
        ApiResponse<ApiDeployment> localVarResp = registryUpdateApiDeploymentWithHttpInfo(project, location, api, deployment, apiDeployment, updateMask, allowMissing);
        return localVarResp.getData();
    }

    /**
     * 
     * UpdateApiDeployment can be used to modify a specified deployment.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param apiDeployment  (required)
     * @param updateMask The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \&quot;*\&quot; is specified, all fields are updated, including fields that are unspecified/default in the request. (optional)
     * @param allowMissing If set to true, and the deployment is not found, a new deployment will be created. In this situation, &#x60;update_mask&#x60; is ignored. (optional)
     * @return ApiResponse&lt;ApiDeployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiDeployment> registryUpdateApiDeploymentWithHttpInfo(String project, String location, String api, String deployment, ApiDeployment apiDeployment, String updateMask, Boolean allowMissing) throws ApiException {
        okhttp3.Call localVarCall = registryUpdateApiDeploymentValidateBeforeCall(project, location, api, deployment, apiDeployment, updateMask, allowMissing, null);
        Type localVarReturnType = new TypeToken<ApiDeployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UpdateApiDeployment can be used to modify a specified deployment.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param deployment The deployment id. (required)
     * @param apiDeployment  (required)
     * @param updateMask The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \&quot;*\&quot; is specified, all fields are updated, including fields that are unspecified/default in the request. (optional)
     * @param allowMissing If set to true, and the deployment is not found, a new deployment will be created. In this situation, &#x60;update_mask&#x60; is ignored. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryUpdateApiDeploymentAsync(String project, String location, String api, String deployment, ApiDeployment apiDeployment, String updateMask, Boolean allowMissing, final ApiCallback<ApiDeployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryUpdateApiDeploymentValidateBeforeCall(project, location, api, deployment, apiDeployment, updateMask, allowMissing, _callback);
        Type localVarReturnType = new TypeToken<ApiDeployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryUpdateApiSpec
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param apiSpec  (required)
     * @param updateMask The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \&quot;*\&quot; is specified, all fields are updated, including fields that are unspecified/default in the request. (optional)
     * @param allowMissing If set to true, and the spec is not found, a new spec will be created. In this situation, &#x60;update_mask&#x60; is ignored. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryUpdateApiSpecCall(String project, String location, String api, String version, String spec, ApiSpec apiSpec, String updateMask, Boolean allowMissing, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiSpec;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "spec" + "}", localVarApiClient.escapeString(spec.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMask != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMask", updateMask));
        }

        if (allowMissing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowMissing", allowMissing));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryUpdateApiSpecValidateBeforeCall(String project, String location, String api, String version, String spec, ApiSpec apiSpec, String updateMask, Boolean allowMissing, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryUpdateApiSpec(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryUpdateApiSpec(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryUpdateApiSpec(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling registryUpdateApiSpec(Async)");
        }

        // verify the required parameter 'spec' is set
        if (spec == null) {
            throw new ApiException("Missing the required parameter 'spec' when calling registryUpdateApiSpec(Async)");
        }

        // verify the required parameter 'apiSpec' is set
        if (apiSpec == null) {
            throw new ApiException("Missing the required parameter 'apiSpec' when calling registryUpdateApiSpec(Async)");
        }

        return registryUpdateApiSpecCall(project, location, api, version, spec, apiSpec, updateMask, allowMissing, _callback);

    }

    /**
     * 
     * UpdateApiSpec can be used to modify a specified spec.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param apiSpec  (required)
     * @param updateMask The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \&quot;*\&quot; is specified, all fields are updated, including fields that are unspecified/default in the request. (optional)
     * @param allowMissing If set to true, and the spec is not found, a new spec will be created. In this situation, &#x60;update_mask&#x60; is ignored. (optional)
     * @return ApiSpec
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiSpec registryUpdateApiSpec(String project, String location, String api, String version, String spec, ApiSpec apiSpec, String updateMask, Boolean allowMissing) throws ApiException {
        ApiResponse<ApiSpec> localVarResp = registryUpdateApiSpecWithHttpInfo(project, location, api, version, spec, apiSpec, updateMask, allowMissing);
        return localVarResp.getData();
    }

    /**
     * 
     * UpdateApiSpec can be used to modify a specified spec.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param apiSpec  (required)
     * @param updateMask The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \&quot;*\&quot; is specified, all fields are updated, including fields that are unspecified/default in the request. (optional)
     * @param allowMissing If set to true, and the spec is not found, a new spec will be created. In this situation, &#x60;update_mask&#x60; is ignored. (optional)
     * @return ApiResponse&lt;ApiSpec&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiSpec> registryUpdateApiSpecWithHttpInfo(String project, String location, String api, String version, String spec, ApiSpec apiSpec, String updateMask, Boolean allowMissing) throws ApiException {
        okhttp3.Call localVarCall = registryUpdateApiSpecValidateBeforeCall(project, location, api, version, spec, apiSpec, updateMask, allowMissing, null);
        Type localVarReturnType = new TypeToken<ApiSpec>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UpdateApiSpec can be used to modify a specified spec.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param spec The spec id. (required)
     * @param apiSpec  (required)
     * @param updateMask The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \&quot;*\&quot; is specified, all fields are updated, including fields that are unspecified/default in the request. (optional)
     * @param allowMissing If set to true, and the spec is not found, a new spec will be created. In this situation, &#x60;update_mask&#x60; is ignored. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryUpdateApiSpecAsync(String project, String location, String api, String version, String spec, ApiSpec apiSpec, String updateMask, Boolean allowMissing, final ApiCallback<ApiSpec> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryUpdateApiSpecValidateBeforeCall(project, location, api, version, spec, apiSpec, updateMask, allowMissing, _callback);
        Type localVarReturnType = new TypeToken<ApiSpec>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registryUpdateApiVersion
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param apiVersion  (required)
     * @param updateMask The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \&quot;*\&quot; is specified, all fields are updated, including fields that are unspecified/default in the request. (optional)
     * @param allowMissing If set to true, and the version is not found, a new version will be created. In this situation, &#x60;update_mask&#x60; is ignored. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryUpdateApiVersionCall(String project, String location, String api, String version, ApiVersion apiVersion, String updateMask, Boolean allowMissing, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiVersion;

        // create path and map variables
        String localVarPath = "/v1/projects/{project}/locations/{location}/apis/{api}/versions/{version}"
            .replace("{" + "project" + "}", localVarApiClient.escapeString(project.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMask != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMask", updateMask));
        }

        if (allowMissing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowMissing", allowMissing));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registryUpdateApiVersionValidateBeforeCall(String project, String location, String api, String version, ApiVersion apiVersion, String updateMask, Boolean allowMissing, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling registryUpdateApiVersion(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling registryUpdateApiVersion(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling registryUpdateApiVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling registryUpdateApiVersion(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling registryUpdateApiVersion(Async)");
        }

        return registryUpdateApiVersionCall(project, location, api, version, apiVersion, updateMask, allowMissing, _callback);

    }

    /**
     * 
     * UpdateApiVersion can be used to modify a specified version.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param apiVersion  (required)
     * @param updateMask The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \&quot;*\&quot; is specified, all fields are updated, including fields that are unspecified/default in the request. (optional)
     * @param allowMissing If set to true, and the version is not found, a new version will be created. In this situation, &#x60;update_mask&#x60; is ignored. (optional)
     * @return ApiVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiVersion registryUpdateApiVersion(String project, String location, String api, String version, ApiVersion apiVersion, String updateMask, Boolean allowMissing) throws ApiException {
        ApiResponse<ApiVersion> localVarResp = registryUpdateApiVersionWithHttpInfo(project, location, api, version, apiVersion, updateMask, allowMissing);
        return localVarResp.getData();
    }

    /**
     * 
     * UpdateApiVersion can be used to modify a specified version.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param apiVersion  (required)
     * @param updateMask The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \&quot;*\&quot; is specified, all fields are updated, including fields that are unspecified/default in the request. (optional)
     * @param allowMissing If set to true, and the version is not found, a new version will be created. In this situation, &#x60;update_mask&#x60; is ignored. (optional)
     * @return ApiResponse&lt;ApiVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiVersion> registryUpdateApiVersionWithHttpInfo(String project, String location, String api, String version, ApiVersion apiVersion, String updateMask, Boolean allowMissing) throws ApiException {
        okhttp3.Call localVarCall = registryUpdateApiVersionValidateBeforeCall(project, location, api, version, apiVersion, updateMask, allowMissing, null);
        Type localVarReturnType = new TypeToken<ApiVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UpdateApiVersion can be used to modify a specified version.
     * @param project The project id. (required)
     * @param location The location id. (required)
     * @param api The api id. (required)
     * @param version The version id. (required)
     * @param apiVersion  (required)
     * @param updateMask The list of fields to be updated. If omitted, all fields are updated that are set in the request message (fields set to default values are ignored). If a \&quot;*\&quot; is specified, all fields are updated, including fields that are unspecified/default in the request. (optional)
     * @param allowMissing If set to true, and the version is not found, a new version will be created. In this situation, &#x60;update_mask&#x60; is ignored. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registryUpdateApiVersionAsync(String project, String location, String api, String version, ApiVersion apiVersion, String updateMask, Boolean allowMissing, final ApiCallback<ApiVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = registryUpdateApiVersionValidateBeforeCall(project, location, api, version, apiVersion, updateMask, allowMissing, _callback);
        Type localVarReturnType = new TypeToken<ApiVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
