/*
 * Registry API
 * The Registry service allows teams to manage descriptions of APIs.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Api;
import org.openapitools.client.model.ApiDeployment;
import org.openapitools.client.model.ApiSpec;
import org.openapitools.client.model.ApiVersion;
import org.openapitools.client.model.Artifact;
import org.openapitools.client.model.ListApiDeploymentRevisionsResponse;
import org.openapitools.client.model.ListApiDeploymentsResponse;
import org.openapitools.client.model.ListApiSpecRevisionsResponse;
import org.openapitools.client.model.ListApiSpecsResponse;
import org.openapitools.client.model.ListApiVersionsResponse;
import org.openapitools.client.model.ListApisResponse;
import org.openapitools.client.model.ListArtifactsResponse;
import org.openapitools.client.model.RollbackApiDeploymentRequest;
import org.openapitools.client.model.RollbackApiSpecRequest;
import org.openapitools.client.model.Status;
import org.openapitools.client.model.TagApiDeploymentRevisionRequest;
import org.openapitools.client.model.TagApiSpecRevisionRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RegistryApi
 */
@Disabled
public class RegistryApiTest {

    private final RegistryApi api = new RegistryApi();

    /**
     * CreateApi creates a specified API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryCreateApiTest() throws ApiException {
        String project = null;
        String location = null;
        Api api = null;
        String apiId = null;
        Api response = api.registryCreateApi(project, location, api, apiId);
        // TODO: test validations
    }

    /**
     * CreateApiDeployment creates a specified deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryCreateApiDeploymentTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        ApiDeployment apiDeployment = null;
        String apiDeploymentId = null;
        ApiDeployment response = api.registryCreateApiDeployment(project, location, api, apiDeployment, apiDeploymentId);
        // TODO: test validations
    }

    /**
     * CreateApiSpec creates a specified spec.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryCreateApiSpecTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        String version = null;
        ApiSpec apiSpec = null;
        String apiSpecId = null;
        ApiSpec response = api.registryCreateApiSpec(project, location, api, version, apiSpec, apiSpecId);
        // TODO: test validations
    }

    /**
     * CreateApiVersion creates a specified version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryCreateApiVersionTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        ApiVersion apiVersion = null;
        String apiVersionId = null;
        ApiVersion response = api.registryCreateApiVersion(project, location, api, apiVersion, apiVersionId);
        // TODO: test validations
    }

    /**
     * CreateArtifact creates a specified artifact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryCreateArtifactTest() throws ApiException {
        String project = null;
        String location = null;
        Artifact artifact = null;
        String artifactId = null;
        Artifact response = api.registryCreateArtifact(project, location, artifact, artifactId);
        // TODO: test validations
    }

    /**
     * DeleteApi removes a specified API and all of the resources that it  owns.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryDeleteApiTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        Boolean force = null;
        api.registryDeleteApi(project, location, api, force);
        // TODO: test validations
    }

    /**
     * DeleteApiDeployment removes a specified deployment, all revisions, and all  child resources (e.g. artifacts).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryDeleteApiDeploymentTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        String deployment = null;
        Boolean force = null;
        api.registryDeleteApiDeployment(project, location, api, deployment, force);
        // TODO: test validations
    }

    /**
     * DeleteApiDeploymentRevision deletes a revision of a deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryDeleteApiDeploymentRevisionTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        String deployment = null;
        ApiDeployment response = api.registryDeleteApiDeploymentRevision(project, location, api, deployment);
        // TODO: test validations
    }

    /**
     * DeleteApiSpec removes a specified spec, all revisions, and all child  resources (e.g. artifacts).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryDeleteApiSpecTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        String version = null;
        String spec = null;
        Boolean force = null;
        api.registryDeleteApiSpec(project, location, api, version, spec, force);
        // TODO: test validations
    }

    /**
     * DeleteApiSpecRevision deletes a revision of a spec.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryDeleteApiSpecRevisionTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        String version = null;
        String spec = null;
        ApiSpec response = api.registryDeleteApiSpecRevision(project, location, api, version, spec);
        // TODO: test validations
    }

    /**
     * DeleteApiVersion removes a specified version and all of the resources that  it owns.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryDeleteApiVersionTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        String version = null;
        Boolean force = null;
        api.registryDeleteApiVersion(project, location, api, version, force);
        // TODO: test validations
    }

    /**
     * DeleteArtifact removes a specified artifact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryDeleteArtifactTest() throws ApiException {
        String project = null;
        String location = null;
        String artifact = null;
        api.registryDeleteArtifact(project, location, artifact);
        // TODO: test validations
    }

    /**
     * GetApi returns a specified API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryGetApiTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        Api response = api.registryGetApi(project, location, api);
        // TODO: test validations
    }

    /**
     * GetApiDeployment returns a specified deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryGetApiDeploymentTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        String deployment = null;
        ApiDeployment response = api.registryGetApiDeployment(project, location, api, deployment);
        // TODO: test validations
    }

    /**
     * GetApiSpec returns a specified spec.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryGetApiSpecTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        String version = null;
        String spec = null;
        ApiSpec response = api.registryGetApiSpec(project, location, api, version, spec);
        // TODO: test validations
    }

    /**
     * GetApiSpecContents returns the contents of a specified spec.  If specs are stored with GZip compression, the default behavior  is to return the spec uncompressed (the mime_type response field  indicates the exact format returned).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryGetApiSpecContentsTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        String version = null;
        String spec = null;
        api.registryGetApiSpecContents(project, location, api, version, spec);
        // TODO: test validations
    }

    /**
     * GetApiVersion returns a specified version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryGetApiVersionTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        String version = null;
        ApiVersion response = api.registryGetApiVersion(project, location, api, version);
        // TODO: test validations
    }

    /**
     * GetArtifact returns a specified artifact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryGetArtifactTest() throws ApiException {
        String project = null;
        String location = null;
        String artifact = null;
        Artifact response = api.registryGetArtifact(project, location, artifact);
        // TODO: test validations
    }

    /**
     * GetArtifactContents returns the contents of a specified artifact.  If artifacts are stored with GZip compression, the default behavior  is to return the artifact uncompressed (the mime_type response field  indicates the exact format returned).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryGetArtifactContentsTest() throws ApiException {
        String project = null;
        String location = null;
        String artifact = null;
        api.registryGetArtifactContents(project, location, artifact);
        // TODO: test validations
    }

    /**
     * ListApiDeploymentRevisions lists all revisions of a deployment.  Revisions are returned in descending order of revision creation time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryListApiDeploymentRevisionsTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        String deployment = null;
        Integer pageSize = null;
        String pageToken = null;
        ListApiDeploymentRevisionsResponse response = api.registryListApiDeploymentRevisions(project, location, api, deployment, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * ListApiDeployments returns matching deployments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryListApiDeploymentsTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        Integer pageSize = null;
        String pageToken = null;
        String filter = null;
        ListApiDeploymentsResponse response = api.registryListApiDeployments(project, location, api, pageSize, pageToken, filter);
        // TODO: test validations
    }

    /**
     * ListApiSpecRevisions lists all revisions of a spec.  Revisions are returned in descending order of revision creation time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryListApiSpecRevisionsTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        String version = null;
        String spec = null;
        Integer pageSize = null;
        String pageToken = null;
        ListApiSpecRevisionsResponse response = api.registryListApiSpecRevisions(project, location, api, version, spec, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * ListApiSpecs returns matching specs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryListApiSpecsTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        String version = null;
        Integer pageSize = null;
        String pageToken = null;
        String filter = null;
        ListApiSpecsResponse response = api.registryListApiSpecs(project, location, api, version, pageSize, pageToken, filter);
        // TODO: test validations
    }

    /**
     * ListApiVersions returns matching versions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryListApiVersionsTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        Integer pageSize = null;
        String pageToken = null;
        String filter = null;
        ListApiVersionsResponse response = api.registryListApiVersions(project, location, api, pageSize, pageToken, filter);
        // TODO: test validations
    }

    /**
     * ListApis returns matching APIs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryListApisTest() throws ApiException {
        String project = null;
        String location = null;
        Integer pageSize = null;
        String pageToken = null;
        String filter = null;
        ListApisResponse response = api.registryListApis(project, location, pageSize, pageToken, filter);
        // TODO: test validations
    }

    /**
     * ListArtifacts returns matching artifacts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryListArtifactsTest() throws ApiException {
        String project = null;
        String location = null;
        Integer pageSize = null;
        String pageToken = null;
        String filter = null;
        ListArtifactsResponse response = api.registryListArtifacts(project, location, pageSize, pageToken, filter);
        // TODO: test validations
    }

    /**
     * ReplaceArtifact can be used to replace a specified artifact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryReplaceArtifactTest() throws ApiException {
        String project = null;
        String location = null;
        String artifact = null;
        Artifact artifact2 = null;
        Artifact response = api.registryReplaceArtifact(project, location, artifact, artifact2);
        // TODO: test validations
    }

    /**
     * RollbackApiDeployment sets the current revision to a specified prior  revision. Note that this creates a new revision with a new revision ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryRollbackApiDeploymentTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        String deployment = null;
        RollbackApiDeploymentRequest rollbackApiDeploymentRequest = null;
        ApiDeployment response = api.registryRollbackApiDeployment(project, location, api, deployment, rollbackApiDeploymentRequest);
        // TODO: test validations
    }

    /**
     * RollbackApiSpec sets the current revision to a specified prior revision.  Note that this creates a new revision with a new revision ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryRollbackApiSpecTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        String version = null;
        String spec = null;
        RollbackApiSpecRequest rollbackApiSpecRequest = null;
        ApiSpec response = api.registryRollbackApiSpec(project, location, api, version, spec, rollbackApiSpecRequest);
        // TODO: test validations
    }

    /**
     * TagApiDeploymentRevision adds a tag to a specified revision of a  deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryTagApiDeploymentRevisionTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        String deployment = null;
        TagApiDeploymentRevisionRequest tagApiDeploymentRevisionRequest = null;
        ApiDeployment response = api.registryTagApiDeploymentRevision(project, location, api, deployment, tagApiDeploymentRevisionRequest);
        // TODO: test validations
    }

    /**
     * TagApiSpecRevision adds a tag to a specified revision of a spec.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryTagApiSpecRevisionTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        String version = null;
        String spec = null;
        TagApiSpecRevisionRequest tagApiSpecRevisionRequest = null;
        ApiSpec response = api.registryTagApiSpecRevision(project, location, api, version, spec, tagApiSpecRevisionRequest);
        // TODO: test validations
    }

    /**
     * UpdateApi can be used to modify a specified API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryUpdateApiTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        Api api2 = null;
        String updateMask = null;
        Boolean allowMissing = null;
        Api response = api.registryUpdateApi(project, location, api, api2, updateMask, allowMissing);
        // TODO: test validations
    }

    /**
     * UpdateApiDeployment can be used to modify a specified deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryUpdateApiDeploymentTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        String deployment = null;
        ApiDeployment apiDeployment = null;
        String updateMask = null;
        Boolean allowMissing = null;
        ApiDeployment response = api.registryUpdateApiDeployment(project, location, api, deployment, apiDeployment, updateMask, allowMissing);
        // TODO: test validations
    }

    /**
     * UpdateApiSpec can be used to modify a specified spec.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryUpdateApiSpecTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        String version = null;
        String spec = null;
        ApiSpec apiSpec = null;
        String updateMask = null;
        Boolean allowMissing = null;
        ApiSpec response = api.registryUpdateApiSpec(project, location, api, version, spec, apiSpec, updateMask, allowMissing);
        // TODO: test validations
    }

    /**
     * UpdateApiVersion can be used to modify a specified version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registryUpdateApiVersionTest() throws ApiException {
        String project = null;
        String location = null;
        String api = null;
        String version = null;
        ApiVersion apiVersion = null;
        String updateMask = null;
        Boolean allowMissing = null;
        ApiVersion response = api.registryUpdateApiVersion(project, location, api, version, apiVersion, updateMask, allowMissing);
        // TODO: test validations
    }

}
