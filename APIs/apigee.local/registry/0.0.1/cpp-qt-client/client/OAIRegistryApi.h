/**
 * Registry API
 * The Registry service allows teams to manage descriptions of APIs.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRegistryApi_H
#define OAI_OAIRegistryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi.h"
#include "OAIApiDeployment.h"
#include "OAIApiSpec.h"
#include "OAIApiVersion.h"
#include "OAIArtifact.h"
#include "OAIListApiDeploymentRevisionsResponse.h"
#include "OAIListApiDeploymentsResponse.h"
#include "OAIListApiSpecRevisionsResponse.h"
#include "OAIListApiSpecsResponse.h"
#include "OAIListApiVersionsResponse.h"
#include "OAIListApisResponse.h"
#include "OAIListArtifactsResponse.h"
#include "OAIRollbackApiDeploymentRequest.h"
#include "OAIRollbackApiSpecRequest.h"
#include "OAIStatus.h"
#include "OAITagApiDeploymentRevisionRequest.h"
#include "OAITagApiSpecRevisionRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRegistryApi : public QObject {
    Q_OBJECT

public:
    OAIRegistryApi(const int timeOut = 0);
    ~OAIRegistryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  oai_api OAIApi [required]
    * @param[in]  api_id QString [optional]
    */
    virtual void registryCreateApi(const QString &project, const QString &location, const OAIApi &oai_api, const ::OpenAPI::OptionalParam<QString> &api_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  oai_api_deployment OAIApiDeployment [required]
    * @param[in]  api_deployment_id QString [optional]
    */
    virtual void registryCreateApiDeployment(const QString &project, const QString &location, const QString &api, const OAIApiDeployment &oai_api_deployment, const ::OpenAPI::OptionalParam<QString> &api_deployment_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  oai_api_spec OAIApiSpec [required]
    * @param[in]  api_spec_id QString [optional]
    */
    virtual void registryCreateApiSpec(const QString &project, const QString &location, const QString &api, const QString &version, const OAIApiSpec &oai_api_spec, const ::OpenAPI::OptionalParam<QString> &api_spec_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  oai_api_version OAIApiVersion [required]
    * @param[in]  api_version_id QString [optional]
    */
    virtual void registryCreateApiVersion(const QString &project, const QString &location, const QString &api, const OAIApiVersion &oai_api_version, const ::OpenAPI::OptionalParam<QString> &api_version_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  oai_artifact OAIArtifact [required]
    * @param[in]  artifact_id QString [optional]
    */
    virtual void registryCreateArtifact(const QString &project, const QString &location, const OAIArtifact &oai_artifact, const ::OpenAPI::OptionalParam<QString> &artifact_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  force bool [optional]
    */
    virtual void registryDeleteApi(const QString &project, const QString &location, const QString &api, const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  deployment QString [required]
    * @param[in]  force bool [optional]
    */
    virtual void registryDeleteApiDeployment(const QString &project, const QString &location, const QString &api, const QString &deployment, const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  deployment QString [required]
    */
    virtual void registryDeleteApiDeploymentRevision(const QString &project, const QString &location, const QString &api, const QString &deployment);

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  spec QString [required]
    * @param[in]  force bool [optional]
    */
    virtual void registryDeleteApiSpec(const QString &project, const QString &location, const QString &api, const QString &version, const QString &spec, const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  spec QString [required]
    */
    virtual void registryDeleteApiSpecRevision(const QString &project, const QString &location, const QString &api, const QString &version, const QString &spec);

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  force bool [optional]
    */
    virtual void registryDeleteApiVersion(const QString &project, const QString &location, const QString &api, const QString &version, const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  artifact QString [required]
    */
    virtual void registryDeleteArtifact(const QString &project, const QString &location, const QString &artifact);

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    */
    virtual void registryGetApi(const QString &project, const QString &location, const QString &api);

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  deployment QString [required]
    */
    virtual void registryGetApiDeployment(const QString &project, const QString &location, const QString &api, const QString &deployment);

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  spec QString [required]
    */
    virtual void registryGetApiSpec(const QString &project, const QString &location, const QString &api, const QString &version, const QString &spec);

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  spec QString [required]
    */
    virtual void registryGetApiSpecContents(const QString &project, const QString &location, const QString &api, const QString &version, const QString &spec);

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    */
    virtual void registryGetApiVersion(const QString &project, const QString &location, const QString &api, const QString &version);

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  artifact QString [required]
    */
    virtual void registryGetArtifact(const QString &project, const QString &location, const QString &artifact);

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  artifact QString [required]
    */
    virtual void registryGetArtifactContents(const QString &project, const QString &location, const QString &artifact);

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  deployment QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void registryListApiDeploymentRevisions(const QString &project, const QString &location, const QString &api, const QString &deployment, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void registryListApiDeployments(const QString &project, const QString &location, const QString &api, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  spec QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void registryListApiSpecRevisions(const QString &project, const QString &location, const QString &api, const QString &version, const QString &spec, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void registryListApiSpecs(const QString &project, const QString &location, const QString &api, const QString &version, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void registryListApiVersions(const QString &project, const QString &location, const QString &api, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void registryListApis(const QString &project, const QString &location, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void registryListArtifacts(const QString &project, const QString &location, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  artifact QString [required]
    * @param[in]  oai_artifact OAIArtifact [required]
    */
    virtual void registryReplaceArtifact(const QString &project, const QString &location, const QString &artifact, const OAIArtifact &oai_artifact);

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  deployment QString [required]
    * @param[in]  oai_rollback_api_deployment_request OAIRollbackApiDeploymentRequest [required]
    */
    virtual void registryRollbackApiDeployment(const QString &project, const QString &location, const QString &api, const QString &deployment, const OAIRollbackApiDeploymentRequest &oai_rollback_api_deployment_request);

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  spec QString [required]
    * @param[in]  oai_rollback_api_spec_request OAIRollbackApiSpecRequest [required]
    */
    virtual void registryRollbackApiSpec(const QString &project, const QString &location, const QString &api, const QString &version, const QString &spec, const OAIRollbackApiSpecRequest &oai_rollback_api_spec_request);

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  deployment QString [required]
    * @param[in]  oai_tag_api_deployment_revision_request OAITagApiDeploymentRevisionRequest [required]
    */
    virtual void registryTagApiDeploymentRevision(const QString &project, const QString &location, const QString &api, const QString &deployment, const OAITagApiDeploymentRevisionRequest &oai_tag_api_deployment_revision_request);

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  spec QString [required]
    * @param[in]  oai_tag_api_spec_revision_request OAITagApiSpecRevisionRequest [required]
    */
    virtual void registryTagApiSpecRevision(const QString &project, const QString &location, const QString &api, const QString &version, const QString &spec, const OAITagApiSpecRevisionRequest &oai_tag_api_spec_revision_request);

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  oai_api OAIApi [required]
    * @param[in]  update_mask QString [optional]
    * @param[in]  allow_missing bool [optional]
    */
    virtual void registryUpdateApi(const QString &project, const QString &location, const QString &api, const OAIApi &oai_api, const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &allow_missing = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  deployment QString [required]
    * @param[in]  oai_api_deployment OAIApiDeployment [required]
    * @param[in]  update_mask QString [optional]
    * @param[in]  allow_missing bool [optional]
    */
    virtual void registryUpdateApiDeployment(const QString &project, const QString &location, const QString &api, const QString &deployment, const OAIApiDeployment &oai_api_deployment, const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &allow_missing = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  spec QString [required]
    * @param[in]  oai_api_spec OAIApiSpec [required]
    * @param[in]  update_mask QString [optional]
    * @param[in]  allow_missing bool [optional]
    */
    virtual void registryUpdateApiSpec(const QString &project, const QString &location, const QString &api, const QString &version, const QString &spec, const OAIApiSpec &oai_api_spec, const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &allow_missing = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  project QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    * @param[in]  oai_api_version OAIApiVersion [required]
    * @param[in]  update_mask QString [optional]
    * @param[in]  allow_missing bool [optional]
    */
    virtual void registryUpdateApiVersion(const QString &project, const QString &location, const QString &api, const QString &version, const OAIApiVersion &oai_api_version, const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &allow_missing = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void registryCreateApiCallback(OAIHttpRequestWorker *worker);
    void registryCreateApiDeploymentCallback(OAIHttpRequestWorker *worker);
    void registryCreateApiSpecCallback(OAIHttpRequestWorker *worker);
    void registryCreateApiVersionCallback(OAIHttpRequestWorker *worker);
    void registryCreateArtifactCallback(OAIHttpRequestWorker *worker);
    void registryDeleteApiCallback(OAIHttpRequestWorker *worker);
    void registryDeleteApiDeploymentCallback(OAIHttpRequestWorker *worker);
    void registryDeleteApiDeploymentRevisionCallback(OAIHttpRequestWorker *worker);
    void registryDeleteApiSpecCallback(OAIHttpRequestWorker *worker);
    void registryDeleteApiSpecRevisionCallback(OAIHttpRequestWorker *worker);
    void registryDeleteApiVersionCallback(OAIHttpRequestWorker *worker);
    void registryDeleteArtifactCallback(OAIHttpRequestWorker *worker);
    void registryGetApiCallback(OAIHttpRequestWorker *worker);
    void registryGetApiDeploymentCallback(OAIHttpRequestWorker *worker);
    void registryGetApiSpecCallback(OAIHttpRequestWorker *worker);
    void registryGetApiSpecContentsCallback(OAIHttpRequestWorker *worker);
    void registryGetApiVersionCallback(OAIHttpRequestWorker *worker);
    void registryGetArtifactCallback(OAIHttpRequestWorker *worker);
    void registryGetArtifactContentsCallback(OAIHttpRequestWorker *worker);
    void registryListApiDeploymentRevisionsCallback(OAIHttpRequestWorker *worker);
    void registryListApiDeploymentsCallback(OAIHttpRequestWorker *worker);
    void registryListApiSpecRevisionsCallback(OAIHttpRequestWorker *worker);
    void registryListApiSpecsCallback(OAIHttpRequestWorker *worker);
    void registryListApiVersionsCallback(OAIHttpRequestWorker *worker);
    void registryListApisCallback(OAIHttpRequestWorker *worker);
    void registryListArtifactsCallback(OAIHttpRequestWorker *worker);
    void registryReplaceArtifactCallback(OAIHttpRequestWorker *worker);
    void registryRollbackApiDeploymentCallback(OAIHttpRequestWorker *worker);
    void registryRollbackApiSpecCallback(OAIHttpRequestWorker *worker);
    void registryTagApiDeploymentRevisionCallback(OAIHttpRequestWorker *worker);
    void registryTagApiSpecRevisionCallback(OAIHttpRequestWorker *worker);
    void registryUpdateApiCallback(OAIHttpRequestWorker *worker);
    void registryUpdateApiDeploymentCallback(OAIHttpRequestWorker *worker);
    void registryUpdateApiSpecCallback(OAIHttpRequestWorker *worker);
    void registryUpdateApiVersionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void registryCreateApiSignal(OAIApi summary);
    void registryCreateApiDeploymentSignal(OAIApiDeployment summary);
    void registryCreateApiSpecSignal(OAIApiSpec summary);
    void registryCreateApiVersionSignal(OAIApiVersion summary);
    void registryCreateArtifactSignal(OAIArtifact summary);
    void registryDeleteApiSignal();
    void registryDeleteApiDeploymentSignal();
    void registryDeleteApiDeploymentRevisionSignal(OAIApiDeployment summary);
    void registryDeleteApiSpecSignal();
    void registryDeleteApiSpecRevisionSignal(OAIApiSpec summary);
    void registryDeleteApiVersionSignal();
    void registryDeleteArtifactSignal();
    void registryGetApiSignal(OAIApi summary);
    void registryGetApiDeploymentSignal(OAIApiDeployment summary);
    void registryGetApiSpecSignal(OAIApiSpec summary);
    void registryGetApiSpecContentsSignal();
    void registryGetApiVersionSignal(OAIApiVersion summary);
    void registryGetArtifactSignal(OAIArtifact summary);
    void registryGetArtifactContentsSignal();
    void registryListApiDeploymentRevisionsSignal(OAIListApiDeploymentRevisionsResponse summary);
    void registryListApiDeploymentsSignal(OAIListApiDeploymentsResponse summary);
    void registryListApiSpecRevisionsSignal(OAIListApiSpecRevisionsResponse summary);
    void registryListApiSpecsSignal(OAIListApiSpecsResponse summary);
    void registryListApiVersionsSignal(OAIListApiVersionsResponse summary);
    void registryListApisSignal(OAIListApisResponse summary);
    void registryListArtifactsSignal(OAIListArtifactsResponse summary);
    void registryReplaceArtifactSignal(OAIArtifact summary);
    void registryRollbackApiDeploymentSignal(OAIApiDeployment summary);
    void registryRollbackApiSpecSignal(OAIApiSpec summary);
    void registryTagApiDeploymentRevisionSignal(OAIApiDeployment summary);
    void registryTagApiSpecRevisionSignal(OAIApiSpec summary);
    void registryUpdateApiSignal(OAIApi summary);
    void registryUpdateApiDeploymentSignal(OAIApiDeployment summary);
    void registryUpdateApiSpecSignal(OAIApiSpec summary);
    void registryUpdateApiVersionSignal(OAIApiVersion summary);


    void registryCreateApiSignalFull(OAIHttpRequestWorker *worker, OAIApi summary);
    void registryCreateApiDeploymentSignalFull(OAIHttpRequestWorker *worker, OAIApiDeployment summary);
    void registryCreateApiSpecSignalFull(OAIHttpRequestWorker *worker, OAIApiSpec summary);
    void registryCreateApiVersionSignalFull(OAIHttpRequestWorker *worker, OAIApiVersion summary);
    void registryCreateArtifactSignalFull(OAIHttpRequestWorker *worker, OAIArtifact summary);
    void registryDeleteApiSignalFull(OAIHttpRequestWorker *worker);
    void registryDeleteApiDeploymentSignalFull(OAIHttpRequestWorker *worker);
    void registryDeleteApiDeploymentRevisionSignalFull(OAIHttpRequestWorker *worker, OAIApiDeployment summary);
    void registryDeleteApiSpecSignalFull(OAIHttpRequestWorker *worker);
    void registryDeleteApiSpecRevisionSignalFull(OAIHttpRequestWorker *worker, OAIApiSpec summary);
    void registryDeleteApiVersionSignalFull(OAIHttpRequestWorker *worker);
    void registryDeleteArtifactSignalFull(OAIHttpRequestWorker *worker);
    void registryGetApiSignalFull(OAIHttpRequestWorker *worker, OAIApi summary);
    void registryGetApiDeploymentSignalFull(OAIHttpRequestWorker *worker, OAIApiDeployment summary);
    void registryGetApiSpecSignalFull(OAIHttpRequestWorker *worker, OAIApiSpec summary);
    void registryGetApiSpecContentsSignalFull(OAIHttpRequestWorker *worker);
    void registryGetApiVersionSignalFull(OAIHttpRequestWorker *worker, OAIApiVersion summary);
    void registryGetArtifactSignalFull(OAIHttpRequestWorker *worker, OAIArtifact summary);
    void registryGetArtifactContentsSignalFull(OAIHttpRequestWorker *worker);
    void registryListApiDeploymentRevisionsSignalFull(OAIHttpRequestWorker *worker, OAIListApiDeploymentRevisionsResponse summary);
    void registryListApiDeploymentsSignalFull(OAIHttpRequestWorker *worker, OAIListApiDeploymentsResponse summary);
    void registryListApiSpecRevisionsSignalFull(OAIHttpRequestWorker *worker, OAIListApiSpecRevisionsResponse summary);
    void registryListApiSpecsSignalFull(OAIHttpRequestWorker *worker, OAIListApiSpecsResponse summary);
    void registryListApiVersionsSignalFull(OAIHttpRequestWorker *worker, OAIListApiVersionsResponse summary);
    void registryListApisSignalFull(OAIHttpRequestWorker *worker, OAIListApisResponse summary);
    void registryListArtifactsSignalFull(OAIHttpRequestWorker *worker, OAIListArtifactsResponse summary);
    void registryReplaceArtifactSignalFull(OAIHttpRequestWorker *worker, OAIArtifact summary);
    void registryRollbackApiDeploymentSignalFull(OAIHttpRequestWorker *worker, OAIApiDeployment summary);
    void registryRollbackApiSpecSignalFull(OAIHttpRequestWorker *worker, OAIApiSpec summary);
    void registryTagApiDeploymentRevisionSignalFull(OAIHttpRequestWorker *worker, OAIApiDeployment summary);
    void registryTagApiSpecRevisionSignalFull(OAIHttpRequestWorker *worker, OAIApiSpec summary);
    void registryUpdateApiSignalFull(OAIHttpRequestWorker *worker, OAIApi summary);
    void registryUpdateApiDeploymentSignalFull(OAIHttpRequestWorker *worker, OAIApiDeployment summary);
    void registryUpdateApiSpecSignalFull(OAIHttpRequestWorker *worker, OAIApiSpec summary);
    void registryUpdateApiVersionSignalFull(OAIHttpRequestWorker *worker, OAIApiVersion summary);

    Q_DECL_DEPRECATED_X("Use registryCreateApiSignalError() instead")
    void registryCreateApiSignalE(OAIApi summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryCreateApiSignalError(OAIApi summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryCreateApiDeploymentSignalError() instead")
    void registryCreateApiDeploymentSignalE(OAIApiDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryCreateApiDeploymentSignalError(OAIApiDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryCreateApiSpecSignalError() instead")
    void registryCreateApiSpecSignalE(OAIApiSpec summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryCreateApiSpecSignalError(OAIApiSpec summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryCreateApiVersionSignalError() instead")
    void registryCreateApiVersionSignalE(OAIApiVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryCreateApiVersionSignalError(OAIApiVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryCreateArtifactSignalError() instead")
    void registryCreateArtifactSignalE(OAIArtifact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryCreateArtifactSignalError(OAIArtifact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryDeleteApiSignalError() instead")
    void registryDeleteApiSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void registryDeleteApiSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryDeleteApiDeploymentSignalError() instead")
    void registryDeleteApiDeploymentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void registryDeleteApiDeploymentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryDeleteApiDeploymentRevisionSignalError() instead")
    void registryDeleteApiDeploymentRevisionSignalE(OAIApiDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryDeleteApiDeploymentRevisionSignalError(OAIApiDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryDeleteApiSpecSignalError() instead")
    void registryDeleteApiSpecSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void registryDeleteApiSpecSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryDeleteApiSpecRevisionSignalError() instead")
    void registryDeleteApiSpecRevisionSignalE(OAIApiSpec summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryDeleteApiSpecRevisionSignalError(OAIApiSpec summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryDeleteApiVersionSignalError() instead")
    void registryDeleteApiVersionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void registryDeleteApiVersionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryDeleteArtifactSignalError() instead")
    void registryDeleteArtifactSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void registryDeleteArtifactSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryGetApiSignalError() instead")
    void registryGetApiSignalE(OAIApi summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryGetApiSignalError(OAIApi summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryGetApiDeploymentSignalError() instead")
    void registryGetApiDeploymentSignalE(OAIApiDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryGetApiDeploymentSignalError(OAIApiDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryGetApiSpecSignalError() instead")
    void registryGetApiSpecSignalE(OAIApiSpec summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryGetApiSpecSignalError(OAIApiSpec summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryGetApiSpecContentsSignalError() instead")
    void registryGetApiSpecContentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void registryGetApiSpecContentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryGetApiVersionSignalError() instead")
    void registryGetApiVersionSignalE(OAIApiVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryGetApiVersionSignalError(OAIApiVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryGetArtifactSignalError() instead")
    void registryGetArtifactSignalE(OAIArtifact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryGetArtifactSignalError(OAIArtifact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryGetArtifactContentsSignalError() instead")
    void registryGetArtifactContentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void registryGetArtifactContentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryListApiDeploymentRevisionsSignalError() instead")
    void registryListApiDeploymentRevisionsSignalE(OAIListApiDeploymentRevisionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryListApiDeploymentRevisionsSignalError(OAIListApiDeploymentRevisionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryListApiDeploymentsSignalError() instead")
    void registryListApiDeploymentsSignalE(OAIListApiDeploymentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryListApiDeploymentsSignalError(OAIListApiDeploymentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryListApiSpecRevisionsSignalError() instead")
    void registryListApiSpecRevisionsSignalE(OAIListApiSpecRevisionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryListApiSpecRevisionsSignalError(OAIListApiSpecRevisionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryListApiSpecsSignalError() instead")
    void registryListApiSpecsSignalE(OAIListApiSpecsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryListApiSpecsSignalError(OAIListApiSpecsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryListApiVersionsSignalError() instead")
    void registryListApiVersionsSignalE(OAIListApiVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryListApiVersionsSignalError(OAIListApiVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryListApisSignalError() instead")
    void registryListApisSignalE(OAIListApisResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryListApisSignalError(OAIListApisResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryListArtifactsSignalError() instead")
    void registryListArtifactsSignalE(OAIListArtifactsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryListArtifactsSignalError(OAIListArtifactsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryReplaceArtifactSignalError() instead")
    void registryReplaceArtifactSignalE(OAIArtifact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryReplaceArtifactSignalError(OAIArtifact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryRollbackApiDeploymentSignalError() instead")
    void registryRollbackApiDeploymentSignalE(OAIApiDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryRollbackApiDeploymentSignalError(OAIApiDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryRollbackApiSpecSignalError() instead")
    void registryRollbackApiSpecSignalE(OAIApiSpec summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryRollbackApiSpecSignalError(OAIApiSpec summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryTagApiDeploymentRevisionSignalError() instead")
    void registryTagApiDeploymentRevisionSignalE(OAIApiDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryTagApiDeploymentRevisionSignalError(OAIApiDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryTagApiSpecRevisionSignalError() instead")
    void registryTagApiSpecRevisionSignalE(OAIApiSpec summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryTagApiSpecRevisionSignalError(OAIApiSpec summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryUpdateApiSignalError() instead")
    void registryUpdateApiSignalE(OAIApi summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryUpdateApiSignalError(OAIApi summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryUpdateApiDeploymentSignalError() instead")
    void registryUpdateApiDeploymentSignalE(OAIApiDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryUpdateApiDeploymentSignalError(OAIApiDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryUpdateApiSpecSignalError() instead")
    void registryUpdateApiSpecSignalE(OAIApiSpec summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryUpdateApiSpecSignalError(OAIApiSpec summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryUpdateApiVersionSignalError() instead")
    void registryUpdateApiVersionSignalE(OAIApiVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registryUpdateApiVersionSignalError(OAIApiVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use registryCreateApiSignalErrorFull() instead")
    void registryCreateApiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryCreateApiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryCreateApiDeploymentSignalErrorFull() instead")
    void registryCreateApiDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryCreateApiDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryCreateApiSpecSignalErrorFull() instead")
    void registryCreateApiSpecSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryCreateApiSpecSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryCreateApiVersionSignalErrorFull() instead")
    void registryCreateApiVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryCreateApiVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryCreateArtifactSignalErrorFull() instead")
    void registryCreateArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryCreateArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryDeleteApiSignalErrorFull() instead")
    void registryDeleteApiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryDeleteApiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryDeleteApiDeploymentSignalErrorFull() instead")
    void registryDeleteApiDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryDeleteApiDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryDeleteApiDeploymentRevisionSignalErrorFull() instead")
    void registryDeleteApiDeploymentRevisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryDeleteApiDeploymentRevisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryDeleteApiSpecSignalErrorFull() instead")
    void registryDeleteApiSpecSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryDeleteApiSpecSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryDeleteApiSpecRevisionSignalErrorFull() instead")
    void registryDeleteApiSpecRevisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryDeleteApiSpecRevisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryDeleteApiVersionSignalErrorFull() instead")
    void registryDeleteApiVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryDeleteApiVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryDeleteArtifactSignalErrorFull() instead")
    void registryDeleteArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryDeleteArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryGetApiSignalErrorFull() instead")
    void registryGetApiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryGetApiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryGetApiDeploymentSignalErrorFull() instead")
    void registryGetApiDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryGetApiDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryGetApiSpecSignalErrorFull() instead")
    void registryGetApiSpecSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryGetApiSpecSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryGetApiSpecContentsSignalErrorFull() instead")
    void registryGetApiSpecContentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryGetApiSpecContentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryGetApiVersionSignalErrorFull() instead")
    void registryGetApiVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryGetApiVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryGetArtifactSignalErrorFull() instead")
    void registryGetArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryGetArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryGetArtifactContentsSignalErrorFull() instead")
    void registryGetArtifactContentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryGetArtifactContentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryListApiDeploymentRevisionsSignalErrorFull() instead")
    void registryListApiDeploymentRevisionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryListApiDeploymentRevisionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryListApiDeploymentsSignalErrorFull() instead")
    void registryListApiDeploymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryListApiDeploymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryListApiSpecRevisionsSignalErrorFull() instead")
    void registryListApiSpecRevisionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryListApiSpecRevisionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryListApiSpecsSignalErrorFull() instead")
    void registryListApiSpecsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryListApiSpecsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryListApiVersionsSignalErrorFull() instead")
    void registryListApiVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryListApiVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryListApisSignalErrorFull() instead")
    void registryListApisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryListApisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryListArtifactsSignalErrorFull() instead")
    void registryListArtifactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryListArtifactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryReplaceArtifactSignalErrorFull() instead")
    void registryReplaceArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryReplaceArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryRollbackApiDeploymentSignalErrorFull() instead")
    void registryRollbackApiDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryRollbackApiDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryRollbackApiSpecSignalErrorFull() instead")
    void registryRollbackApiSpecSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryRollbackApiSpecSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryTagApiDeploymentRevisionSignalErrorFull() instead")
    void registryTagApiDeploymentRevisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryTagApiDeploymentRevisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryTagApiSpecRevisionSignalErrorFull() instead")
    void registryTagApiSpecRevisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryTagApiSpecRevisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryUpdateApiSignalErrorFull() instead")
    void registryUpdateApiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryUpdateApiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryUpdateApiDeploymentSignalErrorFull() instead")
    void registryUpdateApiDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryUpdateApiDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryUpdateApiSpecSignalErrorFull() instead")
    void registryUpdateApiSpecSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryUpdateApiSpecSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registryUpdateApiVersionSignalErrorFull() instead")
    void registryUpdateApiVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registryUpdateApiVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
