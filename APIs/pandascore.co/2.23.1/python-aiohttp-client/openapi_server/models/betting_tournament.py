# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.current_videogame import CurrentVideogame
from openapi_server.models.opponent_id1 import OpponentID1
import re
from openapi_server import util


class BettingTournament(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begin_at: object=None, end_at: object=None, id: int=None, live_supported: bool=None, modified_at: datetime=None, name: str=None, prizepool: object=None, serie_id: int=None, slug: str=None, videogame: CurrentVideogame=None, winner_id: OpponentID1=None, winner_type: object=None):
        """BettingTournament - a model defined in OpenAPI

        :param begin_at: The begin_at of this BettingTournament.
        :param end_at: The end_at of this BettingTournament.
        :param id: The id of this BettingTournament.
        :param live_supported: The live_supported of this BettingTournament.
        :param modified_at: The modified_at of this BettingTournament.
        :param name: The name of this BettingTournament.
        :param prizepool: The prizepool of this BettingTournament.
        :param serie_id: The serie_id of this BettingTournament.
        :param slug: The slug of this BettingTournament.
        :param videogame: The videogame of this BettingTournament.
        :param winner_id: The winner_id of this BettingTournament.
        :param winner_type: The winner_type of this BettingTournament.
        """
        self.openapi_types = {
            'begin_at': object,
            'end_at': object,
            'id': int,
            'live_supported': bool,
            'modified_at': datetime,
            'name': str,
            'prizepool': object,
            'serie_id': int,
            'slug': str,
            'videogame': CurrentVideogame,
            'winner_id': OpponentID1,
            'winner_type': object
        }

        self.attribute_map = {
            'begin_at': 'begin_at',
            'end_at': 'end_at',
            'id': 'id',
            'live_supported': 'live_supported',
            'modified_at': 'modified_at',
            'name': 'name',
            'prizepool': 'prizepool',
            'serie_id': 'serie_id',
            'slug': 'slug',
            'videogame': 'videogame',
            'winner_id': 'winner_id',
            'winner_type': 'winner_type'
        }

        self._begin_at = begin_at
        self._end_at = end_at
        self._id = id
        self._live_supported = live_supported
        self._modified_at = modified_at
        self._name = name
        self._prizepool = prizepool
        self._serie_id = serie_id
        self._slug = slug
        self._videogame = videogame
        self._winner_id = winner_id
        self._winner_type = winner_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BettingTournament':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BettingTournament of this BettingTournament.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begin_at(self):
        """Gets the begin_at of this BettingTournament.


        :return: The begin_at of this BettingTournament.
        :rtype: object
        """
        return self._begin_at

    @begin_at.setter
    def begin_at(self, begin_at):
        """Sets the begin_at of this BettingTournament.


        :param begin_at: The begin_at of this BettingTournament.
        :type begin_at: object
        """
        if begin_at is None:
            raise ValueError("Invalid value for `begin_at`, must not be `None`")

        self._begin_at = begin_at

    @property
    def end_at(self):
        """Gets the end_at of this BettingTournament.


        :return: The end_at of this BettingTournament.
        :rtype: object
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this BettingTournament.


        :param end_at: The end_at of this BettingTournament.
        :type end_at: object
        """
        if end_at is None:
            raise ValueError("Invalid value for `end_at`, must not be `None`")

        self._end_at = end_at

    @property
    def id(self):
        """Gets the id of this BettingTournament.


        :return: The id of this BettingTournament.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BettingTournament.


        :param id: The id of this BettingTournament.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and id < 1:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")

        self._id = id

    @property
    def live_supported(self):
        """Gets the live_supported of this BettingTournament.

        Whether live is supported

        :return: The live_supported of this BettingTournament.
        :rtype: bool
        """
        return self._live_supported

    @live_supported.setter
    def live_supported(self, live_supported):
        """Sets the live_supported of this BettingTournament.

        Whether live is supported

        :param live_supported: The live_supported of this BettingTournament.
        :type live_supported: bool
        """
        if live_supported is None:
            raise ValueError("Invalid value for `live_supported`, must not be `None`")

        self._live_supported = live_supported

    @property
    def modified_at(self):
        """Gets the modified_at of this BettingTournament.


        :return: The modified_at of this BettingTournament.
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this BettingTournament.


        :param modified_at: The modified_at of this BettingTournament.
        :type modified_at: datetime
        """
        if modified_at is None:
            raise ValueError("Invalid value for `modified_at`, must not be `None`")
        if modified_at is not None and len(modified_at) < 1:
            raise ValueError("Invalid value for `modified_at`, length must be greater than or equal to `1`")

        self._modified_at = modified_at

    @property
    def name(self):
        """Gets the name of this BettingTournament.


        :return: The name of this BettingTournament.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BettingTournament.


        :param name: The name of this BettingTournament.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def prizepool(self):
        """Gets the prizepool of this BettingTournament.


        :return: The prizepool of this BettingTournament.
        :rtype: object
        """
        return self._prizepool

    @prizepool.setter
    def prizepool(self, prizepool):
        """Sets the prizepool of this BettingTournament.


        :param prizepool: The prizepool of this BettingTournament.
        :type prizepool: object
        """
        if prizepool is None:
            raise ValueError("Invalid value for `prizepool`, must not be `None`")

        self._prizepool = prizepool

    @property
    def serie_id(self):
        """Gets the serie_id of this BettingTournament.


        :return: The serie_id of this BettingTournament.
        :rtype: int
        """
        return self._serie_id

    @serie_id.setter
    def serie_id(self, serie_id):
        """Sets the serie_id of this BettingTournament.


        :param serie_id: The serie_id of this BettingTournament.
        :type serie_id: int
        """
        if serie_id is None:
            raise ValueError("Invalid value for `serie_id`, must not be `None`")
        if serie_id is not None and serie_id < 1:
            raise ValueError("Invalid value for `serie_id`, must be a value greater than or equal to `1`")

        self._serie_id = serie_id

    @property
    def slug(self):
        """Gets the slug of this BettingTournament.


        :return: The slug of this BettingTournament.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this BettingTournament.


        :param slug: The slug of this BettingTournament.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[a-z0-9_-]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[a-z0-9_-]+$/`")

        self._slug = slug

    @property
    def videogame(self):
        """Gets the videogame of this BettingTournament.


        :return: The videogame of this BettingTournament.
        :rtype: CurrentVideogame
        """
        return self._videogame

    @videogame.setter
    def videogame(self, videogame):
        """Sets the videogame of this BettingTournament.


        :param videogame: The videogame of this BettingTournament.
        :type videogame: CurrentVideogame
        """
        if videogame is None:
            raise ValueError("Invalid value for `videogame`, must not be `None`")

        self._videogame = videogame

    @property
    def winner_id(self):
        """Gets the winner_id of this BettingTournament.


        :return: The winner_id of this BettingTournament.
        :rtype: OpponentID1
        """
        return self._winner_id

    @winner_id.setter
    def winner_id(self, winner_id):
        """Sets the winner_id of this BettingTournament.


        :param winner_id: The winner_id of this BettingTournament.
        :type winner_id: OpponentID1
        """
        if winner_id is None:
            raise ValueError("Invalid value for `winner_id`, must not be `None`")

        self._winner_id = winner_id

    @property
    def winner_type(self):
        """Gets the winner_type of this BettingTournament.


        :return: The winner_type of this BettingTournament.
        :rtype: object
        """
        return self._winner_type

    @winner_type.setter
    def winner_type(self, winner_type):
        """Sets the winner_type of this BettingTournament.


        :param winner_type: The winner_type of this BettingTournament.
        :type winner_type: object
        """
        if winner_type is None:
            raise ValueError("Invalid value for `winner_type`, must not be `None`")

        self._winner_type = winner_type
