# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_match import BaseMatch
from openapi_server.models.base_team import BaseTeam
from openapi_server import util


class BracketStanding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_match: BaseMatch=None, rank: int=None, team: BaseTeam=None):
        """BracketStanding - a model defined in OpenAPI

        :param last_match: The last_match of this BracketStanding.
        :param rank: The rank of this BracketStanding.
        :param team: The team of this BracketStanding.
        """
        self.openapi_types = {
            'last_match': BaseMatch,
            'rank': int,
            'team': BaseTeam
        }

        self.attribute_map = {
            'last_match': 'last_match',
            'rank': 'rank',
            'team': 'team'
        }

        self._last_match = last_match
        self._rank = rank
        self._team = team

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BracketStanding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BracketStanding of this BracketStanding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_match(self):
        """Gets the last_match of this BracketStanding.


        :return: The last_match of this BracketStanding.
        :rtype: BaseMatch
        """
        return self._last_match

    @last_match.setter
    def last_match(self, last_match):
        """Sets the last_match of this BracketStanding.


        :param last_match: The last_match of this BracketStanding.
        :type last_match: BaseMatch
        """
        if last_match is None:
            raise ValueError("Invalid value for `last_match`, must not be `None`")

        self._last_match = last_match

    @property
    def rank(self):
        """Gets the rank of this BracketStanding.


        :return: The rank of this BracketStanding.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this BracketStanding.


        :param rank: The rank of this BracketStanding.
        :type rank: int
        """
        if rank is None:
            raise ValueError("Invalid value for `rank`, must not be `None`")
        if rank is not None and rank < 0:
            raise ValueError("Invalid value for `rank`, must be a value greater than or equal to `0`")

        self._rank = rank

    @property
    def team(self):
        """Gets the team of this BracketStanding.


        :return: The team of this BracketStanding.
        :rtype: BaseTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this BracketStanding.


        :param team: The team of this BracketStanding.
        :type team: BaseTeam
        """
        if team is None:
            raise ValueError("Invalid value for `team`, must not be `None`")

        self._team = team
