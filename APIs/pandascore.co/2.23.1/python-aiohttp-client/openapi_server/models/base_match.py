# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.match_live import MatchLive
from openapi_server.models.match_localized_streams import MatchLocalizedStreams
from openapi_server.models.match_status import MatchStatus
from openapi_server.models.match_type import MatchType
from openapi_server.models.opponent_id1 import OpponentID1
from openapi_server.models.stream import Stream
from openapi_server import util


class BaseMatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begin_at: object=None, detailed_stats: bool=None, draw: bool=None, end_at: object=None, forfeit: bool=None, game_advantage: OpponentID1=None, id: int=None, live: MatchLive=None, live_embed_url: object=None, match_type: MatchType=None, modified_at: datetime=None, name: str=None, number_of_games: int=None, official_stream_url: object=None, original_scheduled_at: object=None, rescheduled: object=None, scheduled_at: object=None, slug: object=None, status: MatchStatus=None, streams: MatchLocalizedStreams=None, streams_list: List[Stream]=None, tournament_id: int=None, winner_id: OpponentID1=None):
        """BaseMatch - a model defined in OpenAPI

        :param begin_at: The begin_at of this BaseMatch.
        :param detailed_stats: The detailed_stats of this BaseMatch.
        :param draw: The draw of this BaseMatch.
        :param end_at: The end_at of this BaseMatch.
        :param forfeit: The forfeit of this BaseMatch.
        :param game_advantage: The game_advantage of this BaseMatch.
        :param id: The id of this BaseMatch.
        :param live: The live of this BaseMatch.
        :param live_embed_url: The live_embed_url of this BaseMatch.
        :param match_type: The match_type of this BaseMatch.
        :param modified_at: The modified_at of this BaseMatch.
        :param name: The name of this BaseMatch.
        :param number_of_games: The number_of_games of this BaseMatch.
        :param official_stream_url: The official_stream_url of this BaseMatch.
        :param original_scheduled_at: The original_scheduled_at of this BaseMatch.
        :param rescheduled: The rescheduled of this BaseMatch.
        :param scheduled_at: The scheduled_at of this BaseMatch.
        :param slug: The slug of this BaseMatch.
        :param status: The status of this BaseMatch.
        :param streams: The streams of this BaseMatch.
        :param streams_list: The streams_list of this BaseMatch.
        :param tournament_id: The tournament_id of this BaseMatch.
        :param winner_id: The winner_id of this BaseMatch.
        """
        self.openapi_types = {
            'begin_at': object,
            'detailed_stats': bool,
            'draw': bool,
            'end_at': object,
            'forfeit': bool,
            'game_advantage': OpponentID1,
            'id': int,
            'live': MatchLive,
            'live_embed_url': object,
            'match_type': MatchType,
            'modified_at': datetime,
            'name': str,
            'number_of_games': int,
            'official_stream_url': object,
            'original_scheduled_at': object,
            'rescheduled': object,
            'scheduled_at': object,
            'slug': object,
            'status': MatchStatus,
            'streams': MatchLocalizedStreams,
            'streams_list': List[Stream],
            'tournament_id': int,
            'winner_id': OpponentID1
        }

        self.attribute_map = {
            'begin_at': 'begin_at',
            'detailed_stats': 'detailed_stats',
            'draw': 'draw',
            'end_at': 'end_at',
            'forfeit': 'forfeit',
            'game_advantage': 'game_advantage',
            'id': 'id',
            'live': 'live',
            'live_embed_url': 'live_embed_url',
            'match_type': 'match_type',
            'modified_at': 'modified_at',
            'name': 'name',
            'number_of_games': 'number_of_games',
            'official_stream_url': 'official_stream_url',
            'original_scheduled_at': 'original_scheduled_at',
            'rescheduled': 'rescheduled',
            'scheduled_at': 'scheduled_at',
            'slug': 'slug',
            'status': 'status',
            'streams': 'streams',
            'streams_list': 'streams_list',
            'tournament_id': 'tournament_id',
            'winner_id': 'winner_id'
        }

        self._begin_at = begin_at
        self._detailed_stats = detailed_stats
        self._draw = draw
        self._end_at = end_at
        self._forfeit = forfeit
        self._game_advantage = game_advantage
        self._id = id
        self._live = live
        self._live_embed_url = live_embed_url
        self._match_type = match_type
        self._modified_at = modified_at
        self._name = name
        self._number_of_games = number_of_games
        self._official_stream_url = official_stream_url
        self._original_scheduled_at = original_scheduled_at
        self._rescheduled = rescheduled
        self._scheduled_at = scheduled_at
        self._slug = slug
        self._status = status
        self._streams = streams
        self._streams_list = streams_list
        self._tournament_id = tournament_id
        self._winner_id = winner_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BaseMatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BaseMatch of this BaseMatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begin_at(self):
        """Gets the begin_at of this BaseMatch.


        :return: The begin_at of this BaseMatch.
        :rtype: object
        """
        return self._begin_at

    @begin_at.setter
    def begin_at(self, begin_at):
        """Sets the begin_at of this BaseMatch.


        :param begin_at: The begin_at of this BaseMatch.
        :type begin_at: object
        """
        if begin_at is None:
            raise ValueError("Invalid value for `begin_at`, must not be `None`")

        self._begin_at = begin_at

    @property
    def detailed_stats(self):
        """Gets the detailed_stats of this BaseMatch.

        Whether the match offers full stats

        :return: The detailed_stats of this BaseMatch.
        :rtype: bool
        """
        return self._detailed_stats

    @detailed_stats.setter
    def detailed_stats(self, detailed_stats):
        """Sets the detailed_stats of this BaseMatch.

        Whether the match offers full stats

        :param detailed_stats: The detailed_stats of this BaseMatch.
        :type detailed_stats: bool
        """
        if detailed_stats is None:
            raise ValueError("Invalid value for `detailed_stats`, must not be `None`")

        self._detailed_stats = detailed_stats

    @property
    def draw(self):
        """Gets the draw of this BaseMatch.

        Whether result of the match is a draw

        :return: The draw of this BaseMatch.
        :rtype: bool
        """
        return self._draw

    @draw.setter
    def draw(self, draw):
        """Sets the draw of this BaseMatch.

        Whether result of the match is a draw

        :param draw: The draw of this BaseMatch.
        :type draw: bool
        """
        if draw is None:
            raise ValueError("Invalid value for `draw`, must not be `None`")

        self._draw = draw

    @property
    def end_at(self):
        """Gets the end_at of this BaseMatch.


        :return: The end_at of this BaseMatch.
        :rtype: object
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this BaseMatch.


        :param end_at: The end_at of this BaseMatch.
        :type end_at: object
        """
        if end_at is None:
            raise ValueError("Invalid value for `end_at`, must not be `None`")

        self._end_at = end_at

    @property
    def forfeit(self):
        """Gets the forfeit of this BaseMatch.

        Whether match was forfeited

        :return: The forfeit of this BaseMatch.
        :rtype: bool
        """
        return self._forfeit

    @forfeit.setter
    def forfeit(self, forfeit):
        """Sets the forfeit of this BaseMatch.

        Whether match was forfeited

        :param forfeit: The forfeit of this BaseMatch.
        :type forfeit: bool
        """
        if forfeit is None:
            raise ValueError("Invalid value for `forfeit`, must not be `None`")

        self._forfeit = forfeit

    @property
    def game_advantage(self):
        """Gets the game_advantage of this BaseMatch.


        :return: The game_advantage of this BaseMatch.
        :rtype: OpponentID1
        """
        return self._game_advantage

    @game_advantage.setter
    def game_advantage(self, game_advantage):
        """Sets the game_advantage of this BaseMatch.


        :param game_advantage: The game_advantage of this BaseMatch.
        :type game_advantage: OpponentID1
        """
        if game_advantage is None:
            raise ValueError("Invalid value for `game_advantage`, must not be `None`")

        self._game_advantage = game_advantage

    @property
    def id(self):
        """Gets the id of this BaseMatch.


        :return: The id of this BaseMatch.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseMatch.


        :param id: The id of this BaseMatch.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and id < 1:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")

        self._id = id

    @property
    def live(self):
        """Gets the live of this BaseMatch.


        :return: The live of this BaseMatch.
        :rtype: MatchLive
        """
        return self._live

    @live.setter
    def live(self, live):
        """Sets the live of this BaseMatch.


        :param live: The live of this BaseMatch.
        :type live: MatchLive
        """
        if live is None:
            raise ValueError("Invalid value for `live`, must not be `None`")

        self._live = live

    @property
    def live_embed_url(self):
        """Gets the live_embed_url of this BaseMatch.


        :return: The live_embed_url of this BaseMatch.
        :rtype: object
        """
        return self._live_embed_url

    @live_embed_url.setter
    def live_embed_url(self, live_embed_url):
        """Sets the live_embed_url of this BaseMatch.


        :param live_embed_url: The live_embed_url of this BaseMatch.
        :type live_embed_url: object
        """
        if live_embed_url is None:
            raise ValueError("Invalid value for `live_embed_url`, must not be `None`")

        self._live_embed_url = live_embed_url

    @property
    def match_type(self):
        """Gets the match_type of this BaseMatch.


        :return: The match_type of this BaseMatch.
        :rtype: MatchType
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this BaseMatch.


        :param match_type: The match_type of this BaseMatch.
        :type match_type: MatchType
        """
        if match_type is None:
            raise ValueError("Invalid value for `match_type`, must not be `None`")

        self._match_type = match_type

    @property
    def modified_at(self):
        """Gets the modified_at of this BaseMatch.


        :return: The modified_at of this BaseMatch.
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this BaseMatch.


        :param modified_at: The modified_at of this BaseMatch.
        :type modified_at: datetime
        """
        if modified_at is None:
            raise ValueError("Invalid value for `modified_at`, must not be `None`")
        if modified_at is not None and len(modified_at) < 1:
            raise ValueError("Invalid value for `modified_at`, length must be greater than or equal to `1`")

        self._modified_at = modified_at

    @property
    def name(self):
        """Gets the name of this BaseMatch.


        :return: The name of this BaseMatch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BaseMatch.


        :param name: The name of this BaseMatch.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def number_of_games(self):
        """Gets the number_of_games of this BaseMatch.

        Number of games

        :return: The number_of_games of this BaseMatch.
        :rtype: int
        """
        return self._number_of_games

    @number_of_games.setter
    def number_of_games(self, number_of_games):
        """Sets the number_of_games of this BaseMatch.

        Number of games

        :param number_of_games: The number_of_games of this BaseMatch.
        :type number_of_games: int
        """
        if number_of_games is None:
            raise ValueError("Invalid value for `number_of_games`, must not be `None`")
        if number_of_games is not None and number_of_games < 0:
            raise ValueError("Invalid value for `number_of_games`, must be a value greater than or equal to `0`")

        self._number_of_games = number_of_games

    @property
    def official_stream_url(self):
        """Gets the official_stream_url of this BaseMatch.


        :return: The official_stream_url of this BaseMatch.
        :rtype: object
        """
        return self._official_stream_url

    @official_stream_url.setter
    def official_stream_url(self, official_stream_url):
        """Sets the official_stream_url of this BaseMatch.


        :param official_stream_url: The official_stream_url of this BaseMatch.
        :type official_stream_url: object
        """
        if official_stream_url is None:
            raise ValueError("Invalid value for `official_stream_url`, must not be `None`")

        self._official_stream_url = official_stream_url

    @property
    def original_scheduled_at(self):
        """Gets the original_scheduled_at of this BaseMatch.


        :return: The original_scheduled_at of this BaseMatch.
        :rtype: object
        """
        return self._original_scheduled_at

    @original_scheduled_at.setter
    def original_scheduled_at(self, original_scheduled_at):
        """Sets the original_scheduled_at of this BaseMatch.


        :param original_scheduled_at: The original_scheduled_at of this BaseMatch.
        :type original_scheduled_at: object
        """
        if original_scheduled_at is None:
            raise ValueError("Invalid value for `original_scheduled_at`, must not be `None`")

        self._original_scheduled_at = original_scheduled_at

    @property
    def rescheduled(self):
        """Gets the rescheduled of this BaseMatch.


        :return: The rescheduled of this BaseMatch.
        :rtype: object
        """
        return self._rescheduled

    @rescheduled.setter
    def rescheduled(self, rescheduled):
        """Sets the rescheduled of this BaseMatch.


        :param rescheduled: The rescheduled of this BaseMatch.
        :type rescheduled: object
        """
        if rescheduled is None:
            raise ValueError("Invalid value for `rescheduled`, must not be `None`")

        self._rescheduled = rescheduled

    @property
    def scheduled_at(self):
        """Gets the scheduled_at of this BaseMatch.


        :return: The scheduled_at of this BaseMatch.
        :rtype: object
        """
        return self._scheduled_at

    @scheduled_at.setter
    def scheduled_at(self, scheduled_at):
        """Sets the scheduled_at of this BaseMatch.


        :param scheduled_at: The scheduled_at of this BaseMatch.
        :type scheduled_at: object
        """
        if scheduled_at is None:
            raise ValueError("Invalid value for `scheduled_at`, must not be `None`")

        self._scheduled_at = scheduled_at

    @property
    def slug(self):
        """Gets the slug of this BaseMatch.


        :return: The slug of this BaseMatch.
        :rtype: object
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this BaseMatch.


        :param slug: The slug of this BaseMatch.
        :type slug: object
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")

        self._slug = slug

    @property
    def status(self):
        """Gets the status of this BaseMatch.


        :return: The status of this BaseMatch.
        :rtype: MatchStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BaseMatch.


        :param status: The status of this BaseMatch.
        :type status: MatchStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def streams(self):
        """Gets the streams of this BaseMatch.


        :return: The streams of this BaseMatch.
        :rtype: MatchLocalizedStreams
        """
        return self._streams

    @streams.setter
    def streams(self, streams):
        """Sets the streams of this BaseMatch.


        :param streams: The streams of this BaseMatch.
        :type streams: MatchLocalizedStreams
        """
        if streams is None:
            raise ValueError("Invalid value for `streams`, must not be `None`")

        self._streams = streams

    @property
    def streams_list(self):
        """Gets the streams_list of this BaseMatch.


        :return: The streams_list of this BaseMatch.
        :rtype: List[Stream]
        """
        return self._streams_list

    @streams_list.setter
    def streams_list(self, streams_list):
        """Sets the streams_list of this BaseMatch.


        :param streams_list: The streams_list of this BaseMatch.
        :type streams_list: List[Stream]
        """
        if streams_list is None:
            raise ValueError("Invalid value for `streams_list`, must not be `None`")

        self._streams_list = streams_list

    @property
    def tournament_id(self):
        """Gets the tournament_id of this BaseMatch.


        :return: The tournament_id of this BaseMatch.
        :rtype: int
        """
        return self._tournament_id

    @tournament_id.setter
    def tournament_id(self, tournament_id):
        """Sets the tournament_id of this BaseMatch.


        :param tournament_id: The tournament_id of this BaseMatch.
        :type tournament_id: int
        """
        if tournament_id is None:
            raise ValueError("Invalid value for `tournament_id`, must not be `None`")
        if tournament_id is not None and tournament_id < 1:
            raise ValueError("Invalid value for `tournament_id`, must be a value greater than or equal to `1`")

        self._tournament_id = tournament_id

    @property
    def winner_id(self):
        """Gets the winner_id of this BaseMatch.


        :return: The winner_id of this BaseMatch.
        :rtype: OpponentID1
        """
        return self._winner_id

    @winner_id.setter
    def winner_id(self, winner_id):
        """Sets the winner_id of this BaseMatch.


        :param winner_id: The winner_id of this BaseMatch.
        :type winner_id: OpponentID1
        """
        if winner_id is None:
            raise ValueError("Invalid value for `winner_id`, must not be `None`")

        self._winner_id = winner_id
