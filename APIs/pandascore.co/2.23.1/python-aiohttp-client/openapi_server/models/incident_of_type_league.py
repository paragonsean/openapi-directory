# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.incident_change_type import IncidentChangeType
from openapi_server.models.incident_id import IncidentID
from openapi_server.models.league import League
from openapi_server import util


class IncidentOfTypeLeague(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, change_type: IncidentChangeType=None, id: IncidentID=None, modified_at: datetime=None, object: League=None, type: str=None):
        """IncidentOfTypeLeague - a model defined in OpenAPI

        :param change_type: The change_type of this IncidentOfTypeLeague.
        :param id: The id of this IncidentOfTypeLeague.
        :param modified_at: The modified_at of this IncidentOfTypeLeague.
        :param object: The object of this IncidentOfTypeLeague.
        :param type: The type of this IncidentOfTypeLeague.
        """
        self.openapi_types = {
            'change_type': IncidentChangeType,
            'id': IncidentID,
            'modified_at': datetime,
            'object': League,
            'type': str
        }

        self.attribute_map = {
            'change_type': 'change_type',
            'id': 'id',
            'modified_at': 'modified_at',
            'object': 'object',
            'type': 'type'
        }

        self._change_type = change_type
        self._id = id
        self._modified_at = modified_at
        self._object = object
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IncidentOfTypeLeague':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IncidentOfTypeLeague of this IncidentOfTypeLeague.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def change_type(self):
        """Gets the change_type of this IncidentOfTypeLeague.


        :return: The change_type of this IncidentOfTypeLeague.
        :rtype: IncidentChangeType
        """
        return self._change_type

    @change_type.setter
    def change_type(self, change_type):
        """Sets the change_type of this IncidentOfTypeLeague.


        :param change_type: The change_type of this IncidentOfTypeLeague.
        :type change_type: IncidentChangeType
        """
        if change_type is None:
            raise ValueError("Invalid value for `change_type`, must not be `None`")

        self._change_type = change_type

    @property
    def id(self):
        """Gets the id of this IncidentOfTypeLeague.


        :return: The id of this IncidentOfTypeLeague.
        :rtype: IncidentID
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IncidentOfTypeLeague.


        :param id: The id of this IncidentOfTypeLeague.
        :type id: IncidentID
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def modified_at(self):
        """Gets the modified_at of this IncidentOfTypeLeague.


        :return: The modified_at of this IncidentOfTypeLeague.
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this IncidentOfTypeLeague.


        :param modified_at: The modified_at of this IncidentOfTypeLeague.
        :type modified_at: datetime
        """
        if modified_at is None:
            raise ValueError("Invalid value for `modified_at`, must not be `None`")
        if modified_at is not None and len(modified_at) < 1:
            raise ValueError("Invalid value for `modified_at`, length must be greater than or equal to `1`")

        self._modified_at = modified_at

    @property
    def object(self):
        """Gets the object of this IncidentOfTypeLeague.


        :return: The object of this IncidentOfTypeLeague.
        :rtype: League
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this IncidentOfTypeLeague.


        :param object: The object of this IncidentOfTypeLeague.
        :type object: League
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")

        self._object = object

    @property
    def type(self):
        """Gets the type of this IncidentOfTypeLeague.


        :return: The type of this IncidentOfTypeLeague.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IncidentOfTypeLeague.


        :param type: The type of this IncidentOfTypeLeague.
        :type type: str
        """
        allowed_values = ["league"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
