# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.opponent_id import OpponentID
from openapi_server.models.opponent_type import OpponentType
from openapi_server import util


class RangeOverSeries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begin_at: List[datetime]=None, description: List[str]=None, end_at: List[datetime]=None, id: List[int]=None, league_id: List[int]=None, modified_at: List[datetime]=None, name: List[str]=None, season: List[str]=None, slug: List[str]=None, tier: List[str]=None, winner_id: List[OpponentID]=None, winner_type: List[OpponentType]=None, year: List[int]=None):
        """RangeOverSeries - a model defined in OpenAPI

        :param begin_at: The begin_at of this RangeOverSeries.
        :param description: The description of this RangeOverSeries.
        :param end_at: The end_at of this RangeOverSeries.
        :param id: The id of this RangeOverSeries.
        :param league_id: The league_id of this RangeOverSeries.
        :param modified_at: The modified_at of this RangeOverSeries.
        :param name: The name of this RangeOverSeries.
        :param season: The season of this RangeOverSeries.
        :param slug: The slug of this RangeOverSeries.
        :param tier: The tier of this RangeOverSeries.
        :param winner_id: The winner_id of this RangeOverSeries.
        :param winner_type: The winner_type of this RangeOverSeries.
        :param year: The year of this RangeOverSeries.
        """
        self.openapi_types = {
            'begin_at': List[datetime],
            'description': List[str],
            'end_at': List[datetime],
            'id': List[int],
            'league_id': List[int],
            'modified_at': List[datetime],
            'name': List[str],
            'season': List[str],
            'slug': List[str],
            'tier': List[str],
            'winner_id': List[OpponentID],
            'winner_type': List[OpponentType],
            'year': List[int]
        }

        self.attribute_map = {
            'begin_at': 'begin_at',
            'description': 'description',
            'end_at': 'end_at',
            'id': 'id',
            'league_id': 'league_id',
            'modified_at': 'modified_at',
            'name': 'name',
            'season': 'season',
            'slug': 'slug',
            'tier': 'tier',
            'winner_id': 'winner_id',
            'winner_type': 'winner_type',
            'year': 'year'
        }

        self._begin_at = begin_at
        self._description = description
        self._end_at = end_at
        self._id = id
        self._league_id = league_id
        self._modified_at = modified_at
        self._name = name
        self._season = season
        self._slug = slug
        self._tier = tier
        self._winner_id = winner_id
        self._winner_type = winner_type
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RangeOverSeries':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The range_over_Series of this RangeOverSeries.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begin_at(self):
        """Gets the begin_at of this RangeOverSeries.


        :return: The begin_at of this RangeOverSeries.
        :rtype: List[datetime]
        """
        return self._begin_at

    @begin_at.setter
    def begin_at(self, begin_at):
        """Sets the begin_at of this RangeOverSeries.


        :param begin_at: The begin_at of this RangeOverSeries.
        :type begin_at: List[datetime]
        """
        if begin_at is not None and len(begin_at) > 2:
            raise ValueError("Invalid value for `begin_at`, number of items must be less than or equal to `2`")
        if begin_at is not None and len(begin_at) < 2:
            raise ValueError("Invalid value for `begin_at`, number of items must be greater than or equal to `2`")

        self._begin_at = begin_at

    @property
    def description(self):
        """Gets the description of this RangeOverSeries.


        :return: The description of this RangeOverSeries.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RangeOverSeries.


        :param description: The description of this RangeOverSeries.
        :type description: List[str]
        """
        if description is not None and len(description) > 2:
            raise ValueError("Invalid value for `description`, number of items must be less than or equal to `2`")
        if description is not None and len(description) < 2:
            raise ValueError("Invalid value for `description`, number of items must be greater than or equal to `2`")

        self._description = description

    @property
    def end_at(self):
        """Gets the end_at of this RangeOverSeries.


        :return: The end_at of this RangeOverSeries.
        :rtype: List[datetime]
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this RangeOverSeries.


        :param end_at: The end_at of this RangeOverSeries.
        :type end_at: List[datetime]
        """
        if end_at is not None and len(end_at) > 2:
            raise ValueError("Invalid value for `end_at`, number of items must be less than or equal to `2`")
        if end_at is not None and len(end_at) < 2:
            raise ValueError("Invalid value for `end_at`, number of items must be greater than or equal to `2`")

        self._end_at = end_at

    @property
    def id(self):
        """Gets the id of this RangeOverSeries.


        :return: The id of this RangeOverSeries.
        :rtype: List[int]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RangeOverSeries.


        :param id: The id of this RangeOverSeries.
        :type id: List[int]
        """
        if id is not None and len(id) > 2:
            raise ValueError("Invalid value for `id`, number of items must be less than or equal to `2`")
        if id is not None and len(id) < 2:
            raise ValueError("Invalid value for `id`, number of items must be greater than or equal to `2`")

        self._id = id

    @property
    def league_id(self):
        """Gets the league_id of this RangeOverSeries.


        :return: The league_id of this RangeOverSeries.
        :rtype: List[int]
        """
        return self._league_id

    @league_id.setter
    def league_id(self, league_id):
        """Sets the league_id of this RangeOverSeries.


        :param league_id: The league_id of this RangeOverSeries.
        :type league_id: List[int]
        """
        if league_id is not None and len(league_id) > 2:
            raise ValueError("Invalid value for `league_id`, number of items must be less than or equal to `2`")
        if league_id is not None and len(league_id) < 2:
            raise ValueError("Invalid value for `league_id`, number of items must be greater than or equal to `2`")

        self._league_id = league_id

    @property
    def modified_at(self):
        """Gets the modified_at of this RangeOverSeries.


        :return: The modified_at of this RangeOverSeries.
        :rtype: List[datetime]
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this RangeOverSeries.


        :param modified_at: The modified_at of this RangeOverSeries.
        :type modified_at: List[datetime]
        """
        if modified_at is not None and len(modified_at) > 2:
            raise ValueError("Invalid value for `modified_at`, number of items must be less than or equal to `2`")
        if modified_at is not None and len(modified_at) < 2:
            raise ValueError("Invalid value for `modified_at`, number of items must be greater than or equal to `2`")

        self._modified_at = modified_at

    @property
    def name(self):
        """Gets the name of this RangeOverSeries.


        :return: The name of this RangeOverSeries.
        :rtype: List[str]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RangeOverSeries.


        :param name: The name of this RangeOverSeries.
        :type name: List[str]
        """
        if name is not None and len(name) > 2:
            raise ValueError("Invalid value for `name`, number of items must be less than or equal to `2`")
        if name is not None and len(name) < 2:
            raise ValueError("Invalid value for `name`, number of items must be greater than or equal to `2`")

        self._name = name

    @property
    def season(self):
        """Gets the season of this RangeOverSeries.


        :return: The season of this RangeOverSeries.
        :rtype: List[str]
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this RangeOverSeries.


        :param season: The season of this RangeOverSeries.
        :type season: List[str]
        """
        if season is not None and len(season) > 2:
            raise ValueError("Invalid value for `season`, number of items must be less than or equal to `2`")
        if season is not None and len(season) < 2:
            raise ValueError("Invalid value for `season`, number of items must be greater than or equal to `2`")

        self._season = season

    @property
    def slug(self):
        """Gets the slug of this RangeOverSeries.


        :return: The slug of this RangeOverSeries.
        :rtype: List[str]
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this RangeOverSeries.


        :param slug: The slug of this RangeOverSeries.
        :type slug: List[str]
        """
        if slug is not None and len(slug) > 2:
            raise ValueError("Invalid value for `slug`, number of items must be less than or equal to `2`")
        if slug is not None and len(slug) < 2:
            raise ValueError("Invalid value for `slug`, number of items must be greater than or equal to `2`")

        self._slug = slug

    @property
    def tier(self):
        """Gets the tier of this RangeOverSeries.


        :return: The tier of this RangeOverSeries.
        :rtype: List[str]
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this RangeOverSeries.


        :param tier: The tier of this RangeOverSeries.
        :type tier: List[str]
        """
        if tier is not None and len(tier) > 2:
            raise ValueError("Invalid value for `tier`, number of items must be less than or equal to `2`")
        if tier is not None and len(tier) < 2:
            raise ValueError("Invalid value for `tier`, number of items must be greater than or equal to `2`")

        self._tier = tier

    @property
    def winner_id(self):
        """Gets the winner_id of this RangeOverSeries.


        :return: The winner_id of this RangeOverSeries.
        :rtype: List[OpponentID]
        """
        return self._winner_id

    @winner_id.setter
    def winner_id(self, winner_id):
        """Sets the winner_id of this RangeOverSeries.


        :param winner_id: The winner_id of this RangeOverSeries.
        :type winner_id: List[OpponentID]
        """
        if winner_id is not None and len(winner_id) > 2:
            raise ValueError("Invalid value for `winner_id`, number of items must be less than or equal to `2`")
        if winner_id is not None and len(winner_id) < 2:
            raise ValueError("Invalid value for `winner_id`, number of items must be greater than or equal to `2`")

        self._winner_id = winner_id

    @property
    def winner_type(self):
        """Gets the winner_type of this RangeOverSeries.


        :return: The winner_type of this RangeOverSeries.
        :rtype: List[OpponentType]
        """
        return self._winner_type

    @winner_type.setter
    def winner_type(self, winner_type):
        """Sets the winner_type of this RangeOverSeries.


        :param winner_type: The winner_type of this RangeOverSeries.
        :type winner_type: List[OpponentType]
        """
        if winner_type is not None and len(winner_type) > 2:
            raise ValueError("Invalid value for `winner_type`, number of items must be less than or equal to `2`")
        if winner_type is not None and len(winner_type) < 2:
            raise ValueError("Invalid value for `winner_type`, number of items must be greater than or equal to `2`")

        self._winner_type = winner_type

    @property
    def year(self):
        """Gets the year of this RangeOverSeries.


        :return: The year of this RangeOverSeries.
        :rtype: List[int]
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this RangeOverSeries.


        :param year: The year of this RangeOverSeries.
        :type year: List[int]
        """
        if year is not None and len(year) > 2:
            raise ValueError("Invalid value for `year`, number of items must be less than or equal to `2`")
        if year is not None and len(year) < 2:
            raise ValueError("Invalid value for `year`, number of items must be greater than or equal to `2`")

        self._year = year
