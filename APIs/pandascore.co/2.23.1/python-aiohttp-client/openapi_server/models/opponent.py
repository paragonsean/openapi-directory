# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_opponent import BaseOpponent
from openapi_server.models.opponent_type import OpponentType
from openapi_server import util


class Opponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, opponent: BaseOpponent=None, type: OpponentType=None):
        """Opponent - a model defined in OpenAPI

        :param opponent: The opponent of this Opponent.
        :param type: The type of this Opponent.
        """
        self.openapi_types = {
            'opponent': BaseOpponent,
            'type': OpponentType
        }

        self.attribute_map = {
            'opponent': 'opponent',
            'type': 'type'
        }

        self._opponent = opponent
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Opponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Opponent of this Opponent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def opponent(self):
        """Gets the opponent of this Opponent.


        :return: The opponent of this Opponent.
        :rtype: BaseOpponent
        """
        return self._opponent

    @opponent.setter
    def opponent(self, opponent):
        """Sets the opponent of this Opponent.


        :param opponent: The opponent of this Opponent.
        :type opponent: BaseOpponent
        """
        if opponent is None:
            raise ValueError("Invalid value for `opponent`, must not be `None`")

        self._opponent = opponent

    @property
    def type(self):
        """Gets the type of this Opponent.


        :return: The type of this Opponent.
        :rtype: OpponentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Opponent.


        :param type: The type of this Opponent.
        :type type: OpponentType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
