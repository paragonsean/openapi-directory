# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.csgo_outcome import CSGOOutcome
from openapi_server import util


class BettingCSGOGameRoundTeam(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, outcome: CSGOOutcome=None, round: int=None, team_id: int=None, terrorist: bool=None, winner: bool=None):
        """BettingCSGOGameRoundTeam - a model defined in OpenAPI

        :param outcome: The outcome of this BettingCSGOGameRoundTeam.
        :param round: The round of this BettingCSGOGameRoundTeam.
        :param team_id: The team_id of this BettingCSGOGameRoundTeam.
        :param terrorist: The terrorist of this BettingCSGOGameRoundTeam.
        :param winner: The winner of this BettingCSGOGameRoundTeam.
        """
        self.openapi_types = {
            'outcome': CSGOOutcome,
            'round': int,
            'team_id': int,
            'terrorist': bool,
            'winner': bool
        }

        self.attribute_map = {
            'outcome': 'outcome',
            'round': 'round',
            'team_id': 'team_id',
            'terrorist': 'terrorist',
            'winner': 'winner'
        }

        self._outcome = outcome
        self._round = round
        self._team_id = team_id
        self._terrorist = terrorist
        self._winner = winner

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BettingCSGOGameRoundTeam':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BettingCSGOGameRoundTeam of this BettingCSGOGameRoundTeam.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def outcome(self):
        """Gets the outcome of this BettingCSGOGameRoundTeam.


        :return: The outcome of this BettingCSGOGameRoundTeam.
        :rtype: CSGOOutcome
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this BettingCSGOGameRoundTeam.


        :param outcome: The outcome of this BettingCSGOGameRoundTeam.
        :type outcome: CSGOOutcome
        """
        if outcome is None:
            raise ValueError("Invalid value for `outcome`, must not be `None`")

        self._outcome = outcome

    @property
    def round(self):
        """Gets the round of this BettingCSGOGameRoundTeam.


        :return: The round of this BettingCSGOGameRoundTeam.
        :rtype: int
        """
        return self._round

    @round.setter
    def round(self, round):
        """Sets the round of this BettingCSGOGameRoundTeam.


        :param round: The round of this BettingCSGOGameRoundTeam.
        :type round: int
        """
        if round is None:
            raise ValueError("Invalid value for `round`, must not be `None`")
        if round is not None and round < 1:
            raise ValueError("Invalid value for `round`, must be a value greater than or equal to `1`")

        self._round = round

    @property
    def team_id(self):
        """Gets the team_id of this BettingCSGOGameRoundTeam.


        :return: The team_id of this BettingCSGOGameRoundTeam.
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this BettingCSGOGameRoundTeam.


        :param team_id: The team_id of this BettingCSGOGameRoundTeam.
        :type team_id: int
        """
        if team_id is None:
            raise ValueError("Invalid value for `team_id`, must not be `None`")
        if team_id is not None and team_id < 1:
            raise ValueError("Invalid value for `team_id`, must be a value greater than or equal to `1`")

        self._team_id = team_id

    @property
    def terrorist(self):
        """Gets the terrorist of this BettingCSGOGameRoundTeam.

        For Counter Strike: Global Offensive: whether team is on T side

        :return: The terrorist of this BettingCSGOGameRoundTeam.
        :rtype: bool
        """
        return self._terrorist

    @terrorist.setter
    def terrorist(self, terrorist):
        """Sets the terrorist of this BettingCSGOGameRoundTeam.

        For Counter Strike: Global Offensive: whether team is on T side

        :param terrorist: The terrorist of this BettingCSGOGameRoundTeam.
        :type terrorist: bool
        """
        if terrorist is None:
            raise ValueError("Invalid value for `terrorist`, must not be `None`")

        self._terrorist = terrorist

    @property
    def winner(self):
        """Gets the winner of this BettingCSGOGameRoundTeam.

        For Counter Strike: Global Offensive: whether team has won the round

        :return: The winner of this BettingCSGOGameRoundTeam.
        :rtype: bool
        """
        return self._winner

    @winner.setter
    def winner(self, winner):
        """Sets the winner of this BettingCSGOGameRoundTeam.

        For Counter Strike: Global Offensive: whether team has won the round

        :param winner: The winner of this BettingCSGOGameRoundTeam.
        :type winner: bool
        """
        if winner is None:
            raise ValueError("Invalid value for `winner`, must not be `None`")

        self._winner = winner
