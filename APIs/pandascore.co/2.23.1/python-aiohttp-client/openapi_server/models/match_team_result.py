# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MatchTeamResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, score: int=None, team_id: int=None):
        """MatchTeamResult - a model defined in OpenAPI

        :param score: The score of this MatchTeamResult.
        :param team_id: The team_id of this MatchTeamResult.
        """
        self.openapi_types = {
            'score': int,
            'team_id': int
        }

        self.attribute_map = {
            'score': 'score',
            'team_id': 'team_id'
        }

        self._score = score
        self._team_id = team_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatchTeamResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MatchTeamResult of this MatchTeamResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def score(self):
        """Gets the score of this MatchTeamResult.


        :return: The score of this MatchTeamResult.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this MatchTeamResult.


        :param score: The score of this MatchTeamResult.
        :type score: int
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")
        if score is not None and score < 0:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")

        self._score = score

    @property
    def team_id(self):
        """Gets the team_id of this MatchTeamResult.


        :return: The team_id of this MatchTeamResult.
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this MatchTeamResult.


        :param team_id: The team_id of this MatchTeamResult.
        :type team_id: int
        """
        if team_id is None:
            raise ValueError("Invalid value for `team_id`, must not be `None`")
        if team_id is not None and team_id < 1:
            raise ValueError("Invalid value for `team_id`, must be a value greater than or equal to `1`")

        self._team_id = team_id
