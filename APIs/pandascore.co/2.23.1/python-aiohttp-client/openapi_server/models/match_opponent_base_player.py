# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.current_videogame import CurrentVideogame
from openapi_server import util


class MatchOpponentBasePlayer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, birth_year: object=None, birthday: object=None, current_videogame: CurrentVideogame=None, first_name: object=None, hometown: object=None, id: int=None, image_url: object=None, last_name: object=None, name: str=None, nationality: object=None, role: object=None, slug: object=None):
        """MatchOpponentBasePlayer - a model defined in OpenAPI

        :param birth_year: The birth_year of this MatchOpponentBasePlayer.
        :param birthday: The birthday of this MatchOpponentBasePlayer.
        :param current_videogame: The current_videogame of this MatchOpponentBasePlayer.
        :param first_name: The first_name of this MatchOpponentBasePlayer.
        :param hometown: The hometown of this MatchOpponentBasePlayer.
        :param id: The id of this MatchOpponentBasePlayer.
        :param image_url: The image_url of this MatchOpponentBasePlayer.
        :param last_name: The last_name of this MatchOpponentBasePlayer.
        :param name: The name of this MatchOpponentBasePlayer.
        :param nationality: The nationality of this MatchOpponentBasePlayer.
        :param role: The role of this MatchOpponentBasePlayer.
        :param slug: The slug of this MatchOpponentBasePlayer.
        """
        self.openapi_types = {
            'birth_year': object,
            'birthday': object,
            'current_videogame': CurrentVideogame,
            'first_name': object,
            'hometown': object,
            'id': int,
            'image_url': object,
            'last_name': object,
            'name': str,
            'nationality': object,
            'role': object,
            'slug': object
        }

        self.attribute_map = {
            'birth_year': 'birth_year',
            'birthday': 'birthday',
            'current_videogame': 'current_videogame',
            'first_name': 'first_name',
            'hometown': 'hometown',
            'id': 'id',
            'image_url': 'image_url',
            'last_name': 'last_name',
            'name': 'name',
            'nationality': 'nationality',
            'role': 'role',
            'slug': 'slug'
        }

        self._birth_year = birth_year
        self._birthday = birthday
        self._current_videogame = current_videogame
        self._first_name = first_name
        self._hometown = hometown
        self._id = id
        self._image_url = image_url
        self._last_name = last_name
        self._name = name
        self._nationality = nationality
        self._role = role
        self._slug = slug

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatchOpponentBasePlayer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MatchOpponentBasePlayer of this MatchOpponentBasePlayer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def birth_year(self):
        """Gets the birth_year of this MatchOpponentBasePlayer.


        :return: The birth_year of this MatchOpponentBasePlayer.
        :rtype: object
        """
        return self._birth_year

    @birth_year.setter
    def birth_year(self, birth_year):
        """Sets the birth_year of this MatchOpponentBasePlayer.


        :param birth_year: The birth_year of this MatchOpponentBasePlayer.
        :type birth_year: object
        """
        if birth_year is None:
            raise ValueError("Invalid value for `birth_year`, must not be `None`")

        self._birth_year = birth_year

    @property
    def birthday(self):
        """Gets the birthday of this MatchOpponentBasePlayer.


        :return: The birthday of this MatchOpponentBasePlayer.
        :rtype: object
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this MatchOpponentBasePlayer.


        :param birthday: The birthday of this MatchOpponentBasePlayer.
        :type birthday: object
        """
        if birthday is None:
            raise ValueError("Invalid value for `birthday`, must not be `None`")

        self._birthday = birthday

    @property
    def current_videogame(self):
        """Gets the current_videogame of this MatchOpponentBasePlayer.


        :return: The current_videogame of this MatchOpponentBasePlayer.
        :rtype: CurrentVideogame
        """
        return self._current_videogame

    @current_videogame.setter
    def current_videogame(self, current_videogame):
        """Sets the current_videogame of this MatchOpponentBasePlayer.


        :param current_videogame: The current_videogame of this MatchOpponentBasePlayer.
        :type current_videogame: CurrentVideogame
        """
        if current_videogame is None:
            raise ValueError("Invalid value for `current_videogame`, must not be `None`")

        self._current_videogame = current_videogame

    @property
    def first_name(self):
        """Gets the first_name of this MatchOpponentBasePlayer.


        :return: The first_name of this MatchOpponentBasePlayer.
        :rtype: object
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this MatchOpponentBasePlayer.


        :param first_name: The first_name of this MatchOpponentBasePlayer.
        :type first_name: object
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def hometown(self):
        """Gets the hometown of this MatchOpponentBasePlayer.


        :return: The hometown of this MatchOpponentBasePlayer.
        :rtype: object
        """
        return self._hometown

    @hometown.setter
    def hometown(self, hometown):
        """Sets the hometown of this MatchOpponentBasePlayer.


        :param hometown: The hometown of this MatchOpponentBasePlayer.
        :type hometown: object
        """
        if hometown is None:
            raise ValueError("Invalid value for `hometown`, must not be `None`")

        self._hometown = hometown

    @property
    def id(self):
        """Gets the id of this MatchOpponentBasePlayer.


        :return: The id of this MatchOpponentBasePlayer.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MatchOpponentBasePlayer.


        :param id: The id of this MatchOpponentBasePlayer.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and id < 1:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this MatchOpponentBasePlayer.


        :return: The image_url of this MatchOpponentBasePlayer.
        :rtype: object
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this MatchOpponentBasePlayer.


        :param image_url: The image_url of this MatchOpponentBasePlayer.
        :type image_url: object
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")

        self._image_url = image_url

    @property
    def last_name(self):
        """Gets the last_name of this MatchOpponentBasePlayer.


        :return: The last_name of this MatchOpponentBasePlayer.
        :rtype: object
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this MatchOpponentBasePlayer.


        :param last_name: The last_name of this MatchOpponentBasePlayer.
        :type last_name: object
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def name(self):
        """Gets the name of this MatchOpponentBasePlayer.


        :return: The name of this MatchOpponentBasePlayer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MatchOpponentBasePlayer.


        :param name: The name of this MatchOpponentBasePlayer.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def nationality(self):
        """Gets the nationality of this MatchOpponentBasePlayer.


        :return: The nationality of this MatchOpponentBasePlayer.
        :rtype: object
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this MatchOpponentBasePlayer.


        :param nationality: The nationality of this MatchOpponentBasePlayer.
        :type nationality: object
        """
        if nationality is None:
            raise ValueError("Invalid value for `nationality`, must not be `None`")

        self._nationality = nationality

    @property
    def role(self):
        """Gets the role of this MatchOpponentBasePlayer.


        :return: The role of this MatchOpponentBasePlayer.
        :rtype: object
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this MatchOpponentBasePlayer.


        :param role: The role of this MatchOpponentBasePlayer.
        :type role: object
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role

    @property
    def slug(self):
        """Gets the slug of this MatchOpponentBasePlayer.


        :return: The slug of this MatchOpponentBasePlayer.
        :rtype: object
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this MatchOpponentBasePlayer.


        :param slug: The slug of this MatchOpponentBasePlayer.
        :type slug: object
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")

        self._slug = slug
