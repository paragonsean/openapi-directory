# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RangeOverLeagues(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: List[int]=None, modified_at: List[datetime]=None, name: List[str]=None, slug: List[str]=None, url: List[str]=None):
        """RangeOverLeagues - a model defined in OpenAPI

        :param id: The id of this RangeOverLeagues.
        :param modified_at: The modified_at of this RangeOverLeagues.
        :param name: The name of this RangeOverLeagues.
        :param slug: The slug of this RangeOverLeagues.
        :param url: The url of this RangeOverLeagues.
        """
        self.openapi_types = {
            'id': List[int],
            'modified_at': List[datetime],
            'name': List[str],
            'slug': List[str],
            'url': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'modified_at': 'modified_at',
            'name': 'name',
            'slug': 'slug',
            'url': 'url'
        }

        self._id = id
        self._modified_at = modified_at
        self._name = name
        self._slug = slug
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RangeOverLeagues':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The range_over_Leagues of this RangeOverLeagues.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this RangeOverLeagues.


        :return: The id of this RangeOverLeagues.
        :rtype: List[int]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RangeOverLeagues.


        :param id: The id of this RangeOverLeagues.
        :type id: List[int]
        """
        if id is not None and len(id) > 2:
            raise ValueError("Invalid value for `id`, number of items must be less than or equal to `2`")
        if id is not None and len(id) < 2:
            raise ValueError("Invalid value for `id`, number of items must be greater than or equal to `2`")

        self._id = id

    @property
    def modified_at(self):
        """Gets the modified_at of this RangeOverLeagues.


        :return: The modified_at of this RangeOverLeagues.
        :rtype: List[datetime]
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this RangeOverLeagues.


        :param modified_at: The modified_at of this RangeOverLeagues.
        :type modified_at: List[datetime]
        """
        if modified_at is not None and len(modified_at) > 2:
            raise ValueError("Invalid value for `modified_at`, number of items must be less than or equal to `2`")
        if modified_at is not None and len(modified_at) < 2:
            raise ValueError("Invalid value for `modified_at`, number of items must be greater than or equal to `2`")

        self._modified_at = modified_at

    @property
    def name(self):
        """Gets the name of this RangeOverLeagues.


        :return: The name of this RangeOverLeagues.
        :rtype: List[str]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RangeOverLeagues.


        :param name: The name of this RangeOverLeagues.
        :type name: List[str]
        """
        if name is not None and len(name) > 2:
            raise ValueError("Invalid value for `name`, number of items must be less than or equal to `2`")
        if name is not None and len(name) < 2:
            raise ValueError("Invalid value for `name`, number of items must be greater than or equal to `2`")

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this RangeOverLeagues.


        :return: The slug of this RangeOverLeagues.
        :rtype: List[str]
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this RangeOverLeagues.


        :param slug: The slug of this RangeOverLeagues.
        :type slug: List[str]
        """
        if slug is not None and len(slug) > 2:
            raise ValueError("Invalid value for `slug`, number of items must be less than or equal to `2`")
        if slug is not None and len(slug) < 2:
            raise ValueError("Invalid value for `slug`, number of items must be greater than or equal to `2`")

        self._slug = slug

    @property
    def url(self):
        """Gets the url of this RangeOverLeagues.


        :return: The url of this RangeOverLeagues.
        :rtype: List[str]
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RangeOverLeagues.


        :param url: The url of this RangeOverLeagues.
        :type url: List[str]
        """
        if url is not None and len(url) > 2:
            raise ValueError("Invalid value for `url`, number of items must be less than or equal to `2`")
        if url is not None and len(url) < 2:
            raise ValueError("Invalid value for `url`, number of items must be greater than or equal to `2`")

        self._url = url
