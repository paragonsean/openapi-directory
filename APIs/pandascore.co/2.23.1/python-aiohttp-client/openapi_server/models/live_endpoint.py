# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.live_type import LiveType
from openapi_server import util


class LiveEndpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begin_at: object=None, expected_begin_at: object=None, last_active: object=None, match_id: int=None, open: bool=None, type: LiveType=None, url: str=None):
        """LiveEndpoint - a model defined in OpenAPI

        :param begin_at: The begin_at of this LiveEndpoint.
        :param expected_begin_at: The expected_begin_at of this LiveEndpoint.
        :param last_active: The last_active of this LiveEndpoint.
        :param match_id: The match_id of this LiveEndpoint.
        :param open: The open of this LiveEndpoint.
        :param type: The type of this LiveEndpoint.
        :param url: The url of this LiveEndpoint.
        """
        self.openapi_types = {
            'begin_at': object,
            'expected_begin_at': object,
            'last_active': object,
            'match_id': int,
            'open': bool,
            'type': LiveType,
            'url': str
        }

        self.attribute_map = {
            'begin_at': 'begin_at',
            'expected_begin_at': 'expected_begin_at',
            'last_active': 'last_active',
            'match_id': 'match_id',
            'open': 'open',
            'type': 'type',
            'url': 'url'
        }

        self._begin_at = begin_at
        self._expected_begin_at = expected_begin_at
        self._last_active = last_active
        self._match_id = match_id
        self._open = open
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveEndpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveEndpoint of this LiveEndpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begin_at(self):
        """Gets the begin_at of this LiveEndpoint.


        :return: The begin_at of this LiveEndpoint.
        :rtype: object
        """
        return self._begin_at

    @begin_at.setter
    def begin_at(self, begin_at):
        """Sets the begin_at of this LiveEndpoint.


        :param begin_at: The begin_at of this LiveEndpoint.
        :type begin_at: object
        """
        if begin_at is None:
            raise ValueError("Invalid value for `begin_at`, must not be `None`")

        self._begin_at = begin_at

    @property
    def expected_begin_at(self):
        """Gets the expected_begin_at of this LiveEndpoint.


        :return: The expected_begin_at of this LiveEndpoint.
        :rtype: object
        """
        return self._expected_begin_at

    @expected_begin_at.setter
    def expected_begin_at(self, expected_begin_at):
        """Sets the expected_begin_at of this LiveEndpoint.


        :param expected_begin_at: The expected_begin_at of this LiveEndpoint.
        :type expected_begin_at: object
        """
        if expected_begin_at is None:
            raise ValueError("Invalid value for `expected_begin_at`, must not be `None`")

        self._expected_begin_at = expected_begin_at

    @property
    def last_active(self):
        """Gets the last_active of this LiveEndpoint.


        :return: The last_active of this LiveEndpoint.
        :rtype: object
        """
        return self._last_active

    @last_active.setter
    def last_active(self, last_active):
        """Sets the last_active of this LiveEndpoint.


        :param last_active: The last_active of this LiveEndpoint.
        :type last_active: object
        """
        if last_active is None:
            raise ValueError("Invalid value for `last_active`, must not be `None`")

        self._last_active = last_active

    @property
    def match_id(self):
        """Gets the match_id of this LiveEndpoint.


        :return: The match_id of this LiveEndpoint.
        :rtype: int
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """Sets the match_id of this LiveEndpoint.


        :param match_id: The match_id of this LiveEndpoint.
        :type match_id: int
        """
        if match_id is None:
            raise ValueError("Invalid value for `match_id`, must not be `None`")
        if match_id is not None and match_id < 1:
            raise ValueError("Invalid value for `match_id`, must be a value greater than or equal to `1`")

        self._match_id = match_id

    @property
    def open(self):
        """Gets the open of this LiveEndpoint.

        Whether live is open

        :return: The open of this LiveEndpoint.
        :rtype: bool
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this LiveEndpoint.

        Whether live is open

        :param open: The open of this LiveEndpoint.
        :type open: bool
        """
        if open is None:
            raise ValueError("Invalid value for `open`, must not be `None`")

        self._open = open

    @property
    def type(self):
        """Gets the type of this LiveEndpoint.


        :return: The type of this LiveEndpoint.
        :rtype: LiveType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LiveEndpoint.


        :param type: The type of this LiveEndpoint.
        :type type: LiveType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def url(self):
        """Gets the url of this LiveEndpoint.


        :return: The url of this LiveEndpoint.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this LiveEndpoint.


        :param url: The url of this LiveEndpoint.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
