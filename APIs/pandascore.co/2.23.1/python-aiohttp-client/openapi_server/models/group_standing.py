# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_team import BaseTeam
from openapi_server import util


class GroupStanding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, losses: int=None, rank: int=None, team: BaseTeam=None, ties: int=None, total: int=None, wins: int=None):
        """GroupStanding - a model defined in OpenAPI

        :param losses: The losses of this GroupStanding.
        :param rank: The rank of this GroupStanding.
        :param team: The team of this GroupStanding.
        :param ties: The ties of this GroupStanding.
        :param total: The total of this GroupStanding.
        :param wins: The wins of this GroupStanding.
        """
        self.openapi_types = {
            'losses': int,
            'rank': int,
            'team': BaseTeam,
            'ties': int,
            'total': int,
            'wins': int
        }

        self.attribute_map = {
            'losses': 'losses',
            'rank': 'rank',
            'team': 'team',
            'ties': 'ties',
            'total': 'total',
            'wins': 'wins'
        }

        self._losses = losses
        self._rank = rank
        self._team = team
        self._ties = ties
        self._total = total
        self._wins = wins

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupStanding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupStanding of this GroupStanding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def losses(self):
        """Gets the losses of this GroupStanding.


        :return: The losses of this GroupStanding.
        :rtype: int
        """
        return self._losses

    @losses.setter
    def losses(self, losses):
        """Sets the losses of this GroupStanding.


        :param losses: The losses of this GroupStanding.
        :type losses: int
        """
        if losses is None:
            raise ValueError("Invalid value for `losses`, must not be `None`")
        if losses is not None and losses < 0:
            raise ValueError("Invalid value for `losses`, must be a value greater than or equal to `0`")

        self._losses = losses

    @property
    def rank(self):
        """Gets the rank of this GroupStanding.


        :return: The rank of this GroupStanding.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this GroupStanding.


        :param rank: The rank of this GroupStanding.
        :type rank: int
        """
        if rank is None:
            raise ValueError("Invalid value for `rank`, must not be `None`")
        if rank is not None and rank < 0:
            raise ValueError("Invalid value for `rank`, must be a value greater than or equal to `0`")

        self._rank = rank

    @property
    def team(self):
        """Gets the team of this GroupStanding.


        :return: The team of this GroupStanding.
        :rtype: BaseTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this GroupStanding.


        :param team: The team of this GroupStanding.
        :type team: BaseTeam
        """
        if team is None:
            raise ValueError("Invalid value for `team`, must not be `None`")

        self._team = team

    @property
    def ties(self):
        """Gets the ties of this GroupStanding.

        Only present if ties occured during the tournament

        :return: The ties of this GroupStanding.
        :rtype: int
        """
        return self._ties

    @ties.setter
    def ties(self, ties):
        """Sets the ties of this GroupStanding.

        Only present if ties occured during the tournament

        :param ties: The ties of this GroupStanding.
        :type ties: int
        """
        if ties is not None and ties < 1:
            raise ValueError("Invalid value for `ties`, must be a value greater than or equal to `1`")

        self._ties = ties

    @property
    def total(self):
        """Gets the total of this GroupStanding.


        :return: The total of this GroupStanding.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this GroupStanding.


        :param total: The total of this GroupStanding.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")
        if total is not None and total < 0:
            raise ValueError("Invalid value for `total`, must be a value greater than or equal to `0`")

        self._total = total

    @property
    def wins(self):
        """Gets the wins of this GroupStanding.


        :return: The wins of this GroupStanding.
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this GroupStanding.


        :param wins: The wins of this GroupStanding.
        :type wins: int
        """
        if wins is None:
            raise ValueError("Invalid value for `wins`, must not be `None`")
        if wins is not None and wins < 0:
            raise ValueError("Invalid value for `wins`, must be a value greater than or equal to `0`")

        self._wins = wins
