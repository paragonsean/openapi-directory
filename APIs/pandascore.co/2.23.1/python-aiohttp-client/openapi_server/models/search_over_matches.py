# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.match_status import MatchStatus
from openapi_server.models.match_type import MatchType
import re
from openapi_server import util


class SearchOverMatches(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, match_type: MatchType=None, name: str=None, slug: str=None, status: MatchStatus=None):
        """SearchOverMatches - a model defined in OpenAPI

        :param match_type: The match_type of this SearchOverMatches.
        :param name: The name of this SearchOverMatches.
        :param slug: The slug of this SearchOverMatches.
        :param status: The status of this SearchOverMatches.
        """
        self.openapi_types = {
            'match_type': MatchType,
            'name': str,
            'slug': str,
            'status': MatchStatus
        }

        self.attribute_map = {
            'match_type': 'match_type',
            'name': 'name',
            'slug': 'slug',
            'status': 'status'
        }

        self._match_type = match_type
        self._name = name
        self._slug = slug
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchOverMatches':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The search_over_Matches of this SearchOverMatches.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def match_type(self):
        """Gets the match_type of this SearchOverMatches.


        :return: The match_type of this SearchOverMatches.
        :rtype: MatchType
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this SearchOverMatches.


        :param match_type: The match_type of this SearchOverMatches.
        :type match_type: MatchType
        """

        self._match_type = match_type

    @property
    def name(self):
        """Gets the name of this SearchOverMatches.


        :return: The name of this SearchOverMatches.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchOverMatches.


        :param name: The name of this SearchOverMatches.
        :type name: str
        """

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this SearchOverMatches.


        :return: The slug of this SearchOverMatches.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this SearchOverMatches.


        :param slug: The slug of this SearchOverMatches.
        :type slug: str
        """
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[ a-zA-Z0-9_-]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[ a-zA-Z0-9_-]+$/`")

        self._slug = slug

    @property
    def status(self):
        """Gets the status of this SearchOverMatches.


        :return: The status of this SearchOverMatches.
        :rtype: MatchStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SearchOverMatches.


        :param status: The status of this SearchOverMatches.
        :type status: MatchStatus
        """

        self._status = status
