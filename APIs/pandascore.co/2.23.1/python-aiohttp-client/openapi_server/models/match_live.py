# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MatchLive(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, opens_at: object=None, supported: bool=None, url: object=None):
        """MatchLive - a model defined in OpenAPI

        :param opens_at: The opens_at of this MatchLive.
        :param supported: The supported of this MatchLive.
        :param url: The url of this MatchLive.
        """
        self.openapi_types = {
            'opens_at': object,
            'supported': bool,
            'url': object
        }

        self.attribute_map = {
            'opens_at': 'opens_at',
            'supported': 'supported',
            'url': 'url'
        }

        self._opens_at = opens_at
        self._supported = supported
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatchLive':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MatchLive of this MatchLive.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def opens_at(self):
        """Gets the opens_at of this MatchLive.


        :return: The opens_at of this MatchLive.
        :rtype: object
        """
        return self._opens_at

    @opens_at.setter
    def opens_at(self, opens_at):
        """Sets the opens_at of this MatchLive.


        :param opens_at: The opens_at of this MatchLive.
        :type opens_at: object
        """
        if opens_at is None:
            raise ValueError("Invalid value for `opens_at`, must not be `None`")

        self._opens_at = opens_at

    @property
    def supported(self):
        """Gets the supported of this MatchLive.

        Whether live is supported

        :return: The supported of this MatchLive.
        :rtype: bool
        """
        return self._supported

    @supported.setter
    def supported(self, supported):
        """Sets the supported of this MatchLive.

        Whether live is supported

        :param supported: The supported of this MatchLive.
        :type supported: bool
        """
        if supported is None:
            raise ValueError("Invalid value for `supported`, must not be `None`")

        self._supported = supported

    @property
    def url(self):
        """Gets the url of this MatchLive.


        :return: The url of this MatchLive.
        :rtype: object
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MatchLive.


        :param url: The url of this MatchLive.
        :type url: object
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
