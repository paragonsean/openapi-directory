# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.betting_game_round_teams1 import BettingGameRoundTeams1
from openapi_server.models.csgo_map1 import CSGOMap1
from openapi_server.models.game_status import GameStatus
from openapi_server.models.game_winner import GameWinner
from openapi_server import util


class BettingCSGOGame(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begin_at: object=None, complete: bool=None, detailed_stats: bool=None, end_at: object=None, finished: bool=None, forfeit: bool=None, game_round_teams: BettingGameRoundTeams1=None, id: int=None, length: object=None, map: CSGOMap1=None, match_id: int=None, number_of_rounds: object=None, position: int=None, status: GameStatus=None, video_url: object=None, winner: GameWinner=None, winner_type: object=None):
        """BettingCSGOGame - a model defined in OpenAPI

        :param begin_at: The begin_at of this BettingCSGOGame.
        :param complete: The complete of this BettingCSGOGame.
        :param detailed_stats: The detailed_stats of this BettingCSGOGame.
        :param end_at: The end_at of this BettingCSGOGame.
        :param finished: The finished of this BettingCSGOGame.
        :param forfeit: The forfeit of this BettingCSGOGame.
        :param game_round_teams: The game_round_teams of this BettingCSGOGame.
        :param id: The id of this BettingCSGOGame.
        :param length: The length of this BettingCSGOGame.
        :param map: The map of this BettingCSGOGame.
        :param match_id: The match_id of this BettingCSGOGame.
        :param number_of_rounds: The number_of_rounds of this BettingCSGOGame.
        :param position: The position of this BettingCSGOGame.
        :param status: The status of this BettingCSGOGame.
        :param video_url: The video_url of this BettingCSGOGame.
        :param winner: The winner of this BettingCSGOGame.
        :param winner_type: The winner_type of this BettingCSGOGame.
        """
        self.openapi_types = {
            'begin_at': object,
            'complete': bool,
            'detailed_stats': bool,
            'end_at': object,
            'finished': bool,
            'forfeit': bool,
            'game_round_teams': BettingGameRoundTeams1,
            'id': int,
            'length': object,
            'map': CSGOMap1,
            'match_id': int,
            'number_of_rounds': object,
            'position': int,
            'status': GameStatus,
            'video_url': object,
            'winner': GameWinner,
            'winner_type': object
        }

        self.attribute_map = {
            'begin_at': 'begin_at',
            'complete': 'complete',
            'detailed_stats': 'detailed_stats',
            'end_at': 'end_at',
            'finished': 'finished',
            'forfeit': 'forfeit',
            'game_round_teams': 'game_round_teams',
            'id': 'id',
            'length': 'length',
            'map': 'map',
            'match_id': 'match_id',
            'number_of_rounds': 'number_of_rounds',
            'position': 'position',
            'status': 'status',
            'video_url': 'video_url',
            'winner': 'winner',
            'winner_type': 'winner_type'
        }

        self._begin_at = begin_at
        self._complete = complete
        self._detailed_stats = detailed_stats
        self._end_at = end_at
        self._finished = finished
        self._forfeit = forfeit
        self._game_round_teams = game_round_teams
        self._id = id
        self._length = length
        self._map = map
        self._match_id = match_id
        self._number_of_rounds = number_of_rounds
        self._position = position
        self._status = status
        self._video_url = video_url
        self._winner = winner
        self._winner_type = winner_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BettingCSGOGame':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BettingCSGOGame of this BettingCSGOGame.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begin_at(self):
        """Gets the begin_at of this BettingCSGOGame.


        :return: The begin_at of this BettingCSGOGame.
        :rtype: object
        """
        return self._begin_at

    @begin_at.setter
    def begin_at(self, begin_at):
        """Sets the begin_at of this BettingCSGOGame.


        :param begin_at: The begin_at of this BettingCSGOGame.
        :type begin_at: object
        """
        if begin_at is None:
            raise ValueError("Invalid value for `begin_at`, must not be `None`")

        self._begin_at = begin_at

    @property
    def complete(self):
        """Gets the complete of this BettingCSGOGame.

        Whether game data are complete and won't change

        :return: The complete of this BettingCSGOGame.
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this BettingCSGOGame.

        Whether game data are complete and won't change

        :param complete: The complete of this BettingCSGOGame.
        :type complete: bool
        """
        if complete is None:
            raise ValueError("Invalid value for `complete`, must not be `None`")

        self._complete = complete

    @property
    def detailed_stats(self):
        """Gets the detailed_stats of this BettingCSGOGame.

        Whether the game offers full stats

        :return: The detailed_stats of this BettingCSGOGame.
        :rtype: bool
        """
        return self._detailed_stats

    @detailed_stats.setter
    def detailed_stats(self, detailed_stats):
        """Sets the detailed_stats of this BettingCSGOGame.

        Whether the game offers full stats

        :param detailed_stats: The detailed_stats of this BettingCSGOGame.
        :type detailed_stats: bool
        """
        if detailed_stats is None:
            raise ValueError("Invalid value for `detailed_stats`, must not be `None`")

        self._detailed_stats = detailed_stats

    @property
    def end_at(self):
        """Gets the end_at of this BettingCSGOGame.


        :return: The end_at of this BettingCSGOGame.
        :rtype: object
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this BettingCSGOGame.


        :param end_at: The end_at of this BettingCSGOGame.
        :type end_at: object
        """
        if end_at is None:
            raise ValueError("Invalid value for `end_at`, must not be `None`")

        self._end_at = end_at

    @property
    def finished(self):
        """Gets the finished of this BettingCSGOGame.

        Whether game is finished

        :return: The finished of this BettingCSGOGame.
        :rtype: bool
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this BettingCSGOGame.

        Whether game is finished

        :param finished: The finished of this BettingCSGOGame.
        :type finished: bool
        """
        if finished is None:
            raise ValueError("Invalid value for `finished`, must not be `None`")

        self._finished = finished

    @property
    def forfeit(self):
        """Gets the forfeit of this BettingCSGOGame.

        Whether game is forfeit

        :return: The forfeit of this BettingCSGOGame.
        :rtype: bool
        """
        return self._forfeit

    @forfeit.setter
    def forfeit(self, forfeit):
        """Sets the forfeit of this BettingCSGOGame.

        Whether game is forfeit

        :param forfeit: The forfeit of this BettingCSGOGame.
        :type forfeit: bool
        """
        if forfeit is None:
            raise ValueError("Invalid value for `forfeit`, must not be `None`")

        self._forfeit = forfeit

    @property
    def game_round_teams(self):
        """Gets the game_round_teams of this BettingCSGOGame.


        :return: The game_round_teams of this BettingCSGOGame.
        :rtype: BettingGameRoundTeams1
        """
        return self._game_round_teams

    @game_round_teams.setter
    def game_round_teams(self, game_round_teams):
        """Sets the game_round_teams of this BettingCSGOGame.


        :param game_round_teams: The game_round_teams of this BettingCSGOGame.
        :type game_round_teams: BettingGameRoundTeams1
        """
        if game_round_teams is None:
            raise ValueError("Invalid value for `game_round_teams`, must not be `None`")

        self._game_round_teams = game_round_teams

    @property
    def id(self):
        """Gets the id of this BettingCSGOGame.


        :return: The id of this BettingCSGOGame.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BettingCSGOGame.


        :param id: The id of this BettingCSGOGame.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and id < 1:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")

        self._id = id

    @property
    def length(self):
        """Gets the length of this BettingCSGOGame.


        :return: The length of this BettingCSGOGame.
        :rtype: object
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this BettingCSGOGame.


        :param length: The length of this BettingCSGOGame.
        :type length: object
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def map(self):
        """Gets the map of this BettingCSGOGame.


        :return: The map of this BettingCSGOGame.
        :rtype: CSGOMap1
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this BettingCSGOGame.


        :param map: The map of this BettingCSGOGame.
        :type map: CSGOMap1
        """
        if map is None:
            raise ValueError("Invalid value for `map`, must not be `None`")

        self._map = map

    @property
    def match_id(self):
        """Gets the match_id of this BettingCSGOGame.


        :return: The match_id of this BettingCSGOGame.
        :rtype: int
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """Sets the match_id of this BettingCSGOGame.


        :param match_id: The match_id of this BettingCSGOGame.
        :type match_id: int
        """
        if match_id is None:
            raise ValueError("Invalid value for `match_id`, must not be `None`")
        if match_id is not None and match_id < 1:
            raise ValueError("Invalid value for `match_id`, must be a value greater than or equal to `1`")

        self._match_id = match_id

    @property
    def number_of_rounds(self):
        """Gets the number_of_rounds of this BettingCSGOGame.


        :return: The number_of_rounds of this BettingCSGOGame.
        :rtype: object
        """
        return self._number_of_rounds

    @number_of_rounds.setter
    def number_of_rounds(self, number_of_rounds):
        """Sets the number_of_rounds of this BettingCSGOGame.


        :param number_of_rounds: The number_of_rounds of this BettingCSGOGame.
        :type number_of_rounds: object
        """
        if number_of_rounds is None:
            raise ValueError("Invalid value for `number_of_rounds`, must not be `None`")

        self._number_of_rounds = number_of_rounds

    @property
    def position(self):
        """Gets the position of this BettingCSGOGame.


        :return: The position of this BettingCSGOGame.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this BettingCSGOGame.


        :param position: The position of this BettingCSGOGame.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")
        if position is not None and position < 1:
            raise ValueError("Invalid value for `position`, must be a value greater than or equal to `1`")

        self._position = position

    @property
    def status(self):
        """Gets the status of this BettingCSGOGame.


        :return: The status of this BettingCSGOGame.
        :rtype: GameStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BettingCSGOGame.


        :param status: The status of this BettingCSGOGame.
        :type status: GameStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def video_url(self):
        """Gets the video_url of this BettingCSGOGame.


        :return: The video_url of this BettingCSGOGame.
        :rtype: object
        """
        return self._video_url

    @video_url.setter
    def video_url(self, video_url):
        """Sets the video_url of this BettingCSGOGame.


        :param video_url: The video_url of this BettingCSGOGame.
        :type video_url: object
        """
        if video_url is None:
            raise ValueError("Invalid value for `video_url`, must not be `None`")

        self._video_url = video_url

    @property
    def winner(self):
        """Gets the winner of this BettingCSGOGame.


        :return: The winner of this BettingCSGOGame.
        :rtype: GameWinner
        """
        return self._winner

    @winner.setter
    def winner(self, winner):
        """Sets the winner of this BettingCSGOGame.


        :param winner: The winner of this BettingCSGOGame.
        :type winner: GameWinner
        """
        if winner is None:
            raise ValueError("Invalid value for `winner`, must not be `None`")

        self._winner = winner

    @property
    def winner_type(self):
        """Gets the winner_type of this BettingCSGOGame.


        :return: The winner_type of this BettingCSGOGame.
        :rtype: object
        """
        return self._winner_type

    @winner_type.setter
    def winner_type(self, winner_type):
        """Sets the winner_type of this BettingCSGOGame.


        :param winner_type: The winner_type of this BettingCSGOGame.
        :type winner_type: object
        """
        if winner_type is None:
            raise ValueError("Invalid value for `winner_type`, must not be `None`")

        self._winner_type = winner_type
