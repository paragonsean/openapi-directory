# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stream_language import StreamLanguage
from openapi_server import util


class Stream(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embed_url: object=None, language: StreamLanguage=None, main: bool=None, official: bool=None, raw_url: str=None):
        """Stream - a model defined in OpenAPI

        :param embed_url: The embed_url of this Stream.
        :param language: The language of this Stream.
        :param main: The main of this Stream.
        :param official: The official of this Stream.
        :param raw_url: The raw_url of this Stream.
        """
        self.openapi_types = {
            'embed_url': object,
            'language': StreamLanguage,
            'main': bool,
            'official': bool,
            'raw_url': str
        }

        self.attribute_map = {
            'embed_url': 'embed_url',
            'language': 'language',
            'main': 'main',
            'official': 'official',
            'raw_url': 'raw_url'
        }

        self._embed_url = embed_url
        self._language = language
        self._main = main
        self._official = official
        self._raw_url = raw_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Stream':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Stream of this Stream.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embed_url(self):
        """Gets the embed_url of this Stream.


        :return: The embed_url of this Stream.
        :rtype: object
        """
        return self._embed_url

    @embed_url.setter
    def embed_url(self, embed_url):
        """Sets the embed_url of this Stream.


        :param embed_url: The embed_url of this Stream.
        :type embed_url: object
        """
        if embed_url is None:
            raise ValueError("Invalid value for `embed_url`, must not be `None`")

        self._embed_url = embed_url

    @property
    def language(self):
        """Gets the language of this Stream.


        :return: The language of this Stream.
        :rtype: StreamLanguage
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Stream.


        :param language: The language of this Stream.
        :type language: StreamLanguage
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def main(self):
        """Gets the main of this Stream.

        Whether it is the main stream. Main stream is always official.

        :return: The main of this Stream.
        :rtype: bool
        """
        return self._main

    @main.setter
    def main(self, main):
        """Sets the main of this Stream.

        Whether it is the main stream. Main stream is always official.

        :param main: The main of this Stream.
        :type main: bool
        """
        if main is None:
            raise ValueError("Invalid value for `main`, must not be `None`")

        self._main = main

    @property
    def official(self):
        """Gets the official of this Stream.

        Whether it is an official broadcast.

        :return: The official of this Stream.
        :rtype: bool
        """
        return self._official

    @official.setter
    def official(self, official):
        """Sets the official of this Stream.

        Whether it is an official broadcast.

        :param official: The official of this Stream.
        :type official: bool
        """
        if official is None:
            raise ValueError("Invalid value for `official`, must not be `None`")

        self._official = official

    @property
    def raw_url(self):
        """Gets the raw_url of this Stream.

        URL to the stream on host website.

        :return: The raw_url of this Stream.
        :rtype: str
        """
        return self._raw_url

    @raw_url.setter
    def raw_url(self, raw_url):
        """Sets the raw_url of this Stream.

        URL to the stream on host website.

        :param raw_url: The raw_url of this Stream.
        :type raw_url: str
        """
        if raw_url is None:
            raise ValueError("Invalid value for `raw_url`, must not be `None`")

        self._raw_url = raw_url
