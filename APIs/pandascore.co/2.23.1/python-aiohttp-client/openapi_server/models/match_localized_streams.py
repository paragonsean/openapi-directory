# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.match_localized_stream import MatchLocalizedStream
from openapi_server import util


class MatchLocalizedStreams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, english: MatchLocalizedStream=None, official: MatchLocalizedStream=None, russian: MatchLocalizedStream=None):
        """MatchLocalizedStreams - a model defined in OpenAPI

        :param english: The english of this MatchLocalizedStreams.
        :param official: The official of this MatchLocalizedStreams.
        :param russian: The russian of this MatchLocalizedStreams.
        """
        self.openapi_types = {
            'english': MatchLocalizedStream,
            'official': MatchLocalizedStream,
            'russian': MatchLocalizedStream
        }

        self.attribute_map = {
            'english': 'english',
            'official': 'official',
            'russian': 'russian'
        }

        self._english = english
        self._official = official
        self._russian = russian

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatchLocalizedStreams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MatchLocalizedStreams of this MatchLocalizedStreams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def english(self):
        """Gets the english of this MatchLocalizedStreams.


        :return: The english of this MatchLocalizedStreams.
        :rtype: MatchLocalizedStream
        """
        return self._english

    @english.setter
    def english(self, english):
        """Sets the english of this MatchLocalizedStreams.


        :param english: The english of this MatchLocalizedStreams.
        :type english: MatchLocalizedStream
        """
        if english is None:
            raise ValueError("Invalid value for `english`, must not be `None`")

        self._english = english

    @property
    def official(self):
        """Gets the official of this MatchLocalizedStreams.


        :return: The official of this MatchLocalizedStreams.
        :rtype: MatchLocalizedStream
        """
        return self._official

    @official.setter
    def official(self, official):
        """Sets the official of this MatchLocalizedStreams.


        :param official: The official of this MatchLocalizedStreams.
        :type official: MatchLocalizedStream
        """
        if official is None:
            raise ValueError("Invalid value for `official`, must not be `None`")

        self._official = official

    @property
    def russian(self):
        """Gets the russian of this MatchLocalizedStreams.


        :return: The russian of this MatchLocalizedStreams.
        :rtype: MatchLocalizedStream
        """
        return self._russian

    @russian.setter
    def russian(self, russian):
        """Sets the russian of this MatchLocalizedStreams.


        :param russian: The russian of this MatchLocalizedStreams.
        :type russian: MatchLocalizedStream
        """
        if russian is None:
            raise ValueError("Invalid value for `russian`, must not be `None`")

        self._russian = russian
