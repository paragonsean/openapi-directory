# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.videogame_id import VideogameID
from openapi_server import util


class FilterOverTeams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acronym: List[str]=None, id: List[int]=None, location: List[str]=None, modified_at: List[datetime]=None, name: List[str]=None, slug: List[str]=None, videogame_id: List[VideogameID]=None):
        """FilterOverTeams - a model defined in OpenAPI

        :param acronym: The acronym of this FilterOverTeams.
        :param id: The id of this FilterOverTeams.
        :param location: The location of this FilterOverTeams.
        :param modified_at: The modified_at of this FilterOverTeams.
        :param name: The name of this FilterOverTeams.
        :param slug: The slug of this FilterOverTeams.
        :param videogame_id: The videogame_id of this FilterOverTeams.
        """
        self.openapi_types = {
            'acronym': List[str],
            'id': List[int],
            'location': List[str],
            'modified_at': List[datetime],
            'name': List[str],
            'slug': List[str],
            'videogame_id': List[VideogameID]
        }

        self.attribute_map = {
            'acronym': 'acronym',
            'id': 'id',
            'location': 'location',
            'modified_at': 'modified_at',
            'name': 'name',
            'slug': 'slug',
            'videogame_id': 'videogame_id'
        }

        self._acronym = acronym
        self._id = id
        self._location = location
        self._modified_at = modified_at
        self._name = name
        self._slug = slug
        self._videogame_id = videogame_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FilterOverTeams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The filter_over_Teams of this FilterOverTeams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acronym(self):
        """Gets the acronym of this FilterOverTeams.


        :return: The acronym of this FilterOverTeams.
        :rtype: List[str]
        """
        return self._acronym

    @acronym.setter
    def acronym(self, acronym):
        """Sets the acronym of this FilterOverTeams.


        :param acronym: The acronym of this FilterOverTeams.
        :type acronym: List[str]
        """
        if acronym is not None and len(acronym) < 1:
            raise ValueError("Invalid value for `acronym`, number of items must be greater than or equal to `1`")

        self._acronym = acronym

    @property
    def id(self):
        """Gets the id of this FilterOverTeams.


        :return: The id of this FilterOverTeams.
        :rtype: List[int]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FilterOverTeams.


        :param id: The id of this FilterOverTeams.
        :type id: List[int]
        """
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, number of items must be greater than or equal to `1`")

        self._id = id

    @property
    def location(self):
        """Gets the location of this FilterOverTeams.


        :return: The location of this FilterOverTeams.
        :rtype: List[str]
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this FilterOverTeams.


        :param location: The location of this FilterOverTeams.
        :type location: List[str]
        """
        if location is not None and len(location) < 1:
            raise ValueError("Invalid value for `location`, number of items must be greater than or equal to `1`")

        self._location = location

    @property
    def modified_at(self):
        """Gets the modified_at of this FilterOverTeams.


        :return: The modified_at of this FilterOverTeams.
        :rtype: List[datetime]
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this FilterOverTeams.


        :param modified_at: The modified_at of this FilterOverTeams.
        :type modified_at: List[datetime]
        """
        if modified_at is not None and len(modified_at) < 1:
            raise ValueError("Invalid value for `modified_at`, number of items must be greater than or equal to `1`")

        self._modified_at = modified_at

    @property
    def name(self):
        """Gets the name of this FilterOverTeams.


        :return: The name of this FilterOverTeams.
        :rtype: List[str]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FilterOverTeams.


        :param name: The name of this FilterOverTeams.
        :type name: List[str]
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, number of items must be greater than or equal to `1`")

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this FilterOverTeams.


        :return: The slug of this FilterOverTeams.
        :rtype: List[str]
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this FilterOverTeams.


        :param slug: The slug of this FilterOverTeams.
        :type slug: List[str]
        """
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, number of items must be greater than or equal to `1`")

        self._slug = slug

    @property
    def videogame_id(self):
        """Gets the videogame_id of this FilterOverTeams.


        :return: The videogame_id of this FilterOverTeams.
        :rtype: List[VideogameID]
        """
        return self._videogame_id

    @videogame_id.setter
    def videogame_id(self, videogame_id):
        """Sets the videogame_id of this FilterOverTeams.


        :param videogame_id: The videogame_id of this FilterOverTeams.
        :type videogame_id: List[VideogameID]
        """
        if videogame_id is not None and len(videogame_id) < 1:
            raise ValueError("Invalid value for `videogame_id`, number of items must be greater than or equal to `1`")

        self._videogame_id = videogame_id
