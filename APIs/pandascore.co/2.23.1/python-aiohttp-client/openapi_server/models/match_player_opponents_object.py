# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.match_opponent_base_player import MatchOpponentBasePlayer
from openapi_server.models.opponent_type_player import OpponentTypePlayer
from openapi_server import util


class MatchPlayerOpponentsObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, opponent_type: OpponentTypePlayer=None, opponents: List[MatchOpponentBasePlayer]=None):
        """MatchPlayerOpponentsObject - a model defined in OpenAPI

        :param opponent_type: The opponent_type of this MatchPlayerOpponentsObject.
        :param opponents: The opponents of this MatchPlayerOpponentsObject.
        """
        self.openapi_types = {
            'opponent_type': OpponentTypePlayer,
            'opponents': List[MatchOpponentBasePlayer]
        }

        self.attribute_map = {
            'opponent_type': 'opponent_type',
            'opponents': 'opponents'
        }

        self._opponent_type = opponent_type
        self._opponents = opponents

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatchPlayerOpponentsObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MatchPlayerOpponentsObject of this MatchPlayerOpponentsObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def opponent_type(self):
        """Gets the opponent_type of this MatchPlayerOpponentsObject.


        :return: The opponent_type of this MatchPlayerOpponentsObject.
        :rtype: OpponentTypePlayer
        """
        return self._opponent_type

    @opponent_type.setter
    def opponent_type(self, opponent_type):
        """Sets the opponent_type of this MatchPlayerOpponentsObject.


        :param opponent_type: The opponent_type of this MatchPlayerOpponentsObject.
        :type opponent_type: OpponentTypePlayer
        """
        if opponent_type is None:
            raise ValueError("Invalid value for `opponent_type`, must not be `None`")

        self._opponent_type = opponent_type

    @property
    def opponents(self):
        """Gets the opponents of this MatchPlayerOpponentsObject.

        A list of players

        :return: The opponents of this MatchPlayerOpponentsObject.
        :rtype: List[MatchOpponentBasePlayer]
        """
        return self._opponents

    @opponents.setter
    def opponents(self, opponents):
        """Sets the opponents of this MatchPlayerOpponentsObject.

        A list of players

        :param opponents: The opponents of this MatchPlayerOpponentsObject.
        :type opponents: List[MatchOpponentBasePlayer]
        """
        if opponents is None:
            raise ValueError("Invalid value for `opponents`, must not be `None`")

        self._opponents = opponents
