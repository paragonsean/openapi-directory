# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.previous_match_type import PreviousMatchType
from openapi_server import util


class PreviousMatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, match_id: int=None, type: PreviousMatchType=None):
        """PreviousMatch - a model defined in OpenAPI

        :param match_id: The match_id of this PreviousMatch.
        :param type: The type of this PreviousMatch.
        """
        self.openapi_types = {
            'match_id': int,
            'type': PreviousMatchType
        }

        self.attribute_map = {
            'match_id': 'match_id',
            'type': 'type'
        }

        self._match_id = match_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PreviousMatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PreviousMatch of this PreviousMatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def match_id(self):
        """Gets the match_id of this PreviousMatch.


        :return: The match_id of this PreviousMatch.
        :rtype: int
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """Sets the match_id of this PreviousMatch.


        :param match_id: The match_id of this PreviousMatch.
        :type match_id: int
        """
        if match_id is None:
            raise ValueError("Invalid value for `match_id`, must not be `None`")
        if match_id is not None and match_id < 1:
            raise ValueError("Invalid value for `match_id`, must be a value greater than or equal to `1`")

        self._match_id = match_id

    @property
    def type(self):
        """Gets the type of this PreviousMatch.


        :return: The type of this PreviousMatch.
        :rtype: PreviousMatchType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PreviousMatch.


        :param type: The type of this PreviousMatch.
        :type type: PreviousMatchType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
