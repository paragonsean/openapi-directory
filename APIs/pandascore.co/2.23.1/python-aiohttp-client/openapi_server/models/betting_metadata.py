# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.betting_group1 import BettingGroup1
from openapi_server.models.blueprint1 import Blueprint1
from openapi_server import util


class BettingMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, betting_group: BettingGroup1=None, blueprint: Blueprint1=None, bookable: bool=None, booked: bool=None, live_available: bool=None, markets_created: bool=None, markets_updated_at: datetime=None, pandascore_reviewed: bool=None, settled: bool=None):
        """BettingMetadata - a model defined in OpenAPI

        :param betting_group: The betting_group of this BettingMetadata.
        :param blueprint: The blueprint of this BettingMetadata.
        :param bookable: The bookable of this BettingMetadata.
        :param booked: The booked of this BettingMetadata.
        :param live_available: The live_available of this BettingMetadata.
        :param markets_created: The markets_created of this BettingMetadata.
        :param markets_updated_at: The markets_updated_at of this BettingMetadata.
        :param pandascore_reviewed: The pandascore_reviewed of this BettingMetadata.
        :param settled: The settled of this BettingMetadata.
        """
        self.openapi_types = {
            'betting_group': BettingGroup1,
            'blueprint': Blueprint1,
            'bookable': bool,
            'booked': bool,
            'live_available': bool,
            'markets_created': bool,
            'markets_updated_at': datetime,
            'pandascore_reviewed': bool,
            'settled': bool
        }

        self.attribute_map = {
            'betting_group': 'betting_group',
            'blueprint': 'blueprint',
            'bookable': 'bookable',
            'booked': 'booked',
            'live_available': 'live_available',
            'markets_created': 'markets_created',
            'markets_updated_at': 'markets_updated_at',
            'pandascore_reviewed': 'pandascore_reviewed',
            'settled': 'settled'
        }

        self._betting_group = betting_group
        self._blueprint = blueprint
        self._bookable = bookable
        self._booked = booked
        self._live_available = live_available
        self._markets_created = markets_created
        self._markets_updated_at = markets_updated_at
        self._pandascore_reviewed = pandascore_reviewed
        self._settled = settled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BettingMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BettingMetadata of this BettingMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def betting_group(self):
        """Gets the betting_group of this BettingMetadata.


        :return: The betting_group of this BettingMetadata.
        :rtype: BettingGroup1
        """
        return self._betting_group

    @betting_group.setter
    def betting_group(self, betting_group):
        """Sets the betting_group of this BettingMetadata.


        :param betting_group: The betting_group of this BettingMetadata.
        :type betting_group: BettingGroup1
        """
        if betting_group is None:
            raise ValueError("Invalid value for `betting_group`, must not be `None`")

        self._betting_group = betting_group

    @property
    def blueprint(self):
        """Gets the blueprint of this BettingMetadata.


        :return: The blueprint of this BettingMetadata.
        :rtype: Blueprint1
        """
        return self._blueprint

    @blueprint.setter
    def blueprint(self, blueprint):
        """Sets the blueprint of this BettingMetadata.


        :param blueprint: The blueprint of this BettingMetadata.
        :type blueprint: Blueprint1
        """
        if blueprint is None:
            raise ValueError("Invalid value for `blueprint`, must not be `None`")

        self._blueprint = blueprint

    @property
    def bookable(self):
        """Gets the bookable of this BettingMetadata.

        Whether match can be booked

        :return: The bookable of this BettingMetadata.
        :rtype: bool
        """
        return self._bookable

    @bookable.setter
    def bookable(self, bookable):
        """Sets the bookable of this BettingMetadata.

        Whether match can be booked

        :param bookable: The bookable of this BettingMetadata.
        :type bookable: bool
        """
        if bookable is None:
            raise ValueError("Invalid value for `bookable`, must not be `None`")

        self._bookable = bookable

    @property
    def booked(self):
        """Gets the booked of this BettingMetadata.

        Whether match has been booked

        :return: The booked of this BettingMetadata.
        :rtype: bool
        """
        return self._booked

    @booked.setter
    def booked(self, booked):
        """Sets the booked of this BettingMetadata.

        Whether match has been booked

        :param booked: The booked of this BettingMetadata.
        :type booked: bool
        """
        if booked is None:
            raise ValueError("Invalid value for `booked`, must not be `None`")

        self._booked = booked

    @property
    def live_available(self):
        """Gets the live_available of this BettingMetadata.

        Whether live is available

        :return: The live_available of this BettingMetadata.
        :rtype: bool
        """
        return self._live_available

    @live_available.setter
    def live_available(self, live_available):
        """Sets the live_available of this BettingMetadata.

        Whether live is available

        :param live_available: The live_available of this BettingMetadata.
        :type live_available: bool
        """
        if live_available is None:
            raise ValueError("Invalid value for `live_available`, must not be `None`")

        self._live_available = live_available

    @property
    def markets_created(self):
        """Gets the markets_created of this BettingMetadata.

        Whether markets has been created

        :return: The markets_created of this BettingMetadata.
        :rtype: bool
        """
        return self._markets_created

    @markets_created.setter
    def markets_created(self, markets_created):
        """Sets the markets_created of this BettingMetadata.

        Whether markets has been created

        :param markets_created: The markets_created of this BettingMetadata.
        :type markets_created: bool
        """
        if markets_created is None:
            raise ValueError("Invalid value for `markets_created`, must not be `None`")

        self._markets_created = markets_created

    @property
    def markets_updated_at(self):
        """Gets the markets_updated_at of this BettingMetadata.


        :return: The markets_updated_at of this BettingMetadata.
        :rtype: datetime
        """
        return self._markets_updated_at

    @markets_updated_at.setter
    def markets_updated_at(self, markets_updated_at):
        """Sets the markets_updated_at of this BettingMetadata.


        :param markets_updated_at: The markets_updated_at of this BettingMetadata.
        :type markets_updated_at: datetime
        """
        if markets_updated_at is None:
            raise ValueError("Invalid value for `markets_updated_at`, must not be `None`")
        if markets_updated_at is not None and len(markets_updated_at) < 1:
            raise ValueError("Invalid value for `markets_updated_at`, length must be greater than or equal to `1`")

        self._markets_updated_at = markets_updated_at

    @property
    def pandascore_reviewed(self):
        """Gets the pandascore_reviewed of this BettingMetadata.

        Whether PandaScore reviewed the match

        :return: The pandascore_reviewed of this BettingMetadata.
        :rtype: bool
        """
        return self._pandascore_reviewed

    @pandascore_reviewed.setter
    def pandascore_reviewed(self, pandascore_reviewed):
        """Sets the pandascore_reviewed of this BettingMetadata.

        Whether PandaScore reviewed the match

        :param pandascore_reviewed: The pandascore_reviewed of this BettingMetadata.
        :type pandascore_reviewed: bool
        """
        if pandascore_reviewed is None:
            raise ValueError("Invalid value for `pandascore_reviewed`, must not be `None`")

        self._pandascore_reviewed = pandascore_reviewed

    @property
    def settled(self):
        """Gets the settled of this BettingMetadata.

        Whether match has been settled

        :return: The settled of this BettingMetadata.
        :rtype: bool
        """
        return self._settled

    @settled.setter
    def settled(self, settled):
        """Sets the settled of this BettingMetadata.

        Whether match has been settled

        :param settled: The settled of this BettingMetadata.
        :type settled: bool
        """
        if settled is None:
            raise ValueError("Invalid value for `settled`, must not be `None`")

        self._settled = settled
