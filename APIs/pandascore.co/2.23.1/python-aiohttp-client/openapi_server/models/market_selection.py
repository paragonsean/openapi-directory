# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.opponent_id1 import OpponentID1
from openapi_server import util


class MarketSelection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, line: object=None, name: str=None, participant_id: OpponentID1=None, participant_type: object=None, position: int=None, probability: float=None, probability_with_margin: float=None, result: object=None, template: str=None):
        """MarketSelection - a model defined in OpenAPI

        :param line: The line of this MarketSelection.
        :param name: The name of this MarketSelection.
        :param participant_id: The participant_id of this MarketSelection.
        :param participant_type: The participant_type of this MarketSelection.
        :param position: The position of this MarketSelection.
        :param probability: The probability of this MarketSelection.
        :param probability_with_margin: The probability_with_margin of this MarketSelection.
        :param result: The result of this MarketSelection.
        :param template: The template of this MarketSelection.
        """
        self.openapi_types = {
            'line': object,
            'name': str,
            'participant_id': OpponentID1,
            'participant_type': object,
            'position': int,
            'probability': float,
            'probability_with_margin': float,
            'result': object,
            'template': str
        }

        self.attribute_map = {
            'line': 'line',
            'name': 'name',
            'participant_id': 'participant_id',
            'participant_type': 'participant_type',
            'position': 'position',
            'probability': 'probability',
            'probability_with_margin': 'probability_with_margin',
            'result': 'result',
            'template': 'template'
        }

        self._line = line
        self._name = name
        self._participant_id = participant_id
        self._participant_type = participant_type
        self._position = position
        self._probability = probability
        self._probability_with_margin = probability_with_margin
        self._result = result
        self._template = template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketSelection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MarketSelection of this MarketSelection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def line(self):
        """Gets the line of this MarketSelection.


        :return: The line of this MarketSelection.
        :rtype: object
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this MarketSelection.


        :param line: The line of this MarketSelection.
        :type line: object
        """
        if line is None:
            raise ValueError("Invalid value for `line`, must not be `None`")

        self._line = line

    @property
    def name(self):
        """Gets the name of this MarketSelection.


        :return: The name of this MarketSelection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MarketSelection.


        :param name: The name of this MarketSelection.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def participant_id(self):
        """Gets the participant_id of this MarketSelection.


        :return: The participant_id of this MarketSelection.
        :rtype: OpponentID1
        """
        return self._participant_id

    @participant_id.setter
    def participant_id(self, participant_id):
        """Sets the participant_id of this MarketSelection.


        :param participant_id: The participant_id of this MarketSelection.
        :type participant_id: OpponentID1
        """
        if participant_id is None:
            raise ValueError("Invalid value for `participant_id`, must not be `None`")

        self._participant_id = participant_id

    @property
    def participant_type(self):
        """Gets the participant_type of this MarketSelection.


        :return: The participant_type of this MarketSelection.
        :rtype: object
        """
        return self._participant_type

    @participant_type.setter
    def participant_type(self, participant_type):
        """Sets the participant_type of this MarketSelection.


        :param participant_type: The participant_type of this MarketSelection.
        :type participant_type: object
        """
        if participant_type is None:
            raise ValueError("Invalid value for `participant_type`, must not be `None`")

        self._participant_type = participant_type

    @property
    def position(self):
        """Gets the position of this MarketSelection.


        :return: The position of this MarketSelection.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this MarketSelection.


        :param position: The position of this MarketSelection.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")
        if position is not None and position < 0:
            raise ValueError("Invalid value for `position`, must be a value greater than or equal to `0`")

        self._position = position

    @property
    def probability(self):
        """Gets the probability of this MarketSelection.


        :return: The probability of this MarketSelection.
        :rtype: float
        """
        return self._probability

    @probability.setter
    def probability(self, probability):
        """Sets the probability of this MarketSelection.


        :param probability: The probability of this MarketSelection.
        :type probability: float
        """
        if probability is None:
            raise ValueError("Invalid value for `probability`, must not be `None`")
        if probability is not None and probability > 1:
            raise ValueError("Invalid value for `probability`, must be a value less than or equal to `1`")
        if probability is not None and probability < 0:
            raise ValueError("Invalid value for `probability`, must be a value greater than or equal to `0`")

        self._probability = probability

    @property
    def probability_with_margin(self):
        """Gets the probability_with_margin of this MarketSelection.


        :return: The probability_with_margin of this MarketSelection.
        :rtype: float
        """
        return self._probability_with_margin

    @probability_with_margin.setter
    def probability_with_margin(self, probability_with_margin):
        """Sets the probability_with_margin of this MarketSelection.


        :param probability_with_margin: The probability_with_margin of this MarketSelection.
        :type probability_with_margin: float
        """
        if probability_with_margin is None:
            raise ValueError("Invalid value for `probability_with_margin`, must not be `None`")
        if probability_with_margin is not None and probability_with_margin > 1:
            raise ValueError("Invalid value for `probability_with_margin`, must be a value less than or equal to `1`")
        if probability_with_margin is not None and probability_with_margin < 0:
            raise ValueError("Invalid value for `probability_with_margin`, must be a value greater than or equal to `0`")

        self._probability_with_margin = probability_with_margin

    @property
    def result(self):
        """Gets the result of this MarketSelection.


        :return: The result of this MarketSelection.
        :rtype: object
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this MarketSelection.


        :param result: The result of this MarketSelection.
        :type result: object
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")

        self._result = result

    @property
    def template(self):
        """Gets the template of this MarketSelection.


        :return: The template of this MarketSelection.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this MarketSelection.


        :param template: The template of this MarketSelection.
        :type template: str
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")

        self._template = template
