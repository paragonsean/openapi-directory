# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SearchOverLeagues(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, slug: str=None, url: str=None):
        """SearchOverLeagues - a model defined in OpenAPI

        :param name: The name of this SearchOverLeagues.
        :param slug: The slug of this SearchOverLeagues.
        :param url: The url of this SearchOverLeagues.
        """
        self.openapi_types = {
            'name': str,
            'slug': str,
            'url': str
        }

        self.attribute_map = {
            'name': 'name',
            'slug': 'slug',
            'url': 'url'
        }

        self._name = name
        self._slug = slug
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchOverLeagues':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The search_over_Leagues of this SearchOverLeagues.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this SearchOverLeagues.


        :return: The name of this SearchOverLeagues.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchOverLeagues.


        :param name: The name of this SearchOverLeagues.
        :type name: str
        """

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this SearchOverLeagues.


        :return: The slug of this SearchOverLeagues.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this SearchOverLeagues.


        :param slug: The slug of this SearchOverLeagues.
        :type slug: str
        """
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[a-z0-9:_-]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[a-z0-9:_-]+$/`")

        self._slug = slug

    @property
    def url(self):
        """Gets the url of this SearchOverLeagues.


        :return: The url of this SearchOverLeagues.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SearchOverLeagues.


        :param url: The url of this SearchOverLeagues.
        :type url: str
        """

        self._url = url
