# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.game_id import GameID
from openapi_server.models.market import Market
from openapi_server import util


class MatchMarketGame(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: GameID=None, markets: List[Market]=None):
        """MatchMarketGame - a model defined in OpenAPI

        :param id: The id of this MatchMarketGame.
        :param markets: The markets of this MatchMarketGame.
        """
        self.openapi_types = {
            'id': GameID,
            'markets': List[Market]
        }

        self.attribute_map = {
            'id': 'id',
            'markets': 'markets'
        }

        self._id = id
        self._markets = markets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatchMarketGame':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MatchMarketGame of this MatchMarketGame.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MatchMarketGame.


        :return: The id of this MatchMarketGame.
        :rtype: GameID
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MatchMarketGame.


        :param id: The id of this MatchMarketGame.
        :type id: GameID
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def markets(self):
        """Gets the markets of this MatchMarketGame.


        :return: The markets of this MatchMarketGame.
        :rtype: List[Market]
        """
        return self._markets

    @markets.setter
    def markets(self, markets):
        """Sets the markets of this MatchMarketGame.


        :param markets: The markets of this MatchMarketGame.
        :type markets: List[Market]
        """
        if markets is None:
            raise ValueError("Invalid value for `markets`, must not be `None`")

        self._markets = markets
