# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.videogame_slug import VideogameSlug
from openapi_server import util


class LiveEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begin_at: object=None, end_at: object=None, game: VideogameSlug=None, id: int=None, is_active: bool=None, stream_url: object=None, tournament_id: int=None):
        """LiveEvent - a model defined in OpenAPI

        :param begin_at: The begin_at of this LiveEvent.
        :param end_at: The end_at of this LiveEvent.
        :param game: The game of this LiveEvent.
        :param id: The id of this LiveEvent.
        :param is_active: The is_active of this LiveEvent.
        :param stream_url: The stream_url of this LiveEvent.
        :param tournament_id: The tournament_id of this LiveEvent.
        """
        self.openapi_types = {
            'begin_at': object,
            'end_at': object,
            'game': VideogameSlug,
            'id': int,
            'is_active': bool,
            'stream_url': object,
            'tournament_id': int
        }

        self.attribute_map = {
            'begin_at': 'begin_at',
            'end_at': 'end_at',
            'game': 'game',
            'id': 'id',
            'is_active': 'is_active',
            'stream_url': 'stream_url',
            'tournament_id': 'tournament_id'
        }

        self._begin_at = begin_at
        self._end_at = end_at
        self._game = game
        self._id = id
        self._is_active = is_active
        self._stream_url = stream_url
        self._tournament_id = tournament_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveEvent of this LiveEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begin_at(self):
        """Gets the begin_at of this LiveEvent.


        :return: The begin_at of this LiveEvent.
        :rtype: object
        """
        return self._begin_at

    @begin_at.setter
    def begin_at(self, begin_at):
        """Sets the begin_at of this LiveEvent.


        :param begin_at: The begin_at of this LiveEvent.
        :type begin_at: object
        """
        if begin_at is None:
            raise ValueError("Invalid value for `begin_at`, must not be `None`")

        self._begin_at = begin_at

    @property
    def end_at(self):
        """Gets the end_at of this LiveEvent.


        :return: The end_at of this LiveEvent.
        :rtype: object
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this LiveEvent.


        :param end_at: The end_at of this LiveEvent.
        :type end_at: object
        """
        if end_at is None:
            raise ValueError("Invalid value for `end_at`, must not be `None`")

        self._end_at = end_at

    @property
    def game(self):
        """Gets the game of this LiveEvent.


        :return: The game of this LiveEvent.
        :rtype: VideogameSlug
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this LiveEvent.


        :param game: The game of this LiveEvent.
        :type game: VideogameSlug
        """
        if game is None:
            raise ValueError("Invalid value for `game`, must not be `None`")

        self._game = game

    @property
    def id(self):
        """Gets the id of this LiveEvent.


        :return: The id of this LiveEvent.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LiveEvent.


        :param id: The id of this LiveEvent.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and id < 1:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this LiveEvent.

        Whether event is active

        :return: The is_active of this LiveEvent.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this LiveEvent.

        Whether event is active

        :param is_active: The is_active of this LiveEvent.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def stream_url(self):
        """Gets the stream_url of this LiveEvent.


        :return: The stream_url of this LiveEvent.
        :rtype: object
        """
        return self._stream_url

    @stream_url.setter
    def stream_url(self, stream_url):
        """Sets the stream_url of this LiveEvent.


        :param stream_url: The stream_url of this LiveEvent.
        :type stream_url: object
        """
        if stream_url is None:
            raise ValueError("Invalid value for `stream_url`, must not be `None`")

        self._stream_url = stream_url

    @property
    def tournament_id(self):
        """Gets the tournament_id of this LiveEvent.


        :return: The tournament_id of this LiveEvent.
        :rtype: int
        """
        return self._tournament_id

    @tournament_id.setter
    def tournament_id(self, tournament_id):
        """Sets the tournament_id of this LiveEvent.


        :param tournament_id: The tournament_id of this LiveEvent.
        :type tournament_id: int
        """
        if tournament_id is None:
            raise ValueError("Invalid value for `tournament_id`, must not be `None`")
        if tournament_id is not None and tournament_id < 1:
            raise ValueError("Invalid value for `tournament_id`, must be a value greater than or equal to `1`")

        self._tournament_id = tournament_id
