# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.match_status import MatchStatus
from openapi_server.models.match_type import MatchType
from openapi_server.models.opponent_id import OpponentID
from openapi_server import util


class RangeOverMatches(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begin_at: List[datetime]=None, detailed_stats: List[bool]=None, draw: List[bool]=None, end_at: List[datetime]=None, forfeit: List[bool]=None, id: List[int]=None, match_type: List[MatchType]=None, modified_at: List[datetime]=None, name: List[str]=None, number_of_games: List[int]=None, scheduled_at: List[datetime]=None, slug: List[str]=None, status: List[MatchStatus]=None, tournament_id: List[int]=None, winner_id: List[OpponentID]=None):
        """RangeOverMatches - a model defined in OpenAPI

        :param begin_at: The begin_at of this RangeOverMatches.
        :param detailed_stats: The detailed_stats of this RangeOverMatches.
        :param draw: The draw of this RangeOverMatches.
        :param end_at: The end_at of this RangeOverMatches.
        :param forfeit: The forfeit of this RangeOverMatches.
        :param id: The id of this RangeOverMatches.
        :param match_type: The match_type of this RangeOverMatches.
        :param modified_at: The modified_at of this RangeOverMatches.
        :param name: The name of this RangeOverMatches.
        :param number_of_games: The number_of_games of this RangeOverMatches.
        :param scheduled_at: The scheduled_at of this RangeOverMatches.
        :param slug: The slug of this RangeOverMatches.
        :param status: The status of this RangeOverMatches.
        :param tournament_id: The tournament_id of this RangeOverMatches.
        :param winner_id: The winner_id of this RangeOverMatches.
        """
        self.openapi_types = {
            'begin_at': List[datetime],
            'detailed_stats': List[bool],
            'draw': List[bool],
            'end_at': List[datetime],
            'forfeit': List[bool],
            'id': List[int],
            'match_type': List[MatchType],
            'modified_at': List[datetime],
            'name': List[str],
            'number_of_games': List[int],
            'scheduled_at': List[datetime],
            'slug': List[str],
            'status': List[MatchStatus],
            'tournament_id': List[int],
            'winner_id': List[OpponentID]
        }

        self.attribute_map = {
            'begin_at': 'begin_at',
            'detailed_stats': 'detailed_stats',
            'draw': 'draw',
            'end_at': 'end_at',
            'forfeit': 'forfeit',
            'id': 'id',
            'match_type': 'match_type',
            'modified_at': 'modified_at',
            'name': 'name',
            'number_of_games': 'number_of_games',
            'scheduled_at': 'scheduled_at',
            'slug': 'slug',
            'status': 'status',
            'tournament_id': 'tournament_id',
            'winner_id': 'winner_id'
        }

        self._begin_at = begin_at
        self._detailed_stats = detailed_stats
        self._draw = draw
        self._end_at = end_at
        self._forfeit = forfeit
        self._id = id
        self._match_type = match_type
        self._modified_at = modified_at
        self._name = name
        self._number_of_games = number_of_games
        self._scheduled_at = scheduled_at
        self._slug = slug
        self._status = status
        self._tournament_id = tournament_id
        self._winner_id = winner_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RangeOverMatches':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The range_over_Matches of this RangeOverMatches.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begin_at(self):
        """Gets the begin_at of this RangeOverMatches.


        :return: The begin_at of this RangeOverMatches.
        :rtype: List[datetime]
        """
        return self._begin_at

    @begin_at.setter
    def begin_at(self, begin_at):
        """Sets the begin_at of this RangeOverMatches.


        :param begin_at: The begin_at of this RangeOverMatches.
        :type begin_at: List[datetime]
        """
        if begin_at is not None and len(begin_at) > 2:
            raise ValueError("Invalid value for `begin_at`, number of items must be less than or equal to `2`")
        if begin_at is not None and len(begin_at) < 2:
            raise ValueError("Invalid value for `begin_at`, number of items must be greater than or equal to `2`")

        self._begin_at = begin_at

    @property
    def detailed_stats(self):
        """Gets the detailed_stats of this RangeOverMatches.


        :return: The detailed_stats of this RangeOverMatches.
        :rtype: List[bool]
        """
        return self._detailed_stats

    @detailed_stats.setter
    def detailed_stats(self, detailed_stats):
        """Sets the detailed_stats of this RangeOverMatches.


        :param detailed_stats: The detailed_stats of this RangeOverMatches.
        :type detailed_stats: List[bool]
        """
        if detailed_stats is not None and len(detailed_stats) > 2:
            raise ValueError("Invalid value for `detailed_stats`, number of items must be less than or equal to `2`")
        if detailed_stats is not None and len(detailed_stats) < 2:
            raise ValueError("Invalid value for `detailed_stats`, number of items must be greater than or equal to `2`")

        self._detailed_stats = detailed_stats

    @property
    def draw(self):
        """Gets the draw of this RangeOverMatches.


        :return: The draw of this RangeOverMatches.
        :rtype: List[bool]
        """
        return self._draw

    @draw.setter
    def draw(self, draw):
        """Sets the draw of this RangeOverMatches.


        :param draw: The draw of this RangeOverMatches.
        :type draw: List[bool]
        """
        if draw is not None and len(draw) > 2:
            raise ValueError("Invalid value for `draw`, number of items must be less than or equal to `2`")
        if draw is not None and len(draw) < 2:
            raise ValueError("Invalid value for `draw`, number of items must be greater than or equal to `2`")

        self._draw = draw

    @property
    def end_at(self):
        """Gets the end_at of this RangeOverMatches.


        :return: The end_at of this RangeOverMatches.
        :rtype: List[datetime]
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this RangeOverMatches.


        :param end_at: The end_at of this RangeOverMatches.
        :type end_at: List[datetime]
        """
        if end_at is not None and len(end_at) > 2:
            raise ValueError("Invalid value for `end_at`, number of items must be less than or equal to `2`")
        if end_at is not None and len(end_at) < 2:
            raise ValueError("Invalid value for `end_at`, number of items must be greater than or equal to `2`")

        self._end_at = end_at

    @property
    def forfeit(self):
        """Gets the forfeit of this RangeOverMatches.


        :return: The forfeit of this RangeOverMatches.
        :rtype: List[bool]
        """
        return self._forfeit

    @forfeit.setter
    def forfeit(self, forfeit):
        """Sets the forfeit of this RangeOverMatches.


        :param forfeit: The forfeit of this RangeOverMatches.
        :type forfeit: List[bool]
        """
        if forfeit is not None and len(forfeit) > 2:
            raise ValueError("Invalid value for `forfeit`, number of items must be less than or equal to `2`")
        if forfeit is not None and len(forfeit) < 2:
            raise ValueError("Invalid value for `forfeit`, number of items must be greater than or equal to `2`")

        self._forfeit = forfeit

    @property
    def id(self):
        """Gets the id of this RangeOverMatches.


        :return: The id of this RangeOverMatches.
        :rtype: List[int]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RangeOverMatches.


        :param id: The id of this RangeOverMatches.
        :type id: List[int]
        """
        if id is not None and len(id) > 2:
            raise ValueError("Invalid value for `id`, number of items must be less than or equal to `2`")
        if id is not None and len(id) < 2:
            raise ValueError("Invalid value for `id`, number of items must be greater than or equal to `2`")

        self._id = id

    @property
    def match_type(self):
        """Gets the match_type of this RangeOverMatches.


        :return: The match_type of this RangeOverMatches.
        :rtype: List[MatchType]
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this RangeOverMatches.


        :param match_type: The match_type of this RangeOverMatches.
        :type match_type: List[MatchType]
        """
        if match_type is not None and len(match_type) > 2:
            raise ValueError("Invalid value for `match_type`, number of items must be less than or equal to `2`")
        if match_type is not None and len(match_type) < 2:
            raise ValueError("Invalid value for `match_type`, number of items must be greater than or equal to `2`")

        self._match_type = match_type

    @property
    def modified_at(self):
        """Gets the modified_at of this RangeOverMatches.


        :return: The modified_at of this RangeOverMatches.
        :rtype: List[datetime]
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this RangeOverMatches.


        :param modified_at: The modified_at of this RangeOverMatches.
        :type modified_at: List[datetime]
        """
        if modified_at is not None and len(modified_at) > 2:
            raise ValueError("Invalid value for `modified_at`, number of items must be less than or equal to `2`")
        if modified_at is not None and len(modified_at) < 2:
            raise ValueError("Invalid value for `modified_at`, number of items must be greater than or equal to `2`")

        self._modified_at = modified_at

    @property
    def name(self):
        """Gets the name of this RangeOverMatches.


        :return: The name of this RangeOverMatches.
        :rtype: List[str]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RangeOverMatches.


        :param name: The name of this RangeOverMatches.
        :type name: List[str]
        """
        if name is not None and len(name) > 2:
            raise ValueError("Invalid value for `name`, number of items must be less than or equal to `2`")
        if name is not None and len(name) < 2:
            raise ValueError("Invalid value for `name`, number of items must be greater than or equal to `2`")

        self._name = name

    @property
    def number_of_games(self):
        """Gets the number_of_games of this RangeOverMatches.


        :return: The number_of_games of this RangeOverMatches.
        :rtype: List[int]
        """
        return self._number_of_games

    @number_of_games.setter
    def number_of_games(self, number_of_games):
        """Sets the number_of_games of this RangeOverMatches.


        :param number_of_games: The number_of_games of this RangeOverMatches.
        :type number_of_games: List[int]
        """
        if number_of_games is not None and len(number_of_games) > 2:
            raise ValueError("Invalid value for `number_of_games`, number of items must be less than or equal to `2`")
        if number_of_games is not None and len(number_of_games) < 2:
            raise ValueError("Invalid value for `number_of_games`, number of items must be greater than or equal to `2`")

        self._number_of_games = number_of_games

    @property
    def scheduled_at(self):
        """Gets the scheduled_at of this RangeOverMatches.


        :return: The scheduled_at of this RangeOverMatches.
        :rtype: List[datetime]
        """
        return self._scheduled_at

    @scheduled_at.setter
    def scheduled_at(self, scheduled_at):
        """Sets the scheduled_at of this RangeOverMatches.


        :param scheduled_at: The scheduled_at of this RangeOverMatches.
        :type scheduled_at: List[datetime]
        """
        if scheduled_at is not None and len(scheduled_at) > 2:
            raise ValueError("Invalid value for `scheduled_at`, number of items must be less than or equal to `2`")
        if scheduled_at is not None and len(scheduled_at) < 2:
            raise ValueError("Invalid value for `scheduled_at`, number of items must be greater than or equal to `2`")

        self._scheduled_at = scheduled_at

    @property
    def slug(self):
        """Gets the slug of this RangeOverMatches.


        :return: The slug of this RangeOverMatches.
        :rtype: List[str]
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this RangeOverMatches.


        :param slug: The slug of this RangeOverMatches.
        :type slug: List[str]
        """
        if slug is not None and len(slug) > 2:
            raise ValueError("Invalid value for `slug`, number of items must be less than or equal to `2`")
        if slug is not None and len(slug) < 2:
            raise ValueError("Invalid value for `slug`, number of items must be greater than or equal to `2`")

        self._slug = slug

    @property
    def status(self):
        """Gets the status of this RangeOverMatches.


        :return: The status of this RangeOverMatches.
        :rtype: List[MatchStatus]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RangeOverMatches.


        :param status: The status of this RangeOverMatches.
        :type status: List[MatchStatus]
        """
        if status is not None and len(status) > 2:
            raise ValueError("Invalid value for `status`, number of items must be less than or equal to `2`")
        if status is not None and len(status) < 2:
            raise ValueError("Invalid value for `status`, number of items must be greater than or equal to `2`")

        self._status = status

    @property
    def tournament_id(self):
        """Gets the tournament_id of this RangeOverMatches.


        :return: The tournament_id of this RangeOverMatches.
        :rtype: List[int]
        """
        return self._tournament_id

    @tournament_id.setter
    def tournament_id(self, tournament_id):
        """Sets the tournament_id of this RangeOverMatches.


        :param tournament_id: The tournament_id of this RangeOverMatches.
        :type tournament_id: List[int]
        """
        if tournament_id is not None and len(tournament_id) > 2:
            raise ValueError("Invalid value for `tournament_id`, number of items must be less than or equal to `2`")
        if tournament_id is not None and len(tournament_id) < 2:
            raise ValueError("Invalid value for `tournament_id`, number of items must be greater than or equal to `2`")

        self._tournament_id = tournament_id

    @property
    def winner_id(self):
        """Gets the winner_id of this RangeOverMatches.


        :return: The winner_id of this RangeOverMatches.
        :rtype: List[OpponentID]
        """
        return self._winner_id

    @winner_id.setter
    def winner_id(self, winner_id):
        """Sets the winner_id of this RangeOverMatches.


        :param winner_id: The winner_id of this RangeOverMatches.
        :type winner_id: List[OpponentID]
        """
        if winner_id is not None and len(winner_id) > 2:
            raise ValueError("Invalid value for `winner_id`, number of items must be less than or equal to `2`")
        if winner_id is not None and len(winner_id) < 2:
            raise ValueError("Invalid value for `winner_id`, number of items must be greater than or equal to `2`")

        self._winner_id = winner_id
