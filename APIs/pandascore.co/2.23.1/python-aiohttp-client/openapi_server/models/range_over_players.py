# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RangeOverPlayers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, birth_year: List[float]=None, birthday: List[str]=None, first_name: List[str]=None, hometown: List[str]=None, id: List[int]=None, last_name: List[str]=None, name: List[str]=None, nationality: List[str]=None, role: List[str]=None, slug: List[str]=None):
        """RangeOverPlayers - a model defined in OpenAPI

        :param birth_year: The birth_year of this RangeOverPlayers.
        :param birthday: The birthday of this RangeOverPlayers.
        :param first_name: The first_name of this RangeOverPlayers.
        :param hometown: The hometown of this RangeOverPlayers.
        :param id: The id of this RangeOverPlayers.
        :param last_name: The last_name of this RangeOverPlayers.
        :param name: The name of this RangeOverPlayers.
        :param nationality: The nationality of this RangeOverPlayers.
        :param role: The role of this RangeOverPlayers.
        :param slug: The slug of this RangeOverPlayers.
        """
        self.openapi_types = {
            'birth_year': List[float],
            'birthday': List[str],
            'first_name': List[str],
            'hometown': List[str],
            'id': List[int],
            'last_name': List[str],
            'name': List[str],
            'nationality': List[str],
            'role': List[str],
            'slug': List[str]
        }

        self.attribute_map = {
            'birth_year': 'birth_year',
            'birthday': 'birthday',
            'first_name': 'first_name',
            'hometown': 'hometown',
            'id': 'id',
            'last_name': 'last_name',
            'name': 'name',
            'nationality': 'nationality',
            'role': 'role',
            'slug': 'slug'
        }

        self._birth_year = birth_year
        self._birthday = birthday
        self._first_name = first_name
        self._hometown = hometown
        self._id = id
        self._last_name = last_name
        self._name = name
        self._nationality = nationality
        self._role = role
        self._slug = slug

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RangeOverPlayers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The range_over_Players of this RangeOverPlayers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def birth_year(self):
        """Gets the birth_year of this RangeOverPlayers.


        :return: The birth_year of this RangeOverPlayers.
        :rtype: List[float]
        """
        return self._birth_year

    @birth_year.setter
    def birth_year(self, birth_year):
        """Sets the birth_year of this RangeOverPlayers.


        :param birth_year: The birth_year of this RangeOverPlayers.
        :type birth_year: List[float]
        """
        if birth_year is not None and len(birth_year) > 2:
            raise ValueError("Invalid value for `birth_year`, number of items must be less than or equal to `2`")
        if birth_year is not None and len(birth_year) < 2:
            raise ValueError("Invalid value for `birth_year`, number of items must be greater than or equal to `2`")

        self._birth_year = birth_year

    @property
    def birthday(self):
        """Gets the birthday of this RangeOverPlayers.


        :return: The birthday of this RangeOverPlayers.
        :rtype: List[str]
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this RangeOverPlayers.


        :param birthday: The birthday of this RangeOverPlayers.
        :type birthday: List[str]
        """
        if birthday is not None and len(birthday) > 2:
            raise ValueError("Invalid value for `birthday`, number of items must be less than or equal to `2`")
        if birthday is not None and len(birthday) < 2:
            raise ValueError("Invalid value for `birthday`, number of items must be greater than or equal to `2`")

        self._birthday = birthday

    @property
    def first_name(self):
        """Gets the first_name of this RangeOverPlayers.


        :return: The first_name of this RangeOverPlayers.
        :rtype: List[str]
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this RangeOverPlayers.


        :param first_name: The first_name of this RangeOverPlayers.
        :type first_name: List[str]
        """
        if first_name is not None and len(first_name) > 2:
            raise ValueError("Invalid value for `first_name`, number of items must be less than or equal to `2`")
        if first_name is not None and len(first_name) < 2:
            raise ValueError("Invalid value for `first_name`, number of items must be greater than or equal to `2`")

        self._first_name = first_name

    @property
    def hometown(self):
        """Gets the hometown of this RangeOverPlayers.


        :return: The hometown of this RangeOverPlayers.
        :rtype: List[str]
        """
        return self._hometown

    @hometown.setter
    def hometown(self, hometown):
        """Sets the hometown of this RangeOverPlayers.


        :param hometown: The hometown of this RangeOverPlayers.
        :type hometown: List[str]
        """
        if hometown is not None and len(hometown) > 2:
            raise ValueError("Invalid value for `hometown`, number of items must be less than or equal to `2`")
        if hometown is not None and len(hometown) < 2:
            raise ValueError("Invalid value for `hometown`, number of items must be greater than or equal to `2`")

        self._hometown = hometown

    @property
    def id(self):
        """Gets the id of this RangeOverPlayers.


        :return: The id of this RangeOverPlayers.
        :rtype: List[int]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RangeOverPlayers.


        :param id: The id of this RangeOverPlayers.
        :type id: List[int]
        """
        if id is not None and len(id) > 2:
            raise ValueError("Invalid value for `id`, number of items must be less than or equal to `2`")
        if id is not None and len(id) < 2:
            raise ValueError("Invalid value for `id`, number of items must be greater than or equal to `2`")

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this RangeOverPlayers.


        :return: The last_name of this RangeOverPlayers.
        :rtype: List[str]
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this RangeOverPlayers.


        :param last_name: The last_name of this RangeOverPlayers.
        :type last_name: List[str]
        """
        if last_name is not None and len(last_name) > 2:
            raise ValueError("Invalid value for `last_name`, number of items must be less than or equal to `2`")
        if last_name is not None and len(last_name) < 2:
            raise ValueError("Invalid value for `last_name`, number of items must be greater than or equal to `2`")

        self._last_name = last_name

    @property
    def name(self):
        """Gets the name of this RangeOverPlayers.


        :return: The name of this RangeOverPlayers.
        :rtype: List[str]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RangeOverPlayers.


        :param name: The name of this RangeOverPlayers.
        :type name: List[str]
        """
        if name is not None and len(name) > 2:
            raise ValueError("Invalid value for `name`, number of items must be less than or equal to `2`")
        if name is not None and len(name) < 2:
            raise ValueError("Invalid value for `name`, number of items must be greater than or equal to `2`")

        self._name = name

    @property
    def nationality(self):
        """Gets the nationality of this RangeOverPlayers.


        :return: The nationality of this RangeOverPlayers.
        :rtype: List[str]
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this RangeOverPlayers.


        :param nationality: The nationality of this RangeOverPlayers.
        :type nationality: List[str]
        """
        if nationality is not None and len(nationality) > 2:
            raise ValueError("Invalid value for `nationality`, number of items must be less than or equal to `2`")
        if nationality is not None and len(nationality) < 2:
            raise ValueError("Invalid value for `nationality`, number of items must be greater than or equal to `2`")

        self._nationality = nationality

    @property
    def role(self):
        """Gets the role of this RangeOverPlayers.


        :return: The role of this RangeOverPlayers.
        :rtype: List[str]
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this RangeOverPlayers.


        :param role: The role of this RangeOverPlayers.
        :type role: List[str]
        """
        if role is not None and len(role) > 2:
            raise ValueError("Invalid value for `role`, number of items must be less than or equal to `2`")
        if role is not None and len(role) < 2:
            raise ValueError("Invalid value for `role`, number of items must be greater than or equal to `2`")

        self._role = role

    @property
    def slug(self):
        """Gets the slug of this RangeOverPlayers.


        :return: The slug of this RangeOverPlayers.
        :rtype: List[str]
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this RangeOverPlayers.


        :param slug: The slug of this RangeOverPlayers.
        :type slug: List[str]
        """
        if slug is not None and len(slug) > 2:
            raise ValueError("Invalid value for `slug`, number of items must be less than or equal to `2`")
        if slug is not None and len(slug) < 2:
            raise ValueError("Invalid value for `slug`, number of items must be greater than or equal to `2`")

        self._slug = slug
