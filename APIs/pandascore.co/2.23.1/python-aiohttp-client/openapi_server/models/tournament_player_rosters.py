# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.opponent_type_player import OpponentTypePlayer
from openapi_server.models.player import Player
from openapi_server import util


class TournamentPlayerRosters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rosters: List[Player]=None, type: OpponentTypePlayer=None):
        """TournamentPlayerRosters - a model defined in OpenAPI

        :param rosters: The rosters of this TournamentPlayerRosters.
        :param type: The type of this TournamentPlayerRosters.
        """
        self.openapi_types = {
            'rosters': List[Player],
            'type': OpponentTypePlayer
        }

        self.attribute_map = {
            'rosters': 'rosters',
            'type': 'type'
        }

        self._rosters = rosters
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TournamentPlayerRosters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TournamentPlayerRosters of this TournamentPlayerRosters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rosters(self):
        """Gets the rosters of this TournamentPlayerRosters.


        :return: The rosters of this TournamentPlayerRosters.
        :rtype: List[Player]
        """
        return self._rosters

    @rosters.setter
    def rosters(self, rosters):
        """Sets the rosters of this TournamentPlayerRosters.


        :param rosters: The rosters of this TournamentPlayerRosters.
        :type rosters: List[Player]
        """
        if rosters is None:
            raise ValueError("Invalid value for `rosters`, must not be `None`")

        self._rosters = rosters

    @property
    def type(self):
        """Gets the type of this TournamentPlayerRosters.


        :return: The type of this TournamentPlayerRosters.
        :rtype: OpponentTypePlayer
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TournamentPlayerRosters.


        :param type: The type of this TournamentPlayerRosters.
        :type type: OpponentTypePlayer
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
