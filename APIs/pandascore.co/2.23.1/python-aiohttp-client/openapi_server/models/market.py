# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.market_selection import MarketSelection
from openapi_server.models.market_status import MarketStatus
from openapi_server.models.opponent_id1 import OpponentID1
import re
from openapi_server import util


class Market(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, line: object=None, margin: float=None, name: str=None, participant_id: OpponentID1=None, participant_type: object=None, selections: List[MarketSelection]=None, status: MarketStatus=None, template: str=None):
        """Market - a model defined in OpenAPI

        :param id: The id of this Market.
        :param line: The line of this Market.
        :param margin: The margin of this Market.
        :param name: The name of this Market.
        :param participant_id: The participant_id of this Market.
        :param participant_type: The participant_type of this Market.
        :param selections: The selections of this Market.
        :param status: The status of this Market.
        :param template: The template of this Market.
        """
        self.openapi_types = {
            'id': str,
            'line': object,
            'margin': float,
            'name': str,
            'participant_id': OpponentID1,
            'participant_type': object,
            'selections': List[MarketSelection],
            'status': MarketStatus,
            'template': str
        }

        self.attribute_map = {
            'id': 'id',
            'line': 'line',
            'margin': 'margin',
            'name': 'name',
            'participant_id': 'participant_id',
            'participant_type': 'participant_type',
            'selections': 'selections',
            'status': 'status',
            'template': 'template'
        }

        self._id = id
        self._line = line
        self._margin = margin
        self._name = name
        self._participant_id = participant_id
        self._participant_type = participant_type
        self._selections = selections
        self._status = status
        self._template = template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Market':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Market of this Market.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Market.


        :return: The id of this Market.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Market.


        :param id: The id of this Market.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")
        if id is not None and not re.search(r'^[a-z0-9_-]+$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[a-z0-9_-]+$/`")

        self._id = id

    @property
    def line(self):
        """Gets the line of this Market.


        :return: The line of this Market.
        :rtype: object
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this Market.


        :param line: The line of this Market.
        :type line: object
        """
        if line is None:
            raise ValueError("Invalid value for `line`, must not be `None`")

        self._line = line

    @property
    def margin(self):
        """Gets the margin of this Market.


        :return: The margin of this Market.
        :rtype: float
        """
        return self._margin

    @margin.setter
    def margin(self, margin):
        """Sets the margin of this Market.


        :param margin: The margin of this Market.
        :type margin: float
        """
        if margin is None:
            raise ValueError("Invalid value for `margin`, must not be `None`")
        if margin is not None and margin < 0:
            raise ValueError("Invalid value for `margin`, must be a value greater than or equal to `0`")

        self._margin = margin

    @property
    def name(self):
        """Gets the name of this Market.


        :return: The name of this Market.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Market.


        :param name: The name of this Market.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def participant_id(self):
        """Gets the participant_id of this Market.


        :return: The participant_id of this Market.
        :rtype: OpponentID1
        """
        return self._participant_id

    @participant_id.setter
    def participant_id(self, participant_id):
        """Sets the participant_id of this Market.


        :param participant_id: The participant_id of this Market.
        :type participant_id: OpponentID1
        """
        if participant_id is None:
            raise ValueError("Invalid value for `participant_id`, must not be `None`")

        self._participant_id = participant_id

    @property
    def participant_type(self):
        """Gets the participant_type of this Market.


        :return: The participant_type of this Market.
        :rtype: object
        """
        return self._participant_type

    @participant_type.setter
    def participant_type(self, participant_type):
        """Sets the participant_type of this Market.


        :param participant_type: The participant_type of this Market.
        :type participant_type: object
        """
        if participant_type is None:
            raise ValueError("Invalid value for `participant_type`, must not be `None`")

        self._participant_type = participant_type

    @property
    def selections(self):
        """Gets the selections of this Market.


        :return: The selections of this Market.
        :rtype: List[MarketSelection]
        """
        return self._selections

    @selections.setter
    def selections(self, selections):
        """Sets the selections of this Market.


        :param selections: The selections of this Market.
        :type selections: List[MarketSelection]
        """
        if selections is None:
            raise ValueError("Invalid value for `selections`, must not be `None`")

        self._selections = selections

    @property
    def status(self):
        """Gets the status of this Market.


        :return: The status of this Market.
        :rtype: MarketStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Market.


        :param status: The status of this Market.
        :type status: MarketStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def template(self):
        """Gets the template of this Market.


        :return: The template of this Market.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this Market.


        :param template: The template of this Market.
        :type template: str
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")

        self._template = template
