# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_opponent1 import BaseOpponent1
from openapi_server.models.betting_base_tournament import BettingBaseTournament
from openapi_server.models.betting_game import BettingGame
from openapi_server.models.betting_league1 import BettingLeague1
from openapi_server.models.betting_match_status import BettingMatchStatus
from openapi_server.models.betting_metadata import BettingMetadata
from openapi_server.models.betting_serie1 import BettingSerie1
from openapi_server.models.current_videogame import CurrentVideogame
from openapi_server.models.match_live import MatchLive
from openapi_server.models.match_localized_streams import MatchLocalizedStreams
from openapi_server.models.match_result import MatchResult
from openapi_server.models.match_type import MatchType
from openapi_server.models.opponent import Opponent
from openapi_server.models.opponent_id1 import OpponentID1
from openapi_server.models.short_videogame_version1 import ShortVideogameVersion1
from openapi_server.models.stream import Stream
from openapi_server import util


class BettingMatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begin_at: object=None, betting_metadata: BettingMetadata=None, detailed_stats: bool=None, draw: bool=None, end_at: object=None, forfeit: bool=None, game_advantage: OpponentID1=None, games: List[BettingGame]=None, id: int=None, league: BettingLeague1=None, league_id: int=None, live: MatchLive=None, live_embed_url: object=None, match_type: MatchType=None, modified_at: datetime=None, name: str=None, number_of_games: int=None, official_stream_url: object=None, opponents: List[Opponent]=None, original_scheduled_at: object=None, rescheduled: object=None, results: List[MatchResult]=None, scheduled_at: object=None, serie: BettingSerie1=None, serie_id: int=None, slug: object=None, status: BettingMatchStatus=None, streams: MatchLocalizedStreams=None, streams_list: List[Stream]=None, tournament: BettingBaseTournament=None, tournament_id: int=None, videogame: CurrentVideogame=None, videogame_version: ShortVideogameVersion1=None, winner: BaseOpponent1=None, winner_id: OpponentID1=None):
        """BettingMatch - a model defined in OpenAPI

        :param begin_at: The begin_at of this BettingMatch.
        :param betting_metadata: The betting_metadata of this BettingMatch.
        :param detailed_stats: The detailed_stats of this BettingMatch.
        :param draw: The draw of this BettingMatch.
        :param end_at: The end_at of this BettingMatch.
        :param forfeit: The forfeit of this BettingMatch.
        :param game_advantage: The game_advantage of this BettingMatch.
        :param games: The games of this BettingMatch.
        :param id: The id of this BettingMatch.
        :param league: The league of this BettingMatch.
        :param league_id: The league_id of this BettingMatch.
        :param live: The live of this BettingMatch.
        :param live_embed_url: The live_embed_url of this BettingMatch.
        :param match_type: The match_type of this BettingMatch.
        :param modified_at: The modified_at of this BettingMatch.
        :param name: The name of this BettingMatch.
        :param number_of_games: The number_of_games of this BettingMatch.
        :param official_stream_url: The official_stream_url of this BettingMatch.
        :param opponents: The opponents of this BettingMatch.
        :param original_scheduled_at: The original_scheduled_at of this BettingMatch.
        :param rescheduled: The rescheduled of this BettingMatch.
        :param results: The results of this BettingMatch.
        :param scheduled_at: The scheduled_at of this BettingMatch.
        :param serie: The serie of this BettingMatch.
        :param serie_id: The serie_id of this BettingMatch.
        :param slug: The slug of this BettingMatch.
        :param status: The status of this BettingMatch.
        :param streams: The streams of this BettingMatch.
        :param streams_list: The streams_list of this BettingMatch.
        :param tournament: The tournament of this BettingMatch.
        :param tournament_id: The tournament_id of this BettingMatch.
        :param videogame: The videogame of this BettingMatch.
        :param videogame_version: The videogame_version of this BettingMatch.
        :param winner: The winner of this BettingMatch.
        :param winner_id: The winner_id of this BettingMatch.
        """
        self.openapi_types = {
            'begin_at': object,
            'betting_metadata': BettingMetadata,
            'detailed_stats': bool,
            'draw': bool,
            'end_at': object,
            'forfeit': bool,
            'game_advantage': OpponentID1,
            'games': List[BettingGame],
            'id': int,
            'league': BettingLeague1,
            'league_id': int,
            'live': MatchLive,
            'live_embed_url': object,
            'match_type': MatchType,
            'modified_at': datetime,
            'name': str,
            'number_of_games': int,
            'official_stream_url': object,
            'opponents': List[Opponent],
            'original_scheduled_at': object,
            'rescheduled': object,
            'results': List[MatchResult],
            'scheduled_at': object,
            'serie': BettingSerie1,
            'serie_id': int,
            'slug': object,
            'status': BettingMatchStatus,
            'streams': MatchLocalizedStreams,
            'streams_list': List[Stream],
            'tournament': BettingBaseTournament,
            'tournament_id': int,
            'videogame': CurrentVideogame,
            'videogame_version': ShortVideogameVersion1,
            'winner': BaseOpponent1,
            'winner_id': OpponentID1
        }

        self.attribute_map = {
            'begin_at': 'begin_at',
            'betting_metadata': 'betting_metadata',
            'detailed_stats': 'detailed_stats',
            'draw': 'draw',
            'end_at': 'end_at',
            'forfeit': 'forfeit',
            'game_advantage': 'game_advantage',
            'games': 'games',
            'id': 'id',
            'league': 'league',
            'league_id': 'league_id',
            'live': 'live',
            'live_embed_url': 'live_embed_url',
            'match_type': 'match_type',
            'modified_at': 'modified_at',
            'name': 'name',
            'number_of_games': 'number_of_games',
            'official_stream_url': 'official_stream_url',
            'opponents': 'opponents',
            'original_scheduled_at': 'original_scheduled_at',
            'rescheduled': 'rescheduled',
            'results': 'results',
            'scheduled_at': 'scheduled_at',
            'serie': 'serie',
            'serie_id': 'serie_id',
            'slug': 'slug',
            'status': 'status',
            'streams': 'streams',
            'streams_list': 'streams_list',
            'tournament': 'tournament',
            'tournament_id': 'tournament_id',
            'videogame': 'videogame',
            'videogame_version': 'videogame_version',
            'winner': 'winner',
            'winner_id': 'winner_id'
        }

        self._begin_at = begin_at
        self._betting_metadata = betting_metadata
        self._detailed_stats = detailed_stats
        self._draw = draw
        self._end_at = end_at
        self._forfeit = forfeit
        self._game_advantage = game_advantage
        self._games = games
        self._id = id
        self._league = league
        self._league_id = league_id
        self._live = live
        self._live_embed_url = live_embed_url
        self._match_type = match_type
        self._modified_at = modified_at
        self._name = name
        self._number_of_games = number_of_games
        self._official_stream_url = official_stream_url
        self._opponents = opponents
        self._original_scheduled_at = original_scheduled_at
        self._rescheduled = rescheduled
        self._results = results
        self._scheduled_at = scheduled_at
        self._serie = serie
        self._serie_id = serie_id
        self._slug = slug
        self._status = status
        self._streams = streams
        self._streams_list = streams_list
        self._tournament = tournament
        self._tournament_id = tournament_id
        self._videogame = videogame
        self._videogame_version = videogame_version
        self._winner = winner
        self._winner_id = winner_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BettingMatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BettingMatch of this BettingMatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begin_at(self):
        """Gets the begin_at of this BettingMatch.


        :return: The begin_at of this BettingMatch.
        :rtype: object
        """
        return self._begin_at

    @begin_at.setter
    def begin_at(self, begin_at):
        """Sets the begin_at of this BettingMatch.


        :param begin_at: The begin_at of this BettingMatch.
        :type begin_at: object
        """
        if begin_at is None:
            raise ValueError("Invalid value for `begin_at`, must not be `None`")

        self._begin_at = begin_at

    @property
    def betting_metadata(self):
        """Gets the betting_metadata of this BettingMatch.


        :return: The betting_metadata of this BettingMatch.
        :rtype: BettingMetadata
        """
        return self._betting_metadata

    @betting_metadata.setter
    def betting_metadata(self, betting_metadata):
        """Sets the betting_metadata of this BettingMatch.


        :param betting_metadata: The betting_metadata of this BettingMatch.
        :type betting_metadata: BettingMetadata
        """
        if betting_metadata is None:
            raise ValueError("Invalid value for `betting_metadata`, must not be `None`")

        self._betting_metadata = betting_metadata

    @property
    def detailed_stats(self):
        """Gets the detailed_stats of this BettingMatch.

        Whether the match offers full stats

        :return: The detailed_stats of this BettingMatch.
        :rtype: bool
        """
        return self._detailed_stats

    @detailed_stats.setter
    def detailed_stats(self, detailed_stats):
        """Sets the detailed_stats of this BettingMatch.

        Whether the match offers full stats

        :param detailed_stats: The detailed_stats of this BettingMatch.
        :type detailed_stats: bool
        """
        if detailed_stats is None:
            raise ValueError("Invalid value for `detailed_stats`, must not be `None`")

        self._detailed_stats = detailed_stats

    @property
    def draw(self):
        """Gets the draw of this BettingMatch.

        Whether result of the match is a draw

        :return: The draw of this BettingMatch.
        :rtype: bool
        """
        return self._draw

    @draw.setter
    def draw(self, draw):
        """Sets the draw of this BettingMatch.

        Whether result of the match is a draw

        :param draw: The draw of this BettingMatch.
        :type draw: bool
        """
        if draw is None:
            raise ValueError("Invalid value for `draw`, must not be `None`")

        self._draw = draw

    @property
    def end_at(self):
        """Gets the end_at of this BettingMatch.


        :return: The end_at of this BettingMatch.
        :rtype: object
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this BettingMatch.


        :param end_at: The end_at of this BettingMatch.
        :type end_at: object
        """
        if end_at is None:
            raise ValueError("Invalid value for `end_at`, must not be `None`")

        self._end_at = end_at

    @property
    def forfeit(self):
        """Gets the forfeit of this BettingMatch.

        Whether match was forfeited

        :return: The forfeit of this BettingMatch.
        :rtype: bool
        """
        return self._forfeit

    @forfeit.setter
    def forfeit(self, forfeit):
        """Sets the forfeit of this BettingMatch.

        Whether match was forfeited

        :param forfeit: The forfeit of this BettingMatch.
        :type forfeit: bool
        """
        if forfeit is None:
            raise ValueError("Invalid value for `forfeit`, must not be `None`")

        self._forfeit = forfeit

    @property
    def game_advantage(self):
        """Gets the game_advantage of this BettingMatch.


        :return: The game_advantage of this BettingMatch.
        :rtype: OpponentID1
        """
        return self._game_advantage

    @game_advantage.setter
    def game_advantage(self, game_advantage):
        """Sets the game_advantage of this BettingMatch.


        :param game_advantage: The game_advantage of this BettingMatch.
        :type game_advantage: OpponentID1
        """
        if game_advantage is None:
            raise ValueError("Invalid value for `game_advantage`, must not be `None`")

        self._game_advantage = game_advantage

    @property
    def games(self):
        """Gets the games of this BettingMatch.


        :return: The games of this BettingMatch.
        :rtype: List[BettingGame]
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this BettingMatch.


        :param games: The games of this BettingMatch.
        :type games: List[BettingGame]
        """
        if games is None:
            raise ValueError("Invalid value for `games`, must not be `None`")

        self._games = games

    @property
    def id(self):
        """Gets the id of this BettingMatch.


        :return: The id of this BettingMatch.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BettingMatch.


        :param id: The id of this BettingMatch.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and id < 1:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")

        self._id = id

    @property
    def league(self):
        """Gets the league of this BettingMatch.


        :return: The league of this BettingMatch.
        :rtype: BettingLeague1
        """
        return self._league

    @league.setter
    def league(self, league):
        """Sets the league of this BettingMatch.


        :param league: The league of this BettingMatch.
        :type league: BettingLeague1
        """
        if league is None:
            raise ValueError("Invalid value for `league`, must not be `None`")

        self._league = league

    @property
    def league_id(self):
        """Gets the league_id of this BettingMatch.


        :return: The league_id of this BettingMatch.
        :rtype: int
        """
        return self._league_id

    @league_id.setter
    def league_id(self, league_id):
        """Sets the league_id of this BettingMatch.


        :param league_id: The league_id of this BettingMatch.
        :type league_id: int
        """
        if league_id is None:
            raise ValueError("Invalid value for `league_id`, must not be `None`")
        if league_id is not None and league_id < 1:
            raise ValueError("Invalid value for `league_id`, must be a value greater than or equal to `1`")

        self._league_id = league_id

    @property
    def live(self):
        """Gets the live of this BettingMatch.


        :return: The live of this BettingMatch.
        :rtype: MatchLive
        """
        return self._live

    @live.setter
    def live(self, live):
        """Sets the live of this BettingMatch.


        :param live: The live of this BettingMatch.
        :type live: MatchLive
        """
        if live is None:
            raise ValueError("Invalid value for `live`, must not be `None`")

        self._live = live

    @property
    def live_embed_url(self):
        """Gets the live_embed_url of this BettingMatch.


        :return: The live_embed_url of this BettingMatch.
        :rtype: object
        """
        return self._live_embed_url

    @live_embed_url.setter
    def live_embed_url(self, live_embed_url):
        """Sets the live_embed_url of this BettingMatch.


        :param live_embed_url: The live_embed_url of this BettingMatch.
        :type live_embed_url: object
        """
        if live_embed_url is None:
            raise ValueError("Invalid value for `live_embed_url`, must not be `None`")

        self._live_embed_url = live_embed_url

    @property
    def match_type(self):
        """Gets the match_type of this BettingMatch.


        :return: The match_type of this BettingMatch.
        :rtype: MatchType
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this BettingMatch.


        :param match_type: The match_type of this BettingMatch.
        :type match_type: MatchType
        """
        if match_type is None:
            raise ValueError("Invalid value for `match_type`, must not be `None`")

        self._match_type = match_type

    @property
    def modified_at(self):
        """Gets the modified_at of this BettingMatch.


        :return: The modified_at of this BettingMatch.
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this BettingMatch.


        :param modified_at: The modified_at of this BettingMatch.
        :type modified_at: datetime
        """
        if modified_at is None:
            raise ValueError("Invalid value for `modified_at`, must not be `None`")
        if modified_at is not None and len(modified_at) < 1:
            raise ValueError("Invalid value for `modified_at`, length must be greater than or equal to `1`")

        self._modified_at = modified_at

    @property
    def name(self):
        """Gets the name of this BettingMatch.


        :return: The name of this BettingMatch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BettingMatch.


        :param name: The name of this BettingMatch.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def number_of_games(self):
        """Gets the number_of_games of this BettingMatch.

        Number of games

        :return: The number_of_games of this BettingMatch.
        :rtype: int
        """
        return self._number_of_games

    @number_of_games.setter
    def number_of_games(self, number_of_games):
        """Sets the number_of_games of this BettingMatch.

        Number of games

        :param number_of_games: The number_of_games of this BettingMatch.
        :type number_of_games: int
        """
        if number_of_games is None:
            raise ValueError("Invalid value for `number_of_games`, must not be `None`")
        if number_of_games is not None and number_of_games < 0:
            raise ValueError("Invalid value for `number_of_games`, must be a value greater than or equal to `0`")

        self._number_of_games = number_of_games

    @property
    def official_stream_url(self):
        """Gets the official_stream_url of this BettingMatch.


        :return: The official_stream_url of this BettingMatch.
        :rtype: object
        """
        return self._official_stream_url

    @official_stream_url.setter
    def official_stream_url(self, official_stream_url):
        """Sets the official_stream_url of this BettingMatch.


        :param official_stream_url: The official_stream_url of this BettingMatch.
        :type official_stream_url: object
        """
        if official_stream_url is None:
            raise ValueError("Invalid value for `official_stream_url`, must not be `None`")

        self._official_stream_url = official_stream_url

    @property
    def opponents(self):
        """Gets the opponents of this BettingMatch.


        :return: The opponents of this BettingMatch.
        :rtype: List[Opponent]
        """
        return self._opponents

    @opponents.setter
    def opponents(self, opponents):
        """Sets the opponents of this BettingMatch.


        :param opponents: The opponents of this BettingMatch.
        :type opponents: List[Opponent]
        """
        if opponents is None:
            raise ValueError("Invalid value for `opponents`, must not be `None`")

        self._opponents = opponents

    @property
    def original_scheduled_at(self):
        """Gets the original_scheduled_at of this BettingMatch.


        :return: The original_scheduled_at of this BettingMatch.
        :rtype: object
        """
        return self._original_scheduled_at

    @original_scheduled_at.setter
    def original_scheduled_at(self, original_scheduled_at):
        """Sets the original_scheduled_at of this BettingMatch.


        :param original_scheduled_at: The original_scheduled_at of this BettingMatch.
        :type original_scheduled_at: object
        """
        if original_scheduled_at is None:
            raise ValueError("Invalid value for `original_scheduled_at`, must not be `None`")

        self._original_scheduled_at = original_scheduled_at

    @property
    def rescheduled(self):
        """Gets the rescheduled of this BettingMatch.


        :return: The rescheduled of this BettingMatch.
        :rtype: object
        """
        return self._rescheduled

    @rescheduled.setter
    def rescheduled(self, rescheduled):
        """Sets the rescheduled of this BettingMatch.


        :param rescheduled: The rescheduled of this BettingMatch.
        :type rescheduled: object
        """
        if rescheduled is None:
            raise ValueError("Invalid value for `rescheduled`, must not be `None`")

        self._rescheduled = rescheduled

    @property
    def results(self):
        """Gets the results of this BettingMatch.


        :return: The results of this BettingMatch.
        :rtype: List[MatchResult]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this BettingMatch.


        :param results: The results of this BettingMatch.
        :type results: List[MatchResult]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")

        self._results = results

    @property
    def scheduled_at(self):
        """Gets the scheduled_at of this BettingMatch.


        :return: The scheduled_at of this BettingMatch.
        :rtype: object
        """
        return self._scheduled_at

    @scheduled_at.setter
    def scheduled_at(self, scheduled_at):
        """Sets the scheduled_at of this BettingMatch.


        :param scheduled_at: The scheduled_at of this BettingMatch.
        :type scheduled_at: object
        """
        if scheduled_at is None:
            raise ValueError("Invalid value for `scheduled_at`, must not be `None`")

        self._scheduled_at = scheduled_at

    @property
    def serie(self):
        """Gets the serie of this BettingMatch.


        :return: The serie of this BettingMatch.
        :rtype: BettingSerie1
        """
        return self._serie

    @serie.setter
    def serie(self, serie):
        """Sets the serie of this BettingMatch.


        :param serie: The serie of this BettingMatch.
        :type serie: BettingSerie1
        """
        if serie is None:
            raise ValueError("Invalid value for `serie`, must not be `None`")

        self._serie = serie

    @property
    def serie_id(self):
        """Gets the serie_id of this BettingMatch.


        :return: The serie_id of this BettingMatch.
        :rtype: int
        """
        return self._serie_id

    @serie_id.setter
    def serie_id(self, serie_id):
        """Sets the serie_id of this BettingMatch.


        :param serie_id: The serie_id of this BettingMatch.
        :type serie_id: int
        """
        if serie_id is None:
            raise ValueError("Invalid value for `serie_id`, must not be `None`")
        if serie_id is not None and serie_id < 1:
            raise ValueError("Invalid value for `serie_id`, must be a value greater than or equal to `1`")

        self._serie_id = serie_id

    @property
    def slug(self):
        """Gets the slug of this BettingMatch.


        :return: The slug of this BettingMatch.
        :rtype: object
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this BettingMatch.


        :param slug: The slug of this BettingMatch.
        :type slug: object
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")

        self._slug = slug

    @property
    def status(self):
        """Gets the status of this BettingMatch.


        :return: The status of this BettingMatch.
        :rtype: BettingMatchStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BettingMatch.


        :param status: The status of this BettingMatch.
        :type status: BettingMatchStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def streams(self):
        """Gets the streams of this BettingMatch.


        :return: The streams of this BettingMatch.
        :rtype: MatchLocalizedStreams
        """
        return self._streams

    @streams.setter
    def streams(self, streams):
        """Sets the streams of this BettingMatch.


        :param streams: The streams of this BettingMatch.
        :type streams: MatchLocalizedStreams
        """
        if streams is None:
            raise ValueError("Invalid value for `streams`, must not be `None`")

        self._streams = streams

    @property
    def streams_list(self):
        """Gets the streams_list of this BettingMatch.


        :return: The streams_list of this BettingMatch.
        :rtype: List[Stream]
        """
        return self._streams_list

    @streams_list.setter
    def streams_list(self, streams_list):
        """Sets the streams_list of this BettingMatch.


        :param streams_list: The streams_list of this BettingMatch.
        :type streams_list: List[Stream]
        """
        if streams_list is None:
            raise ValueError("Invalid value for `streams_list`, must not be `None`")

        self._streams_list = streams_list

    @property
    def tournament(self):
        """Gets the tournament of this BettingMatch.


        :return: The tournament of this BettingMatch.
        :rtype: BettingBaseTournament
        """
        return self._tournament

    @tournament.setter
    def tournament(self, tournament):
        """Sets the tournament of this BettingMatch.


        :param tournament: The tournament of this BettingMatch.
        :type tournament: BettingBaseTournament
        """
        if tournament is None:
            raise ValueError("Invalid value for `tournament`, must not be `None`")

        self._tournament = tournament

    @property
    def tournament_id(self):
        """Gets the tournament_id of this BettingMatch.


        :return: The tournament_id of this BettingMatch.
        :rtype: int
        """
        return self._tournament_id

    @tournament_id.setter
    def tournament_id(self, tournament_id):
        """Sets the tournament_id of this BettingMatch.


        :param tournament_id: The tournament_id of this BettingMatch.
        :type tournament_id: int
        """
        if tournament_id is None:
            raise ValueError("Invalid value for `tournament_id`, must not be `None`")
        if tournament_id is not None and tournament_id < 1:
            raise ValueError("Invalid value for `tournament_id`, must be a value greater than or equal to `1`")

        self._tournament_id = tournament_id

    @property
    def videogame(self):
        """Gets the videogame of this BettingMatch.


        :return: The videogame of this BettingMatch.
        :rtype: CurrentVideogame
        """
        return self._videogame

    @videogame.setter
    def videogame(self, videogame):
        """Sets the videogame of this BettingMatch.


        :param videogame: The videogame of this BettingMatch.
        :type videogame: CurrentVideogame
        """
        if videogame is None:
            raise ValueError("Invalid value for `videogame`, must not be `None`")

        self._videogame = videogame

    @property
    def videogame_version(self):
        """Gets the videogame_version of this BettingMatch.


        :return: The videogame_version of this BettingMatch.
        :rtype: ShortVideogameVersion1
        """
        return self._videogame_version

    @videogame_version.setter
    def videogame_version(self, videogame_version):
        """Sets the videogame_version of this BettingMatch.


        :param videogame_version: The videogame_version of this BettingMatch.
        :type videogame_version: ShortVideogameVersion1
        """
        if videogame_version is None:
            raise ValueError("Invalid value for `videogame_version`, must not be `None`")

        self._videogame_version = videogame_version

    @property
    def winner(self):
        """Gets the winner of this BettingMatch.


        :return: The winner of this BettingMatch.
        :rtype: BaseOpponent1
        """
        return self._winner

    @winner.setter
    def winner(self, winner):
        """Sets the winner of this BettingMatch.


        :param winner: The winner of this BettingMatch.
        :type winner: BaseOpponent1
        """
        if winner is None:
            raise ValueError("Invalid value for `winner`, must not be `None`")

        self._winner = winner

    @property
    def winner_id(self):
        """Gets the winner_id of this BettingMatch.


        :return: The winner_id of this BettingMatch.
        :rtype: OpponentID1
        """
        return self._winner_id

    @winner_id.setter
    def winner_id(self, winner_id):
        """Sets the winner_id of this BettingMatch.


        :param winner_id: The winner_id of this BettingMatch.
        :type winner_id: OpponentID1
        """
        if winner_id is None:
            raise ValueError("Invalid value for `winner_id`, must not be `None`")

        self._winner_id = winner_id
