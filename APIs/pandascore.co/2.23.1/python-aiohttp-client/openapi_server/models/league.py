# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_serie import BaseSerie
from openapi_server.models.league_videogame import LeagueVideogame
import re
from openapi_server import util


class League(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, image_url: object=None, modified_at: datetime=None, name: str=None, series: List[BaseSerie]=None, slug: str=None, url: object=None, videogame: LeagueVideogame=None):
        """League - a model defined in OpenAPI

        :param id: The id of this League.
        :param image_url: The image_url of this League.
        :param modified_at: The modified_at of this League.
        :param name: The name of this League.
        :param series: The series of this League.
        :param slug: The slug of this League.
        :param url: The url of this League.
        :param videogame: The videogame of this League.
        """
        self.openapi_types = {
            'id': int,
            'image_url': object,
            'modified_at': datetime,
            'name': str,
            'series': List[BaseSerie],
            'slug': str,
            'url': object,
            'videogame': LeagueVideogame
        }

        self.attribute_map = {
            'id': 'id',
            'image_url': 'image_url',
            'modified_at': 'modified_at',
            'name': 'name',
            'series': 'series',
            'slug': 'slug',
            'url': 'url',
            'videogame': 'videogame'
        }

        self._id = id
        self._image_url = image_url
        self._modified_at = modified_at
        self._name = name
        self._series = series
        self._slug = slug
        self._url = url
        self._videogame = videogame

    @classmethod
    def from_dict(cls, dikt: dict) -> 'League':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The League of this League.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this League.


        :return: The id of this League.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this League.


        :param id: The id of this League.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and id < 1:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this League.


        :return: The image_url of this League.
        :rtype: object
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this League.


        :param image_url: The image_url of this League.
        :type image_url: object
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")

        self._image_url = image_url

    @property
    def modified_at(self):
        """Gets the modified_at of this League.


        :return: The modified_at of this League.
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this League.


        :param modified_at: The modified_at of this League.
        :type modified_at: datetime
        """
        if modified_at is None:
            raise ValueError("Invalid value for `modified_at`, must not be `None`")
        if modified_at is not None and len(modified_at) < 1:
            raise ValueError("Invalid value for `modified_at`, length must be greater than or equal to `1`")

        self._modified_at = modified_at

    @property
    def name(self):
        """Gets the name of this League.


        :return: The name of this League.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this League.


        :param name: The name of this League.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def series(self):
        """Gets the series of this League.


        :return: The series of this League.
        :rtype: List[BaseSerie]
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this League.


        :param series: The series of this League.
        :type series: List[BaseSerie]
        """
        if series is None:
            raise ValueError("Invalid value for `series`, must not be `None`")

        self._series = series

    @property
    def slug(self):
        """Gets the slug of this League.


        :return: The slug of this League.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this League.


        :param slug: The slug of this League.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[a-z0-9:_-]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[a-z0-9:_-]+$/`")

        self._slug = slug

    @property
    def url(self):
        """Gets the url of this League.


        :return: The url of this League.
        :rtype: object
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this League.


        :param url: The url of this League.
        :type url: object
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def videogame(self):
        """Gets the videogame of this League.


        :return: The videogame of this League.
        :rtype: LeagueVideogame
        """
        return self._videogame

    @videogame.setter
    def videogame(self, videogame):
        """Sets the videogame of this League.


        :param videogame: The videogame of this League.
        :type videogame: LeagueVideogame
        """
        if videogame is None:
            raise ValueError("Invalid value for `videogame`, must not be `None`")

        self._videogame = videogame
