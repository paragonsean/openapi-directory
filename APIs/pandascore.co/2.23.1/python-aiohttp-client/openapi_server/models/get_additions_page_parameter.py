# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_additions_page_parameter_one_of import GetAdditionsPageParameterOneOf
from openapi_server import util


class GetAdditionsPageParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, number: int=1, size: int=50):
        """GetAdditionsPageParameter - a model defined in OpenAPI

        :param number: The number of this GetAdditionsPageParameter.
        :param size: The size of this GetAdditionsPageParameter.
        """
        self.openapi_types = {
            'number': int,
            'size': int
        }

        self.attribute_map = {
            'number': 'number',
            'size': 'size'
        }

        self._number = number
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetAdditionsPageParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_additions_page_parameter of this GetAdditionsPageParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number(self):
        """Gets the number of this GetAdditionsPageParameter.


        :return: The number of this GetAdditionsPageParameter.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this GetAdditionsPageParameter.


        :param number: The number of this GetAdditionsPageParameter.
        :type number: int
        """
        if number is not None and number < 1:
            raise ValueError("Invalid value for `number`, must be a value greater than or equal to `1`")

        self._number = number

    @property
    def size(self):
        """Gets the size of this GetAdditionsPageParameter.


        :return: The size of this GetAdditionsPageParameter.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this GetAdditionsPageParameter.


        :param size: The size of this GetAdditionsPageParameter.
        :type size: int
        """
        if size is not None and size > 100:
            raise ValueError("Invalid value for `size`, must be a value less than or equal to `100`")
        if size is not None and size < 1:
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `1`")

        self._size = size
