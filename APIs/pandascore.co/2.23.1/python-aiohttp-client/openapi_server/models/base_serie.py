# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.opponent_id1 import OpponentID1
import re
from openapi_server import util


class BaseSerie(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begin_at: object=None, description: object=None, end_at: object=None, full_name: str=None, id: int=None, league_id: int=None, modified_at: datetime=None, name: object=None, season: object=None, slug: str=None, tier: object=None, winner_id: OpponentID1=None, winner_type: object=None, year: int=None):
        """BaseSerie - a model defined in OpenAPI

        :param begin_at: The begin_at of this BaseSerie.
        :param description: The description of this BaseSerie.
        :param end_at: The end_at of this BaseSerie.
        :param full_name: The full_name of this BaseSerie.
        :param id: The id of this BaseSerie.
        :param league_id: The league_id of this BaseSerie.
        :param modified_at: The modified_at of this BaseSerie.
        :param name: The name of this BaseSerie.
        :param season: The season of this BaseSerie.
        :param slug: The slug of this BaseSerie.
        :param tier: The tier of this BaseSerie.
        :param winner_id: The winner_id of this BaseSerie.
        :param winner_type: The winner_type of this BaseSerie.
        :param year: The year of this BaseSerie.
        """
        self.openapi_types = {
            'begin_at': object,
            'description': object,
            'end_at': object,
            'full_name': str,
            'id': int,
            'league_id': int,
            'modified_at': datetime,
            'name': object,
            'season': object,
            'slug': str,
            'tier': object,
            'winner_id': OpponentID1,
            'winner_type': object,
            'year': int
        }

        self.attribute_map = {
            'begin_at': 'begin_at',
            'description': 'description',
            'end_at': 'end_at',
            'full_name': 'full_name',
            'id': 'id',
            'league_id': 'league_id',
            'modified_at': 'modified_at',
            'name': 'name',
            'season': 'season',
            'slug': 'slug',
            'tier': 'tier',
            'winner_id': 'winner_id',
            'winner_type': 'winner_type',
            'year': 'year'
        }

        self._begin_at = begin_at
        self._description = description
        self._end_at = end_at
        self._full_name = full_name
        self._id = id
        self._league_id = league_id
        self._modified_at = modified_at
        self._name = name
        self._season = season
        self._slug = slug
        self._tier = tier
        self._winner_id = winner_id
        self._winner_type = winner_type
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BaseSerie':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BaseSerie of this BaseSerie.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begin_at(self):
        """Gets the begin_at of this BaseSerie.


        :return: The begin_at of this BaseSerie.
        :rtype: object
        """
        return self._begin_at

    @begin_at.setter
    def begin_at(self, begin_at):
        """Sets the begin_at of this BaseSerie.


        :param begin_at: The begin_at of this BaseSerie.
        :type begin_at: object
        """
        if begin_at is None:
            raise ValueError("Invalid value for `begin_at`, must not be `None`")

        self._begin_at = begin_at

    @property
    def description(self):
        """Gets the description of this BaseSerie.


        :return: The description of this BaseSerie.
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BaseSerie.


        :param description: The description of this BaseSerie.
        :type description: object
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def end_at(self):
        """Gets the end_at of this BaseSerie.


        :return: The end_at of this BaseSerie.
        :rtype: object
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this BaseSerie.


        :param end_at: The end_at of this BaseSerie.
        :type end_at: object
        """
        if end_at is None:
            raise ValueError("Invalid value for `end_at`, must not be `None`")

        self._end_at = end_at

    @property
    def full_name(self):
        """Gets the full_name of this BaseSerie.


        :return: The full_name of this BaseSerie.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this BaseSerie.


        :param full_name: The full_name of this BaseSerie.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def id(self):
        """Gets the id of this BaseSerie.


        :return: The id of this BaseSerie.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseSerie.


        :param id: The id of this BaseSerie.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and id < 1:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")

        self._id = id

    @property
    def league_id(self):
        """Gets the league_id of this BaseSerie.


        :return: The league_id of this BaseSerie.
        :rtype: int
        """
        return self._league_id

    @league_id.setter
    def league_id(self, league_id):
        """Sets the league_id of this BaseSerie.


        :param league_id: The league_id of this BaseSerie.
        :type league_id: int
        """
        if league_id is None:
            raise ValueError("Invalid value for `league_id`, must not be `None`")
        if league_id is not None and league_id < 1:
            raise ValueError("Invalid value for `league_id`, must be a value greater than or equal to `1`")

        self._league_id = league_id

    @property
    def modified_at(self):
        """Gets the modified_at of this BaseSerie.


        :return: The modified_at of this BaseSerie.
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this BaseSerie.


        :param modified_at: The modified_at of this BaseSerie.
        :type modified_at: datetime
        """
        if modified_at is None:
            raise ValueError("Invalid value for `modified_at`, must not be `None`")
        if modified_at is not None and len(modified_at) < 1:
            raise ValueError("Invalid value for `modified_at`, length must be greater than or equal to `1`")

        self._modified_at = modified_at

    @property
    def name(self):
        """Gets the name of this BaseSerie.


        :return: The name of this BaseSerie.
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BaseSerie.


        :param name: The name of this BaseSerie.
        :type name: object
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def season(self):
        """Gets the season of this BaseSerie.


        :return: The season of this BaseSerie.
        :rtype: object
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this BaseSerie.


        :param season: The season of this BaseSerie.
        :type season: object
        """
        if season is None:
            raise ValueError("Invalid value for `season`, must not be `None`")

        self._season = season

    @property
    def slug(self):
        """Gets the slug of this BaseSerie.


        :return: The slug of this BaseSerie.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this BaseSerie.


        :param slug: The slug of this BaseSerie.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[a-z0-9_-]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[a-z0-9_-]+$/`")

        self._slug = slug

    @property
    def tier(self):
        """Gets the tier of this BaseSerie.


        :return: The tier of this BaseSerie.
        :rtype: object
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this BaseSerie.


        :param tier: The tier of this BaseSerie.
        :type tier: object
        """
        if tier is None:
            raise ValueError("Invalid value for `tier`, must not be `None`")

        self._tier = tier

    @property
    def winner_id(self):
        """Gets the winner_id of this BaseSerie.


        :return: The winner_id of this BaseSerie.
        :rtype: OpponentID1
        """
        return self._winner_id

    @winner_id.setter
    def winner_id(self, winner_id):
        """Sets the winner_id of this BaseSerie.


        :param winner_id: The winner_id of this BaseSerie.
        :type winner_id: OpponentID1
        """
        if winner_id is None:
            raise ValueError("Invalid value for `winner_id`, must not be `None`")

        self._winner_id = winner_id

    @property
    def winner_type(self):
        """Gets the winner_type of this BaseSerie.


        :return: The winner_type of this BaseSerie.
        :rtype: object
        """
        return self._winner_type

    @winner_type.setter
    def winner_type(self, winner_type):
        """Sets the winner_type of this BaseSerie.


        :param winner_type: The winner_type of this BaseSerie.
        :type winner_type: object
        """
        if winner_type is None:
            raise ValueError("Invalid value for `winner_type`, must not be `None`")

        self._winner_type = winner_type

    @property
    def year(self):
        """Gets the year of this BaseSerie.


        :return: The year of this BaseSerie.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this BaseSerie.


        :param year: The year of this BaseSerie.
        :type year: int
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")
        if year is not None and year < 2012:
            raise ValueError("Invalid value for `year`, must be a value greater than or equal to `2012`")

        self._year = year
