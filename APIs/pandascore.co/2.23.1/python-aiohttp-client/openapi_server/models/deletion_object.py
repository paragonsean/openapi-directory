# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.incident_deletion_reason import IncidentDeletionReason
from openapi_server.models.videogame_id import VideogameID
from openapi_server import util


class DeletionObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deleted_at: datetime=None, reason: IncidentDeletionReason=None, videogame_id: VideogameID=None):
        """DeletionObject - a model defined in OpenAPI

        :param deleted_at: The deleted_at of this DeletionObject.
        :param reason: The reason of this DeletionObject.
        :param videogame_id: The videogame_id of this DeletionObject.
        """
        self.openapi_types = {
            'deleted_at': datetime,
            'reason': IncidentDeletionReason,
            'videogame_id': VideogameID
        }

        self.attribute_map = {
            'deleted_at': 'deleted_at',
            'reason': 'reason',
            'videogame_id': 'videogame_id'
        }

        self._deleted_at = deleted_at
        self._reason = reason
        self._videogame_id = videogame_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeletionObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeletionObject of this DeletionObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deleted_at(self):
        """Gets the deleted_at of this DeletionObject.


        :return: The deleted_at of this DeletionObject.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this DeletionObject.


        :param deleted_at: The deleted_at of this DeletionObject.
        :type deleted_at: datetime
        """
        if deleted_at is None:
            raise ValueError("Invalid value for `deleted_at`, must not be `None`")
        if deleted_at is not None and len(deleted_at) < 1:
            raise ValueError("Invalid value for `deleted_at`, length must be greater than or equal to `1`")

        self._deleted_at = deleted_at

    @property
    def reason(self):
        """Gets the reason of this DeletionObject.


        :return: The reason of this DeletionObject.
        :rtype: IncidentDeletionReason
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this DeletionObject.


        :param reason: The reason of this DeletionObject.
        :type reason: IncidentDeletionReason
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason

    @property
    def videogame_id(self):
        """Gets the videogame_id of this DeletionObject.


        :return: The videogame_id of this DeletionObject.
        :rtype: VideogameID
        """
        return self._videogame_id

    @videogame_id.setter
    def videogame_id(self, videogame_id):
        """Sets the videogame_id of this DeletionObject.


        :param videogame_id: The videogame_id of this DeletionObject.
        :type videogame_id: VideogameID
        """
        if videogame_id is None:
            raise ValueError("Invalid value for `videogame_id`, must not be `None`")

        self._videogame_id = videogame_id
