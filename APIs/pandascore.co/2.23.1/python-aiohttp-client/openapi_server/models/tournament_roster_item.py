# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_player import BasePlayer
from openapi_server.models.base_team import BaseTeam
from openapi_server import util


class TournamentRosterItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, players: List[BasePlayer]=None, team: BaseTeam=None):
        """TournamentRosterItem - a model defined in OpenAPI

        :param players: The players of this TournamentRosterItem.
        :param team: The team of this TournamentRosterItem.
        """
        self.openapi_types = {
            'players': List[BasePlayer],
            'team': BaseTeam
        }

        self.attribute_map = {
            'players': 'players',
            'team': 'team'
        }

        self._players = players
        self._team = team

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TournamentRosterItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TournamentRosterItem of this TournamentRosterItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def players(self):
        """Gets the players of this TournamentRosterItem.


        :return: The players of this TournamentRosterItem.
        :rtype: List[BasePlayer]
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this TournamentRosterItem.


        :param players: The players of this TournamentRosterItem.
        :type players: List[BasePlayer]
        """
        if players is None:
            raise ValueError("Invalid value for `players`, must not be `None`")

        self._players = players

    @property
    def team(self):
        """Gets the team of this TournamentRosterItem.


        :return: The team of this TournamentRosterItem.
        :rtype: BaseTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this TournamentRosterItem.


        :param team: The team of this TournamentRosterItem.
        :type team: BaseTeam
        """
        if team is None:
            raise ValueError("Invalid value for `team`, must not be `None`")

        self._team = team
