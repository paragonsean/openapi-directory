# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lo_l_team_color import LoLTeamColor
from openapi_server import util


class BettingLoLGameTeam(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, baron_kills: object=None, color: LoLTeamColor=None, dragon_kills: object=None, first_baron: object=None, first_blood: object=None, first_dragon: object=None, first_herald: object=None, first_inhibitor: object=None, first_tower: object=None, gold_earned: object=None, herald_kill: object=None, inhibitor_kills: object=None, team_id: int=None, team_kills: object=None, tower_kills: object=None):
        """BettingLoLGameTeam - a model defined in OpenAPI

        :param baron_kills: The baron_kills of this BettingLoLGameTeam.
        :param color: The color of this BettingLoLGameTeam.
        :param dragon_kills: The dragon_kills of this BettingLoLGameTeam.
        :param first_baron: The first_baron of this BettingLoLGameTeam.
        :param first_blood: The first_blood of this BettingLoLGameTeam.
        :param first_dragon: The first_dragon of this BettingLoLGameTeam.
        :param first_herald: The first_herald of this BettingLoLGameTeam.
        :param first_inhibitor: The first_inhibitor of this BettingLoLGameTeam.
        :param first_tower: The first_tower of this BettingLoLGameTeam.
        :param gold_earned: The gold_earned of this BettingLoLGameTeam.
        :param herald_kill: The herald_kill of this BettingLoLGameTeam.
        :param inhibitor_kills: The inhibitor_kills of this BettingLoLGameTeam.
        :param team_id: The team_id of this BettingLoLGameTeam.
        :param team_kills: The team_kills of this BettingLoLGameTeam.
        :param tower_kills: The tower_kills of this BettingLoLGameTeam.
        """
        self.openapi_types = {
            'baron_kills': object,
            'color': LoLTeamColor,
            'dragon_kills': object,
            'first_baron': object,
            'first_blood': object,
            'first_dragon': object,
            'first_herald': object,
            'first_inhibitor': object,
            'first_tower': object,
            'gold_earned': object,
            'herald_kill': object,
            'inhibitor_kills': object,
            'team_id': int,
            'team_kills': object,
            'tower_kills': object
        }

        self.attribute_map = {
            'baron_kills': 'baron_kills',
            'color': 'color',
            'dragon_kills': 'dragon_kills',
            'first_baron': 'first_baron',
            'first_blood': 'first_blood',
            'first_dragon': 'first_dragon',
            'first_herald': 'first_herald',
            'first_inhibitor': 'first_inhibitor',
            'first_tower': 'first_tower',
            'gold_earned': 'gold_earned',
            'herald_kill': 'herald_kill',
            'inhibitor_kills': 'inhibitor_kills',
            'team_id': 'team_id',
            'team_kills': 'team_kills',
            'tower_kills': 'tower_kills'
        }

        self._baron_kills = baron_kills
        self._color = color
        self._dragon_kills = dragon_kills
        self._first_baron = first_baron
        self._first_blood = first_blood
        self._first_dragon = first_dragon
        self._first_herald = first_herald
        self._first_inhibitor = first_inhibitor
        self._first_tower = first_tower
        self._gold_earned = gold_earned
        self._herald_kill = herald_kill
        self._inhibitor_kills = inhibitor_kills
        self._team_id = team_id
        self._team_kills = team_kills
        self._tower_kills = tower_kills

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BettingLoLGameTeam':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BettingLoLGameTeam of this BettingLoLGameTeam.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def baron_kills(self):
        """Gets the baron_kills of this BettingLoLGameTeam.


        :return: The baron_kills of this BettingLoLGameTeam.
        :rtype: object
        """
        return self._baron_kills

    @baron_kills.setter
    def baron_kills(self, baron_kills):
        """Sets the baron_kills of this BettingLoLGameTeam.


        :param baron_kills: The baron_kills of this BettingLoLGameTeam.
        :type baron_kills: object
        """
        if baron_kills is None:
            raise ValueError("Invalid value for `baron_kills`, must not be `None`")

        self._baron_kills = baron_kills

    @property
    def color(self):
        """Gets the color of this BettingLoLGameTeam.


        :return: The color of this BettingLoLGameTeam.
        :rtype: LoLTeamColor
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this BettingLoLGameTeam.


        :param color: The color of this BettingLoLGameTeam.
        :type color: LoLTeamColor
        """
        if color is None:
            raise ValueError("Invalid value for `color`, must not be `None`")

        self._color = color

    @property
    def dragon_kills(self):
        """Gets the dragon_kills of this BettingLoLGameTeam.


        :return: The dragon_kills of this BettingLoLGameTeam.
        :rtype: object
        """
        return self._dragon_kills

    @dragon_kills.setter
    def dragon_kills(self, dragon_kills):
        """Sets the dragon_kills of this BettingLoLGameTeam.


        :param dragon_kills: The dragon_kills of this BettingLoLGameTeam.
        :type dragon_kills: object
        """
        if dragon_kills is None:
            raise ValueError("Invalid value for `dragon_kills`, must not be `None`")

        self._dragon_kills = dragon_kills

    @property
    def first_baron(self):
        """Gets the first_baron of this BettingLoLGameTeam.


        :return: The first_baron of this BettingLoLGameTeam.
        :rtype: object
        """
        return self._first_baron

    @first_baron.setter
    def first_baron(self, first_baron):
        """Sets the first_baron of this BettingLoLGameTeam.


        :param first_baron: The first_baron of this BettingLoLGameTeam.
        :type first_baron: object
        """
        if first_baron is None:
            raise ValueError("Invalid value for `first_baron`, must not be `None`")

        self._first_baron = first_baron

    @property
    def first_blood(self):
        """Gets the first_blood of this BettingLoLGameTeam.


        :return: The first_blood of this BettingLoLGameTeam.
        :rtype: object
        """
        return self._first_blood

    @first_blood.setter
    def first_blood(self, first_blood):
        """Sets the first_blood of this BettingLoLGameTeam.


        :param first_blood: The first_blood of this BettingLoLGameTeam.
        :type first_blood: object
        """
        if first_blood is None:
            raise ValueError("Invalid value for `first_blood`, must not be `None`")

        self._first_blood = first_blood

    @property
    def first_dragon(self):
        """Gets the first_dragon of this BettingLoLGameTeam.


        :return: The first_dragon of this BettingLoLGameTeam.
        :rtype: object
        """
        return self._first_dragon

    @first_dragon.setter
    def first_dragon(self, first_dragon):
        """Sets the first_dragon of this BettingLoLGameTeam.


        :param first_dragon: The first_dragon of this BettingLoLGameTeam.
        :type first_dragon: object
        """
        if first_dragon is None:
            raise ValueError("Invalid value for `first_dragon`, must not be `None`")

        self._first_dragon = first_dragon

    @property
    def first_herald(self):
        """Gets the first_herald of this BettingLoLGameTeam.


        :return: The first_herald of this BettingLoLGameTeam.
        :rtype: object
        """
        return self._first_herald

    @first_herald.setter
    def first_herald(self, first_herald):
        """Sets the first_herald of this BettingLoLGameTeam.


        :param first_herald: The first_herald of this BettingLoLGameTeam.
        :type first_herald: object
        """
        if first_herald is None:
            raise ValueError("Invalid value for `first_herald`, must not be `None`")

        self._first_herald = first_herald

    @property
    def first_inhibitor(self):
        """Gets the first_inhibitor of this BettingLoLGameTeam.


        :return: The first_inhibitor of this BettingLoLGameTeam.
        :rtype: object
        """
        return self._first_inhibitor

    @first_inhibitor.setter
    def first_inhibitor(self, first_inhibitor):
        """Sets the first_inhibitor of this BettingLoLGameTeam.


        :param first_inhibitor: The first_inhibitor of this BettingLoLGameTeam.
        :type first_inhibitor: object
        """
        if first_inhibitor is None:
            raise ValueError("Invalid value for `first_inhibitor`, must not be `None`")

        self._first_inhibitor = first_inhibitor

    @property
    def first_tower(self):
        """Gets the first_tower of this BettingLoLGameTeam.


        :return: The first_tower of this BettingLoLGameTeam.
        :rtype: object
        """
        return self._first_tower

    @first_tower.setter
    def first_tower(self, first_tower):
        """Sets the first_tower of this BettingLoLGameTeam.


        :param first_tower: The first_tower of this BettingLoLGameTeam.
        :type first_tower: object
        """
        if first_tower is None:
            raise ValueError("Invalid value for `first_tower`, must not be `None`")

        self._first_tower = first_tower

    @property
    def gold_earned(self):
        """Gets the gold_earned of this BettingLoLGameTeam.


        :return: The gold_earned of this BettingLoLGameTeam.
        :rtype: object
        """
        return self._gold_earned

    @gold_earned.setter
    def gold_earned(self, gold_earned):
        """Sets the gold_earned of this BettingLoLGameTeam.


        :param gold_earned: The gold_earned of this BettingLoLGameTeam.
        :type gold_earned: object
        """
        if gold_earned is None:
            raise ValueError("Invalid value for `gold_earned`, must not be `None`")

        self._gold_earned = gold_earned

    @property
    def herald_kill(self):
        """Gets the herald_kill of this BettingLoLGameTeam.


        :return: The herald_kill of this BettingLoLGameTeam.
        :rtype: object
        """
        return self._herald_kill

    @herald_kill.setter
    def herald_kill(self, herald_kill):
        """Sets the herald_kill of this BettingLoLGameTeam.


        :param herald_kill: The herald_kill of this BettingLoLGameTeam.
        :type herald_kill: object
        """
        if herald_kill is None:
            raise ValueError("Invalid value for `herald_kill`, must not be `None`")

        self._herald_kill = herald_kill

    @property
    def inhibitor_kills(self):
        """Gets the inhibitor_kills of this BettingLoLGameTeam.


        :return: The inhibitor_kills of this BettingLoLGameTeam.
        :rtype: object
        """
        return self._inhibitor_kills

    @inhibitor_kills.setter
    def inhibitor_kills(self, inhibitor_kills):
        """Sets the inhibitor_kills of this BettingLoLGameTeam.


        :param inhibitor_kills: The inhibitor_kills of this BettingLoLGameTeam.
        :type inhibitor_kills: object
        """
        if inhibitor_kills is None:
            raise ValueError("Invalid value for `inhibitor_kills`, must not be `None`")

        self._inhibitor_kills = inhibitor_kills

    @property
    def team_id(self):
        """Gets the team_id of this BettingLoLGameTeam.


        :return: The team_id of this BettingLoLGameTeam.
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this BettingLoLGameTeam.


        :param team_id: The team_id of this BettingLoLGameTeam.
        :type team_id: int
        """
        if team_id is None:
            raise ValueError("Invalid value for `team_id`, must not be `None`")
        if team_id is not None and team_id < 1:
            raise ValueError("Invalid value for `team_id`, must be a value greater than or equal to `1`")

        self._team_id = team_id

    @property
    def team_kills(self):
        """Gets the team_kills of this BettingLoLGameTeam.


        :return: The team_kills of this BettingLoLGameTeam.
        :rtype: object
        """
        return self._team_kills

    @team_kills.setter
    def team_kills(self, team_kills):
        """Sets the team_kills of this BettingLoLGameTeam.


        :param team_kills: The team_kills of this BettingLoLGameTeam.
        :type team_kills: object
        """
        if team_kills is None:
            raise ValueError("Invalid value for `team_kills`, must not be `None`")

        self._team_kills = team_kills

    @property
    def tower_kills(self):
        """Gets the tower_kills of this BettingLoLGameTeam.


        :return: The tower_kills of this BettingLoLGameTeam.
        :rtype: object
        """
        return self._tower_kills

    @tower_kills.setter
    def tower_kills(self, tower_kills):
        """Sets the tower_kills of this BettingLoLGameTeam.


        :param tower_kills: The tower_kills of this BettingLoLGameTeam.
        :type tower_kills: object
        """
        if tower_kills is None:
            raise ValueError("Invalid value for `tower_kills`, must not be `None`")

        self._tower_kills = tower_kills
