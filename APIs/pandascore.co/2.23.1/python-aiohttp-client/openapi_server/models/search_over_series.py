# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.opponent_type import OpponentType
import re
from openapi_server import util


class SearchOverSeries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, season: str=None, slug: str=None, tier: str=None, winner_type: OpponentType=None):
        """SearchOverSeries - a model defined in OpenAPI

        :param description: The description of this SearchOverSeries.
        :param name: The name of this SearchOverSeries.
        :param season: The season of this SearchOverSeries.
        :param slug: The slug of this SearchOverSeries.
        :param tier: The tier of this SearchOverSeries.
        :param winner_type: The winner_type of this SearchOverSeries.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'season': str,
            'slug': str,
            'tier': str,
            'winner_type': OpponentType
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'season': 'season',
            'slug': 'slug',
            'tier': 'tier',
            'winner_type': 'winner_type'
        }

        self._description = description
        self._name = name
        self._season = season
        self._slug = slug
        self._tier = tier
        self._winner_type = winner_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchOverSeries':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The search_over_Series of this SearchOverSeries.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this SearchOverSeries.


        :return: The description of this SearchOverSeries.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SearchOverSeries.


        :param description: The description of this SearchOverSeries.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this SearchOverSeries.


        :return: The name of this SearchOverSeries.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchOverSeries.


        :param name: The name of this SearchOverSeries.
        :type name: str
        """

        self._name = name

    @property
    def season(self):
        """Gets the season of this SearchOverSeries.


        :return: The season of this SearchOverSeries.
        :rtype: str
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this SearchOverSeries.


        :param season: The season of this SearchOverSeries.
        :type season: str
        """

        self._season = season

    @property
    def slug(self):
        """Gets the slug of this SearchOverSeries.


        :return: The slug of this SearchOverSeries.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this SearchOverSeries.


        :param slug: The slug of this SearchOverSeries.
        :type slug: str
        """
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[a-z0-9_-]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[a-z0-9_-]+$/`")

        self._slug = slug

    @property
    def tier(self):
        """Gets the tier of this SearchOverSeries.


        :return: The tier of this SearchOverSeries.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this SearchOverSeries.


        :param tier: The tier of this SearchOverSeries.
        :type tier: str
        """

        self._tier = tier

    @property
    def winner_type(self):
        """Gets the winner_type of this SearchOverSeries.


        :return: The winner_type of this SearchOverSeries.
        :rtype: OpponentType
        """
        return self._winner_type

    @winner_type.setter
    def winner_type(self, winner_type):
        """Sets the winner_type of this SearchOverSeries.


        :param winner_type: The winner_type of this SearchOverSeries.
        :type winner_type: OpponentType
        """

        self._winner_type = winner_type
