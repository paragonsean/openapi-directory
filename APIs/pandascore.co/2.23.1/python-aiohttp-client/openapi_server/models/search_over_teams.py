# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SearchOverTeams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acronym: str=None, location: str=None, name: str=None, slug: str=None):
        """SearchOverTeams - a model defined in OpenAPI

        :param acronym: The acronym of this SearchOverTeams.
        :param location: The location of this SearchOverTeams.
        :param name: The name of this SearchOverTeams.
        :param slug: The slug of this SearchOverTeams.
        """
        self.openapi_types = {
            'acronym': str,
            'location': str,
            'name': str,
            'slug': str
        }

        self.attribute_map = {
            'acronym': 'acronym',
            'location': 'location',
            'name': 'name',
            'slug': 'slug'
        }

        self._acronym = acronym
        self._location = location
        self._name = name
        self._slug = slug

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchOverTeams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The search_over_Teams of this SearchOverTeams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acronym(self):
        """Gets the acronym of this SearchOverTeams.


        :return: The acronym of this SearchOverTeams.
        :rtype: str
        """
        return self._acronym

    @acronym.setter
    def acronym(self, acronym):
        """Sets the acronym of this SearchOverTeams.


        :param acronym: The acronym of this SearchOverTeams.
        :type acronym: str
        """

        self._acronym = acronym

    @property
    def location(self):
        """Gets the location of this SearchOverTeams.

        The team's organization location

        :return: The location of this SearchOverTeams.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SearchOverTeams.

        The team's organization location

        :param location: The location of this SearchOverTeams.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this SearchOverTeams.


        :return: The name of this SearchOverTeams.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchOverTeams.


        :param name: The name of this SearchOverTeams.
        :type name: str
        """

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this SearchOverTeams.


        :return: The slug of this SearchOverTeams.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this SearchOverTeams.


        :param slug: The slug of this SearchOverTeams.
        :type slug: str
        """
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[a-z0-9_-]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[a-z0-9_-]+$/`")

        self._slug = slug
