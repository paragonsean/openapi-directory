/**
 * APIs.guru
 * Wikipedia for Web APIs. Repository of API definitions in OpenAPI format. **Warning**: If you want to be notified about changes in advance please join our [Slack channel](https://join.slack.com/t/mermade/shared_invite/zt-g78g7xir-MLE_CTCcXCdfJfG3CJe9qA). Client sample: [[Demo]](https://apis.guru/simple-ui) [[Repo]](https://github.com/APIs-guru/simple-ui) 
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetrics::OAIMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetrics::OAIMetrics() {
    this->initializeModel();
}

OAIMetrics::~OAIMetrics() {}

void OAIMetrics::initializeModel() {

    m_datasets_isSet = false;
    m_datasets_isValid = false;

    m_fixed_pct_isSet = false;
    m_fixed_pct_isValid = false;

    m_fixes_isSet = false;
    m_fixes_isValid = false;

    m_invalid_isSet = false;
    m_invalid_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_num_apis_isSet = false;
    m_num_apis_isValid = false;

    m_num_drivers_isSet = false;
    m_num_drivers_isValid = false;

    m_num_endpoints_isSet = false;
    m_num_endpoints_isValid = false;

    m_num_providers_isSet = false;
    m_num_providers_isValid = false;

    m_num_specs_isSet = false;
    m_num_specs_isValid = false;

    m_stars_isSet = false;
    m_stars_isValid = false;

    m_this_week_isSet = false;
    m_this_week_isValid = false;

    m_unofficial_isSet = false;
    m_unofficial_isValid = false;

    m_unreachable_isSet = false;
    m_unreachable_isValid = false;
}

void OAIMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetrics::fromJsonObject(QJsonObject json) {

    m_datasets_isValid = ::OpenAPI::fromJsonValue(m_datasets, json[QString("datasets")]);
    m_datasets_isSet = !json[QString("datasets")].isNull() && m_datasets_isValid;

    m_fixed_pct_isValid = ::OpenAPI::fromJsonValue(m_fixed_pct, json[QString("fixedPct")]);
    m_fixed_pct_isSet = !json[QString("fixedPct")].isNull() && m_fixed_pct_isValid;

    m_fixes_isValid = ::OpenAPI::fromJsonValue(m_fixes, json[QString("fixes")]);
    m_fixes_isSet = !json[QString("fixes")].isNull() && m_fixes_isValid;

    m_invalid_isValid = ::OpenAPI::fromJsonValue(m_invalid, json[QString("invalid")]);
    m_invalid_isSet = !json[QString("invalid")].isNull() && m_invalid_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_num_apis_isValid = ::OpenAPI::fromJsonValue(m_num_apis, json[QString("numAPIs")]);
    m_num_apis_isSet = !json[QString("numAPIs")].isNull() && m_num_apis_isValid;

    m_num_drivers_isValid = ::OpenAPI::fromJsonValue(m_num_drivers, json[QString("numDrivers")]);
    m_num_drivers_isSet = !json[QString("numDrivers")].isNull() && m_num_drivers_isValid;

    m_num_endpoints_isValid = ::OpenAPI::fromJsonValue(m_num_endpoints, json[QString("numEndpoints")]);
    m_num_endpoints_isSet = !json[QString("numEndpoints")].isNull() && m_num_endpoints_isValid;

    m_num_providers_isValid = ::OpenAPI::fromJsonValue(m_num_providers, json[QString("numProviders")]);
    m_num_providers_isSet = !json[QString("numProviders")].isNull() && m_num_providers_isValid;

    m_num_specs_isValid = ::OpenAPI::fromJsonValue(m_num_specs, json[QString("numSpecs")]);
    m_num_specs_isSet = !json[QString("numSpecs")].isNull() && m_num_specs_isValid;

    m_stars_isValid = ::OpenAPI::fromJsonValue(m_stars, json[QString("stars")]);
    m_stars_isSet = !json[QString("stars")].isNull() && m_stars_isValid;

    m_this_week_isValid = ::OpenAPI::fromJsonValue(m_this_week, json[QString("thisWeek")]);
    m_this_week_isSet = !json[QString("thisWeek")].isNull() && m_this_week_isValid;

    m_unofficial_isValid = ::OpenAPI::fromJsonValue(m_unofficial, json[QString("unofficial")]);
    m_unofficial_isSet = !json[QString("unofficial")].isNull() && m_unofficial_isValid;

    m_unreachable_isValid = ::OpenAPI::fromJsonValue(m_unreachable, json[QString("unreachable")]);
    m_unreachable_isSet = !json[QString("unreachable")].isNull() && m_unreachable_isValid;
}

QString OAIMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_datasets.size() > 0) {
        obj.insert(QString("datasets"), ::OpenAPI::toJsonValue(m_datasets));
    }
    if (m_fixed_pct_isSet) {
        obj.insert(QString("fixedPct"), ::OpenAPI::toJsonValue(m_fixed_pct));
    }
    if (m_fixes_isSet) {
        obj.insert(QString("fixes"), ::OpenAPI::toJsonValue(m_fixes));
    }
    if (m_invalid_isSet) {
        obj.insert(QString("invalid"), ::OpenAPI::toJsonValue(m_invalid));
    }
    if (m_issues_isSet) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_num_apis_isSet) {
        obj.insert(QString("numAPIs"), ::OpenAPI::toJsonValue(m_num_apis));
    }
    if (m_num_drivers_isSet) {
        obj.insert(QString("numDrivers"), ::OpenAPI::toJsonValue(m_num_drivers));
    }
    if (m_num_endpoints_isSet) {
        obj.insert(QString("numEndpoints"), ::OpenAPI::toJsonValue(m_num_endpoints));
    }
    if (m_num_providers_isSet) {
        obj.insert(QString("numProviders"), ::OpenAPI::toJsonValue(m_num_providers));
    }
    if (m_num_specs_isSet) {
        obj.insert(QString("numSpecs"), ::OpenAPI::toJsonValue(m_num_specs));
    }
    if (m_stars_isSet) {
        obj.insert(QString("stars"), ::OpenAPI::toJsonValue(m_stars));
    }
    if (m_this_week.isSet()) {
        obj.insert(QString("thisWeek"), ::OpenAPI::toJsonValue(m_this_week));
    }
    if (m_unofficial_isSet) {
        obj.insert(QString("unofficial"), ::OpenAPI::toJsonValue(m_unofficial));
    }
    if (m_unreachable_isSet) {
        obj.insert(QString("unreachable"), ::OpenAPI::toJsonValue(m_unreachable));
    }
    return obj;
}

QList<QJsonValue> OAIMetrics::getDatasets() const {
    return m_datasets;
}
void OAIMetrics::setDatasets(const QList<QJsonValue> &datasets) {
    m_datasets = datasets;
    m_datasets_isSet = true;
}

bool OAIMetrics::is_datasets_Set() const{
    return m_datasets_isSet;
}

bool OAIMetrics::is_datasets_Valid() const{
    return m_datasets_isValid;
}

qint32 OAIMetrics::getFixedPct() const {
    return m_fixed_pct;
}
void OAIMetrics::setFixedPct(const qint32 &fixed_pct) {
    m_fixed_pct = fixed_pct;
    m_fixed_pct_isSet = true;
}

bool OAIMetrics::is_fixed_pct_Set() const{
    return m_fixed_pct_isSet;
}

bool OAIMetrics::is_fixed_pct_Valid() const{
    return m_fixed_pct_isValid;
}

qint32 OAIMetrics::getFixes() const {
    return m_fixes;
}
void OAIMetrics::setFixes(const qint32 &fixes) {
    m_fixes = fixes;
    m_fixes_isSet = true;
}

bool OAIMetrics::is_fixes_Set() const{
    return m_fixes_isSet;
}

bool OAIMetrics::is_fixes_Valid() const{
    return m_fixes_isValid;
}

qint32 OAIMetrics::getInvalid() const {
    return m_invalid;
}
void OAIMetrics::setInvalid(const qint32 &invalid) {
    m_invalid = invalid;
    m_invalid_isSet = true;
}

bool OAIMetrics::is_invalid_Set() const{
    return m_invalid_isSet;
}

bool OAIMetrics::is_invalid_Valid() const{
    return m_invalid_isValid;
}

qint32 OAIMetrics::getIssues() const {
    return m_issues;
}
void OAIMetrics::setIssues(const qint32 &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAIMetrics::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAIMetrics::is_issues_Valid() const{
    return m_issues_isValid;
}

qint32 OAIMetrics::getNumApis() const {
    return m_num_apis;
}
void OAIMetrics::setNumApis(const qint32 &num_apis) {
    m_num_apis = num_apis;
    m_num_apis_isSet = true;
}

bool OAIMetrics::is_num_apis_Set() const{
    return m_num_apis_isSet;
}

bool OAIMetrics::is_num_apis_Valid() const{
    return m_num_apis_isValid;
}

qint32 OAIMetrics::getNumDrivers() const {
    return m_num_drivers;
}
void OAIMetrics::setNumDrivers(const qint32 &num_drivers) {
    m_num_drivers = num_drivers;
    m_num_drivers_isSet = true;
}

bool OAIMetrics::is_num_drivers_Set() const{
    return m_num_drivers_isSet;
}

bool OAIMetrics::is_num_drivers_Valid() const{
    return m_num_drivers_isValid;
}

qint32 OAIMetrics::getNumEndpoints() const {
    return m_num_endpoints;
}
void OAIMetrics::setNumEndpoints(const qint32 &num_endpoints) {
    m_num_endpoints = num_endpoints;
    m_num_endpoints_isSet = true;
}

bool OAIMetrics::is_num_endpoints_Set() const{
    return m_num_endpoints_isSet;
}

bool OAIMetrics::is_num_endpoints_Valid() const{
    return m_num_endpoints_isValid;
}

qint32 OAIMetrics::getNumProviders() const {
    return m_num_providers;
}
void OAIMetrics::setNumProviders(const qint32 &num_providers) {
    m_num_providers = num_providers;
    m_num_providers_isSet = true;
}

bool OAIMetrics::is_num_providers_Set() const{
    return m_num_providers_isSet;
}

bool OAIMetrics::is_num_providers_Valid() const{
    return m_num_providers_isValid;
}

qint32 OAIMetrics::getNumSpecs() const {
    return m_num_specs;
}
void OAIMetrics::setNumSpecs(const qint32 &num_specs) {
    m_num_specs = num_specs;
    m_num_specs_isSet = true;
}

bool OAIMetrics::is_num_specs_Set() const{
    return m_num_specs_isSet;
}

bool OAIMetrics::is_num_specs_Valid() const{
    return m_num_specs_isValid;
}

qint32 OAIMetrics::getStars() const {
    return m_stars;
}
void OAIMetrics::setStars(const qint32 &stars) {
    m_stars = stars;
    m_stars_isSet = true;
}

bool OAIMetrics::is_stars_Set() const{
    return m_stars_isSet;
}

bool OAIMetrics::is_stars_Valid() const{
    return m_stars_isValid;
}

OAIMetrics_thisWeek OAIMetrics::getThisWeek() const {
    return m_this_week;
}
void OAIMetrics::setThisWeek(const OAIMetrics_thisWeek &this_week) {
    m_this_week = this_week;
    m_this_week_isSet = true;
}

bool OAIMetrics::is_this_week_Set() const{
    return m_this_week_isSet;
}

bool OAIMetrics::is_this_week_Valid() const{
    return m_this_week_isValid;
}

qint32 OAIMetrics::getUnofficial() const {
    return m_unofficial;
}
void OAIMetrics::setUnofficial(const qint32 &unofficial) {
    m_unofficial = unofficial;
    m_unofficial_isSet = true;
}

bool OAIMetrics::is_unofficial_Set() const{
    return m_unofficial_isSet;
}

bool OAIMetrics::is_unofficial_Valid() const{
    return m_unofficial_isValid;
}

qint32 OAIMetrics::getUnreachable() const {
    return m_unreachable;
}
void OAIMetrics::setUnreachable(const qint32 &unreachable) {
    m_unreachable = unreachable;
    m_unreachable_isSet = true;
}

bool OAIMetrics::is_unreachable_Set() const{
    return m_unreachable_isSet;
}

bool OAIMetrics::is_unreachable_Valid() const{
    return m_unreachable_isValid;
}

bool OAIMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_datasets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_pct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_apis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_drivers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_endpoints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_providers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_specs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stars_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_this_week.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unofficial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unreachable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_num_apis_isValid && m_num_endpoints_isValid && m_num_specs_isValid && true;
}

} // namespace OpenAPI
