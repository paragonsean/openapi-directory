/**
 * APIs.guru
 * Wikipedia for Web APIs. Repository of API definitions in OpenAPI format. **Warning**: If you want to be notified about changes in advance please join our [Slack channel](https://join.slack.com/t/mermade/shared_invite/zt-g78g7xir-MLE_CTCcXCdfJfG3CJe9qA). Client sample: [[Demo]](https://apis.guru/simple-ui) [[Repo]](https://github.com/APIs-guru/simple-ui) 
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiVersion::OAIApiVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiVersion::OAIApiVersion() {
    this->initializeModel();
}

OAIApiVersion::~OAIApiVersion() {}

void OAIApiVersion::initializeModel() {

    m_added_isSet = false;
    m_added_isValid = false;

    m_external_docs_isSet = false;
    m_external_docs_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_openapi_ver_isSet = false;
    m_openapi_ver_isValid = false;

    m_swagger_url_isSet = false;
    m_swagger_url_isValid = false;

    m_swagger_yaml_url_isSet = false;
    m_swagger_yaml_url_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIApiVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiVersion::fromJsonObject(QJsonObject json) {

    m_added_isValid = ::OpenAPI::fromJsonValue(m_added, json[QString("added")]);
    m_added_isSet = !json[QString("added")].isNull() && m_added_isValid;

    m_external_docs_isValid = ::OpenAPI::fromJsonValue(m_external_docs, json[QString("externalDocs")]);
    m_external_docs_isSet = !json[QString("externalDocs")].isNull() && m_external_docs_isValid;

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_openapi_ver_isValid = ::OpenAPI::fromJsonValue(m_openapi_ver, json[QString("openapiVer")]);
    m_openapi_ver_isSet = !json[QString("openapiVer")].isNull() && m_openapi_ver_isValid;

    m_swagger_url_isValid = ::OpenAPI::fromJsonValue(m_swagger_url, json[QString("swaggerUrl")]);
    m_swagger_url_isSet = !json[QString("swaggerUrl")].isNull() && m_swagger_url_isValid;

    m_swagger_yaml_url_isValid = ::OpenAPI::fromJsonValue(m_swagger_yaml_url, json[QString("swaggerYamlUrl")]);
    m_swagger_yaml_url_isSet = !json[QString("swaggerYamlUrl")].isNull() && m_swagger_yaml_url_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAIApiVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_added_isSet) {
        obj.insert(QString("added"), ::OpenAPI::toJsonValue(m_added));
    }
    if (m_external_docs_isSet) {
        obj.insert(QString("externalDocs"), ::OpenAPI::toJsonValue(m_external_docs));
    }
    if (m_info_isSet) {
        obj.insert(QString("info"), ::OpenAPI::toJsonValue(m_info));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_openapi_ver_isSet) {
        obj.insert(QString("openapiVer"), ::OpenAPI::toJsonValue(m_openapi_ver));
    }
    if (m_swagger_url_isSet) {
        obj.insert(QString("swaggerUrl"), ::OpenAPI::toJsonValue(m_swagger_url));
    }
    if (m_swagger_yaml_url_isSet) {
        obj.insert(QString("swaggerYamlUrl"), ::OpenAPI::toJsonValue(m_swagger_yaml_url));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

QDateTime OAIApiVersion::getAdded() const {
    return m_added;
}
void OAIApiVersion::setAdded(const QDateTime &added) {
    m_added = added;
    m_added_isSet = true;
}

bool OAIApiVersion::is_added_Set() const{
    return m_added_isSet;
}

bool OAIApiVersion::is_added_Valid() const{
    return m_added_isValid;
}

OAIObject OAIApiVersion::getExternalDocs() const {
    return m_external_docs;
}
void OAIApiVersion::setExternalDocs(const OAIObject &external_docs) {
    m_external_docs = external_docs;
    m_external_docs_isSet = true;
}

bool OAIApiVersion::is_external_docs_Set() const{
    return m_external_docs_isSet;
}

bool OAIApiVersion::is_external_docs_Valid() const{
    return m_external_docs_isValid;
}

OAIObject OAIApiVersion::getInfo() const {
    return m_info;
}
void OAIApiVersion::setInfo(const OAIObject &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAIApiVersion::is_info_Set() const{
    return m_info_isSet;
}

bool OAIApiVersion::is_info_Valid() const{
    return m_info_isValid;
}

QString OAIApiVersion::getLink() const {
    return m_link;
}
void OAIApiVersion::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIApiVersion::is_link_Set() const{
    return m_link_isSet;
}

bool OAIApiVersion::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIApiVersion::getOpenapiVer() const {
    return m_openapi_ver;
}
void OAIApiVersion::setOpenapiVer(const QString &openapi_ver) {
    m_openapi_ver = openapi_ver;
    m_openapi_ver_isSet = true;
}

bool OAIApiVersion::is_openapi_ver_Set() const{
    return m_openapi_ver_isSet;
}

bool OAIApiVersion::is_openapi_ver_Valid() const{
    return m_openapi_ver_isValid;
}

QString OAIApiVersion::getSwaggerUrl() const {
    return m_swagger_url;
}
void OAIApiVersion::setSwaggerUrl(const QString &swagger_url) {
    m_swagger_url = swagger_url;
    m_swagger_url_isSet = true;
}

bool OAIApiVersion::is_swagger_url_Set() const{
    return m_swagger_url_isSet;
}

bool OAIApiVersion::is_swagger_url_Valid() const{
    return m_swagger_url_isValid;
}

QString OAIApiVersion::getSwaggerYamlUrl() const {
    return m_swagger_yaml_url;
}
void OAIApiVersion::setSwaggerYamlUrl(const QString &swagger_yaml_url) {
    m_swagger_yaml_url = swagger_yaml_url;
    m_swagger_yaml_url_isSet = true;
}

bool OAIApiVersion::is_swagger_yaml_url_Set() const{
    return m_swagger_yaml_url_isSet;
}

bool OAIApiVersion::is_swagger_yaml_url_Valid() const{
    return m_swagger_yaml_url_isValid;
}

QDateTime OAIApiVersion::getUpdated() const {
    return m_updated;
}
void OAIApiVersion::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIApiVersion::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIApiVersion::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIApiVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_docs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_openapi_ver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_swagger_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_swagger_yaml_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_added_isValid && m_info_isValid && m_openapi_ver_isValid && m_swagger_url_isValid && m_swagger_yaml_url_isValid && m_updated_isValid && true;
}

} // namespace OpenAPI
