/**
 * APIs.guru
 * Wikipedia for Web APIs. Repository of API definitions in OpenAPI format. **Warning**: If you want to be notified about changes in advance please join our [Slack channel](https://join.slack.com/t/mermade/shared_invite/zt-g78g7xir-MLE_CTCcXCdfJfG3CJe9qA). Client sample: [[Demo]](https://apis.guru/simple-ui) [[Repo]](https://github.com/APIs-guru/simple-ui) 
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAPIsApi_H
#define OAI_OAIAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI.h"
#include "OAIGetProviders_200_response.h"
#include "OAIGetServices_200_response.h"
#include "OAIMetrics.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAPIsApi : public QObject {
    Q_OBJECT

public:
    OAIAPIsApi(const int timeOut = 0);
    ~OAIAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  provider QString [required]
    * @param[in]  api QString [required]
    */
    virtual void getAPI(const QString &provider, const QString &api);


    virtual void getMetrics();

    /**
    * @param[in]  provider QString [required]
    */
    virtual void getProvider(const QString &provider);


    virtual void getProviders();

    /**
    * @param[in]  provider QString [required]
    * @param[in]  service QString [required]
    * @param[in]  api QString [required]
    */
    virtual void getServiceAPI(const QString &provider, const QString &service, const QString &api);

    /**
    * @param[in]  provider QString [required]
    */
    virtual void getServices(const QString &provider);


    virtual void listAPIs();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAPICallback(OAIHttpRequestWorker *worker);
    void getMetricsCallback(OAIHttpRequestWorker *worker);
    void getProviderCallback(OAIHttpRequestWorker *worker);
    void getProvidersCallback(OAIHttpRequestWorker *worker);
    void getServiceAPICallback(OAIHttpRequestWorker *worker);
    void getServicesCallback(OAIHttpRequestWorker *worker);
    void listAPIsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAPISignal(OAIAPI summary);
    void getMetricsSignal(OAIMetrics summary);
    void getProviderSignal(QMap<QString, OAIAPI> summary);
    void getProvidersSignal(OAIGetProviders_200_response summary);
    void getServiceAPISignal(OAIAPI summary);
    void getServicesSignal(OAIGetServices_200_response summary);
    void listAPIsSignal(QMap<QString, OAIAPI> summary);


    void getAPISignalFull(OAIHttpRequestWorker *worker, OAIAPI summary);
    void getMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetrics summary);
    void getProviderSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIAPI> summary);
    void getProvidersSignalFull(OAIHttpRequestWorker *worker, OAIGetProviders_200_response summary);
    void getServiceAPISignalFull(OAIHttpRequestWorker *worker, OAIAPI summary);
    void getServicesSignalFull(OAIHttpRequestWorker *worker, OAIGetServices_200_response summary);
    void listAPIsSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIAPI> summary);

    Q_DECL_DEPRECATED_X("Use getAPISignalError() instead")
    void getAPISignalE(OAIAPI summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAPISignalError(OAIAPI summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMetricsSignalError() instead")
    void getMetricsSignalE(OAIMetrics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMetricsSignalError(OAIMetrics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProviderSignalError() instead")
    void getProviderSignalE(QMap<QString, OAIAPI> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProviderSignalError(QMap<QString, OAIAPI> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProvidersSignalError() instead")
    void getProvidersSignalE(OAIGetProviders_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProvidersSignalError(OAIGetProviders_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceAPISignalError() instead")
    void getServiceAPISignalE(OAIAPI summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceAPISignalError(OAIAPI summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServicesSignalError() instead")
    void getServicesSignalE(OAIGetServices_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServicesSignalError(OAIGetServices_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAPIsSignalError() instead")
    void listAPIsSignalE(QMap<QString, OAIAPI> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAPIsSignalError(QMap<QString, OAIAPI> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAPISignalErrorFull() instead")
    void getAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMetricsSignalErrorFull() instead")
    void getMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProviderSignalErrorFull() instead")
    void getProviderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProviderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProvidersSignalErrorFull() instead")
    void getProvidersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProvidersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceAPISignalErrorFull() instead")
    void getServiceAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServicesSignalErrorFull() instead")
    void getServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAPIsSignalErrorFull() instead")
    void listAPIsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAPIsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
