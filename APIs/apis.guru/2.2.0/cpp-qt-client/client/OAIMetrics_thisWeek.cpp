/**
 * APIs.guru
 * Wikipedia for Web APIs. Repository of API definitions in OpenAPI format. **Warning**: If you want to be notified about changes in advance please join our [Slack channel](https://join.slack.com/t/mermade/shared_invite/zt-g78g7xir-MLE_CTCcXCdfJfG3CJe9qA). Client sample: [[Demo]](https://apis.guru/simple-ui) [[Repo]](https://github.com/APIs-guru/simple-ui) 
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetrics_thisWeek.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetrics_thisWeek::OAIMetrics_thisWeek(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetrics_thisWeek::OAIMetrics_thisWeek() {
    this->initializeModel();
}

OAIMetrics_thisWeek::~OAIMetrics_thisWeek() {}

void OAIMetrics_thisWeek::initializeModel() {

    m_added_isSet = false;
    m_added_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIMetrics_thisWeek::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetrics_thisWeek::fromJsonObject(QJsonObject json) {

    m_added_isValid = ::OpenAPI::fromJsonValue(m_added, json[QString("added")]);
    m_added_isSet = !json[QString("added")].isNull() && m_added_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAIMetrics_thisWeek::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetrics_thisWeek::asJsonObject() const {
    QJsonObject obj;
    if (m_added_isSet) {
        obj.insert(QString("added"), ::OpenAPI::toJsonValue(m_added));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

qint32 OAIMetrics_thisWeek::getAdded() const {
    return m_added;
}
void OAIMetrics_thisWeek::setAdded(const qint32 &added) {
    m_added = added;
    m_added_isSet = true;
}

bool OAIMetrics_thisWeek::is_added_Set() const{
    return m_added_isSet;
}

bool OAIMetrics_thisWeek::is_added_Valid() const{
    return m_added_isValid;
}

qint32 OAIMetrics_thisWeek::getUpdated() const {
    return m_updated;
}
void OAIMetrics_thisWeek::setUpdated(const qint32 &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIMetrics_thisWeek::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIMetrics_thisWeek::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIMetrics_thisWeek::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetrics_thisWeek::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
