# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metrics_this_week import MetricsThisWeek
from openapi_server import util


class Metrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datasets: List[object]=None, fixed_pct: int=None, fixes: int=None, invalid: int=None, issues: int=None, num_apis: int=None, num_drivers: int=None, num_endpoints: int=None, num_providers: int=None, num_specs: int=None, stars: int=None, this_week: MetricsThisWeek=None, unofficial: int=None, unreachable: int=None):
        """Metrics - a model defined in OpenAPI

        :param datasets: The datasets of this Metrics.
        :param fixed_pct: The fixed_pct of this Metrics.
        :param fixes: The fixes of this Metrics.
        :param invalid: The invalid of this Metrics.
        :param issues: The issues of this Metrics.
        :param num_apis: The num_apis of this Metrics.
        :param num_drivers: The num_drivers of this Metrics.
        :param num_endpoints: The num_endpoints of this Metrics.
        :param num_providers: The num_providers of this Metrics.
        :param num_specs: The num_specs of this Metrics.
        :param stars: The stars of this Metrics.
        :param this_week: The this_week of this Metrics.
        :param unofficial: The unofficial of this Metrics.
        :param unreachable: The unreachable of this Metrics.
        """
        self.openapi_types = {
            'datasets': List[object],
            'fixed_pct': int,
            'fixes': int,
            'invalid': int,
            'issues': int,
            'num_apis': int,
            'num_drivers': int,
            'num_endpoints': int,
            'num_providers': int,
            'num_specs': int,
            'stars': int,
            'this_week': MetricsThisWeek,
            'unofficial': int,
            'unreachable': int
        }

        self.attribute_map = {
            'datasets': 'datasets',
            'fixed_pct': 'fixedPct',
            'fixes': 'fixes',
            'invalid': 'invalid',
            'issues': 'issues',
            'num_apis': 'numAPIs',
            'num_drivers': 'numDrivers',
            'num_endpoints': 'numEndpoints',
            'num_providers': 'numProviders',
            'num_specs': 'numSpecs',
            'stars': 'stars',
            'this_week': 'thisWeek',
            'unofficial': 'unofficial',
            'unreachable': 'unreachable'
        }

        self._datasets = datasets
        self._fixed_pct = fixed_pct
        self._fixes = fixes
        self._invalid = invalid
        self._issues = issues
        self._num_apis = num_apis
        self._num_drivers = num_drivers
        self._num_endpoints = num_endpoints
        self._num_providers = num_providers
        self._num_specs = num_specs
        self._stars = stars
        self._this_week = this_week
        self._unofficial = unofficial
        self._unreachable = unreachable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metrics of this Metrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datasets(self):
        """Gets the datasets of this Metrics.

        Data used for charting etc

        :return: The datasets of this Metrics.
        :rtype: List[object]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this Metrics.

        Data used for charting etc

        :param datasets: The datasets of this Metrics.
        :type datasets: List[object]
        """

        self._datasets = datasets

    @property
    def fixed_pct(self):
        """Gets the fixed_pct of this Metrics.

        Percentage of all APIs where auto fixes have been applied

        :return: The fixed_pct of this Metrics.
        :rtype: int
        """
        return self._fixed_pct

    @fixed_pct.setter
    def fixed_pct(self, fixed_pct):
        """Sets the fixed_pct of this Metrics.

        Percentage of all APIs where auto fixes have been applied

        :param fixed_pct: The fixed_pct of this Metrics.
        :type fixed_pct: int
        """

        self._fixed_pct = fixed_pct

    @property
    def fixes(self):
        """Gets the fixes of this Metrics.

        Total number of fixes applied across all APIs

        :return: The fixes of this Metrics.
        :rtype: int
        """
        return self._fixes

    @fixes.setter
    def fixes(self, fixes):
        """Sets the fixes of this Metrics.

        Total number of fixes applied across all APIs

        :param fixes: The fixes of this Metrics.
        :type fixes: int
        """

        self._fixes = fixes

    @property
    def invalid(self):
        """Gets the invalid of this Metrics.

        Number of newly invalid APIs

        :return: The invalid of this Metrics.
        :rtype: int
        """
        return self._invalid

    @invalid.setter
    def invalid(self, invalid):
        """Sets the invalid of this Metrics.

        Number of newly invalid APIs

        :param invalid: The invalid of this Metrics.
        :type invalid: int
        """

        self._invalid = invalid

    @property
    def issues(self):
        """Gets the issues of this Metrics.

        Open GitHub issues on our main repo

        :return: The issues of this Metrics.
        :rtype: int
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this Metrics.

        Open GitHub issues on our main repo

        :param issues: The issues of this Metrics.
        :type issues: int
        """

        self._issues = issues

    @property
    def num_apis(self):
        """Gets the num_apis of this Metrics.

        Number of unique APIs

        :return: The num_apis of this Metrics.
        :rtype: int
        """
        return self._num_apis

    @num_apis.setter
    def num_apis(self, num_apis):
        """Sets the num_apis of this Metrics.

        Number of unique APIs

        :param num_apis: The num_apis of this Metrics.
        :type num_apis: int
        """
        if num_apis is None:
            raise ValueError("Invalid value for `num_apis`, must not be `None`")
        if num_apis is not None and num_apis < 1:
            raise ValueError("Invalid value for `num_apis`, must be a value greater than or equal to `1`")

        self._num_apis = num_apis

    @property
    def num_drivers(self):
        """Gets the num_drivers of this Metrics.

        Number of methods of API retrieval

        :return: The num_drivers of this Metrics.
        :rtype: int
        """
        return self._num_drivers

    @num_drivers.setter
    def num_drivers(self, num_drivers):
        """Sets the num_drivers of this Metrics.

        Number of methods of API retrieval

        :param num_drivers: The num_drivers of this Metrics.
        :type num_drivers: int
        """

        self._num_drivers = num_drivers

    @property
    def num_endpoints(self):
        """Gets the num_endpoints of this Metrics.

        Total number of endpoints inside all definitions

        :return: The num_endpoints of this Metrics.
        :rtype: int
        """
        return self._num_endpoints

    @num_endpoints.setter
    def num_endpoints(self, num_endpoints):
        """Sets the num_endpoints of this Metrics.

        Total number of endpoints inside all definitions

        :param num_endpoints: The num_endpoints of this Metrics.
        :type num_endpoints: int
        """
        if num_endpoints is None:
            raise ValueError("Invalid value for `num_endpoints`, must not be `None`")
        if num_endpoints is not None and num_endpoints < 1:
            raise ValueError("Invalid value for `num_endpoints`, must be a value greater than or equal to `1`")

        self._num_endpoints = num_endpoints

    @property
    def num_providers(self):
        """Gets the num_providers of this Metrics.

        Number of API providers in directory

        :return: The num_providers of this Metrics.
        :rtype: int
        """
        return self._num_providers

    @num_providers.setter
    def num_providers(self, num_providers):
        """Sets the num_providers of this Metrics.

        Number of API providers in directory

        :param num_providers: The num_providers of this Metrics.
        :type num_providers: int
        """

        self._num_providers = num_providers

    @property
    def num_specs(self):
        """Gets the num_specs of this Metrics.

        Number of API definitions including different versions of the same API

        :return: The num_specs of this Metrics.
        :rtype: int
        """
        return self._num_specs

    @num_specs.setter
    def num_specs(self, num_specs):
        """Sets the num_specs of this Metrics.

        Number of API definitions including different versions of the same API

        :param num_specs: The num_specs of this Metrics.
        :type num_specs: int
        """
        if num_specs is None:
            raise ValueError("Invalid value for `num_specs`, must not be `None`")
        if num_specs is not None and num_specs < 1:
            raise ValueError("Invalid value for `num_specs`, must be a value greater than or equal to `1`")

        self._num_specs = num_specs

    @property
    def stars(self):
        """Gets the stars of this Metrics.

        GitHub stars for our main repo

        :return: The stars of this Metrics.
        :rtype: int
        """
        return self._stars

    @stars.setter
    def stars(self, stars):
        """Sets the stars of this Metrics.

        GitHub stars for our main repo

        :param stars: The stars of this Metrics.
        :type stars: int
        """

        self._stars = stars

    @property
    def this_week(self):
        """Gets the this_week of this Metrics.


        :return: The this_week of this Metrics.
        :rtype: MetricsThisWeek
        """
        return self._this_week

    @this_week.setter
    def this_week(self, this_week):
        """Sets the this_week of this Metrics.


        :param this_week: The this_week of this Metrics.
        :type this_week: MetricsThisWeek
        """

        self._this_week = this_week

    @property
    def unofficial(self):
        """Gets the unofficial of this Metrics.

        Number of unofficial APIs

        :return: The unofficial of this Metrics.
        :rtype: int
        """
        return self._unofficial

    @unofficial.setter
    def unofficial(self, unofficial):
        """Sets the unofficial of this Metrics.

        Number of unofficial APIs

        :param unofficial: The unofficial of this Metrics.
        :type unofficial: int
        """

        self._unofficial = unofficial

    @property
    def unreachable(self):
        """Gets the unreachable of this Metrics.

        Number of unreachable (4XX,5XX status) APIs

        :return: The unreachable of this Metrics.
        :rtype: int
        """
        return self._unreachable

    @unreachable.setter
    def unreachable(self, unreachable):
        """Sets the unreachable of this Metrics.

        Number of unreachable (4XX,5XX status) APIs

        :param unreachable: The unreachable of this Metrics.
        :type unreachable: int
        """

        self._unreachable = unreachable
