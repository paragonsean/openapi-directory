# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_version import ApiVersion
from openapi_server import util


class API(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added: datetime=None, preferred: str=None, versions: Dict[str, ApiVersion]=None):
        """API - a model defined in OpenAPI

        :param added: The added of this API.
        :param preferred: The preferred of this API.
        :param versions: The versions of this API.
        """
        self.openapi_types = {
            'added': datetime,
            'preferred': str,
            'versions': Dict[str, ApiVersion]
        }

        self.attribute_map = {
            'added': 'added',
            'preferred': 'preferred',
            'versions': 'versions'
        }

        self._added = added
        self._preferred = preferred
        self._versions = versions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'API':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The API of this API.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added(self):
        """Gets the added of this API.

        Timestamp when the API was first added to the directory

        :return: The added of this API.
        :rtype: datetime
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this API.

        Timestamp when the API was first added to the directory

        :param added: The added of this API.
        :type added: datetime
        """
        if added is None:
            raise ValueError("Invalid value for `added`, must not be `None`")

        self._added = added

    @property
    def preferred(self):
        """Gets the preferred of this API.

        Recommended version

        :return: The preferred of this API.
        :rtype: str
        """
        return self._preferred

    @preferred.setter
    def preferred(self, preferred):
        """Sets the preferred of this API.

        Recommended version

        :param preferred: The preferred of this API.
        :type preferred: str
        """
        if preferred is None:
            raise ValueError("Invalid value for `preferred`, must not be `None`")

        self._preferred = preferred

    @property
    def versions(self):
        """Gets the versions of this API.

        List of supported versions of the API

        :return: The versions of this API.
        :rtype: Dict[str, ApiVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this API.

        List of supported versions of the API

        :param versions: The versions of this API.
        :type versions: Dict[str, ApiVersion]
        """
        if versions is None:
            raise ValueError("Invalid value for `versions`, must not be `None`")
        if versions is not None and len(versions) < 1:
            raise ValueError("Invalid value for `versions`, number of items must be greater than or equal to `1`")

        self._versions = versions
