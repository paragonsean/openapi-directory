# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added: datetime=None, external_docs: object=None, info: object=None, link: str=None, openapi_ver: str=None, swagger_url: str=None, swagger_yaml_url: str=None, updated: datetime=None):
        """ApiVersion - a model defined in OpenAPI

        :param added: The added of this ApiVersion.
        :param external_docs: The external_docs of this ApiVersion.
        :param info: The info of this ApiVersion.
        :param link: The link of this ApiVersion.
        :param openapi_ver: The openapi_ver of this ApiVersion.
        :param swagger_url: The swagger_url of this ApiVersion.
        :param swagger_yaml_url: The swagger_yaml_url of this ApiVersion.
        :param updated: The updated of this ApiVersion.
        """
        self.openapi_types = {
            'added': datetime,
            'external_docs': object,
            'info': object,
            'link': str,
            'openapi_ver': str,
            'swagger_url': str,
            'swagger_yaml_url': str,
            'updated': datetime
        }

        self.attribute_map = {
            'added': 'added',
            'external_docs': 'externalDocs',
            'info': 'info',
            'link': 'link',
            'openapi_ver': 'openapiVer',
            'swagger_url': 'swaggerUrl',
            'swagger_yaml_url': 'swaggerYamlUrl',
            'updated': 'updated'
        }

        self._added = added
        self._external_docs = external_docs
        self._info = info
        self._link = link
        self._openapi_ver = openapi_ver
        self._swagger_url = swagger_url
        self._swagger_yaml_url = swagger_yaml_url
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiVersion of this ApiVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added(self):
        """Gets the added of this ApiVersion.

        Timestamp when the version was added

        :return: The added of this ApiVersion.
        :rtype: datetime
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this ApiVersion.

        Timestamp when the version was added

        :param added: The added of this ApiVersion.
        :type added: datetime
        """
        if added is None:
            raise ValueError("Invalid value for `added`, must not be `None`")

        self._added = added

    @property
    def external_docs(self):
        """Gets the external_docs of this ApiVersion.

        Copy of `externalDocs` section from OpenAPI definition

        :return: The external_docs of this ApiVersion.
        :rtype: object
        """
        return self._external_docs

    @external_docs.setter
    def external_docs(self, external_docs):
        """Sets the external_docs of this ApiVersion.

        Copy of `externalDocs` section from OpenAPI definition

        :param external_docs: The external_docs of this ApiVersion.
        :type external_docs: object
        """

        self._external_docs = external_docs

    @property
    def info(self):
        """Gets the info of this ApiVersion.

        Copy of `info` section from OpenAPI definition

        :return: The info of this ApiVersion.
        :rtype: object
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this ApiVersion.

        Copy of `info` section from OpenAPI definition

        :param info: The info of this ApiVersion.
        :type info: object
        """
        if info is None:
            raise ValueError("Invalid value for `info`, must not be `None`")

        self._info = info

    @property
    def link(self):
        """Gets the link of this ApiVersion.

        Link to the individual API entry for this API

        :return: The link of this ApiVersion.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ApiVersion.

        Link to the individual API entry for this API

        :param link: The link of this ApiVersion.
        :type link: str
        """

        self._link = link

    @property
    def openapi_ver(self):
        """Gets the openapi_ver of this ApiVersion.

        The value of the `openapi` or `swagger` property of the source definition

        :return: The openapi_ver of this ApiVersion.
        :rtype: str
        """
        return self._openapi_ver

    @openapi_ver.setter
    def openapi_ver(self, openapi_ver):
        """Sets the openapi_ver of this ApiVersion.

        The value of the `openapi` or `swagger` property of the source definition

        :param openapi_ver: The openapi_ver of this ApiVersion.
        :type openapi_ver: str
        """
        if openapi_ver is None:
            raise ValueError("Invalid value for `openapi_ver`, must not be `None`")

        self._openapi_ver = openapi_ver

    @property
    def swagger_url(self):
        """Gets the swagger_url of this ApiVersion.

        URL to OpenAPI definition in JSON format

        :return: The swagger_url of this ApiVersion.
        :rtype: str
        """
        return self._swagger_url

    @swagger_url.setter
    def swagger_url(self, swagger_url):
        """Sets the swagger_url of this ApiVersion.

        URL to OpenAPI definition in JSON format

        :param swagger_url: The swagger_url of this ApiVersion.
        :type swagger_url: str
        """
        if swagger_url is None:
            raise ValueError("Invalid value for `swagger_url`, must not be `None`")

        self._swagger_url = swagger_url

    @property
    def swagger_yaml_url(self):
        """Gets the swagger_yaml_url of this ApiVersion.

        URL to OpenAPI definition in YAML format

        :return: The swagger_yaml_url of this ApiVersion.
        :rtype: str
        """
        return self._swagger_yaml_url

    @swagger_yaml_url.setter
    def swagger_yaml_url(self, swagger_yaml_url):
        """Sets the swagger_yaml_url of this ApiVersion.

        URL to OpenAPI definition in YAML format

        :param swagger_yaml_url: The swagger_yaml_url of this ApiVersion.
        :type swagger_yaml_url: str
        """
        if swagger_yaml_url is None:
            raise ValueError("Invalid value for `swagger_yaml_url`, must not be `None`")

        self._swagger_yaml_url = swagger_yaml_url

    @property
    def updated(self):
        """Gets the updated of this ApiVersion.

        Timestamp when the version was updated

        :return: The updated of this ApiVersion.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ApiVersion.

        Timestamp when the version was updated

        :param updated: The updated of this ApiVersion.
        :type updated: datetime
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")

        self._updated = updated
