/**
 * APIs.guru
 * Wikipedia for Web APIs. Repository of API definitions in OpenAPI format. **Warning**: If you want to be notified about changes in advance please join our [Slack channel](https://join.slack.com/t/mermade/shared_invite/zt-g78g7xir-MLE_CTCcXCdfJfG3CJe9qA). Client sample: [[Demo]](https://apis.guru/simple-ui) [[Repo]](https://github.com/APIs-guru/simple-ui) 
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApisGuru);
  }
}(this, function(expect, ApisGuru) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApisGuru.Metrics();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Metrics', function() {
    it('should create an instance of Metrics', function() {
      // uncomment below and update the code to test Metrics
      //var instance = new ApisGuru.Metrics();
      //expect(instance).to.be.a(ApisGuru.Metrics);
    });

    it('should have the property datasets (base name: "datasets")', function() {
      // uncomment below and update the code to test the property datasets
      //var instance = new ApisGuru.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property fixedPct (base name: "fixedPct")', function() {
      // uncomment below and update the code to test the property fixedPct
      //var instance = new ApisGuru.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property fixes (base name: "fixes")', function() {
      // uncomment below and update the code to test the property fixes
      //var instance = new ApisGuru.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property invalid (base name: "invalid")', function() {
      // uncomment below and update the code to test the property invalid
      //var instance = new ApisGuru.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property issues (base name: "issues")', function() {
      // uncomment below and update the code to test the property issues
      //var instance = new ApisGuru.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property numAPIs (base name: "numAPIs")', function() {
      // uncomment below and update the code to test the property numAPIs
      //var instance = new ApisGuru.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property numDrivers (base name: "numDrivers")', function() {
      // uncomment below and update the code to test the property numDrivers
      //var instance = new ApisGuru.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property numEndpoints (base name: "numEndpoints")', function() {
      // uncomment below and update the code to test the property numEndpoints
      //var instance = new ApisGuru.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property numProviders (base name: "numProviders")', function() {
      // uncomment below and update the code to test the property numProviders
      //var instance = new ApisGuru.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property numSpecs (base name: "numSpecs")', function() {
      // uncomment below and update the code to test the property numSpecs
      //var instance = new ApisGuru.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property stars (base name: "stars")', function() {
      // uncomment below and update the code to test the property stars
      //var instance = new ApisGuru.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property thisWeek (base name: "thisWeek")', function() {
      // uncomment below and update the code to test the property thisWeek
      //var instance = new ApisGuru.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property unofficial (base name: "unofficial")', function() {
      // uncomment below and update the code to test the property unofficial
      //var instance = new ApisGuru.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property unreachable (base name: "unreachable")', function() {
      // uncomment below and update the code to test the property unreachable
      //var instance = new ApisGuru.Metrics();
      //expect(instance).to.be();
    });

  });

}));
