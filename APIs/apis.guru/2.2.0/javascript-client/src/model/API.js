/**
 * APIs.guru
 * Wikipedia for Web APIs. Repository of API definitions in OpenAPI format. **Warning**: If you want to be notified about changes in advance please join our [Slack channel](https://join.slack.com/t/mermade/shared_invite/zt-g78g7xir-MLE_CTCcXCdfJfG3CJe9qA). Client sample: [[Demo]](https://apis.guru/simple-ui) [[Repo]](https://github.com/APIs-guru/simple-ui) 
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiVersion from './ApiVersion';

/**
 * The API model module.
 * @module model/API
 * @version 2.2.0
 */
class API {
    /**
     * Constructs a new <code>API</code>.
     * Meta information about API
     * @alias module:model/API
     * @param added {Date} Timestamp when the API was first added to the directory
     * @param preferred {String} Recommended version
     * @param versions {Object.<String, module:model/ApiVersion>} List of supported versions of the API
     */
    constructor(added, preferred, versions) { 
        
        API.initialize(this, added, preferred, versions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, added, preferred, versions) { 
        obj['added'] = added;
        obj['preferred'] = preferred;
        obj['versions'] = versions;
    }

    /**
     * Constructs a <code>API</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/API} obj Optional instance to populate.
     * @return {module:model/API} The populated <code>API</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new API();

            if (data.hasOwnProperty('added')) {
                obj['added'] = ApiClient.convertToType(data['added'], 'Date');
            }
            if (data.hasOwnProperty('preferred')) {
                obj['preferred'] = ApiClient.convertToType(data['preferred'], 'String');
            }
            if (data.hasOwnProperty('versions')) {
                obj['versions'] = ApiClient.convertToType(data['versions'], {'String': ApiVersion});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>API</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>API</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of API.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['preferred'] && !(typeof data['preferred'] === 'string' || data['preferred'] instanceof String)) {
            throw new Error("Expected the field `preferred` to be a primitive type in the JSON string but got " + data['preferred']);
        }

        return true;
    }


}

API.RequiredProperties = ["added", "preferred", "versions"];

/**
 * Timestamp when the API was first added to the directory
 * @member {Date} added
 */
API.prototype['added'] = undefined;

/**
 * Recommended version
 * @member {String} preferred
 */
API.prototype['preferred'] = undefined;

/**
 * List of supported versions of the API
 * @member {Object.<String, module:model/ApiVersion>} versions
 */
API.prototype['versions'] = undefined;






export default API;

