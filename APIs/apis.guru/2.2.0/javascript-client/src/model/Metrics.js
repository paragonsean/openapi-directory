/**
 * APIs.guru
 * Wikipedia for Web APIs. Repository of API definitions in OpenAPI format. **Warning**: If you want to be notified about changes in advance please join our [Slack channel](https://join.slack.com/t/mermade/shared_invite/zt-g78g7xir-MLE_CTCcXCdfJfG3CJe9qA). Client sample: [[Demo]](https://apis.guru/simple-ui) [[Repo]](https://github.com/APIs-guru/simple-ui) 
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricsThisWeek from './MetricsThisWeek';

/**
 * The Metrics model module.
 * @module model/Metrics
 * @version 2.2.0
 */
class Metrics {
    /**
     * Constructs a new <code>Metrics</code>.
     * List of basic metrics
     * @alias module:model/Metrics
     * @param numAPIs {Number} Number of unique APIs
     * @param numEndpoints {Number} Total number of endpoints inside all definitions
     * @param numSpecs {Number} Number of API definitions including different versions of the same API
     */
    constructor(numAPIs, numEndpoints, numSpecs) { 
        
        Metrics.initialize(this, numAPIs, numEndpoints, numSpecs);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, numAPIs, numEndpoints, numSpecs) { 
        obj['numAPIs'] = numAPIs;
        obj['numEndpoints'] = numEndpoints;
        obj['numSpecs'] = numSpecs;
    }

    /**
     * Constructs a <code>Metrics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Metrics} obj Optional instance to populate.
     * @return {module:model/Metrics} The populated <code>Metrics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Metrics();

            if (data.hasOwnProperty('datasets')) {
                obj['datasets'] = ApiClient.convertToType(data['datasets'], [Object]);
            }
            if (data.hasOwnProperty('fixedPct')) {
                obj['fixedPct'] = ApiClient.convertToType(data['fixedPct'], 'Number');
            }
            if (data.hasOwnProperty('fixes')) {
                obj['fixes'] = ApiClient.convertToType(data['fixes'], 'Number');
            }
            if (data.hasOwnProperty('invalid')) {
                obj['invalid'] = ApiClient.convertToType(data['invalid'], 'Number');
            }
            if (data.hasOwnProperty('issues')) {
                obj['issues'] = ApiClient.convertToType(data['issues'], 'Number');
            }
            if (data.hasOwnProperty('numAPIs')) {
                obj['numAPIs'] = ApiClient.convertToType(data['numAPIs'], 'Number');
            }
            if (data.hasOwnProperty('numDrivers')) {
                obj['numDrivers'] = ApiClient.convertToType(data['numDrivers'], 'Number');
            }
            if (data.hasOwnProperty('numEndpoints')) {
                obj['numEndpoints'] = ApiClient.convertToType(data['numEndpoints'], 'Number');
            }
            if (data.hasOwnProperty('numProviders')) {
                obj['numProviders'] = ApiClient.convertToType(data['numProviders'], 'Number');
            }
            if (data.hasOwnProperty('numSpecs')) {
                obj['numSpecs'] = ApiClient.convertToType(data['numSpecs'], 'Number');
            }
            if (data.hasOwnProperty('stars')) {
                obj['stars'] = ApiClient.convertToType(data['stars'], 'Number');
            }
            if (data.hasOwnProperty('thisWeek')) {
                obj['thisWeek'] = MetricsThisWeek.constructFromObject(data['thisWeek']);
            }
            if (data.hasOwnProperty('unofficial')) {
                obj['unofficial'] = ApiClient.convertToType(data['unofficial'], 'Number');
            }
            if (data.hasOwnProperty('unreachable')) {
                obj['unreachable'] = ApiClient.convertToType(data['unreachable'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Metrics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Metrics</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Metrics.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['datasets'])) {
            throw new Error("Expected the field `datasets` to be an array in the JSON data but got " + data['datasets']);
        }
        // validate the optional field `thisWeek`
        if (data['thisWeek']) { // data not null
          MetricsThisWeek.validateJSON(data['thisWeek']);
        }

        return true;
    }


}

Metrics.RequiredProperties = ["numAPIs", "numEndpoints", "numSpecs"];

/**
 * Data used for charting etc
 * @member {Array.<Object>} datasets
 */
Metrics.prototype['datasets'] = undefined;

/**
 * Percentage of all APIs where auto fixes have been applied
 * @member {Number} fixedPct
 */
Metrics.prototype['fixedPct'] = undefined;

/**
 * Total number of fixes applied across all APIs
 * @member {Number} fixes
 */
Metrics.prototype['fixes'] = undefined;

/**
 * Number of newly invalid APIs
 * @member {Number} invalid
 */
Metrics.prototype['invalid'] = undefined;

/**
 * Open GitHub issues on our main repo
 * @member {Number} issues
 */
Metrics.prototype['issues'] = undefined;

/**
 * Number of unique APIs
 * @member {Number} numAPIs
 */
Metrics.prototype['numAPIs'] = undefined;

/**
 * Number of methods of API retrieval
 * @member {Number} numDrivers
 */
Metrics.prototype['numDrivers'] = undefined;

/**
 * Total number of endpoints inside all definitions
 * @member {Number} numEndpoints
 */
Metrics.prototype['numEndpoints'] = undefined;

/**
 * Number of API providers in directory
 * @member {Number} numProviders
 */
Metrics.prototype['numProviders'] = undefined;

/**
 * Number of API definitions including different versions of the same API
 * @member {Number} numSpecs
 */
Metrics.prototype['numSpecs'] = undefined;

/**
 * GitHub stars for our main repo
 * @member {Number} stars
 */
Metrics.prototype['stars'] = undefined;

/**
 * @member {module:model/MetricsThisWeek} thisWeek
 */
Metrics.prototype['thisWeek'] = undefined;

/**
 * Number of unofficial APIs
 * @member {Number} unofficial
 */
Metrics.prototype['unofficial'] = undefined;

/**
 * Number of unreachable (4XX,5XX status) APIs
 * @member {Number} unreachable
 */
Metrics.prototype['unreachable'] = undefined;






export default Metrics;

