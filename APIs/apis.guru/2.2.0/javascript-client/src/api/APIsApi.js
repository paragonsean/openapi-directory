/**
 * APIs.guru
 * Wikipedia for Web APIs. Repository of API definitions in OpenAPI format. **Warning**: If you want to be notified about changes in advance please join our [Slack channel](https://join.slack.com/t/mermade/shared_invite/zt-g78g7xir-MLE_CTCcXCdfJfG3CJe9qA). Client sample: [[Demo]](https://apis.guru/simple-ui) [[Repo]](https://github.com/APIs-guru/simple-ui) 
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import API from '../model/API';
import GetProviders200Response from '../model/GetProviders200Response';
import GetServices200Response from '../model/GetServices200Response';
import Metrics from '../model/Metrics';

/**
* APIs service.
* @module api/APIsApi
* @version 2.2.0
*/
export default class APIsApi {

    /**
    * Constructs a new APIsApi. 
    * @alias module:api/APIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAPI operation.
     * @callback module:api/APIsApi~getAPICallback
     * @param {String} error Error message, if any.
     * @param {module:model/API} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve one version of a particular API
     * Returns the API entry for one specific version of an API where there is no serviceName.
     * @param {String} provider 
     * @param {String} api 
     * @param {module:api/APIsApi~getAPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/API}
     */
    getAPI(provider, api, callback) {
      let postBody = null;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling getAPI");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling getAPI");
      }

      let pathParams = {
        'provider': provider,
        'api': api
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = API;
      return this.apiClient.callApi(
        '/specs/{provider}/{api}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetrics operation.
     * @callback module:api/APIsApi~getMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metrics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get basic metrics
     * Some basic metrics for the entire directory. Just stunning numbers to put on a front page and are intended purely for WoW effect :) 
     * @param {module:api/APIsApi~getMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metrics}
     */
    getMetrics(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Metrics;
      return this.apiClient.callApi(
        '/metrics.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProvider operation.
     * @callback module:api/APIsApi~getProviderCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: API}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all APIs for a particular provider
     * List all APIs in the directory for a particular providerName Returns links to the individual API entry for each API. 
     * @param {String} provider 
     * @param {module:api/APIsApi~getProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: API}>}
     */
    getProvider(provider, callback) {
      let postBody = null;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling getProvider");
      }

      let pathParams = {
        'provider': provider
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': API};
      return this.apiClient.callApi(
        '/{provider}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProviders operation.
     * @callback module:api/APIsApi~getProvidersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProviders200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all providers
     * List all the providers in the directory 
     * @param {module:api/APIsApi~getProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProviders200Response}
     */
    getProviders(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProviders200Response;
      return this.apiClient.callApi(
        '/providers.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServiceAPI operation.
     * @callback module:api/APIsApi~getServiceAPICallback
     * @param {String} error Error message, if any.
     * @param {module:model/API} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve one version of a particular API with a serviceName.
     * Returns the API entry for one specific version of an API where there is a serviceName.
     * @param {String} provider 
     * @param {String} service 
     * @param {String} api 
     * @param {module:api/APIsApi~getServiceAPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/API}
     */
    getServiceAPI(provider, service, api, callback) {
      let postBody = null;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling getServiceAPI");
      }
      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling getServiceAPI");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling getServiceAPI");
      }

      let pathParams = {
        'provider': provider,
        'service': service,
        'api': api
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = API;
      return this.apiClient.callApi(
        '/specs/{provider}/{service}/{api}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServices operation.
     * @callback module:api/APIsApi~getServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServices200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all serviceNames for a particular provider
     * List all serviceNames in the directory for a particular providerName 
     * @param {String} provider 
     * @param {module:api/APIsApi~getServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServices200Response}
     */
    getServices(provider, callback) {
      let postBody = null;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling getServices");
      }

      let pathParams = {
        'provider': provider
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetServices200Response;
      return this.apiClient.callApi(
        '/{provider}/services.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAPIs operation.
     * @callback module:api/APIsApi~listAPIsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: API}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all APIs
     * List all APIs in the directory. Returns links to the OpenAPI definitions for each API in the directory. If API exist in multiple versions `preferred` one is explicitly marked. Some basic info from the OpenAPI definition is cached inside each object. This allows you to generate some simple views without needing to fetch the OpenAPI definition for each API. 
     * @param {module:api/APIsApi~listAPIsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: API}>}
     */
    listAPIs(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': API};
      return this.apiClient.callApi(
        '/list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
