/*
 * APIs.guru
 * Wikipedia for Web APIs. Repository of API definitions in OpenAPI format. **Warning**: If you want to be notified about changes in advance please join our [Slack channel](https://join.slack.com/t/mermade/shared_invite/zt-g78g7xir-MLE_CTCcXCdfJfG3CJe9qA). Client sample: [[Demo]](https://apis.guru/simple-ui) [[Repo]](https://github.com/APIs-guru/simple-ui) 
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiVersion
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:11.444987-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiVersion {
  public static final String SERIALIZED_NAME_ADDED = "added";
  @SerializedName(SERIALIZED_NAME_ADDED)
  private OffsetDateTime added;

  public static final String SERIALIZED_NAME_EXTERNAL_DOCS = "externalDocs";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_DOCS)
  private Object externalDocs;

  public static final String SERIALIZED_NAME_INFO = "info";
  @SerializedName(SERIALIZED_NAME_INFO)
  private Object info;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_OPENAPI_VER = "openapiVer";
  @SerializedName(SERIALIZED_NAME_OPENAPI_VER)
  private String openapiVer;

  public static final String SERIALIZED_NAME_SWAGGER_URL = "swaggerUrl";
  @SerializedName(SERIALIZED_NAME_SWAGGER_URL)
  private String swaggerUrl;

  public static final String SERIALIZED_NAME_SWAGGER_YAML_URL = "swaggerYamlUrl";
  @SerializedName(SERIALIZED_NAME_SWAGGER_YAML_URL)
  private String swaggerYamlUrl;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public ApiVersion() {
  }

  public ApiVersion added(OffsetDateTime added) {
    this.added = added;
    return this;
  }

  /**
   * Timestamp when the version was added
   * @return added
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getAdded() {
    return added;
  }

  public void setAdded(OffsetDateTime added) {
    this.added = added;
  }


  public ApiVersion externalDocs(Object externalDocs) {
    this.externalDocs = externalDocs;
    return this;
  }

  /**
   * Copy of &#x60;externalDocs&#x60; section from OpenAPI definition
   * @return externalDocs
   */
  @javax.annotation.Nullable
  public Object getExternalDocs() {
    return externalDocs;
  }

  public void setExternalDocs(Object externalDocs) {
    this.externalDocs = externalDocs;
  }


  public ApiVersion info(Object info) {
    this.info = info;
    return this;
  }

  /**
   * Copy of &#x60;info&#x60; section from OpenAPI definition
   * @return info
   */
  @javax.annotation.Nonnull
  public Object getInfo() {
    return info;
  }

  public void setInfo(Object info) {
    this.info = info;
  }


  public ApiVersion link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Link to the individual API entry for this API
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public ApiVersion openapiVer(String openapiVer) {
    this.openapiVer = openapiVer;
    return this;
  }

  /**
   * The value of the &#x60;openapi&#x60; or &#x60;swagger&#x60; property of the source definition
   * @return openapiVer
   */
  @javax.annotation.Nonnull
  public String getOpenapiVer() {
    return openapiVer;
  }

  public void setOpenapiVer(String openapiVer) {
    this.openapiVer = openapiVer;
  }


  public ApiVersion swaggerUrl(String swaggerUrl) {
    this.swaggerUrl = swaggerUrl;
    return this;
  }

  /**
   * URL to OpenAPI definition in JSON format
   * @return swaggerUrl
   */
  @javax.annotation.Nonnull
  public String getSwaggerUrl() {
    return swaggerUrl;
  }

  public void setSwaggerUrl(String swaggerUrl) {
    this.swaggerUrl = swaggerUrl;
  }


  public ApiVersion swaggerYamlUrl(String swaggerYamlUrl) {
    this.swaggerYamlUrl = swaggerYamlUrl;
    return this;
  }

  /**
   * URL to OpenAPI definition in YAML format
   * @return swaggerYamlUrl
   */
  @javax.annotation.Nonnull
  public String getSwaggerYamlUrl() {
    return swaggerYamlUrl;
  }

  public void setSwaggerYamlUrl(String swaggerYamlUrl) {
    this.swaggerYamlUrl = swaggerYamlUrl;
  }


  public ApiVersion updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Timestamp when the version was updated
   * @return updated
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiVersion apiVersion = (ApiVersion) o;
    return Objects.equals(this.added, apiVersion.added) &&
        Objects.equals(this.externalDocs, apiVersion.externalDocs) &&
        Objects.equals(this.info, apiVersion.info) &&
        Objects.equals(this.link, apiVersion.link) &&
        Objects.equals(this.openapiVer, apiVersion.openapiVer) &&
        Objects.equals(this.swaggerUrl, apiVersion.swaggerUrl) &&
        Objects.equals(this.swaggerYamlUrl, apiVersion.swaggerYamlUrl) &&
        Objects.equals(this.updated, apiVersion.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(added, externalDocs, info, link, openapiVer, swaggerUrl, swaggerYamlUrl, updated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiVersion {\n");
    sb.append("    added: ").append(toIndentedString(added)).append("\n");
    sb.append("    externalDocs: ").append(toIndentedString(externalDocs)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    openapiVer: ").append(toIndentedString(openapiVer)).append("\n");
    sb.append("    swaggerUrl: ").append(toIndentedString(swaggerUrl)).append("\n");
    sb.append("    swaggerYamlUrl: ").append(toIndentedString(swaggerYamlUrl)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("added");
    openapiFields.add("externalDocs");
    openapiFields.add("info");
    openapiFields.add("link");
    openapiFields.add("openapiVer");
    openapiFields.add("swaggerUrl");
    openapiFields.add("swaggerYamlUrl");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("added");
    openapiRequiredFields.add("info");
    openapiRequiredFields.add("openapiVer");
    openapiRequiredFields.add("swaggerUrl");
    openapiRequiredFields.add("swaggerYamlUrl");
    openapiRequiredFields.add("updated");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiVersion is not found in the empty JSON string", ApiVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApiVersion.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if (!jsonObj.get("openapiVer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openapiVer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openapiVer").toString()));
      }
      if (!jsonObj.get("swaggerUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `swaggerUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("swaggerUrl").toString()));
      }
      if (!jsonObj.get("swaggerYamlUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `swaggerYamlUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("swaggerYamlUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiVersion>() {
           @Override
           public void write(JsonWriter out, ApiVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiVersion
   * @throws IOException if the JSON string is invalid with respect to ApiVersion
   */
  public static ApiVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiVersion.class);
  }

  /**
   * Convert an instance of ApiVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

