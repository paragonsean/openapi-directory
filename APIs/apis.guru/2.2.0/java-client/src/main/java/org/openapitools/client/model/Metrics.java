/*
 * APIs.guru
 * Wikipedia for Web APIs. Repository of API definitions in OpenAPI format. **Warning**: If you want to be notified about changes in advance please join our [Slack channel](https://join.slack.com/t/mermade/shared_invite/zt-g78g7xir-MLE_CTCcXCdfJfG3CJe9qA). Client sample: [[Demo]](https://apis.guru/simple-ui) [[Repo]](https://github.com/APIs-guru/simple-ui) 
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MetricsThisWeek;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List of basic metrics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:11.444987-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Metrics {
  public static final String SERIALIZED_NAME_DATASETS = "datasets";
  @SerializedName(SERIALIZED_NAME_DATASETS)
  private List<Object> datasets = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIXED_PCT = "fixedPct";
  @SerializedName(SERIALIZED_NAME_FIXED_PCT)
  private Integer fixedPct;

  public static final String SERIALIZED_NAME_FIXES = "fixes";
  @SerializedName(SERIALIZED_NAME_FIXES)
  private Integer fixes;

  public static final String SERIALIZED_NAME_INVALID = "invalid";
  @SerializedName(SERIALIZED_NAME_INVALID)
  private Integer invalid;

  public static final String SERIALIZED_NAME_ISSUES = "issues";
  @SerializedName(SERIALIZED_NAME_ISSUES)
  private Integer issues;

  public static final String SERIALIZED_NAME_NUM_A_P_IS = "numAPIs";
  @SerializedName(SERIALIZED_NAME_NUM_A_P_IS)
  private Integer numAPIs;

  public static final String SERIALIZED_NAME_NUM_DRIVERS = "numDrivers";
  @SerializedName(SERIALIZED_NAME_NUM_DRIVERS)
  private Integer numDrivers;

  public static final String SERIALIZED_NAME_NUM_ENDPOINTS = "numEndpoints";
  @SerializedName(SERIALIZED_NAME_NUM_ENDPOINTS)
  private Integer numEndpoints;

  public static final String SERIALIZED_NAME_NUM_PROVIDERS = "numProviders";
  @SerializedName(SERIALIZED_NAME_NUM_PROVIDERS)
  private Integer numProviders;

  public static final String SERIALIZED_NAME_NUM_SPECS = "numSpecs";
  @SerializedName(SERIALIZED_NAME_NUM_SPECS)
  private Integer numSpecs;

  public static final String SERIALIZED_NAME_STARS = "stars";
  @SerializedName(SERIALIZED_NAME_STARS)
  private Integer stars;

  public static final String SERIALIZED_NAME_THIS_WEEK = "thisWeek";
  @SerializedName(SERIALIZED_NAME_THIS_WEEK)
  private MetricsThisWeek thisWeek;

  public static final String SERIALIZED_NAME_UNOFFICIAL = "unofficial";
  @SerializedName(SERIALIZED_NAME_UNOFFICIAL)
  private Integer unofficial;

  public static final String SERIALIZED_NAME_UNREACHABLE = "unreachable";
  @SerializedName(SERIALIZED_NAME_UNREACHABLE)
  private Integer unreachable;

  public Metrics() {
  }

  public Metrics datasets(List<Object> datasets) {
    this.datasets = datasets;
    return this;
  }

  public Metrics addDatasetsItem(Object datasetsItem) {
    if (this.datasets == null) {
      this.datasets = new ArrayList<>();
    }
    this.datasets.add(datasetsItem);
    return this;
  }

  /**
   * Data used for charting etc
   * @return datasets
   */
  @javax.annotation.Nullable
  public List<Object> getDatasets() {
    return datasets;
  }

  public void setDatasets(List<Object> datasets) {
    this.datasets = datasets;
  }


  public Metrics fixedPct(Integer fixedPct) {
    this.fixedPct = fixedPct;
    return this;
  }

  /**
   * Percentage of all APIs where auto fixes have been applied
   * @return fixedPct
   */
  @javax.annotation.Nullable
  public Integer getFixedPct() {
    return fixedPct;
  }

  public void setFixedPct(Integer fixedPct) {
    this.fixedPct = fixedPct;
  }


  public Metrics fixes(Integer fixes) {
    this.fixes = fixes;
    return this;
  }

  /**
   * Total number of fixes applied across all APIs
   * @return fixes
   */
  @javax.annotation.Nullable
  public Integer getFixes() {
    return fixes;
  }

  public void setFixes(Integer fixes) {
    this.fixes = fixes;
  }


  public Metrics invalid(Integer invalid) {
    this.invalid = invalid;
    return this;
  }

  /**
   * Number of newly invalid APIs
   * @return invalid
   */
  @javax.annotation.Nullable
  public Integer getInvalid() {
    return invalid;
  }

  public void setInvalid(Integer invalid) {
    this.invalid = invalid;
  }


  public Metrics issues(Integer issues) {
    this.issues = issues;
    return this;
  }

  /**
   * Open GitHub issues on our main repo
   * @return issues
   */
  @javax.annotation.Nullable
  public Integer getIssues() {
    return issues;
  }

  public void setIssues(Integer issues) {
    this.issues = issues;
  }


  public Metrics numAPIs(Integer numAPIs) {
    this.numAPIs = numAPIs;
    return this;
  }

  /**
   * Number of unique APIs
   * minimum: 1
   * @return numAPIs
   */
  @javax.annotation.Nonnull
  public Integer getNumAPIs() {
    return numAPIs;
  }

  public void setNumAPIs(Integer numAPIs) {
    this.numAPIs = numAPIs;
  }


  public Metrics numDrivers(Integer numDrivers) {
    this.numDrivers = numDrivers;
    return this;
  }

  /**
   * Number of methods of API retrieval
   * @return numDrivers
   */
  @javax.annotation.Nullable
  public Integer getNumDrivers() {
    return numDrivers;
  }

  public void setNumDrivers(Integer numDrivers) {
    this.numDrivers = numDrivers;
  }


  public Metrics numEndpoints(Integer numEndpoints) {
    this.numEndpoints = numEndpoints;
    return this;
  }

  /**
   * Total number of endpoints inside all definitions
   * minimum: 1
   * @return numEndpoints
   */
  @javax.annotation.Nonnull
  public Integer getNumEndpoints() {
    return numEndpoints;
  }

  public void setNumEndpoints(Integer numEndpoints) {
    this.numEndpoints = numEndpoints;
  }


  public Metrics numProviders(Integer numProviders) {
    this.numProviders = numProviders;
    return this;
  }

  /**
   * Number of API providers in directory
   * @return numProviders
   */
  @javax.annotation.Nullable
  public Integer getNumProviders() {
    return numProviders;
  }

  public void setNumProviders(Integer numProviders) {
    this.numProviders = numProviders;
  }


  public Metrics numSpecs(Integer numSpecs) {
    this.numSpecs = numSpecs;
    return this;
  }

  /**
   * Number of API definitions including different versions of the same API
   * minimum: 1
   * @return numSpecs
   */
  @javax.annotation.Nonnull
  public Integer getNumSpecs() {
    return numSpecs;
  }

  public void setNumSpecs(Integer numSpecs) {
    this.numSpecs = numSpecs;
  }


  public Metrics stars(Integer stars) {
    this.stars = stars;
    return this;
  }

  /**
   * GitHub stars for our main repo
   * @return stars
   */
  @javax.annotation.Nullable
  public Integer getStars() {
    return stars;
  }

  public void setStars(Integer stars) {
    this.stars = stars;
  }


  public Metrics thisWeek(MetricsThisWeek thisWeek) {
    this.thisWeek = thisWeek;
    return this;
  }

  /**
   * Get thisWeek
   * @return thisWeek
   */
  @javax.annotation.Nullable
  public MetricsThisWeek getThisWeek() {
    return thisWeek;
  }

  public void setThisWeek(MetricsThisWeek thisWeek) {
    this.thisWeek = thisWeek;
  }


  public Metrics unofficial(Integer unofficial) {
    this.unofficial = unofficial;
    return this;
  }

  /**
   * Number of unofficial APIs
   * @return unofficial
   */
  @javax.annotation.Nullable
  public Integer getUnofficial() {
    return unofficial;
  }

  public void setUnofficial(Integer unofficial) {
    this.unofficial = unofficial;
  }


  public Metrics unreachable(Integer unreachable) {
    this.unreachable = unreachable;
    return this;
  }

  /**
   * Number of unreachable (4XX,5XX status) APIs
   * @return unreachable
   */
  @javax.annotation.Nullable
  public Integer getUnreachable() {
    return unreachable;
  }

  public void setUnreachable(Integer unreachable) {
    this.unreachable = unreachable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Metrics metrics = (Metrics) o;
    return Objects.equals(this.datasets, metrics.datasets) &&
        Objects.equals(this.fixedPct, metrics.fixedPct) &&
        Objects.equals(this.fixes, metrics.fixes) &&
        Objects.equals(this.invalid, metrics.invalid) &&
        Objects.equals(this.issues, metrics.issues) &&
        Objects.equals(this.numAPIs, metrics.numAPIs) &&
        Objects.equals(this.numDrivers, metrics.numDrivers) &&
        Objects.equals(this.numEndpoints, metrics.numEndpoints) &&
        Objects.equals(this.numProviders, metrics.numProviders) &&
        Objects.equals(this.numSpecs, metrics.numSpecs) &&
        Objects.equals(this.stars, metrics.stars) &&
        Objects.equals(this.thisWeek, metrics.thisWeek) &&
        Objects.equals(this.unofficial, metrics.unofficial) &&
        Objects.equals(this.unreachable, metrics.unreachable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasets, fixedPct, fixes, invalid, issues, numAPIs, numDrivers, numEndpoints, numProviders, numSpecs, stars, thisWeek, unofficial, unreachable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metrics {\n");
    sb.append("    datasets: ").append(toIndentedString(datasets)).append("\n");
    sb.append("    fixedPct: ").append(toIndentedString(fixedPct)).append("\n");
    sb.append("    fixes: ").append(toIndentedString(fixes)).append("\n");
    sb.append("    invalid: ").append(toIndentedString(invalid)).append("\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("    numAPIs: ").append(toIndentedString(numAPIs)).append("\n");
    sb.append("    numDrivers: ").append(toIndentedString(numDrivers)).append("\n");
    sb.append("    numEndpoints: ").append(toIndentedString(numEndpoints)).append("\n");
    sb.append("    numProviders: ").append(toIndentedString(numProviders)).append("\n");
    sb.append("    numSpecs: ").append(toIndentedString(numSpecs)).append("\n");
    sb.append("    stars: ").append(toIndentedString(stars)).append("\n");
    sb.append("    thisWeek: ").append(toIndentedString(thisWeek)).append("\n");
    sb.append("    unofficial: ").append(toIndentedString(unofficial)).append("\n");
    sb.append("    unreachable: ").append(toIndentedString(unreachable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("datasets");
    openapiFields.add("fixedPct");
    openapiFields.add("fixes");
    openapiFields.add("invalid");
    openapiFields.add("issues");
    openapiFields.add("numAPIs");
    openapiFields.add("numDrivers");
    openapiFields.add("numEndpoints");
    openapiFields.add("numProviders");
    openapiFields.add("numSpecs");
    openapiFields.add("stars");
    openapiFields.add("thisWeek");
    openapiFields.add("unofficial");
    openapiFields.add("unreachable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("numAPIs");
    openapiRequiredFields.add("numEndpoints");
    openapiRequiredFields.add("numSpecs");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Metrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Metrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Metrics is not found in the empty JSON string", Metrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Metrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Metrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Metrics.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("datasets") != null && !jsonObj.get("datasets").isJsonNull() && !jsonObj.get("datasets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasets` to be an array in the JSON string but got `%s`", jsonObj.get("datasets").toString()));
      }
      // validate the optional field `thisWeek`
      if (jsonObj.get("thisWeek") != null && !jsonObj.get("thisWeek").isJsonNull()) {
        MetricsThisWeek.validateJsonElement(jsonObj.get("thisWeek"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Metrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Metrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Metrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Metrics.class));

       return (TypeAdapter<T>) new TypeAdapter<Metrics>() {
           @Override
           public void write(JsonWriter out, Metrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Metrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Metrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Metrics
   * @throws IOException if the JSON string is invalid with respect to Metrics
   */
  public static Metrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Metrics.class);
  }

  /**
   * Convert an instance of Metrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

