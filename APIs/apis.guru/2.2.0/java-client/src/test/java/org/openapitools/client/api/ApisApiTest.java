/*
 * APIs.guru
 * Wikipedia for Web APIs. Repository of API definitions in OpenAPI format. **Warning**: If you want to be notified about changes in advance please join our [Slack channel](https://join.slack.com/t/mermade/shared_invite/zt-g78g7xir-MLE_CTCcXCdfJfG3CJe9qA). Client sample: [[Demo]](https://apis.guru/simple-ui) [[Repo]](https://github.com/APIs-guru/simple-ui) 
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.API;
import org.openapitools.client.model.GetProviders200Response;
import org.openapitools.client.model.GetServices200Response;
import org.openapitools.client.model.Metrics;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApisApi
 */
@Disabled
public class ApisApiTest {

    private final ApisApi api = new ApisApi();

    /**
     * Retrieve one version of a particular API
     *
     * Returns the API entry for one specific version of an API where there is no serviceName.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAPITest() throws ApiException {
        String provider = null;
        String api = null;
        API response = api.getAPI(provider, api);
        // TODO: test validations
    }

    /**
     * Get basic metrics
     *
     * Some basic metrics for the entire directory. Just stunning numbers to put on a front page and are intended purely for WoW effect :) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMetricsTest() throws ApiException {
        Metrics response = api.getMetrics();
        // TODO: test validations
    }

    /**
     * List all APIs for a particular provider
     *
     * List all APIs in the directory for a particular providerName Returns links to the individual API entry for each API. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProviderTest() throws ApiException {
        String provider = null;
        Map<String, API> response = api.getProvider(provider);
        // TODO: test validations
    }

    /**
     * List all providers
     *
     * List all the providers in the directory 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProvidersTest() throws ApiException {
        GetProviders200Response response = api.getProviders();
        // TODO: test validations
    }

    /**
     * Retrieve one version of a particular API with a serviceName.
     *
     * Returns the API entry for one specific version of an API where there is a serviceName.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceAPITest() throws ApiException {
        String provider = null;
        String service = null;
        String api = null;
        API response = api.getServiceAPI(provider, service, api);
        // TODO: test validations
    }

    /**
     * List all serviceNames for a particular provider
     *
     * List all serviceNames in the directory for a particular providerName 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServicesTest() throws ApiException {
        String provider = null;
        GetServices200Response response = api.getServices(provider);
        // TODO: test validations
    }

    /**
     * List all APIs
     *
     * List all APIs in the directory. Returns links to the OpenAPI definitions for each API in the directory. If API exist in multiple versions &#x60;preferred&#x60; one is explicitly marked. Some basic info from the OpenAPI definition is cached inside each object. This allows you to generate some simple views without needing to fetch the OpenAPI definition for each API. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAPIsTest() throws ApiException {
        Map<String, API> response = api.listAPIs();
        // TODO: test validations
    }

}
