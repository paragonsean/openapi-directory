/**
 * PAYONE Link API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@payone.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LinkCreateRequest from '../model/LinkCreateRequest';
import LinkResponse from '../model/LinkResponse';
import PageLinkResponse from '../model/PageLinkResponse';

/**
* LinkManagement service.
* @module api/LinkManagementApi
* @version v1
*/
export default class LinkManagementApi {

    /**
    * Constructs a new LinkManagementApi. 
    * @alias module:api/LinkManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPaymentLink operation.
     * @callback module:api/LinkManagementApi~createPaymentLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a payment link.
     * @param {Object} opts Optional parameters
     * @param {module:model/LinkCreateRequest} [linkCreateRequest] 
     * @param {module:api/LinkManagementApi~createPaymentLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkResponse}
     */
    createPaymentLink(opts, callback) {
      opts = opts || {};
      let postBody = opts['linkCreateRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['createAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LinkResponse;
      return this.apiClient.callApi(
        '/v1/payment-links', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentLink operation.
     * @callback module:api/LinkManagementApi~getPaymentLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payment link by id.
     * @param {String} linkId 
     * @param {module:api/LinkManagementApi~getPaymentLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkResponse}
     */
    getPaymentLink(linkId, callback) {
      let postBody = null;
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling getPaymentLink");
      }

      let pathParams = {
        'linkId': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['getSingleAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinkResponse;
      return this.apiClient.callApi(
        '/v1/payment-links/{linkId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentLinks operation.
     * @callback module:api/LinkManagementApi~getPaymentLinksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageLinkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all payment links.
     * @param {String} merchantId 
     * @param {String} accountId 
     * @param {String} portalId 
     * @param {String} mode 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [limit = 25)] 
     * @param {module:api/LinkManagementApi~getPaymentLinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageLinkResponse}
     */
    getPaymentLinks(merchantId, accountId, portalId, mode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling getPaymentLinks");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getPaymentLinks");
      }
      // verify the required parameter 'portalId' is set
      if (portalId === undefined || portalId === null) {
        throw new Error("Missing the required parameter 'portalId' when calling getPaymentLinks");
      }
      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling getPaymentLinks");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'merchantId': merchantId,
        'accountId': accountId,
        'portalId': portalId,
        'mode': mode
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['getMultipleAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageLinkResponse;
      return this.apiClient.callApi(
        '/v1/payment-links', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePaymentLink operation.
     * @callback module:api/LinkManagementApi~updatePaymentLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a payment link.
     * @param {String} linkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/LinkCreateRequest} [linkCreateRequest] 
     * @param {module:api/LinkManagementApi~updatePaymentLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkResponse}
     */
    updatePaymentLink(linkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['linkCreateRequest'];
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling updatePaymentLink");
      }

      let pathParams = {
        'linkId': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['createAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LinkResponse;
      return this.apiClient.callApi(
        '/v1/payment-links/{linkId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
