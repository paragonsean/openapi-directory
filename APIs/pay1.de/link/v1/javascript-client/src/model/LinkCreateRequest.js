/**
 * PAYONE Link API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@payone.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddressDataDto from './AddressDataDto';
import CartItemDto from './CartItemDto';
import InvoiceInformationDto from './InvoiceInformationDto';

/**
 * The LinkCreateRequest model module.
 * @module model/LinkCreateRequest
 * @version v1
 */
class LinkCreateRequest {
    /**
     * Constructs a new <code>LinkCreateRequest</code>.
     * a link create request
     * @alias module:model/LinkCreateRequest
     * @param accountId {String} identifier for the subaccount
     * @param currency {module:model/LinkCreateRequest.CurrencyEnum} currency code
     * @param merchantId {String} identifier for the merchant
     * @param mode {module:model/LinkCreateRequest.ModeEnum} execution mode
     * @param portalId {String} identifier for the portal
     * @param reference {String} payment reference number, has to be unique per merchant and mode
     * @param shoppingCart {Array.<module:model/CartItemDto>} 
     */
    constructor(accountId, currency, merchantId, mode, portalId, reference, shoppingCart) { 
        
        LinkCreateRequest.initialize(this, accountId, currency, merchantId, mode, portalId, reference, shoppingCart);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, currency, merchantId, mode, portalId, reference, shoppingCart) { 
        obj['accountId'] = accountId;
        obj['active'] = true;
        obj['currency'] = currency;
        obj['intent'] = 'authorization';
        obj['merchantId'] = merchantId;
        obj['mode'] = mode;
        obj['portalId'] = portalId;
        obj['reference'] = reference;
        obj['shoppingCart'] = shoppingCart;
    }

    /**
     * Constructs a <code>LinkCreateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinkCreateRequest} obj Optional instance to populate.
     * @return {module:model/LinkCreateRequest} The populated <code>LinkCreateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinkCreateRequest();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('backgroundImage')) {
                obj['backgroundImage'] = ApiClient.convertToType(data['backgroundImage'], 'String');
            }
            if (data.hasOwnProperty('billing')) {
                obj['billing'] = AddressDataDto.constructFromObject(data['billing']);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('errorUrl')) {
                obj['errorUrl'] = ApiClient.convertToType(data['errorUrl'], 'String');
            }
            if (data.hasOwnProperty('expiration')) {
                obj['expiration'] = ApiClient.convertToType(data['expiration'], 'Date');
            }
            if (data.hasOwnProperty('intent')) {
                obj['intent'] = ApiClient.convertToType(data['intent'], 'String');
            }
            if (data.hasOwnProperty('invoiceInformation')) {
                obj['invoiceInformation'] = InvoiceInformationDto.constructFromObject(data['invoiceInformation']);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = ApiClient.convertToType(data['logo'], 'String');
            }
            if (data.hasOwnProperty('merchantId')) {
                obj['merchantId'] = ApiClient.convertToType(data['merchantId'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('notifyUrl')) {
                obj['notifyUrl'] = ApiClient.convertToType(data['notifyUrl'], 'String');
            }
            if (data.hasOwnProperty('paymentMethods')) {
                obj['paymentMethods'] = ApiClient.convertToType(data['paymentMethods'], ['String']);
            }
            if (data.hasOwnProperty('portalId')) {
                obj['portalId'] = ApiClient.convertToType(data['portalId'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('shipping')) {
                obj['shipping'] = AddressDataDto.constructFromObject(data['shipping']);
            }
            if (data.hasOwnProperty('shoppingCart')) {
                obj['shoppingCart'] = ApiClient.convertToType(data['shoppingCart'], [CartItemDto]);
            }
            if (data.hasOwnProperty('successUrl')) {
                obj['successUrl'] = ApiClient.convertToType(data['successUrl'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinkCreateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinkCreateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LinkCreateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['backgroundImage'] && !(typeof data['backgroundImage'] === 'string' || data['backgroundImage'] instanceof String)) {
            throw new Error("Expected the field `backgroundImage` to be a primitive type in the JSON string but got " + data['backgroundImage']);
        }
        // validate the optional field `billing`
        if (data['billing']) { // data not null
          AddressDataDto.validateJSON(data['billing']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['errorUrl'] && !(typeof data['errorUrl'] === 'string' || data['errorUrl'] instanceof String)) {
            throw new Error("Expected the field `errorUrl` to be a primitive type in the JSON string but got " + data['errorUrl']);
        }
        // ensure the json data is a string
        if (data['intent'] && !(typeof data['intent'] === 'string' || data['intent'] instanceof String)) {
            throw new Error("Expected the field `intent` to be a primitive type in the JSON string but got " + data['intent']);
        }
        // validate the optional field `invoiceInformation`
        if (data['invoiceInformation']) { // data not null
          InvoiceInformationDto.validateJSON(data['invoiceInformation']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['logo'] && !(typeof data['logo'] === 'string' || data['logo'] instanceof String)) {
            throw new Error("Expected the field `logo` to be a primitive type in the JSON string but got " + data['logo']);
        }
        // ensure the json data is a string
        if (data['merchantId'] && !(typeof data['merchantId'] === 'string' || data['merchantId'] instanceof String)) {
            throw new Error("Expected the field `merchantId` to be a primitive type in the JSON string but got " + data['merchantId']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['notifyUrl'] && !(typeof data['notifyUrl'] === 'string' || data['notifyUrl'] instanceof String)) {
            throw new Error("Expected the field `notifyUrl` to be a primitive type in the JSON string but got " + data['notifyUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['paymentMethods'])) {
            throw new Error("Expected the field `paymentMethods` to be an array in the JSON data but got " + data['paymentMethods']);
        }
        // ensure the json data is a string
        if (data['portalId'] && !(typeof data['portalId'] === 'string' || data['portalId'] instanceof String)) {
            throw new Error("Expected the field `portalId` to be a primitive type in the JSON string but got " + data['portalId']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // validate the optional field `shipping`
        if (data['shipping']) { // data not null
          AddressDataDto.validateJSON(data['shipping']);
        }
        if (data['shoppingCart']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shoppingCart'])) {
                throw new Error("Expected the field `shoppingCart` to be an array in the JSON data but got " + data['shoppingCart']);
            }
            // validate the optional field `shoppingCart` (array)
            for (const item of data['shoppingCart']) {
                CartItemDto.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['successUrl'] && !(typeof data['successUrl'] === 'string' || data['successUrl'] instanceof String)) {
            throw new Error("Expected the field `successUrl` to be a primitive type in the JSON string but got " + data['successUrl']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}

LinkCreateRequest.RequiredProperties = ["accountId", "currency", "merchantId", "mode", "portalId", "reference", "shoppingCart"];

/**
 * identifier for the subaccount
 * @member {String} accountId
 */
LinkCreateRequest.prototype['accountId'] = undefined;

/**
 * link activation status
 * @member {Boolean} active
 * @default true
 */
LinkCreateRequest.prototype['active'] = true;

/**
 * backgroundImage css property
 * @member {String} backgroundImage
 */
LinkCreateRequest.prototype['backgroundImage'] = undefined;

/**
 * @member {module:model/AddressDataDto} billing
 */
LinkCreateRequest.prototype['billing'] = undefined;

/**
 * currency code
 * @member {module:model/LinkCreateRequest.CurrencyEnum} currency
 */
LinkCreateRequest.prototype['currency'] = undefined;

/**
 * free format description of the payment
 * @member {String} description
 */
LinkCreateRequest.prototype['description'] = undefined;

/**
 * email the invoice should be delivered to
 * @member {String} email
 */
LinkCreateRequest.prototype['email'] = undefined;

/**
 * final redirect after a final payment
 * @member {String} errorUrl
 */
LinkCreateRequest.prototype['errorUrl'] = undefined;

/**
 * link expiration date, the link will only be executable until end of that day
 * @member {Date} expiration
 */
LinkCreateRequest.prototype['expiration'] = undefined;

/**
 * designates the type of transaction that will be created
 * @member {module:model/LinkCreateRequest.IntentEnum} intent
 * @default 'authorization'
 */
LinkCreateRequest.prototype['intent'] = 'authorization';

/**
 * @member {module:model/InvoiceInformationDto} invoiceInformation
 */
LinkCreateRequest.prototype['invoiceInformation'] = undefined;

/**
 * link ISO language code
 * @member {module:model/LinkCreateRequest.LanguageEnum} language
 */
LinkCreateRequest.prototype['language'] = undefined;

/**
 * logo url
 * @member {String} logo
 */
LinkCreateRequest.prototype['logo'] = undefined;

/**
 * identifier for the merchant
 * @member {String} merchantId
 */
LinkCreateRequest.prototype['merchantId'] = undefined;

/**
 * execution mode
 * @member {module:model/LinkCreateRequest.ModeEnum} mode
 */
LinkCreateRequest.prototype['mode'] = undefined;

/**
 * Url where the notification will be send after link was executed
 * @member {String} notifyUrl
 */
LinkCreateRequest.prototype['notifyUrl'] = undefined;

/**
 * list of available payment methods
 * @member {Array.<module:model/LinkCreateRequest.PaymentMethodsEnum>} paymentMethods
 */
LinkCreateRequest.prototype['paymentMethods'] = undefined;

/**
 * identifier for the portal
 * @member {String} portalId
 */
LinkCreateRequest.prototype['portalId'] = undefined;

/**
 * payment reference number, has to be unique per merchant and mode
 * @member {String} reference
 */
LinkCreateRequest.prototype['reference'] = undefined;

/**
 * @member {module:model/AddressDataDto} shipping
 */
LinkCreateRequest.prototype['shipping'] = undefined;

/**
 * @member {Array.<module:model/CartItemDto>} shoppingCart
 */
LinkCreateRequest.prototype['shoppingCart'] = undefined;

/**
 * final redirect after a successful payment
 * @member {String} successUrl
 */
LinkCreateRequest.prototype['successUrl'] = undefined;

/**
 * identifier for the user
 * @member {String} userId
 */
LinkCreateRequest.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
LinkCreateRequest['CurrencyEnum'] = {

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL",

    /**
     * value: "DZD"
     * @const
     */
    "DZD": "DZD",

    /**
     * value: "ARS"
     * @const
     */
    "ARS": "ARS",

    /**
     * value: "AUD"
     * @const
     */
    "AUD": "AUD",

    /**
     * value: "BSD"
     * @const
     */
    "BSD": "BSD",

    /**
     * value: "BHD"
     * @const
     */
    "BHD": "BHD",

    /**
     * value: "BDT"
     * @const
     */
    "BDT": "BDT",

    /**
     * value: "AMD"
     * @const
     */
    "AMD": "AMD",

    /**
     * value: "BBD"
     * @const
     */
    "BBD": "BBD",

    /**
     * value: "BMD"
     * @const
     */
    "BMD": "BMD",

    /**
     * value: "BTN"
     * @const
     */
    "BTN": "BTN",

    /**
     * value: "BOB"
     * @const
     */
    "BOB": "BOB",

    /**
     * value: "BWP"
     * @const
     */
    "BWP": "BWP",

    /**
     * value: "BZD"
     * @const
     */
    "BZD": "BZD",

    /**
     * value: "SBD"
     * @const
     */
    "SBD": "SBD",

    /**
     * value: "BND"
     * @const
     */
    "BND": "BND",

    /**
     * value: "MMK"
     * @const
     */
    "MMK": "MMK",

    /**
     * value: "BIF"
     * @const
     */
    "BIF": "BIF",

    /**
     * value: "KHR"
     * @const
     */
    "KHR": "KHR",

    /**
     * value: "CAD"
     * @const
     */
    "CAD": "CAD",

    /**
     * value: "CVE"
     * @const
     */
    "CVE": "CVE",

    /**
     * value: "KYD"
     * @const
     */
    "KYD": "KYD",

    /**
     * value: "LKR"
     * @const
     */
    "LKR": "LKR",

    /**
     * value: "CLP"
     * @const
     */
    "CLP": "CLP",

    /**
     * value: "CNY"
     * @const
     */
    "CNY": "CNY",

    /**
     * value: "COP"
     * @const
     */
    "COP": "COP",

    /**
     * value: "KMF"
     * @const
     */
    "KMF": "KMF",

    /**
     * value: "CRC"
     * @const
     */
    "CRC": "CRC",

    /**
     * value: "HRK"
     * @const
     */
    "HRK": "HRK",

    /**
     * value: "CUP"
     * @const
     */
    "CUP": "CUP",

    /**
     * value: "CZK"
     * @const
     */
    "CZK": "CZK",

    /**
     * value: "DKK"
     * @const
     */
    "DKK": "DKK",

    /**
     * value: "DOP"
     * @const
     */
    "DOP": "DOP",

    /**
     * value: "SVC"
     * @const
     */
    "SVC": "SVC",

    /**
     * value: "ETB"
     * @const
     */
    "ETB": "ETB",

    /**
     * value: "ERN"
     * @const
     */
    "ERN": "ERN",

    /**
     * value: "FKP"
     * @const
     */
    "FKP": "FKP",

    /**
     * value: "FJD"
     * @const
     */
    "FJD": "FJD",

    /**
     * value: "DJF"
     * @const
     */
    "DJF": "DJF",

    /**
     * value: "GMD"
     * @const
     */
    "GMD": "GMD",

    /**
     * value: "GIP"
     * @const
     */
    "GIP": "GIP",

    /**
     * value: "GTQ"
     * @const
     */
    "GTQ": "GTQ",

    /**
     * value: "GNF"
     * @const
     */
    "GNF": "GNF",

    /**
     * value: "GYD"
     * @const
     */
    "GYD": "GYD",

    /**
     * value: "HTG"
     * @const
     */
    "HTG": "HTG",

    /**
     * value: "HNL"
     * @const
     */
    "HNL": "HNL",

    /**
     * value: "HKD"
     * @const
     */
    "HKD": "HKD",

    /**
     * value: "HUF"
     * @const
     */
    "HUF": "HUF",

    /**
     * value: "ISK"
     * @const
     */
    "ISK": "ISK",

    /**
     * value: "INR"
     * @const
     */
    "INR": "INR",

    /**
     * value: "IDR"
     * @const
     */
    "IDR": "IDR",

    /**
     * value: "IRR"
     * @const
     */
    "IRR": "IRR",

    /**
     * value: "IQD"
     * @const
     */
    "IQD": "IQD",

    /**
     * value: "ILS"
     * @const
     */
    "ILS": "ILS",

    /**
     * value: "JMD"
     * @const
     */
    "JMD": "JMD",

    /**
     * value: "JPY"
     * @const
     */
    "JPY": "JPY",

    /**
     * value: "KZT"
     * @const
     */
    "KZT": "KZT",

    /**
     * value: "JOD"
     * @const
     */
    "JOD": "JOD",

    /**
     * value: "KES"
     * @const
     */
    "KES": "KES",

    /**
     * value: "KPW"
     * @const
     */
    "KPW": "KPW",

    /**
     * value: "KRW"
     * @const
     */
    "KRW": "KRW",

    /**
     * value: "KWD"
     * @const
     */
    "KWD": "KWD",

    /**
     * value: "KGS"
     * @const
     */
    "KGS": "KGS",

    /**
     * value: "LAK"
     * @const
     */
    "LAK": "LAK",

    /**
     * value: "LBP"
     * @const
     */
    "LBP": "LBP",

    /**
     * value: "LSL"
     * @const
     */
    "LSL": "LSL",

    /**
     * value: "LRD"
     * @const
     */
    "LRD": "LRD",

    /**
     * value: "LYD"
     * @const
     */
    "LYD": "LYD",

    /**
     * value: "MOP"
     * @const
     */
    "MOP": "MOP",

    /**
     * value: "MWK"
     * @const
     */
    "MWK": "MWK",

    /**
     * value: "MYR"
     * @const
     */
    "MYR": "MYR",

    /**
     * value: "MVR"
     * @const
     */
    "MVR": "MVR",

    /**
     * value: "MUR"
     * @const
     */
    "MUR": "MUR",

    /**
     * value: "MXN"
     * @const
     */
    "MXN": "MXN",

    /**
     * value: "MNT"
     * @const
     */
    "MNT": "MNT",

    /**
     * value: "MDL"
     * @const
     */
    "MDL": "MDL",

    /**
     * value: "MAD"
     * @const
     */
    "MAD": "MAD",

    /**
     * value: "OMR"
     * @const
     */
    "OMR": "OMR",

    /**
     * value: "NAD"
     * @const
     */
    "NAD": "NAD",

    /**
     * value: "NPR"
     * @const
     */
    "NPR": "NPR",

    /**
     * value: "ANG"
     * @const
     */
    "ANG": "ANG",

    /**
     * value: "AWG"
     * @const
     */
    "AWG": "AWG",

    /**
     * value: "VUV"
     * @const
     */
    "VUV": "VUV",

    /**
     * value: "NZD"
     * @const
     */
    "NZD": "NZD",

    /**
     * value: "NIO"
     * @const
     */
    "NIO": "NIO",

    /**
     * value: "NGN"
     * @const
     */
    "NGN": "NGN",

    /**
     * value: "NOK"
     * @const
     */
    "NOK": "NOK",

    /**
     * value: "PKR"
     * @const
     */
    "PKR": "PKR",

    /**
     * value: "PAB"
     * @const
     */
    "PAB": "PAB",

    /**
     * value: "PGK"
     * @const
     */
    "PGK": "PGK",

    /**
     * value: "PYG"
     * @const
     */
    "PYG": "PYG",

    /**
     * value: "PEN"
     * @const
     */
    "PEN": "PEN",

    /**
     * value: "PHP"
     * @const
     */
    "PHP": "PHP",

    /**
     * value: "QAR"
     * @const
     */
    "QAR": "QAR",

    /**
     * value: "RUB"
     * @const
     */
    "RUB": "RUB",

    /**
     * value: "RWF"
     * @const
     */
    "RWF": "RWF",

    /**
     * value: "SHP"
     * @const
     */
    "SHP": "SHP",

    /**
     * value: "SAR"
     * @const
     */
    "SAR": "SAR",

    /**
     * value: "SCR"
     * @const
     */
    "SCR": "SCR",

    /**
     * value: "SLL"
     * @const
     */
    "SLL": "SLL",

    /**
     * value: "SGD"
     * @const
     */
    "SGD": "SGD",

    /**
     * value: "VND"
     * @const
     */
    "VND": "VND",

    /**
     * value: "SOS"
     * @const
     */
    "SOS": "SOS",

    /**
     * value: "ZAR"
     * @const
     */
    "ZAR": "ZAR",

    /**
     * value: "SSP"
     * @const
     */
    "SSP": "SSP",

    /**
     * value: "SZL"
     * @const
     */
    "SZL": "SZL",

    /**
     * value: "SEK"
     * @const
     */
    "SEK": "SEK",

    /**
     * value: "CHF"
     * @const
     */
    "CHF": "CHF",

    /**
     * value: "SYP"
     * @const
     */
    "SYP": "SYP",

    /**
     * value: "THB"
     * @const
     */
    "THB": "THB",

    /**
     * value: "TOP"
     * @const
     */
    "TOP": "TOP",

    /**
     * value: "TTD"
     * @const
     */
    "TTD": "TTD",

    /**
     * value: "AED"
     * @const
     */
    "AED": "AED",

    /**
     * value: "TND"
     * @const
     */
    "TND": "TND",

    /**
     * value: "UGX"
     * @const
     */
    "UGX": "UGX",

    /**
     * value: "MKD"
     * @const
     */
    "MKD": "MKD",

    /**
     * value: "EGP"
     * @const
     */
    "EGP": "EGP",

    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",

    /**
     * value: "TZS"
     * @const
     */
    "TZS": "TZS",

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD",

    /**
     * value: "UYU"
     * @const
     */
    "UYU": "UYU",

    /**
     * value: "UZS"
     * @const
     */
    "UZS": "UZS",

    /**
     * value: "WST"
     * @const
     */
    "WST": "WST",

    /**
     * value: "YER"
     * @const
     */
    "YER": "YER",

    /**
     * value: "TWD"
     * @const
     */
    "TWD": "TWD",

    /**
     * value: "UYW"
     * @const
     */
    "UYW": "UYW",

    /**
     * value: "VES"
     * @const
     */
    "VES": "VES",

    /**
     * value: "MRU"
     * @const
     */
    "MRU": "MRU",

    /**
     * value: "STN"
     * @const
     */
    "STN": "STN",

    /**
     * value: "CUC"
     * @const
     */
    "CUC": "CUC",

    /**
     * value: "ZWL"
     * @const
     */
    "ZWL": "ZWL",

    /**
     * value: "BYN"
     * @const
     */
    "BYN": "BYN",

    /**
     * value: "TMT"
     * @const
     */
    "TMT": "TMT",

    /**
     * value: "GHS"
     * @const
     */
    "GHS": "GHS",

    /**
     * value: "SDG"
     * @const
     */
    "SDG": "SDG",

    /**
     * value: "UYI"
     * @const
     */
    "UYI": "UYI",

    /**
     * value: "RSD"
     * @const
     */
    "RSD": "RSD",

    /**
     * value: "MZN"
     * @const
     */
    "MZN": "MZN",

    /**
     * value: "AZN"
     * @const
     */
    "AZN": "AZN",

    /**
     * value: "RON"
     * @const
     */
    "RON": "RON",

    /**
     * value: "CHE"
     * @const
     */
    "CHE": "CHE",

    /**
     * value: "CHW"
     * @const
     */
    "CHW": "CHW",

    /**
     * value: "TRY"
     * @const
     */
    "TRY": "TRY",

    /**
     * value: "XAF"
     * @const
     */
    "XAF": "XAF",

    /**
     * value: "XCD"
     * @const
     */
    "XCD": "XCD",

    /**
     * value: "XOF"
     * @const
     */
    "XOF": "XOF",

    /**
     * value: "XPF"
     * @const
     */
    "XPF": "XPF",

    /**
     * value: "XBA"
     * @const
     */
    "XBA": "XBA",

    /**
     * value: "XBB"
     * @const
     */
    "XBB": "XBB",

    /**
     * value: "XBC"
     * @const
     */
    "XBC": "XBC",

    /**
     * value: "XBD"
     * @const
     */
    "XBD": "XBD",

    /**
     * value: "XAU"
     * @const
     */
    "XAU": "XAU",

    /**
     * value: "XDR"
     * @const
     */
    "XDR": "XDR",

    /**
     * value: "XAG"
     * @const
     */
    "XAG": "XAG",

    /**
     * value: "XPT"
     * @const
     */
    "XPT": "XPT",

    /**
     * value: "XTS"
     * @const
     */
    "XTS": "XTS",

    /**
     * value: "XPD"
     * @const
     */
    "XPD": "XPD",

    /**
     * value: "XUA"
     * @const
     */
    "XUA": "XUA",

    /**
     * value: "ZMW"
     * @const
     */
    "ZMW": "ZMW",

    /**
     * value: "SRD"
     * @const
     */
    "SRD": "SRD",

    /**
     * value: "MGA"
     * @const
     */
    "MGA": "MGA",

    /**
     * value: "COU"
     * @const
     */
    "COU": "COU",

    /**
     * value: "AFN"
     * @const
     */
    "AFN": "AFN",

    /**
     * value: "TJS"
     * @const
     */
    "TJS": "TJS",

    /**
     * value: "AOA"
     * @const
     */
    "AOA": "AOA",

    /**
     * value: "BGN"
     * @const
     */
    "BGN": "BGN",

    /**
     * value: "CDF"
     * @const
     */
    "CDF": "CDF",

    /**
     * value: "BAM"
     * @const
     */
    "BAM": "BAM",

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "MXV"
     * @const
     */
    "MXV": "MXV",

    /**
     * value: "UAH"
     * @const
     */
    "UAH": "UAH",

    /**
     * value: "GEL"
     * @const
     */
    "GEL": "GEL",

    /**
     * value: "BOV"
     * @const
     */
    "BOV": "BOV",

    /**
     * value: "PLN"
     * @const
     */
    "PLN": "PLN",

    /**
     * value: "BRL"
     * @const
     */
    "BRL": "BRL",

    /**
     * value: "CLF"
     * @const
     */
    "CLF": "CLF",

    /**
     * value: "XSU"
     * @const
     */
    "XSU": "XSU",

    /**
     * value: "USN"
     * @const
     */
    "USN": "USN"
};


/**
 * Allowed values for the <code>intent</code> property.
 * @enum {String}
 * @readonly
 */
LinkCreateRequest['IntentEnum'] = {

    /**
     * value: "authorization"
     * @const
     */
    "authorization": "authorization",

    /**
     * value: "preauthorization"
     * @const
     */
    "preauthorization": "preauthorization"
};


/**
 * Allowed values for the <code>language</code> property.
 * @enum {String}
 * @readonly
 */
LinkCreateRequest['LanguageEnum'] = {

    /**
     * value: "de_DE"
     * @const
     */
    "de_DE": "de_DE",

    /**
     * value: "en_US"
     * @const
     */
    "en_US": "en_US"
};


/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
LinkCreateRequest['ModeEnum'] = {

    /**
     * value: "live"
     * @const
     */
    "live": "live",

    /**
     * value: "test"
     * @const
     */
    "test": "test"
};


/**
 * Allowed values for the <code>paymentMethods</code> property.
 * @enum {String}
 * @readonly
 */
LinkCreateRequest['PaymentMethodsEnum'] = {

    /**
     * value: "visa"
     * @const
     */
    "visa": "visa",

    /**
     * value: "mastercard"
     * @const
     */
    "mastercard": "mastercard",

    /**
     * value: "amex"
     * @const
     */
    "amex": "amex",

    /**
     * value: "paypal"
     * @const
     */
    "paypal": "paypal",

    /**
     * value: "sofort"
     * @const
     */
    "sofort": "sofort",

    /**
     * value: "paydirekt"
     * @const
     */
    "paydirekt": "paydirekt",

    /**
     * value: "postfinance-e"
     * @const
     */
    "postfinance-e": "postfinance-e",

    /**
     * value: "postfinance-card"
     * @const
     */
    "postfinance-card": "postfinance-card",

    /**
     * value: "bancontact"
     * @const
     */
    "bancontact": "bancontact",

    /**
     * value: "przelewy24"
     * @const
     */
    "przelewy24": "przelewy24",

    /**
     * value: "alipay"
     * @const
     */
    "alipay": "alipay",

    /**
     * value: "ideal"
     * @const
     */
    "ideal": "ideal",

    /**
     * value: "eps"
     * @const
     */
    "eps": "eps",

    /**
     * value: "giropay"
     * @const
     */
    "giropay": "giropay",

    /**
     * value: "sepa"
     * @const
     */
    "sepa": "sepa"
};



export default LinkCreateRequest;

