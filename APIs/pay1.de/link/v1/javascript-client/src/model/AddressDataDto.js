/**
 * PAYONE Link API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@payone.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AddressDataDto model module.
 * @module model/AddressDataDto
 * @version v1
 */
class AddressDataDto {
    /**
     * Constructs a new <code>AddressDataDto</code>.
     * @alias module:model/AddressDataDto
     */
    constructor() { 
        
        AddressDataDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AddressDataDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddressDataDto} obj Optional instance to populate.
     * @return {module:model/AddressDataDto} The populated <code>AddressDataDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddressDataDto();

            if (data.hasOwnProperty('addressAddition')) {
                obj['addressAddition'] = ApiClient.convertToType(data['addressAddition'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddressDataDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddressDataDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['addressAddition'] && !(typeof data['addressAddition'] === 'string' || data['addressAddition'] instanceof String)) {
            throw new Error("Expected the field `addressAddition` to be a primitive type in the JSON string but got " + data['addressAddition']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }
        // ensure the json data is a string
        if (data['zip'] && !(typeof data['zip'] === 'string' || data['zip'] instanceof String)) {
            throw new Error("Expected the field `zip` to be a primitive type in the JSON string but got " + data['zip']);
        }

        return true;
    }


}



/**
 * customer additional address line
 * @member {String} addressAddition
 */
AddressDataDto.prototype['addressAddition'] = undefined;

/**
 * customer city
 * @member {String} city
 */
AddressDataDto.prototype['city'] = undefined;

/**
 * customer company name
 * @member {String} company
 */
AddressDataDto.prototype['company'] = undefined;

/**
 * customer country code (2 letter ISO-3166 code)
 * @member {String} country
 */
AddressDataDto.prototype['country'] = undefined;

/**
 * customer first name
 * @member {String} firstName
 */
AddressDataDto.prototype['firstName'] = undefined;

/**
 * customer last name
 * @member {String} lastName
 */
AddressDataDto.prototype['lastName'] = undefined;

/**
 * customer state code
 * @member {String} state
 */
AddressDataDto.prototype['state'] = undefined;

/**
 * customer street name
 * @member {String} street
 */
AddressDataDto.prototype['street'] = undefined;

/**
 * customer postcode
 * @member {String} zip
 */
AddressDataDto.prototype['zip'] = undefined;






export default AddressDataDto;

