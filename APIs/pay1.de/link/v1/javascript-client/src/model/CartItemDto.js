/**
 * PAYONE Link API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@payone.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CartItemDto model module.
 * @module model/CartItemDto
 * @version v1
 */
class CartItemDto {
    /**
     * Constructs a new <code>CartItemDto</code>.
     * @alias module:model/CartItemDto
     * @param number {String} item number
     * @param price {Number} gross price of single item
     * @param quantity {Number} total number of ordered items
     * @param type {module:model/CartItemDto.TypeEnum} item type
     */
    constructor(number, price, quantity, type) { 
        
        CartItemDto.initialize(this, number, price, quantity, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, number, price, quantity, type) { 
        obj['number'] = number;
        obj['price'] = price;
        obj['quantity'] = quantity;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CartItemDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CartItemDto} obj Optional instance to populate.
     * @return {module:model/CartItemDto} The populated <code>CartItemDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CartItemDto();

            if (data.hasOwnProperty('deliveryDateEnd')) {
                obj['deliveryDateEnd'] = ApiClient.convertToType(data['deliveryDateEnd'], 'Date');
            }
            if (data.hasOwnProperty('deliveryDateStart')) {
                obj['deliveryDateStart'] = ApiClient.convertToType(data['deliveryDateStart'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('vatRate')) {
                obj['vatRate'] = ApiClient.convertToType(data['vatRate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CartItemDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CartItemDto</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CartItemDto.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

CartItemDto.RequiredProperties = ["number", "price", "quantity", "type"];

/**
 * delivery period end date
 * @member {Date} deliveryDateEnd
 */
CartItemDto.prototype['deliveryDateEnd'] = undefined;

/**
 * delivery date
 * @member {Date} deliveryDateStart
 */
CartItemDto.prototype['deliveryDateStart'] = undefined;

/**
 * item description
 * @member {String} description
 */
CartItemDto.prototype['description'] = undefined;

/**
 * item number
 * @member {String} number
 */
CartItemDto.prototype['number'] = undefined;

/**
 * gross price of single item
 * @member {Number} price
 */
CartItemDto.prototype['price'] = undefined;

/**
 * total number of ordered items
 * @member {Number} quantity
 */
CartItemDto.prototype['quantity'] = undefined;

/**
 * item type
 * @member {module:model/CartItemDto.TypeEnum} type
 */
CartItemDto.prototype['type'] = undefined;

/**
 * vat rate (<100 in %, >=100 in bp)
 * @member {Number} vatRate
 */
CartItemDto.prototype['vatRate'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CartItemDto['TypeEnum'] = {

    /**
     * value: "goods"
     * @const
     */
    "goods": "goods",

    /**
     * value: "shipment"
     * @const
     */
    "shipment": "shipment",

    /**
     * value: "handling"
     * @const
     */
    "handling": "handling",

    /**
     * value: "voucher"
     * @const
     */
    "voucher": "voucher"
};



export default CartItemDto;

