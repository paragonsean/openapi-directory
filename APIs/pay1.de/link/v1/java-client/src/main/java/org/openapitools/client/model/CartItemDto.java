/*
 * PAYONE Link API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@payone.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CartItemDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:05.527924-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CartItemDto {
  public static final String SERIALIZED_NAME_DELIVERY_DATE_END = "deliveryDateEnd";
  @SerializedName(SERIALIZED_NAME_DELIVERY_DATE_END)
  private LocalDate deliveryDateEnd;

  public static final String SERIALIZED_NAME_DELIVERY_DATE_START = "deliveryDateStart";
  @SerializedName(SERIALIZED_NAME_DELIVERY_DATE_START)
  private LocalDate deliveryDateStart;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Long price;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Long quantity;

  /**
   * item type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    GOODS("goods"),
    
    SHIPMENT("shipment"),
    
    HANDLING("handling"),
    
    VOUCHER("voucher");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VAT_RATE = "vatRate";
  @SerializedName(SERIALIZED_NAME_VAT_RATE)
  private Long vatRate;

  public CartItemDto() {
  }

  public CartItemDto deliveryDateEnd(LocalDate deliveryDateEnd) {
    this.deliveryDateEnd = deliveryDateEnd;
    return this;
  }

  /**
   * delivery period end date
   * @return deliveryDateEnd
   */
  @javax.annotation.Nullable
  public LocalDate getDeliveryDateEnd() {
    return deliveryDateEnd;
  }

  public void setDeliveryDateEnd(LocalDate deliveryDateEnd) {
    this.deliveryDateEnd = deliveryDateEnd;
  }


  public CartItemDto deliveryDateStart(LocalDate deliveryDateStart) {
    this.deliveryDateStart = deliveryDateStart;
    return this;
  }

  /**
   * delivery date
   * @return deliveryDateStart
   */
  @javax.annotation.Nullable
  public LocalDate getDeliveryDateStart() {
    return deliveryDateStart;
  }

  public void setDeliveryDateStart(LocalDate deliveryDateStart) {
    this.deliveryDateStart = deliveryDateStart;
  }


  public CartItemDto description(String description) {
    this.description = description;
    return this;
  }

  /**
   * item description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CartItemDto number(String number) {
    this.number = number;
    return this;
  }

  /**
   * item number
   * @return number
   */
  @javax.annotation.Nonnull
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public CartItemDto price(Long price) {
    this.price = price;
    return this;
  }

  /**
   * gross price of single item
   * minimum: -1999999999
   * maximum: 1999999999
   * @return price
   */
  @javax.annotation.Nonnull
  public Long getPrice() {
    return price;
  }

  public void setPrice(Long price) {
    this.price = price;
  }


  public CartItemDto quantity(Long quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * total number of ordered items
   * minimum: 1
   * maximum: 999999
   * @return quantity
   */
  @javax.annotation.Nonnull
  public Long getQuantity() {
    return quantity;
  }

  public void setQuantity(Long quantity) {
    this.quantity = quantity;
  }


  public CartItemDto type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * item type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CartItemDto vatRate(Long vatRate) {
    this.vatRate = vatRate;
    return this;
  }

  /**
   * vat rate (&lt;100 in %, &gt;&#x3D;100 in bp)
   * minimum: 0
   * maximum: 9999
   * @return vatRate
   */
  @javax.annotation.Nullable
  public Long getVatRate() {
    return vatRate;
  }

  public void setVatRate(Long vatRate) {
    this.vatRate = vatRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartItemDto cartItemDto = (CartItemDto) o;
    return Objects.equals(this.deliveryDateEnd, cartItemDto.deliveryDateEnd) &&
        Objects.equals(this.deliveryDateStart, cartItemDto.deliveryDateStart) &&
        Objects.equals(this.description, cartItemDto.description) &&
        Objects.equals(this.number, cartItemDto.number) &&
        Objects.equals(this.price, cartItemDto.price) &&
        Objects.equals(this.quantity, cartItemDto.quantity) &&
        Objects.equals(this.type, cartItemDto.type) &&
        Objects.equals(this.vatRate, cartItemDto.vatRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deliveryDateEnd, deliveryDateStart, description, number, price, quantity, type, vatRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartItemDto {\n");
    sb.append("    deliveryDateEnd: ").append(toIndentedString(deliveryDateEnd)).append("\n");
    sb.append("    deliveryDateStart: ").append(toIndentedString(deliveryDateStart)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vatRate: ").append(toIndentedString(vatRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deliveryDateEnd");
    openapiFields.add("deliveryDateStart");
    openapiFields.add("description");
    openapiFields.add("number");
    openapiFields.add("price");
    openapiFields.add("quantity");
    openapiFields.add("type");
    openapiFields.add("vatRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CartItemDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CartItemDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CartItemDto is not found in the empty JSON string", CartItemDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CartItemDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CartItemDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CartItemDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CartItemDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CartItemDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CartItemDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CartItemDto.class));

       return (TypeAdapter<T>) new TypeAdapter<CartItemDto>() {
           @Override
           public void write(JsonWriter out, CartItemDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CartItemDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CartItemDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CartItemDto
   * @throws IOException if the JSON string is invalid with respect to CartItemDto
   */
  public static CartItemDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CartItemDto.class);
  }

  /**
   * Convert an instance of CartItemDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

