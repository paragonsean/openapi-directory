/*
 * PAYONE Link API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@payone.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddressDataDto;
import org.openapitools.client.model.CartItemDto;
import org.openapitools.client.model.InvoiceInformationDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LinkResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:05.527924-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LinkResponse {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active = true;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Long amount;

  public static final String SERIALIZED_NAME_BACKGROUND_IMAGE = "backgroundImage";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_IMAGE)
  private String backgroundImage;

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private AddressDataDto billing;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private Long created;

  /**
   * currency code
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
  public enum CurrencyEnum {
    ALL("ALL"),
    
    DZD("DZD"),
    
    ARS("ARS"),
    
    AUD("AUD"),
    
    BSD("BSD"),
    
    BHD("BHD"),
    
    BDT("BDT"),
    
    AMD("AMD"),
    
    BBD("BBD"),
    
    BMD("BMD"),
    
    BTN("BTN"),
    
    BOB("BOB"),
    
    BWP("BWP"),
    
    BZD("BZD"),
    
    SBD("SBD"),
    
    BND("BND"),
    
    MMK("MMK"),
    
    BIF("BIF"),
    
    KHR("KHR"),
    
    CAD("CAD"),
    
    CVE("CVE"),
    
    KYD("KYD"),
    
    LKR("LKR"),
    
    CLP("CLP"),
    
    CNY("CNY"),
    
    COP("COP"),
    
    KMF("KMF"),
    
    CRC("CRC"),
    
    HRK("HRK"),
    
    CUP("CUP"),
    
    CZK("CZK"),
    
    DKK("DKK"),
    
    DOP("DOP"),
    
    SVC("SVC"),
    
    ETB("ETB"),
    
    ERN("ERN"),
    
    FKP("FKP"),
    
    FJD("FJD"),
    
    DJF("DJF"),
    
    GMD("GMD"),
    
    GIP("GIP"),
    
    GTQ("GTQ"),
    
    GNF("GNF"),
    
    GYD("GYD"),
    
    HTG("HTG"),
    
    HNL("HNL"),
    
    HKD("HKD"),
    
    HUF("HUF"),
    
    ISK("ISK"),
    
    INR("INR"),
    
    IDR("IDR"),
    
    IRR("IRR"),
    
    IQD("IQD"),
    
    ILS("ILS"),
    
    JMD("JMD"),
    
    JPY("JPY"),
    
    KZT("KZT"),
    
    JOD("JOD"),
    
    KES("KES"),
    
    KPW("KPW"),
    
    KRW("KRW"),
    
    KWD("KWD"),
    
    KGS("KGS"),
    
    LAK("LAK"),
    
    LBP("LBP"),
    
    LSL("LSL"),
    
    LRD("LRD"),
    
    LYD("LYD"),
    
    MOP("MOP"),
    
    MWK("MWK"),
    
    MYR("MYR"),
    
    MVR("MVR"),
    
    MUR("MUR"),
    
    MXN("MXN"),
    
    MNT("MNT"),
    
    MDL("MDL"),
    
    MAD("MAD"),
    
    OMR("OMR"),
    
    NAD("NAD"),
    
    NPR("NPR"),
    
    ANG("ANG"),
    
    AWG("AWG"),
    
    VUV("VUV"),
    
    NZD("NZD"),
    
    NIO("NIO"),
    
    NGN("NGN"),
    
    NOK("NOK"),
    
    PKR("PKR"),
    
    PAB("PAB"),
    
    PGK("PGK"),
    
    PYG("PYG"),
    
    PEN("PEN"),
    
    PHP("PHP"),
    
    QAR("QAR"),
    
    RUB("RUB"),
    
    RWF("RWF"),
    
    SHP("SHP"),
    
    SAR("SAR"),
    
    SCR("SCR"),
    
    SLL("SLL"),
    
    SGD("SGD"),
    
    VND("VND"),
    
    SOS("SOS"),
    
    ZAR("ZAR"),
    
    SSP("SSP"),
    
    SZL("SZL"),
    
    SEK("SEK"),
    
    CHF("CHF"),
    
    SYP("SYP"),
    
    THB("THB"),
    
    TOP("TOP"),
    
    TTD("TTD"),
    
    AED("AED"),
    
    TND("TND"),
    
    UGX("UGX"),
    
    MKD("MKD"),
    
    EGP("EGP"),
    
    GBP("GBP"),
    
    TZS("TZS"),
    
    USD("USD"),
    
    UYU("UYU"),
    
    UZS("UZS"),
    
    WST("WST"),
    
    YER("YER"),
    
    TWD("TWD"),
    
    UYW("UYW"),
    
    VES("VES"),
    
    MRU("MRU"),
    
    STN("STN"),
    
    CUC("CUC"),
    
    ZWL("ZWL"),
    
    BYN("BYN"),
    
    TMT("TMT"),
    
    GHS("GHS"),
    
    SDG("SDG"),
    
    UYI("UYI"),
    
    RSD("RSD"),
    
    MZN("MZN"),
    
    AZN("AZN"),
    
    RON("RON"),
    
    CHE("CHE"),
    
    CHW("CHW"),
    
    TRY("TRY"),
    
    XAF("XAF"),
    
    XCD("XCD"),
    
    XOF("XOF"),
    
    XPF("XPF"),
    
    XBA("XBA"),
    
    XBB("XBB"),
    
    XBC("XBC"),
    
    XBD("XBD"),
    
    XAU("XAU"),
    
    XDR("XDR"),
    
    XAG("XAG"),
    
    XPT("XPT"),
    
    XTS("XTS"),
    
    XPD("XPD"),
    
    XUA("XUA"),
    
    ZMW("ZMW"),
    
    SRD("SRD"),
    
    MGA("MGA"),
    
    COU("COU"),
    
    AFN("AFN"),
    
    TJS("TJS"),
    
    AOA("AOA"),
    
    BGN("BGN"),
    
    CDF("CDF"),
    
    BAM("BAM"),
    
    EUR("EUR"),
    
    MXV("MXV"),
    
    UAH("UAH"),
    
    GEL("GEL"),
    
    BOV("BOV"),
    
    PLN("PLN"),
    
    BRL("BRL"),
    
    CLF("CLF"),
    
    XSU("XSU"),
    
    USN("USN");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ERROR_URL = "errorUrl";
  @SerializedName(SERIALIZED_NAME_ERROR_URL)
  private String errorUrl;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private LocalDate expiration;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private String hash;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * designates the type of transaction that will be created
   */
  @JsonAdapter(IntentEnum.Adapter.class)
  public enum IntentEnum {
    AUTHORIZATION("authorization"),
    
    PREAUTHORIZATION("preauthorization");

    private String value;

    IntentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IntentEnum fromValue(String value) {
      for (IntentEnum b : IntentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IntentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IntentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IntentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTENT = "intent";
  @SerializedName(SERIALIZED_NAME_INTENT)
  private IntentEnum intent = IntentEnum.AUTHORIZATION;

  public static final String SERIALIZED_NAME_INVOICE_INFORMATION = "invoiceInformation";
  @SerializedName(SERIALIZED_NAME_INVOICE_INFORMATION)
  private InvoiceInformationDto invoiceInformation;

  /**
   * link ISO language code
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
  public enum LanguageEnum {
    DE_DE("de_DE"),
    
    EN_US("en_US");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LanguageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private LanguageEnum language;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  /**
   * execution mode
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    LIVE("live"),
    
    TEST("test");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private Long modified;

  public static final String SERIALIZED_NAME_NOTIFY_URL = "notifyUrl";
  @SerializedName(SERIALIZED_NAME_NOTIFY_URL)
  private String notifyUrl;

  /**
   * available payment methods
   */
  @JsonAdapter(PaymentMethodEnum.Adapter.class)
  public enum PaymentMethodEnum {
    VISA("visa"),
    
    MASTERCARD("mastercard"),
    
    AMEX("amex"),
    
    PAYPAL("paypal"),
    
    SOFORT("sofort"),
    
    PAYDIREKT("paydirekt"),
    
    POSTFINANCE_E("postfinance-e"),
    
    POSTFINANCE_CARD("postfinance-card"),
    
    BANCONTACT("bancontact"),
    
    PRZELEWY24("przelewy24"),
    
    ALIPAY("alipay"),
    
    IDEAL("ideal"),
    
    EPS("eps"),
    
    GIROPAY("giropay"),
    
    SEPA("sepa");

    private String value;

    PaymentMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentMethodEnum fromValue(String value) {
      for (PaymentMethodEnum b : PaymentMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "paymentMethod";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private PaymentMethodEnum paymentMethod;

  /**
   * available payment methods
   */
  @JsonAdapter(PaymentMethodsEnum.Adapter.class)
  public enum PaymentMethodsEnum {
    VISA("visa"),
    
    MASTERCARD("mastercard"),
    
    AMEX("amex"),
    
    PAYPAL("paypal"),
    
    SOFORT("sofort"),
    
    PAYDIREKT("paydirekt"),
    
    POSTFINANCE_E("postfinance-e"),
    
    POSTFINANCE_CARD("postfinance-card"),
    
    BANCONTACT("bancontact"),
    
    PRZELEWY24("przelewy24"),
    
    ALIPAY("alipay"),
    
    IDEAL("ideal"),
    
    EPS("eps"),
    
    GIROPAY("giropay"),
    
    SEPA("sepa");

    private String value;

    PaymentMethodsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentMethodsEnum fromValue(String value) {
      for (PaymentMethodsEnum b : PaymentMethodsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentMethodsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentMethodsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentMethodsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentMethodsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentMethodsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_METHODS = "paymentMethods";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHODS)
  private List<PaymentMethodsEnum> paymentMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_PROCESS = "paymentProcess";
  @SerializedName(SERIALIZED_NAME_PAYMENT_PROCESS)
  private String paymentProcess;

  public static final String SERIALIZED_NAME_PORTAL_ID = "portalId";
  @SerializedName(SERIALIZED_NAME_PORTAL_ID)
  private String portalId;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirectUrl";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_SHIPPING = "shipping";
  @SerializedName(SERIALIZED_NAME_SHIPPING)
  private AddressDataDto shipping;

  public static final String SERIALIZED_NAME_SHOPPING_CART = "shoppingCart";
  @SerializedName(SERIALIZED_NAME_SHOPPING_CART)
  private List<CartItemDto> shoppingCart = new ArrayList<>();

  /**
   * link status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    READY("ready"),
    
    CREATED("created"),
    
    EXECUTED("executed"),
    
    EXPIRED("expired"),
    
    DEACTIVATED("deactivated");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUCCESS_URL = "successUrl";
  @SerializedName(SERIALIZED_NAME_SUCCESS_URL)
  private String successUrl;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public LinkResponse() {
  }

  public LinkResponse accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * identifier for the subaccount
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public LinkResponse active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * link activation status
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public LinkResponse amount(Long amount) {
    this.amount = amount;
    return this;
  }

  /**
   * total amount of all shopping cart items in lowest denomination
   * minimum: 1
   * maximum: 1999999999
   * @return amount
   */
  @javax.annotation.Nullable
  public Long getAmount() {
    return amount;
  }

  public void setAmount(Long amount) {
    this.amount = amount;
  }


  public LinkResponse backgroundImage(String backgroundImage) {
    this.backgroundImage = backgroundImage;
    return this;
  }

  /**
   * backgroundImage css property
   * @return backgroundImage
   */
  @javax.annotation.Nullable
  public String getBackgroundImage() {
    return backgroundImage;
  }

  public void setBackgroundImage(String backgroundImage) {
    this.backgroundImage = backgroundImage;
  }


  public LinkResponse billing(AddressDataDto billing) {
    this.billing = billing;
    return this;
  }

  /**
   * Get billing
   * @return billing
   */
  @javax.annotation.Nullable
  public AddressDataDto getBilling() {
    return billing;
  }

  public void setBilling(AddressDataDto billing) {
    this.billing = billing;
  }


  public LinkResponse created(Long created) {
    this.created = created;
    return this;
  }

  /**
   * created time in ISO 8601 format
   * @return created
   */
  @javax.annotation.Nullable
  public Long getCreated() {
    return created;
  }

  public void setCreated(Long created) {
    this.created = created;
  }


  public LinkResponse currency(CurrencyEnum currency) {
    this.currency = currency;
    return this;
  }

  /**
   * currency code
   * @return currency
   */
  @javax.annotation.Nullable
  public CurrencyEnum getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyEnum currency) {
    this.currency = currency;
  }


  public LinkResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * free format description of the payment
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public LinkResponse email(String email) {
    this.email = email;
    return this;
  }

  /**
   * customer email for invoices or payment notification
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public LinkResponse errorUrl(String errorUrl) {
    this.errorUrl = errorUrl;
    return this;
  }

  /**
   * final redirect after a failed payment
   * @return errorUrl
   */
  @javax.annotation.Nullable
  public String getErrorUrl() {
    return errorUrl;
  }

  public void setErrorUrl(String errorUrl) {
    this.errorUrl = errorUrl;
  }


  public LinkResponse expiration(LocalDate expiration) {
    this.expiration = expiration;
    return this;
  }

  /**
   * link expiration date, the link will only be executable until end of that day
   * @return expiration
   */
  @javax.annotation.Nullable
  public LocalDate getExpiration() {
    return expiration;
  }

  public void setExpiration(LocalDate expiration) {
    this.expiration = expiration;
  }


  public LinkResponse hash(String hash) {
    this.hash = hash;
    return this;
  }

  /**
   * hash for the client API
   * @return hash
   */
  @javax.annotation.Nullable
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }


  public LinkResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * link id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public LinkResponse intent(IntentEnum intent) {
    this.intent = intent;
    return this;
  }

  /**
   * designates the type of transaction that will be created
   * @return intent
   */
  @javax.annotation.Nullable
  public IntentEnum getIntent() {
    return intent;
  }

  public void setIntent(IntentEnum intent) {
    this.intent = intent;
  }


  public LinkResponse invoiceInformation(InvoiceInformationDto invoiceInformation) {
    this.invoiceInformation = invoiceInformation;
    return this;
  }

  /**
   * Get invoiceInformation
   * @return invoiceInformation
   */
  @javax.annotation.Nullable
  public InvoiceInformationDto getInvoiceInformation() {
    return invoiceInformation;
  }

  public void setInvoiceInformation(InvoiceInformationDto invoiceInformation) {
    this.invoiceInformation = invoiceInformation;
  }


  public LinkResponse language(LanguageEnum language) {
    this.language = language;
    return this;
  }

  /**
   * link ISO language code
   * @return language
   */
  @javax.annotation.Nullable
  public LanguageEnum getLanguage() {
    return language;
  }

  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }


  public LinkResponse link(String link) {
    this.link = link;
    return this;
  }

  /**
   * customer payment link
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public LinkResponse logo(String logo) {
    this.logo = logo;
    return this;
  }

  /**
   * logo url
   * @return logo
   */
  @javax.annotation.Nullable
  public String getLogo() {
    return logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }


  public LinkResponse merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  /**
   * identifier for the merchant
   * @return merchantId
   */
  @javax.annotation.Nullable
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public LinkResponse mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * execution mode
   * @return mode
   */
  @javax.annotation.Nullable
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public LinkResponse modified(Long modified) {
    this.modified = modified;
    return this;
  }

  /**
   * last modified time in ISO 8601 format
   * @return modified
   */
  @javax.annotation.Nullable
  public Long getModified() {
    return modified;
  }

  public void setModified(Long modified) {
    this.modified = modified;
  }


  public LinkResponse notifyUrl(String notifyUrl) {
    this.notifyUrl = notifyUrl;
    return this;
  }

  /**
   * notify url. If unset no notification will be send
   * @return notifyUrl
   */
  @javax.annotation.Nullable
  public String getNotifyUrl() {
    return notifyUrl;
  }

  public void setNotifyUrl(String notifyUrl) {
    this.notifyUrl = notifyUrl;
  }


  public LinkResponse paymentMethod(PaymentMethodEnum paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  /**
   * available payment methods
   * @return paymentMethod
   */
  @javax.annotation.Nullable
  public PaymentMethodEnum getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(PaymentMethodEnum paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public LinkResponse paymentMethods(List<PaymentMethodsEnum> paymentMethods) {
    this.paymentMethods = paymentMethods;
    return this;
  }

  public LinkResponse addPaymentMethodsItem(PaymentMethodsEnum paymentMethodsItem) {
    if (this.paymentMethods == null) {
      this.paymentMethods = new ArrayList<>();
    }
    this.paymentMethods.add(paymentMethodsItem);
    return this;
  }

  /**
   * list of available payment methods
   * @return paymentMethods
   */
  @javax.annotation.Nullable
  public List<PaymentMethodsEnum> getPaymentMethods() {
    return paymentMethods;
  }

  public void setPaymentMethods(List<PaymentMethodsEnum> paymentMethods) {
    this.paymentMethods = paymentMethods;
  }


  public LinkResponse paymentProcess(String paymentProcess) {
    this.paymentProcess = paymentProcess;
    return this;
  }

  /**
   * identifier of the created payment process.
   * @return paymentProcess
   */
  @javax.annotation.Nullable
  public String getPaymentProcess() {
    return paymentProcess;
  }

  public void setPaymentProcess(String paymentProcess) {
    this.paymentProcess = paymentProcess;
  }


  public LinkResponse portalId(String portalId) {
    this.portalId = portalId;
    return this;
  }

  /**
   * identifier for the portal
   * @return portalId
   */
  @javax.annotation.Nullable
  public String getPortalId() {
    return portalId;
  }

  public void setPortalId(String portalId) {
    this.portalId = portalId;
  }


  public LinkResponse redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * redirect url. empty if the payment process does not require a redirect.
   * @return redirectUrl
   */
  @javax.annotation.Nullable
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public LinkResponse reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * payment reference number, has to be unique per merchant and mode
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public LinkResponse shipping(AddressDataDto shipping) {
    this.shipping = shipping;
    return this;
  }

  /**
   * Get shipping
   * @return shipping
   */
  @javax.annotation.Nullable
  public AddressDataDto getShipping() {
    return shipping;
  }

  public void setShipping(AddressDataDto shipping) {
    this.shipping = shipping;
  }


  public LinkResponse shoppingCart(List<CartItemDto> shoppingCart) {
    this.shoppingCart = shoppingCart;
    return this;
  }

  public LinkResponse addShoppingCartItem(CartItemDto shoppingCartItem) {
    if (this.shoppingCart == null) {
      this.shoppingCart = new ArrayList<>();
    }
    this.shoppingCart.add(shoppingCartItem);
    return this;
  }

  /**
   * Get shoppingCart
   * @return shoppingCart
   */
  @javax.annotation.Nullable
  public List<CartItemDto> getShoppingCart() {
    return shoppingCart;
  }

  public void setShoppingCart(List<CartItemDto> shoppingCart) {
    this.shoppingCart = shoppingCart;
  }


  public LinkResponse status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * link status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public LinkResponse successUrl(String successUrl) {
    this.successUrl = successUrl;
    return this;
  }

  /**
   * final redirect after a successful payment
   * @return successUrl
   */
  @javax.annotation.Nullable
  public String getSuccessUrl() {
    return successUrl;
  }

  public void setSuccessUrl(String successUrl) {
    this.successUrl = successUrl;
  }


  public LinkResponse userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * identifier of the created user.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkResponse linkResponse = (LinkResponse) o;
    return Objects.equals(this.accountId, linkResponse.accountId) &&
        Objects.equals(this.active, linkResponse.active) &&
        Objects.equals(this.amount, linkResponse.amount) &&
        Objects.equals(this.backgroundImage, linkResponse.backgroundImage) &&
        Objects.equals(this.billing, linkResponse.billing) &&
        Objects.equals(this.created, linkResponse.created) &&
        Objects.equals(this.currency, linkResponse.currency) &&
        Objects.equals(this.description, linkResponse.description) &&
        Objects.equals(this.email, linkResponse.email) &&
        Objects.equals(this.errorUrl, linkResponse.errorUrl) &&
        Objects.equals(this.expiration, linkResponse.expiration) &&
        Objects.equals(this.hash, linkResponse.hash) &&
        Objects.equals(this.id, linkResponse.id) &&
        Objects.equals(this.intent, linkResponse.intent) &&
        Objects.equals(this.invoiceInformation, linkResponse.invoiceInformation) &&
        Objects.equals(this.language, linkResponse.language) &&
        Objects.equals(this.link, linkResponse.link) &&
        Objects.equals(this.logo, linkResponse.logo) &&
        Objects.equals(this.merchantId, linkResponse.merchantId) &&
        Objects.equals(this.mode, linkResponse.mode) &&
        Objects.equals(this.modified, linkResponse.modified) &&
        Objects.equals(this.notifyUrl, linkResponse.notifyUrl) &&
        Objects.equals(this.paymentMethod, linkResponse.paymentMethod) &&
        Objects.equals(this.paymentMethods, linkResponse.paymentMethods) &&
        Objects.equals(this.paymentProcess, linkResponse.paymentProcess) &&
        Objects.equals(this.portalId, linkResponse.portalId) &&
        Objects.equals(this.redirectUrl, linkResponse.redirectUrl) &&
        Objects.equals(this.reference, linkResponse.reference) &&
        Objects.equals(this.shipping, linkResponse.shipping) &&
        Objects.equals(this.shoppingCart, linkResponse.shoppingCart) &&
        Objects.equals(this.status, linkResponse.status) &&
        Objects.equals(this.successUrl, linkResponse.successUrl) &&
        Objects.equals(this.userId, linkResponse.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, active, amount, backgroundImage, billing, created, currency, description, email, errorUrl, expiration, hash, id, intent, invoiceInformation, language, link, logo, merchantId, mode, modified, notifyUrl, paymentMethod, paymentMethods, paymentProcess, portalId, redirectUrl, reference, shipping, shoppingCart, status, successUrl, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkResponse {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    backgroundImage: ").append(toIndentedString(backgroundImage)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    errorUrl: ").append(toIndentedString(errorUrl)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    intent: ").append(toIndentedString(intent)).append("\n");
    sb.append("    invoiceInformation: ").append(toIndentedString(invoiceInformation)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    notifyUrl: ").append(toIndentedString(notifyUrl)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    paymentMethods: ").append(toIndentedString(paymentMethods)).append("\n");
    sb.append("    paymentProcess: ").append(toIndentedString(paymentProcess)).append("\n");
    sb.append("    portalId: ").append(toIndentedString(portalId)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    shoppingCart: ").append(toIndentedString(shoppingCart)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    successUrl: ").append(toIndentedString(successUrl)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("active");
    openapiFields.add("amount");
    openapiFields.add("backgroundImage");
    openapiFields.add("billing");
    openapiFields.add("created");
    openapiFields.add("currency");
    openapiFields.add("description");
    openapiFields.add("email");
    openapiFields.add("errorUrl");
    openapiFields.add("expiration");
    openapiFields.add("hash");
    openapiFields.add("id");
    openapiFields.add("intent");
    openapiFields.add("invoiceInformation");
    openapiFields.add("language");
    openapiFields.add("link");
    openapiFields.add("logo");
    openapiFields.add("merchantId");
    openapiFields.add("mode");
    openapiFields.add("modified");
    openapiFields.add("notifyUrl");
    openapiFields.add("paymentMethod");
    openapiFields.add("paymentMethods");
    openapiFields.add("paymentProcess");
    openapiFields.add("portalId");
    openapiFields.add("redirectUrl");
    openapiFields.add("reference");
    openapiFields.add("shipping");
    openapiFields.add("shoppingCart");
    openapiFields.add("status");
    openapiFields.add("successUrl");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LinkResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LinkResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinkResponse is not found in the empty JSON string", LinkResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LinkResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LinkResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("backgroundImage") != null && !jsonObj.get("backgroundImage").isJsonNull()) && !jsonObj.get("backgroundImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundImage").toString()));
      }
      // validate the optional field `billing`
      if (jsonObj.get("billing") != null && !jsonObj.get("billing").isJsonNull()) {
        AddressDataDto.validateJsonElement(jsonObj.get("billing"));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        CurrencyEnum.validateJsonElement(jsonObj.get("currency"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("errorUrl") != null && !jsonObj.get("errorUrl").isJsonNull()) && !jsonObj.get("errorUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorUrl").toString()));
      }
      if ((jsonObj.get("hash") != null && !jsonObj.get("hash").isJsonNull()) && !jsonObj.get("hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hash").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("intent") != null && !jsonObj.get("intent").isJsonNull()) && !jsonObj.get("intent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intent").toString()));
      }
      // validate the optional field `intent`
      if (jsonObj.get("intent") != null && !jsonObj.get("intent").isJsonNull()) {
        IntentEnum.validateJsonElement(jsonObj.get("intent"));
      }
      // validate the optional field `invoiceInformation`
      if (jsonObj.get("invoiceInformation") != null && !jsonObj.get("invoiceInformation").isJsonNull()) {
        InvoiceInformationDto.validateJsonElement(jsonObj.get("invoiceInformation"));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // validate the optional field `language`
      if (jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) {
        LanguageEnum.validateJsonElement(jsonObj.get("language"));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) && !jsonObj.get("logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo").toString()));
      }
      if ((jsonObj.get("merchantId") != null && !jsonObj.get("merchantId").isJsonNull()) && !jsonObj.get("merchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantId").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ModeEnum.validateJsonElement(jsonObj.get("mode"));
      }
      if ((jsonObj.get("notifyUrl") != null && !jsonObj.get("notifyUrl").isJsonNull()) && !jsonObj.get("notifyUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notifyUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notifyUrl").toString()));
      }
      if ((jsonObj.get("paymentMethod") != null && !jsonObj.get("paymentMethod").isJsonNull()) && !jsonObj.get("paymentMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentMethod").toString()));
      }
      // validate the optional field `paymentMethod`
      if (jsonObj.get("paymentMethod") != null && !jsonObj.get("paymentMethod").isJsonNull()) {
        PaymentMethodEnum.validateJsonElement(jsonObj.get("paymentMethod"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("paymentMethods") != null && !jsonObj.get("paymentMethods").isJsonNull() && !jsonObj.get("paymentMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentMethods` to be an array in the JSON string but got `%s`", jsonObj.get("paymentMethods").toString()));
      }
      if ((jsonObj.get("paymentProcess") != null && !jsonObj.get("paymentProcess").isJsonNull()) && !jsonObj.get("paymentProcess").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentProcess` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentProcess").toString()));
      }
      if ((jsonObj.get("portalId") != null && !jsonObj.get("portalId").isJsonNull()) && !jsonObj.get("portalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portalId").toString()));
      }
      if ((jsonObj.get("redirectUrl") != null && !jsonObj.get("redirectUrl").isJsonNull()) && !jsonObj.get("redirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectUrl").toString()));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      // validate the optional field `shipping`
      if (jsonObj.get("shipping") != null && !jsonObj.get("shipping").isJsonNull()) {
        AddressDataDto.validateJsonElement(jsonObj.get("shipping"));
      }
      if (jsonObj.get("shoppingCart") != null && !jsonObj.get("shoppingCart").isJsonNull()) {
        JsonArray jsonArrayshoppingCart = jsonObj.getAsJsonArray("shoppingCart");
        if (jsonArrayshoppingCart != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shoppingCart").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shoppingCart` to be an array in the JSON string but got `%s`", jsonObj.get("shoppingCart").toString()));
          }

          // validate the optional field `shoppingCart` (array)
          for (int i = 0; i < jsonArrayshoppingCart.size(); i++) {
            CartItemDto.validateJsonElement(jsonArrayshoppingCart.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("successUrl") != null && !jsonObj.get("successUrl").isJsonNull()) && !jsonObj.get("successUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `successUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("successUrl").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinkResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinkResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinkResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinkResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<LinkResponse>() {
           @Override
           public void write(JsonWriter out, LinkResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LinkResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LinkResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LinkResponse
   * @throws IOException if the JSON string is invalid with respect to LinkResponse
   */
  public static LinkResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinkResponse.class);
  }

  /**
   * Convert an instance of LinkResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

