/*
 * PAYONE Link API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@payone.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.LinkCreateRequest;
import org.openapitools.client.model.LinkResponse;
import org.openapitools.client.model.PageLinkResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LinkManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LinkManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LinkManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createPaymentLink
     * @param linkCreateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentLinkCall(LinkCreateRequest linkCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkCreateRequest;

        // create path and map variables
        String localVarPath = "/v1/payment-links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "createAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentLinkValidateBeforeCall(LinkCreateRequest linkCreateRequest, final ApiCallback _callback) throws ApiException {
        return createPaymentLinkCall(linkCreateRequest, _callback);

    }

    /**
     * Create a payment link.
     * 
     * @param linkCreateRequest  (optional)
     * @return LinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public LinkResponse createPaymentLink(LinkCreateRequest linkCreateRequest) throws ApiException {
        ApiResponse<LinkResponse> localVarResp = createPaymentLinkWithHttpInfo(linkCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a payment link.
     * 
     * @param linkCreateRequest  (optional)
     * @return ApiResponse&lt;LinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkResponse> createPaymentLinkWithHttpInfo(LinkCreateRequest linkCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createPaymentLinkValidateBeforeCall(linkCreateRequest, null);
        Type localVarReturnType = new TypeToken<LinkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a payment link. (asynchronously)
     * 
     * @param linkCreateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentLinkAsync(LinkCreateRequest linkCreateRequest, final ApiCallback<LinkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentLinkValidateBeforeCall(linkCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<LinkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentLink
     * @param linkId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentLinkCall(String linkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payment-links/{linkId}"
            .replace("{" + "linkId" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "getSingleAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentLinkValidateBeforeCall(String linkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling getPaymentLink(Async)");
        }

        return getPaymentLinkCall(linkId, _callback);

    }

    /**
     * Get payment link by id.
     * 
     * @param linkId  (required)
     * @return LinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public LinkResponse getPaymentLink(String linkId) throws ApiException {
        ApiResponse<LinkResponse> localVarResp = getPaymentLinkWithHttpInfo(linkId);
        return localVarResp.getData();
    }

    /**
     * Get payment link by id.
     * 
     * @param linkId  (required)
     * @return ApiResponse&lt;LinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkResponse> getPaymentLinkWithHttpInfo(String linkId) throws ApiException {
        okhttp3.Call localVarCall = getPaymentLinkValidateBeforeCall(linkId, null);
        Type localVarReturnType = new TypeToken<LinkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get payment link by id. (asynchronously)
     * 
     * @param linkId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentLinkAsync(String linkId, final ApiCallback<LinkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentLinkValidateBeforeCall(linkId, _callback);
        Type localVarReturnType = new TypeToken<LinkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentLinks
     * @param merchantId  (required)
     * @param accountId  (required)
     * @param portalId  (required)
     * @param mode  (required)
     * @param page  (optional, default to 0)
     * @param limit  (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentLinksCall(String merchantId, String accountId, String portalId, String mode, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payment-links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (merchantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("merchantId", merchantId));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (portalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("portalId", portalId));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "getMultipleAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentLinksValidateBeforeCall(String merchantId, String accountId, String portalId, String mode, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling getPaymentLinks(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getPaymentLinks(Async)");
        }

        // verify the required parameter 'portalId' is set
        if (portalId == null) {
            throw new ApiException("Missing the required parameter 'portalId' when calling getPaymentLinks(Async)");
        }

        // verify the required parameter 'mode' is set
        if (mode == null) {
            throw new ApiException("Missing the required parameter 'mode' when calling getPaymentLinks(Async)");
        }

        return getPaymentLinksCall(merchantId, accountId, portalId, mode, page, limit, _callback);

    }

    /**
     * List all payment links.
     * 
     * @param merchantId  (required)
     * @param accountId  (required)
     * @param portalId  (required)
     * @param mode  (required)
     * @param page  (optional, default to 0)
     * @param limit  (optional, default to 25)
     * @return PageLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public PageLinkResponse getPaymentLinks(String merchantId, String accountId, String portalId, String mode, Integer page, Integer limit) throws ApiException {
        ApiResponse<PageLinkResponse> localVarResp = getPaymentLinksWithHttpInfo(merchantId, accountId, portalId, mode, page, limit);
        return localVarResp.getData();
    }

    /**
     * List all payment links.
     * 
     * @param merchantId  (required)
     * @param accountId  (required)
     * @param portalId  (required)
     * @param mode  (required)
     * @param page  (optional, default to 0)
     * @param limit  (optional, default to 25)
     * @return ApiResponse&lt;PageLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageLinkResponse> getPaymentLinksWithHttpInfo(String merchantId, String accountId, String portalId, String mode, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getPaymentLinksValidateBeforeCall(merchantId, accountId, portalId, mode, page, limit, null);
        Type localVarReturnType = new TypeToken<PageLinkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all payment links. (asynchronously)
     * 
     * @param merchantId  (required)
     * @param accountId  (required)
     * @param portalId  (required)
     * @param mode  (required)
     * @param page  (optional, default to 0)
     * @param limit  (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentLinksAsync(String merchantId, String accountId, String portalId, String mode, Integer page, Integer limit, final ApiCallback<PageLinkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentLinksValidateBeforeCall(merchantId, accountId, portalId, mode, page, limit, _callback);
        Type localVarReturnType = new TypeToken<PageLinkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePaymentLink
     * @param linkId  (required)
     * @param linkCreateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePaymentLinkCall(String linkId, LinkCreateRequest linkCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkCreateRequest;

        // create path and map variables
        String localVarPath = "/v1/payment-links/{linkId}"
            .replace("{" + "linkId" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "createAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePaymentLinkValidateBeforeCall(String linkId, LinkCreateRequest linkCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling updatePaymentLink(Async)");
        }

        return updatePaymentLinkCall(linkId, linkCreateRequest, _callback);

    }

    /**
     * Update a payment link.
     * 
     * @param linkId  (required)
     * @param linkCreateRequest  (optional)
     * @return LinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public LinkResponse updatePaymentLink(String linkId, LinkCreateRequest linkCreateRequest) throws ApiException {
        ApiResponse<LinkResponse> localVarResp = updatePaymentLinkWithHttpInfo(linkId, linkCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Update a payment link.
     * 
     * @param linkId  (required)
     * @param linkCreateRequest  (optional)
     * @return ApiResponse&lt;LinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkResponse> updatePaymentLinkWithHttpInfo(String linkId, LinkCreateRequest linkCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePaymentLinkValidateBeforeCall(linkId, linkCreateRequest, null);
        Type localVarReturnType = new TypeToken<LinkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a payment link. (asynchronously)
     * 
     * @param linkId  (required)
     * @param linkCreateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePaymentLinkAsync(String linkId, LinkCreateRequest linkCreateRequest, final ApiCallback<LinkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePaymentLinkValidateBeforeCall(linkId, linkCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<LinkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
