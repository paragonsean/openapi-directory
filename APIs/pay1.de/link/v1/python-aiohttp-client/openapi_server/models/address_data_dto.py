# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AddressDataDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_addition: str=None, city: str=None, company: str=None, country: str=None, first_name: str=None, last_name: str=None, state: str=None, street: str=None, zip: str=None):
        """AddressDataDto - a model defined in OpenAPI

        :param address_addition: The address_addition of this AddressDataDto.
        :param city: The city of this AddressDataDto.
        :param company: The company of this AddressDataDto.
        :param country: The country of this AddressDataDto.
        :param first_name: The first_name of this AddressDataDto.
        :param last_name: The last_name of this AddressDataDto.
        :param state: The state of this AddressDataDto.
        :param street: The street of this AddressDataDto.
        :param zip: The zip of this AddressDataDto.
        """
        self.openapi_types = {
            'address_addition': str,
            'city': str,
            'company': str,
            'country': str,
            'first_name': str,
            'last_name': str,
            'state': str,
            'street': str,
            'zip': str
        }

        self.attribute_map = {
            'address_addition': 'addressAddition',
            'city': 'city',
            'company': 'company',
            'country': 'country',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'state': 'state',
            'street': 'street',
            'zip': 'zip'
        }

        self._address_addition = address_addition
        self._city = city
        self._company = company
        self._country = country
        self._first_name = first_name
        self._last_name = last_name
        self._state = state
        self._street = street
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddressDataDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddressDataDto of this AddressDataDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_addition(self):
        """Gets the address_addition of this AddressDataDto.

        customer additional address line

        :return: The address_addition of this AddressDataDto.
        :rtype: str
        """
        return self._address_addition

    @address_addition.setter
    def address_addition(self, address_addition):
        """Sets the address_addition of this AddressDataDto.

        customer additional address line

        :param address_addition: The address_addition of this AddressDataDto.
        :type address_addition: str
        """
        if address_addition is not None and len(address_addition) > 50:
            raise ValueError("Invalid value for `address_addition`, length must be less than or equal to `50`")
        if address_addition is not None and len(address_addition) < 1:
            raise ValueError("Invalid value for `address_addition`, length must be greater than or equal to `1`")

        self._address_addition = address_addition

    @property
    def city(self):
        """Gets the city of this AddressDataDto.

        customer city

        :return: The city of this AddressDataDto.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AddressDataDto.

        customer city

        :param city: The city of this AddressDataDto.
        :type city: str
        """
        if city is not None and len(city) > 50:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `50`")
        if city is not None and len(city) < 1:
            raise ValueError("Invalid value for `city`, length must be greater than or equal to `1`")
        if city is not None and not re.search(r'^[^\u0000\\!=<>?+;"*\d]+$', city):
            raise ValueError("Invalid value for `city`, must be a follow pattern or equal to `/^[^\u0000\\!=<>?+;"*\d]+$/`")

        self._city = city

    @property
    def company(self):
        """Gets the company of this AddressDataDto.

        customer company name

        :return: The company of this AddressDataDto.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this AddressDataDto.

        customer company name

        :param company: The company of this AddressDataDto.
        :type company: str
        """
        if company is not None and len(company) > 50:
            raise ValueError("Invalid value for `company`, length must be less than or equal to `50`")
        if company is not None and len(company) < 2:
            raise ValueError("Invalid value for `company`, length must be greater than or equal to `2`")

        self._company = company

    @property
    def country(self):
        """Gets the country of this AddressDataDto.

        customer country code (2 letter ISO-3166 code)

        :return: The country of this AddressDataDto.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AddressDataDto.

        customer country code (2 letter ISO-3166 code)

        :param country: The country of this AddressDataDto.
        :type country: str
        """
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")
        if country is not None and len(country) < 2:
            raise ValueError("Invalid value for `country`, length must be greater than or equal to `2`")
        if country is not None and not re.search(r'[A-Z]{2}', country):
            raise ValueError("Invalid value for `country`, must be a follow pattern or equal to `/[A-Z]{2}/`")

        self._country = country

    @property
    def first_name(self):
        """Gets the first_name of this AddressDataDto.

        customer first name

        :return: The first_name of this AddressDataDto.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this AddressDataDto.

        customer first name

        :param first_name: The first_name of this AddressDataDto.
        :type first_name: str
        """
        if first_name is not None and len(first_name) > 50:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `50`")
        if first_name is not None and len(first_name) < 1:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this AddressDataDto.

        customer last name

        :return: The last_name of this AddressDataDto.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this AddressDataDto.

        customer last name

        :param last_name: The last_name of this AddressDataDto.
        :type last_name: str
        """
        if last_name is not None and len(last_name) > 50:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `50`")
        if last_name is not None and len(last_name) < 2:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `2`")

        self._last_name = last_name

    @property
    def state(self):
        """Gets the state of this AddressDataDto.

        customer state code

        :return: The state of this AddressDataDto.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AddressDataDto.

        customer state code

        :param state: The state of this AddressDataDto.
        :type state: str
        """
        if state is not None and len(state) > 2:
            raise ValueError("Invalid value for `state`, length must be less than or equal to `2`")
        if state is not None and len(state) < 2:
            raise ValueError("Invalid value for `state`, length must be greater than or equal to `2`")
        if state is not None and not re.search(r'[A-Z]{2}', state):
            raise ValueError("Invalid value for `state`, must be a follow pattern or equal to `/[A-Z]{2}/`")

        self._state = state

    @property
    def street(self):
        """Gets the street of this AddressDataDto.

        customer street name

        :return: The street of this AddressDataDto.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this AddressDataDto.

        customer street name

        :param street: The street of this AddressDataDto.
        :type street: str
        """
        if street is not None and len(street) > 50:
            raise ValueError("Invalid value for `street`, length must be less than or equal to `50`")
        if street is not None and len(street) < 2:
            raise ValueError("Invalid value for `street`, length must be greater than or equal to `2`")

        self._street = street

    @property
    def zip(self):
        """Gets the zip of this AddressDataDto.

        customer postcode

        :return: The zip of this AddressDataDto.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this AddressDataDto.

        customer postcode

        :param zip: The zip of this AddressDataDto.
        :type zip: str
        """
        if zip is not None and len(zip) > 10:
            raise ValueError("Invalid value for `zip`, length must be less than or equal to `10`")
        if zip is not None and len(zip) < 2:
            raise ValueError("Invalid value for `zip`, length must be greater than or equal to `2`")
        if zip is not None and not re.search(r'[0-9A-Za-z_.\-\/]{2,10}', zip):
            raise ValueError("Invalid value for `zip`, must be a follow pattern or equal to `/[0-9A-Za-z_.\-\/]{2,10}/`")

        self._zip = zip
