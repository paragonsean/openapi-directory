# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CartItemDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delivery_date_end: date=None, delivery_date_start: date=None, description: str=None, number: str=None, price: int=None, quantity: int=None, type: str=None, vat_rate: int=None):
        """CartItemDto - a model defined in OpenAPI

        :param delivery_date_end: The delivery_date_end of this CartItemDto.
        :param delivery_date_start: The delivery_date_start of this CartItemDto.
        :param description: The description of this CartItemDto.
        :param number: The number of this CartItemDto.
        :param price: The price of this CartItemDto.
        :param quantity: The quantity of this CartItemDto.
        :param type: The type of this CartItemDto.
        :param vat_rate: The vat_rate of this CartItemDto.
        """
        self.openapi_types = {
            'delivery_date_end': date,
            'delivery_date_start': date,
            'description': str,
            'number': str,
            'price': int,
            'quantity': int,
            'type': str,
            'vat_rate': int
        }

        self.attribute_map = {
            'delivery_date_end': 'deliveryDateEnd',
            'delivery_date_start': 'deliveryDateStart',
            'description': 'description',
            'number': 'number',
            'price': 'price',
            'quantity': 'quantity',
            'type': 'type',
            'vat_rate': 'vatRate'
        }

        self._delivery_date_end = delivery_date_end
        self._delivery_date_start = delivery_date_start
        self._description = description
        self._number = number
        self._price = price
        self._quantity = quantity
        self._type = type
        self._vat_rate = vat_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CartItemDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CartItemDto of this CartItemDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delivery_date_end(self):
        """Gets the delivery_date_end of this CartItemDto.

        delivery period end date

        :return: The delivery_date_end of this CartItemDto.
        :rtype: date
        """
        return self._delivery_date_end

    @delivery_date_end.setter
    def delivery_date_end(self, delivery_date_end):
        """Sets the delivery_date_end of this CartItemDto.

        delivery period end date

        :param delivery_date_end: The delivery_date_end of this CartItemDto.
        :type delivery_date_end: date
        """

        self._delivery_date_end = delivery_date_end

    @property
    def delivery_date_start(self):
        """Gets the delivery_date_start of this CartItemDto.

        delivery date

        :return: The delivery_date_start of this CartItemDto.
        :rtype: date
        """
        return self._delivery_date_start

    @delivery_date_start.setter
    def delivery_date_start(self, delivery_date_start):
        """Sets the delivery_date_start of this CartItemDto.

        delivery date

        :param delivery_date_start: The delivery_date_start of this CartItemDto.
        :type delivery_date_start: date
        """

        self._delivery_date_start = delivery_date_start

    @property
    def description(self):
        """Gets the description of this CartItemDto.

        item description

        :return: The description of this CartItemDto.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CartItemDto.

        item description

        :param description: The description of this CartItemDto.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def number(self):
        """Gets the number of this CartItemDto.

        item number

        :return: The number of this CartItemDto.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CartItemDto.

        item number

        :param number: The number of this CartItemDto.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")
        if number is not None and len(number) > 32:
            raise ValueError("Invalid value for `number`, length must be less than or equal to `32`")
        if number is not None and len(number) < 1:
            raise ValueError("Invalid value for `number`, length must be greater than or equal to `1`")
        if number is not None and not re.search(r'[0-9A-Za-z(){} +\-_#\/:\[\]]{1,32}', number):
            raise ValueError("Invalid value for `number`, must be a follow pattern or equal to `/[0-9A-Za-z(){} +\-_#\/:\[\]]{1,32}/`")

        self._number = number

    @property
    def price(self):
        """Gets the price of this CartItemDto.

        gross price of single item

        :return: The price of this CartItemDto.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CartItemDto.

        gross price of single item

        :param price: The price of this CartItemDto.
        :type price: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")
        if price is not None and price > 1999999999:
            raise ValueError("Invalid value for `price`, must be a value less than or equal to `1999999999`")
        if price is not None and price < -1999999999:
            raise ValueError("Invalid value for `price`, must be a value greater than or equal to `-1999999999`")

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this CartItemDto.

        total number of ordered items

        :return: The quantity of this CartItemDto.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CartItemDto.

        total number of ordered items

        :param quantity: The quantity of this CartItemDto.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")
        if quantity is not None and quantity > 999999:
            raise ValueError("Invalid value for `quantity`, must be a value less than or equal to `999999`")
        if quantity is not None and quantity < 1:
            raise ValueError("Invalid value for `quantity`, must be a value greater than or equal to `1`")

        self._quantity = quantity

    @property
    def type(self):
        """Gets the type of this CartItemDto.

        item type

        :return: The type of this CartItemDto.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CartItemDto.

        item type

        :param type: The type of this CartItemDto.
        :type type: str
        """
        allowed_values = ["goods", "shipment", "handling", "voucher"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def vat_rate(self):
        """Gets the vat_rate of this CartItemDto.

        vat rate (<100 in %, >=100 in bp)

        :return: The vat_rate of this CartItemDto.
        :rtype: int
        """
        return self._vat_rate

    @vat_rate.setter
    def vat_rate(self, vat_rate):
        """Sets the vat_rate of this CartItemDto.

        vat rate (<100 in %, >=100 in bp)

        :param vat_rate: The vat_rate of this CartItemDto.
        :type vat_rate: int
        """
        if vat_rate is not None and vat_rate > 9999:
            raise ValueError("Invalid value for `vat_rate`, must be a value less than or equal to `9999`")
        if vat_rate is not None and vat_rate < 0:
            raise ValueError("Invalid value for `vat_rate`, must be a value greater than or equal to `0`")

        self._vat_rate = vat_rate
