# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sort import Sort
from openapi_server import util


class Pageable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offset: int=None, page_number: int=None, page_size: int=None, paged: bool=None, sort: Sort=None, unpaged: bool=None):
        """Pageable - a model defined in OpenAPI

        :param offset: The offset of this Pageable.
        :param page_number: The page_number of this Pageable.
        :param page_size: The page_size of this Pageable.
        :param paged: The paged of this Pageable.
        :param sort: The sort of this Pageable.
        :param unpaged: The unpaged of this Pageable.
        """
        self.openapi_types = {
            'offset': int,
            'page_number': int,
            'page_size': int,
            'paged': bool,
            'sort': Sort,
            'unpaged': bool
        }

        self.attribute_map = {
            'offset': 'offset',
            'page_number': 'pageNumber',
            'page_size': 'pageSize',
            'paged': 'paged',
            'sort': 'sort',
            'unpaged': 'unpaged'
        }

        self._offset = offset
        self._page_number = page_number
        self._page_size = page_size
        self._paged = paged
        self._sort = sort
        self._unpaged = unpaged

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pageable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pageable of this Pageable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offset(self):
        """Gets the offset of this Pageable.


        :return: The offset of this Pageable.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Pageable.


        :param offset: The offset of this Pageable.
        :type offset: int
        """

        self._offset = offset

    @property
    def page_number(self):
        """Gets the page_number of this Pageable.


        :return: The page_number of this Pageable.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this Pageable.


        :param page_number: The page_number of this Pageable.
        :type page_number: int
        """

        self._page_number = page_number

    @property
    def page_size(self):
        """Gets the page_size of this Pageable.


        :return: The page_size of this Pageable.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this Pageable.


        :param page_size: The page_size of this Pageable.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def paged(self):
        """Gets the paged of this Pageable.


        :return: The paged of this Pageable.
        :rtype: bool
        """
        return self._paged

    @paged.setter
    def paged(self, paged):
        """Sets the paged of this Pageable.


        :param paged: The paged of this Pageable.
        :type paged: bool
        """

        self._paged = paged

    @property
    def sort(self):
        """Gets the sort of this Pageable.


        :return: The sort of this Pageable.
        :rtype: Sort
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this Pageable.


        :param sort: The sort of this Pageable.
        :type sort: Sort
        """

        self._sort = sort

    @property
    def unpaged(self):
        """Gets the unpaged of this Pageable.


        :return: The unpaged of this Pageable.
        :rtype: bool
        """
        return self._unpaged

    @unpaged.setter
    def unpaged(self, unpaged):
        """Sets the unpaged of this Pageable.


        :param unpaged: The unpaged of this Pageable.
        :type unpaged: bool
        """

        self._unpaged = unpaged
