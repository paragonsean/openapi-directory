# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.link_response import LinkResponse
from openapi_server.models.pageable import Pageable
from openapi_server.models.sort import Sort
from openapi_server import util


class PageLinkResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: List[LinkResponse]=None, empty: bool=None, first: bool=None, last: bool=None, number: int=None, number_of_elements: int=None, pageable: Pageable=None, size: int=None, sort: Sort=None, total_elements: int=None, total_pages: int=None):
        """PageLinkResponse - a model defined in OpenAPI

        :param content: The content of this PageLinkResponse.
        :param empty: The empty of this PageLinkResponse.
        :param first: The first of this PageLinkResponse.
        :param last: The last of this PageLinkResponse.
        :param number: The number of this PageLinkResponse.
        :param number_of_elements: The number_of_elements of this PageLinkResponse.
        :param pageable: The pageable of this PageLinkResponse.
        :param size: The size of this PageLinkResponse.
        :param sort: The sort of this PageLinkResponse.
        :param total_elements: The total_elements of this PageLinkResponse.
        :param total_pages: The total_pages of this PageLinkResponse.
        """
        self.openapi_types = {
            'content': List[LinkResponse],
            'empty': bool,
            'first': bool,
            'last': bool,
            'number': int,
            'number_of_elements': int,
            'pageable': Pageable,
            'size': int,
            'sort': Sort,
            'total_elements': int,
            'total_pages': int
        }

        self.attribute_map = {
            'content': 'content',
            'empty': 'empty',
            'first': 'first',
            'last': 'last',
            'number': 'number',
            'number_of_elements': 'numberOfElements',
            'pageable': 'pageable',
            'size': 'size',
            'sort': 'sort',
            'total_elements': 'totalElements',
            'total_pages': 'totalPages'
        }

        self._content = content
        self._empty = empty
        self._first = first
        self._last = last
        self._number = number
        self._number_of_elements = number_of_elements
        self._pageable = pageable
        self._size = size
        self._sort = sort
        self._total_elements = total_elements
        self._total_pages = total_pages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PageLinkResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PageLinkResponse of this PageLinkResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this PageLinkResponse.


        :return: The content of this PageLinkResponse.
        :rtype: List[LinkResponse]
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this PageLinkResponse.


        :param content: The content of this PageLinkResponse.
        :type content: List[LinkResponse]
        """

        self._content = content

    @property
    def empty(self):
        """Gets the empty of this PageLinkResponse.


        :return: The empty of this PageLinkResponse.
        :rtype: bool
        """
        return self._empty

    @empty.setter
    def empty(self, empty):
        """Sets the empty of this PageLinkResponse.


        :param empty: The empty of this PageLinkResponse.
        :type empty: bool
        """

        self._empty = empty

    @property
    def first(self):
        """Gets the first of this PageLinkResponse.


        :return: The first of this PageLinkResponse.
        :rtype: bool
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this PageLinkResponse.


        :param first: The first of this PageLinkResponse.
        :type first: bool
        """

        self._first = first

    @property
    def last(self):
        """Gets the last of this PageLinkResponse.


        :return: The last of this PageLinkResponse.
        :rtype: bool
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this PageLinkResponse.


        :param last: The last of this PageLinkResponse.
        :type last: bool
        """

        self._last = last

    @property
    def number(self):
        """Gets the number of this PageLinkResponse.


        :return: The number of this PageLinkResponse.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PageLinkResponse.


        :param number: The number of this PageLinkResponse.
        :type number: int
        """

        self._number = number

    @property
    def number_of_elements(self):
        """Gets the number_of_elements of this PageLinkResponse.


        :return: The number_of_elements of this PageLinkResponse.
        :rtype: int
        """
        return self._number_of_elements

    @number_of_elements.setter
    def number_of_elements(self, number_of_elements):
        """Sets the number_of_elements of this PageLinkResponse.


        :param number_of_elements: The number_of_elements of this PageLinkResponse.
        :type number_of_elements: int
        """

        self._number_of_elements = number_of_elements

    @property
    def pageable(self):
        """Gets the pageable of this PageLinkResponse.


        :return: The pageable of this PageLinkResponse.
        :rtype: Pageable
        """
        return self._pageable

    @pageable.setter
    def pageable(self, pageable):
        """Sets the pageable of this PageLinkResponse.


        :param pageable: The pageable of this PageLinkResponse.
        :type pageable: Pageable
        """

        self._pageable = pageable

    @property
    def size(self):
        """Gets the size of this PageLinkResponse.


        :return: The size of this PageLinkResponse.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PageLinkResponse.


        :param size: The size of this PageLinkResponse.
        :type size: int
        """

        self._size = size

    @property
    def sort(self):
        """Gets the sort of this PageLinkResponse.


        :return: The sort of this PageLinkResponse.
        :rtype: Sort
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this PageLinkResponse.


        :param sort: The sort of this PageLinkResponse.
        :type sort: Sort
        """

        self._sort = sort

    @property
    def total_elements(self):
        """Gets the total_elements of this PageLinkResponse.


        :return: The total_elements of this PageLinkResponse.
        :rtype: int
        """
        return self._total_elements

    @total_elements.setter
    def total_elements(self, total_elements):
        """Sets the total_elements of this PageLinkResponse.


        :param total_elements: The total_elements of this PageLinkResponse.
        :type total_elements: int
        """

        self._total_elements = total_elements

    @property
    def total_pages(self):
        """Gets the total_pages of this PageLinkResponse.


        :return: The total_pages of this PageLinkResponse.
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this PageLinkResponse.


        :param total_pages: The total_pages of this PageLinkResponse.
        :type total_pages: int
        """

        self._total_pages = total_pages
