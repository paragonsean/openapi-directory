# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvoiceInformationDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, invoice_id: str=None, invoice_text: str=None):
        """InvoiceInformationDto - a model defined in OpenAPI

        :param invoice_id: The invoice_id of this InvoiceInformationDto.
        :param invoice_text: The invoice_text of this InvoiceInformationDto.
        """
        self.openapi_types = {
            'invoice_id': str,
            'invoice_text': str
        }

        self.attribute_map = {
            'invoice_id': 'invoiceId',
            'invoice_text': 'invoiceText'
        }

        self._invoice_id = invoice_id
        self._invoice_text = invoice_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceInformationDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceInformationDto of this InvoiceInformationDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def invoice_id(self):
        """Gets the invoice_id of this InvoiceInformationDto.

        id that should be put on the invoice

        :return: The invoice_id of this InvoiceInformationDto.
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this InvoiceInformationDto.

        id that should be put on the invoice

        :param invoice_id: The invoice_id of this InvoiceInformationDto.
        :type invoice_id: str
        """
        if invoice_id is not None and len(invoice_id) > 20:
            raise ValueError("Invalid value for `invoice_id`, length must be less than or equal to `20`")
        if invoice_id is not None and len(invoice_id) < 0:
            raise ValueError("Invalid value for `invoice_id`, length must be greater than or equal to `0`")

        self._invoice_id = invoice_id

    @property
    def invoice_text(self):
        """Gets the invoice_text of this InvoiceInformationDto.

        short text that should be put after the invoice

        :return: The invoice_text of this InvoiceInformationDto.
        :rtype: str
        """
        return self._invoice_text

    @invoice_text.setter
    def invoice_text(self, invoice_text):
        """Sets the invoice_text of this InvoiceInformationDto.

        short text that should be put after the invoice

        :param invoice_text: The invoice_text of this InvoiceInformationDto.
        :type invoice_text: str
        """
        if invoice_text is not None and len(invoice_text) > 255:
            raise ValueError("Invalid value for `invoice_text`, length must be less than or equal to `255`")
        if invoice_text is not None and len(invoice_text) < 0:
            raise ValueError("Invalid value for `invoice_text`, length must be greater than or equal to `0`")

        self._invoice_text = invoice_text
