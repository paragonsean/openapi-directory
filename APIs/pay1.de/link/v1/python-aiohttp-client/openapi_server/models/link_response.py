# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_data_dto import AddressDataDto
from openapi_server.models.cart_item_dto import CartItemDto
from openapi_server.models.invoice_information_dto import InvoiceInformationDto
from openapi_server import util


class LinkResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, active: bool=True, amount: int=None, background_image: str=None, billing: AddressDataDto=None, created: int=None, currency: str=None, description: str=None, email: str=None, error_url: str=None, expiration: date=None, hash: str=None, id: str=None, intent: str='authorization', invoice_information: InvoiceInformationDto=None, language: str=None, link: str=None, logo: str=None, merchant_id: str=None, mode: str=None, modified: int=None, notify_url: str=None, payment_method: str=None, payment_methods: List[str]=None, payment_process: str=None, portal_id: str=None, redirect_url: str=None, reference: str=None, shipping: AddressDataDto=None, shopping_cart: List[CartItemDto]=None, status: str=None, success_url: str=None, user_id: str=None):
        """LinkResponse - a model defined in OpenAPI

        :param account_id: The account_id of this LinkResponse.
        :param active: The active of this LinkResponse.
        :param amount: The amount of this LinkResponse.
        :param background_image: The background_image of this LinkResponse.
        :param billing: The billing of this LinkResponse.
        :param created: The created of this LinkResponse.
        :param currency: The currency of this LinkResponse.
        :param description: The description of this LinkResponse.
        :param email: The email of this LinkResponse.
        :param error_url: The error_url of this LinkResponse.
        :param expiration: The expiration of this LinkResponse.
        :param hash: The hash of this LinkResponse.
        :param id: The id of this LinkResponse.
        :param intent: The intent of this LinkResponse.
        :param invoice_information: The invoice_information of this LinkResponse.
        :param language: The language of this LinkResponse.
        :param link: The link of this LinkResponse.
        :param logo: The logo of this LinkResponse.
        :param merchant_id: The merchant_id of this LinkResponse.
        :param mode: The mode of this LinkResponse.
        :param modified: The modified of this LinkResponse.
        :param notify_url: The notify_url of this LinkResponse.
        :param payment_method: The payment_method of this LinkResponse.
        :param payment_methods: The payment_methods of this LinkResponse.
        :param payment_process: The payment_process of this LinkResponse.
        :param portal_id: The portal_id of this LinkResponse.
        :param redirect_url: The redirect_url of this LinkResponse.
        :param reference: The reference of this LinkResponse.
        :param shipping: The shipping of this LinkResponse.
        :param shopping_cart: The shopping_cart of this LinkResponse.
        :param status: The status of this LinkResponse.
        :param success_url: The success_url of this LinkResponse.
        :param user_id: The user_id of this LinkResponse.
        """
        self.openapi_types = {
            'account_id': str,
            'active': bool,
            'amount': int,
            'background_image': str,
            'billing': AddressDataDto,
            'created': int,
            'currency': str,
            'description': str,
            'email': str,
            'error_url': str,
            'expiration': date,
            'hash': str,
            'id': str,
            'intent': str,
            'invoice_information': InvoiceInformationDto,
            'language': str,
            'link': str,
            'logo': str,
            'merchant_id': str,
            'mode': str,
            'modified': int,
            'notify_url': str,
            'payment_method': str,
            'payment_methods': List[str],
            'payment_process': str,
            'portal_id': str,
            'redirect_url': str,
            'reference': str,
            'shipping': AddressDataDto,
            'shopping_cart': List[CartItemDto],
            'status': str,
            'success_url': str,
            'user_id': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'active': 'active',
            'amount': 'amount',
            'background_image': 'backgroundImage',
            'billing': 'billing',
            'created': 'created',
            'currency': 'currency',
            'description': 'description',
            'email': 'email',
            'error_url': 'errorUrl',
            'expiration': 'expiration',
            'hash': 'hash',
            'id': 'id',
            'intent': 'intent',
            'invoice_information': 'invoiceInformation',
            'language': 'language',
            'link': 'link',
            'logo': 'logo',
            'merchant_id': 'merchantId',
            'mode': 'mode',
            'modified': 'modified',
            'notify_url': 'notifyUrl',
            'payment_method': 'paymentMethod',
            'payment_methods': 'paymentMethods',
            'payment_process': 'paymentProcess',
            'portal_id': 'portalId',
            'redirect_url': 'redirectUrl',
            'reference': 'reference',
            'shipping': 'shipping',
            'shopping_cart': 'shoppingCart',
            'status': 'status',
            'success_url': 'successUrl',
            'user_id': 'userId'
        }

        self._account_id = account_id
        self._active = active
        self._amount = amount
        self._background_image = background_image
        self._billing = billing
        self._created = created
        self._currency = currency
        self._description = description
        self._email = email
        self._error_url = error_url
        self._expiration = expiration
        self._hash = hash
        self._id = id
        self._intent = intent
        self._invoice_information = invoice_information
        self._language = language
        self._link = link
        self._logo = logo
        self._merchant_id = merchant_id
        self._mode = mode
        self._modified = modified
        self._notify_url = notify_url
        self._payment_method = payment_method
        self._payment_methods = payment_methods
        self._payment_process = payment_process
        self._portal_id = portal_id
        self._redirect_url = redirect_url
        self._reference = reference
        self._shipping = shipping
        self._shopping_cart = shopping_cart
        self._status = status
        self._success_url = success_url
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinkResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinkResponse of this LinkResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this LinkResponse.

        identifier for the subaccount

        :return: The account_id of this LinkResponse.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this LinkResponse.

        identifier for the subaccount

        :param account_id: The account_id of this LinkResponse.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def active(self):
        """Gets the active of this LinkResponse.

        link activation status

        :return: The active of this LinkResponse.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this LinkResponse.

        link activation status

        :param active: The active of this LinkResponse.
        :type active: bool
        """

        self._active = active

    @property
    def amount(self):
        """Gets the amount of this LinkResponse.

        total amount of all shopping cart items in lowest denomination

        :return: The amount of this LinkResponse.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this LinkResponse.

        total amount of all shopping cart items in lowest denomination

        :param amount: The amount of this LinkResponse.
        :type amount: int
        """
        if amount is not None and amount > 1999999999:
            raise ValueError("Invalid value for `amount`, must be a value less than or equal to `1999999999`")
        if amount is not None and amount < 1:
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `1`")

        self._amount = amount

    @property
    def background_image(self):
        """Gets the background_image of this LinkResponse.

        backgroundImage css property

        :return: The background_image of this LinkResponse.
        :rtype: str
        """
        return self._background_image

    @background_image.setter
    def background_image(self, background_image):
        """Sets the background_image of this LinkResponse.

        backgroundImage css property

        :param background_image: The background_image of this LinkResponse.
        :type background_image: str
        """

        self._background_image = background_image

    @property
    def billing(self):
        """Gets the billing of this LinkResponse.


        :return: The billing of this LinkResponse.
        :rtype: AddressDataDto
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """Sets the billing of this LinkResponse.


        :param billing: The billing of this LinkResponse.
        :type billing: AddressDataDto
        """

        self._billing = billing

    @property
    def created(self):
        """Gets the created of this LinkResponse.

        created time in ISO 8601 format

        :return: The created of this LinkResponse.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this LinkResponse.

        created time in ISO 8601 format

        :param created: The created of this LinkResponse.
        :type created: int
        """

        self._created = created

    @property
    def currency(self):
        """Gets the currency of this LinkResponse.

        currency code

        :return: The currency of this LinkResponse.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this LinkResponse.

        currency code

        :param currency: The currency of this LinkResponse.
        :type currency: str
        """
        allowed_values = ["ALL", "DZD", "ARS", "AUD", "BSD", "BHD", "BDT", "AMD", "BBD", "BMD", "BTN", "BOB", "BWP", "BZD", "SBD", "BND", "MMK", "BIF", "KHR", "CAD", "CVE", "KYD", "LKR", "CLP", "CNY", "COP", "KMF", "CRC", "HRK", "CUP", "CZK", "DKK", "DOP", "SVC", "ETB", "ERN", "FKP", "FJD", "DJF", "GMD", "GIP", "GTQ", "GNF", "GYD", "HTG", "HNL", "HKD", "HUF", "ISK", "INR", "IDR", "IRR", "IQD", "ILS", "JMD", "JPY", "KZT", "JOD", "KES", "KPW", "KRW", "KWD", "KGS", "LAK", "LBP", "LSL", "LRD", "LYD", "MOP", "MWK", "MYR", "MVR", "MUR", "MXN", "MNT", "MDL", "MAD", "OMR", "NAD", "NPR", "ANG", "AWG", "VUV", "NZD", "NIO", "NGN", "NOK", "PKR", "PAB", "PGK", "PYG", "PEN", "PHP", "QAR", "RUB", "RWF", "SHP", "SAR", "SCR", "SLL", "SGD", "VND", "SOS", "ZAR", "SSP", "SZL", "SEK", "CHF", "SYP", "THB", "TOP", "TTD", "AED", "TND", "UGX", "MKD", "EGP", "GBP", "TZS", "USD", "UYU", "UZS", "WST", "YER", "TWD", "UYW", "VES", "MRU", "STN", "CUC", "ZWL", "BYN", "TMT", "GHS", "SDG", "UYI", "RSD", "MZN", "AZN", "RON", "CHE", "CHW", "TRY", "XAF", "XCD", "XOF", "XPF", "XBA", "XBB", "XBC", "XBD", "XAU", "XDR", "XAG", "XPT", "XTS", "XPD", "XUA", "ZMW", "SRD", "MGA", "COU", "AFN", "TJS", "AOA", "BGN", "CDF", "BAM", "EUR", "MXV", "UAH", "GEL", "BOV", "PLN", "BRL", "CLF", "XSU", "USN"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this LinkResponse.

        free format description of the payment

        :return: The description of this LinkResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LinkResponse.

        free format description of the payment

        :param description: The description of this LinkResponse.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")

        self._description = description

    @property
    def email(self):
        """Gets the email of this LinkResponse.

        customer email for invoices or payment notification

        :return: The email of this LinkResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this LinkResponse.

        customer email for invoices or payment notification

        :param email: The email of this LinkResponse.
        :type email: str
        """
        if email is not None and len(email) > 254:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `254`")
        if email is not None and len(email) < 4:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `4`")

        self._email = email

    @property
    def error_url(self):
        """Gets the error_url of this LinkResponse.

        final redirect after a failed payment

        :return: The error_url of this LinkResponse.
        :rtype: str
        """
        return self._error_url

    @error_url.setter
    def error_url(self, error_url):
        """Sets the error_url of this LinkResponse.

        final redirect after a failed payment

        :param error_url: The error_url of this LinkResponse.
        :type error_url: str
        """

        self._error_url = error_url

    @property
    def expiration(self):
        """Gets the expiration of this LinkResponse.

        link expiration date, the link will only be executable until end of that day

        :return: The expiration of this LinkResponse.
        :rtype: date
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this LinkResponse.

        link expiration date, the link will only be executable until end of that day

        :param expiration: The expiration of this LinkResponse.
        :type expiration: date
        """

        self._expiration = expiration

    @property
    def hash(self):
        """Gets the hash of this LinkResponse.

        hash for the client API

        :return: The hash of this LinkResponse.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this LinkResponse.

        hash for the client API

        :param hash: The hash of this LinkResponse.
        :type hash: str
        """

        self._hash = hash

    @property
    def id(self):
        """Gets the id of this LinkResponse.

        link id

        :return: The id of this LinkResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LinkResponse.

        link id

        :param id: The id of this LinkResponse.
        :type id: str
        """
        if id is not None and len(id) > 32:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `32`")
        if id is not None and len(id) < 32:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `32`")

        self._id = id

    @property
    def intent(self):
        """Gets the intent of this LinkResponse.

        designates the type of transaction that will be created

        :return: The intent of this LinkResponse.
        :rtype: str
        """
        return self._intent

    @intent.setter
    def intent(self, intent):
        """Sets the intent of this LinkResponse.

        designates the type of transaction that will be created

        :param intent: The intent of this LinkResponse.
        :type intent: str
        """
        allowed_values = ["authorization", "preauthorization"]  # noqa: E501
        if intent not in allowed_values:
            raise ValueError(
                "Invalid value for `intent` ({0}), must be one of {1}"
                .format(intent, allowed_values)
            )

        self._intent = intent

    @property
    def invoice_information(self):
        """Gets the invoice_information of this LinkResponse.


        :return: The invoice_information of this LinkResponse.
        :rtype: InvoiceInformationDto
        """
        return self._invoice_information

    @invoice_information.setter
    def invoice_information(self, invoice_information):
        """Sets the invoice_information of this LinkResponse.


        :param invoice_information: The invoice_information of this LinkResponse.
        :type invoice_information: InvoiceInformationDto
        """

        self._invoice_information = invoice_information

    @property
    def language(self):
        """Gets the language of this LinkResponse.

        link ISO language code

        :return: The language of this LinkResponse.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this LinkResponse.

        link ISO language code

        :param language: The language of this LinkResponse.
        :type language: str
        """
        allowed_values = ["de_DE", "en_US"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def link(self):
        """Gets the link of this LinkResponse.

        customer payment link

        :return: The link of this LinkResponse.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this LinkResponse.

        customer payment link

        :param link: The link of this LinkResponse.
        :type link: str
        """

        self._link = link

    @property
    def logo(self):
        """Gets the logo of this LinkResponse.

        logo url

        :return: The logo of this LinkResponse.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this LinkResponse.

        logo url

        :param logo: The logo of this LinkResponse.
        :type logo: str
        """

        self._logo = logo

    @property
    def merchant_id(self):
        """Gets the merchant_id of this LinkResponse.

        identifier for the merchant

        :return: The merchant_id of this LinkResponse.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this LinkResponse.

        identifier for the merchant

        :param merchant_id: The merchant_id of this LinkResponse.
        :type merchant_id: str
        """

        self._merchant_id = merchant_id

    @property
    def mode(self):
        """Gets the mode of this LinkResponse.

        execution mode

        :return: The mode of this LinkResponse.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this LinkResponse.

        execution mode

        :param mode: The mode of this LinkResponse.
        :type mode: str
        """
        allowed_values = ["live", "test"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def modified(self):
        """Gets the modified of this LinkResponse.

        last modified time in ISO 8601 format

        :return: The modified of this LinkResponse.
        :rtype: int
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this LinkResponse.

        last modified time in ISO 8601 format

        :param modified: The modified of this LinkResponse.
        :type modified: int
        """

        self._modified = modified

    @property
    def notify_url(self):
        """Gets the notify_url of this LinkResponse.

        notify url. If unset no notification will be send

        :return: The notify_url of this LinkResponse.
        :rtype: str
        """
        return self._notify_url

    @notify_url.setter
    def notify_url(self, notify_url):
        """Sets the notify_url of this LinkResponse.

        notify url. If unset no notification will be send

        :param notify_url: The notify_url of this LinkResponse.
        :type notify_url: str
        """

        self._notify_url = notify_url

    @property
    def payment_method(self):
        """Gets the payment_method of this LinkResponse.

        available payment methods

        :return: The payment_method of this LinkResponse.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this LinkResponse.

        available payment methods

        :param payment_method: The payment_method of this LinkResponse.
        :type payment_method: str
        """
        allowed_values = ["visa", "mastercard", "amex", "paypal", "sofort", "paydirekt", "postfinance-e", "postfinance-card", "bancontact", "przelewy24", "alipay", "ideal", "eps", "giropay", "sepa"]  # noqa: E501
        if payment_method not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_method` ({0}), must be one of {1}"
                .format(payment_method, allowed_values)
            )

        self._payment_method = payment_method

    @property
    def payment_methods(self):
        """Gets the payment_methods of this LinkResponse.

        list of available payment methods

        :return: The payment_methods of this LinkResponse.
        :rtype: List[str]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this LinkResponse.

        list of available payment methods

        :param payment_methods: The payment_methods of this LinkResponse.
        :type payment_methods: List[str]
        """
        allowed_values = ["visa", "mastercard", "amex", "paypal", "sofort", "paydirekt", "postfinance-e", "postfinance-card", "bancontact", "przelewy24", "alipay", "ideal", "eps", "giropay", "sepa"]  # noqa: E501
        if not set(payment_methods).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `payment_methods` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(payment_methods) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._payment_methods = payment_methods

    @property
    def payment_process(self):
        """Gets the payment_process of this LinkResponse.

        identifier of the created payment process.

        :return: The payment_process of this LinkResponse.
        :rtype: str
        """
        return self._payment_process

    @payment_process.setter
    def payment_process(self, payment_process):
        """Sets the payment_process of this LinkResponse.

        identifier of the created payment process.

        :param payment_process: The payment_process of this LinkResponse.
        :type payment_process: str
        """

        self._payment_process = payment_process

    @property
    def portal_id(self):
        """Gets the portal_id of this LinkResponse.

        identifier for the portal

        :return: The portal_id of this LinkResponse.
        :rtype: str
        """
        return self._portal_id

    @portal_id.setter
    def portal_id(self, portal_id):
        """Sets the portal_id of this LinkResponse.

        identifier for the portal

        :param portal_id: The portal_id of this LinkResponse.
        :type portal_id: str
        """

        self._portal_id = portal_id

    @property
    def redirect_url(self):
        """Gets the redirect_url of this LinkResponse.

        redirect url. empty if the payment process does not require a redirect.

        :return: The redirect_url of this LinkResponse.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this LinkResponse.

        redirect url. empty if the payment process does not require a redirect.

        :param redirect_url: The redirect_url of this LinkResponse.
        :type redirect_url: str
        """

        self._redirect_url = redirect_url

    @property
    def reference(self):
        """Gets the reference of this LinkResponse.

        payment reference number, has to be unique per merchant and mode

        :return: The reference of this LinkResponse.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this LinkResponse.

        payment reference number, has to be unique per merchant and mode

        :param reference: The reference of this LinkResponse.
        :type reference: str
        """
        if reference is not None and len(reference) > 20:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `20`")
        if reference is not None and len(reference) < 1:
            raise ValueError("Invalid value for `reference`, length must be greater than or equal to `1`")

        self._reference = reference

    @property
    def shipping(self):
        """Gets the shipping of this LinkResponse.


        :return: The shipping of this LinkResponse.
        :rtype: AddressDataDto
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this LinkResponse.


        :param shipping: The shipping of this LinkResponse.
        :type shipping: AddressDataDto
        """

        self._shipping = shipping

    @property
    def shopping_cart(self):
        """Gets the shopping_cart of this LinkResponse.


        :return: The shopping_cart of this LinkResponse.
        :rtype: List[CartItemDto]
        """
        return self._shopping_cart

    @shopping_cart.setter
    def shopping_cart(self, shopping_cart):
        """Sets the shopping_cart of this LinkResponse.


        :param shopping_cart: The shopping_cart of this LinkResponse.
        :type shopping_cart: List[CartItemDto]
        """

        self._shopping_cart = shopping_cart

    @property
    def status(self):
        """Gets the status of this LinkResponse.

        link status

        :return: The status of this LinkResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LinkResponse.

        link status

        :param status: The status of this LinkResponse.
        :type status: str
        """
        allowed_values = ["ready", "created", "executed", "expired", "deactivated"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def success_url(self):
        """Gets the success_url of this LinkResponse.

        final redirect after a successful payment

        :return: The success_url of this LinkResponse.
        :rtype: str
        """
        return self._success_url

    @success_url.setter
    def success_url(self, success_url):
        """Sets the success_url of this LinkResponse.

        final redirect after a successful payment

        :param success_url: The success_url of this LinkResponse.
        :type success_url: str
        """

        self._success_url = success_url

    @property
    def user_id(self):
        """Gets the user_id of this LinkResponse.

        identifier of the created user.

        :return: The user_id of this LinkResponse.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this LinkResponse.

        identifier of the created user.

        :param user_id: The user_id of this LinkResponse.
        :type user_id: str
        """

        self._user_id = user_id
