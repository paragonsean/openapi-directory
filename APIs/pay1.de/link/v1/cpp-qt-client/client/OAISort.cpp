/**
 * PAYONE Link API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@payone.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISort::OAISort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISort::OAISort() {
    this->initializeModel();
}

OAISort::~OAISort() {}

void OAISort::initializeModel() {

    m_empty_isSet = false;
    m_empty_isValid = false;

    m_sorted_isSet = false;
    m_sorted_isValid = false;

    m_unsorted_isSet = false;
    m_unsorted_isValid = false;
}

void OAISort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISort::fromJsonObject(QJsonObject json) {

    m_empty_isValid = ::OpenAPI::fromJsonValue(m_empty, json[QString("empty")]);
    m_empty_isSet = !json[QString("empty")].isNull() && m_empty_isValid;

    m_sorted_isValid = ::OpenAPI::fromJsonValue(m_sorted, json[QString("sorted")]);
    m_sorted_isSet = !json[QString("sorted")].isNull() && m_sorted_isValid;

    m_unsorted_isValid = ::OpenAPI::fromJsonValue(m_unsorted, json[QString("unsorted")]);
    m_unsorted_isSet = !json[QString("unsorted")].isNull() && m_unsorted_isValid;
}

QString OAISort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISort::asJsonObject() const {
    QJsonObject obj;
    if (m_empty_isSet) {
        obj.insert(QString("empty"), ::OpenAPI::toJsonValue(m_empty));
    }
    if (m_sorted_isSet) {
        obj.insert(QString("sorted"), ::OpenAPI::toJsonValue(m_sorted));
    }
    if (m_unsorted_isSet) {
        obj.insert(QString("unsorted"), ::OpenAPI::toJsonValue(m_unsorted));
    }
    return obj;
}

bool OAISort::isEmpty() const {
    return m_empty;
}
void OAISort::setEmpty(const bool &empty) {
    m_empty = empty;
    m_empty_isSet = true;
}

bool OAISort::is_empty_Set() const{
    return m_empty_isSet;
}

bool OAISort::is_empty_Valid() const{
    return m_empty_isValid;
}

bool OAISort::isSorted() const {
    return m_sorted;
}
void OAISort::setSorted(const bool &sorted) {
    m_sorted = sorted;
    m_sorted_isSet = true;
}

bool OAISort::is_sorted_Set() const{
    return m_sorted_isSet;
}

bool OAISort::is_sorted_Valid() const{
    return m_sorted_isValid;
}

bool OAISort::isUnsorted() const {
    return m_unsorted;
}
void OAISort::setUnsorted(const bool &unsorted) {
    m_unsorted = unsorted;
    m_unsorted_isSet = true;
}

bool OAISort::is_unsorted_Set() const{
    return m_unsorted_isSet;
}

bool OAISort::is_unsorted_Valid() const{
    return m_unsorted_isValid;
}

bool OAISort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_empty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sorted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsorted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISort::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
