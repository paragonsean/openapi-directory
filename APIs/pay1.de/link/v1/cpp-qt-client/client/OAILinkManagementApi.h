/**
 * PAYONE Link API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@payone.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILinkManagementApi_H
#define OAI_OAILinkManagementApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILinkCreateRequest.h"
#include "OAILinkResponse.h"
#include "OAIPageLinkResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILinkManagementApi : public QObject {
    Q_OBJECT

public:
    OAILinkManagementApi(const int timeOut = 0);
    ~OAILinkManagementApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_link_create_request OAILinkCreateRequest [optional]
    */
    virtual void createPaymentLink(const ::OpenAPI::OptionalParam<OAILinkCreateRequest> &oai_link_create_request = ::OpenAPI::OptionalParam<OAILinkCreateRequest>());

    /**
    * @param[in]  link_id QString [required]
    */
    virtual void getPaymentLink(const QString &link_id);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  account_id QString [required]
    * @param[in]  portal_id QString [required]
    * @param[in]  mode QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getPaymentLinks(const QString &merchant_id, const QString &account_id, const QString &portal_id, const QString &mode, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  link_id QString [required]
    * @param[in]  oai_link_create_request OAILinkCreateRequest [optional]
    */
    virtual void updatePaymentLink(const QString &link_id, const ::OpenAPI::OptionalParam<OAILinkCreateRequest> &oai_link_create_request = ::OpenAPI::OptionalParam<OAILinkCreateRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createPaymentLinkCallback(OAIHttpRequestWorker *worker);
    void getPaymentLinkCallback(OAIHttpRequestWorker *worker);
    void getPaymentLinksCallback(OAIHttpRequestWorker *worker);
    void updatePaymentLinkCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createPaymentLinkSignal(OAILinkResponse summary);
    void getPaymentLinkSignal(OAILinkResponse summary);
    void getPaymentLinksSignal(OAIPageLinkResponse summary);
    void updatePaymentLinkSignal(OAILinkResponse summary);


    void createPaymentLinkSignalFull(OAIHttpRequestWorker *worker, OAILinkResponse summary);
    void getPaymentLinkSignalFull(OAIHttpRequestWorker *worker, OAILinkResponse summary);
    void getPaymentLinksSignalFull(OAIHttpRequestWorker *worker, OAIPageLinkResponse summary);
    void updatePaymentLinkSignalFull(OAIHttpRequestWorker *worker, OAILinkResponse summary);

    Q_DECL_DEPRECATED_X("Use createPaymentLinkSignalError() instead")
    void createPaymentLinkSignalE(OAILinkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPaymentLinkSignalError(OAILinkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentLinkSignalError() instead")
    void getPaymentLinkSignalE(OAILinkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentLinkSignalError(OAILinkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentLinksSignalError() instead")
    void getPaymentLinksSignalE(OAIPageLinkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentLinksSignalError(OAIPageLinkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePaymentLinkSignalError() instead")
    void updatePaymentLinkSignalE(OAILinkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePaymentLinkSignalError(OAILinkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createPaymentLinkSignalErrorFull() instead")
    void createPaymentLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPaymentLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentLinkSignalErrorFull() instead")
    void getPaymentLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentLinksSignalErrorFull() instead")
    void getPaymentLinksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentLinksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePaymentLinkSignalErrorFull() instead")
    void updatePaymentLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePaymentLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
