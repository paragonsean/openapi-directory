/**
 * PAYONE Link API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@payone.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPageable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPageable::OAIPageable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPageable::OAIPageable() {
    this->initializeModel();
}

OAIPageable::~OAIPageable() {}

void OAIPageable::initializeModel() {

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_paged_isSet = false;
    m_paged_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_unpaged_isSet = false;
    m_unpaged_isValid = false;
}

void OAIPageable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPageable::fromJsonObject(QJsonObject json) {

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_paged_isValid = ::OpenAPI::fromJsonValue(m_paged, json[QString("paged")]);
    m_paged_isSet = !json[QString("paged")].isNull() && m_paged_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_unpaged_isValid = ::OpenAPI::fromJsonValue(m_unpaged, json[QString("unpaged")]);
    m_unpaged_isSet = !json[QString("unpaged")].isNull() && m_unpaged_isValid;
}

QString OAIPageable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPageable::asJsonObject() const {
    QJsonObject obj;
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_paged_isSet) {
        obj.insert(QString("paged"), ::OpenAPI::toJsonValue(m_paged));
    }
    if (m_sort.isSet()) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_unpaged_isSet) {
        obj.insert(QString("unpaged"), ::OpenAPI::toJsonValue(m_unpaged));
    }
    return obj;
}

qint64 OAIPageable::getOffset() const {
    return m_offset;
}
void OAIPageable::setOffset(const qint64 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIPageable::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIPageable::is_offset_Valid() const{
    return m_offset_isValid;
}

qint32 OAIPageable::getPageNumber() const {
    return m_page_number;
}
void OAIPageable::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIPageable::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIPageable::is_page_number_Valid() const{
    return m_page_number_isValid;
}

qint32 OAIPageable::getPageSize() const {
    return m_page_size;
}
void OAIPageable::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIPageable::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIPageable::is_page_size_Valid() const{
    return m_page_size_isValid;
}

bool OAIPageable::isPaged() const {
    return m_paged;
}
void OAIPageable::setPaged(const bool &paged) {
    m_paged = paged;
    m_paged_isSet = true;
}

bool OAIPageable::is_paged_Set() const{
    return m_paged_isSet;
}

bool OAIPageable::is_paged_Valid() const{
    return m_paged_isValid;
}

OAISort OAIPageable::getSort() const {
    return m_sort;
}
void OAIPageable::setSort(const OAISort &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIPageable::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIPageable::is_sort_Valid() const{
    return m_sort_isValid;
}

bool OAIPageable::isUnpaged() const {
    return m_unpaged;
}
void OAIPageable::setUnpaged(const bool &unpaged) {
    m_unpaged = unpaged;
    m_unpaged_isSet = true;
}

bool OAIPageable::is_unpaged_Set() const{
    return m_unpaged_isSet;
}

bool OAIPageable::is_unpaged_Valid() const{
    return m_unpaged_isValid;
}

bool OAIPageable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unpaged_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPageable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
