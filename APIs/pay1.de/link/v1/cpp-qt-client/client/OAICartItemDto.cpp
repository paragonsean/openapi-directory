/**
 * PAYONE Link API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@payone.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICartItemDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICartItemDto::OAICartItemDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICartItemDto::OAICartItemDto() {
    this->initializeModel();
}

OAICartItemDto::~OAICartItemDto() {}

void OAICartItemDto::initializeModel() {

    m_delivery_date_end_isSet = false;
    m_delivery_date_end_isValid = false;

    m_delivery_date_start_isSet = false;
    m_delivery_date_start_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vat_rate_isSet = false;
    m_vat_rate_isValid = false;
}

void OAICartItemDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICartItemDto::fromJsonObject(QJsonObject json) {

    m_delivery_date_end_isValid = ::OpenAPI::fromJsonValue(m_delivery_date_end, json[QString("deliveryDateEnd")]);
    m_delivery_date_end_isSet = !json[QString("deliveryDateEnd")].isNull() && m_delivery_date_end_isValid;

    m_delivery_date_start_isValid = ::OpenAPI::fromJsonValue(m_delivery_date_start, json[QString("deliveryDateStart")]);
    m_delivery_date_start_isSet = !json[QString("deliveryDateStart")].isNull() && m_delivery_date_start_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vat_rate_isValid = ::OpenAPI::fromJsonValue(m_vat_rate, json[QString("vatRate")]);
    m_vat_rate_isSet = !json[QString("vatRate")].isNull() && m_vat_rate_isValid;
}

QString OAICartItemDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICartItemDto::asJsonObject() const {
    QJsonObject obj;
    if (m_delivery_date_end_isSet) {
        obj.insert(QString("deliveryDateEnd"), ::OpenAPI::toJsonValue(m_delivery_date_end));
    }
    if (m_delivery_date_start_isSet) {
        obj.insert(QString("deliveryDateStart"), ::OpenAPI::toJsonValue(m_delivery_date_start));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vat_rate_isSet) {
        obj.insert(QString("vatRate"), ::OpenAPI::toJsonValue(m_vat_rate));
    }
    return obj;
}

QDate OAICartItemDto::getDeliveryDateEnd() const {
    return m_delivery_date_end;
}
void OAICartItemDto::setDeliveryDateEnd(const QDate &delivery_date_end) {
    m_delivery_date_end = delivery_date_end;
    m_delivery_date_end_isSet = true;
}

bool OAICartItemDto::is_delivery_date_end_Set() const{
    return m_delivery_date_end_isSet;
}

bool OAICartItemDto::is_delivery_date_end_Valid() const{
    return m_delivery_date_end_isValid;
}

QDate OAICartItemDto::getDeliveryDateStart() const {
    return m_delivery_date_start;
}
void OAICartItemDto::setDeliveryDateStart(const QDate &delivery_date_start) {
    m_delivery_date_start = delivery_date_start;
    m_delivery_date_start_isSet = true;
}

bool OAICartItemDto::is_delivery_date_start_Set() const{
    return m_delivery_date_start_isSet;
}

bool OAICartItemDto::is_delivery_date_start_Valid() const{
    return m_delivery_date_start_isValid;
}

QString OAICartItemDto::getDescription() const {
    return m_description;
}
void OAICartItemDto::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICartItemDto::is_description_Set() const{
    return m_description_isSet;
}

bool OAICartItemDto::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICartItemDto::getNumber() const {
    return m_number;
}
void OAICartItemDto::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAICartItemDto::is_number_Set() const{
    return m_number_isSet;
}

bool OAICartItemDto::is_number_Valid() const{
    return m_number_isValid;
}

qint64 OAICartItemDto::getPrice() const {
    return m_price;
}
void OAICartItemDto::setPrice(const qint64 &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAICartItemDto::is_price_Set() const{
    return m_price_isSet;
}

bool OAICartItemDto::is_price_Valid() const{
    return m_price_isValid;
}

qint64 OAICartItemDto::getQuantity() const {
    return m_quantity;
}
void OAICartItemDto::setQuantity(const qint64 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAICartItemDto::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAICartItemDto::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAICartItemDto::getType() const {
    return m_type;
}
void OAICartItemDto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICartItemDto::is_type_Set() const{
    return m_type_isSet;
}

bool OAICartItemDto::is_type_Valid() const{
    return m_type_isValid;
}

qint64 OAICartItemDto::getVatRate() const {
    return m_vat_rate;
}
void OAICartItemDto::setVatRate(const qint64 &vat_rate) {
    m_vat_rate = vat_rate;
    m_vat_rate_isSet = true;
}

bool OAICartItemDto::is_vat_rate_Set() const{
    return m_vat_rate_isSet;
}

bool OAICartItemDto::is_vat_rate_Valid() const{
    return m_vat_rate_isValid;
}

bool OAICartItemDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivery_date_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_date_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICartItemDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_number_isValid && m_price_isValid && m_quantity_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
