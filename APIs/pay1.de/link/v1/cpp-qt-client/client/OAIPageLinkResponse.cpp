/**
 * PAYONE Link API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@payone.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPageLinkResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPageLinkResponse::OAIPageLinkResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPageLinkResponse::OAIPageLinkResponse() {
    this->initializeModel();
}

OAIPageLinkResponse::~OAIPageLinkResponse() {}

void OAIPageLinkResponse::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_empty_isSet = false;
    m_empty_isValid = false;

    m_first_isSet = false;
    m_first_isValid = false;

    m_last_isSet = false;
    m_last_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_number_of_elements_isSet = false;
    m_number_of_elements_isValid = false;

    m_pageable_isSet = false;
    m_pageable_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_total_elements_isSet = false;
    m_total_elements_isValid = false;

    m_total_pages_isSet = false;
    m_total_pages_isValid = false;
}

void OAIPageLinkResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPageLinkResponse::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_empty_isValid = ::OpenAPI::fromJsonValue(m_empty, json[QString("empty")]);
    m_empty_isSet = !json[QString("empty")].isNull() && m_empty_isValid;

    m_first_isValid = ::OpenAPI::fromJsonValue(m_first, json[QString("first")]);
    m_first_isSet = !json[QString("first")].isNull() && m_first_isValid;

    m_last_isValid = ::OpenAPI::fromJsonValue(m_last, json[QString("last")]);
    m_last_isSet = !json[QString("last")].isNull() && m_last_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_number_of_elements_isValid = ::OpenAPI::fromJsonValue(m_number_of_elements, json[QString("numberOfElements")]);
    m_number_of_elements_isSet = !json[QString("numberOfElements")].isNull() && m_number_of_elements_isValid;

    m_pageable_isValid = ::OpenAPI::fromJsonValue(m_pageable, json[QString("pageable")]);
    m_pageable_isSet = !json[QString("pageable")].isNull() && m_pageable_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_total_elements_isValid = ::OpenAPI::fromJsonValue(m_total_elements, json[QString("totalElements")]);
    m_total_elements_isSet = !json[QString("totalElements")].isNull() && m_total_elements_isValid;

    m_total_pages_isValid = ::OpenAPI::fromJsonValue(m_total_pages, json[QString("totalPages")]);
    m_total_pages_isSet = !json[QString("totalPages")].isNull() && m_total_pages_isValid;
}

QString OAIPageLinkResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPageLinkResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_content.size() > 0) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_empty_isSet) {
        obj.insert(QString("empty"), ::OpenAPI::toJsonValue(m_empty));
    }
    if (m_first_isSet) {
        obj.insert(QString("first"), ::OpenAPI::toJsonValue(m_first));
    }
    if (m_last_isSet) {
        obj.insert(QString("last"), ::OpenAPI::toJsonValue(m_last));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_number_of_elements_isSet) {
        obj.insert(QString("numberOfElements"), ::OpenAPI::toJsonValue(m_number_of_elements));
    }
    if (m_pageable.isSet()) {
        obj.insert(QString("pageable"), ::OpenAPI::toJsonValue(m_pageable));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_sort.isSet()) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_total_elements_isSet) {
        obj.insert(QString("totalElements"), ::OpenAPI::toJsonValue(m_total_elements));
    }
    if (m_total_pages_isSet) {
        obj.insert(QString("totalPages"), ::OpenAPI::toJsonValue(m_total_pages));
    }
    return obj;
}

QList<OAILinkResponse> OAIPageLinkResponse::getContent() const {
    return m_content;
}
void OAIPageLinkResponse::setContent(const QList<OAILinkResponse> &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIPageLinkResponse::is_content_Set() const{
    return m_content_isSet;
}

bool OAIPageLinkResponse::is_content_Valid() const{
    return m_content_isValid;
}

bool OAIPageLinkResponse::isEmpty() const {
    return m_empty;
}
void OAIPageLinkResponse::setEmpty(const bool &empty) {
    m_empty = empty;
    m_empty_isSet = true;
}

bool OAIPageLinkResponse::is_empty_Set() const{
    return m_empty_isSet;
}

bool OAIPageLinkResponse::is_empty_Valid() const{
    return m_empty_isValid;
}

bool OAIPageLinkResponse::isFirst() const {
    return m_first;
}
void OAIPageLinkResponse::setFirst(const bool &first) {
    m_first = first;
    m_first_isSet = true;
}

bool OAIPageLinkResponse::is_first_Set() const{
    return m_first_isSet;
}

bool OAIPageLinkResponse::is_first_Valid() const{
    return m_first_isValid;
}

bool OAIPageLinkResponse::isLast() const {
    return m_last;
}
void OAIPageLinkResponse::setLast(const bool &last) {
    m_last = last;
    m_last_isSet = true;
}

bool OAIPageLinkResponse::is_last_Set() const{
    return m_last_isSet;
}

bool OAIPageLinkResponse::is_last_Valid() const{
    return m_last_isValid;
}

qint32 OAIPageLinkResponse::getNumber() const {
    return m_number;
}
void OAIPageLinkResponse::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPageLinkResponse::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPageLinkResponse::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAIPageLinkResponse::getNumberOfElements() const {
    return m_number_of_elements;
}
void OAIPageLinkResponse::setNumberOfElements(const qint32 &number_of_elements) {
    m_number_of_elements = number_of_elements;
    m_number_of_elements_isSet = true;
}

bool OAIPageLinkResponse::is_number_of_elements_Set() const{
    return m_number_of_elements_isSet;
}

bool OAIPageLinkResponse::is_number_of_elements_Valid() const{
    return m_number_of_elements_isValid;
}

OAIPageable OAIPageLinkResponse::getPageable() const {
    return m_pageable;
}
void OAIPageLinkResponse::setPageable(const OAIPageable &pageable) {
    m_pageable = pageable;
    m_pageable_isSet = true;
}

bool OAIPageLinkResponse::is_pageable_Set() const{
    return m_pageable_isSet;
}

bool OAIPageLinkResponse::is_pageable_Valid() const{
    return m_pageable_isValid;
}

qint32 OAIPageLinkResponse::getSize() const {
    return m_size;
}
void OAIPageLinkResponse::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIPageLinkResponse::is_size_Set() const{
    return m_size_isSet;
}

bool OAIPageLinkResponse::is_size_Valid() const{
    return m_size_isValid;
}

OAISort OAIPageLinkResponse::getSort() const {
    return m_sort;
}
void OAIPageLinkResponse::setSort(const OAISort &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIPageLinkResponse::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIPageLinkResponse::is_sort_Valid() const{
    return m_sort_isValid;
}

qint64 OAIPageLinkResponse::getTotalElements() const {
    return m_total_elements;
}
void OAIPageLinkResponse::setTotalElements(const qint64 &total_elements) {
    m_total_elements = total_elements;
    m_total_elements_isSet = true;
}

bool OAIPageLinkResponse::is_total_elements_Set() const{
    return m_total_elements_isSet;
}

bool OAIPageLinkResponse::is_total_elements_Valid() const{
    return m_total_elements_isValid;
}

qint32 OAIPageLinkResponse::getTotalPages() const {
    return m_total_pages;
}
void OAIPageLinkResponse::setTotalPages(const qint32 &total_pages) {
    m_total_pages = total_pages;
    m_total_pages_isSet = true;
}

bool OAIPageLinkResponse::is_total_pages_Set() const{
    return m_total_pages_isSet;
}

bool OAIPageLinkResponse::is_total_pages_Valid() const{
    return m_total_pages_isValid;
}

bool OAIPageLinkResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_empty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_elements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pageable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_elements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_pages_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPageLinkResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
