/*
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import org.openapitools.client.model.Casing;
import org.openapitools.client.model.DecommissionDescription;
import org.openapitools.client.model.LinerPerforation;
import org.openapitools.client.model.LithologyDescription;
import org.openapitools.client.model.OrganizationNameList;
import org.openapitools.client.model.PersonBasic;
import org.openapitools.client.model.Screen;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WellDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:23.471145-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WellDetail {
  public static final String SERIALIZED_NAME_ALTERATION_END_DATE = "alteration_end_date";
  @SerializedName(SERIALIZED_NAME_ALTERATION_END_DATE)
  private LocalDate alterationEndDate;

  public static final String SERIALIZED_NAME_ALTERNATIVE_SPECS_SUBMITTED = "alternative_specs_submitted";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_SPECS_SUBMITTED)
  private Boolean alternativeSpecsSubmitted;

  public static final String SERIALIZED_NAME_ANALYTIC_SOLUTION_TYPE = "analytic_solution_type";
  @SerializedName(SERIALIZED_NAME_ANALYTIC_SOLUTION_TYPE)
  private BigDecimal analyticSolutionType;

  public static final String SERIALIZED_NAME_AQUIFER = "aquifer";
  @SerializedName(SERIALIZED_NAME_AQUIFER)
  private Integer aquifer;

  public static final String SERIALIZED_NAME_AQUIFER_VULNERABILITY_INDEX = "aquifer_vulnerability_index";
  @SerializedName(SERIALIZED_NAME_AQUIFER_VULNERABILITY_INDEX)
  private BigDecimal aquiferVulnerabilityIndex;

  public static final String SERIALIZED_NAME_ARTESIAN_FLOW = "artesian_flow";
  @SerializedName(SERIALIZED_NAME_ARTESIAN_FLOW)
  private BigDecimal artesianFlow;

  public static final String SERIALIZED_NAME_ARTESIAN_PRESSURE = "artesian_pressure";
  @SerializedName(SERIALIZED_NAME_ARTESIAN_PRESSURE)
  private BigDecimal artesianPressure;

  public static final String SERIALIZED_NAME_BACKFILL_DEPTH = "backfill_depth";
  @SerializedName(SERIALIZED_NAME_BACKFILL_DEPTH)
  private BigDecimal backfillDepth;

  public static final String SERIALIZED_NAME_BACKFILL_MATERIAL = "backfill_material";
  @SerializedName(SERIALIZED_NAME_BACKFILL_MATERIAL)
  private String backfillMaterial;

  public static final String SERIALIZED_NAME_BACKFILL_TYPE = "backfill_type";
  @SerializedName(SERIALIZED_NAME_BACKFILL_TYPE)
  private String backfillType;

  public static final String SERIALIZED_NAME_BCGS_ID = "bcgs_id";
  @SerializedName(SERIALIZED_NAME_BCGS_ID)
  private Integer bcgsId;

  public static final String SERIALIZED_NAME_BEDROCK_DEPTH = "bedrock_depth";
  @SerializedName(SERIALIZED_NAME_BEDROCK_DEPTH)
  private BigDecimal bedrockDepth;

  public static final String SERIALIZED_NAME_BOUNDARY_EFFECT = "boundary_effect";
  @SerializedName(SERIALIZED_NAME_BOUNDARY_EFFECT)
  private BigDecimal boundaryEffect;

  public static final String SERIALIZED_NAME_CASING_SET = "casing_set";
  @SerializedName(SERIALIZED_NAME_CASING_SET)
  private List<Casing> casingSet = new ArrayList<>();

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_COMPANY_OF_PERSON_RESPONSIBLE = "company_of_person_responsible";
  @SerializedName(SERIALIZED_NAME_COMPANY_OF_PERSON_RESPONSIBLE)
  private OrganizationNameList companyOfPersonResponsible;

  public static final String SERIALIZED_NAME_CONSTRUCTION_END_DATE = "construction_end_date";
  @SerializedName(SERIALIZED_NAME_CONSTRUCTION_END_DATE)
  private LocalDate constructionEndDate;

  public static final String SERIALIZED_NAME_CONSTRUCTION_START_DATE = "construction_start_date";
  @SerializedName(SERIALIZED_NAME_CONSTRUCTION_START_DATE)
  private LocalDate constructionStartDate;

  public static final String SERIALIZED_NAME_COORDINATE_ACQUISITION_CODE = "coordinate_acquisition_code";
  @SerializedName(SERIALIZED_NAME_COORDINATE_ACQUISITION_CODE)
  private String coordinateAcquisitionCode;

  public static final String SERIALIZED_NAME_DECOMMISSION_DESCRIPTION_SET = "decommission_description_set";
  @SerializedName(SERIALIZED_NAME_DECOMMISSION_DESCRIPTION_SET)
  private List<DecommissionDescription> decommissionDescriptionSet = new ArrayList<>();

  public static final String SERIALIZED_NAME_DECOMMISSION_DETAILS = "decommission_details";
  @SerializedName(SERIALIZED_NAME_DECOMMISSION_DETAILS)
  private String decommissionDetails;

  public static final String SERIALIZED_NAME_DECOMMISSION_END_DATE = "decommission_end_date";
  @SerializedName(SERIALIZED_NAME_DECOMMISSION_END_DATE)
  private LocalDate decommissionEndDate;

  public static final String SERIALIZED_NAME_DECOMMISSION_METHOD = "decommission_method";
  @SerializedName(SERIALIZED_NAME_DECOMMISSION_METHOD)
  private String decommissionMethod;

  public static final String SERIALIZED_NAME_DECOMMISSION_REASON = "decommission_reason";
  @SerializedName(SERIALIZED_NAME_DECOMMISSION_REASON)
  private String decommissionReason;

  public static final String SERIALIZED_NAME_DECOMMISSION_START_DATE = "decommission_start_date";
  @SerializedName(SERIALIZED_NAME_DECOMMISSION_START_DATE)
  private LocalDate decommissionStartDate;

  public static final String SERIALIZED_NAME_DEVELOPMENT_HOURS = "development_hours";
  @SerializedName(SERIALIZED_NAME_DEVELOPMENT_HOURS)
  private BigDecimal developmentHours;

  public static final String SERIALIZED_NAME_DEVELOPMENT_METHOD = "development_method";
  @SerializedName(SERIALIZED_NAME_DEVELOPMENT_METHOD)
  private String developmentMethod;

  public static final String SERIALIZED_NAME_DEVELOPMENT_NOTES = "development_notes";
  @SerializedName(SERIALIZED_NAME_DEVELOPMENT_NOTES)
  private String developmentNotes;

  public static final String SERIALIZED_NAME_DIAMETER = "diameter";
  @SerializedName(SERIALIZED_NAME_DIAMETER)
  private String diameter;

  public static final String SERIALIZED_NAME_DRAWDOWN = "drawdown";
  @SerializedName(SERIALIZED_NAME_DRAWDOWN)
  private BigDecimal drawdown;

  public static final String SERIALIZED_NAME_DRILLING_COMPANY = "drilling_company";
  @SerializedName(SERIALIZED_NAME_DRILLING_COMPANY)
  private UUID drillingCompany;

  public static final String SERIALIZED_NAME_DRILLING_METHOD = "drilling_method";
  @SerializedName(SERIALIZED_NAME_DRILLING_METHOD)
  private String drillingMethod;

  public static final String SERIALIZED_NAME_EMS = "ems";
  @SerializedName(SERIALIZED_NAME_EMS)
  private String ems;

  public static final String SERIALIZED_NAME_FILTER_PACK_FROM = "filter_pack_from";
  @SerializedName(SERIALIZED_NAME_FILTER_PACK_FROM)
  private BigDecimal filterPackFrom;

  public static final String SERIALIZED_NAME_FILTER_PACK_MATERIAL = "filter_pack_material";
  @SerializedName(SERIALIZED_NAME_FILTER_PACK_MATERIAL)
  private String filterPackMaterial;

  public static final String SERIALIZED_NAME_FILTER_PACK_MATERIAL_SIZE = "filter_pack_material_size";
  @SerializedName(SERIALIZED_NAME_FILTER_PACK_MATERIAL_SIZE)
  private String filterPackMaterialSize;

  public static final String SERIALIZED_NAME_FILTER_PACK_THICKNESS = "filter_pack_thickness";
  @SerializedName(SERIALIZED_NAME_FILTER_PACK_THICKNESS)
  private BigDecimal filterPackThickness;

  public static final String SERIALIZED_NAME_FILTER_PACK_TO = "filter_pack_to";
  @SerializedName(SERIALIZED_NAME_FILTER_PACK_TO)
  private BigDecimal filterPackTo;

  public static final String SERIALIZED_NAME_FINAL_CASING_STICK_UP = "final_casing_stick_up";
  @SerializedName(SERIALIZED_NAME_FINAL_CASING_STICK_UP)
  private BigDecimal finalCasingStickUp;

  public static final String SERIALIZED_NAME_FINISHED_WELL_DEPTH = "finished_well_depth";
  @SerializedName(SERIALIZED_NAME_FINISHED_WELL_DEPTH)
  private BigDecimal finishedWellDepth;

  public static final String SERIALIZED_NAME_GROUND_ELEVATION = "ground_elevation";
  @SerializedName(SERIALIZED_NAME_GROUND_ELEVATION)
  private BigDecimal groundElevation;

  public static final String SERIALIZED_NAME_GROUND_ELEVATION_METHOD = "ground_elevation_method";
  @SerializedName(SERIALIZED_NAME_GROUND_ELEVATION_METHOD)
  private String groundElevationMethod;

  public static final String SERIALIZED_NAME_HYDRAULIC_CONDUCTIVITY = "hydraulic_conductivity";
  @SerializedName(SERIALIZED_NAME_HYDRAULIC_CONDUCTIVITY)
  private String hydraulicConductivity;

  public static final String SERIALIZED_NAME_HYDRO_FRACTURING_PERFORMED = "hydro_fracturing_performed";
  @SerializedName(SERIALIZED_NAME_HYDRO_FRACTURING_PERFORMED)
  private Boolean hydroFracturingPerformed;

  public static final String SERIALIZED_NAME_HYDRO_FRACTURING_YIELD_INCREASE = "hydro_fracturing_yield_increase";
  @SerializedName(SERIALIZED_NAME_HYDRO_FRACTURING_YIELD_INCREASE)
  private BigDecimal hydroFracturingYieldIncrease;

  public static final String SERIALIZED_NAME_ID_PLATE_ATTACHED_BY = "id_plate_attached_by";
  @SerializedName(SERIALIZED_NAME_ID_PLATE_ATTACHED_BY)
  private String idPlateAttachedBy;

  public static final String SERIALIZED_NAME_IDENTIFICATION_PLATE_NUMBER = "identification_plate_number";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_PLATE_NUMBER)
  private Integer identificationPlateNumber;

  public static final String SERIALIZED_NAME_INTENDED_WATER_USE = "intended_water_use";
  @SerializedName(SERIALIZED_NAME_INTENDED_WATER_USE)
  private String intendedWaterUse;

  public static final String SERIALIZED_NAME_LAND_DISTRICT = "land_district";
  @SerializedName(SERIALIZED_NAME_LAND_DISTRICT)
  private String landDistrict;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private BigDecimal latitude;

  public static final String SERIALIZED_NAME_LEGAL_BLOCK = "legal_block";
  @SerializedName(SERIALIZED_NAME_LEGAL_BLOCK)
  private String legalBlock;

  public static final String SERIALIZED_NAME_LEGAL_DISTRICT_LOT = "legal_district_lot";
  @SerializedName(SERIALIZED_NAME_LEGAL_DISTRICT_LOT)
  private String legalDistrictLot;

  public static final String SERIALIZED_NAME_LEGAL_LOT = "legal_lot";
  @SerializedName(SERIALIZED_NAME_LEGAL_LOT)
  private String legalLot;

  public static final String SERIALIZED_NAME_LEGAL_PID = "legal_pid";
  @SerializedName(SERIALIZED_NAME_LEGAL_PID)
  private Integer legalPid;

  public static final String SERIALIZED_NAME_LEGAL_PLAN = "legal_plan";
  @SerializedName(SERIALIZED_NAME_LEGAL_PLAN)
  private String legalPlan;

  public static final String SERIALIZED_NAME_LEGAL_RANGE = "legal_range";
  @SerializedName(SERIALIZED_NAME_LEGAL_RANGE)
  private String legalRange;

  public static final String SERIALIZED_NAME_LEGAL_SECTION = "legal_section";
  @SerializedName(SERIALIZED_NAME_LEGAL_SECTION)
  private String legalSection;

  public static final String SERIALIZED_NAME_LEGAL_TOWNSHIP = "legal_township";
  @SerializedName(SERIALIZED_NAME_LEGAL_TOWNSHIP)
  private String legalTownship;

  public static final String SERIALIZED_NAME_LICENCED_STATUS = "licenced_status";
  @SerializedName(SERIALIZED_NAME_LICENCED_STATUS)
  private String licencedStatus;

  public static final String SERIALIZED_NAME_LINER_DIAMETER = "liner_diameter";
  @SerializedName(SERIALIZED_NAME_LINER_DIAMETER)
  private BigDecimal linerDiameter;

  public static final String SERIALIZED_NAME_LINER_FROM = "liner_from";
  @SerializedName(SERIALIZED_NAME_LINER_FROM)
  private BigDecimal linerFrom;

  public static final String SERIALIZED_NAME_LINER_MATERIAL = "liner_material";
  @SerializedName(SERIALIZED_NAME_LINER_MATERIAL)
  private String linerMaterial;

  public static final String SERIALIZED_NAME_LINER_THICKNESS = "liner_thickness";
  @SerializedName(SERIALIZED_NAME_LINER_THICKNESS)
  private BigDecimal linerThickness;

  public static final String SERIALIZED_NAME_LINER_TO = "liner_to";
  @SerializedName(SERIALIZED_NAME_LINER_TO)
  private BigDecimal linerTo;

  public static final String SERIALIZED_NAME_LINERPERFORATION_SET = "linerperforation_set";
  @SerializedName(SERIALIZED_NAME_LINERPERFORATION_SET)
  private List<LinerPerforation> linerperforationSet = new ArrayList<>();

  public static final String SERIALIZED_NAME_LITHOLOGYDESCRIPTION_SET = "lithologydescription_set";
  @SerializedName(SERIALIZED_NAME_LITHOLOGYDESCRIPTION_SET)
  private List<LithologyDescription> lithologydescriptionSet = new ArrayList<>();

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private BigDecimal longitude;

  public static final String SERIALIZED_NAME_OBSERVATION_WELL_NUMBER = "observation_well_number";
  @SerializedName(SERIALIZED_NAME_OBSERVATION_WELL_NUMBER)
  private String observationWellNumber;

  public static final String SERIALIZED_NAME_OBSERVATION_WELL_STATUS = "observation_well_status";
  @SerializedName(SERIALIZED_NAME_OBSERVATION_WELL_STATUS)
  private String observationWellStatus;

  public static final String SERIALIZED_NAME_OTHER_DRILLING_METHOD = "other_drilling_method";
  @SerializedName(SERIALIZED_NAME_OTHER_DRILLING_METHOD)
  private String otherDrillingMethod;

  public static final String SERIALIZED_NAME_OTHER_SCREEN_BOTTOM = "other_screen_bottom";
  @SerializedName(SERIALIZED_NAME_OTHER_SCREEN_BOTTOM)
  private String otherScreenBottom;

  public static final String SERIALIZED_NAME_OTHER_SCREEN_MATERIAL = "other_screen_material";
  @SerializedName(SERIALIZED_NAME_OTHER_SCREEN_MATERIAL)
  private String otherScreenMaterial;

  public static final String SERIALIZED_NAME_OWNER_FULL_NAME = "owner_full_name";
  @SerializedName(SERIALIZED_NAME_OWNER_FULL_NAME)
  private String ownerFullName;

  public static final String SERIALIZED_NAME_PERSON_RESPONSIBLE = "person_responsible";
  @SerializedName(SERIALIZED_NAME_PERSON_RESPONSIBLE)
  private PersonBasic personResponsible;

  public static final String SERIALIZED_NAME_RECOMMENDED_PUMP_DEPTH = "recommended_pump_depth";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_PUMP_DEPTH)
  private BigDecimal recommendedPumpDepth;

  public static final String SERIALIZED_NAME_RECOMMENDED_PUMP_RATE = "recommended_pump_rate";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_PUMP_RATE)
  private BigDecimal recommendedPumpRate;

  public static final String SERIALIZED_NAME_SCREEN_BOTTOM = "screen_bottom";
  @SerializedName(SERIALIZED_NAME_SCREEN_BOTTOM)
  private String screenBottom;

  public static final String SERIALIZED_NAME_SCREEN_INFORMATION = "screen_information";
  @SerializedName(SERIALIZED_NAME_SCREEN_INFORMATION)
  private String screenInformation;

  public static final String SERIALIZED_NAME_SCREEN_INTAKE_METHOD = "screen_intake_method";
  @SerializedName(SERIALIZED_NAME_SCREEN_INTAKE_METHOD)
  private String screenIntakeMethod;

  public static final String SERIALIZED_NAME_SCREEN_MATERIAL = "screen_material";
  @SerializedName(SERIALIZED_NAME_SCREEN_MATERIAL)
  private String screenMaterial;

  public static final String SERIALIZED_NAME_SCREEN_OPENING = "screen_opening";
  @SerializedName(SERIALIZED_NAME_SCREEN_OPENING)
  private String screenOpening;

  public static final String SERIALIZED_NAME_SCREEN_SET = "screen_set";
  @SerializedName(SERIALIZED_NAME_SCREEN_SET)
  private List<Screen> screenSet = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCREEN_TYPE = "screen_type";
  @SerializedName(SERIALIZED_NAME_SCREEN_TYPE)
  private String screenType;

  public static final String SERIALIZED_NAME_SEALANT_MATERIAL = "sealant_material";
  @SerializedName(SERIALIZED_NAME_SEALANT_MATERIAL)
  private String sealantMaterial;

  public static final String SERIALIZED_NAME_SPECIFIC_STORAGE = "specific_storage";
  @SerializedName(SERIALIZED_NAME_SPECIFIC_STORAGE)
  private String specificStorage;

  public static final String SERIALIZED_NAME_SPECIFIC_YIELD = "specific_yield";
  @SerializedName(SERIALIZED_NAME_SPECIFIC_YIELD)
  private BigDecimal specificYield;

  public static final String SERIALIZED_NAME_STATIC_LEVEL_BEFORE_TEST = "static_level_before_test";
  @SerializedName(SERIALIZED_NAME_STATIC_LEVEL_BEFORE_TEST)
  private BigDecimal staticLevelBeforeTest;

  public static final String SERIALIZED_NAME_STATIC_WATER_LEVEL = "static_water_level";
  @SerializedName(SERIALIZED_NAME_STATIC_WATER_LEVEL)
  private BigDecimal staticWaterLevel;

  public static final String SERIALIZED_NAME_STORATIVITY = "storativity";
  @SerializedName(SERIALIZED_NAME_STORATIVITY)
  private BigDecimal storativity;

  public static final String SERIALIZED_NAME_STREET_ADDRESS = "street_address";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS)
  private String streetAddress;

  public static final String SERIALIZED_NAME_SURFACE_SEAL_DEPTH = "surface_seal_depth";
  @SerializedName(SERIALIZED_NAME_SURFACE_SEAL_DEPTH)
  private BigDecimal surfaceSealDepth;

  public static final String SERIALIZED_NAME_SURFACE_SEAL_LENGTH = "surface_seal_length";
  @SerializedName(SERIALIZED_NAME_SURFACE_SEAL_LENGTH)
  private BigDecimal surfaceSealLength;

  public static final String SERIALIZED_NAME_SURFACE_SEAL_MATERIAL = "surface_seal_material";
  @SerializedName(SERIALIZED_NAME_SURFACE_SEAL_MATERIAL)
  private String surfaceSealMaterial;

  public static final String SERIALIZED_NAME_SURFACE_SEAL_METHOD = "surface_seal_method";
  @SerializedName(SERIALIZED_NAME_SURFACE_SEAL_METHOD)
  private String surfaceSealMethod;

  public static final String SERIALIZED_NAME_SURFACE_SEAL_THICKNESS = "surface_seal_thickness";
  @SerializedName(SERIALIZED_NAME_SURFACE_SEAL_THICKNESS)
  private BigDecimal surfaceSealThickness;

  public static final String SERIALIZED_NAME_TESTING_DURATION = "testing_duration";
  @SerializedName(SERIALIZED_NAME_TESTING_DURATION)
  private Integer testingDuration;

  public static final String SERIALIZED_NAME_TESTING_METHOD = "testing_method";
  @SerializedName(SERIALIZED_NAME_TESTING_METHOD)
  private String testingMethod;

  public static final String SERIALIZED_NAME_TOTAL_DEPTH_DRILLED = "total_depth_drilled";
  @SerializedName(SERIALIZED_NAME_TOTAL_DEPTH_DRILLED)
  private BigDecimal totalDepthDrilled;

  public static final String SERIALIZED_NAME_TRANSMISSIVITY = "transmissivity";
  @SerializedName(SERIALIZED_NAME_TRANSMISSIVITY)
  private BigDecimal transmissivity;

  public static final String SERIALIZED_NAME_UTM_EASTING = "utm_easting";
  @SerializedName(SERIALIZED_NAME_UTM_EASTING)
  private Integer utmEasting;

  public static final String SERIALIZED_NAME_UTM_NORTHING = "utm_northing";
  @SerializedName(SERIALIZED_NAME_UTM_NORTHING)
  private Integer utmNorthing;

  public static final String SERIALIZED_NAME_UTM_ZONE_CODE = "utm_zone_code";
  @SerializedName(SERIALIZED_NAME_UTM_ZONE_CODE)
  private String utmZoneCode;

  public static final String SERIALIZED_NAME_WATER_QUALITY_CHARACTERISTICS = "water_quality_characteristics";
  @SerializedName(SERIALIZED_NAME_WATER_QUALITY_CHARACTERISTICS)
  private Set<String> waterQualityCharacteristics = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_WATER_QUALITY_COLOUR = "water_quality_colour";
  @SerializedName(SERIALIZED_NAME_WATER_QUALITY_COLOUR)
  private String waterQualityColour;

  public static final String SERIALIZED_NAME_WATER_QUALITY_ODOUR = "water_quality_odour";
  @SerializedName(SERIALIZED_NAME_WATER_QUALITY_ODOUR)
  private String waterQualityOdour;

  public static final String SERIALIZED_NAME_WATER_SUPPLY_SYSTEM_NAME = "water_supply_system_name";
  @SerializedName(SERIALIZED_NAME_WATER_SUPPLY_SYSTEM_NAME)
  private String waterSupplySystemName;

  public static final String SERIALIZED_NAME_WATER_SUPPLY_SYSTEM_WELL_NAME = "water_supply_system_well_name";
  @SerializedName(SERIALIZED_NAME_WATER_SUPPLY_SYSTEM_WELL_NAME)
  private String waterSupplySystemWellName;

  public static final String SERIALIZED_NAME_WELL = "well";
  @SerializedName(SERIALIZED_NAME_WELL)
  private Integer well;

  public static final String SERIALIZED_NAME_WELL_CAP_TYPE = "well_cap_type";
  @SerializedName(SERIALIZED_NAME_WELL_CAP_TYPE)
  private String wellCapType;

  public static final String SERIALIZED_NAME_WELL_CLASS = "well_class";
  @SerializedName(SERIALIZED_NAME_WELL_CLASS)
  private String wellClass;

  public static final String SERIALIZED_NAME_WELL_DISINFECTED = "well_disinfected";
  @SerializedName(SERIALIZED_NAME_WELL_DISINFECTED)
  private Boolean wellDisinfected;

  public static final String SERIALIZED_NAME_WELL_GUID = "well_guid";
  @SerializedName(SERIALIZED_NAME_WELL_GUID)
  private UUID wellGuid;

  public static final String SERIALIZED_NAME_WELL_IDENTIFICATION_PLATE_ATTACHED = "well_identification_plate_attached";
  @SerializedName(SERIALIZED_NAME_WELL_IDENTIFICATION_PLATE_ATTACHED)
  private String wellIdentificationPlateAttached;

  public static final String SERIALIZED_NAME_WELL_LOCATION_DESCRIPTION = "well_location_description";
  @SerializedName(SERIALIZED_NAME_WELL_LOCATION_DESCRIPTION)
  private String wellLocationDescription;

  public static final String SERIALIZED_NAME_WELL_ORIENTATION = "well_orientation";
  @SerializedName(SERIALIZED_NAME_WELL_ORIENTATION)
  private Boolean wellOrientation;

  public static final String SERIALIZED_NAME_WELL_STATUS = "well_status";
  @SerializedName(SERIALIZED_NAME_WELL_STATUS)
  private String wellStatus;

  public static final String SERIALIZED_NAME_WELL_SUBCLASS = "well_subclass";
  @SerializedName(SERIALIZED_NAME_WELL_SUBCLASS)
  private UUID wellSubclass;

  public static final String SERIALIZED_NAME_WELL_TAG_NUMBER = "well_tag_number";
  @SerializedName(SERIALIZED_NAME_WELL_TAG_NUMBER)
  private Integer wellTagNumber;

  public static final String SERIALIZED_NAME_WELL_YIELD = "well_yield";
  @SerializedName(SERIALIZED_NAME_WELL_YIELD)
  private BigDecimal wellYield;

  public static final String SERIALIZED_NAME_WELL_YIELD_UNIT = "well_yield_unit";
  @SerializedName(SERIALIZED_NAME_WELL_YIELD_UNIT)
  private String wellYieldUnit;

  public static final String SERIALIZED_NAME_YIELD_ESTIMATION_DURATION = "yield_estimation_duration";
  @SerializedName(SERIALIZED_NAME_YIELD_ESTIMATION_DURATION)
  private BigDecimal yieldEstimationDuration;

  public static final String SERIALIZED_NAME_YIELD_ESTIMATION_METHOD = "yield_estimation_method";
  @SerializedName(SERIALIZED_NAME_YIELD_ESTIMATION_METHOD)
  private String yieldEstimationMethod;

  public static final String SERIALIZED_NAME_YIELD_ESTIMATION_RATE = "yield_estimation_rate";
  @SerializedName(SERIALIZED_NAME_YIELD_ESTIMATION_RATE)
  private BigDecimal yieldEstimationRate;

  public WellDetail() {
  }

  public WellDetail(
     UUID wellGuid, 
     Integer wellTagNumber
  ) {
    this();
    this.wellGuid = wellGuid;
    this.wellTagNumber = wellTagNumber;
  }

  public WellDetail alterationEndDate(LocalDate alterationEndDate) {
    this.alterationEndDate = alterationEndDate;
    return this;
  }

  /**
   * Get alterationEndDate
   * @return alterationEndDate
   */
  @javax.annotation.Nullable
  public LocalDate getAlterationEndDate() {
    return alterationEndDate;
  }

  public void setAlterationEndDate(LocalDate alterationEndDate) {
    this.alterationEndDate = alterationEndDate;
  }


  public WellDetail alternativeSpecsSubmitted(Boolean alternativeSpecsSubmitted) {
    this.alternativeSpecsSubmitted = alternativeSpecsSubmitted;
    return this;
  }

  /**
   * Get alternativeSpecsSubmitted
   * @return alternativeSpecsSubmitted
   */
  @javax.annotation.Nullable
  public Boolean getAlternativeSpecsSubmitted() {
    return alternativeSpecsSubmitted;
  }

  public void setAlternativeSpecsSubmitted(Boolean alternativeSpecsSubmitted) {
    this.alternativeSpecsSubmitted = alternativeSpecsSubmitted;
  }


  public WellDetail analyticSolutionType(BigDecimal analyticSolutionType) {
    this.analyticSolutionType = analyticSolutionType;
    return this;
  }

  /**
   * Get analyticSolutionType
   * @return analyticSolutionType
   */
  @javax.annotation.Nullable
  public BigDecimal getAnalyticSolutionType() {
    return analyticSolutionType;
  }

  public void setAnalyticSolutionType(BigDecimal analyticSolutionType) {
    this.analyticSolutionType = analyticSolutionType;
  }


  public WellDetail aquifer(Integer aquifer) {
    this.aquifer = aquifer;
    return this;
  }

  /**
   * Get aquifer
   * @return aquifer
   */
  @javax.annotation.Nullable
  public Integer getAquifer() {
    return aquifer;
  }

  public void setAquifer(Integer aquifer) {
    this.aquifer = aquifer;
  }


  public WellDetail aquiferVulnerabilityIndex(BigDecimal aquiferVulnerabilityIndex) {
    this.aquiferVulnerabilityIndex = aquiferVulnerabilityIndex;
    return this;
  }

  /**
   * Get aquiferVulnerabilityIndex
   * @return aquiferVulnerabilityIndex
   */
  @javax.annotation.Nullable
  public BigDecimal getAquiferVulnerabilityIndex() {
    return aquiferVulnerabilityIndex;
  }

  public void setAquiferVulnerabilityIndex(BigDecimal aquiferVulnerabilityIndex) {
    this.aquiferVulnerabilityIndex = aquiferVulnerabilityIndex;
  }


  public WellDetail artesianFlow(BigDecimal artesianFlow) {
    this.artesianFlow = artesianFlow;
    return this;
  }

  /**
   * Get artesianFlow
   * @return artesianFlow
   */
  @javax.annotation.Nullable
  public BigDecimal getArtesianFlow() {
    return artesianFlow;
  }

  public void setArtesianFlow(BigDecimal artesianFlow) {
    this.artesianFlow = artesianFlow;
  }


  public WellDetail artesianPressure(BigDecimal artesianPressure) {
    this.artesianPressure = artesianPressure;
    return this;
  }

  /**
   * Get artesianPressure
   * @return artesianPressure
   */
  @javax.annotation.Nullable
  public BigDecimal getArtesianPressure() {
    return artesianPressure;
  }

  public void setArtesianPressure(BigDecimal artesianPressure) {
    this.artesianPressure = artesianPressure;
  }


  public WellDetail backfillDepth(BigDecimal backfillDepth) {
    this.backfillDepth = backfillDepth;
    return this;
  }

  /**
   * Get backfillDepth
   * @return backfillDepth
   */
  @javax.annotation.Nullable
  public BigDecimal getBackfillDepth() {
    return backfillDepth;
  }

  public void setBackfillDepth(BigDecimal backfillDepth) {
    this.backfillDepth = backfillDepth;
  }


  public WellDetail backfillMaterial(String backfillMaterial) {
    this.backfillMaterial = backfillMaterial;
    return this;
  }

  /**
   * Get backfillMaterial
   * @return backfillMaterial
   */
  @javax.annotation.Nullable
  public String getBackfillMaterial() {
    return backfillMaterial;
  }

  public void setBackfillMaterial(String backfillMaterial) {
    this.backfillMaterial = backfillMaterial;
  }


  public WellDetail backfillType(String backfillType) {
    this.backfillType = backfillType;
    return this;
  }

  /**
   * Get backfillType
   * @return backfillType
   */
  @javax.annotation.Nullable
  public String getBackfillType() {
    return backfillType;
  }

  public void setBackfillType(String backfillType) {
    this.backfillType = backfillType;
  }


  public WellDetail bcgsId(Integer bcgsId) {
    this.bcgsId = bcgsId;
    return this;
  }

  /**
   * Get bcgsId
   * @return bcgsId
   */
  @javax.annotation.Nullable
  public Integer getBcgsId() {
    return bcgsId;
  }

  public void setBcgsId(Integer bcgsId) {
    this.bcgsId = bcgsId;
  }


  public WellDetail bedrockDepth(BigDecimal bedrockDepth) {
    this.bedrockDepth = bedrockDepth;
    return this;
  }

  /**
   * Get bedrockDepth
   * @return bedrockDepth
   */
  @javax.annotation.Nullable
  public BigDecimal getBedrockDepth() {
    return bedrockDepth;
  }

  public void setBedrockDepth(BigDecimal bedrockDepth) {
    this.bedrockDepth = bedrockDepth;
  }


  public WellDetail boundaryEffect(BigDecimal boundaryEffect) {
    this.boundaryEffect = boundaryEffect;
    return this;
  }

  /**
   * Get boundaryEffect
   * @return boundaryEffect
   */
  @javax.annotation.Nullable
  public BigDecimal getBoundaryEffect() {
    return boundaryEffect;
  }

  public void setBoundaryEffect(BigDecimal boundaryEffect) {
    this.boundaryEffect = boundaryEffect;
  }


  public WellDetail casingSet(List<Casing> casingSet) {
    this.casingSet = casingSet;
    return this;
  }

  public WellDetail addCasingSetItem(Casing casingSetItem) {
    if (this.casingSet == null) {
      this.casingSet = new ArrayList<>();
    }
    this.casingSet.add(casingSetItem);
    return this;
  }

  /**
   * Get casingSet
   * @return casingSet
   */
  @javax.annotation.Nonnull
  public List<Casing> getCasingSet() {
    return casingSet;
  }

  public void setCasingSet(List<Casing> casingSet) {
    this.casingSet = casingSet;
  }


  public WellDetail city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public WellDetail comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  public WellDetail companyOfPersonResponsible(OrganizationNameList companyOfPersonResponsible) {
    this.companyOfPersonResponsible = companyOfPersonResponsible;
    return this;
  }

  /**
   * Get companyOfPersonResponsible
   * @return companyOfPersonResponsible
   */
  @javax.annotation.Nonnull
  public OrganizationNameList getCompanyOfPersonResponsible() {
    return companyOfPersonResponsible;
  }

  public void setCompanyOfPersonResponsible(OrganizationNameList companyOfPersonResponsible) {
    this.companyOfPersonResponsible = companyOfPersonResponsible;
  }


  public WellDetail constructionEndDate(LocalDate constructionEndDate) {
    this.constructionEndDate = constructionEndDate;
    return this;
  }

  /**
   * Get constructionEndDate
   * @return constructionEndDate
   */
  @javax.annotation.Nullable
  public LocalDate getConstructionEndDate() {
    return constructionEndDate;
  }

  public void setConstructionEndDate(LocalDate constructionEndDate) {
    this.constructionEndDate = constructionEndDate;
  }


  public WellDetail constructionStartDate(LocalDate constructionStartDate) {
    this.constructionStartDate = constructionStartDate;
    return this;
  }

  /**
   * Get constructionStartDate
   * @return constructionStartDate
   */
  @javax.annotation.Nullable
  public LocalDate getConstructionStartDate() {
    return constructionStartDate;
  }

  public void setConstructionStartDate(LocalDate constructionStartDate) {
    this.constructionStartDate = constructionStartDate;
  }


  public WellDetail coordinateAcquisitionCode(String coordinateAcquisitionCode) {
    this.coordinateAcquisitionCode = coordinateAcquisitionCode;
    return this;
  }

  /**
   * Get coordinateAcquisitionCode
   * @return coordinateAcquisitionCode
   */
  @javax.annotation.Nullable
  public String getCoordinateAcquisitionCode() {
    return coordinateAcquisitionCode;
  }

  public void setCoordinateAcquisitionCode(String coordinateAcquisitionCode) {
    this.coordinateAcquisitionCode = coordinateAcquisitionCode;
  }


  public WellDetail decommissionDescriptionSet(List<DecommissionDescription> decommissionDescriptionSet) {
    this.decommissionDescriptionSet = decommissionDescriptionSet;
    return this;
  }

  public WellDetail addDecommissionDescriptionSetItem(DecommissionDescription decommissionDescriptionSetItem) {
    if (this.decommissionDescriptionSet == null) {
      this.decommissionDescriptionSet = new ArrayList<>();
    }
    this.decommissionDescriptionSet.add(decommissionDescriptionSetItem);
    return this;
  }

  /**
   * Get decommissionDescriptionSet
   * @return decommissionDescriptionSet
   */
  @javax.annotation.Nonnull
  public List<DecommissionDescription> getDecommissionDescriptionSet() {
    return decommissionDescriptionSet;
  }

  public void setDecommissionDescriptionSet(List<DecommissionDescription> decommissionDescriptionSet) {
    this.decommissionDescriptionSet = decommissionDescriptionSet;
  }


  public WellDetail decommissionDetails(String decommissionDetails) {
    this.decommissionDetails = decommissionDetails;
    return this;
  }

  /**
   * Get decommissionDetails
   * @return decommissionDetails
   */
  @javax.annotation.Nullable
  public String getDecommissionDetails() {
    return decommissionDetails;
  }

  public void setDecommissionDetails(String decommissionDetails) {
    this.decommissionDetails = decommissionDetails;
  }


  public WellDetail decommissionEndDate(LocalDate decommissionEndDate) {
    this.decommissionEndDate = decommissionEndDate;
    return this;
  }

  /**
   * Get decommissionEndDate
   * @return decommissionEndDate
   */
  @javax.annotation.Nullable
  public LocalDate getDecommissionEndDate() {
    return decommissionEndDate;
  }

  public void setDecommissionEndDate(LocalDate decommissionEndDate) {
    this.decommissionEndDate = decommissionEndDate;
  }


  public WellDetail decommissionMethod(String decommissionMethod) {
    this.decommissionMethod = decommissionMethod;
    return this;
  }

  /**
   * Get decommissionMethod
   * @return decommissionMethod
   */
  @javax.annotation.Nullable
  public String getDecommissionMethod() {
    return decommissionMethod;
  }

  public void setDecommissionMethod(String decommissionMethod) {
    this.decommissionMethod = decommissionMethod;
  }


  public WellDetail decommissionReason(String decommissionReason) {
    this.decommissionReason = decommissionReason;
    return this;
  }

  /**
   * Get decommissionReason
   * @return decommissionReason
   */
  @javax.annotation.Nullable
  public String getDecommissionReason() {
    return decommissionReason;
  }

  public void setDecommissionReason(String decommissionReason) {
    this.decommissionReason = decommissionReason;
  }


  public WellDetail decommissionStartDate(LocalDate decommissionStartDate) {
    this.decommissionStartDate = decommissionStartDate;
    return this;
  }

  /**
   * Get decommissionStartDate
   * @return decommissionStartDate
   */
  @javax.annotation.Nullable
  public LocalDate getDecommissionStartDate() {
    return decommissionStartDate;
  }

  public void setDecommissionStartDate(LocalDate decommissionStartDate) {
    this.decommissionStartDate = decommissionStartDate;
  }


  public WellDetail developmentHours(BigDecimal developmentHours) {
    this.developmentHours = developmentHours;
    return this;
  }

  /**
   * Get developmentHours
   * @return developmentHours
   */
  @javax.annotation.Nullable
  public BigDecimal getDevelopmentHours() {
    return developmentHours;
  }

  public void setDevelopmentHours(BigDecimal developmentHours) {
    this.developmentHours = developmentHours;
  }


  public WellDetail developmentMethod(String developmentMethod) {
    this.developmentMethod = developmentMethod;
    return this;
  }

  /**
   * Get developmentMethod
   * @return developmentMethod
   */
  @javax.annotation.Nullable
  public String getDevelopmentMethod() {
    return developmentMethod;
  }

  public void setDevelopmentMethod(String developmentMethod) {
    this.developmentMethod = developmentMethod;
  }


  public WellDetail developmentNotes(String developmentNotes) {
    this.developmentNotes = developmentNotes;
    return this;
  }

  /**
   * Get developmentNotes
   * @return developmentNotes
   */
  @javax.annotation.Nullable
  public String getDevelopmentNotes() {
    return developmentNotes;
  }

  public void setDevelopmentNotes(String developmentNotes) {
    this.developmentNotes = developmentNotes;
  }


  public WellDetail diameter(String diameter) {
    this.diameter = diameter;
    return this;
  }

  /**
   * Get diameter
   * @return diameter
   */
  @javax.annotation.Nullable
  public String getDiameter() {
    return diameter;
  }

  public void setDiameter(String diameter) {
    this.diameter = diameter;
  }


  public WellDetail drawdown(BigDecimal drawdown) {
    this.drawdown = drawdown;
    return this;
  }

  /**
   * Get drawdown
   * @return drawdown
   */
  @javax.annotation.Nullable
  public BigDecimal getDrawdown() {
    return drawdown;
  }

  public void setDrawdown(BigDecimal drawdown) {
    this.drawdown = drawdown;
  }


  public WellDetail drillingCompany(UUID drillingCompany) {
    this.drillingCompany = drillingCompany;
    return this;
  }

  /**
   * Get drillingCompany
   * @return drillingCompany
   */
  @javax.annotation.Nullable
  public UUID getDrillingCompany() {
    return drillingCompany;
  }

  public void setDrillingCompany(UUID drillingCompany) {
    this.drillingCompany = drillingCompany;
  }


  public WellDetail drillingMethod(String drillingMethod) {
    this.drillingMethod = drillingMethod;
    return this;
  }

  /**
   * Get drillingMethod
   * @return drillingMethod
   */
  @javax.annotation.Nullable
  public String getDrillingMethod() {
    return drillingMethod;
  }

  public void setDrillingMethod(String drillingMethod) {
    this.drillingMethod = drillingMethod;
  }


  public WellDetail ems(String ems) {
    this.ems = ems;
    return this;
  }

  /**
   * Get ems
   * @return ems
   */
  @javax.annotation.Nullable
  public String getEms() {
    return ems;
  }

  public void setEms(String ems) {
    this.ems = ems;
  }


  public WellDetail filterPackFrom(BigDecimal filterPackFrom) {
    this.filterPackFrom = filterPackFrom;
    return this;
  }

  /**
   * Get filterPackFrom
   * @return filterPackFrom
   */
  @javax.annotation.Nullable
  public BigDecimal getFilterPackFrom() {
    return filterPackFrom;
  }

  public void setFilterPackFrom(BigDecimal filterPackFrom) {
    this.filterPackFrom = filterPackFrom;
  }


  public WellDetail filterPackMaterial(String filterPackMaterial) {
    this.filterPackMaterial = filterPackMaterial;
    return this;
  }

  /**
   * Get filterPackMaterial
   * @return filterPackMaterial
   */
  @javax.annotation.Nullable
  public String getFilterPackMaterial() {
    return filterPackMaterial;
  }

  public void setFilterPackMaterial(String filterPackMaterial) {
    this.filterPackMaterial = filterPackMaterial;
  }


  public WellDetail filterPackMaterialSize(String filterPackMaterialSize) {
    this.filterPackMaterialSize = filterPackMaterialSize;
    return this;
  }

  /**
   * Get filterPackMaterialSize
   * @return filterPackMaterialSize
   */
  @javax.annotation.Nullable
  public String getFilterPackMaterialSize() {
    return filterPackMaterialSize;
  }

  public void setFilterPackMaterialSize(String filterPackMaterialSize) {
    this.filterPackMaterialSize = filterPackMaterialSize;
  }


  public WellDetail filterPackThickness(BigDecimal filterPackThickness) {
    this.filterPackThickness = filterPackThickness;
    return this;
  }

  /**
   * Get filterPackThickness
   * @return filterPackThickness
   */
  @javax.annotation.Nullable
  public BigDecimal getFilterPackThickness() {
    return filterPackThickness;
  }

  public void setFilterPackThickness(BigDecimal filterPackThickness) {
    this.filterPackThickness = filterPackThickness;
  }


  public WellDetail filterPackTo(BigDecimal filterPackTo) {
    this.filterPackTo = filterPackTo;
    return this;
  }

  /**
   * Get filterPackTo
   * @return filterPackTo
   */
  @javax.annotation.Nullable
  public BigDecimal getFilterPackTo() {
    return filterPackTo;
  }

  public void setFilterPackTo(BigDecimal filterPackTo) {
    this.filterPackTo = filterPackTo;
  }


  public WellDetail finalCasingStickUp(BigDecimal finalCasingStickUp) {
    this.finalCasingStickUp = finalCasingStickUp;
    return this;
  }

  /**
   * Get finalCasingStickUp
   * @return finalCasingStickUp
   */
  @javax.annotation.Nullable
  public BigDecimal getFinalCasingStickUp() {
    return finalCasingStickUp;
  }

  public void setFinalCasingStickUp(BigDecimal finalCasingStickUp) {
    this.finalCasingStickUp = finalCasingStickUp;
  }


  public WellDetail finishedWellDepth(BigDecimal finishedWellDepth) {
    this.finishedWellDepth = finishedWellDepth;
    return this;
  }

  /**
   * Get finishedWellDepth
   * @return finishedWellDepth
   */
  @javax.annotation.Nullable
  public BigDecimal getFinishedWellDepth() {
    return finishedWellDepth;
  }

  public void setFinishedWellDepth(BigDecimal finishedWellDepth) {
    this.finishedWellDepth = finishedWellDepth;
  }


  public WellDetail groundElevation(BigDecimal groundElevation) {
    this.groundElevation = groundElevation;
    return this;
  }

  /**
   * Get groundElevation
   * @return groundElevation
   */
  @javax.annotation.Nullable
  public BigDecimal getGroundElevation() {
    return groundElevation;
  }

  public void setGroundElevation(BigDecimal groundElevation) {
    this.groundElevation = groundElevation;
  }


  public WellDetail groundElevationMethod(String groundElevationMethod) {
    this.groundElevationMethod = groundElevationMethod;
    return this;
  }

  /**
   * Get groundElevationMethod
   * @return groundElevationMethod
   */
  @javax.annotation.Nullable
  public String getGroundElevationMethod() {
    return groundElevationMethod;
  }

  public void setGroundElevationMethod(String groundElevationMethod) {
    this.groundElevationMethod = groundElevationMethod;
  }


  public WellDetail hydraulicConductivity(String hydraulicConductivity) {
    this.hydraulicConductivity = hydraulicConductivity;
    return this;
  }

  /**
   * Get hydraulicConductivity
   * @return hydraulicConductivity
   */
  @javax.annotation.Nullable
  public String getHydraulicConductivity() {
    return hydraulicConductivity;
  }

  public void setHydraulicConductivity(String hydraulicConductivity) {
    this.hydraulicConductivity = hydraulicConductivity;
  }


  public WellDetail hydroFracturingPerformed(Boolean hydroFracturingPerformed) {
    this.hydroFracturingPerformed = hydroFracturingPerformed;
    return this;
  }

  /**
   * Get hydroFracturingPerformed
   * @return hydroFracturingPerformed
   */
  @javax.annotation.Nullable
  public Boolean getHydroFracturingPerformed() {
    return hydroFracturingPerformed;
  }

  public void setHydroFracturingPerformed(Boolean hydroFracturingPerformed) {
    this.hydroFracturingPerformed = hydroFracturingPerformed;
  }


  public WellDetail hydroFracturingYieldIncrease(BigDecimal hydroFracturingYieldIncrease) {
    this.hydroFracturingYieldIncrease = hydroFracturingYieldIncrease;
    return this;
  }

  /**
   * Get hydroFracturingYieldIncrease
   * @return hydroFracturingYieldIncrease
   */
  @javax.annotation.Nullable
  public BigDecimal getHydroFracturingYieldIncrease() {
    return hydroFracturingYieldIncrease;
  }

  public void setHydroFracturingYieldIncrease(BigDecimal hydroFracturingYieldIncrease) {
    this.hydroFracturingYieldIncrease = hydroFracturingYieldIncrease;
  }


  public WellDetail idPlateAttachedBy(String idPlateAttachedBy) {
    this.idPlateAttachedBy = idPlateAttachedBy;
    return this;
  }

  /**
   * Get idPlateAttachedBy
   * @return idPlateAttachedBy
   */
  @javax.annotation.Nullable
  public String getIdPlateAttachedBy() {
    return idPlateAttachedBy;
  }

  public void setIdPlateAttachedBy(String idPlateAttachedBy) {
    this.idPlateAttachedBy = idPlateAttachedBy;
  }


  public WellDetail identificationPlateNumber(Integer identificationPlateNumber) {
    this.identificationPlateNumber = identificationPlateNumber;
    return this;
  }

  /**
   * Get identificationPlateNumber
   * minimum: 0
   * maximum: 2147483647
   * @return identificationPlateNumber
   */
  @javax.annotation.Nullable
  public Integer getIdentificationPlateNumber() {
    return identificationPlateNumber;
  }

  public void setIdentificationPlateNumber(Integer identificationPlateNumber) {
    this.identificationPlateNumber = identificationPlateNumber;
  }


  public WellDetail intendedWaterUse(String intendedWaterUse) {
    this.intendedWaterUse = intendedWaterUse;
    return this;
  }

  /**
   * Get intendedWaterUse
   * @return intendedWaterUse
   */
  @javax.annotation.Nullable
  public String getIntendedWaterUse() {
    return intendedWaterUse;
  }

  public void setIntendedWaterUse(String intendedWaterUse) {
    this.intendedWaterUse = intendedWaterUse;
  }


  public WellDetail landDistrict(String landDistrict) {
    this.landDistrict = landDistrict;
    return this;
  }

  /**
   * Get landDistrict
   * @return landDistrict
   */
  @javax.annotation.Nullable
  public String getLandDistrict() {
    return landDistrict;
  }

  public void setLandDistrict(String landDistrict) {
    this.landDistrict = landDistrict;
  }


  public WellDetail latitude(BigDecimal latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Get latitude
   * @return latitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLatitude() {
    return latitude;
  }

  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }


  public WellDetail legalBlock(String legalBlock) {
    this.legalBlock = legalBlock;
    return this;
  }

  /**
   * Get legalBlock
   * @return legalBlock
   */
  @javax.annotation.Nullable
  public String getLegalBlock() {
    return legalBlock;
  }

  public void setLegalBlock(String legalBlock) {
    this.legalBlock = legalBlock;
  }


  public WellDetail legalDistrictLot(String legalDistrictLot) {
    this.legalDistrictLot = legalDistrictLot;
    return this;
  }

  /**
   * Get legalDistrictLot
   * @return legalDistrictLot
   */
  @javax.annotation.Nullable
  public String getLegalDistrictLot() {
    return legalDistrictLot;
  }

  public void setLegalDistrictLot(String legalDistrictLot) {
    this.legalDistrictLot = legalDistrictLot;
  }


  public WellDetail legalLot(String legalLot) {
    this.legalLot = legalLot;
    return this;
  }

  /**
   * Get legalLot
   * @return legalLot
   */
  @javax.annotation.Nullable
  public String getLegalLot() {
    return legalLot;
  }

  public void setLegalLot(String legalLot) {
    this.legalLot = legalLot;
  }


  public WellDetail legalPid(Integer legalPid) {
    this.legalPid = legalPid;
    return this;
  }

  /**
   * Get legalPid
   * minimum: 0
   * maximum: 2147483647
   * @return legalPid
   */
  @javax.annotation.Nullable
  public Integer getLegalPid() {
    return legalPid;
  }

  public void setLegalPid(Integer legalPid) {
    this.legalPid = legalPid;
  }


  public WellDetail legalPlan(String legalPlan) {
    this.legalPlan = legalPlan;
    return this;
  }

  /**
   * Get legalPlan
   * @return legalPlan
   */
  @javax.annotation.Nullable
  public String getLegalPlan() {
    return legalPlan;
  }

  public void setLegalPlan(String legalPlan) {
    this.legalPlan = legalPlan;
  }


  public WellDetail legalRange(String legalRange) {
    this.legalRange = legalRange;
    return this;
  }

  /**
   * Get legalRange
   * @return legalRange
   */
  @javax.annotation.Nullable
  public String getLegalRange() {
    return legalRange;
  }

  public void setLegalRange(String legalRange) {
    this.legalRange = legalRange;
  }


  public WellDetail legalSection(String legalSection) {
    this.legalSection = legalSection;
    return this;
  }

  /**
   * Get legalSection
   * @return legalSection
   */
  @javax.annotation.Nullable
  public String getLegalSection() {
    return legalSection;
  }

  public void setLegalSection(String legalSection) {
    this.legalSection = legalSection;
  }


  public WellDetail legalTownship(String legalTownship) {
    this.legalTownship = legalTownship;
    return this;
  }

  /**
   * Get legalTownship
   * @return legalTownship
   */
  @javax.annotation.Nullable
  public String getLegalTownship() {
    return legalTownship;
  }

  public void setLegalTownship(String legalTownship) {
    this.legalTownship = legalTownship;
  }


  public WellDetail licencedStatus(String licencedStatus) {
    this.licencedStatus = licencedStatus;
    return this;
  }

  /**
   * Get licencedStatus
   * @return licencedStatus
   */
  @javax.annotation.Nullable
  public String getLicencedStatus() {
    return licencedStatus;
  }

  public void setLicencedStatus(String licencedStatus) {
    this.licencedStatus = licencedStatus;
  }


  public WellDetail linerDiameter(BigDecimal linerDiameter) {
    this.linerDiameter = linerDiameter;
    return this;
  }

  /**
   * Get linerDiameter
   * @return linerDiameter
   */
  @javax.annotation.Nullable
  public BigDecimal getLinerDiameter() {
    return linerDiameter;
  }

  public void setLinerDiameter(BigDecimal linerDiameter) {
    this.linerDiameter = linerDiameter;
  }


  public WellDetail linerFrom(BigDecimal linerFrom) {
    this.linerFrom = linerFrom;
    return this;
  }

  /**
   * Get linerFrom
   * @return linerFrom
   */
  @javax.annotation.Nullable
  public BigDecimal getLinerFrom() {
    return linerFrom;
  }

  public void setLinerFrom(BigDecimal linerFrom) {
    this.linerFrom = linerFrom;
  }


  public WellDetail linerMaterial(String linerMaterial) {
    this.linerMaterial = linerMaterial;
    return this;
  }

  /**
   * Get linerMaterial
   * @return linerMaterial
   */
  @javax.annotation.Nullable
  public String getLinerMaterial() {
    return linerMaterial;
  }

  public void setLinerMaterial(String linerMaterial) {
    this.linerMaterial = linerMaterial;
  }


  public WellDetail linerThickness(BigDecimal linerThickness) {
    this.linerThickness = linerThickness;
    return this;
  }

  /**
   * Get linerThickness
   * @return linerThickness
   */
  @javax.annotation.Nullable
  public BigDecimal getLinerThickness() {
    return linerThickness;
  }

  public void setLinerThickness(BigDecimal linerThickness) {
    this.linerThickness = linerThickness;
  }


  public WellDetail linerTo(BigDecimal linerTo) {
    this.linerTo = linerTo;
    return this;
  }

  /**
   * Get linerTo
   * @return linerTo
   */
  @javax.annotation.Nullable
  public BigDecimal getLinerTo() {
    return linerTo;
  }

  public void setLinerTo(BigDecimal linerTo) {
    this.linerTo = linerTo;
  }


  public WellDetail linerperforationSet(List<LinerPerforation> linerperforationSet) {
    this.linerperforationSet = linerperforationSet;
    return this;
  }

  public WellDetail addLinerperforationSetItem(LinerPerforation linerperforationSetItem) {
    if (this.linerperforationSet == null) {
      this.linerperforationSet = new ArrayList<>();
    }
    this.linerperforationSet.add(linerperforationSetItem);
    return this;
  }

  /**
   * Get linerperforationSet
   * @return linerperforationSet
   */
  @javax.annotation.Nonnull
  public List<LinerPerforation> getLinerperforationSet() {
    return linerperforationSet;
  }

  public void setLinerperforationSet(List<LinerPerforation> linerperforationSet) {
    this.linerperforationSet = linerperforationSet;
  }


  public WellDetail lithologydescriptionSet(List<LithologyDescription> lithologydescriptionSet) {
    this.lithologydescriptionSet = lithologydescriptionSet;
    return this;
  }

  public WellDetail addLithologydescriptionSetItem(LithologyDescription lithologydescriptionSetItem) {
    if (this.lithologydescriptionSet == null) {
      this.lithologydescriptionSet = new ArrayList<>();
    }
    this.lithologydescriptionSet.add(lithologydescriptionSetItem);
    return this;
  }

  /**
   * Get lithologydescriptionSet
   * @return lithologydescriptionSet
   */
  @javax.annotation.Nonnull
  public List<LithologyDescription> getLithologydescriptionSet() {
    return lithologydescriptionSet;
  }

  public void setLithologydescriptionSet(List<LithologyDescription> lithologydescriptionSet) {
    this.lithologydescriptionSet = lithologydescriptionSet;
  }


  public WellDetail longitude(BigDecimal longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLongitude() {
    return longitude;
  }

  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }


  public WellDetail observationWellNumber(String observationWellNumber) {
    this.observationWellNumber = observationWellNumber;
    return this;
  }

  /**
   * Get observationWellNumber
   * @return observationWellNumber
   */
  @javax.annotation.Nullable
  public String getObservationWellNumber() {
    return observationWellNumber;
  }

  public void setObservationWellNumber(String observationWellNumber) {
    this.observationWellNumber = observationWellNumber;
  }


  public WellDetail observationWellStatus(String observationWellStatus) {
    this.observationWellStatus = observationWellStatus;
    return this;
  }

  /**
   * Get observationWellStatus
   * @return observationWellStatus
   */
  @javax.annotation.Nullable
  public String getObservationWellStatus() {
    return observationWellStatus;
  }

  public void setObservationWellStatus(String observationWellStatus) {
    this.observationWellStatus = observationWellStatus;
  }


  public WellDetail otherDrillingMethod(String otherDrillingMethod) {
    this.otherDrillingMethod = otherDrillingMethod;
    return this;
  }

  /**
   * Get otherDrillingMethod
   * @return otherDrillingMethod
   */
  @javax.annotation.Nullable
  public String getOtherDrillingMethod() {
    return otherDrillingMethod;
  }

  public void setOtherDrillingMethod(String otherDrillingMethod) {
    this.otherDrillingMethod = otherDrillingMethod;
  }


  public WellDetail otherScreenBottom(String otherScreenBottom) {
    this.otherScreenBottom = otherScreenBottom;
    return this;
  }

  /**
   * Get otherScreenBottom
   * @return otherScreenBottom
   */
  @javax.annotation.Nullable
  public String getOtherScreenBottom() {
    return otherScreenBottom;
  }

  public void setOtherScreenBottom(String otherScreenBottom) {
    this.otherScreenBottom = otherScreenBottom;
  }


  public WellDetail otherScreenMaterial(String otherScreenMaterial) {
    this.otherScreenMaterial = otherScreenMaterial;
    return this;
  }

  /**
   * Get otherScreenMaterial
   * @return otherScreenMaterial
   */
  @javax.annotation.Nullable
  public String getOtherScreenMaterial() {
    return otherScreenMaterial;
  }

  public void setOtherScreenMaterial(String otherScreenMaterial) {
    this.otherScreenMaterial = otherScreenMaterial;
  }


  public WellDetail ownerFullName(String ownerFullName) {
    this.ownerFullName = ownerFullName;
    return this;
  }

  /**
   * Get ownerFullName
   * @return ownerFullName
   */
  @javax.annotation.Nonnull
  public String getOwnerFullName() {
    return ownerFullName;
  }

  public void setOwnerFullName(String ownerFullName) {
    this.ownerFullName = ownerFullName;
  }


  public WellDetail personResponsible(PersonBasic personResponsible) {
    this.personResponsible = personResponsible;
    return this;
  }

  /**
   * Get personResponsible
   * @return personResponsible
   */
  @javax.annotation.Nonnull
  public PersonBasic getPersonResponsible() {
    return personResponsible;
  }

  public void setPersonResponsible(PersonBasic personResponsible) {
    this.personResponsible = personResponsible;
  }


  public WellDetail recommendedPumpDepth(BigDecimal recommendedPumpDepth) {
    this.recommendedPumpDepth = recommendedPumpDepth;
    return this;
  }

  /**
   * Get recommendedPumpDepth
   * @return recommendedPumpDepth
   */
  @javax.annotation.Nullable
  public BigDecimal getRecommendedPumpDepth() {
    return recommendedPumpDepth;
  }

  public void setRecommendedPumpDepth(BigDecimal recommendedPumpDepth) {
    this.recommendedPumpDepth = recommendedPumpDepth;
  }


  public WellDetail recommendedPumpRate(BigDecimal recommendedPumpRate) {
    this.recommendedPumpRate = recommendedPumpRate;
    return this;
  }

  /**
   * Get recommendedPumpRate
   * @return recommendedPumpRate
   */
  @javax.annotation.Nullable
  public BigDecimal getRecommendedPumpRate() {
    return recommendedPumpRate;
  }

  public void setRecommendedPumpRate(BigDecimal recommendedPumpRate) {
    this.recommendedPumpRate = recommendedPumpRate;
  }


  public WellDetail screenBottom(String screenBottom) {
    this.screenBottom = screenBottom;
    return this;
  }

  /**
   * Get screenBottom
   * @return screenBottom
   */
  @javax.annotation.Nullable
  public String getScreenBottom() {
    return screenBottom;
  }

  public void setScreenBottom(String screenBottom) {
    this.screenBottom = screenBottom;
  }


  public WellDetail screenInformation(String screenInformation) {
    this.screenInformation = screenInformation;
    return this;
  }

  /**
   * Get screenInformation
   * @return screenInformation
   */
  @javax.annotation.Nullable
  public String getScreenInformation() {
    return screenInformation;
  }

  public void setScreenInformation(String screenInformation) {
    this.screenInformation = screenInformation;
  }


  public WellDetail screenIntakeMethod(String screenIntakeMethod) {
    this.screenIntakeMethod = screenIntakeMethod;
    return this;
  }

  /**
   * Get screenIntakeMethod
   * @return screenIntakeMethod
   */
  @javax.annotation.Nullable
  public String getScreenIntakeMethod() {
    return screenIntakeMethod;
  }

  public void setScreenIntakeMethod(String screenIntakeMethod) {
    this.screenIntakeMethod = screenIntakeMethod;
  }


  public WellDetail screenMaterial(String screenMaterial) {
    this.screenMaterial = screenMaterial;
    return this;
  }

  /**
   * Get screenMaterial
   * @return screenMaterial
   */
  @javax.annotation.Nullable
  public String getScreenMaterial() {
    return screenMaterial;
  }

  public void setScreenMaterial(String screenMaterial) {
    this.screenMaterial = screenMaterial;
  }


  public WellDetail screenOpening(String screenOpening) {
    this.screenOpening = screenOpening;
    return this;
  }

  /**
   * Get screenOpening
   * @return screenOpening
   */
  @javax.annotation.Nullable
  public String getScreenOpening() {
    return screenOpening;
  }

  public void setScreenOpening(String screenOpening) {
    this.screenOpening = screenOpening;
  }


  public WellDetail screenSet(List<Screen> screenSet) {
    this.screenSet = screenSet;
    return this;
  }

  public WellDetail addScreenSetItem(Screen screenSetItem) {
    if (this.screenSet == null) {
      this.screenSet = new ArrayList<>();
    }
    this.screenSet.add(screenSetItem);
    return this;
  }

  /**
   * Get screenSet
   * @return screenSet
   */
  @javax.annotation.Nonnull
  public List<Screen> getScreenSet() {
    return screenSet;
  }

  public void setScreenSet(List<Screen> screenSet) {
    this.screenSet = screenSet;
  }


  public WellDetail screenType(String screenType) {
    this.screenType = screenType;
    return this;
  }

  /**
   * Get screenType
   * @return screenType
   */
  @javax.annotation.Nullable
  public String getScreenType() {
    return screenType;
  }

  public void setScreenType(String screenType) {
    this.screenType = screenType;
  }


  public WellDetail sealantMaterial(String sealantMaterial) {
    this.sealantMaterial = sealantMaterial;
    return this;
  }

  /**
   * Get sealantMaterial
   * @return sealantMaterial
   */
  @javax.annotation.Nullable
  public String getSealantMaterial() {
    return sealantMaterial;
  }

  public void setSealantMaterial(String sealantMaterial) {
    this.sealantMaterial = sealantMaterial;
  }


  public WellDetail specificStorage(String specificStorage) {
    this.specificStorage = specificStorage;
    return this;
  }

  /**
   * Get specificStorage
   * @return specificStorage
   */
  @javax.annotation.Nullable
  public String getSpecificStorage() {
    return specificStorage;
  }

  public void setSpecificStorage(String specificStorage) {
    this.specificStorage = specificStorage;
  }


  public WellDetail specificYield(BigDecimal specificYield) {
    this.specificYield = specificYield;
    return this;
  }

  /**
   * Get specificYield
   * @return specificYield
   */
  @javax.annotation.Nullable
  public BigDecimal getSpecificYield() {
    return specificYield;
  }

  public void setSpecificYield(BigDecimal specificYield) {
    this.specificYield = specificYield;
  }


  public WellDetail staticLevelBeforeTest(BigDecimal staticLevelBeforeTest) {
    this.staticLevelBeforeTest = staticLevelBeforeTest;
    return this;
  }

  /**
   * Get staticLevelBeforeTest
   * @return staticLevelBeforeTest
   */
  @javax.annotation.Nullable
  public BigDecimal getStaticLevelBeforeTest() {
    return staticLevelBeforeTest;
  }

  public void setStaticLevelBeforeTest(BigDecimal staticLevelBeforeTest) {
    this.staticLevelBeforeTest = staticLevelBeforeTest;
  }


  public WellDetail staticWaterLevel(BigDecimal staticWaterLevel) {
    this.staticWaterLevel = staticWaterLevel;
    return this;
  }

  /**
   * Get staticWaterLevel
   * @return staticWaterLevel
   */
  @javax.annotation.Nullable
  public BigDecimal getStaticWaterLevel() {
    return staticWaterLevel;
  }

  public void setStaticWaterLevel(BigDecimal staticWaterLevel) {
    this.staticWaterLevel = staticWaterLevel;
  }


  public WellDetail storativity(BigDecimal storativity) {
    this.storativity = storativity;
    return this;
  }

  /**
   * Get storativity
   * @return storativity
   */
  @javax.annotation.Nullable
  public BigDecimal getStorativity() {
    return storativity;
  }

  public void setStorativity(BigDecimal storativity) {
    this.storativity = storativity;
  }


  public WellDetail streetAddress(String streetAddress) {
    this.streetAddress = streetAddress;
    return this;
  }

  /**
   * Get streetAddress
   * @return streetAddress
   */
  @javax.annotation.Nullable
  public String getStreetAddress() {
    return streetAddress;
  }

  public void setStreetAddress(String streetAddress) {
    this.streetAddress = streetAddress;
  }


  public WellDetail surfaceSealDepth(BigDecimal surfaceSealDepth) {
    this.surfaceSealDepth = surfaceSealDepth;
    return this;
  }

  /**
   * Get surfaceSealDepth
   * @return surfaceSealDepth
   */
  @javax.annotation.Nullable
  public BigDecimal getSurfaceSealDepth() {
    return surfaceSealDepth;
  }

  public void setSurfaceSealDepth(BigDecimal surfaceSealDepth) {
    this.surfaceSealDepth = surfaceSealDepth;
  }


  public WellDetail surfaceSealLength(BigDecimal surfaceSealLength) {
    this.surfaceSealLength = surfaceSealLength;
    return this;
  }

  /**
   * Get surfaceSealLength
   * @return surfaceSealLength
   */
  @javax.annotation.Nullable
  public BigDecimal getSurfaceSealLength() {
    return surfaceSealLength;
  }

  public void setSurfaceSealLength(BigDecimal surfaceSealLength) {
    this.surfaceSealLength = surfaceSealLength;
  }


  public WellDetail surfaceSealMaterial(String surfaceSealMaterial) {
    this.surfaceSealMaterial = surfaceSealMaterial;
    return this;
  }

  /**
   * Get surfaceSealMaterial
   * @return surfaceSealMaterial
   */
  @javax.annotation.Nullable
  public String getSurfaceSealMaterial() {
    return surfaceSealMaterial;
  }

  public void setSurfaceSealMaterial(String surfaceSealMaterial) {
    this.surfaceSealMaterial = surfaceSealMaterial;
  }


  public WellDetail surfaceSealMethod(String surfaceSealMethod) {
    this.surfaceSealMethod = surfaceSealMethod;
    return this;
  }

  /**
   * Get surfaceSealMethod
   * @return surfaceSealMethod
   */
  @javax.annotation.Nullable
  public String getSurfaceSealMethod() {
    return surfaceSealMethod;
  }

  public void setSurfaceSealMethod(String surfaceSealMethod) {
    this.surfaceSealMethod = surfaceSealMethod;
  }


  public WellDetail surfaceSealThickness(BigDecimal surfaceSealThickness) {
    this.surfaceSealThickness = surfaceSealThickness;
    return this;
  }

  /**
   * Get surfaceSealThickness
   * @return surfaceSealThickness
   */
  @javax.annotation.Nullable
  public BigDecimal getSurfaceSealThickness() {
    return surfaceSealThickness;
  }

  public void setSurfaceSealThickness(BigDecimal surfaceSealThickness) {
    this.surfaceSealThickness = surfaceSealThickness;
  }


  public WellDetail testingDuration(Integer testingDuration) {
    this.testingDuration = testingDuration;
    return this;
  }

  /**
   * Get testingDuration
   * minimum: 0
   * maximum: 2147483647
   * @return testingDuration
   */
  @javax.annotation.Nullable
  public Integer getTestingDuration() {
    return testingDuration;
  }

  public void setTestingDuration(Integer testingDuration) {
    this.testingDuration = testingDuration;
  }


  public WellDetail testingMethod(String testingMethod) {
    this.testingMethod = testingMethod;
    return this;
  }

  /**
   * Get testingMethod
   * @return testingMethod
   */
  @javax.annotation.Nullable
  public String getTestingMethod() {
    return testingMethod;
  }

  public void setTestingMethod(String testingMethod) {
    this.testingMethod = testingMethod;
  }


  public WellDetail totalDepthDrilled(BigDecimal totalDepthDrilled) {
    this.totalDepthDrilled = totalDepthDrilled;
    return this;
  }

  /**
   * Get totalDepthDrilled
   * @return totalDepthDrilled
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalDepthDrilled() {
    return totalDepthDrilled;
  }

  public void setTotalDepthDrilled(BigDecimal totalDepthDrilled) {
    this.totalDepthDrilled = totalDepthDrilled;
  }


  public WellDetail transmissivity(BigDecimal transmissivity) {
    this.transmissivity = transmissivity;
    return this;
  }

  /**
   * Get transmissivity
   * @return transmissivity
   */
  @javax.annotation.Nullable
  public BigDecimal getTransmissivity() {
    return transmissivity;
  }

  public void setTransmissivity(BigDecimal transmissivity) {
    this.transmissivity = transmissivity;
  }


  public WellDetail utmEasting(Integer utmEasting) {
    this.utmEasting = utmEasting;
    return this;
  }

  /**
   * Get utmEasting
   * minimum: -2147483648
   * maximum: 2147483647
   * @return utmEasting
   */
  @javax.annotation.Nullable
  public Integer getUtmEasting() {
    return utmEasting;
  }

  public void setUtmEasting(Integer utmEasting) {
    this.utmEasting = utmEasting;
  }


  public WellDetail utmNorthing(Integer utmNorthing) {
    this.utmNorthing = utmNorthing;
    return this;
  }

  /**
   * Get utmNorthing
   * minimum: -2147483648
   * maximum: 2147483647
   * @return utmNorthing
   */
  @javax.annotation.Nullable
  public Integer getUtmNorthing() {
    return utmNorthing;
  }

  public void setUtmNorthing(Integer utmNorthing) {
    this.utmNorthing = utmNorthing;
  }


  public WellDetail utmZoneCode(String utmZoneCode) {
    this.utmZoneCode = utmZoneCode;
    return this;
  }

  /**
   * Get utmZoneCode
   * @return utmZoneCode
   */
  @javax.annotation.Nullable
  public String getUtmZoneCode() {
    return utmZoneCode;
  }

  public void setUtmZoneCode(String utmZoneCode) {
    this.utmZoneCode = utmZoneCode;
  }


  public WellDetail waterQualityCharacteristics(Set<String> waterQualityCharacteristics) {
    this.waterQualityCharacteristics = waterQualityCharacteristics;
    return this;
  }

  public WellDetail addWaterQualityCharacteristicsItem(String waterQualityCharacteristicsItem) {
    if (this.waterQualityCharacteristics == null) {
      this.waterQualityCharacteristics = new LinkedHashSet<>();
    }
    this.waterQualityCharacteristics.add(waterQualityCharacteristicsItem);
    return this;
  }

  /**
   * Get waterQualityCharacteristics
   * @return waterQualityCharacteristics
   */
  @javax.annotation.Nullable
  public Set<String> getWaterQualityCharacteristics() {
    return waterQualityCharacteristics;
  }

  public void setWaterQualityCharacteristics(Set<String> waterQualityCharacteristics) {
    this.waterQualityCharacteristics = waterQualityCharacteristics;
  }


  public WellDetail waterQualityColour(String waterQualityColour) {
    this.waterQualityColour = waterQualityColour;
    return this;
  }

  /**
   * Get waterQualityColour
   * @return waterQualityColour
   */
  @javax.annotation.Nullable
  public String getWaterQualityColour() {
    return waterQualityColour;
  }

  public void setWaterQualityColour(String waterQualityColour) {
    this.waterQualityColour = waterQualityColour;
  }


  public WellDetail waterQualityOdour(String waterQualityOdour) {
    this.waterQualityOdour = waterQualityOdour;
    return this;
  }

  /**
   * Get waterQualityOdour
   * @return waterQualityOdour
   */
  @javax.annotation.Nullable
  public String getWaterQualityOdour() {
    return waterQualityOdour;
  }

  public void setWaterQualityOdour(String waterQualityOdour) {
    this.waterQualityOdour = waterQualityOdour;
  }


  public WellDetail waterSupplySystemName(String waterSupplySystemName) {
    this.waterSupplySystemName = waterSupplySystemName;
    return this;
  }

  /**
   * Get waterSupplySystemName
   * @return waterSupplySystemName
   */
  @javax.annotation.Nullable
  public String getWaterSupplySystemName() {
    return waterSupplySystemName;
  }

  public void setWaterSupplySystemName(String waterSupplySystemName) {
    this.waterSupplySystemName = waterSupplySystemName;
  }


  public WellDetail waterSupplySystemWellName(String waterSupplySystemWellName) {
    this.waterSupplySystemWellName = waterSupplySystemWellName;
    return this;
  }

  /**
   * Get waterSupplySystemWellName
   * @return waterSupplySystemWellName
   */
  @javax.annotation.Nullable
  public String getWaterSupplySystemWellName() {
    return waterSupplySystemWellName;
  }

  public void setWaterSupplySystemWellName(String waterSupplySystemWellName) {
    this.waterSupplySystemWellName = waterSupplySystemWellName;
  }


  public WellDetail well(Integer well) {
    this.well = well;
    return this;
  }

  /**
   * Get well
   * @return well
   */
  @javax.annotation.Nonnull
  public Integer getWell() {
    return well;
  }

  public void setWell(Integer well) {
    this.well = well;
  }


  public WellDetail wellCapType(String wellCapType) {
    this.wellCapType = wellCapType;
    return this;
  }

  /**
   * Get wellCapType
   * @return wellCapType
   */
  @javax.annotation.Nullable
  public String getWellCapType() {
    return wellCapType;
  }

  public void setWellCapType(String wellCapType) {
    this.wellCapType = wellCapType;
  }


  public WellDetail wellClass(String wellClass) {
    this.wellClass = wellClass;
    return this;
  }

  /**
   * Get wellClass
   * @return wellClass
   */
  @javax.annotation.Nullable
  public String getWellClass() {
    return wellClass;
  }

  public void setWellClass(String wellClass) {
    this.wellClass = wellClass;
  }


  public WellDetail wellDisinfected(Boolean wellDisinfected) {
    this.wellDisinfected = wellDisinfected;
    return this;
  }

  /**
   * Get wellDisinfected
   * @return wellDisinfected
   */
  @javax.annotation.Nullable
  public Boolean getWellDisinfected() {
    return wellDisinfected;
  }

  public void setWellDisinfected(Boolean wellDisinfected) {
    this.wellDisinfected = wellDisinfected;
  }


  /**
   * Get wellGuid
   * @return wellGuid
   */
  @javax.annotation.Nullable
  public UUID getWellGuid() {
    return wellGuid;
  }



  public WellDetail wellIdentificationPlateAttached(String wellIdentificationPlateAttached) {
    this.wellIdentificationPlateAttached = wellIdentificationPlateAttached;
    return this;
  }

  /**
   * Get wellIdentificationPlateAttached
   * @return wellIdentificationPlateAttached
   */
  @javax.annotation.Nullable
  public String getWellIdentificationPlateAttached() {
    return wellIdentificationPlateAttached;
  }

  public void setWellIdentificationPlateAttached(String wellIdentificationPlateAttached) {
    this.wellIdentificationPlateAttached = wellIdentificationPlateAttached;
  }


  public WellDetail wellLocationDescription(String wellLocationDescription) {
    this.wellLocationDescription = wellLocationDescription;
    return this;
  }

  /**
   * Get wellLocationDescription
   * @return wellLocationDescription
   */
  @javax.annotation.Nullable
  public String getWellLocationDescription() {
    return wellLocationDescription;
  }

  public void setWellLocationDescription(String wellLocationDescription) {
    this.wellLocationDescription = wellLocationDescription;
  }


  public WellDetail wellOrientation(Boolean wellOrientation) {
    this.wellOrientation = wellOrientation;
    return this;
  }

  /**
   * Get wellOrientation
   * @return wellOrientation
   */
  @javax.annotation.Nullable
  public Boolean getWellOrientation() {
    return wellOrientation;
  }

  public void setWellOrientation(Boolean wellOrientation) {
    this.wellOrientation = wellOrientation;
  }


  public WellDetail wellStatus(String wellStatus) {
    this.wellStatus = wellStatus;
    return this;
  }

  /**
   * Get wellStatus
   * @return wellStatus
   */
  @javax.annotation.Nullable
  public String getWellStatus() {
    return wellStatus;
  }

  public void setWellStatus(String wellStatus) {
    this.wellStatus = wellStatus;
  }


  public WellDetail wellSubclass(UUID wellSubclass) {
    this.wellSubclass = wellSubclass;
    return this;
  }

  /**
   * Get wellSubclass
   * @return wellSubclass
   */
  @javax.annotation.Nullable
  public UUID getWellSubclass() {
    return wellSubclass;
  }

  public void setWellSubclass(UUID wellSubclass) {
    this.wellSubclass = wellSubclass;
  }


  /**
   * Get wellTagNumber
   * @return wellTagNumber
   */
  @javax.annotation.Nullable
  public Integer getWellTagNumber() {
    return wellTagNumber;
  }



  public WellDetail wellYield(BigDecimal wellYield) {
    this.wellYield = wellYield;
    return this;
  }

  /**
   * Get wellYield
   * @return wellYield
   */
  @javax.annotation.Nullable
  public BigDecimal getWellYield() {
    return wellYield;
  }

  public void setWellYield(BigDecimal wellYield) {
    this.wellYield = wellYield;
  }


  public WellDetail wellYieldUnit(String wellYieldUnit) {
    this.wellYieldUnit = wellYieldUnit;
    return this;
  }

  /**
   * Get wellYieldUnit
   * @return wellYieldUnit
   */
  @javax.annotation.Nullable
  public String getWellYieldUnit() {
    return wellYieldUnit;
  }

  public void setWellYieldUnit(String wellYieldUnit) {
    this.wellYieldUnit = wellYieldUnit;
  }


  public WellDetail yieldEstimationDuration(BigDecimal yieldEstimationDuration) {
    this.yieldEstimationDuration = yieldEstimationDuration;
    return this;
  }

  /**
   * Get yieldEstimationDuration
   * @return yieldEstimationDuration
   */
  @javax.annotation.Nullable
  public BigDecimal getYieldEstimationDuration() {
    return yieldEstimationDuration;
  }

  public void setYieldEstimationDuration(BigDecimal yieldEstimationDuration) {
    this.yieldEstimationDuration = yieldEstimationDuration;
  }


  public WellDetail yieldEstimationMethod(String yieldEstimationMethod) {
    this.yieldEstimationMethod = yieldEstimationMethod;
    return this;
  }

  /**
   * Get yieldEstimationMethod
   * @return yieldEstimationMethod
   */
  @javax.annotation.Nullable
  public String getYieldEstimationMethod() {
    return yieldEstimationMethod;
  }

  public void setYieldEstimationMethod(String yieldEstimationMethod) {
    this.yieldEstimationMethod = yieldEstimationMethod;
  }


  public WellDetail yieldEstimationRate(BigDecimal yieldEstimationRate) {
    this.yieldEstimationRate = yieldEstimationRate;
    return this;
  }

  /**
   * Get yieldEstimationRate
   * @return yieldEstimationRate
   */
  @javax.annotation.Nullable
  public BigDecimal getYieldEstimationRate() {
    return yieldEstimationRate;
  }

  public void setYieldEstimationRate(BigDecimal yieldEstimationRate) {
    this.yieldEstimationRate = yieldEstimationRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WellDetail wellDetail = (WellDetail) o;
    return Objects.equals(this.alterationEndDate, wellDetail.alterationEndDate) &&
        Objects.equals(this.alternativeSpecsSubmitted, wellDetail.alternativeSpecsSubmitted) &&
        Objects.equals(this.analyticSolutionType, wellDetail.analyticSolutionType) &&
        Objects.equals(this.aquifer, wellDetail.aquifer) &&
        Objects.equals(this.aquiferVulnerabilityIndex, wellDetail.aquiferVulnerabilityIndex) &&
        Objects.equals(this.artesianFlow, wellDetail.artesianFlow) &&
        Objects.equals(this.artesianPressure, wellDetail.artesianPressure) &&
        Objects.equals(this.backfillDepth, wellDetail.backfillDepth) &&
        Objects.equals(this.backfillMaterial, wellDetail.backfillMaterial) &&
        Objects.equals(this.backfillType, wellDetail.backfillType) &&
        Objects.equals(this.bcgsId, wellDetail.bcgsId) &&
        Objects.equals(this.bedrockDepth, wellDetail.bedrockDepth) &&
        Objects.equals(this.boundaryEffect, wellDetail.boundaryEffect) &&
        Objects.equals(this.casingSet, wellDetail.casingSet) &&
        Objects.equals(this.city, wellDetail.city) &&
        Objects.equals(this.comments, wellDetail.comments) &&
        Objects.equals(this.companyOfPersonResponsible, wellDetail.companyOfPersonResponsible) &&
        Objects.equals(this.constructionEndDate, wellDetail.constructionEndDate) &&
        Objects.equals(this.constructionStartDate, wellDetail.constructionStartDate) &&
        Objects.equals(this.coordinateAcquisitionCode, wellDetail.coordinateAcquisitionCode) &&
        Objects.equals(this.decommissionDescriptionSet, wellDetail.decommissionDescriptionSet) &&
        Objects.equals(this.decommissionDetails, wellDetail.decommissionDetails) &&
        Objects.equals(this.decommissionEndDate, wellDetail.decommissionEndDate) &&
        Objects.equals(this.decommissionMethod, wellDetail.decommissionMethod) &&
        Objects.equals(this.decommissionReason, wellDetail.decommissionReason) &&
        Objects.equals(this.decommissionStartDate, wellDetail.decommissionStartDate) &&
        Objects.equals(this.developmentHours, wellDetail.developmentHours) &&
        Objects.equals(this.developmentMethod, wellDetail.developmentMethod) &&
        Objects.equals(this.developmentNotes, wellDetail.developmentNotes) &&
        Objects.equals(this.diameter, wellDetail.diameter) &&
        Objects.equals(this.drawdown, wellDetail.drawdown) &&
        Objects.equals(this.drillingCompany, wellDetail.drillingCompany) &&
        Objects.equals(this.drillingMethod, wellDetail.drillingMethod) &&
        Objects.equals(this.ems, wellDetail.ems) &&
        Objects.equals(this.filterPackFrom, wellDetail.filterPackFrom) &&
        Objects.equals(this.filterPackMaterial, wellDetail.filterPackMaterial) &&
        Objects.equals(this.filterPackMaterialSize, wellDetail.filterPackMaterialSize) &&
        Objects.equals(this.filterPackThickness, wellDetail.filterPackThickness) &&
        Objects.equals(this.filterPackTo, wellDetail.filterPackTo) &&
        Objects.equals(this.finalCasingStickUp, wellDetail.finalCasingStickUp) &&
        Objects.equals(this.finishedWellDepth, wellDetail.finishedWellDepth) &&
        Objects.equals(this.groundElevation, wellDetail.groundElevation) &&
        Objects.equals(this.groundElevationMethod, wellDetail.groundElevationMethod) &&
        Objects.equals(this.hydraulicConductivity, wellDetail.hydraulicConductivity) &&
        Objects.equals(this.hydroFracturingPerformed, wellDetail.hydroFracturingPerformed) &&
        Objects.equals(this.hydroFracturingYieldIncrease, wellDetail.hydroFracturingYieldIncrease) &&
        Objects.equals(this.idPlateAttachedBy, wellDetail.idPlateAttachedBy) &&
        Objects.equals(this.identificationPlateNumber, wellDetail.identificationPlateNumber) &&
        Objects.equals(this.intendedWaterUse, wellDetail.intendedWaterUse) &&
        Objects.equals(this.landDistrict, wellDetail.landDistrict) &&
        Objects.equals(this.latitude, wellDetail.latitude) &&
        Objects.equals(this.legalBlock, wellDetail.legalBlock) &&
        Objects.equals(this.legalDistrictLot, wellDetail.legalDistrictLot) &&
        Objects.equals(this.legalLot, wellDetail.legalLot) &&
        Objects.equals(this.legalPid, wellDetail.legalPid) &&
        Objects.equals(this.legalPlan, wellDetail.legalPlan) &&
        Objects.equals(this.legalRange, wellDetail.legalRange) &&
        Objects.equals(this.legalSection, wellDetail.legalSection) &&
        Objects.equals(this.legalTownship, wellDetail.legalTownship) &&
        Objects.equals(this.licencedStatus, wellDetail.licencedStatus) &&
        Objects.equals(this.linerDiameter, wellDetail.linerDiameter) &&
        Objects.equals(this.linerFrom, wellDetail.linerFrom) &&
        Objects.equals(this.linerMaterial, wellDetail.linerMaterial) &&
        Objects.equals(this.linerThickness, wellDetail.linerThickness) &&
        Objects.equals(this.linerTo, wellDetail.linerTo) &&
        Objects.equals(this.linerperforationSet, wellDetail.linerperforationSet) &&
        Objects.equals(this.lithologydescriptionSet, wellDetail.lithologydescriptionSet) &&
        Objects.equals(this.longitude, wellDetail.longitude) &&
        Objects.equals(this.observationWellNumber, wellDetail.observationWellNumber) &&
        Objects.equals(this.observationWellStatus, wellDetail.observationWellStatus) &&
        Objects.equals(this.otherDrillingMethod, wellDetail.otherDrillingMethod) &&
        Objects.equals(this.otherScreenBottom, wellDetail.otherScreenBottom) &&
        Objects.equals(this.otherScreenMaterial, wellDetail.otherScreenMaterial) &&
        Objects.equals(this.ownerFullName, wellDetail.ownerFullName) &&
        Objects.equals(this.personResponsible, wellDetail.personResponsible) &&
        Objects.equals(this.recommendedPumpDepth, wellDetail.recommendedPumpDepth) &&
        Objects.equals(this.recommendedPumpRate, wellDetail.recommendedPumpRate) &&
        Objects.equals(this.screenBottom, wellDetail.screenBottom) &&
        Objects.equals(this.screenInformation, wellDetail.screenInformation) &&
        Objects.equals(this.screenIntakeMethod, wellDetail.screenIntakeMethod) &&
        Objects.equals(this.screenMaterial, wellDetail.screenMaterial) &&
        Objects.equals(this.screenOpening, wellDetail.screenOpening) &&
        Objects.equals(this.screenSet, wellDetail.screenSet) &&
        Objects.equals(this.screenType, wellDetail.screenType) &&
        Objects.equals(this.sealantMaterial, wellDetail.sealantMaterial) &&
        Objects.equals(this.specificStorage, wellDetail.specificStorage) &&
        Objects.equals(this.specificYield, wellDetail.specificYield) &&
        Objects.equals(this.staticLevelBeforeTest, wellDetail.staticLevelBeforeTest) &&
        Objects.equals(this.staticWaterLevel, wellDetail.staticWaterLevel) &&
        Objects.equals(this.storativity, wellDetail.storativity) &&
        Objects.equals(this.streetAddress, wellDetail.streetAddress) &&
        Objects.equals(this.surfaceSealDepth, wellDetail.surfaceSealDepth) &&
        Objects.equals(this.surfaceSealLength, wellDetail.surfaceSealLength) &&
        Objects.equals(this.surfaceSealMaterial, wellDetail.surfaceSealMaterial) &&
        Objects.equals(this.surfaceSealMethod, wellDetail.surfaceSealMethod) &&
        Objects.equals(this.surfaceSealThickness, wellDetail.surfaceSealThickness) &&
        Objects.equals(this.testingDuration, wellDetail.testingDuration) &&
        Objects.equals(this.testingMethod, wellDetail.testingMethod) &&
        Objects.equals(this.totalDepthDrilled, wellDetail.totalDepthDrilled) &&
        Objects.equals(this.transmissivity, wellDetail.transmissivity) &&
        Objects.equals(this.utmEasting, wellDetail.utmEasting) &&
        Objects.equals(this.utmNorthing, wellDetail.utmNorthing) &&
        Objects.equals(this.utmZoneCode, wellDetail.utmZoneCode) &&
        Objects.equals(this.waterQualityCharacteristics, wellDetail.waterQualityCharacteristics) &&
        Objects.equals(this.waterQualityColour, wellDetail.waterQualityColour) &&
        Objects.equals(this.waterQualityOdour, wellDetail.waterQualityOdour) &&
        Objects.equals(this.waterSupplySystemName, wellDetail.waterSupplySystemName) &&
        Objects.equals(this.waterSupplySystemWellName, wellDetail.waterSupplySystemWellName) &&
        Objects.equals(this.well, wellDetail.well) &&
        Objects.equals(this.wellCapType, wellDetail.wellCapType) &&
        Objects.equals(this.wellClass, wellDetail.wellClass) &&
        Objects.equals(this.wellDisinfected, wellDetail.wellDisinfected) &&
        Objects.equals(this.wellGuid, wellDetail.wellGuid) &&
        Objects.equals(this.wellIdentificationPlateAttached, wellDetail.wellIdentificationPlateAttached) &&
        Objects.equals(this.wellLocationDescription, wellDetail.wellLocationDescription) &&
        Objects.equals(this.wellOrientation, wellDetail.wellOrientation) &&
        Objects.equals(this.wellStatus, wellDetail.wellStatus) &&
        Objects.equals(this.wellSubclass, wellDetail.wellSubclass) &&
        Objects.equals(this.wellTagNumber, wellDetail.wellTagNumber) &&
        Objects.equals(this.wellYield, wellDetail.wellYield) &&
        Objects.equals(this.wellYieldUnit, wellDetail.wellYieldUnit) &&
        Objects.equals(this.yieldEstimationDuration, wellDetail.yieldEstimationDuration) &&
        Objects.equals(this.yieldEstimationMethod, wellDetail.yieldEstimationMethod) &&
        Objects.equals(this.yieldEstimationRate, wellDetail.yieldEstimationRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alterationEndDate, alternativeSpecsSubmitted, analyticSolutionType, aquifer, aquiferVulnerabilityIndex, artesianFlow, artesianPressure, backfillDepth, backfillMaterial, backfillType, bcgsId, bedrockDepth, boundaryEffect, casingSet, city, comments, companyOfPersonResponsible, constructionEndDate, constructionStartDate, coordinateAcquisitionCode, decommissionDescriptionSet, decommissionDetails, decommissionEndDate, decommissionMethod, decommissionReason, decommissionStartDate, developmentHours, developmentMethod, developmentNotes, diameter, drawdown, drillingCompany, drillingMethod, ems, filterPackFrom, filterPackMaterial, filterPackMaterialSize, filterPackThickness, filterPackTo, finalCasingStickUp, finishedWellDepth, groundElevation, groundElevationMethod, hydraulicConductivity, hydroFracturingPerformed, hydroFracturingYieldIncrease, idPlateAttachedBy, identificationPlateNumber, intendedWaterUse, landDistrict, latitude, legalBlock, legalDistrictLot, legalLot, legalPid, legalPlan, legalRange, legalSection, legalTownship, licencedStatus, linerDiameter, linerFrom, linerMaterial, linerThickness, linerTo, linerperforationSet, lithologydescriptionSet, longitude, observationWellNumber, observationWellStatus, otherDrillingMethod, otherScreenBottom, otherScreenMaterial, ownerFullName, personResponsible, recommendedPumpDepth, recommendedPumpRate, screenBottom, screenInformation, screenIntakeMethod, screenMaterial, screenOpening, screenSet, screenType, sealantMaterial, specificStorage, specificYield, staticLevelBeforeTest, staticWaterLevel, storativity, streetAddress, surfaceSealDepth, surfaceSealLength, surfaceSealMaterial, surfaceSealMethod, surfaceSealThickness, testingDuration, testingMethod, totalDepthDrilled, transmissivity, utmEasting, utmNorthing, utmZoneCode, waterQualityCharacteristics, waterQualityColour, waterQualityOdour, waterSupplySystemName, waterSupplySystemWellName, well, wellCapType, wellClass, wellDisinfected, wellGuid, wellIdentificationPlateAttached, wellLocationDescription, wellOrientation, wellStatus, wellSubclass, wellTagNumber, wellYield, wellYieldUnit, yieldEstimationDuration, yieldEstimationMethod, yieldEstimationRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WellDetail {\n");
    sb.append("    alterationEndDate: ").append(toIndentedString(alterationEndDate)).append("\n");
    sb.append("    alternativeSpecsSubmitted: ").append(toIndentedString(alternativeSpecsSubmitted)).append("\n");
    sb.append("    analyticSolutionType: ").append(toIndentedString(analyticSolutionType)).append("\n");
    sb.append("    aquifer: ").append(toIndentedString(aquifer)).append("\n");
    sb.append("    aquiferVulnerabilityIndex: ").append(toIndentedString(aquiferVulnerabilityIndex)).append("\n");
    sb.append("    artesianFlow: ").append(toIndentedString(artesianFlow)).append("\n");
    sb.append("    artesianPressure: ").append(toIndentedString(artesianPressure)).append("\n");
    sb.append("    backfillDepth: ").append(toIndentedString(backfillDepth)).append("\n");
    sb.append("    backfillMaterial: ").append(toIndentedString(backfillMaterial)).append("\n");
    sb.append("    backfillType: ").append(toIndentedString(backfillType)).append("\n");
    sb.append("    bcgsId: ").append(toIndentedString(bcgsId)).append("\n");
    sb.append("    bedrockDepth: ").append(toIndentedString(bedrockDepth)).append("\n");
    sb.append("    boundaryEffect: ").append(toIndentedString(boundaryEffect)).append("\n");
    sb.append("    casingSet: ").append(toIndentedString(casingSet)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    companyOfPersonResponsible: ").append(toIndentedString(companyOfPersonResponsible)).append("\n");
    sb.append("    constructionEndDate: ").append(toIndentedString(constructionEndDate)).append("\n");
    sb.append("    constructionStartDate: ").append(toIndentedString(constructionStartDate)).append("\n");
    sb.append("    coordinateAcquisitionCode: ").append(toIndentedString(coordinateAcquisitionCode)).append("\n");
    sb.append("    decommissionDescriptionSet: ").append(toIndentedString(decommissionDescriptionSet)).append("\n");
    sb.append("    decommissionDetails: ").append(toIndentedString(decommissionDetails)).append("\n");
    sb.append("    decommissionEndDate: ").append(toIndentedString(decommissionEndDate)).append("\n");
    sb.append("    decommissionMethod: ").append(toIndentedString(decommissionMethod)).append("\n");
    sb.append("    decommissionReason: ").append(toIndentedString(decommissionReason)).append("\n");
    sb.append("    decommissionStartDate: ").append(toIndentedString(decommissionStartDate)).append("\n");
    sb.append("    developmentHours: ").append(toIndentedString(developmentHours)).append("\n");
    sb.append("    developmentMethod: ").append(toIndentedString(developmentMethod)).append("\n");
    sb.append("    developmentNotes: ").append(toIndentedString(developmentNotes)).append("\n");
    sb.append("    diameter: ").append(toIndentedString(diameter)).append("\n");
    sb.append("    drawdown: ").append(toIndentedString(drawdown)).append("\n");
    sb.append("    drillingCompany: ").append(toIndentedString(drillingCompany)).append("\n");
    sb.append("    drillingMethod: ").append(toIndentedString(drillingMethod)).append("\n");
    sb.append("    ems: ").append(toIndentedString(ems)).append("\n");
    sb.append("    filterPackFrom: ").append(toIndentedString(filterPackFrom)).append("\n");
    sb.append("    filterPackMaterial: ").append(toIndentedString(filterPackMaterial)).append("\n");
    sb.append("    filterPackMaterialSize: ").append(toIndentedString(filterPackMaterialSize)).append("\n");
    sb.append("    filterPackThickness: ").append(toIndentedString(filterPackThickness)).append("\n");
    sb.append("    filterPackTo: ").append(toIndentedString(filterPackTo)).append("\n");
    sb.append("    finalCasingStickUp: ").append(toIndentedString(finalCasingStickUp)).append("\n");
    sb.append("    finishedWellDepth: ").append(toIndentedString(finishedWellDepth)).append("\n");
    sb.append("    groundElevation: ").append(toIndentedString(groundElevation)).append("\n");
    sb.append("    groundElevationMethod: ").append(toIndentedString(groundElevationMethod)).append("\n");
    sb.append("    hydraulicConductivity: ").append(toIndentedString(hydraulicConductivity)).append("\n");
    sb.append("    hydroFracturingPerformed: ").append(toIndentedString(hydroFracturingPerformed)).append("\n");
    sb.append("    hydroFracturingYieldIncrease: ").append(toIndentedString(hydroFracturingYieldIncrease)).append("\n");
    sb.append("    idPlateAttachedBy: ").append(toIndentedString(idPlateAttachedBy)).append("\n");
    sb.append("    identificationPlateNumber: ").append(toIndentedString(identificationPlateNumber)).append("\n");
    sb.append("    intendedWaterUse: ").append(toIndentedString(intendedWaterUse)).append("\n");
    sb.append("    landDistrict: ").append(toIndentedString(landDistrict)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    legalBlock: ").append(toIndentedString(legalBlock)).append("\n");
    sb.append("    legalDistrictLot: ").append(toIndentedString(legalDistrictLot)).append("\n");
    sb.append("    legalLot: ").append(toIndentedString(legalLot)).append("\n");
    sb.append("    legalPid: ").append(toIndentedString(legalPid)).append("\n");
    sb.append("    legalPlan: ").append(toIndentedString(legalPlan)).append("\n");
    sb.append("    legalRange: ").append(toIndentedString(legalRange)).append("\n");
    sb.append("    legalSection: ").append(toIndentedString(legalSection)).append("\n");
    sb.append("    legalTownship: ").append(toIndentedString(legalTownship)).append("\n");
    sb.append("    licencedStatus: ").append(toIndentedString(licencedStatus)).append("\n");
    sb.append("    linerDiameter: ").append(toIndentedString(linerDiameter)).append("\n");
    sb.append("    linerFrom: ").append(toIndentedString(linerFrom)).append("\n");
    sb.append("    linerMaterial: ").append(toIndentedString(linerMaterial)).append("\n");
    sb.append("    linerThickness: ").append(toIndentedString(linerThickness)).append("\n");
    sb.append("    linerTo: ").append(toIndentedString(linerTo)).append("\n");
    sb.append("    linerperforationSet: ").append(toIndentedString(linerperforationSet)).append("\n");
    sb.append("    lithologydescriptionSet: ").append(toIndentedString(lithologydescriptionSet)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    observationWellNumber: ").append(toIndentedString(observationWellNumber)).append("\n");
    sb.append("    observationWellStatus: ").append(toIndentedString(observationWellStatus)).append("\n");
    sb.append("    otherDrillingMethod: ").append(toIndentedString(otherDrillingMethod)).append("\n");
    sb.append("    otherScreenBottom: ").append(toIndentedString(otherScreenBottom)).append("\n");
    sb.append("    otherScreenMaterial: ").append(toIndentedString(otherScreenMaterial)).append("\n");
    sb.append("    ownerFullName: ").append(toIndentedString(ownerFullName)).append("\n");
    sb.append("    personResponsible: ").append(toIndentedString(personResponsible)).append("\n");
    sb.append("    recommendedPumpDepth: ").append(toIndentedString(recommendedPumpDepth)).append("\n");
    sb.append("    recommendedPumpRate: ").append(toIndentedString(recommendedPumpRate)).append("\n");
    sb.append("    screenBottom: ").append(toIndentedString(screenBottom)).append("\n");
    sb.append("    screenInformation: ").append(toIndentedString(screenInformation)).append("\n");
    sb.append("    screenIntakeMethod: ").append(toIndentedString(screenIntakeMethod)).append("\n");
    sb.append("    screenMaterial: ").append(toIndentedString(screenMaterial)).append("\n");
    sb.append("    screenOpening: ").append(toIndentedString(screenOpening)).append("\n");
    sb.append("    screenSet: ").append(toIndentedString(screenSet)).append("\n");
    sb.append("    screenType: ").append(toIndentedString(screenType)).append("\n");
    sb.append("    sealantMaterial: ").append(toIndentedString(sealantMaterial)).append("\n");
    sb.append("    specificStorage: ").append(toIndentedString(specificStorage)).append("\n");
    sb.append("    specificYield: ").append(toIndentedString(specificYield)).append("\n");
    sb.append("    staticLevelBeforeTest: ").append(toIndentedString(staticLevelBeforeTest)).append("\n");
    sb.append("    staticWaterLevel: ").append(toIndentedString(staticWaterLevel)).append("\n");
    sb.append("    storativity: ").append(toIndentedString(storativity)).append("\n");
    sb.append("    streetAddress: ").append(toIndentedString(streetAddress)).append("\n");
    sb.append("    surfaceSealDepth: ").append(toIndentedString(surfaceSealDepth)).append("\n");
    sb.append("    surfaceSealLength: ").append(toIndentedString(surfaceSealLength)).append("\n");
    sb.append("    surfaceSealMaterial: ").append(toIndentedString(surfaceSealMaterial)).append("\n");
    sb.append("    surfaceSealMethod: ").append(toIndentedString(surfaceSealMethod)).append("\n");
    sb.append("    surfaceSealThickness: ").append(toIndentedString(surfaceSealThickness)).append("\n");
    sb.append("    testingDuration: ").append(toIndentedString(testingDuration)).append("\n");
    sb.append("    testingMethod: ").append(toIndentedString(testingMethod)).append("\n");
    sb.append("    totalDepthDrilled: ").append(toIndentedString(totalDepthDrilled)).append("\n");
    sb.append("    transmissivity: ").append(toIndentedString(transmissivity)).append("\n");
    sb.append("    utmEasting: ").append(toIndentedString(utmEasting)).append("\n");
    sb.append("    utmNorthing: ").append(toIndentedString(utmNorthing)).append("\n");
    sb.append("    utmZoneCode: ").append(toIndentedString(utmZoneCode)).append("\n");
    sb.append("    waterQualityCharacteristics: ").append(toIndentedString(waterQualityCharacteristics)).append("\n");
    sb.append("    waterQualityColour: ").append(toIndentedString(waterQualityColour)).append("\n");
    sb.append("    waterQualityOdour: ").append(toIndentedString(waterQualityOdour)).append("\n");
    sb.append("    waterSupplySystemName: ").append(toIndentedString(waterSupplySystemName)).append("\n");
    sb.append("    waterSupplySystemWellName: ").append(toIndentedString(waterSupplySystemWellName)).append("\n");
    sb.append("    well: ").append(toIndentedString(well)).append("\n");
    sb.append("    wellCapType: ").append(toIndentedString(wellCapType)).append("\n");
    sb.append("    wellClass: ").append(toIndentedString(wellClass)).append("\n");
    sb.append("    wellDisinfected: ").append(toIndentedString(wellDisinfected)).append("\n");
    sb.append("    wellGuid: ").append(toIndentedString(wellGuid)).append("\n");
    sb.append("    wellIdentificationPlateAttached: ").append(toIndentedString(wellIdentificationPlateAttached)).append("\n");
    sb.append("    wellLocationDescription: ").append(toIndentedString(wellLocationDescription)).append("\n");
    sb.append("    wellOrientation: ").append(toIndentedString(wellOrientation)).append("\n");
    sb.append("    wellStatus: ").append(toIndentedString(wellStatus)).append("\n");
    sb.append("    wellSubclass: ").append(toIndentedString(wellSubclass)).append("\n");
    sb.append("    wellTagNumber: ").append(toIndentedString(wellTagNumber)).append("\n");
    sb.append("    wellYield: ").append(toIndentedString(wellYield)).append("\n");
    sb.append("    wellYieldUnit: ").append(toIndentedString(wellYieldUnit)).append("\n");
    sb.append("    yieldEstimationDuration: ").append(toIndentedString(yieldEstimationDuration)).append("\n");
    sb.append("    yieldEstimationMethod: ").append(toIndentedString(yieldEstimationMethod)).append("\n");
    sb.append("    yieldEstimationRate: ").append(toIndentedString(yieldEstimationRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alteration_end_date");
    openapiFields.add("alternative_specs_submitted");
    openapiFields.add("analytic_solution_type");
    openapiFields.add("aquifer");
    openapiFields.add("aquifer_vulnerability_index");
    openapiFields.add("artesian_flow");
    openapiFields.add("artesian_pressure");
    openapiFields.add("backfill_depth");
    openapiFields.add("backfill_material");
    openapiFields.add("backfill_type");
    openapiFields.add("bcgs_id");
    openapiFields.add("bedrock_depth");
    openapiFields.add("boundary_effect");
    openapiFields.add("casing_set");
    openapiFields.add("city");
    openapiFields.add("comments");
    openapiFields.add("company_of_person_responsible");
    openapiFields.add("construction_end_date");
    openapiFields.add("construction_start_date");
    openapiFields.add("coordinate_acquisition_code");
    openapiFields.add("decommission_description_set");
    openapiFields.add("decommission_details");
    openapiFields.add("decommission_end_date");
    openapiFields.add("decommission_method");
    openapiFields.add("decommission_reason");
    openapiFields.add("decommission_start_date");
    openapiFields.add("development_hours");
    openapiFields.add("development_method");
    openapiFields.add("development_notes");
    openapiFields.add("diameter");
    openapiFields.add("drawdown");
    openapiFields.add("drilling_company");
    openapiFields.add("drilling_method");
    openapiFields.add("ems");
    openapiFields.add("filter_pack_from");
    openapiFields.add("filter_pack_material");
    openapiFields.add("filter_pack_material_size");
    openapiFields.add("filter_pack_thickness");
    openapiFields.add("filter_pack_to");
    openapiFields.add("final_casing_stick_up");
    openapiFields.add("finished_well_depth");
    openapiFields.add("ground_elevation");
    openapiFields.add("ground_elevation_method");
    openapiFields.add("hydraulic_conductivity");
    openapiFields.add("hydro_fracturing_performed");
    openapiFields.add("hydro_fracturing_yield_increase");
    openapiFields.add("id_plate_attached_by");
    openapiFields.add("identification_plate_number");
    openapiFields.add("intended_water_use");
    openapiFields.add("land_district");
    openapiFields.add("latitude");
    openapiFields.add("legal_block");
    openapiFields.add("legal_district_lot");
    openapiFields.add("legal_lot");
    openapiFields.add("legal_pid");
    openapiFields.add("legal_plan");
    openapiFields.add("legal_range");
    openapiFields.add("legal_section");
    openapiFields.add("legal_township");
    openapiFields.add("licenced_status");
    openapiFields.add("liner_diameter");
    openapiFields.add("liner_from");
    openapiFields.add("liner_material");
    openapiFields.add("liner_thickness");
    openapiFields.add("liner_to");
    openapiFields.add("linerperforation_set");
    openapiFields.add("lithologydescription_set");
    openapiFields.add("longitude");
    openapiFields.add("observation_well_number");
    openapiFields.add("observation_well_status");
    openapiFields.add("other_drilling_method");
    openapiFields.add("other_screen_bottom");
    openapiFields.add("other_screen_material");
    openapiFields.add("owner_full_name");
    openapiFields.add("person_responsible");
    openapiFields.add("recommended_pump_depth");
    openapiFields.add("recommended_pump_rate");
    openapiFields.add("screen_bottom");
    openapiFields.add("screen_information");
    openapiFields.add("screen_intake_method");
    openapiFields.add("screen_material");
    openapiFields.add("screen_opening");
    openapiFields.add("screen_set");
    openapiFields.add("screen_type");
    openapiFields.add("sealant_material");
    openapiFields.add("specific_storage");
    openapiFields.add("specific_yield");
    openapiFields.add("static_level_before_test");
    openapiFields.add("static_water_level");
    openapiFields.add("storativity");
    openapiFields.add("street_address");
    openapiFields.add("surface_seal_depth");
    openapiFields.add("surface_seal_length");
    openapiFields.add("surface_seal_material");
    openapiFields.add("surface_seal_method");
    openapiFields.add("surface_seal_thickness");
    openapiFields.add("testing_duration");
    openapiFields.add("testing_method");
    openapiFields.add("total_depth_drilled");
    openapiFields.add("transmissivity");
    openapiFields.add("utm_easting");
    openapiFields.add("utm_northing");
    openapiFields.add("utm_zone_code");
    openapiFields.add("water_quality_characteristics");
    openapiFields.add("water_quality_colour");
    openapiFields.add("water_quality_odour");
    openapiFields.add("water_supply_system_name");
    openapiFields.add("water_supply_system_well_name");
    openapiFields.add("well");
    openapiFields.add("well_cap_type");
    openapiFields.add("well_class");
    openapiFields.add("well_disinfected");
    openapiFields.add("well_guid");
    openapiFields.add("well_identification_plate_attached");
    openapiFields.add("well_location_description");
    openapiFields.add("well_orientation");
    openapiFields.add("well_status");
    openapiFields.add("well_subclass");
    openapiFields.add("well_tag_number");
    openapiFields.add("well_yield");
    openapiFields.add("well_yield_unit");
    openapiFields.add("yield_estimation_duration");
    openapiFields.add("yield_estimation_method");
    openapiFields.add("yield_estimation_rate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("casing_set");
    openapiRequiredFields.add("company_of_person_responsible");
    openapiRequiredFields.add("decommission_description_set");
    openapiRequiredFields.add("linerperforation_set");
    openapiRequiredFields.add("lithologydescription_set");
    openapiRequiredFields.add("owner_full_name");
    openapiRequiredFields.add("person_responsible");
    openapiRequiredFields.add("screen_set");
    openapiRequiredFields.add("well");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WellDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WellDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WellDetail is not found in the empty JSON string", WellDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WellDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WellDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WellDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("analytic_solution_type") != null && !jsonObj.get("analytic_solution_type").isJsonNull()) && !jsonObj.get("analytic_solution_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analytic_solution_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analytic_solution_type").toString()));
      }
      if ((jsonObj.get("aquifer_vulnerability_index") != null && !jsonObj.get("aquifer_vulnerability_index").isJsonNull()) && !jsonObj.get("aquifer_vulnerability_index").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aquifer_vulnerability_index` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aquifer_vulnerability_index").toString()));
      }
      if ((jsonObj.get("artesian_flow") != null && !jsonObj.get("artesian_flow").isJsonNull()) && !jsonObj.get("artesian_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artesian_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artesian_flow").toString()));
      }
      if ((jsonObj.get("artesian_pressure") != null && !jsonObj.get("artesian_pressure").isJsonNull()) && !jsonObj.get("artesian_pressure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artesian_pressure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artesian_pressure").toString()));
      }
      if ((jsonObj.get("backfill_depth") != null && !jsonObj.get("backfill_depth").isJsonNull()) && !jsonObj.get("backfill_depth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backfill_depth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backfill_depth").toString()));
      }
      if ((jsonObj.get("backfill_material") != null && !jsonObj.get("backfill_material").isJsonNull()) && !jsonObj.get("backfill_material").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backfill_material` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backfill_material").toString()));
      }
      if ((jsonObj.get("backfill_type") != null && !jsonObj.get("backfill_type").isJsonNull()) && !jsonObj.get("backfill_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backfill_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backfill_type").toString()));
      }
      if ((jsonObj.get("bedrock_depth") != null && !jsonObj.get("bedrock_depth").isJsonNull()) && !jsonObj.get("bedrock_depth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bedrock_depth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bedrock_depth").toString()));
      }
      if ((jsonObj.get("boundary_effect") != null && !jsonObj.get("boundary_effect").isJsonNull()) && !jsonObj.get("boundary_effect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `boundary_effect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("boundary_effect").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("casing_set").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `casing_set` to be an array in the JSON string but got `%s`", jsonObj.get("casing_set").toString()));
      }

      JsonArray jsonArraycasingSet = jsonObj.getAsJsonArray("casing_set");
      // validate the required field `casing_set` (array)
      for (int i = 0; i < jsonArraycasingSet.size(); i++) {
        Casing.validateJsonElement(jsonArraycasingSet.get(i));
      };
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      // validate the required field `company_of_person_responsible`
      OrganizationNameList.validateJsonElement(jsonObj.get("company_of_person_responsible"));
      if ((jsonObj.get("coordinate_acquisition_code") != null && !jsonObj.get("coordinate_acquisition_code").isJsonNull()) && !jsonObj.get("coordinate_acquisition_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coordinate_acquisition_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coordinate_acquisition_code").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("decommission_description_set").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `decommission_description_set` to be an array in the JSON string but got `%s`", jsonObj.get("decommission_description_set").toString()));
      }

      JsonArray jsonArraydecommissionDescriptionSet = jsonObj.getAsJsonArray("decommission_description_set");
      // validate the required field `decommission_description_set` (array)
      for (int i = 0; i < jsonArraydecommissionDescriptionSet.size(); i++) {
        DecommissionDescription.validateJsonElement(jsonArraydecommissionDescriptionSet.get(i));
      };
      if ((jsonObj.get("decommission_details") != null && !jsonObj.get("decommission_details").isJsonNull()) && !jsonObj.get("decommission_details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decommission_details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decommission_details").toString()));
      }
      if ((jsonObj.get("decommission_method") != null && !jsonObj.get("decommission_method").isJsonNull()) && !jsonObj.get("decommission_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decommission_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decommission_method").toString()));
      }
      if ((jsonObj.get("decommission_reason") != null && !jsonObj.get("decommission_reason").isJsonNull()) && !jsonObj.get("decommission_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decommission_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decommission_reason").toString()));
      }
      if ((jsonObj.get("development_hours") != null && !jsonObj.get("development_hours").isJsonNull()) && !jsonObj.get("development_hours").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `development_hours` to be a primitive type in the JSON string but got `%s`", jsonObj.get("development_hours").toString()));
      }
      if ((jsonObj.get("development_method") != null && !jsonObj.get("development_method").isJsonNull()) && !jsonObj.get("development_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `development_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("development_method").toString()));
      }
      if ((jsonObj.get("development_notes") != null && !jsonObj.get("development_notes").isJsonNull()) && !jsonObj.get("development_notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `development_notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("development_notes").toString()));
      }
      if ((jsonObj.get("diameter") != null && !jsonObj.get("diameter").isJsonNull()) && !jsonObj.get("diameter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diameter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diameter").toString()));
      }
      if ((jsonObj.get("drawdown") != null && !jsonObj.get("drawdown").isJsonNull()) && !jsonObj.get("drawdown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `drawdown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("drawdown").toString()));
      }
      if ((jsonObj.get("drilling_company") != null && !jsonObj.get("drilling_company").isJsonNull()) && !jsonObj.get("drilling_company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `drilling_company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("drilling_company").toString()));
      }
      if ((jsonObj.get("drilling_method") != null && !jsonObj.get("drilling_method").isJsonNull()) && !jsonObj.get("drilling_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `drilling_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("drilling_method").toString()));
      }
      if ((jsonObj.get("ems") != null && !jsonObj.get("ems").isJsonNull()) && !jsonObj.get("ems").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ems` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ems").toString()));
      }
      if ((jsonObj.get("filter_pack_from") != null && !jsonObj.get("filter_pack_from").isJsonNull()) && !jsonObj.get("filter_pack_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter_pack_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter_pack_from").toString()));
      }
      if ((jsonObj.get("filter_pack_material") != null && !jsonObj.get("filter_pack_material").isJsonNull()) && !jsonObj.get("filter_pack_material").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter_pack_material` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter_pack_material").toString()));
      }
      if ((jsonObj.get("filter_pack_material_size") != null && !jsonObj.get("filter_pack_material_size").isJsonNull()) && !jsonObj.get("filter_pack_material_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter_pack_material_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter_pack_material_size").toString()));
      }
      if ((jsonObj.get("filter_pack_thickness") != null && !jsonObj.get("filter_pack_thickness").isJsonNull()) && !jsonObj.get("filter_pack_thickness").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter_pack_thickness` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter_pack_thickness").toString()));
      }
      if ((jsonObj.get("filter_pack_to") != null && !jsonObj.get("filter_pack_to").isJsonNull()) && !jsonObj.get("filter_pack_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter_pack_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter_pack_to").toString()));
      }
      if ((jsonObj.get("final_casing_stick_up") != null && !jsonObj.get("final_casing_stick_up").isJsonNull()) && !jsonObj.get("final_casing_stick_up").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `final_casing_stick_up` to be a primitive type in the JSON string but got `%s`", jsonObj.get("final_casing_stick_up").toString()));
      }
      if ((jsonObj.get("finished_well_depth") != null && !jsonObj.get("finished_well_depth").isJsonNull()) && !jsonObj.get("finished_well_depth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finished_well_depth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finished_well_depth").toString()));
      }
      if ((jsonObj.get("ground_elevation") != null && !jsonObj.get("ground_elevation").isJsonNull()) && !jsonObj.get("ground_elevation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ground_elevation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ground_elevation").toString()));
      }
      if ((jsonObj.get("ground_elevation_method") != null && !jsonObj.get("ground_elevation_method").isJsonNull()) && !jsonObj.get("ground_elevation_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ground_elevation_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ground_elevation_method").toString()));
      }
      if ((jsonObj.get("hydraulic_conductivity") != null && !jsonObj.get("hydraulic_conductivity").isJsonNull()) && !jsonObj.get("hydraulic_conductivity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hydraulic_conductivity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hydraulic_conductivity").toString()));
      }
      if ((jsonObj.get("hydro_fracturing_yield_increase") != null && !jsonObj.get("hydro_fracturing_yield_increase").isJsonNull()) && !jsonObj.get("hydro_fracturing_yield_increase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hydro_fracturing_yield_increase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hydro_fracturing_yield_increase").toString()));
      }
      if ((jsonObj.get("id_plate_attached_by") != null && !jsonObj.get("id_plate_attached_by").isJsonNull()) && !jsonObj.get("id_plate_attached_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_plate_attached_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id_plate_attached_by").toString()));
      }
      if ((jsonObj.get("intended_water_use") != null && !jsonObj.get("intended_water_use").isJsonNull()) && !jsonObj.get("intended_water_use").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intended_water_use` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intended_water_use").toString()));
      }
      if ((jsonObj.get("land_district") != null && !jsonObj.get("land_district").isJsonNull()) && !jsonObj.get("land_district").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `land_district` to be a primitive type in the JSON string but got `%s`", jsonObj.get("land_district").toString()));
      }
      if ((jsonObj.get("latitude") != null && !jsonObj.get("latitude").isJsonNull()) && !jsonObj.get("latitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latitude").toString()));
      }
      if ((jsonObj.get("legal_block") != null && !jsonObj.get("legal_block").isJsonNull()) && !jsonObj.get("legal_block").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legal_block` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legal_block").toString()));
      }
      if ((jsonObj.get("legal_district_lot") != null && !jsonObj.get("legal_district_lot").isJsonNull()) && !jsonObj.get("legal_district_lot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legal_district_lot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legal_district_lot").toString()));
      }
      if ((jsonObj.get("legal_lot") != null && !jsonObj.get("legal_lot").isJsonNull()) && !jsonObj.get("legal_lot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legal_lot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legal_lot").toString()));
      }
      if ((jsonObj.get("legal_plan") != null && !jsonObj.get("legal_plan").isJsonNull()) && !jsonObj.get("legal_plan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legal_plan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legal_plan").toString()));
      }
      if ((jsonObj.get("legal_range") != null && !jsonObj.get("legal_range").isJsonNull()) && !jsonObj.get("legal_range").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legal_range` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legal_range").toString()));
      }
      if ((jsonObj.get("legal_section") != null && !jsonObj.get("legal_section").isJsonNull()) && !jsonObj.get("legal_section").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legal_section` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legal_section").toString()));
      }
      if ((jsonObj.get("legal_township") != null && !jsonObj.get("legal_township").isJsonNull()) && !jsonObj.get("legal_township").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legal_township` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legal_township").toString()));
      }
      if ((jsonObj.get("licenced_status") != null && !jsonObj.get("licenced_status").isJsonNull()) && !jsonObj.get("licenced_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenced_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenced_status").toString()));
      }
      if ((jsonObj.get("liner_diameter") != null && !jsonObj.get("liner_diameter").isJsonNull()) && !jsonObj.get("liner_diameter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liner_diameter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liner_diameter").toString()));
      }
      if ((jsonObj.get("liner_from") != null && !jsonObj.get("liner_from").isJsonNull()) && !jsonObj.get("liner_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liner_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liner_from").toString()));
      }
      if ((jsonObj.get("liner_material") != null && !jsonObj.get("liner_material").isJsonNull()) && !jsonObj.get("liner_material").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liner_material` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liner_material").toString()));
      }
      if ((jsonObj.get("liner_thickness") != null && !jsonObj.get("liner_thickness").isJsonNull()) && !jsonObj.get("liner_thickness").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liner_thickness` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liner_thickness").toString()));
      }
      if ((jsonObj.get("liner_to") != null && !jsonObj.get("liner_to").isJsonNull()) && !jsonObj.get("liner_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liner_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liner_to").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("linerperforation_set").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `linerperforation_set` to be an array in the JSON string but got `%s`", jsonObj.get("linerperforation_set").toString()));
      }

      JsonArray jsonArraylinerperforationSet = jsonObj.getAsJsonArray("linerperforation_set");
      // validate the required field `linerperforation_set` (array)
      for (int i = 0; i < jsonArraylinerperforationSet.size(); i++) {
        LinerPerforation.validateJsonElement(jsonArraylinerperforationSet.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("lithologydescription_set").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lithologydescription_set` to be an array in the JSON string but got `%s`", jsonObj.get("lithologydescription_set").toString()));
      }

      JsonArray jsonArraylithologydescriptionSet = jsonObj.getAsJsonArray("lithologydescription_set");
      // validate the required field `lithologydescription_set` (array)
      for (int i = 0; i < jsonArraylithologydescriptionSet.size(); i++) {
        LithologyDescription.validateJsonElement(jsonArraylithologydescriptionSet.get(i));
      };
      if ((jsonObj.get("longitude") != null && !jsonObj.get("longitude").isJsonNull()) && !jsonObj.get("longitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longitude").toString()));
      }
      if ((jsonObj.get("observation_well_number") != null && !jsonObj.get("observation_well_number").isJsonNull()) && !jsonObj.get("observation_well_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `observation_well_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("observation_well_number").toString()));
      }
      if ((jsonObj.get("observation_well_status") != null && !jsonObj.get("observation_well_status").isJsonNull()) && !jsonObj.get("observation_well_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `observation_well_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("observation_well_status").toString()));
      }
      if ((jsonObj.get("other_drilling_method") != null && !jsonObj.get("other_drilling_method").isJsonNull()) && !jsonObj.get("other_drilling_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `other_drilling_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("other_drilling_method").toString()));
      }
      if ((jsonObj.get("other_screen_bottom") != null && !jsonObj.get("other_screen_bottom").isJsonNull()) && !jsonObj.get("other_screen_bottom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `other_screen_bottom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("other_screen_bottom").toString()));
      }
      if ((jsonObj.get("other_screen_material") != null && !jsonObj.get("other_screen_material").isJsonNull()) && !jsonObj.get("other_screen_material").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `other_screen_material` to be a primitive type in the JSON string but got `%s`", jsonObj.get("other_screen_material").toString()));
      }
      if (!jsonObj.get("owner_full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner_full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner_full_name").toString()));
      }
      // validate the required field `person_responsible`
      PersonBasic.validateJsonElement(jsonObj.get("person_responsible"));
      if ((jsonObj.get("recommended_pump_depth") != null && !jsonObj.get("recommended_pump_depth").isJsonNull()) && !jsonObj.get("recommended_pump_depth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommended_pump_depth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommended_pump_depth").toString()));
      }
      if ((jsonObj.get("recommended_pump_rate") != null && !jsonObj.get("recommended_pump_rate").isJsonNull()) && !jsonObj.get("recommended_pump_rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommended_pump_rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommended_pump_rate").toString()));
      }
      if ((jsonObj.get("screen_bottom") != null && !jsonObj.get("screen_bottom").isJsonNull()) && !jsonObj.get("screen_bottom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screen_bottom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screen_bottom").toString()));
      }
      if ((jsonObj.get("screen_information") != null && !jsonObj.get("screen_information").isJsonNull()) && !jsonObj.get("screen_information").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screen_information` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screen_information").toString()));
      }
      if ((jsonObj.get("screen_intake_method") != null && !jsonObj.get("screen_intake_method").isJsonNull()) && !jsonObj.get("screen_intake_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screen_intake_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screen_intake_method").toString()));
      }
      if ((jsonObj.get("screen_material") != null && !jsonObj.get("screen_material").isJsonNull()) && !jsonObj.get("screen_material").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screen_material` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screen_material").toString()));
      }
      if ((jsonObj.get("screen_opening") != null && !jsonObj.get("screen_opening").isJsonNull()) && !jsonObj.get("screen_opening").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screen_opening` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screen_opening").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("screen_set").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `screen_set` to be an array in the JSON string but got `%s`", jsonObj.get("screen_set").toString()));
      }

      JsonArray jsonArrayscreenSet = jsonObj.getAsJsonArray("screen_set");
      // validate the required field `screen_set` (array)
      for (int i = 0; i < jsonArrayscreenSet.size(); i++) {
        Screen.validateJsonElement(jsonArrayscreenSet.get(i));
      };
      if ((jsonObj.get("screen_type") != null && !jsonObj.get("screen_type").isJsonNull()) && !jsonObj.get("screen_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screen_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screen_type").toString()));
      }
      if ((jsonObj.get("sealant_material") != null && !jsonObj.get("sealant_material").isJsonNull()) && !jsonObj.get("sealant_material").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sealant_material` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sealant_material").toString()));
      }
      if ((jsonObj.get("specific_storage") != null && !jsonObj.get("specific_storage").isJsonNull()) && !jsonObj.get("specific_storage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `specific_storage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("specific_storage").toString()));
      }
      if ((jsonObj.get("specific_yield") != null && !jsonObj.get("specific_yield").isJsonNull()) && !jsonObj.get("specific_yield").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `specific_yield` to be a primitive type in the JSON string but got `%s`", jsonObj.get("specific_yield").toString()));
      }
      if ((jsonObj.get("static_level_before_test") != null && !jsonObj.get("static_level_before_test").isJsonNull()) && !jsonObj.get("static_level_before_test").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `static_level_before_test` to be a primitive type in the JSON string but got `%s`", jsonObj.get("static_level_before_test").toString()));
      }
      if ((jsonObj.get("static_water_level") != null && !jsonObj.get("static_water_level").isJsonNull()) && !jsonObj.get("static_water_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `static_water_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("static_water_level").toString()));
      }
      if ((jsonObj.get("storativity") != null && !jsonObj.get("storativity").isJsonNull()) && !jsonObj.get("storativity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storativity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storativity").toString()));
      }
      if ((jsonObj.get("street_address") != null && !jsonObj.get("street_address").isJsonNull()) && !jsonObj.get("street_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street_address").toString()));
      }
      if ((jsonObj.get("surface_seal_depth") != null && !jsonObj.get("surface_seal_depth").isJsonNull()) && !jsonObj.get("surface_seal_depth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surface_seal_depth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surface_seal_depth").toString()));
      }
      if ((jsonObj.get("surface_seal_length") != null && !jsonObj.get("surface_seal_length").isJsonNull()) && !jsonObj.get("surface_seal_length").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surface_seal_length` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surface_seal_length").toString()));
      }
      if ((jsonObj.get("surface_seal_material") != null && !jsonObj.get("surface_seal_material").isJsonNull()) && !jsonObj.get("surface_seal_material").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surface_seal_material` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surface_seal_material").toString()));
      }
      if ((jsonObj.get("surface_seal_method") != null && !jsonObj.get("surface_seal_method").isJsonNull()) && !jsonObj.get("surface_seal_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surface_seal_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surface_seal_method").toString()));
      }
      if ((jsonObj.get("surface_seal_thickness") != null && !jsonObj.get("surface_seal_thickness").isJsonNull()) && !jsonObj.get("surface_seal_thickness").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surface_seal_thickness` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surface_seal_thickness").toString()));
      }
      if ((jsonObj.get("testing_method") != null && !jsonObj.get("testing_method").isJsonNull()) && !jsonObj.get("testing_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testing_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testing_method").toString()));
      }
      if ((jsonObj.get("total_depth_drilled") != null && !jsonObj.get("total_depth_drilled").isJsonNull()) && !jsonObj.get("total_depth_drilled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_depth_drilled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_depth_drilled").toString()));
      }
      if ((jsonObj.get("transmissivity") != null && !jsonObj.get("transmissivity").isJsonNull()) && !jsonObj.get("transmissivity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transmissivity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transmissivity").toString()));
      }
      if ((jsonObj.get("utm_zone_code") != null && !jsonObj.get("utm_zone_code").isJsonNull()) && !jsonObj.get("utm_zone_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utm_zone_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utm_zone_code").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("water_quality_characteristics") != null && !jsonObj.get("water_quality_characteristics").isJsonNull() && !jsonObj.get("water_quality_characteristics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `water_quality_characteristics` to be an array in the JSON string but got `%s`", jsonObj.get("water_quality_characteristics").toString()));
      }
      if ((jsonObj.get("water_quality_colour") != null && !jsonObj.get("water_quality_colour").isJsonNull()) && !jsonObj.get("water_quality_colour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `water_quality_colour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("water_quality_colour").toString()));
      }
      if ((jsonObj.get("water_quality_odour") != null && !jsonObj.get("water_quality_odour").isJsonNull()) && !jsonObj.get("water_quality_odour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `water_quality_odour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("water_quality_odour").toString()));
      }
      if ((jsonObj.get("water_supply_system_name") != null && !jsonObj.get("water_supply_system_name").isJsonNull()) && !jsonObj.get("water_supply_system_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `water_supply_system_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("water_supply_system_name").toString()));
      }
      if ((jsonObj.get("water_supply_system_well_name") != null && !jsonObj.get("water_supply_system_well_name").isJsonNull()) && !jsonObj.get("water_supply_system_well_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `water_supply_system_well_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("water_supply_system_well_name").toString()));
      }
      if ((jsonObj.get("well_cap_type") != null && !jsonObj.get("well_cap_type").isJsonNull()) && !jsonObj.get("well_cap_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `well_cap_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("well_cap_type").toString()));
      }
      if ((jsonObj.get("well_class") != null && !jsonObj.get("well_class").isJsonNull()) && !jsonObj.get("well_class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `well_class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("well_class").toString()));
      }
      if ((jsonObj.get("well_guid") != null && !jsonObj.get("well_guid").isJsonNull()) && !jsonObj.get("well_guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `well_guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("well_guid").toString()));
      }
      if ((jsonObj.get("well_identification_plate_attached") != null && !jsonObj.get("well_identification_plate_attached").isJsonNull()) && !jsonObj.get("well_identification_plate_attached").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `well_identification_plate_attached` to be a primitive type in the JSON string but got `%s`", jsonObj.get("well_identification_plate_attached").toString()));
      }
      if ((jsonObj.get("well_location_description") != null && !jsonObj.get("well_location_description").isJsonNull()) && !jsonObj.get("well_location_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `well_location_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("well_location_description").toString()));
      }
      if ((jsonObj.get("well_status") != null && !jsonObj.get("well_status").isJsonNull()) && !jsonObj.get("well_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `well_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("well_status").toString()));
      }
      if ((jsonObj.get("well_subclass") != null && !jsonObj.get("well_subclass").isJsonNull()) && !jsonObj.get("well_subclass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `well_subclass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("well_subclass").toString()));
      }
      if ((jsonObj.get("well_yield") != null && !jsonObj.get("well_yield").isJsonNull()) && !jsonObj.get("well_yield").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `well_yield` to be a primitive type in the JSON string but got `%s`", jsonObj.get("well_yield").toString()));
      }
      if ((jsonObj.get("well_yield_unit") != null && !jsonObj.get("well_yield_unit").isJsonNull()) && !jsonObj.get("well_yield_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `well_yield_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("well_yield_unit").toString()));
      }
      if ((jsonObj.get("yield_estimation_duration") != null && !jsonObj.get("yield_estimation_duration").isJsonNull()) && !jsonObj.get("yield_estimation_duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yield_estimation_duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yield_estimation_duration").toString()));
      }
      if ((jsonObj.get("yield_estimation_method") != null && !jsonObj.get("yield_estimation_method").isJsonNull()) && !jsonObj.get("yield_estimation_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yield_estimation_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yield_estimation_method").toString()));
      }
      if ((jsonObj.get("yield_estimation_rate") != null && !jsonObj.get("yield_estimation_rate").isJsonNull()) && !jsonObj.get("yield_estimation_rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yield_estimation_rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yield_estimation_rate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WellDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WellDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WellDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WellDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<WellDetail>() {
           @Override
           public void write(JsonWriter out, WellDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WellDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WellDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WellDetail
   * @throws IOException if the JSON string is invalid with respect to WellDetail
   */
  public static WellDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WellDetail.class);
  }

  /**
   * Convert an instance of WellDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

