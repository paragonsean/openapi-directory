/*
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationStatusCode;
import org.openapitools.client.model.Qualification;
import org.openapitools.client.model.Subactivity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplicationList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:23.471145-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationList {
  public static final String SERIALIZED_NAME_CERT_AUTHORITY = "cert_authority";
  @SerializedName(SERIALIZED_NAME_CERT_AUTHORITY)
  private String certAuthority;

  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private String certificate;

  public static final String SERIALIZED_NAME_CURRENT_STATUS = "current_status";
  @SerializedName(SERIALIZED_NAME_CURRENT_STATUS)
  private ApplicationStatusCode currentStatus;

  public static final String SERIALIZED_NAME_DISPLAY_STATUS = "display_status";
  @SerializedName(SERIALIZED_NAME_DISPLAY_STATUS)
  private String displayStatus;

  public static final String SERIALIZED_NAME_QUALIFICATIONS = "qualifications";
  @SerializedName(SERIALIZED_NAME_QUALIFICATIONS)
  private List<Qualification> qualifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_REMOVAL_DATE = "removal_date";
  @SerializedName(SERIALIZED_NAME_REMOVAL_DATE)
  private LocalDate removalDate;

  public static final String SERIALIZED_NAME_SUBACTIVITY = "subactivity";
  @SerializedName(SERIALIZED_NAME_SUBACTIVITY)
  private Subactivity subactivity;

  public ApplicationList() {
  }

  public ApplicationList(
     String certAuthority, 
     String certificate, 
     String displayStatus, 
     List<Qualification> qualifications
  ) {
    this();
    this.certAuthority = certAuthority;
    this.certificate = certificate;
    this.displayStatus = displayStatus;
    this.qualifications = qualifications;
  }

  /**
   * Get certAuthority
   * @return certAuthority
   */
  @javax.annotation.Nullable
  public String getCertAuthority() {
    return certAuthority;
  }



  /**
   * Get certificate
   * @return certificate
   */
  @javax.annotation.Nullable
  public String getCertificate() {
    return certificate;
  }



  public ApplicationList currentStatus(ApplicationStatusCode currentStatus) {
    this.currentStatus = currentStatus;
    return this;
  }

  /**
   * Get currentStatus
   * @return currentStatus
   */
  @javax.annotation.Nullable
  public ApplicationStatusCode getCurrentStatus() {
    return currentStatus;
  }

  public void setCurrentStatus(ApplicationStatusCode currentStatus) {
    this.currentStatus = currentStatus;
  }


  /**
   * Get displayStatus
   * @return displayStatus
   */
  @javax.annotation.Nullable
  public String getDisplayStatus() {
    return displayStatus;
  }



  /**
   * Get qualifications
   * @return qualifications
   */
  @javax.annotation.Nullable
  public List<Qualification> getQualifications() {
    return qualifications;
  }



  public ApplicationList removalDate(LocalDate removalDate) {
    this.removalDate = removalDate;
    return this;
  }

  /**
   * Get removalDate
   * @return removalDate
   */
  @javax.annotation.Nullable
  public LocalDate getRemovalDate() {
    return removalDate;
  }

  public void setRemovalDate(LocalDate removalDate) {
    this.removalDate = removalDate;
  }


  public ApplicationList subactivity(Subactivity subactivity) {
    this.subactivity = subactivity;
    return this;
  }

  /**
   * Get subactivity
   * @return subactivity
   */
  @javax.annotation.Nonnull
  public Subactivity getSubactivity() {
    return subactivity;
  }

  public void setSubactivity(Subactivity subactivity) {
    this.subactivity = subactivity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationList applicationList = (ApplicationList) o;
    return Objects.equals(this.certAuthority, applicationList.certAuthority) &&
        Objects.equals(this.certificate, applicationList.certificate) &&
        Objects.equals(this.currentStatus, applicationList.currentStatus) &&
        Objects.equals(this.displayStatus, applicationList.displayStatus) &&
        Objects.equals(this.qualifications, applicationList.qualifications) &&
        Objects.equals(this.removalDate, applicationList.removalDate) &&
        Objects.equals(this.subactivity, applicationList.subactivity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certAuthority, certificate, currentStatus, displayStatus, qualifications, removalDate, subactivity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationList {\n");
    sb.append("    certAuthority: ").append(toIndentedString(certAuthority)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    currentStatus: ").append(toIndentedString(currentStatus)).append("\n");
    sb.append("    displayStatus: ").append(toIndentedString(displayStatus)).append("\n");
    sb.append("    qualifications: ").append(toIndentedString(qualifications)).append("\n");
    sb.append("    removalDate: ").append(toIndentedString(removalDate)).append("\n");
    sb.append("    subactivity: ").append(toIndentedString(subactivity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cert_authority");
    openapiFields.add("certificate");
    openapiFields.add("current_status");
    openapiFields.add("display_status");
    openapiFields.add("qualifications");
    openapiFields.add("removal_date");
    openapiFields.add("subactivity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("subactivity");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationList is not found in the empty JSON string", ApplicationList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicationList.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cert_authority") != null && !jsonObj.get("cert_authority").isJsonNull()) && !jsonObj.get("cert_authority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cert_authority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cert_authority").toString()));
      }
      if ((jsonObj.get("certificate") != null && !jsonObj.get("certificate").isJsonNull()) && !jsonObj.get("certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate").toString()));
      }
      // validate the optional field `current_status`
      if (jsonObj.get("current_status") != null && !jsonObj.get("current_status").isJsonNull()) {
        ApplicationStatusCode.validateJsonElement(jsonObj.get("current_status"));
      }
      if ((jsonObj.get("display_status") != null && !jsonObj.get("display_status").isJsonNull()) && !jsonObj.get("display_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_status").toString()));
      }
      if (jsonObj.get("qualifications") != null && !jsonObj.get("qualifications").isJsonNull()) {
        JsonArray jsonArrayqualifications = jsonObj.getAsJsonArray("qualifications");
        if (jsonArrayqualifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("qualifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `qualifications` to be an array in the JSON string but got `%s`", jsonObj.get("qualifications").toString()));
          }

          // validate the optional field `qualifications` (array)
          for (int i = 0; i < jsonArrayqualifications.size(); i++) {
            Qualification.validateJsonElement(jsonArrayqualifications.get(i));
          };
        }
      }
      // validate the required field `subactivity`
      Subactivity.validateJsonElement(jsonObj.get("subactivity"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationList.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationList>() {
           @Override
           public void write(JsonWriter out, ApplicationList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationList
   * @throws IOException if the JSON string is invalid with respect to ApplicationList
   */
  public static ApplicationList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationList.class);
  }

  /**
   * Convert an instance of ApplicationList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

