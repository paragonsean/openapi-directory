/*
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Survey
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:23.471145-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Survey {
  public static final String SERIALIZED_NAME_SURVEY_GUID = "survey_guid";
  @SerializedName(SERIALIZED_NAME_SURVEY_GUID)
  private UUID surveyGuid;

  public static final String SERIALIZED_NAME_SURVEY_INTRODUCTION_TEXT = "survey_introduction_text";
  @SerializedName(SERIALIZED_NAME_SURVEY_INTRODUCTION_TEXT)
  private String surveyIntroductionText;

  public static final String SERIALIZED_NAME_SURVEY_LINK = "survey_link";
  @SerializedName(SERIALIZED_NAME_SURVEY_LINK)
  private String surveyLink;

  /**
   * Gets or Sets surveyPage
   */
  @JsonAdapter(SurveyPageEnum.Adapter.class)
  public enum SurveyPageEnum {
    W("w"),
    
    R("r"),
    
    S("s"),
    
    A("a");

    private String value;

    SurveyPageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SurveyPageEnum fromValue(String value) {
      for (SurveyPageEnum b : SurveyPageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SurveyPageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SurveyPageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SurveyPageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SurveyPageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SurveyPageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SURVEY_PAGE = "survey_page";
  @SerializedName(SERIALIZED_NAME_SURVEY_PAGE)
  private SurveyPageEnum surveyPage;

  public Survey() {
  }

  public Survey(
     UUID surveyGuid
  ) {
    this();
    this.surveyGuid = surveyGuid;
  }

  /**
   * Get surveyGuid
   * @return surveyGuid
   */
  @javax.annotation.Nullable
  public UUID getSurveyGuid() {
    return surveyGuid;
  }



  public Survey surveyIntroductionText(String surveyIntroductionText) {
    this.surveyIntroductionText = surveyIntroductionText;
    return this;
  }

  /**
   * Get surveyIntroductionText
   * @return surveyIntroductionText
   */
  @javax.annotation.Nullable
  public String getSurveyIntroductionText() {
    return surveyIntroductionText;
  }

  public void setSurveyIntroductionText(String surveyIntroductionText) {
    this.surveyIntroductionText = surveyIntroductionText;
  }


  public Survey surveyLink(String surveyLink) {
    this.surveyLink = surveyLink;
    return this;
  }

  /**
   * Get surveyLink
   * @return surveyLink
   */
  @javax.annotation.Nullable
  public String getSurveyLink() {
    return surveyLink;
  }

  public void setSurveyLink(String surveyLink) {
    this.surveyLink = surveyLink;
  }


  public Survey surveyPage(SurveyPageEnum surveyPage) {
    this.surveyPage = surveyPage;
    return this;
  }

  /**
   * Get surveyPage
   * @return surveyPage
   */
  @javax.annotation.Nullable
  public SurveyPageEnum getSurveyPage() {
    return surveyPage;
  }

  public void setSurveyPage(SurveyPageEnum surveyPage) {
    this.surveyPage = surveyPage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Survey survey = (Survey) o;
    return Objects.equals(this.surveyGuid, survey.surveyGuid) &&
        Objects.equals(this.surveyIntroductionText, survey.surveyIntroductionText) &&
        Objects.equals(this.surveyLink, survey.surveyLink) &&
        Objects.equals(this.surveyPage, survey.surveyPage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(surveyGuid, surveyIntroductionText, surveyLink, surveyPage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Survey {\n");
    sb.append("    surveyGuid: ").append(toIndentedString(surveyGuid)).append("\n");
    sb.append("    surveyIntroductionText: ").append(toIndentedString(surveyIntroductionText)).append("\n");
    sb.append("    surveyLink: ").append(toIndentedString(surveyLink)).append("\n");
    sb.append("    surveyPage: ").append(toIndentedString(surveyPage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("survey_guid");
    openapiFields.add("survey_introduction_text");
    openapiFields.add("survey_link");
    openapiFields.add("survey_page");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Survey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Survey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Survey is not found in the empty JSON string", Survey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Survey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Survey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("survey_guid") != null && !jsonObj.get("survey_guid").isJsonNull()) && !jsonObj.get("survey_guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `survey_guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("survey_guid").toString()));
      }
      if ((jsonObj.get("survey_introduction_text") != null && !jsonObj.get("survey_introduction_text").isJsonNull()) && !jsonObj.get("survey_introduction_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `survey_introduction_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("survey_introduction_text").toString()));
      }
      if ((jsonObj.get("survey_link") != null && !jsonObj.get("survey_link").isJsonNull()) && !jsonObj.get("survey_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `survey_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("survey_link").toString()));
      }
      if ((jsonObj.get("survey_page") != null && !jsonObj.get("survey_page").isJsonNull()) && !jsonObj.get("survey_page").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `survey_page` to be a primitive type in the JSON string but got `%s`", jsonObj.get("survey_page").toString()));
      }
      // validate the optional field `survey_page`
      if (jsonObj.get("survey_page") != null && !jsonObj.get("survey_page").isJsonNull()) {
        SurveyPageEnum.validateJsonElement(jsonObj.get("survey_page"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Survey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Survey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Survey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Survey.class));

       return (TypeAdapter<T>) new TypeAdapter<Survey>() {
           @Override
           public void write(JsonWriter out, Survey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Survey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Survey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Survey
   * @throws IOException if the JSON string is invalid with respect to Survey
   */
  public static Survey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Survey.class);
  }

  /**
   * Convert an instance of Survey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

