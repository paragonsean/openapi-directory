/*
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LithologyDescription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:23.471145-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LithologyDescription {
  public static final String SERIALIZED_NAME_LITHOLOGY_COLOUR = "lithology_colour";
  @SerializedName(SERIALIZED_NAME_LITHOLOGY_COLOUR)
  private String lithologyColour;

  public static final String SERIALIZED_NAME_LITHOLOGY_FROM = "lithology_from";
  @SerializedName(SERIALIZED_NAME_LITHOLOGY_FROM)
  private BigDecimal lithologyFrom;

  public static final String SERIALIZED_NAME_LITHOLOGY_HARDNESS = "lithology_hardness";
  @SerializedName(SERIALIZED_NAME_LITHOLOGY_HARDNESS)
  private String lithologyHardness;

  public static final String SERIALIZED_NAME_LITHOLOGY_MOISTURE = "lithology_moisture";
  @SerializedName(SERIALIZED_NAME_LITHOLOGY_MOISTURE)
  private String lithologyMoisture;

  public static final String SERIALIZED_NAME_LITHOLOGY_RAW_DATA = "lithology_raw_data";
  @SerializedName(SERIALIZED_NAME_LITHOLOGY_RAW_DATA)
  private String lithologyRawData;

  public static final String SERIALIZED_NAME_LITHOLOGY_TO = "lithology_to";
  @SerializedName(SERIALIZED_NAME_LITHOLOGY_TO)
  private BigDecimal lithologyTo;

  public static final String SERIALIZED_NAME_WATER_BEARING_ESTIMATED_FLOW = "water_bearing_estimated_flow";
  @SerializedName(SERIALIZED_NAME_WATER_BEARING_ESTIMATED_FLOW)
  private BigDecimal waterBearingEstimatedFlow;

  public LithologyDescription() {
  }

  public LithologyDescription lithologyColour(String lithologyColour) {
    this.lithologyColour = lithologyColour;
    return this;
  }

  /**
   * Get lithologyColour
   * @return lithologyColour
   */
  @javax.annotation.Nullable
  public String getLithologyColour() {
    return lithologyColour;
  }

  public void setLithologyColour(String lithologyColour) {
    this.lithologyColour = lithologyColour;
  }


  public LithologyDescription lithologyFrom(BigDecimal lithologyFrom) {
    this.lithologyFrom = lithologyFrom;
    return this;
  }

  /**
   * Get lithologyFrom
   * @return lithologyFrom
   */
  @javax.annotation.Nullable
  public BigDecimal getLithologyFrom() {
    return lithologyFrom;
  }

  public void setLithologyFrom(BigDecimal lithologyFrom) {
    this.lithologyFrom = lithologyFrom;
  }


  public LithologyDescription lithologyHardness(String lithologyHardness) {
    this.lithologyHardness = lithologyHardness;
    return this;
  }

  /**
   * Get lithologyHardness
   * @return lithologyHardness
   */
  @javax.annotation.Nullable
  public String getLithologyHardness() {
    return lithologyHardness;
  }

  public void setLithologyHardness(String lithologyHardness) {
    this.lithologyHardness = lithologyHardness;
  }


  public LithologyDescription lithologyMoisture(String lithologyMoisture) {
    this.lithologyMoisture = lithologyMoisture;
    return this;
  }

  /**
   * Get lithologyMoisture
   * @return lithologyMoisture
   */
  @javax.annotation.Nullable
  public String getLithologyMoisture() {
    return lithologyMoisture;
  }

  public void setLithologyMoisture(String lithologyMoisture) {
    this.lithologyMoisture = lithologyMoisture;
  }


  public LithologyDescription lithologyRawData(String lithologyRawData) {
    this.lithologyRawData = lithologyRawData;
    return this;
  }

  /**
   * Get lithologyRawData
   * @return lithologyRawData
   */
  @javax.annotation.Nullable
  public String getLithologyRawData() {
    return lithologyRawData;
  }

  public void setLithologyRawData(String lithologyRawData) {
    this.lithologyRawData = lithologyRawData;
  }


  public LithologyDescription lithologyTo(BigDecimal lithologyTo) {
    this.lithologyTo = lithologyTo;
    return this;
  }

  /**
   * Get lithologyTo
   * @return lithologyTo
   */
  @javax.annotation.Nullable
  public BigDecimal getLithologyTo() {
    return lithologyTo;
  }

  public void setLithologyTo(BigDecimal lithologyTo) {
    this.lithologyTo = lithologyTo;
  }


  public LithologyDescription waterBearingEstimatedFlow(BigDecimal waterBearingEstimatedFlow) {
    this.waterBearingEstimatedFlow = waterBearingEstimatedFlow;
    return this;
  }

  /**
   * Get waterBearingEstimatedFlow
   * @return waterBearingEstimatedFlow
   */
  @javax.annotation.Nullable
  public BigDecimal getWaterBearingEstimatedFlow() {
    return waterBearingEstimatedFlow;
  }

  public void setWaterBearingEstimatedFlow(BigDecimal waterBearingEstimatedFlow) {
    this.waterBearingEstimatedFlow = waterBearingEstimatedFlow;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LithologyDescription lithologyDescription = (LithologyDescription) o;
    return Objects.equals(this.lithologyColour, lithologyDescription.lithologyColour) &&
        Objects.equals(this.lithologyFrom, lithologyDescription.lithologyFrom) &&
        Objects.equals(this.lithologyHardness, lithologyDescription.lithologyHardness) &&
        Objects.equals(this.lithologyMoisture, lithologyDescription.lithologyMoisture) &&
        Objects.equals(this.lithologyRawData, lithologyDescription.lithologyRawData) &&
        Objects.equals(this.lithologyTo, lithologyDescription.lithologyTo) &&
        Objects.equals(this.waterBearingEstimatedFlow, lithologyDescription.waterBearingEstimatedFlow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lithologyColour, lithologyFrom, lithologyHardness, lithologyMoisture, lithologyRawData, lithologyTo, waterBearingEstimatedFlow);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LithologyDescription {\n");
    sb.append("    lithologyColour: ").append(toIndentedString(lithologyColour)).append("\n");
    sb.append("    lithologyFrom: ").append(toIndentedString(lithologyFrom)).append("\n");
    sb.append("    lithologyHardness: ").append(toIndentedString(lithologyHardness)).append("\n");
    sb.append("    lithologyMoisture: ").append(toIndentedString(lithologyMoisture)).append("\n");
    sb.append("    lithologyRawData: ").append(toIndentedString(lithologyRawData)).append("\n");
    sb.append("    lithologyTo: ").append(toIndentedString(lithologyTo)).append("\n");
    sb.append("    waterBearingEstimatedFlow: ").append(toIndentedString(waterBearingEstimatedFlow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lithology_colour");
    openapiFields.add("lithology_from");
    openapiFields.add("lithology_hardness");
    openapiFields.add("lithology_moisture");
    openapiFields.add("lithology_raw_data");
    openapiFields.add("lithology_to");
    openapiFields.add("water_bearing_estimated_flow");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LithologyDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LithologyDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LithologyDescription is not found in the empty JSON string", LithologyDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LithologyDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LithologyDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("lithology_colour") != null && !jsonObj.get("lithology_colour").isJsonNull()) && !jsonObj.get("lithology_colour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lithology_colour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lithology_colour").toString()));
      }
      if ((jsonObj.get("lithology_from") != null && !jsonObj.get("lithology_from").isJsonNull()) && !jsonObj.get("lithology_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lithology_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lithology_from").toString()));
      }
      if ((jsonObj.get("lithology_hardness") != null && !jsonObj.get("lithology_hardness").isJsonNull()) && !jsonObj.get("lithology_hardness").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lithology_hardness` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lithology_hardness").toString()));
      }
      if ((jsonObj.get("lithology_moisture") != null && !jsonObj.get("lithology_moisture").isJsonNull()) && !jsonObj.get("lithology_moisture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lithology_moisture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lithology_moisture").toString()));
      }
      if ((jsonObj.get("lithology_raw_data") != null && !jsonObj.get("lithology_raw_data").isJsonNull()) && !jsonObj.get("lithology_raw_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lithology_raw_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lithology_raw_data").toString()));
      }
      if ((jsonObj.get("lithology_to") != null && !jsonObj.get("lithology_to").isJsonNull()) && !jsonObj.get("lithology_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lithology_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lithology_to").toString()));
      }
      if ((jsonObj.get("water_bearing_estimated_flow") != null && !jsonObj.get("water_bearing_estimated_flow").isJsonNull()) && !jsonObj.get("water_bearing_estimated_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `water_bearing_estimated_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("water_bearing_estimated_flow").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LithologyDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LithologyDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LithologyDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LithologyDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<LithologyDescription>() {
           @Override
           public void write(JsonWriter out, LithologyDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LithologyDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LithologyDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LithologyDescription
   * @throws IOException if the JSON string is invalid with respect to LithologyDescription
   */
  public static LithologyDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LithologyDescription.class);
  }

  /**
   * Convert an instance of LithologyDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

