/*
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Qualification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Subactivity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:23.471145-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Subactivity {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_QUALIFICATION_SET = "qualification_set";
  @SerializedName(SERIALIZED_NAME_QUALIFICATION_SET)
  private List<Qualification> qualificationSet = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGISTRIES_SUBACTIVITY_CODE = "registries_subactivity_code";
  @SerializedName(SERIALIZED_NAME_REGISTRIES_SUBACTIVITY_CODE)
  private String registriesSubactivityCode;

  public Subactivity() {
  }

  public Subactivity(
     List<Qualification> qualificationSet, 
     String registriesSubactivityCode
  ) {
    this();
    this.qualificationSet = qualificationSet;
    this.registriesSubactivityCode = registriesSubactivityCode;
  }

  public Subactivity description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Get qualificationSet
   * @return qualificationSet
   */
  @javax.annotation.Nullable
  public List<Qualification> getQualificationSet() {
    return qualificationSet;
  }



  /**
   * Get registriesSubactivityCode
   * @return registriesSubactivityCode
   */
  @javax.annotation.Nullable
  public String getRegistriesSubactivityCode() {
    return registriesSubactivityCode;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subactivity subactivity = (Subactivity) o;
    return Objects.equals(this.description, subactivity.description) &&
        Objects.equals(this.qualificationSet, subactivity.qualificationSet) &&
        Objects.equals(this.registriesSubactivityCode, subactivity.registriesSubactivityCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, qualificationSet, registriesSubactivityCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subactivity {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    qualificationSet: ").append(toIndentedString(qualificationSet)).append("\n");
    sb.append("    registriesSubactivityCode: ").append(toIndentedString(registriesSubactivityCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("qualification_set");
    openapiFields.add("registries_subactivity_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Subactivity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Subactivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Subactivity is not found in the empty JSON string", Subactivity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Subactivity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Subactivity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Subactivity.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("qualification_set") != null && !jsonObj.get("qualification_set").isJsonNull()) {
        JsonArray jsonArrayqualificationSet = jsonObj.getAsJsonArray("qualification_set");
        if (jsonArrayqualificationSet != null) {
          // ensure the json data is an array
          if (!jsonObj.get("qualification_set").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `qualification_set` to be an array in the JSON string but got `%s`", jsonObj.get("qualification_set").toString()));
          }

          // validate the optional field `qualification_set` (array)
          for (int i = 0; i < jsonArrayqualificationSet.size(); i++) {
            Qualification.validateJsonElement(jsonArrayqualificationSet.get(i));
          };
        }
      }
      if ((jsonObj.get("registries_subactivity_code") != null && !jsonObj.get("registries_subactivity_code").isJsonNull()) && !jsonObj.get("registries_subactivity_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registries_subactivity_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registries_subactivity_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Subactivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Subactivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Subactivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Subactivity.class));

       return (TypeAdapter<T>) new TypeAdapter<Subactivity>() {
           @Override
           public void write(JsonWriter out, Subactivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Subactivity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Subactivity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Subactivity
   * @throws IOException if the JSON string is invalid with respect to Subactivity
   */
  public static Subactivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Subactivity.class);
  }

  /**
   * Convert an instance of Subactivity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

