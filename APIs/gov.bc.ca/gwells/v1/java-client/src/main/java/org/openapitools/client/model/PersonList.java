/*
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.RegistrationsList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PersonList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:23.471145-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PersonList {
  public static final String SERIALIZED_NAME_CONTACT_CELL = "contact_cell";
  @SerializedName(SERIALIZED_NAME_CONTACT_CELL)
  private String contactCell;

  public static final String SERIALIZED_NAME_CONTACT_EMAIL = "contact_email";
  @SerializedName(SERIALIZED_NAME_CONTACT_EMAIL)
  private String contactEmail;

  public static final String SERIALIZED_NAME_CONTACT_TEL = "contact_tel";
  @SerializedName(SERIALIZED_NAME_CONTACT_TEL)
  private String contactTel;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_PERSON_GUID = "person_guid";
  @SerializedName(SERIALIZED_NAME_PERSON_GUID)
  private UUID personGuid;

  public static final String SERIALIZED_NAME_REGISTRATIONS = "registrations";
  @SerializedName(SERIALIZED_NAME_REGISTRATIONS)
  private List<RegistrationsList> registrations = new ArrayList<>();

  public static final String SERIALIZED_NAME_SURNAME = "surname";
  @SerializedName(SERIALIZED_NAME_SURNAME)
  private String surname;

  public PersonList() {
  }

  public PersonList(
     UUID personGuid, 
     List<RegistrationsList> registrations
  ) {
    this();
    this.personGuid = personGuid;
    this.registrations = registrations;
  }

  public PersonList contactCell(String contactCell) {
    this.contactCell = contactCell;
    return this;
  }

  /**
   * Get contactCell
   * @return contactCell
   */
  @javax.annotation.Nullable
  public String getContactCell() {
    return contactCell;
  }

  public void setContactCell(String contactCell) {
    this.contactCell = contactCell;
  }


  public PersonList contactEmail(String contactEmail) {
    this.contactEmail = contactEmail;
    return this;
  }

  /**
   * Get contactEmail
   * @return contactEmail
   */
  @javax.annotation.Nullable
  public String getContactEmail() {
    return contactEmail;
  }

  public void setContactEmail(String contactEmail) {
    this.contactEmail = contactEmail;
  }


  public PersonList contactTel(String contactTel) {
    this.contactTel = contactTel;
    return this;
  }

  /**
   * Get contactTel
   * @return contactTel
   */
  @javax.annotation.Nullable
  public String getContactTel() {
    return contactTel;
  }

  public void setContactTel(String contactTel) {
    this.contactTel = contactTel;
  }


  public PersonList firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  /**
   * Get personGuid
   * @return personGuid
   */
  @javax.annotation.Nullable
  public UUID getPersonGuid() {
    return personGuid;
  }



  /**
   * Get registrations
   * @return registrations
   */
  @javax.annotation.Nullable
  public List<RegistrationsList> getRegistrations() {
    return registrations;
  }



  public PersonList surname(String surname) {
    this.surname = surname;
    return this;
  }

  /**
   * Get surname
   * @return surname
   */
  @javax.annotation.Nonnull
  public String getSurname() {
    return surname;
  }

  public void setSurname(String surname) {
    this.surname = surname;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonList personList = (PersonList) o;
    return Objects.equals(this.contactCell, personList.contactCell) &&
        Objects.equals(this.contactEmail, personList.contactEmail) &&
        Objects.equals(this.contactTel, personList.contactTel) &&
        Objects.equals(this.firstName, personList.firstName) &&
        Objects.equals(this.personGuid, personList.personGuid) &&
        Objects.equals(this.registrations, personList.registrations) &&
        Objects.equals(this.surname, personList.surname);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactCell, contactEmail, contactTel, firstName, personGuid, registrations, surname);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonList {\n");
    sb.append("    contactCell: ").append(toIndentedString(contactCell)).append("\n");
    sb.append("    contactEmail: ").append(toIndentedString(contactEmail)).append("\n");
    sb.append("    contactTel: ").append(toIndentedString(contactTel)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    personGuid: ").append(toIndentedString(personGuid)).append("\n");
    sb.append("    registrations: ").append(toIndentedString(registrations)).append("\n");
    sb.append("    surname: ").append(toIndentedString(surname)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contact_cell");
    openapiFields.add("contact_email");
    openapiFields.add("contact_tel");
    openapiFields.add("first_name");
    openapiFields.add("person_guid");
    openapiFields.add("registrations");
    openapiFields.add("surname");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("first_name");
    openapiRequiredFields.add("surname");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PersonList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PersonList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonList is not found in the empty JSON string", PersonList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PersonList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PersonList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PersonList.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contact_cell") != null && !jsonObj.get("contact_cell").isJsonNull()) && !jsonObj.get("contact_cell").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contact_cell` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contact_cell").toString()));
      }
      if ((jsonObj.get("contact_email") != null && !jsonObj.get("contact_email").isJsonNull()) && !jsonObj.get("contact_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contact_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contact_email").toString()));
      }
      if ((jsonObj.get("contact_tel") != null && !jsonObj.get("contact_tel").isJsonNull()) && !jsonObj.get("contact_tel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contact_tel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contact_tel").toString()));
      }
      if (!jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("person_guid") != null && !jsonObj.get("person_guid").isJsonNull()) && !jsonObj.get("person_guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `person_guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("person_guid").toString()));
      }
      if (jsonObj.get("registrations") != null && !jsonObj.get("registrations").isJsonNull()) {
        JsonArray jsonArrayregistrations = jsonObj.getAsJsonArray("registrations");
        if (jsonArrayregistrations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("registrations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `registrations` to be an array in the JSON string but got `%s`", jsonObj.get("registrations").toString()));
          }

          // validate the optional field `registrations` (array)
          for (int i = 0; i < jsonArrayregistrations.size(); i++) {
            RegistrationsList.validateJsonElement(jsonArrayregistrations.get(i));
          };
        }
      }
      if (!jsonObj.get("surname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonList.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonList>() {
           @Override
           public void write(JsonWriter out, PersonList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PersonList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PersonList
   * @throws IOException if the JSON string is invalid with respect to PersonList
   */
  public static PersonList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonList.class);
  }

  /**
   * Convert an instance of PersonList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

