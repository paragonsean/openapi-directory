/*
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Aquifer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:23.471145-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Aquifer {
  public static final String SERIALIZED_NAME_AQUIFER_ID = "aquifer_id";
  @SerializedName(SERIALIZED_NAME_AQUIFER_ID)
  private Integer aquiferId;

  public static final String SERIALIZED_NAME_AQUIFER_NAME = "aquifer_name";
  @SerializedName(SERIALIZED_NAME_AQUIFER_NAME)
  private String aquiferName;

  public static final String SERIALIZED_NAME_AREA = "area";
  @SerializedName(SERIALIZED_NAME_AREA)
  private BigDecimal area;

  public static final String SERIALIZED_NAME_DEMAND = "demand";
  @SerializedName(SERIALIZED_NAME_DEMAND)
  private String demand;

  public static final String SERIALIZED_NAME_DEMAND_DESCRIPTION = "demand_description";
  @SerializedName(SERIALIZED_NAME_DEMAND_DESCRIPTION)
  private String demandDescription;

  public static final String SERIALIZED_NAME_KNOWN_WATER_USE = "known_water_use";
  @SerializedName(SERIALIZED_NAME_KNOWN_WATER_USE)
  private String knownWaterUse;

  public static final String SERIALIZED_NAME_KNOWN_WATER_USE_DESCRIPTION = "known_water_use_description";
  @SerializedName(SERIALIZED_NAME_KNOWN_WATER_USE_DESCRIPTION)
  private String knownWaterUseDescription;

  public static final String SERIALIZED_NAME_LITHO_STRATOGRAPHIC_UNIT = "litho_stratographic_unit";
  @SerializedName(SERIALIZED_NAME_LITHO_STRATOGRAPHIC_UNIT)
  private String lithoStratographicUnit;

  public static final String SERIALIZED_NAME_LOCATION_DESCRIPTION = "location_description";
  @SerializedName(SERIALIZED_NAME_LOCATION_DESCRIPTION)
  private String locationDescription;

  public static final String SERIALIZED_NAME_MAPPING_YEAR = "mapping_year";
  @SerializedName(SERIALIZED_NAME_MAPPING_YEAR)
  private Integer mappingYear;

  public static final String SERIALIZED_NAME_MATERIAL = "material";
  @SerializedName(SERIALIZED_NAME_MATERIAL)
  private String material;

  public static final String SERIALIZED_NAME_MATERIAL_DESCRIPTION = "material_description";
  @SerializedName(SERIALIZED_NAME_MATERIAL_DESCRIPTION)
  private String materialDescription;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PRODUCTIVITY = "productivity";
  @SerializedName(SERIALIZED_NAME_PRODUCTIVITY)
  private String productivity;

  public static final String SERIALIZED_NAME_PRODUCTIVITY_DESCRIPTION = "productivity_description";
  @SerializedName(SERIALIZED_NAME_PRODUCTIVITY_DESCRIPTION)
  private String productivityDescription;

  public static final String SERIALIZED_NAME_QUALITY_CONCERN = "quality_concern";
  @SerializedName(SERIALIZED_NAME_QUALITY_CONCERN)
  private String qualityConcern;

  public static final String SERIALIZED_NAME_QUALITY_CONCERN_DESCRIPTION = "quality_concern_description";
  @SerializedName(SERIALIZED_NAME_QUALITY_CONCERN_DESCRIPTION)
  private String qualityConcernDescription;

  public static final String SERIALIZED_NAME_SUBTYPE = "subtype";
  @SerializedName(SERIALIZED_NAME_SUBTYPE)
  private String subtype;

  public static final String SERIALIZED_NAME_SUBTYPE_DESCRIPTION = "subtype_description";
  @SerializedName(SERIALIZED_NAME_SUBTYPE_DESCRIPTION)
  private String subtypeDescription;

  public static final String SERIALIZED_NAME_VULNERABILITY = "vulnerability";
  @SerializedName(SERIALIZED_NAME_VULNERABILITY)
  private String vulnerability;

  public static final String SERIALIZED_NAME_VULNERABILITY_DESCRIPTION = "vulnerability_description";
  @SerializedName(SERIALIZED_NAME_VULNERABILITY_DESCRIPTION)
  private String vulnerabilityDescription;

  public Aquifer() {
  }

  public Aquifer(
     Integer aquiferId, 
     String demandDescription, 
     String knownWaterUseDescription, 
     String materialDescription, 
     String productivityDescription, 
     String qualityConcernDescription, 
     String subtypeDescription, 
     String vulnerabilityDescription
  ) {
    this();
    this.aquiferId = aquiferId;
    this.demandDescription = demandDescription;
    this.knownWaterUseDescription = knownWaterUseDescription;
    this.materialDescription = materialDescription;
    this.productivityDescription = productivityDescription;
    this.qualityConcernDescription = qualityConcernDescription;
    this.subtypeDescription = subtypeDescription;
    this.vulnerabilityDescription = vulnerabilityDescription;
  }

  /**
   * Get aquiferId
   * @return aquiferId
   */
  @javax.annotation.Nullable
  public Integer getAquiferId() {
    return aquiferId;
  }



  public Aquifer aquiferName(String aquiferName) {
    this.aquiferName = aquiferName;
    return this;
  }

  /**
   * Get aquiferName
   * @return aquiferName
   */
  @javax.annotation.Nullable
  public String getAquiferName() {
    return aquiferName;
  }

  public void setAquiferName(String aquiferName) {
    this.aquiferName = aquiferName;
  }


  public Aquifer area(BigDecimal area) {
    this.area = area;
    return this;
  }

  /**
   * Get area
   * @return area
   */
  @javax.annotation.Nullable
  public BigDecimal getArea() {
    return area;
  }

  public void setArea(BigDecimal area) {
    this.area = area;
  }


  public Aquifer demand(String demand) {
    this.demand = demand;
    return this;
  }

  /**
   * Get demand
   * @return demand
   */
  @javax.annotation.Nullable
  public String getDemand() {
    return demand;
  }

  public void setDemand(String demand) {
    this.demand = demand;
  }


  /**
   * Get demandDescription
   * @return demandDescription
   */
  @javax.annotation.Nullable
  public String getDemandDescription() {
    return demandDescription;
  }



  public Aquifer knownWaterUse(String knownWaterUse) {
    this.knownWaterUse = knownWaterUse;
    return this;
  }

  /**
   * Get knownWaterUse
   * @return knownWaterUse
   */
  @javax.annotation.Nullable
  public String getKnownWaterUse() {
    return knownWaterUse;
  }

  public void setKnownWaterUse(String knownWaterUse) {
    this.knownWaterUse = knownWaterUse;
  }


  /**
   * Get knownWaterUseDescription
   * @return knownWaterUseDescription
   */
  @javax.annotation.Nullable
  public String getKnownWaterUseDescription() {
    return knownWaterUseDescription;
  }



  public Aquifer lithoStratographicUnit(String lithoStratographicUnit) {
    this.lithoStratographicUnit = lithoStratographicUnit;
    return this;
  }

  /**
   * Get lithoStratographicUnit
   * @return lithoStratographicUnit
   */
  @javax.annotation.Nullable
  public String getLithoStratographicUnit() {
    return lithoStratographicUnit;
  }

  public void setLithoStratographicUnit(String lithoStratographicUnit) {
    this.lithoStratographicUnit = lithoStratographicUnit;
  }


  public Aquifer locationDescription(String locationDescription) {
    this.locationDescription = locationDescription;
    return this;
  }

  /**
   * Get locationDescription
   * @return locationDescription
   */
  @javax.annotation.Nullable
  public String getLocationDescription() {
    return locationDescription;
  }

  public void setLocationDescription(String locationDescription) {
    this.locationDescription = locationDescription;
  }


  public Aquifer mappingYear(Integer mappingYear) {
    this.mappingYear = mappingYear;
    return this;
  }

  /**
   * Use the following format: 
   * minimum: 1990
   * maximum: 2019
   * @return mappingYear
   */
  @javax.annotation.Nullable
  public Integer getMappingYear() {
    return mappingYear;
  }

  public void setMappingYear(Integer mappingYear) {
    this.mappingYear = mappingYear;
  }


  public Aquifer material(String material) {
    this.material = material;
    return this;
  }

  /**
   * Get material
   * @return material
   */
  @javax.annotation.Nullable
  public String getMaterial() {
    return material;
  }

  public void setMaterial(String material) {
    this.material = material;
  }


  /**
   * Get materialDescription
   * @return materialDescription
   */
  @javax.annotation.Nullable
  public String getMaterialDescription() {
    return materialDescription;
  }



  public Aquifer notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public Aquifer productivity(String productivity) {
    this.productivity = productivity;
    return this;
  }

  /**
   * Get productivity
   * @return productivity
   */
  @javax.annotation.Nullable
  public String getProductivity() {
    return productivity;
  }

  public void setProductivity(String productivity) {
    this.productivity = productivity;
  }


  /**
   * Get productivityDescription
   * @return productivityDescription
   */
  @javax.annotation.Nullable
  public String getProductivityDescription() {
    return productivityDescription;
  }



  public Aquifer qualityConcern(String qualityConcern) {
    this.qualityConcern = qualityConcern;
    return this;
  }

  /**
   * Get qualityConcern
   * @return qualityConcern
   */
  @javax.annotation.Nullable
  public String getQualityConcern() {
    return qualityConcern;
  }

  public void setQualityConcern(String qualityConcern) {
    this.qualityConcern = qualityConcern;
  }


  /**
   * Get qualityConcernDescription
   * @return qualityConcernDescription
   */
  @javax.annotation.Nullable
  public String getQualityConcernDescription() {
    return qualityConcernDescription;
  }



  public Aquifer subtype(String subtype) {
    this.subtype = subtype;
    return this;
  }

  /**
   * Get subtype
   * @return subtype
   */
  @javax.annotation.Nullable
  public String getSubtype() {
    return subtype;
  }

  public void setSubtype(String subtype) {
    this.subtype = subtype;
  }


  /**
   * Get subtypeDescription
   * @return subtypeDescription
   */
  @javax.annotation.Nullable
  public String getSubtypeDescription() {
    return subtypeDescription;
  }



  public Aquifer vulnerability(String vulnerability) {
    this.vulnerability = vulnerability;
    return this;
  }

  /**
   * Get vulnerability
   * @return vulnerability
   */
  @javax.annotation.Nullable
  public String getVulnerability() {
    return vulnerability;
  }

  public void setVulnerability(String vulnerability) {
    this.vulnerability = vulnerability;
  }


  /**
   * Get vulnerabilityDescription
   * @return vulnerabilityDescription
   */
  @javax.annotation.Nullable
  public String getVulnerabilityDescription() {
    return vulnerabilityDescription;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Aquifer aquifer = (Aquifer) o;
    return Objects.equals(this.aquiferId, aquifer.aquiferId) &&
        Objects.equals(this.aquiferName, aquifer.aquiferName) &&
        Objects.equals(this.area, aquifer.area) &&
        Objects.equals(this.demand, aquifer.demand) &&
        Objects.equals(this.demandDescription, aquifer.demandDescription) &&
        Objects.equals(this.knownWaterUse, aquifer.knownWaterUse) &&
        Objects.equals(this.knownWaterUseDescription, aquifer.knownWaterUseDescription) &&
        Objects.equals(this.lithoStratographicUnit, aquifer.lithoStratographicUnit) &&
        Objects.equals(this.locationDescription, aquifer.locationDescription) &&
        Objects.equals(this.mappingYear, aquifer.mappingYear) &&
        Objects.equals(this.material, aquifer.material) &&
        Objects.equals(this.materialDescription, aquifer.materialDescription) &&
        Objects.equals(this.notes, aquifer.notes) &&
        Objects.equals(this.productivity, aquifer.productivity) &&
        Objects.equals(this.productivityDescription, aquifer.productivityDescription) &&
        Objects.equals(this.qualityConcern, aquifer.qualityConcern) &&
        Objects.equals(this.qualityConcernDescription, aquifer.qualityConcernDescription) &&
        Objects.equals(this.subtype, aquifer.subtype) &&
        Objects.equals(this.subtypeDescription, aquifer.subtypeDescription) &&
        Objects.equals(this.vulnerability, aquifer.vulnerability) &&
        Objects.equals(this.vulnerabilityDescription, aquifer.vulnerabilityDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aquiferId, aquiferName, area, demand, demandDescription, knownWaterUse, knownWaterUseDescription, lithoStratographicUnit, locationDescription, mappingYear, material, materialDescription, notes, productivity, productivityDescription, qualityConcern, qualityConcernDescription, subtype, subtypeDescription, vulnerability, vulnerabilityDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Aquifer {\n");
    sb.append("    aquiferId: ").append(toIndentedString(aquiferId)).append("\n");
    sb.append("    aquiferName: ").append(toIndentedString(aquiferName)).append("\n");
    sb.append("    area: ").append(toIndentedString(area)).append("\n");
    sb.append("    demand: ").append(toIndentedString(demand)).append("\n");
    sb.append("    demandDescription: ").append(toIndentedString(demandDescription)).append("\n");
    sb.append("    knownWaterUse: ").append(toIndentedString(knownWaterUse)).append("\n");
    sb.append("    knownWaterUseDescription: ").append(toIndentedString(knownWaterUseDescription)).append("\n");
    sb.append("    lithoStratographicUnit: ").append(toIndentedString(lithoStratographicUnit)).append("\n");
    sb.append("    locationDescription: ").append(toIndentedString(locationDescription)).append("\n");
    sb.append("    mappingYear: ").append(toIndentedString(mappingYear)).append("\n");
    sb.append("    material: ").append(toIndentedString(material)).append("\n");
    sb.append("    materialDescription: ").append(toIndentedString(materialDescription)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    productivity: ").append(toIndentedString(productivity)).append("\n");
    sb.append("    productivityDescription: ").append(toIndentedString(productivityDescription)).append("\n");
    sb.append("    qualityConcern: ").append(toIndentedString(qualityConcern)).append("\n");
    sb.append("    qualityConcernDescription: ").append(toIndentedString(qualityConcernDescription)).append("\n");
    sb.append("    subtype: ").append(toIndentedString(subtype)).append("\n");
    sb.append("    subtypeDescription: ").append(toIndentedString(subtypeDescription)).append("\n");
    sb.append("    vulnerability: ").append(toIndentedString(vulnerability)).append("\n");
    sb.append("    vulnerabilityDescription: ").append(toIndentedString(vulnerabilityDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aquifer_id");
    openapiFields.add("aquifer_name");
    openapiFields.add("area");
    openapiFields.add("demand");
    openapiFields.add("demand_description");
    openapiFields.add("known_water_use");
    openapiFields.add("known_water_use_description");
    openapiFields.add("litho_stratographic_unit");
    openapiFields.add("location_description");
    openapiFields.add("mapping_year");
    openapiFields.add("material");
    openapiFields.add("material_description");
    openapiFields.add("notes");
    openapiFields.add("productivity");
    openapiFields.add("productivity_description");
    openapiFields.add("quality_concern");
    openapiFields.add("quality_concern_description");
    openapiFields.add("subtype");
    openapiFields.add("subtype_description");
    openapiFields.add("vulnerability");
    openapiFields.add("vulnerability_description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Aquifer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Aquifer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Aquifer is not found in the empty JSON string", Aquifer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Aquifer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Aquifer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aquifer_name") != null && !jsonObj.get("aquifer_name").isJsonNull()) && !jsonObj.get("aquifer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aquifer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aquifer_name").toString()));
      }
      if ((jsonObj.get("area") != null && !jsonObj.get("area").isJsonNull()) && !jsonObj.get("area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("area").toString()));
      }
      if ((jsonObj.get("demand") != null && !jsonObj.get("demand").isJsonNull()) && !jsonObj.get("demand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `demand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("demand").toString()));
      }
      if ((jsonObj.get("demand_description") != null && !jsonObj.get("demand_description").isJsonNull()) && !jsonObj.get("demand_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `demand_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("demand_description").toString()));
      }
      if ((jsonObj.get("known_water_use") != null && !jsonObj.get("known_water_use").isJsonNull()) && !jsonObj.get("known_water_use").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `known_water_use` to be a primitive type in the JSON string but got `%s`", jsonObj.get("known_water_use").toString()));
      }
      if ((jsonObj.get("known_water_use_description") != null && !jsonObj.get("known_water_use_description").isJsonNull()) && !jsonObj.get("known_water_use_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `known_water_use_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("known_water_use_description").toString()));
      }
      if ((jsonObj.get("litho_stratographic_unit") != null && !jsonObj.get("litho_stratographic_unit").isJsonNull()) && !jsonObj.get("litho_stratographic_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `litho_stratographic_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("litho_stratographic_unit").toString()));
      }
      if ((jsonObj.get("location_description") != null && !jsonObj.get("location_description").isJsonNull()) && !jsonObj.get("location_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_description").toString()));
      }
      if ((jsonObj.get("material") != null && !jsonObj.get("material").isJsonNull()) && !jsonObj.get("material").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `material` to be a primitive type in the JSON string but got `%s`", jsonObj.get("material").toString()));
      }
      if ((jsonObj.get("material_description") != null && !jsonObj.get("material_description").isJsonNull()) && !jsonObj.get("material_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `material_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("material_description").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("productivity") != null && !jsonObj.get("productivity").isJsonNull()) && !jsonObj.get("productivity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productivity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productivity").toString()));
      }
      if ((jsonObj.get("productivity_description") != null && !jsonObj.get("productivity_description").isJsonNull()) && !jsonObj.get("productivity_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productivity_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productivity_description").toString()));
      }
      if ((jsonObj.get("quality_concern") != null && !jsonObj.get("quality_concern").isJsonNull()) && !jsonObj.get("quality_concern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quality_concern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quality_concern").toString()));
      }
      if ((jsonObj.get("quality_concern_description") != null && !jsonObj.get("quality_concern_description").isJsonNull()) && !jsonObj.get("quality_concern_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quality_concern_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quality_concern_description").toString()));
      }
      if ((jsonObj.get("subtype") != null && !jsonObj.get("subtype").isJsonNull()) && !jsonObj.get("subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtype").toString()));
      }
      if ((jsonObj.get("subtype_description") != null && !jsonObj.get("subtype_description").isJsonNull()) && !jsonObj.get("subtype_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtype_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtype_description").toString()));
      }
      if ((jsonObj.get("vulnerability") != null && !jsonObj.get("vulnerability").isJsonNull()) && !jsonObj.get("vulnerability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vulnerability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vulnerability").toString()));
      }
      if ((jsonObj.get("vulnerability_description") != null && !jsonObj.get("vulnerability_description").isJsonNull()) && !jsonObj.get("vulnerability_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vulnerability_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vulnerability_description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Aquifer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Aquifer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Aquifer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Aquifer.class));

       return (TypeAdapter<T>) new TypeAdapter<Aquifer>() {
           @Override
           public void write(JsonWriter out, Aquifer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Aquifer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Aquifer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Aquifer
   * @throws IOException if the JSON string is invalid with respect to Aquifer
   */
  public static Aquifer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Aquifer.class);
  }

  /**
   * Convert an instance of Aquifer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

