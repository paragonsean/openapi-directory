/*
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Casing
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:23.471145-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Casing {
  public static final String SERIALIZED_NAME_CASING_CODE = "casing_code";
  @SerializedName(SERIALIZED_NAME_CASING_CODE)
  private String casingCode;

  public static final String SERIALIZED_NAME_CASING_MATERIAL = "casing_material";
  @SerializedName(SERIALIZED_NAME_CASING_MATERIAL)
  private String casingMaterial;

  public static final String SERIALIZED_NAME_DIAMETER = "diameter";
  @SerializedName(SERIALIZED_NAME_DIAMETER)
  private BigDecimal diameter;

  public static final String SERIALIZED_NAME_DRIVE_SHOE = "drive_shoe";
  @SerializedName(SERIALIZED_NAME_DRIVE_SHOE)
  private Boolean driveShoe;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private BigDecimal end;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private BigDecimal start;

  public static final String SERIALIZED_NAME_WALL_THICKNESS = "wall_thickness";
  @SerializedName(SERIALIZED_NAME_WALL_THICKNESS)
  private BigDecimal wallThickness;

  public Casing() {
  }

  public Casing casingCode(String casingCode) {
    this.casingCode = casingCode;
    return this;
  }

  /**
   * Get casingCode
   * @return casingCode
   */
  @javax.annotation.Nullable
  public String getCasingCode() {
    return casingCode;
  }

  public void setCasingCode(String casingCode) {
    this.casingCode = casingCode;
  }


  public Casing casingMaterial(String casingMaterial) {
    this.casingMaterial = casingMaterial;
    return this;
  }

  /**
   * Get casingMaterial
   * @return casingMaterial
   */
  @javax.annotation.Nullable
  public String getCasingMaterial() {
    return casingMaterial;
  }

  public void setCasingMaterial(String casingMaterial) {
    this.casingMaterial = casingMaterial;
  }


  public Casing diameter(BigDecimal diameter) {
    this.diameter = diameter;
    return this;
  }

  /**
   * Get diameter
   * @return diameter
   */
  @javax.annotation.Nonnull
  public BigDecimal getDiameter() {
    return diameter;
  }

  public void setDiameter(BigDecimal diameter) {
    this.diameter = diameter;
  }


  public Casing driveShoe(Boolean driveShoe) {
    this.driveShoe = driveShoe;
    return this;
  }

  /**
   * Get driveShoe
   * @return driveShoe
   */
  @javax.annotation.Nullable
  public Boolean getDriveShoe() {
    return driveShoe;
  }

  public void setDriveShoe(Boolean driveShoe) {
    this.driveShoe = driveShoe;
  }


  public Casing end(BigDecimal end) {
    this.end = end;
    return this;
  }

  /**
   * Get end
   * @return end
   */
  @javax.annotation.Nonnull
  public BigDecimal getEnd() {
    return end;
  }

  public void setEnd(BigDecimal end) {
    this.end = end;
  }


  public Casing start(BigDecimal start) {
    this.start = start;
    return this;
  }

  /**
   * Get start
   * @return start
   */
  @javax.annotation.Nonnull
  public BigDecimal getStart() {
    return start;
  }

  public void setStart(BigDecimal start) {
    this.start = start;
  }


  public Casing wallThickness(BigDecimal wallThickness) {
    this.wallThickness = wallThickness;
    return this;
  }

  /**
   * Get wallThickness
   * @return wallThickness
   */
  @javax.annotation.Nullable
  public BigDecimal getWallThickness() {
    return wallThickness;
  }

  public void setWallThickness(BigDecimal wallThickness) {
    this.wallThickness = wallThickness;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Casing casing = (Casing) o;
    return Objects.equals(this.casingCode, casing.casingCode) &&
        Objects.equals(this.casingMaterial, casing.casingMaterial) &&
        Objects.equals(this.diameter, casing.diameter) &&
        Objects.equals(this.driveShoe, casing.driveShoe) &&
        Objects.equals(this.end, casing.end) &&
        Objects.equals(this.start, casing.start) &&
        Objects.equals(this.wallThickness, casing.wallThickness);
  }

  @Override
  public int hashCode() {
    return Objects.hash(casingCode, casingMaterial, diameter, driveShoe, end, start, wallThickness);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Casing {\n");
    sb.append("    casingCode: ").append(toIndentedString(casingCode)).append("\n");
    sb.append("    casingMaterial: ").append(toIndentedString(casingMaterial)).append("\n");
    sb.append("    diameter: ").append(toIndentedString(diameter)).append("\n");
    sb.append("    driveShoe: ").append(toIndentedString(driveShoe)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    wallThickness: ").append(toIndentedString(wallThickness)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("casing_code");
    openapiFields.add("casing_material");
    openapiFields.add("diameter");
    openapiFields.add("drive_shoe");
    openapiFields.add("end");
    openapiFields.add("start");
    openapiFields.add("wall_thickness");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("diameter");
    openapiRequiredFields.add("end");
    openapiRequiredFields.add("start");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Casing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Casing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Casing is not found in the empty JSON string", Casing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Casing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Casing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Casing.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("casing_code") != null && !jsonObj.get("casing_code").isJsonNull()) && !jsonObj.get("casing_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `casing_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("casing_code").toString()));
      }
      if ((jsonObj.get("casing_material") != null && !jsonObj.get("casing_material").isJsonNull()) && !jsonObj.get("casing_material").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `casing_material` to be a primitive type in the JSON string but got `%s`", jsonObj.get("casing_material").toString()));
      }
      if (!jsonObj.get("diameter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diameter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diameter").toString()));
      }
      if (!jsonObj.get("end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end").toString()));
      }
      if (!jsonObj.get("start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start").toString()));
      }
      if ((jsonObj.get("wall_thickness") != null && !jsonObj.get("wall_thickness").isJsonNull()) && !jsonObj.get("wall_thickness").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wall_thickness` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wall_thickness").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Casing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Casing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Casing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Casing.class));

       return (TypeAdapter<T>) new TypeAdapter<Casing>() {
           @Override
           public void write(JsonWriter out, Casing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Casing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Casing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Casing
   * @throws IOException if the JSON string is invalid with respect to Casing
   */
  public static Casing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Casing.class);
  }

  /**
   * Convert an instance of Casing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

