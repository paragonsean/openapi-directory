/*
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrganizationList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:23.471145-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrganizationList {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FAX_TEL = "fax_tel";
  @SerializedName(SERIALIZED_NAME_FAX_TEL)
  private String faxTel;

  public static final String SERIALIZED_NAME_MAIN_TEL = "main_tel";
  @SerializedName(SERIALIZED_NAME_MAIN_TEL)
  private String mainTel;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORG_GUID = "org_guid";
  @SerializedName(SERIALIZED_NAME_ORG_GUID)
  private UUID orgGuid;

  public static final String SERIALIZED_NAME_ORG_VERBOSE_NAME = "org_verbose_name";
  @SerializedName(SERIALIZED_NAME_ORG_VERBOSE_NAME)
  private String orgVerboseName;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_PROVINCE_STATE = "province_state";
  @SerializedName(SERIALIZED_NAME_PROVINCE_STATE)
  private String provinceState;

  public static final String SERIALIZED_NAME_STREET_ADDRESS = "street_address";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS)
  private String streetAddress;

  public static final String SERIALIZED_NAME_WEBSITE_URL = "website_url";
  @SerializedName(SERIALIZED_NAME_WEBSITE_URL)
  private URI websiteUrl;

  public OrganizationList() {
  }

  public OrganizationList(
     UUID orgGuid, 
     String orgVerboseName
  ) {
    this();
    this.orgGuid = orgGuid;
    this.orgVerboseName = orgVerboseName;
  }

  public OrganizationList city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public OrganizationList email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public OrganizationList faxTel(String faxTel) {
    this.faxTel = faxTel;
    return this;
  }

  /**
   * Get faxTel
   * @return faxTel
   */
  @javax.annotation.Nullable
  public String getFaxTel() {
    return faxTel;
  }

  public void setFaxTel(String faxTel) {
    this.faxTel = faxTel;
  }


  public OrganizationList mainTel(String mainTel) {
    this.mainTel = mainTel;
    return this;
  }

  /**
   * Get mainTel
   * @return mainTel
   */
  @javax.annotation.Nullable
  public String getMainTel() {
    return mainTel;
  }

  public void setMainTel(String mainTel) {
    this.mainTel = mainTel;
  }


  public OrganizationList name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Get orgGuid
   * @return orgGuid
   */
  @javax.annotation.Nullable
  public UUID getOrgGuid() {
    return orgGuid;
  }



  /**
   * Get orgVerboseName
   * @return orgVerboseName
   */
  @javax.annotation.Nullable
  public String getOrgVerboseName() {
    return orgVerboseName;
  }



  public OrganizationList postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Get postalCode
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public OrganizationList provinceState(String provinceState) {
    this.provinceState = provinceState;
    return this;
  }

  /**
   * Get provinceState
   * @return provinceState
   */
  @javax.annotation.Nonnull
  public String getProvinceState() {
    return provinceState;
  }

  public void setProvinceState(String provinceState) {
    this.provinceState = provinceState;
  }


  public OrganizationList streetAddress(String streetAddress) {
    this.streetAddress = streetAddress;
    return this;
  }

  /**
   * Get streetAddress
   * @return streetAddress
   */
  @javax.annotation.Nullable
  public String getStreetAddress() {
    return streetAddress;
  }

  public void setStreetAddress(String streetAddress) {
    this.streetAddress = streetAddress;
  }


  public OrganizationList websiteUrl(URI websiteUrl) {
    this.websiteUrl = websiteUrl;
    return this;
  }

  /**
   * Get websiteUrl
   * @return websiteUrl
   */
  @javax.annotation.Nullable
  public URI getWebsiteUrl() {
    return websiteUrl;
  }

  public void setWebsiteUrl(URI websiteUrl) {
    this.websiteUrl = websiteUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganizationList organizationList = (OrganizationList) o;
    return Objects.equals(this.city, organizationList.city) &&
        Objects.equals(this.email, organizationList.email) &&
        Objects.equals(this.faxTel, organizationList.faxTel) &&
        Objects.equals(this.mainTel, organizationList.mainTel) &&
        Objects.equals(this.name, organizationList.name) &&
        Objects.equals(this.orgGuid, organizationList.orgGuid) &&
        Objects.equals(this.orgVerboseName, organizationList.orgVerboseName) &&
        Objects.equals(this.postalCode, organizationList.postalCode) &&
        Objects.equals(this.provinceState, organizationList.provinceState) &&
        Objects.equals(this.streetAddress, organizationList.streetAddress) &&
        Objects.equals(this.websiteUrl, organizationList.websiteUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, email, faxTel, mainTel, name, orgGuid, orgVerboseName, postalCode, provinceState, streetAddress, websiteUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganizationList {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    faxTel: ").append(toIndentedString(faxTel)).append("\n");
    sb.append("    mainTel: ").append(toIndentedString(mainTel)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orgGuid: ").append(toIndentedString(orgGuid)).append("\n");
    sb.append("    orgVerboseName: ").append(toIndentedString(orgVerboseName)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    provinceState: ").append(toIndentedString(provinceState)).append("\n");
    sb.append("    streetAddress: ").append(toIndentedString(streetAddress)).append("\n");
    sb.append("    websiteUrl: ").append(toIndentedString(websiteUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("email");
    openapiFields.add("fax_tel");
    openapiFields.add("main_tel");
    openapiFields.add("name");
    openapiFields.add("org_guid");
    openapiFields.add("org_verbose_name");
    openapiFields.add("postal_code");
    openapiFields.add("province_state");
    openapiFields.add("street_address");
    openapiFields.add("website_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("province_state");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrganizationList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrganizationList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrganizationList is not found in the empty JSON string", OrganizationList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrganizationList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrganizationList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrganizationList.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("fax_tel") != null && !jsonObj.get("fax_tel").isJsonNull()) && !jsonObj.get("fax_tel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fax_tel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fax_tel").toString()));
      }
      if ((jsonObj.get("main_tel") != null && !jsonObj.get("main_tel").isJsonNull()) && !jsonObj.get("main_tel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `main_tel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("main_tel").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("org_guid") != null && !jsonObj.get("org_guid").isJsonNull()) && !jsonObj.get("org_guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_guid").toString()));
      }
      if ((jsonObj.get("org_verbose_name") != null && !jsonObj.get("org_verbose_name").isJsonNull()) && !jsonObj.get("org_verbose_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_verbose_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_verbose_name").toString()));
      }
      if ((jsonObj.get("postal_code") != null && !jsonObj.get("postal_code").isJsonNull()) && !jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if (!jsonObj.get("province_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `province_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("province_state").toString()));
      }
      if ((jsonObj.get("street_address") != null && !jsonObj.get("street_address").isJsonNull()) && !jsonObj.get("street_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street_address").toString()));
      }
      if ((jsonObj.get("website_url") != null && !jsonObj.get("website_url").isJsonNull()) && !jsonObj.get("website_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrganizationList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrganizationList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrganizationList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrganizationList.class));

       return (TypeAdapter<T>) new TypeAdapter<OrganizationList>() {
           @Override
           public void write(JsonWriter out, OrganizationList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrganizationList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrganizationList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrganizationList
   * @throws IOException if the JSON string is invalid with respect to OrganizationList
   */
  public static OrganizationList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrganizationList.class);
  }

  /**
   * Convert an instance of OrganizationList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

