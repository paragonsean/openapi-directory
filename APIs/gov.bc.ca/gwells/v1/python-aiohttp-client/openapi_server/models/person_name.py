# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.registrations_number import RegistrationsNumber
from openapi_server import util


class PersonName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, person_guid: str=None, registrations: List[RegistrationsNumber]=None):
        """PersonName - a model defined in OpenAPI

        :param name: The name of this PersonName.
        :param person_guid: The person_guid of this PersonName.
        :param registrations: The registrations of this PersonName.
        """
        self.openapi_types = {
            'name': str,
            'person_guid': str,
            'registrations': List[RegistrationsNumber]
        }

        self.attribute_map = {
            'name': 'name',
            'person_guid': 'person_guid',
            'registrations': 'registrations'
        }

        self._name = name
        self._person_guid = person_guid
        self._registrations = registrations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonName':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonName of this PersonName.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PersonName.


        :return: The name of this PersonName.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PersonName.


        :param name: The name of this PersonName.
        :type name: str
        """

        self._name = name

    @property
    def person_guid(self):
        """Gets the person_guid of this PersonName.


        :return: The person_guid of this PersonName.
        :rtype: str
        """
        return self._person_guid

    @person_guid.setter
    def person_guid(self, person_guid):
        """Sets the person_guid of this PersonName.


        :param person_guid: The person_guid of this PersonName.
        :type person_guid: str
        """

        self._person_guid = person_guid

    @property
    def registrations(self):
        """Gets the registrations of this PersonName.


        :return: The registrations of this PersonName.
        :rtype: List[RegistrationsNumber]
        """
        return self._registrations

    @registrations.setter
    def registrations(self, registrations):
        """Sets the registrations of this PersonName.


        :param registrations: The registrations of this PersonName.
        :type registrations: List[RegistrationsNumber]
        """

        self._registrations = registrations
