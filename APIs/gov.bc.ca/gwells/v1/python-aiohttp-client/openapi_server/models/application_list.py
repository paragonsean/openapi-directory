# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_status_code import ApplicationStatusCode
from openapi_server.models.qualification import Qualification
from openapi_server.models.subactivity import Subactivity
from openapi_server import util


class ApplicationList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert_authority: str=None, certificate: str=None, current_status: ApplicationStatusCode=None, display_status: str=None, qualifications: List[Qualification]=None, removal_date: date=None, subactivity: Subactivity=None):
        """ApplicationList - a model defined in OpenAPI

        :param cert_authority: The cert_authority of this ApplicationList.
        :param certificate: The certificate of this ApplicationList.
        :param current_status: The current_status of this ApplicationList.
        :param display_status: The display_status of this ApplicationList.
        :param qualifications: The qualifications of this ApplicationList.
        :param removal_date: The removal_date of this ApplicationList.
        :param subactivity: The subactivity of this ApplicationList.
        """
        self.openapi_types = {
            'cert_authority': str,
            'certificate': str,
            'current_status': ApplicationStatusCode,
            'display_status': str,
            'qualifications': List[Qualification],
            'removal_date': date,
            'subactivity': Subactivity
        }

        self.attribute_map = {
            'cert_authority': 'cert_authority',
            'certificate': 'certificate',
            'current_status': 'current_status',
            'display_status': 'display_status',
            'qualifications': 'qualifications',
            'removal_date': 'removal_date',
            'subactivity': 'subactivity'
        }

        self._cert_authority = cert_authority
        self._certificate = certificate
        self._current_status = current_status
        self._display_status = display_status
        self._qualifications = qualifications
        self._removal_date = removal_date
        self._subactivity = subactivity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationList of this ApplicationList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert_authority(self):
        """Gets the cert_authority of this ApplicationList.


        :return: The cert_authority of this ApplicationList.
        :rtype: str
        """
        return self._cert_authority

    @cert_authority.setter
    def cert_authority(self, cert_authority):
        """Sets the cert_authority of this ApplicationList.


        :param cert_authority: The cert_authority of this ApplicationList.
        :type cert_authority: str
        """

        self._cert_authority = cert_authority

    @property
    def certificate(self):
        """Gets the certificate of this ApplicationList.


        :return: The certificate of this ApplicationList.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this ApplicationList.


        :param certificate: The certificate of this ApplicationList.
        :type certificate: str
        """

        self._certificate = certificate

    @property
    def current_status(self):
        """Gets the current_status of this ApplicationList.


        :return: The current_status of this ApplicationList.
        :rtype: ApplicationStatusCode
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """Sets the current_status of this ApplicationList.


        :param current_status: The current_status of this ApplicationList.
        :type current_status: ApplicationStatusCode
        """

        self._current_status = current_status

    @property
    def display_status(self):
        """Gets the display_status of this ApplicationList.


        :return: The display_status of this ApplicationList.
        :rtype: str
        """
        return self._display_status

    @display_status.setter
    def display_status(self, display_status):
        """Sets the display_status of this ApplicationList.


        :param display_status: The display_status of this ApplicationList.
        :type display_status: str
        """

        self._display_status = display_status

    @property
    def qualifications(self):
        """Gets the qualifications of this ApplicationList.


        :return: The qualifications of this ApplicationList.
        :rtype: List[Qualification]
        """
        return self._qualifications

    @qualifications.setter
    def qualifications(self, qualifications):
        """Sets the qualifications of this ApplicationList.


        :param qualifications: The qualifications of this ApplicationList.
        :type qualifications: List[Qualification]
        """

        self._qualifications = qualifications

    @property
    def removal_date(self):
        """Gets the removal_date of this ApplicationList.


        :return: The removal_date of this ApplicationList.
        :rtype: date
        """
        return self._removal_date

    @removal_date.setter
    def removal_date(self, removal_date):
        """Sets the removal_date of this ApplicationList.


        :param removal_date: The removal_date of this ApplicationList.
        :type removal_date: date
        """

        self._removal_date = removal_date

    @property
    def subactivity(self):
        """Gets the subactivity of this ApplicationList.


        :return: The subactivity of this ApplicationList.
        :rtype: Subactivity
        """
        return self._subactivity

    @subactivity.setter
    def subactivity(self, subactivity):
        """Sets the subactivity of this ApplicationList.


        :param subactivity: The subactivity of this ApplicationList.
        :type subactivity: Subactivity
        """
        if subactivity is None:
            raise ValueError("Invalid value for `subactivity`, must not be `None`")

        self._subactivity = subactivity
