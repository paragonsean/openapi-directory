# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Screen(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assembly_type: str=None, end: str=None, internal_diameter: str=None, slot_size: str=None, start: str=None):
        """Screen - a model defined in OpenAPI

        :param assembly_type: The assembly_type of this Screen.
        :param end: The end of this Screen.
        :param internal_diameter: The internal_diameter of this Screen.
        :param slot_size: The slot_size of this Screen.
        :param start: The start of this Screen.
        """
        self.openapi_types = {
            'assembly_type': str,
            'end': str,
            'internal_diameter': str,
            'slot_size': str,
            'start': str
        }

        self.attribute_map = {
            'assembly_type': 'assembly_type',
            'end': 'end',
            'internal_diameter': 'internal_diameter',
            'slot_size': 'slot_size',
            'start': 'start'
        }

        self._assembly_type = assembly_type
        self._end = end
        self._internal_diameter = internal_diameter
        self._slot_size = slot_size
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Screen':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Screen of this Screen.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assembly_type(self):
        """Gets the assembly_type of this Screen.


        :return: The assembly_type of this Screen.
        :rtype: str
        """
        return self._assembly_type

    @assembly_type.setter
    def assembly_type(self, assembly_type):
        """Sets the assembly_type of this Screen.


        :param assembly_type: The assembly_type of this Screen.
        :type assembly_type: str
        """
        if assembly_type is None:
            raise ValueError("Invalid value for `assembly_type`, must not be `None`")

        self._assembly_type = assembly_type

    @property
    def end(self):
        """Gets the end of this Screen.


        :return: The end of this Screen.
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Screen.


        :param end: The end of this Screen.
        :type end: str
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")

        self._end = end

    @property
    def internal_diameter(self):
        """Gets the internal_diameter of this Screen.


        :return: The internal_diameter of this Screen.
        :rtype: str
        """
        return self._internal_diameter

    @internal_diameter.setter
    def internal_diameter(self, internal_diameter):
        """Sets the internal_diameter of this Screen.


        :param internal_diameter: The internal_diameter of this Screen.
        :type internal_diameter: str
        """

        self._internal_diameter = internal_diameter

    @property
    def slot_size(self):
        """Gets the slot_size of this Screen.


        :return: The slot_size of this Screen.
        :rtype: str
        """
        return self._slot_size

    @slot_size.setter
    def slot_size(self, slot_size):
        """Sets the slot_size of this Screen.


        :param slot_size: The slot_size of this Screen.
        :type slot_size: str
        """

        self._slot_size = slot_size

    @property
    def start(self):
        """Gets the start of this Screen.


        :return: The start of this Screen.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Screen.


        :param start: The start of this Screen.
        :type start: str
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")

        self._start = start
