# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrganizationList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, email: str=None, fax_tel: str=None, main_tel: str=None, name: str=None, org_guid: str=None, org_verbose_name: str=None, postal_code: str=None, province_state: str=None, street_address: str=None, website_url: str=None):
        """OrganizationList - a model defined in OpenAPI

        :param city: The city of this OrganizationList.
        :param email: The email of this OrganizationList.
        :param fax_tel: The fax_tel of this OrganizationList.
        :param main_tel: The main_tel of this OrganizationList.
        :param name: The name of this OrganizationList.
        :param org_guid: The org_guid of this OrganizationList.
        :param org_verbose_name: The org_verbose_name of this OrganizationList.
        :param postal_code: The postal_code of this OrganizationList.
        :param province_state: The province_state of this OrganizationList.
        :param street_address: The street_address of this OrganizationList.
        :param website_url: The website_url of this OrganizationList.
        """
        self.openapi_types = {
            'city': str,
            'email': str,
            'fax_tel': str,
            'main_tel': str,
            'name': str,
            'org_guid': str,
            'org_verbose_name': str,
            'postal_code': str,
            'province_state': str,
            'street_address': str,
            'website_url': str
        }

        self.attribute_map = {
            'city': 'city',
            'email': 'email',
            'fax_tel': 'fax_tel',
            'main_tel': 'main_tel',
            'name': 'name',
            'org_guid': 'org_guid',
            'org_verbose_name': 'org_verbose_name',
            'postal_code': 'postal_code',
            'province_state': 'province_state',
            'street_address': 'street_address',
            'website_url': 'website_url'
        }

        self._city = city
        self._email = email
        self._fax_tel = fax_tel
        self._main_tel = main_tel
        self._name = name
        self._org_guid = org_guid
        self._org_verbose_name = org_verbose_name
        self._postal_code = postal_code
        self._province_state = province_state
        self._street_address = street_address
        self._website_url = website_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizationList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrganizationList of this OrganizationList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this OrganizationList.


        :return: The city of this OrganizationList.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this OrganizationList.


        :param city: The city of this OrganizationList.
        :type city: str
        """
        if city is not None and len(city) > 50:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `50`")

        self._city = city

    @property
    def email(self):
        """Gets the email of this OrganizationList.


        :return: The email of this OrganizationList.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OrganizationList.


        :param email: The email of this OrganizationList.
        :type email: str
        """
        if email is not None and len(email) > 254:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `254`")

        self._email = email

    @property
    def fax_tel(self):
        """Gets the fax_tel of this OrganizationList.


        :return: The fax_tel of this OrganizationList.
        :rtype: str
        """
        return self._fax_tel

    @fax_tel.setter
    def fax_tel(self, fax_tel):
        """Sets the fax_tel of this OrganizationList.


        :param fax_tel: The fax_tel of this OrganizationList.
        :type fax_tel: str
        """
        if fax_tel is not None and len(fax_tel) > 15:
            raise ValueError("Invalid value for `fax_tel`, length must be less than or equal to `15`")

        self._fax_tel = fax_tel

    @property
    def main_tel(self):
        """Gets the main_tel of this OrganizationList.


        :return: The main_tel of this OrganizationList.
        :rtype: str
        """
        return self._main_tel

    @main_tel.setter
    def main_tel(self, main_tel):
        """Sets the main_tel of this OrganizationList.


        :param main_tel: The main_tel of this OrganizationList.
        :type main_tel: str
        """
        if main_tel is not None and len(main_tel) > 15:
            raise ValueError("Invalid value for `main_tel`, length must be less than or equal to `15`")

        self._main_tel = main_tel

    @property
    def name(self):
        """Gets the name of this OrganizationList.


        :return: The name of this OrganizationList.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationList.


        :param name: The name of this OrganizationList.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 200:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")

        self._name = name

    @property
    def org_guid(self):
        """Gets the org_guid of this OrganizationList.


        :return: The org_guid of this OrganizationList.
        :rtype: str
        """
        return self._org_guid

    @org_guid.setter
    def org_guid(self, org_guid):
        """Sets the org_guid of this OrganizationList.


        :param org_guid: The org_guid of this OrganizationList.
        :type org_guid: str
        """

        self._org_guid = org_guid

    @property
    def org_verbose_name(self):
        """Gets the org_verbose_name of this OrganizationList.


        :return: The org_verbose_name of this OrganizationList.
        :rtype: str
        """
        return self._org_verbose_name

    @org_verbose_name.setter
    def org_verbose_name(self, org_verbose_name):
        """Sets the org_verbose_name of this OrganizationList.


        :param org_verbose_name: The org_verbose_name of this OrganizationList.
        :type org_verbose_name: str
        """

        self._org_verbose_name = org_verbose_name

    @property
    def postal_code(self):
        """Gets the postal_code of this OrganizationList.


        :return: The postal_code of this OrganizationList.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this OrganizationList.


        :param postal_code: The postal_code of this OrganizationList.
        :type postal_code: str
        """
        if postal_code is not None and len(postal_code) > 10:
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `10`")

        self._postal_code = postal_code

    @property
    def province_state(self):
        """Gets the province_state of this OrganizationList.


        :return: The province_state of this OrganizationList.
        :rtype: str
        """
        return self._province_state

    @province_state.setter
    def province_state(self, province_state):
        """Sets the province_state of this OrganizationList.


        :param province_state: The province_state of this OrganizationList.
        :type province_state: str
        """
        if province_state is None:
            raise ValueError("Invalid value for `province_state`, must not be `None`")

        self._province_state = province_state

    @property
    def street_address(self):
        """Gets the street_address of this OrganizationList.


        :return: The street_address of this OrganizationList.
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this OrganizationList.


        :param street_address: The street_address of this OrganizationList.
        :type street_address: str
        """
        if street_address is not None and len(street_address) > 100:
            raise ValueError("Invalid value for `street_address`, length must be less than or equal to `100`")

        self._street_address = street_address

    @property
    def website_url(self):
        """Gets the website_url of this OrganizationList.


        :return: The website_url of this OrganizationList.
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """Sets the website_url of this OrganizationList.


        :param website_url: The website_url of this OrganizationList.
        :type website_url: str
        """
        if website_url is not None and len(website_url) > 200:
            raise ValueError("Invalid value for `website_url`, length must be less than or equal to `200`")

        self._website_url = website_url
