# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrganizationNameList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, org_guid: str=None, org_verbose_name: str=None):
        """OrganizationNameList - a model defined in OpenAPI

        :param name: The name of this OrganizationNameList.
        :param org_guid: The org_guid of this OrganizationNameList.
        :param org_verbose_name: The org_verbose_name of this OrganizationNameList.
        """
        self.openapi_types = {
            'name': str,
            'org_guid': str,
            'org_verbose_name': str
        }

        self.attribute_map = {
            'name': 'name',
            'org_guid': 'org_guid',
            'org_verbose_name': 'org_verbose_name'
        }

        self._name = name
        self._org_guid = org_guid
        self._org_verbose_name = org_verbose_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizationNameList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrganizationNameList of this OrganizationNameList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this OrganizationNameList.


        :return: The name of this OrganizationNameList.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationNameList.


        :param name: The name of this OrganizationNameList.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 200:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")

        self._name = name

    @property
    def org_guid(self):
        """Gets the org_guid of this OrganizationNameList.


        :return: The org_guid of this OrganizationNameList.
        :rtype: str
        """
        return self._org_guid

    @org_guid.setter
    def org_guid(self, org_guid):
        """Sets the org_guid of this OrganizationNameList.


        :param org_guid: The org_guid of this OrganizationNameList.
        :type org_guid: str
        """

        self._org_guid = org_guid

    @property
    def org_verbose_name(self):
        """Gets the org_verbose_name of this OrganizationNameList.


        :return: The org_verbose_name of this OrganizationNameList.
        :rtype: str
        """
        return self._org_verbose_name

    @org_verbose_name.setter
    def org_verbose_name(self, org_verbose_name):
        """Sets the org_verbose_name of this OrganizationNameList.


        :param org_verbose_name: The org_verbose_name of this OrganizationNameList.
        :type org_verbose_name: str
        """

        self._org_verbose_name = org_verbose_name
