# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.registrations_list import RegistrationsList
from openapi_server import util


class PersonList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_cell: str=None, contact_email: str=None, contact_tel: str=None, first_name: str=None, person_guid: str=None, registrations: List[RegistrationsList]=None, surname: str=None):
        """PersonList - a model defined in OpenAPI

        :param contact_cell: The contact_cell of this PersonList.
        :param contact_email: The contact_email of this PersonList.
        :param contact_tel: The contact_tel of this PersonList.
        :param first_name: The first_name of this PersonList.
        :param person_guid: The person_guid of this PersonList.
        :param registrations: The registrations of this PersonList.
        :param surname: The surname of this PersonList.
        """
        self.openapi_types = {
            'contact_cell': str,
            'contact_email': str,
            'contact_tel': str,
            'first_name': str,
            'person_guid': str,
            'registrations': List[RegistrationsList],
            'surname': str
        }

        self.attribute_map = {
            'contact_cell': 'contact_cell',
            'contact_email': 'contact_email',
            'contact_tel': 'contact_tel',
            'first_name': 'first_name',
            'person_guid': 'person_guid',
            'registrations': 'registrations',
            'surname': 'surname'
        }

        self._contact_cell = contact_cell
        self._contact_email = contact_email
        self._contact_tel = contact_tel
        self._first_name = first_name
        self._person_guid = person_guid
        self._registrations = registrations
        self._surname = surname

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonList of this PersonList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_cell(self):
        """Gets the contact_cell of this PersonList.


        :return: The contact_cell of this PersonList.
        :rtype: str
        """
        return self._contact_cell

    @contact_cell.setter
    def contact_cell(self, contact_cell):
        """Sets the contact_cell of this PersonList.


        :param contact_cell: The contact_cell of this PersonList.
        :type contact_cell: str
        """
        if contact_cell is not None and len(contact_cell) > 15:
            raise ValueError("Invalid value for `contact_cell`, length must be less than or equal to `15`")

        self._contact_cell = contact_cell

    @property
    def contact_email(self):
        """Gets the contact_email of this PersonList.


        :return: The contact_email of this PersonList.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this PersonList.


        :param contact_email: The contact_email of this PersonList.
        :type contact_email: str
        """
        if contact_email is not None and len(contact_email) > 254:
            raise ValueError("Invalid value for `contact_email`, length must be less than or equal to `254`")

        self._contact_email = contact_email

    @property
    def contact_tel(self):
        """Gets the contact_tel of this PersonList.


        :return: The contact_tel of this PersonList.
        :rtype: str
        """
        return self._contact_tel

    @contact_tel.setter
    def contact_tel(self, contact_tel):
        """Sets the contact_tel of this PersonList.


        :param contact_tel: The contact_tel of this PersonList.
        :type contact_tel: str
        """
        if contact_tel is not None and len(contact_tel) > 15:
            raise ValueError("Invalid value for `contact_tel`, length must be less than or equal to `15`")

        self._contact_tel = contact_tel

    @property
    def first_name(self):
        """Gets the first_name of this PersonList.


        :return: The first_name of this PersonList.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this PersonList.


        :param first_name: The first_name of this PersonList.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")
        if first_name is not None and len(first_name) > 100:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `100`")

        self._first_name = first_name

    @property
    def person_guid(self):
        """Gets the person_guid of this PersonList.


        :return: The person_guid of this PersonList.
        :rtype: str
        """
        return self._person_guid

    @person_guid.setter
    def person_guid(self, person_guid):
        """Sets the person_guid of this PersonList.


        :param person_guid: The person_guid of this PersonList.
        :type person_guid: str
        """

        self._person_guid = person_guid

    @property
    def registrations(self):
        """Gets the registrations of this PersonList.


        :return: The registrations of this PersonList.
        :rtype: List[RegistrationsList]
        """
        return self._registrations

    @registrations.setter
    def registrations(self, registrations):
        """Sets the registrations of this PersonList.


        :param registrations: The registrations of this PersonList.
        :type registrations: List[RegistrationsList]
        """

        self._registrations = registrations

    @property
    def surname(self):
        """Gets the surname of this PersonList.


        :return: The surname of this PersonList.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this PersonList.


        :param surname: The surname of this PersonList.
        :type surname: str
        """
        if surname is None:
            raise ValueError("Invalid value for `surname`, must not be `None`")
        if surname is not None and len(surname) > 100:
            raise ValueError("Invalid value for `surname`, length must be less than or equal to `100`")

        self._surname = surname
