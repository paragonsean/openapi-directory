# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Aquifer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aquifer_id: int=None, aquifer_name: str=None, area: str=None, demand: str=None, demand_description: str=None, known_water_use: str=None, known_water_use_description: str=None, litho_stratographic_unit: str=None, location_description: str=None, mapping_year: int=None, material: str=None, material_description: str=None, notes: str=None, productivity: str=None, productivity_description: str=None, quality_concern: str=None, quality_concern_description: str=None, subtype: str=None, subtype_description: str=None, vulnerability: str=None, vulnerability_description: str=None):
        """Aquifer - a model defined in OpenAPI

        :param aquifer_id: The aquifer_id of this Aquifer.
        :param aquifer_name: The aquifer_name of this Aquifer.
        :param area: The area of this Aquifer.
        :param demand: The demand of this Aquifer.
        :param demand_description: The demand_description of this Aquifer.
        :param known_water_use: The known_water_use of this Aquifer.
        :param known_water_use_description: The known_water_use_description of this Aquifer.
        :param litho_stratographic_unit: The litho_stratographic_unit of this Aquifer.
        :param location_description: The location_description of this Aquifer.
        :param mapping_year: The mapping_year of this Aquifer.
        :param material: The material of this Aquifer.
        :param material_description: The material_description of this Aquifer.
        :param notes: The notes of this Aquifer.
        :param productivity: The productivity of this Aquifer.
        :param productivity_description: The productivity_description of this Aquifer.
        :param quality_concern: The quality_concern of this Aquifer.
        :param quality_concern_description: The quality_concern_description of this Aquifer.
        :param subtype: The subtype of this Aquifer.
        :param subtype_description: The subtype_description of this Aquifer.
        :param vulnerability: The vulnerability of this Aquifer.
        :param vulnerability_description: The vulnerability_description of this Aquifer.
        """
        self.openapi_types = {
            'aquifer_id': int,
            'aquifer_name': str,
            'area': str,
            'demand': str,
            'demand_description': str,
            'known_water_use': str,
            'known_water_use_description': str,
            'litho_stratographic_unit': str,
            'location_description': str,
            'mapping_year': int,
            'material': str,
            'material_description': str,
            'notes': str,
            'productivity': str,
            'productivity_description': str,
            'quality_concern': str,
            'quality_concern_description': str,
            'subtype': str,
            'subtype_description': str,
            'vulnerability': str,
            'vulnerability_description': str
        }

        self.attribute_map = {
            'aquifer_id': 'aquifer_id',
            'aquifer_name': 'aquifer_name',
            'area': 'area',
            'demand': 'demand',
            'demand_description': 'demand_description',
            'known_water_use': 'known_water_use',
            'known_water_use_description': 'known_water_use_description',
            'litho_stratographic_unit': 'litho_stratographic_unit',
            'location_description': 'location_description',
            'mapping_year': 'mapping_year',
            'material': 'material',
            'material_description': 'material_description',
            'notes': 'notes',
            'productivity': 'productivity',
            'productivity_description': 'productivity_description',
            'quality_concern': 'quality_concern',
            'quality_concern_description': 'quality_concern_description',
            'subtype': 'subtype',
            'subtype_description': 'subtype_description',
            'vulnerability': 'vulnerability',
            'vulnerability_description': 'vulnerability_description'
        }

        self._aquifer_id = aquifer_id
        self._aquifer_name = aquifer_name
        self._area = area
        self._demand = demand
        self._demand_description = demand_description
        self._known_water_use = known_water_use
        self._known_water_use_description = known_water_use_description
        self._litho_stratographic_unit = litho_stratographic_unit
        self._location_description = location_description
        self._mapping_year = mapping_year
        self._material = material
        self._material_description = material_description
        self._notes = notes
        self._productivity = productivity
        self._productivity_description = productivity_description
        self._quality_concern = quality_concern
        self._quality_concern_description = quality_concern_description
        self._subtype = subtype
        self._subtype_description = subtype_description
        self._vulnerability = vulnerability
        self._vulnerability_description = vulnerability_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Aquifer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Aquifer of this Aquifer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aquifer_id(self):
        """Gets the aquifer_id of this Aquifer.


        :return: The aquifer_id of this Aquifer.
        :rtype: int
        """
        return self._aquifer_id

    @aquifer_id.setter
    def aquifer_id(self, aquifer_id):
        """Sets the aquifer_id of this Aquifer.


        :param aquifer_id: The aquifer_id of this Aquifer.
        :type aquifer_id: int
        """

        self._aquifer_id = aquifer_id

    @property
    def aquifer_name(self):
        """Gets the aquifer_name of this Aquifer.


        :return: The aquifer_name of this Aquifer.
        :rtype: str
        """
        return self._aquifer_name

    @aquifer_name.setter
    def aquifer_name(self, aquifer_name):
        """Sets the aquifer_name of this Aquifer.


        :param aquifer_name: The aquifer_name of this Aquifer.
        :type aquifer_name: str
        """
        if aquifer_name is not None and len(aquifer_name) > 100:
            raise ValueError("Invalid value for `aquifer_name`, length must be less than or equal to `100`")

        self._aquifer_name = aquifer_name

    @property
    def area(self):
        """Gets the area of this Aquifer.


        :return: The area of this Aquifer.
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this Aquifer.


        :param area: The area of this Aquifer.
        :type area: str
        """

        self._area = area

    @property
    def demand(self):
        """Gets the demand of this Aquifer.


        :return: The demand of this Aquifer.
        :rtype: str
        """
        return self._demand

    @demand.setter
    def demand(self, demand):
        """Sets the demand of this Aquifer.


        :param demand: The demand of this Aquifer.
        :type demand: str
        """

        self._demand = demand

    @property
    def demand_description(self):
        """Gets the demand_description of this Aquifer.


        :return: The demand_description of this Aquifer.
        :rtype: str
        """
        return self._demand_description

    @demand_description.setter
    def demand_description(self, demand_description):
        """Sets the demand_description of this Aquifer.


        :param demand_description: The demand_description of this Aquifer.
        :type demand_description: str
        """

        self._demand_description = demand_description

    @property
    def known_water_use(self):
        """Gets the known_water_use of this Aquifer.


        :return: The known_water_use of this Aquifer.
        :rtype: str
        """
        return self._known_water_use

    @known_water_use.setter
    def known_water_use(self, known_water_use):
        """Sets the known_water_use of this Aquifer.


        :param known_water_use: The known_water_use of this Aquifer.
        :type known_water_use: str
        """

        self._known_water_use = known_water_use

    @property
    def known_water_use_description(self):
        """Gets the known_water_use_description of this Aquifer.


        :return: The known_water_use_description of this Aquifer.
        :rtype: str
        """
        return self._known_water_use_description

    @known_water_use_description.setter
    def known_water_use_description(self, known_water_use_description):
        """Sets the known_water_use_description of this Aquifer.


        :param known_water_use_description: The known_water_use_description of this Aquifer.
        :type known_water_use_description: str
        """

        self._known_water_use_description = known_water_use_description

    @property
    def litho_stratographic_unit(self):
        """Gets the litho_stratographic_unit of this Aquifer.


        :return: The litho_stratographic_unit of this Aquifer.
        :rtype: str
        """
        return self._litho_stratographic_unit

    @litho_stratographic_unit.setter
    def litho_stratographic_unit(self, litho_stratographic_unit):
        """Sets the litho_stratographic_unit of this Aquifer.


        :param litho_stratographic_unit: The litho_stratographic_unit of this Aquifer.
        :type litho_stratographic_unit: str
        """
        if litho_stratographic_unit is not None and len(litho_stratographic_unit) > 100:
            raise ValueError("Invalid value for `litho_stratographic_unit`, length must be less than or equal to `100`")

        self._litho_stratographic_unit = litho_stratographic_unit

    @property
    def location_description(self):
        """Gets the location_description of this Aquifer.


        :return: The location_description of this Aquifer.
        :rtype: str
        """
        return self._location_description

    @location_description.setter
    def location_description(self, location_description):
        """Sets the location_description of this Aquifer.


        :param location_description: The location_description of this Aquifer.
        :type location_description: str
        """
        if location_description is not None and len(location_description) > 100:
            raise ValueError("Invalid value for `location_description`, length must be less than or equal to `100`")

        self._location_description = location_description

    @property
    def mapping_year(self):
        """Gets the mapping_year of this Aquifer.

        Use the following format: 

        :return: The mapping_year of this Aquifer.
        :rtype: int
        """
        return self._mapping_year

    @mapping_year.setter
    def mapping_year(self, mapping_year):
        """Sets the mapping_year of this Aquifer.

        Use the following format: 

        :param mapping_year: The mapping_year of this Aquifer.
        :type mapping_year: int
        """
        if mapping_year is not None and mapping_year > 2019:
            raise ValueError("Invalid value for `mapping_year`, must be a value less than or equal to `2019`")
        if mapping_year is not None and mapping_year < 1990:
            raise ValueError("Invalid value for `mapping_year`, must be a value greater than or equal to `1990`")

        self._mapping_year = mapping_year

    @property
    def material(self):
        """Gets the material of this Aquifer.


        :return: The material of this Aquifer.
        :rtype: str
        """
        return self._material

    @material.setter
    def material(self, material):
        """Sets the material of this Aquifer.


        :param material: The material of this Aquifer.
        :type material: str
        """

        self._material = material

    @property
    def material_description(self):
        """Gets the material_description of this Aquifer.


        :return: The material_description of this Aquifer.
        :rtype: str
        """
        return self._material_description

    @material_description.setter
    def material_description(self, material_description):
        """Sets the material_description of this Aquifer.


        :param material_description: The material_description of this Aquifer.
        :type material_description: str
        """

        self._material_description = material_description

    @property
    def notes(self):
        """Gets the notes of this Aquifer.


        :return: The notes of this Aquifer.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Aquifer.


        :param notes: The notes of this Aquifer.
        :type notes: str
        """
        if notes is not None and len(notes) > 2000:
            raise ValueError("Invalid value for `notes`, length must be less than or equal to `2000`")

        self._notes = notes

    @property
    def productivity(self):
        """Gets the productivity of this Aquifer.


        :return: The productivity of this Aquifer.
        :rtype: str
        """
        return self._productivity

    @productivity.setter
    def productivity(self, productivity):
        """Sets the productivity of this Aquifer.


        :param productivity: The productivity of this Aquifer.
        :type productivity: str
        """

        self._productivity = productivity

    @property
    def productivity_description(self):
        """Gets the productivity_description of this Aquifer.


        :return: The productivity_description of this Aquifer.
        :rtype: str
        """
        return self._productivity_description

    @productivity_description.setter
    def productivity_description(self, productivity_description):
        """Sets the productivity_description of this Aquifer.


        :param productivity_description: The productivity_description of this Aquifer.
        :type productivity_description: str
        """

        self._productivity_description = productivity_description

    @property
    def quality_concern(self):
        """Gets the quality_concern of this Aquifer.


        :return: The quality_concern of this Aquifer.
        :rtype: str
        """
        return self._quality_concern

    @quality_concern.setter
    def quality_concern(self, quality_concern):
        """Sets the quality_concern of this Aquifer.


        :param quality_concern: The quality_concern of this Aquifer.
        :type quality_concern: str
        """

        self._quality_concern = quality_concern

    @property
    def quality_concern_description(self):
        """Gets the quality_concern_description of this Aquifer.


        :return: The quality_concern_description of this Aquifer.
        :rtype: str
        """
        return self._quality_concern_description

    @quality_concern_description.setter
    def quality_concern_description(self, quality_concern_description):
        """Sets the quality_concern_description of this Aquifer.


        :param quality_concern_description: The quality_concern_description of this Aquifer.
        :type quality_concern_description: str
        """

        self._quality_concern_description = quality_concern_description

    @property
    def subtype(self):
        """Gets the subtype of this Aquifer.


        :return: The subtype of this Aquifer.
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this Aquifer.


        :param subtype: The subtype of this Aquifer.
        :type subtype: str
        """

        self._subtype = subtype

    @property
    def subtype_description(self):
        """Gets the subtype_description of this Aquifer.


        :return: The subtype_description of this Aquifer.
        :rtype: str
        """
        return self._subtype_description

    @subtype_description.setter
    def subtype_description(self, subtype_description):
        """Sets the subtype_description of this Aquifer.


        :param subtype_description: The subtype_description of this Aquifer.
        :type subtype_description: str
        """

        self._subtype_description = subtype_description

    @property
    def vulnerability(self):
        """Gets the vulnerability of this Aquifer.


        :return: The vulnerability of this Aquifer.
        :rtype: str
        """
        return self._vulnerability

    @vulnerability.setter
    def vulnerability(self, vulnerability):
        """Sets the vulnerability of this Aquifer.


        :param vulnerability: The vulnerability of this Aquifer.
        :type vulnerability: str
        """

        self._vulnerability = vulnerability

    @property
    def vulnerability_description(self):
        """Gets the vulnerability_description of this Aquifer.


        :return: The vulnerability_description of this Aquifer.
        :rtype: str
        """
        return self._vulnerability_description

    @vulnerability_description.setter
    def vulnerability_description(self, vulnerability_description):
        """Sets the vulnerability_description of this Aquifer.


        :param vulnerability_description: The vulnerability_description of this Aquifer.
        :type vulnerability_description: str
        """

        self._vulnerability_description = vulnerability_description
