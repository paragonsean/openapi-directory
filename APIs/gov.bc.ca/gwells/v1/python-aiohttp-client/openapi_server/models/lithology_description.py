# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LithologyDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lithology_colour: str=None, lithology_from: str=None, lithology_hardness: str=None, lithology_moisture: str=None, lithology_raw_data: str=None, lithology_to: str=None, water_bearing_estimated_flow: str=None):
        """LithologyDescription - a model defined in OpenAPI

        :param lithology_colour: The lithology_colour of this LithologyDescription.
        :param lithology_from: The lithology_from of this LithologyDescription.
        :param lithology_hardness: The lithology_hardness of this LithologyDescription.
        :param lithology_moisture: The lithology_moisture of this LithologyDescription.
        :param lithology_raw_data: The lithology_raw_data of this LithologyDescription.
        :param lithology_to: The lithology_to of this LithologyDescription.
        :param water_bearing_estimated_flow: The water_bearing_estimated_flow of this LithologyDescription.
        """
        self.openapi_types = {
            'lithology_colour': str,
            'lithology_from': str,
            'lithology_hardness': str,
            'lithology_moisture': str,
            'lithology_raw_data': str,
            'lithology_to': str,
            'water_bearing_estimated_flow': str
        }

        self.attribute_map = {
            'lithology_colour': 'lithology_colour',
            'lithology_from': 'lithology_from',
            'lithology_hardness': 'lithology_hardness',
            'lithology_moisture': 'lithology_moisture',
            'lithology_raw_data': 'lithology_raw_data',
            'lithology_to': 'lithology_to',
            'water_bearing_estimated_flow': 'water_bearing_estimated_flow'
        }

        self._lithology_colour = lithology_colour
        self._lithology_from = lithology_from
        self._lithology_hardness = lithology_hardness
        self._lithology_moisture = lithology_moisture
        self._lithology_raw_data = lithology_raw_data
        self._lithology_to = lithology_to
        self._water_bearing_estimated_flow = water_bearing_estimated_flow

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LithologyDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LithologyDescription of this LithologyDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lithology_colour(self):
        """Gets the lithology_colour of this LithologyDescription.


        :return: The lithology_colour of this LithologyDescription.
        :rtype: str
        """
        return self._lithology_colour

    @lithology_colour.setter
    def lithology_colour(self, lithology_colour):
        """Sets the lithology_colour of this LithologyDescription.


        :param lithology_colour: The lithology_colour of this LithologyDescription.
        :type lithology_colour: str
        """

        self._lithology_colour = lithology_colour

    @property
    def lithology_from(self):
        """Gets the lithology_from of this LithologyDescription.


        :return: The lithology_from of this LithologyDescription.
        :rtype: str
        """
        return self._lithology_from

    @lithology_from.setter
    def lithology_from(self, lithology_from):
        """Sets the lithology_from of this LithologyDescription.


        :param lithology_from: The lithology_from of this LithologyDescription.
        :type lithology_from: str
        """

        self._lithology_from = lithology_from

    @property
    def lithology_hardness(self):
        """Gets the lithology_hardness of this LithologyDescription.


        :return: The lithology_hardness of this LithologyDescription.
        :rtype: str
        """
        return self._lithology_hardness

    @lithology_hardness.setter
    def lithology_hardness(self, lithology_hardness):
        """Sets the lithology_hardness of this LithologyDescription.


        :param lithology_hardness: The lithology_hardness of this LithologyDescription.
        :type lithology_hardness: str
        """

        self._lithology_hardness = lithology_hardness

    @property
    def lithology_moisture(self):
        """Gets the lithology_moisture of this LithologyDescription.


        :return: The lithology_moisture of this LithologyDescription.
        :rtype: str
        """
        return self._lithology_moisture

    @lithology_moisture.setter
    def lithology_moisture(self, lithology_moisture):
        """Sets the lithology_moisture of this LithologyDescription.


        :param lithology_moisture: The lithology_moisture of this LithologyDescription.
        :type lithology_moisture: str
        """

        self._lithology_moisture = lithology_moisture

    @property
    def lithology_raw_data(self):
        """Gets the lithology_raw_data of this LithologyDescription.


        :return: The lithology_raw_data of this LithologyDescription.
        :rtype: str
        """
        return self._lithology_raw_data

    @lithology_raw_data.setter
    def lithology_raw_data(self, lithology_raw_data):
        """Sets the lithology_raw_data of this LithologyDescription.


        :param lithology_raw_data: The lithology_raw_data of this LithologyDescription.
        :type lithology_raw_data: str
        """
        if lithology_raw_data is not None and len(lithology_raw_data) > 250:
            raise ValueError("Invalid value for `lithology_raw_data`, length must be less than or equal to `250`")

        self._lithology_raw_data = lithology_raw_data

    @property
    def lithology_to(self):
        """Gets the lithology_to of this LithologyDescription.


        :return: The lithology_to of this LithologyDescription.
        :rtype: str
        """
        return self._lithology_to

    @lithology_to.setter
    def lithology_to(self, lithology_to):
        """Sets the lithology_to of this LithologyDescription.


        :param lithology_to: The lithology_to of this LithologyDescription.
        :type lithology_to: str
        """

        self._lithology_to = lithology_to

    @property
    def water_bearing_estimated_flow(self):
        """Gets the water_bearing_estimated_flow of this LithologyDescription.


        :return: The water_bearing_estimated_flow of this LithologyDescription.
        :rtype: str
        """
        return self._water_bearing_estimated_flow

    @water_bearing_estimated_flow.setter
    def water_bearing_estimated_flow(self, water_bearing_estimated_flow):
        """Sets the water_bearing_estimated_flow of this LithologyDescription.


        :param water_bearing_estimated_flow: The water_bearing_estimated_flow of this LithologyDescription.
        :type water_bearing_estimated_flow: str
        """

        self._water_bearing_estimated_flow = water_bearing_estimated_flow
