# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Survey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, survey_guid: str=None, survey_introduction_text: str=None, survey_link: str=None, survey_page: str=None):
        """Survey - a model defined in OpenAPI

        :param survey_guid: The survey_guid of this Survey.
        :param survey_introduction_text: The survey_introduction_text of this Survey.
        :param survey_link: The survey_link of this Survey.
        :param survey_page: The survey_page of this Survey.
        """
        self.openapi_types = {
            'survey_guid': str,
            'survey_introduction_text': str,
            'survey_link': str,
            'survey_page': str
        }

        self.attribute_map = {
            'survey_guid': 'survey_guid',
            'survey_introduction_text': 'survey_introduction_text',
            'survey_link': 'survey_link',
            'survey_page': 'survey_page'
        }

        self._survey_guid = survey_guid
        self._survey_introduction_text = survey_introduction_text
        self._survey_link = survey_link
        self._survey_page = survey_page

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Survey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Survey of this Survey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def survey_guid(self):
        """Gets the survey_guid of this Survey.


        :return: The survey_guid of this Survey.
        :rtype: str
        """
        return self._survey_guid

    @survey_guid.setter
    def survey_guid(self, survey_guid):
        """Sets the survey_guid of this Survey.


        :param survey_guid: The survey_guid of this Survey.
        :type survey_guid: str
        """

        self._survey_guid = survey_guid

    @property
    def survey_introduction_text(self):
        """Gets the survey_introduction_text of this Survey.


        :return: The survey_introduction_text of this Survey.
        :rtype: str
        """
        return self._survey_introduction_text

    @survey_introduction_text.setter
    def survey_introduction_text(self, survey_introduction_text):
        """Sets the survey_introduction_text of this Survey.


        :param survey_introduction_text: The survey_introduction_text of this Survey.
        :type survey_introduction_text: str
        """
        if survey_introduction_text is not None and len(survey_introduction_text) > 250:
            raise ValueError("Invalid value for `survey_introduction_text`, length must be less than or equal to `250`")

        self._survey_introduction_text = survey_introduction_text

    @property
    def survey_link(self):
        """Gets the survey_link of this Survey.


        :return: The survey_link of this Survey.
        :rtype: str
        """
        return self._survey_link

    @survey_link.setter
    def survey_link(self, survey_link):
        """Sets the survey_link of this Survey.


        :param survey_link: The survey_link of this Survey.
        :type survey_link: str
        """
        if survey_link is not None and len(survey_link) > 100:
            raise ValueError("Invalid value for `survey_link`, length must be less than or equal to `100`")

        self._survey_link = survey_link

    @property
    def survey_page(self):
        """Gets the survey_page of this Survey.


        :return: The survey_page of this Survey.
        :rtype: str
        """
        return self._survey_page

    @survey_page.setter
    def survey_page(self, survey_page):
        """Sets the survey_page of this Survey.


        :param survey_page: The survey_page of this Survey.
        :type survey_page: str
        """
        allowed_values = ["w", "r", "s", "a"]  # noqa: E501
        if survey_page not in allowed_values:
            raise ValueError(
                "Invalid value for `survey_page` ({0}), must be one of {1}"
                .format(survey_page, allowed_values)
            )

        self._survey_page = survey_page
