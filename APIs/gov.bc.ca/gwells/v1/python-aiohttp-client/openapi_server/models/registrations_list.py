# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_list import ApplicationList
from openapi_server.models.organization_list import OrganizationList
from openapi_server import util


class RegistrationsList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity: str=None, activity_description: str=None, applications: List[ApplicationList]=None, organization: OrganizationList=None, registration_no: str=None):
        """RegistrationsList - a model defined in OpenAPI

        :param activity: The activity of this RegistrationsList.
        :param activity_description: The activity_description of this RegistrationsList.
        :param applications: The applications of this RegistrationsList.
        :param organization: The organization of this RegistrationsList.
        :param registration_no: The registration_no of this RegistrationsList.
        """
        self.openapi_types = {
            'activity': str,
            'activity_description': str,
            'applications': List[ApplicationList],
            'organization': OrganizationList,
            'registration_no': str
        }

        self.attribute_map = {
            'activity': 'activity',
            'activity_description': 'activity_description',
            'applications': 'applications',
            'organization': 'organization',
            'registration_no': 'registration_no'
        }

        self._activity = activity
        self._activity_description = activity_description
        self._applications = applications
        self._organization = organization
        self._registration_no = registration_no

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistrationsList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistrationsList of this RegistrationsList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity(self):
        """Gets the activity of this RegistrationsList.


        :return: The activity of this RegistrationsList.
        :rtype: str
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this RegistrationsList.


        :param activity: The activity of this RegistrationsList.
        :type activity: str
        """

        self._activity = activity

    @property
    def activity_description(self):
        """Gets the activity_description of this RegistrationsList.


        :return: The activity_description of this RegistrationsList.
        :rtype: str
        """
        return self._activity_description

    @activity_description.setter
    def activity_description(self, activity_description):
        """Sets the activity_description of this RegistrationsList.


        :param activity_description: The activity_description of this RegistrationsList.
        :type activity_description: str
        """

        self._activity_description = activity_description

    @property
    def applications(self):
        """Gets the applications of this RegistrationsList.


        :return: The applications of this RegistrationsList.
        :rtype: List[ApplicationList]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this RegistrationsList.


        :param applications: The applications of this RegistrationsList.
        :type applications: List[ApplicationList]
        """

        self._applications = applications

    @property
    def organization(self):
        """Gets the organization of this RegistrationsList.


        :return: The organization of this RegistrationsList.
        :rtype: OrganizationList
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this RegistrationsList.


        :param organization: The organization of this RegistrationsList.
        :type organization: OrganizationList
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")

        self._organization = organization

    @property
    def registration_no(self):
        """Gets the registration_no of this RegistrationsList.


        :return: The registration_no of this RegistrationsList.
        :rtype: str
        """
        return self._registration_no

    @registration_no.setter
    def registration_no(self, registration_no):
        """Sets the registration_no of this RegistrationsList.


        :param registration_no: The registration_no of this RegistrationsList.
        :type registration_no: str
        """
        if registration_no is not None and len(registration_no) > 15:
            raise ValueError("Invalid value for `registration_no`, length must be less than or equal to `15`")

        self._registration_no = registration_no
