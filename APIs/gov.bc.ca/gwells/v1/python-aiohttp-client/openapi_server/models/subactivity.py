# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.qualification import Qualification
from openapi_server import util


class Subactivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, qualification_set: List[Qualification]=None, registries_subactivity_code: str=None):
        """Subactivity - a model defined in OpenAPI

        :param description: The description of this Subactivity.
        :param qualification_set: The qualification_set of this Subactivity.
        :param registries_subactivity_code: The registries_subactivity_code of this Subactivity.
        """
        self.openapi_types = {
            'description': str,
            'qualification_set': List[Qualification],
            'registries_subactivity_code': str
        }

        self.attribute_map = {
            'description': 'description',
            'qualification_set': 'qualification_set',
            'registries_subactivity_code': 'registries_subactivity_code'
        }

        self._description = description
        self._qualification_set = qualification_set
        self._registries_subactivity_code = registries_subactivity_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subactivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subactivity of this Subactivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Subactivity.


        :return: The description of this Subactivity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Subactivity.


        :param description: The description of this Subactivity.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")

        self._description = description

    @property
    def qualification_set(self):
        """Gets the qualification_set of this Subactivity.


        :return: The qualification_set of this Subactivity.
        :rtype: List[Qualification]
        """
        return self._qualification_set

    @qualification_set.setter
    def qualification_set(self, qualification_set):
        """Sets the qualification_set of this Subactivity.


        :param qualification_set: The qualification_set of this Subactivity.
        :type qualification_set: List[Qualification]
        """

        self._qualification_set = qualification_set

    @property
    def registries_subactivity_code(self):
        """Gets the registries_subactivity_code of this Subactivity.


        :return: The registries_subactivity_code of this Subactivity.
        :rtype: str
        """
        return self._registries_subactivity_code

    @registries_subactivity_code.setter
    def registries_subactivity_code(self, registries_subactivity_code):
        """Sets the registries_subactivity_code of this Subactivity.


        :param registries_subactivity_code: The registries_subactivity_code of this Subactivity.
        :type registries_subactivity_code: str
        """

        self._registries_subactivity_code = registries_subactivity_code
