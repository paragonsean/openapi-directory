# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DecommissionDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end: str=None, material: str=None, observations: str=None, start: str=None):
        """DecommissionDescription - a model defined in OpenAPI

        :param end: The end of this DecommissionDescription.
        :param material: The material of this DecommissionDescription.
        :param observations: The observations of this DecommissionDescription.
        :param start: The start of this DecommissionDescription.
        """
        self.openapi_types = {
            'end': str,
            'material': str,
            'observations': str,
            'start': str
        }

        self.attribute_map = {
            'end': 'end',
            'material': 'material',
            'observations': 'observations',
            'start': 'start'
        }

        self._end = end
        self._material = material
        self._observations = observations
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DecommissionDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DecommissionDescription of this DecommissionDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end(self):
        """Gets the end of this DecommissionDescription.


        :return: The end of this DecommissionDescription.
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this DecommissionDescription.


        :param end: The end of this DecommissionDescription.
        :type end: str
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")

        self._end = end

    @property
    def material(self):
        """Gets the material of this DecommissionDescription.


        :return: The material of this DecommissionDescription.
        :rtype: str
        """
        return self._material

    @material.setter
    def material(self, material):
        """Sets the material of this DecommissionDescription.


        :param material: The material of this DecommissionDescription.
        :type material: str
        """
        if material is None:
            raise ValueError("Invalid value for `material`, must not be `None`")

        self._material = material

    @property
    def observations(self):
        """Gets the observations of this DecommissionDescription.


        :return: The observations of this DecommissionDescription.
        :rtype: str
        """
        return self._observations

    @observations.setter
    def observations(self, observations):
        """Sets the observations of this DecommissionDescription.


        :param observations: The observations of this DecommissionDescription.
        :type observations: str
        """
        if observations is not None and len(observations) > 255:
            raise ValueError("Invalid value for `observations`, length must be less than or equal to `255`")

        self._observations = observations

    @property
    def start(self):
        """Gets the start of this DecommissionDescription.


        :return: The start of this DecommissionDescription.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this DecommissionDescription.


        :param start: The start of this DecommissionDescription.
        :type start: str
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")

        self._start = start
