# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegistrationsNumber(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, registration_no: str=None, registries_activity: str=None):
        """RegistrationsNumber - a model defined in OpenAPI

        :param registration_no: The registration_no of this RegistrationsNumber.
        :param registries_activity: The registries_activity of this RegistrationsNumber.
        """
        self.openapi_types = {
            'registration_no': str,
            'registries_activity': str
        }

        self.attribute_map = {
            'registration_no': 'registration_no',
            'registries_activity': 'registries_activity'
        }

        self._registration_no = registration_no
        self._registries_activity = registries_activity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistrationsNumber':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistrationsNumber of this RegistrationsNumber.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def registration_no(self):
        """Gets the registration_no of this RegistrationsNumber.


        :return: The registration_no of this RegistrationsNumber.
        :rtype: str
        """
        return self._registration_no

    @registration_no.setter
    def registration_no(self, registration_no):
        """Sets the registration_no of this RegistrationsNumber.


        :param registration_no: The registration_no of this RegistrationsNumber.
        :type registration_no: str
        """
        if registration_no is not None and len(registration_no) > 15:
            raise ValueError("Invalid value for `registration_no`, length must be less than or equal to `15`")

        self._registration_no = registration_no

    @property
    def registries_activity(self):
        """Gets the registries_activity of this RegistrationsNumber.


        :return: The registries_activity of this RegistrationsNumber.
        :rtype: str
        """
        return self._registries_activity

    @registries_activity.setter
    def registries_activity(self, registries_activity):
        """Sets the registries_activity of this RegistrationsNumber.


        :param registries_activity: The registries_activity of this RegistrationsNumber.
        :type registries_activity: str
        """
        if registries_activity is None:
            raise ValueError("Invalid value for `registries_activity`, must not be `None`")

        self._registries_activity = registries_activity
