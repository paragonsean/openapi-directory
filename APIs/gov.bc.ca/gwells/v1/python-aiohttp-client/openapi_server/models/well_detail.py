# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.casing import Casing
from openapi_server.models.decommission_description import DecommissionDescription
from openapi_server.models.liner_perforation import LinerPerforation
from openapi_server.models.lithology_description import LithologyDescription
from openapi_server.models.organization_name_list import OrganizationNameList
from openapi_server.models.person_basic import PersonBasic
from openapi_server.models.screen import Screen
from openapi_server import util


class WellDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alteration_end_date: date=None, alternative_specs_submitted: bool=None, analytic_solution_type: str=None, aquifer: int=None, aquifer_vulnerability_index: str=None, artesian_flow: str=None, artesian_pressure: str=None, backfill_depth: str=None, backfill_material: str=None, backfill_type: str=None, bcgs_id: int=None, bedrock_depth: str=None, boundary_effect: str=None, casing_set: List[Casing]=None, city: str=None, comments: str=None, company_of_person_responsible: OrganizationNameList=None, construction_end_date: date=None, construction_start_date: date=None, coordinate_acquisition_code: str=None, decommission_description_set: List[DecommissionDescription]=None, decommission_details: str=None, decommission_end_date: date=None, decommission_method: str=None, decommission_reason: str=None, decommission_start_date: date=None, development_hours: str=None, development_method: str=None, development_notes: str=None, diameter: str=None, drawdown: str=None, drilling_company: str=None, drilling_method: str=None, ems: str=None, filter_pack_from: str=None, filter_pack_material: str=None, filter_pack_material_size: str=None, filter_pack_thickness: str=None, filter_pack_to: str=None, final_casing_stick_up: str=None, finished_well_depth: str=None, ground_elevation: str=None, ground_elevation_method: str=None, hydraulic_conductivity: str=None, hydro_fracturing_performed: bool=None, hydro_fracturing_yield_increase: str=None, id_plate_attached_by: str=None, identification_plate_number: int=None, intended_water_use: str=None, land_district: str=None, latitude: str=None, legal_block: str=None, legal_district_lot: str=None, legal_lot: str=None, legal_pid: int=None, legal_plan: str=None, legal_range: str=None, legal_section: str=None, legal_township: str=None, licenced_status: str=None, liner_diameter: str=None, liner_from: str=None, liner_material: str=None, liner_thickness: str=None, liner_to: str=None, linerperforation_set: List[LinerPerforation]=None, lithologydescription_set: List[LithologyDescription]=None, longitude: str=None, observation_well_number: str=None, observation_well_status: str=None, other_drilling_method: str=None, other_screen_bottom: str=None, other_screen_material: str=None, owner_full_name: str=None, person_responsible: PersonBasic=None, recommended_pump_depth: str=None, recommended_pump_rate: str=None, screen_bottom: str=None, screen_information: str=None, screen_intake_method: str=None, screen_material: str=None, screen_opening: str=None, screen_set: List[Screen]=None, screen_type: str=None, sealant_material: str=None, specific_storage: str=None, specific_yield: str=None, static_level_before_test: str=None, static_water_level: str=None, storativity: str=None, street_address: str=None, surface_seal_depth: str=None, surface_seal_length: str=None, surface_seal_material: str=None, surface_seal_method: str=None, surface_seal_thickness: str=None, testing_duration: int=None, testing_method: str=None, total_depth_drilled: str=None, transmissivity: str=None, utm_easting: int=None, utm_northing: int=None, utm_zone_code: str=None, water_quality_characteristics: list[str]=None, water_quality_colour: str=None, water_quality_odour: str=None, water_supply_system_name: str=None, water_supply_system_well_name: str=None, well: int=None, well_cap_type: str=None, well_class: str=None, well_disinfected: bool=None, well_guid: str=None, well_identification_plate_attached: str=None, well_location_description: str=None, well_orientation: bool=None, well_status: str=None, well_subclass: str=None, well_tag_number: int=None, well_yield: str=None, well_yield_unit: str=None, yield_estimation_duration: str=None, yield_estimation_method: str=None, yield_estimation_rate: str=None):
        """WellDetail - a model defined in OpenAPI

        :param alteration_end_date: The alteration_end_date of this WellDetail.
        :param alternative_specs_submitted: The alternative_specs_submitted of this WellDetail.
        :param analytic_solution_type: The analytic_solution_type of this WellDetail.
        :param aquifer: The aquifer of this WellDetail.
        :param aquifer_vulnerability_index: The aquifer_vulnerability_index of this WellDetail.
        :param artesian_flow: The artesian_flow of this WellDetail.
        :param artesian_pressure: The artesian_pressure of this WellDetail.
        :param backfill_depth: The backfill_depth of this WellDetail.
        :param backfill_material: The backfill_material of this WellDetail.
        :param backfill_type: The backfill_type of this WellDetail.
        :param bcgs_id: The bcgs_id of this WellDetail.
        :param bedrock_depth: The bedrock_depth of this WellDetail.
        :param boundary_effect: The boundary_effect of this WellDetail.
        :param casing_set: The casing_set of this WellDetail.
        :param city: The city of this WellDetail.
        :param comments: The comments of this WellDetail.
        :param company_of_person_responsible: The company_of_person_responsible of this WellDetail.
        :param construction_end_date: The construction_end_date of this WellDetail.
        :param construction_start_date: The construction_start_date of this WellDetail.
        :param coordinate_acquisition_code: The coordinate_acquisition_code of this WellDetail.
        :param decommission_description_set: The decommission_description_set of this WellDetail.
        :param decommission_details: The decommission_details of this WellDetail.
        :param decommission_end_date: The decommission_end_date of this WellDetail.
        :param decommission_method: The decommission_method of this WellDetail.
        :param decommission_reason: The decommission_reason of this WellDetail.
        :param decommission_start_date: The decommission_start_date of this WellDetail.
        :param development_hours: The development_hours of this WellDetail.
        :param development_method: The development_method of this WellDetail.
        :param development_notes: The development_notes of this WellDetail.
        :param diameter: The diameter of this WellDetail.
        :param drawdown: The drawdown of this WellDetail.
        :param drilling_company: The drilling_company of this WellDetail.
        :param drilling_method: The drilling_method of this WellDetail.
        :param ems: The ems of this WellDetail.
        :param filter_pack_from: The filter_pack_from of this WellDetail.
        :param filter_pack_material: The filter_pack_material of this WellDetail.
        :param filter_pack_material_size: The filter_pack_material_size of this WellDetail.
        :param filter_pack_thickness: The filter_pack_thickness of this WellDetail.
        :param filter_pack_to: The filter_pack_to of this WellDetail.
        :param final_casing_stick_up: The final_casing_stick_up of this WellDetail.
        :param finished_well_depth: The finished_well_depth of this WellDetail.
        :param ground_elevation: The ground_elevation of this WellDetail.
        :param ground_elevation_method: The ground_elevation_method of this WellDetail.
        :param hydraulic_conductivity: The hydraulic_conductivity of this WellDetail.
        :param hydro_fracturing_performed: The hydro_fracturing_performed of this WellDetail.
        :param hydro_fracturing_yield_increase: The hydro_fracturing_yield_increase of this WellDetail.
        :param id_plate_attached_by: The id_plate_attached_by of this WellDetail.
        :param identification_plate_number: The identification_plate_number of this WellDetail.
        :param intended_water_use: The intended_water_use of this WellDetail.
        :param land_district: The land_district of this WellDetail.
        :param latitude: The latitude of this WellDetail.
        :param legal_block: The legal_block of this WellDetail.
        :param legal_district_lot: The legal_district_lot of this WellDetail.
        :param legal_lot: The legal_lot of this WellDetail.
        :param legal_pid: The legal_pid of this WellDetail.
        :param legal_plan: The legal_plan of this WellDetail.
        :param legal_range: The legal_range of this WellDetail.
        :param legal_section: The legal_section of this WellDetail.
        :param legal_township: The legal_township of this WellDetail.
        :param licenced_status: The licenced_status of this WellDetail.
        :param liner_diameter: The liner_diameter of this WellDetail.
        :param liner_from: The liner_from of this WellDetail.
        :param liner_material: The liner_material of this WellDetail.
        :param liner_thickness: The liner_thickness of this WellDetail.
        :param liner_to: The liner_to of this WellDetail.
        :param linerperforation_set: The linerperforation_set of this WellDetail.
        :param lithologydescription_set: The lithologydescription_set of this WellDetail.
        :param longitude: The longitude of this WellDetail.
        :param observation_well_number: The observation_well_number of this WellDetail.
        :param observation_well_status: The observation_well_status of this WellDetail.
        :param other_drilling_method: The other_drilling_method of this WellDetail.
        :param other_screen_bottom: The other_screen_bottom of this WellDetail.
        :param other_screen_material: The other_screen_material of this WellDetail.
        :param owner_full_name: The owner_full_name of this WellDetail.
        :param person_responsible: The person_responsible of this WellDetail.
        :param recommended_pump_depth: The recommended_pump_depth of this WellDetail.
        :param recommended_pump_rate: The recommended_pump_rate of this WellDetail.
        :param screen_bottom: The screen_bottom of this WellDetail.
        :param screen_information: The screen_information of this WellDetail.
        :param screen_intake_method: The screen_intake_method of this WellDetail.
        :param screen_material: The screen_material of this WellDetail.
        :param screen_opening: The screen_opening of this WellDetail.
        :param screen_set: The screen_set of this WellDetail.
        :param screen_type: The screen_type of this WellDetail.
        :param sealant_material: The sealant_material of this WellDetail.
        :param specific_storage: The specific_storage of this WellDetail.
        :param specific_yield: The specific_yield of this WellDetail.
        :param static_level_before_test: The static_level_before_test of this WellDetail.
        :param static_water_level: The static_water_level of this WellDetail.
        :param storativity: The storativity of this WellDetail.
        :param street_address: The street_address of this WellDetail.
        :param surface_seal_depth: The surface_seal_depth of this WellDetail.
        :param surface_seal_length: The surface_seal_length of this WellDetail.
        :param surface_seal_material: The surface_seal_material of this WellDetail.
        :param surface_seal_method: The surface_seal_method of this WellDetail.
        :param surface_seal_thickness: The surface_seal_thickness of this WellDetail.
        :param testing_duration: The testing_duration of this WellDetail.
        :param testing_method: The testing_method of this WellDetail.
        :param total_depth_drilled: The total_depth_drilled of this WellDetail.
        :param transmissivity: The transmissivity of this WellDetail.
        :param utm_easting: The utm_easting of this WellDetail.
        :param utm_northing: The utm_northing of this WellDetail.
        :param utm_zone_code: The utm_zone_code of this WellDetail.
        :param water_quality_characteristics: The water_quality_characteristics of this WellDetail.
        :param water_quality_colour: The water_quality_colour of this WellDetail.
        :param water_quality_odour: The water_quality_odour of this WellDetail.
        :param water_supply_system_name: The water_supply_system_name of this WellDetail.
        :param water_supply_system_well_name: The water_supply_system_well_name of this WellDetail.
        :param well: The well of this WellDetail.
        :param well_cap_type: The well_cap_type of this WellDetail.
        :param well_class: The well_class of this WellDetail.
        :param well_disinfected: The well_disinfected of this WellDetail.
        :param well_guid: The well_guid of this WellDetail.
        :param well_identification_plate_attached: The well_identification_plate_attached of this WellDetail.
        :param well_location_description: The well_location_description of this WellDetail.
        :param well_orientation: The well_orientation of this WellDetail.
        :param well_status: The well_status of this WellDetail.
        :param well_subclass: The well_subclass of this WellDetail.
        :param well_tag_number: The well_tag_number of this WellDetail.
        :param well_yield: The well_yield of this WellDetail.
        :param well_yield_unit: The well_yield_unit of this WellDetail.
        :param yield_estimation_duration: The yield_estimation_duration of this WellDetail.
        :param yield_estimation_method: The yield_estimation_method of this WellDetail.
        :param yield_estimation_rate: The yield_estimation_rate of this WellDetail.
        """
        self.openapi_types = {
            'alteration_end_date': date,
            'alternative_specs_submitted': bool,
            'analytic_solution_type': str,
            'aquifer': int,
            'aquifer_vulnerability_index': str,
            'artesian_flow': str,
            'artesian_pressure': str,
            'backfill_depth': str,
            'backfill_material': str,
            'backfill_type': str,
            'bcgs_id': int,
            'bedrock_depth': str,
            'boundary_effect': str,
            'casing_set': List[Casing],
            'city': str,
            'comments': str,
            'company_of_person_responsible': OrganizationNameList,
            'construction_end_date': date,
            'construction_start_date': date,
            'coordinate_acquisition_code': str,
            'decommission_description_set': List[DecommissionDescription],
            'decommission_details': str,
            'decommission_end_date': date,
            'decommission_method': str,
            'decommission_reason': str,
            'decommission_start_date': date,
            'development_hours': str,
            'development_method': str,
            'development_notes': str,
            'diameter': str,
            'drawdown': str,
            'drilling_company': str,
            'drilling_method': str,
            'ems': str,
            'filter_pack_from': str,
            'filter_pack_material': str,
            'filter_pack_material_size': str,
            'filter_pack_thickness': str,
            'filter_pack_to': str,
            'final_casing_stick_up': str,
            'finished_well_depth': str,
            'ground_elevation': str,
            'ground_elevation_method': str,
            'hydraulic_conductivity': str,
            'hydro_fracturing_performed': bool,
            'hydro_fracturing_yield_increase': str,
            'id_plate_attached_by': str,
            'identification_plate_number': int,
            'intended_water_use': str,
            'land_district': str,
            'latitude': str,
            'legal_block': str,
            'legal_district_lot': str,
            'legal_lot': str,
            'legal_pid': int,
            'legal_plan': str,
            'legal_range': str,
            'legal_section': str,
            'legal_township': str,
            'licenced_status': str,
            'liner_diameter': str,
            'liner_from': str,
            'liner_material': str,
            'liner_thickness': str,
            'liner_to': str,
            'linerperforation_set': List[LinerPerforation],
            'lithologydescription_set': List[LithologyDescription],
            'longitude': str,
            'observation_well_number': str,
            'observation_well_status': str,
            'other_drilling_method': str,
            'other_screen_bottom': str,
            'other_screen_material': str,
            'owner_full_name': str,
            'person_responsible': PersonBasic,
            'recommended_pump_depth': str,
            'recommended_pump_rate': str,
            'screen_bottom': str,
            'screen_information': str,
            'screen_intake_method': str,
            'screen_material': str,
            'screen_opening': str,
            'screen_set': List[Screen],
            'screen_type': str,
            'sealant_material': str,
            'specific_storage': str,
            'specific_yield': str,
            'static_level_before_test': str,
            'static_water_level': str,
            'storativity': str,
            'street_address': str,
            'surface_seal_depth': str,
            'surface_seal_length': str,
            'surface_seal_material': str,
            'surface_seal_method': str,
            'surface_seal_thickness': str,
            'testing_duration': int,
            'testing_method': str,
            'total_depth_drilled': str,
            'transmissivity': str,
            'utm_easting': int,
            'utm_northing': int,
            'utm_zone_code': str,
            'water_quality_characteristics': list[str],
            'water_quality_colour': str,
            'water_quality_odour': str,
            'water_supply_system_name': str,
            'water_supply_system_well_name': str,
            'well': int,
            'well_cap_type': str,
            'well_class': str,
            'well_disinfected': bool,
            'well_guid': str,
            'well_identification_plate_attached': str,
            'well_location_description': str,
            'well_orientation': bool,
            'well_status': str,
            'well_subclass': str,
            'well_tag_number': int,
            'well_yield': str,
            'well_yield_unit': str,
            'yield_estimation_duration': str,
            'yield_estimation_method': str,
            'yield_estimation_rate': str
        }

        self.attribute_map = {
            'alteration_end_date': 'alteration_end_date',
            'alternative_specs_submitted': 'alternative_specs_submitted',
            'analytic_solution_type': 'analytic_solution_type',
            'aquifer': 'aquifer',
            'aquifer_vulnerability_index': 'aquifer_vulnerability_index',
            'artesian_flow': 'artesian_flow',
            'artesian_pressure': 'artesian_pressure',
            'backfill_depth': 'backfill_depth',
            'backfill_material': 'backfill_material',
            'backfill_type': 'backfill_type',
            'bcgs_id': 'bcgs_id',
            'bedrock_depth': 'bedrock_depth',
            'boundary_effect': 'boundary_effect',
            'casing_set': 'casing_set',
            'city': 'city',
            'comments': 'comments',
            'company_of_person_responsible': 'company_of_person_responsible',
            'construction_end_date': 'construction_end_date',
            'construction_start_date': 'construction_start_date',
            'coordinate_acquisition_code': 'coordinate_acquisition_code',
            'decommission_description_set': 'decommission_description_set',
            'decommission_details': 'decommission_details',
            'decommission_end_date': 'decommission_end_date',
            'decommission_method': 'decommission_method',
            'decommission_reason': 'decommission_reason',
            'decommission_start_date': 'decommission_start_date',
            'development_hours': 'development_hours',
            'development_method': 'development_method',
            'development_notes': 'development_notes',
            'diameter': 'diameter',
            'drawdown': 'drawdown',
            'drilling_company': 'drilling_company',
            'drilling_method': 'drilling_method',
            'ems': 'ems',
            'filter_pack_from': 'filter_pack_from',
            'filter_pack_material': 'filter_pack_material',
            'filter_pack_material_size': 'filter_pack_material_size',
            'filter_pack_thickness': 'filter_pack_thickness',
            'filter_pack_to': 'filter_pack_to',
            'final_casing_stick_up': 'final_casing_stick_up',
            'finished_well_depth': 'finished_well_depth',
            'ground_elevation': 'ground_elevation',
            'ground_elevation_method': 'ground_elevation_method',
            'hydraulic_conductivity': 'hydraulic_conductivity',
            'hydro_fracturing_performed': 'hydro_fracturing_performed',
            'hydro_fracturing_yield_increase': 'hydro_fracturing_yield_increase',
            'id_plate_attached_by': 'id_plate_attached_by',
            'identification_plate_number': 'identification_plate_number',
            'intended_water_use': 'intended_water_use',
            'land_district': 'land_district',
            'latitude': 'latitude',
            'legal_block': 'legal_block',
            'legal_district_lot': 'legal_district_lot',
            'legal_lot': 'legal_lot',
            'legal_pid': 'legal_pid',
            'legal_plan': 'legal_plan',
            'legal_range': 'legal_range',
            'legal_section': 'legal_section',
            'legal_township': 'legal_township',
            'licenced_status': 'licenced_status',
            'liner_diameter': 'liner_diameter',
            'liner_from': 'liner_from',
            'liner_material': 'liner_material',
            'liner_thickness': 'liner_thickness',
            'liner_to': 'liner_to',
            'linerperforation_set': 'linerperforation_set',
            'lithologydescription_set': 'lithologydescription_set',
            'longitude': 'longitude',
            'observation_well_number': 'observation_well_number',
            'observation_well_status': 'observation_well_status',
            'other_drilling_method': 'other_drilling_method',
            'other_screen_bottom': 'other_screen_bottom',
            'other_screen_material': 'other_screen_material',
            'owner_full_name': 'owner_full_name',
            'person_responsible': 'person_responsible',
            'recommended_pump_depth': 'recommended_pump_depth',
            'recommended_pump_rate': 'recommended_pump_rate',
            'screen_bottom': 'screen_bottom',
            'screen_information': 'screen_information',
            'screen_intake_method': 'screen_intake_method',
            'screen_material': 'screen_material',
            'screen_opening': 'screen_opening',
            'screen_set': 'screen_set',
            'screen_type': 'screen_type',
            'sealant_material': 'sealant_material',
            'specific_storage': 'specific_storage',
            'specific_yield': 'specific_yield',
            'static_level_before_test': 'static_level_before_test',
            'static_water_level': 'static_water_level',
            'storativity': 'storativity',
            'street_address': 'street_address',
            'surface_seal_depth': 'surface_seal_depth',
            'surface_seal_length': 'surface_seal_length',
            'surface_seal_material': 'surface_seal_material',
            'surface_seal_method': 'surface_seal_method',
            'surface_seal_thickness': 'surface_seal_thickness',
            'testing_duration': 'testing_duration',
            'testing_method': 'testing_method',
            'total_depth_drilled': 'total_depth_drilled',
            'transmissivity': 'transmissivity',
            'utm_easting': 'utm_easting',
            'utm_northing': 'utm_northing',
            'utm_zone_code': 'utm_zone_code',
            'water_quality_characteristics': 'water_quality_characteristics',
            'water_quality_colour': 'water_quality_colour',
            'water_quality_odour': 'water_quality_odour',
            'water_supply_system_name': 'water_supply_system_name',
            'water_supply_system_well_name': 'water_supply_system_well_name',
            'well': 'well',
            'well_cap_type': 'well_cap_type',
            'well_class': 'well_class',
            'well_disinfected': 'well_disinfected',
            'well_guid': 'well_guid',
            'well_identification_plate_attached': 'well_identification_plate_attached',
            'well_location_description': 'well_location_description',
            'well_orientation': 'well_orientation',
            'well_status': 'well_status',
            'well_subclass': 'well_subclass',
            'well_tag_number': 'well_tag_number',
            'well_yield': 'well_yield',
            'well_yield_unit': 'well_yield_unit',
            'yield_estimation_duration': 'yield_estimation_duration',
            'yield_estimation_method': 'yield_estimation_method',
            'yield_estimation_rate': 'yield_estimation_rate'
        }

        self._alteration_end_date = alteration_end_date
        self._alternative_specs_submitted = alternative_specs_submitted
        self._analytic_solution_type = analytic_solution_type
        self._aquifer = aquifer
        self._aquifer_vulnerability_index = aquifer_vulnerability_index
        self._artesian_flow = artesian_flow
        self._artesian_pressure = artesian_pressure
        self._backfill_depth = backfill_depth
        self._backfill_material = backfill_material
        self._backfill_type = backfill_type
        self._bcgs_id = bcgs_id
        self._bedrock_depth = bedrock_depth
        self._boundary_effect = boundary_effect
        self._casing_set = casing_set
        self._city = city
        self._comments = comments
        self._company_of_person_responsible = company_of_person_responsible
        self._construction_end_date = construction_end_date
        self._construction_start_date = construction_start_date
        self._coordinate_acquisition_code = coordinate_acquisition_code
        self._decommission_description_set = decommission_description_set
        self._decommission_details = decommission_details
        self._decommission_end_date = decommission_end_date
        self._decommission_method = decommission_method
        self._decommission_reason = decommission_reason
        self._decommission_start_date = decommission_start_date
        self._development_hours = development_hours
        self._development_method = development_method
        self._development_notes = development_notes
        self._diameter = diameter
        self._drawdown = drawdown
        self._drilling_company = drilling_company
        self._drilling_method = drilling_method
        self._ems = ems
        self._filter_pack_from = filter_pack_from
        self._filter_pack_material = filter_pack_material
        self._filter_pack_material_size = filter_pack_material_size
        self._filter_pack_thickness = filter_pack_thickness
        self._filter_pack_to = filter_pack_to
        self._final_casing_stick_up = final_casing_stick_up
        self._finished_well_depth = finished_well_depth
        self._ground_elevation = ground_elevation
        self._ground_elevation_method = ground_elevation_method
        self._hydraulic_conductivity = hydraulic_conductivity
        self._hydro_fracturing_performed = hydro_fracturing_performed
        self._hydro_fracturing_yield_increase = hydro_fracturing_yield_increase
        self._id_plate_attached_by = id_plate_attached_by
        self._identification_plate_number = identification_plate_number
        self._intended_water_use = intended_water_use
        self._land_district = land_district
        self._latitude = latitude
        self._legal_block = legal_block
        self._legal_district_lot = legal_district_lot
        self._legal_lot = legal_lot
        self._legal_pid = legal_pid
        self._legal_plan = legal_plan
        self._legal_range = legal_range
        self._legal_section = legal_section
        self._legal_township = legal_township
        self._licenced_status = licenced_status
        self._liner_diameter = liner_diameter
        self._liner_from = liner_from
        self._liner_material = liner_material
        self._liner_thickness = liner_thickness
        self._liner_to = liner_to
        self._linerperforation_set = linerperforation_set
        self._lithologydescription_set = lithologydescription_set
        self._longitude = longitude
        self._observation_well_number = observation_well_number
        self._observation_well_status = observation_well_status
        self._other_drilling_method = other_drilling_method
        self._other_screen_bottom = other_screen_bottom
        self._other_screen_material = other_screen_material
        self._owner_full_name = owner_full_name
        self._person_responsible = person_responsible
        self._recommended_pump_depth = recommended_pump_depth
        self._recommended_pump_rate = recommended_pump_rate
        self._screen_bottom = screen_bottom
        self._screen_information = screen_information
        self._screen_intake_method = screen_intake_method
        self._screen_material = screen_material
        self._screen_opening = screen_opening
        self._screen_set = screen_set
        self._screen_type = screen_type
        self._sealant_material = sealant_material
        self._specific_storage = specific_storage
        self._specific_yield = specific_yield
        self._static_level_before_test = static_level_before_test
        self._static_water_level = static_water_level
        self._storativity = storativity
        self._street_address = street_address
        self._surface_seal_depth = surface_seal_depth
        self._surface_seal_length = surface_seal_length
        self._surface_seal_material = surface_seal_material
        self._surface_seal_method = surface_seal_method
        self._surface_seal_thickness = surface_seal_thickness
        self._testing_duration = testing_duration
        self._testing_method = testing_method
        self._total_depth_drilled = total_depth_drilled
        self._transmissivity = transmissivity
        self._utm_easting = utm_easting
        self._utm_northing = utm_northing
        self._utm_zone_code = utm_zone_code
        self._water_quality_characteristics = water_quality_characteristics
        self._water_quality_colour = water_quality_colour
        self._water_quality_odour = water_quality_odour
        self._water_supply_system_name = water_supply_system_name
        self._water_supply_system_well_name = water_supply_system_well_name
        self._well = well
        self._well_cap_type = well_cap_type
        self._well_class = well_class
        self._well_disinfected = well_disinfected
        self._well_guid = well_guid
        self._well_identification_plate_attached = well_identification_plate_attached
        self._well_location_description = well_location_description
        self._well_orientation = well_orientation
        self._well_status = well_status
        self._well_subclass = well_subclass
        self._well_tag_number = well_tag_number
        self._well_yield = well_yield
        self._well_yield_unit = well_yield_unit
        self._yield_estimation_duration = yield_estimation_duration
        self._yield_estimation_method = yield_estimation_method
        self._yield_estimation_rate = yield_estimation_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WellDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WellDetail of this WellDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alteration_end_date(self):
        """Gets the alteration_end_date of this WellDetail.


        :return: The alteration_end_date of this WellDetail.
        :rtype: date
        """
        return self._alteration_end_date

    @alteration_end_date.setter
    def alteration_end_date(self, alteration_end_date):
        """Sets the alteration_end_date of this WellDetail.


        :param alteration_end_date: The alteration_end_date of this WellDetail.
        :type alteration_end_date: date
        """

        self._alteration_end_date = alteration_end_date

    @property
    def alternative_specs_submitted(self):
        """Gets the alternative_specs_submitted of this WellDetail.


        :return: The alternative_specs_submitted of this WellDetail.
        :rtype: bool
        """
        return self._alternative_specs_submitted

    @alternative_specs_submitted.setter
    def alternative_specs_submitted(self, alternative_specs_submitted):
        """Sets the alternative_specs_submitted of this WellDetail.


        :param alternative_specs_submitted: The alternative_specs_submitted of this WellDetail.
        :type alternative_specs_submitted: bool
        """

        self._alternative_specs_submitted = alternative_specs_submitted

    @property
    def analytic_solution_type(self):
        """Gets the analytic_solution_type of this WellDetail.


        :return: The analytic_solution_type of this WellDetail.
        :rtype: str
        """
        return self._analytic_solution_type

    @analytic_solution_type.setter
    def analytic_solution_type(self, analytic_solution_type):
        """Sets the analytic_solution_type of this WellDetail.


        :param analytic_solution_type: The analytic_solution_type of this WellDetail.
        :type analytic_solution_type: str
        """

        self._analytic_solution_type = analytic_solution_type

    @property
    def aquifer(self):
        """Gets the aquifer of this WellDetail.


        :return: The aquifer of this WellDetail.
        :rtype: int
        """
        return self._aquifer

    @aquifer.setter
    def aquifer(self, aquifer):
        """Sets the aquifer of this WellDetail.


        :param aquifer: The aquifer of this WellDetail.
        :type aquifer: int
        """

        self._aquifer = aquifer

    @property
    def aquifer_vulnerability_index(self):
        """Gets the aquifer_vulnerability_index of this WellDetail.


        :return: The aquifer_vulnerability_index of this WellDetail.
        :rtype: str
        """
        return self._aquifer_vulnerability_index

    @aquifer_vulnerability_index.setter
    def aquifer_vulnerability_index(self, aquifer_vulnerability_index):
        """Sets the aquifer_vulnerability_index of this WellDetail.


        :param aquifer_vulnerability_index: The aquifer_vulnerability_index of this WellDetail.
        :type aquifer_vulnerability_index: str
        """

        self._aquifer_vulnerability_index = aquifer_vulnerability_index

    @property
    def artesian_flow(self):
        """Gets the artesian_flow of this WellDetail.


        :return: The artesian_flow of this WellDetail.
        :rtype: str
        """
        return self._artesian_flow

    @artesian_flow.setter
    def artesian_flow(self, artesian_flow):
        """Sets the artesian_flow of this WellDetail.


        :param artesian_flow: The artesian_flow of this WellDetail.
        :type artesian_flow: str
        """

        self._artesian_flow = artesian_flow

    @property
    def artesian_pressure(self):
        """Gets the artesian_pressure of this WellDetail.


        :return: The artesian_pressure of this WellDetail.
        :rtype: str
        """
        return self._artesian_pressure

    @artesian_pressure.setter
    def artesian_pressure(self, artesian_pressure):
        """Sets the artesian_pressure of this WellDetail.


        :param artesian_pressure: The artesian_pressure of this WellDetail.
        :type artesian_pressure: str
        """

        self._artesian_pressure = artesian_pressure

    @property
    def backfill_depth(self):
        """Gets the backfill_depth of this WellDetail.


        :return: The backfill_depth of this WellDetail.
        :rtype: str
        """
        return self._backfill_depth

    @backfill_depth.setter
    def backfill_depth(self, backfill_depth):
        """Sets the backfill_depth of this WellDetail.


        :param backfill_depth: The backfill_depth of this WellDetail.
        :type backfill_depth: str
        """

        self._backfill_depth = backfill_depth

    @property
    def backfill_material(self):
        """Gets the backfill_material of this WellDetail.


        :return: The backfill_material of this WellDetail.
        :rtype: str
        """
        return self._backfill_material

    @backfill_material.setter
    def backfill_material(self, backfill_material):
        """Sets the backfill_material of this WellDetail.


        :param backfill_material: The backfill_material of this WellDetail.
        :type backfill_material: str
        """
        if backfill_material is not None and len(backfill_material) > 100:
            raise ValueError("Invalid value for `backfill_material`, length must be less than or equal to `100`")

        self._backfill_material = backfill_material

    @property
    def backfill_type(self):
        """Gets the backfill_type of this WellDetail.


        :return: The backfill_type of this WellDetail.
        :rtype: str
        """
        return self._backfill_type

    @backfill_type.setter
    def backfill_type(self, backfill_type):
        """Sets the backfill_type of this WellDetail.


        :param backfill_type: The backfill_type of this WellDetail.
        :type backfill_type: str
        """
        if backfill_type is not None and len(backfill_type) > 250:
            raise ValueError("Invalid value for `backfill_type`, length must be less than or equal to `250`")

        self._backfill_type = backfill_type

    @property
    def bcgs_id(self):
        """Gets the bcgs_id of this WellDetail.


        :return: The bcgs_id of this WellDetail.
        :rtype: int
        """
        return self._bcgs_id

    @bcgs_id.setter
    def bcgs_id(self, bcgs_id):
        """Sets the bcgs_id of this WellDetail.


        :param bcgs_id: The bcgs_id of this WellDetail.
        :type bcgs_id: int
        """

        self._bcgs_id = bcgs_id

    @property
    def bedrock_depth(self):
        """Gets the bedrock_depth of this WellDetail.


        :return: The bedrock_depth of this WellDetail.
        :rtype: str
        """
        return self._bedrock_depth

    @bedrock_depth.setter
    def bedrock_depth(self, bedrock_depth):
        """Sets the bedrock_depth of this WellDetail.


        :param bedrock_depth: The bedrock_depth of this WellDetail.
        :type bedrock_depth: str
        """

        self._bedrock_depth = bedrock_depth

    @property
    def boundary_effect(self):
        """Gets the boundary_effect of this WellDetail.


        :return: The boundary_effect of this WellDetail.
        :rtype: str
        """
        return self._boundary_effect

    @boundary_effect.setter
    def boundary_effect(self, boundary_effect):
        """Sets the boundary_effect of this WellDetail.


        :param boundary_effect: The boundary_effect of this WellDetail.
        :type boundary_effect: str
        """

        self._boundary_effect = boundary_effect

    @property
    def casing_set(self):
        """Gets the casing_set of this WellDetail.


        :return: The casing_set of this WellDetail.
        :rtype: List[Casing]
        """
        return self._casing_set

    @casing_set.setter
    def casing_set(self, casing_set):
        """Sets the casing_set of this WellDetail.


        :param casing_set: The casing_set of this WellDetail.
        :type casing_set: List[Casing]
        """
        if casing_set is None:
            raise ValueError("Invalid value for `casing_set`, must not be `None`")

        self._casing_set = casing_set

    @property
    def city(self):
        """Gets the city of this WellDetail.


        :return: The city of this WellDetail.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this WellDetail.


        :param city: The city of this WellDetail.
        :type city: str
        """
        if city is not None and len(city) > 50:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `50`")

        self._city = city

    @property
    def comments(self):
        """Gets the comments of this WellDetail.


        :return: The comments of this WellDetail.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WellDetail.


        :param comments: The comments of this WellDetail.
        :type comments: str
        """
        if comments is not None and len(comments) > 3000:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `3000`")

        self._comments = comments

    @property
    def company_of_person_responsible(self):
        """Gets the company_of_person_responsible of this WellDetail.


        :return: The company_of_person_responsible of this WellDetail.
        :rtype: OrganizationNameList
        """
        return self._company_of_person_responsible

    @company_of_person_responsible.setter
    def company_of_person_responsible(self, company_of_person_responsible):
        """Sets the company_of_person_responsible of this WellDetail.


        :param company_of_person_responsible: The company_of_person_responsible of this WellDetail.
        :type company_of_person_responsible: OrganizationNameList
        """
        if company_of_person_responsible is None:
            raise ValueError("Invalid value for `company_of_person_responsible`, must not be `None`")

        self._company_of_person_responsible = company_of_person_responsible

    @property
    def construction_end_date(self):
        """Gets the construction_end_date of this WellDetail.


        :return: The construction_end_date of this WellDetail.
        :rtype: date
        """
        return self._construction_end_date

    @construction_end_date.setter
    def construction_end_date(self, construction_end_date):
        """Sets the construction_end_date of this WellDetail.


        :param construction_end_date: The construction_end_date of this WellDetail.
        :type construction_end_date: date
        """

        self._construction_end_date = construction_end_date

    @property
    def construction_start_date(self):
        """Gets the construction_start_date of this WellDetail.


        :return: The construction_start_date of this WellDetail.
        :rtype: date
        """
        return self._construction_start_date

    @construction_start_date.setter
    def construction_start_date(self, construction_start_date):
        """Sets the construction_start_date of this WellDetail.


        :param construction_start_date: The construction_start_date of this WellDetail.
        :type construction_start_date: date
        """

        self._construction_start_date = construction_start_date

    @property
    def coordinate_acquisition_code(self):
        """Gets the coordinate_acquisition_code of this WellDetail.


        :return: The coordinate_acquisition_code of this WellDetail.
        :rtype: str
        """
        return self._coordinate_acquisition_code

    @coordinate_acquisition_code.setter
    def coordinate_acquisition_code(self, coordinate_acquisition_code):
        """Sets the coordinate_acquisition_code of this WellDetail.


        :param coordinate_acquisition_code: The coordinate_acquisition_code of this WellDetail.
        :type coordinate_acquisition_code: str
        """

        self._coordinate_acquisition_code = coordinate_acquisition_code

    @property
    def decommission_description_set(self):
        """Gets the decommission_description_set of this WellDetail.


        :return: The decommission_description_set of this WellDetail.
        :rtype: List[DecommissionDescription]
        """
        return self._decommission_description_set

    @decommission_description_set.setter
    def decommission_description_set(self, decommission_description_set):
        """Sets the decommission_description_set of this WellDetail.


        :param decommission_description_set: The decommission_description_set of this WellDetail.
        :type decommission_description_set: List[DecommissionDescription]
        """
        if decommission_description_set is None:
            raise ValueError("Invalid value for `decommission_description_set`, must not be `None`")

        self._decommission_description_set = decommission_description_set

    @property
    def decommission_details(self):
        """Gets the decommission_details of this WellDetail.


        :return: The decommission_details of this WellDetail.
        :rtype: str
        """
        return self._decommission_details

    @decommission_details.setter
    def decommission_details(self, decommission_details):
        """Sets the decommission_details of this WellDetail.


        :param decommission_details: The decommission_details of this WellDetail.
        :type decommission_details: str
        """
        if decommission_details is not None and len(decommission_details) > 250:
            raise ValueError("Invalid value for `decommission_details`, length must be less than or equal to `250`")

        self._decommission_details = decommission_details

    @property
    def decommission_end_date(self):
        """Gets the decommission_end_date of this WellDetail.


        :return: The decommission_end_date of this WellDetail.
        :rtype: date
        """
        return self._decommission_end_date

    @decommission_end_date.setter
    def decommission_end_date(self, decommission_end_date):
        """Sets the decommission_end_date of this WellDetail.


        :param decommission_end_date: The decommission_end_date of this WellDetail.
        :type decommission_end_date: date
        """

        self._decommission_end_date = decommission_end_date

    @property
    def decommission_method(self):
        """Gets the decommission_method of this WellDetail.


        :return: The decommission_method of this WellDetail.
        :rtype: str
        """
        return self._decommission_method

    @decommission_method.setter
    def decommission_method(self, decommission_method):
        """Sets the decommission_method of this WellDetail.


        :param decommission_method: The decommission_method of this WellDetail.
        :type decommission_method: str
        """

        self._decommission_method = decommission_method

    @property
    def decommission_reason(self):
        """Gets the decommission_reason of this WellDetail.


        :return: The decommission_reason of this WellDetail.
        :rtype: str
        """
        return self._decommission_reason

    @decommission_reason.setter
    def decommission_reason(self, decommission_reason):
        """Sets the decommission_reason of this WellDetail.


        :param decommission_reason: The decommission_reason of this WellDetail.
        :type decommission_reason: str
        """
        if decommission_reason is not None and len(decommission_reason) > 250:
            raise ValueError("Invalid value for `decommission_reason`, length must be less than or equal to `250`")

        self._decommission_reason = decommission_reason

    @property
    def decommission_start_date(self):
        """Gets the decommission_start_date of this WellDetail.


        :return: The decommission_start_date of this WellDetail.
        :rtype: date
        """
        return self._decommission_start_date

    @decommission_start_date.setter
    def decommission_start_date(self, decommission_start_date):
        """Sets the decommission_start_date of this WellDetail.


        :param decommission_start_date: The decommission_start_date of this WellDetail.
        :type decommission_start_date: date
        """

        self._decommission_start_date = decommission_start_date

    @property
    def development_hours(self):
        """Gets the development_hours of this WellDetail.


        :return: The development_hours of this WellDetail.
        :rtype: str
        """
        return self._development_hours

    @development_hours.setter
    def development_hours(self, development_hours):
        """Sets the development_hours of this WellDetail.


        :param development_hours: The development_hours of this WellDetail.
        :type development_hours: str
        """

        self._development_hours = development_hours

    @property
    def development_method(self):
        """Gets the development_method of this WellDetail.


        :return: The development_method of this WellDetail.
        :rtype: str
        """
        return self._development_method

    @development_method.setter
    def development_method(self, development_method):
        """Sets the development_method of this WellDetail.


        :param development_method: The development_method of this WellDetail.
        :type development_method: str
        """

        self._development_method = development_method

    @property
    def development_notes(self):
        """Gets the development_notes of this WellDetail.


        :return: The development_notes of this WellDetail.
        :rtype: str
        """
        return self._development_notes

    @development_notes.setter
    def development_notes(self, development_notes):
        """Sets the development_notes of this WellDetail.


        :param development_notes: The development_notes of this WellDetail.
        :type development_notes: str
        """
        if development_notes is not None and len(development_notes) > 255:
            raise ValueError("Invalid value for `development_notes`, length must be less than or equal to `255`")

        self._development_notes = development_notes

    @property
    def diameter(self):
        """Gets the diameter of this WellDetail.


        :return: The diameter of this WellDetail.
        :rtype: str
        """
        return self._diameter

    @diameter.setter
    def diameter(self, diameter):
        """Sets the diameter of this WellDetail.


        :param diameter: The diameter of this WellDetail.
        :type diameter: str
        """
        if diameter is not None and len(diameter) > 9:
            raise ValueError("Invalid value for `diameter`, length must be less than or equal to `9`")

        self._diameter = diameter

    @property
    def drawdown(self):
        """Gets the drawdown of this WellDetail.


        :return: The drawdown of this WellDetail.
        :rtype: str
        """
        return self._drawdown

    @drawdown.setter
    def drawdown(self, drawdown):
        """Sets the drawdown of this WellDetail.


        :param drawdown: The drawdown of this WellDetail.
        :type drawdown: str
        """

        self._drawdown = drawdown

    @property
    def drilling_company(self):
        """Gets the drilling_company of this WellDetail.


        :return: The drilling_company of this WellDetail.
        :rtype: str
        """
        return self._drilling_company

    @drilling_company.setter
    def drilling_company(self, drilling_company):
        """Sets the drilling_company of this WellDetail.


        :param drilling_company: The drilling_company of this WellDetail.
        :type drilling_company: str
        """

        self._drilling_company = drilling_company

    @property
    def drilling_method(self):
        """Gets the drilling_method of this WellDetail.


        :return: The drilling_method of this WellDetail.
        :rtype: str
        """
        return self._drilling_method

    @drilling_method.setter
    def drilling_method(self, drilling_method):
        """Sets the drilling_method of this WellDetail.


        :param drilling_method: The drilling_method of this WellDetail.
        :type drilling_method: str
        """

        self._drilling_method = drilling_method

    @property
    def ems(self):
        """Gets the ems of this WellDetail.


        :return: The ems of this WellDetail.
        :rtype: str
        """
        return self._ems

    @ems.setter
    def ems(self, ems):
        """Sets the ems of this WellDetail.


        :param ems: The ems of this WellDetail.
        :type ems: str
        """
        if ems is not None and len(ems) > 10:
            raise ValueError("Invalid value for `ems`, length must be less than or equal to `10`")

        self._ems = ems

    @property
    def filter_pack_from(self):
        """Gets the filter_pack_from of this WellDetail.


        :return: The filter_pack_from of this WellDetail.
        :rtype: str
        """
        return self._filter_pack_from

    @filter_pack_from.setter
    def filter_pack_from(self, filter_pack_from):
        """Sets the filter_pack_from of this WellDetail.


        :param filter_pack_from: The filter_pack_from of this WellDetail.
        :type filter_pack_from: str
        """

        self._filter_pack_from = filter_pack_from

    @property
    def filter_pack_material(self):
        """Gets the filter_pack_material of this WellDetail.


        :return: The filter_pack_material of this WellDetail.
        :rtype: str
        """
        return self._filter_pack_material

    @filter_pack_material.setter
    def filter_pack_material(self, filter_pack_material):
        """Sets the filter_pack_material of this WellDetail.


        :param filter_pack_material: The filter_pack_material of this WellDetail.
        :type filter_pack_material: str
        """

        self._filter_pack_material = filter_pack_material

    @property
    def filter_pack_material_size(self):
        """Gets the filter_pack_material_size of this WellDetail.


        :return: The filter_pack_material_size of this WellDetail.
        :rtype: str
        """
        return self._filter_pack_material_size

    @filter_pack_material_size.setter
    def filter_pack_material_size(self, filter_pack_material_size):
        """Sets the filter_pack_material_size of this WellDetail.


        :param filter_pack_material_size: The filter_pack_material_size of this WellDetail.
        :type filter_pack_material_size: str
        """

        self._filter_pack_material_size = filter_pack_material_size

    @property
    def filter_pack_thickness(self):
        """Gets the filter_pack_thickness of this WellDetail.


        :return: The filter_pack_thickness of this WellDetail.
        :rtype: str
        """
        return self._filter_pack_thickness

    @filter_pack_thickness.setter
    def filter_pack_thickness(self, filter_pack_thickness):
        """Sets the filter_pack_thickness of this WellDetail.


        :param filter_pack_thickness: The filter_pack_thickness of this WellDetail.
        :type filter_pack_thickness: str
        """

        self._filter_pack_thickness = filter_pack_thickness

    @property
    def filter_pack_to(self):
        """Gets the filter_pack_to of this WellDetail.


        :return: The filter_pack_to of this WellDetail.
        :rtype: str
        """
        return self._filter_pack_to

    @filter_pack_to.setter
    def filter_pack_to(self, filter_pack_to):
        """Sets the filter_pack_to of this WellDetail.


        :param filter_pack_to: The filter_pack_to of this WellDetail.
        :type filter_pack_to: str
        """

        self._filter_pack_to = filter_pack_to

    @property
    def final_casing_stick_up(self):
        """Gets the final_casing_stick_up of this WellDetail.


        :return: The final_casing_stick_up of this WellDetail.
        :rtype: str
        """
        return self._final_casing_stick_up

    @final_casing_stick_up.setter
    def final_casing_stick_up(self, final_casing_stick_up):
        """Sets the final_casing_stick_up of this WellDetail.


        :param final_casing_stick_up: The final_casing_stick_up of this WellDetail.
        :type final_casing_stick_up: str
        """

        self._final_casing_stick_up = final_casing_stick_up

    @property
    def finished_well_depth(self):
        """Gets the finished_well_depth of this WellDetail.


        :return: The finished_well_depth of this WellDetail.
        :rtype: str
        """
        return self._finished_well_depth

    @finished_well_depth.setter
    def finished_well_depth(self, finished_well_depth):
        """Sets the finished_well_depth of this WellDetail.


        :param finished_well_depth: The finished_well_depth of this WellDetail.
        :type finished_well_depth: str
        """

        self._finished_well_depth = finished_well_depth

    @property
    def ground_elevation(self):
        """Gets the ground_elevation of this WellDetail.


        :return: The ground_elevation of this WellDetail.
        :rtype: str
        """
        return self._ground_elevation

    @ground_elevation.setter
    def ground_elevation(self, ground_elevation):
        """Sets the ground_elevation of this WellDetail.


        :param ground_elevation: The ground_elevation of this WellDetail.
        :type ground_elevation: str
        """

        self._ground_elevation = ground_elevation

    @property
    def ground_elevation_method(self):
        """Gets the ground_elevation_method of this WellDetail.


        :return: The ground_elevation_method of this WellDetail.
        :rtype: str
        """
        return self._ground_elevation_method

    @ground_elevation_method.setter
    def ground_elevation_method(self, ground_elevation_method):
        """Sets the ground_elevation_method of this WellDetail.


        :param ground_elevation_method: The ground_elevation_method of this WellDetail.
        :type ground_elevation_method: str
        """

        self._ground_elevation_method = ground_elevation_method

    @property
    def hydraulic_conductivity(self):
        """Gets the hydraulic_conductivity of this WellDetail.


        :return: The hydraulic_conductivity of this WellDetail.
        :rtype: str
        """
        return self._hydraulic_conductivity

    @hydraulic_conductivity.setter
    def hydraulic_conductivity(self, hydraulic_conductivity):
        """Sets the hydraulic_conductivity of this WellDetail.


        :param hydraulic_conductivity: The hydraulic_conductivity of this WellDetail.
        :type hydraulic_conductivity: str
        """
        if hydraulic_conductivity is not None and len(hydraulic_conductivity) > 100:
            raise ValueError("Invalid value for `hydraulic_conductivity`, length must be less than or equal to `100`")

        self._hydraulic_conductivity = hydraulic_conductivity

    @property
    def hydro_fracturing_performed(self):
        """Gets the hydro_fracturing_performed of this WellDetail.


        :return: The hydro_fracturing_performed of this WellDetail.
        :rtype: bool
        """
        return self._hydro_fracturing_performed

    @hydro_fracturing_performed.setter
    def hydro_fracturing_performed(self, hydro_fracturing_performed):
        """Sets the hydro_fracturing_performed of this WellDetail.


        :param hydro_fracturing_performed: The hydro_fracturing_performed of this WellDetail.
        :type hydro_fracturing_performed: bool
        """

        self._hydro_fracturing_performed = hydro_fracturing_performed

    @property
    def hydro_fracturing_yield_increase(self):
        """Gets the hydro_fracturing_yield_increase of this WellDetail.


        :return: The hydro_fracturing_yield_increase of this WellDetail.
        :rtype: str
        """
        return self._hydro_fracturing_yield_increase

    @hydro_fracturing_yield_increase.setter
    def hydro_fracturing_yield_increase(self, hydro_fracturing_yield_increase):
        """Sets the hydro_fracturing_yield_increase of this WellDetail.


        :param hydro_fracturing_yield_increase: The hydro_fracturing_yield_increase of this WellDetail.
        :type hydro_fracturing_yield_increase: str
        """

        self._hydro_fracturing_yield_increase = hydro_fracturing_yield_increase

    @property
    def id_plate_attached_by(self):
        """Gets the id_plate_attached_by of this WellDetail.


        :return: The id_plate_attached_by of this WellDetail.
        :rtype: str
        """
        return self._id_plate_attached_by

    @id_plate_attached_by.setter
    def id_plate_attached_by(self, id_plate_attached_by):
        """Sets the id_plate_attached_by of this WellDetail.


        :param id_plate_attached_by: The id_plate_attached_by of this WellDetail.
        :type id_plate_attached_by: str
        """
        if id_plate_attached_by is not None and len(id_plate_attached_by) > 100:
            raise ValueError("Invalid value for `id_plate_attached_by`, length must be less than or equal to `100`")

        self._id_plate_attached_by = id_plate_attached_by

    @property
    def identification_plate_number(self):
        """Gets the identification_plate_number of this WellDetail.


        :return: The identification_plate_number of this WellDetail.
        :rtype: int
        """
        return self._identification_plate_number

    @identification_plate_number.setter
    def identification_plate_number(self, identification_plate_number):
        """Sets the identification_plate_number of this WellDetail.


        :param identification_plate_number: The identification_plate_number of this WellDetail.
        :type identification_plate_number: int
        """
        if identification_plate_number is not None and identification_plate_number > 2147483647:
            raise ValueError("Invalid value for `identification_plate_number`, must be a value less than or equal to `2147483647`")
        if identification_plate_number is not None and identification_plate_number < 0:
            raise ValueError("Invalid value for `identification_plate_number`, must be a value greater than or equal to `0`")

        self._identification_plate_number = identification_plate_number

    @property
    def intended_water_use(self):
        """Gets the intended_water_use of this WellDetail.


        :return: The intended_water_use of this WellDetail.
        :rtype: str
        """
        return self._intended_water_use

    @intended_water_use.setter
    def intended_water_use(self, intended_water_use):
        """Sets the intended_water_use of this WellDetail.


        :param intended_water_use: The intended_water_use of this WellDetail.
        :type intended_water_use: str
        """

        self._intended_water_use = intended_water_use

    @property
    def land_district(self):
        """Gets the land_district of this WellDetail.


        :return: The land_district of this WellDetail.
        :rtype: str
        """
        return self._land_district

    @land_district.setter
    def land_district(self, land_district):
        """Sets the land_district of this WellDetail.


        :param land_district: The land_district of this WellDetail.
        :type land_district: str
        """

        self._land_district = land_district

    @property
    def latitude(self):
        """Gets the latitude of this WellDetail.


        :return: The latitude of this WellDetail.
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this WellDetail.


        :param latitude: The latitude of this WellDetail.
        :type latitude: str
        """

        self._latitude = latitude

    @property
    def legal_block(self):
        """Gets the legal_block of this WellDetail.


        :return: The legal_block of this WellDetail.
        :rtype: str
        """
        return self._legal_block

    @legal_block.setter
    def legal_block(self, legal_block):
        """Sets the legal_block of this WellDetail.


        :param legal_block: The legal_block of this WellDetail.
        :type legal_block: str
        """
        if legal_block is not None and len(legal_block) > 10:
            raise ValueError("Invalid value for `legal_block`, length must be less than or equal to `10`")

        self._legal_block = legal_block

    @property
    def legal_district_lot(self):
        """Gets the legal_district_lot of this WellDetail.


        :return: The legal_district_lot of this WellDetail.
        :rtype: str
        """
        return self._legal_district_lot

    @legal_district_lot.setter
    def legal_district_lot(self, legal_district_lot):
        """Sets the legal_district_lot of this WellDetail.


        :param legal_district_lot: The legal_district_lot of this WellDetail.
        :type legal_district_lot: str
        """
        if legal_district_lot is not None and len(legal_district_lot) > 20:
            raise ValueError("Invalid value for `legal_district_lot`, length must be less than or equal to `20`")

        self._legal_district_lot = legal_district_lot

    @property
    def legal_lot(self):
        """Gets the legal_lot of this WellDetail.


        :return: The legal_lot of this WellDetail.
        :rtype: str
        """
        return self._legal_lot

    @legal_lot.setter
    def legal_lot(self, legal_lot):
        """Sets the legal_lot of this WellDetail.


        :param legal_lot: The legal_lot of this WellDetail.
        :type legal_lot: str
        """
        if legal_lot is not None and len(legal_lot) > 10:
            raise ValueError("Invalid value for `legal_lot`, length must be less than or equal to `10`")

        self._legal_lot = legal_lot

    @property
    def legal_pid(self):
        """Gets the legal_pid of this WellDetail.


        :return: The legal_pid of this WellDetail.
        :rtype: int
        """
        return self._legal_pid

    @legal_pid.setter
    def legal_pid(self, legal_pid):
        """Sets the legal_pid of this WellDetail.


        :param legal_pid: The legal_pid of this WellDetail.
        :type legal_pid: int
        """
        if legal_pid is not None and legal_pid > 2147483647:
            raise ValueError("Invalid value for `legal_pid`, must be a value less than or equal to `2147483647`")
        if legal_pid is not None and legal_pid < 0:
            raise ValueError("Invalid value for `legal_pid`, must be a value greater than or equal to `0`")

        self._legal_pid = legal_pid

    @property
    def legal_plan(self):
        """Gets the legal_plan of this WellDetail.


        :return: The legal_plan of this WellDetail.
        :rtype: str
        """
        return self._legal_plan

    @legal_plan.setter
    def legal_plan(self, legal_plan):
        """Sets the legal_plan of this WellDetail.


        :param legal_plan: The legal_plan of this WellDetail.
        :type legal_plan: str
        """
        if legal_plan is not None and len(legal_plan) > 20:
            raise ValueError("Invalid value for `legal_plan`, length must be less than or equal to `20`")

        self._legal_plan = legal_plan

    @property
    def legal_range(self):
        """Gets the legal_range of this WellDetail.


        :return: The legal_range of this WellDetail.
        :rtype: str
        """
        return self._legal_range

    @legal_range.setter
    def legal_range(self, legal_range):
        """Sets the legal_range of this WellDetail.


        :param legal_range: The legal_range of this WellDetail.
        :type legal_range: str
        """
        if legal_range is not None and len(legal_range) > 10:
            raise ValueError("Invalid value for `legal_range`, length must be less than or equal to `10`")

        self._legal_range = legal_range

    @property
    def legal_section(self):
        """Gets the legal_section of this WellDetail.


        :return: The legal_section of this WellDetail.
        :rtype: str
        """
        return self._legal_section

    @legal_section.setter
    def legal_section(self, legal_section):
        """Sets the legal_section of this WellDetail.


        :param legal_section: The legal_section of this WellDetail.
        :type legal_section: str
        """
        if legal_section is not None and len(legal_section) > 10:
            raise ValueError("Invalid value for `legal_section`, length must be less than or equal to `10`")

        self._legal_section = legal_section

    @property
    def legal_township(self):
        """Gets the legal_township of this WellDetail.


        :return: The legal_township of this WellDetail.
        :rtype: str
        """
        return self._legal_township

    @legal_township.setter
    def legal_township(self, legal_township):
        """Sets the legal_township of this WellDetail.


        :param legal_township: The legal_township of this WellDetail.
        :type legal_township: str
        """
        if legal_township is not None and len(legal_township) > 20:
            raise ValueError("Invalid value for `legal_township`, length must be less than or equal to `20`")

        self._legal_township = legal_township

    @property
    def licenced_status(self):
        """Gets the licenced_status of this WellDetail.


        :return: The licenced_status of this WellDetail.
        :rtype: str
        """
        return self._licenced_status

    @licenced_status.setter
    def licenced_status(self, licenced_status):
        """Sets the licenced_status of this WellDetail.


        :param licenced_status: The licenced_status of this WellDetail.
        :type licenced_status: str
        """

        self._licenced_status = licenced_status

    @property
    def liner_diameter(self):
        """Gets the liner_diameter of this WellDetail.


        :return: The liner_diameter of this WellDetail.
        :rtype: str
        """
        return self._liner_diameter

    @liner_diameter.setter
    def liner_diameter(self, liner_diameter):
        """Sets the liner_diameter of this WellDetail.


        :param liner_diameter: The liner_diameter of this WellDetail.
        :type liner_diameter: str
        """

        self._liner_diameter = liner_diameter

    @property
    def liner_from(self):
        """Gets the liner_from of this WellDetail.


        :return: The liner_from of this WellDetail.
        :rtype: str
        """
        return self._liner_from

    @liner_from.setter
    def liner_from(self, liner_from):
        """Sets the liner_from of this WellDetail.


        :param liner_from: The liner_from of this WellDetail.
        :type liner_from: str
        """

        self._liner_from = liner_from

    @property
    def liner_material(self):
        """Gets the liner_material of this WellDetail.


        :return: The liner_material of this WellDetail.
        :rtype: str
        """
        return self._liner_material

    @liner_material.setter
    def liner_material(self, liner_material):
        """Sets the liner_material of this WellDetail.


        :param liner_material: The liner_material of this WellDetail.
        :type liner_material: str
        """

        self._liner_material = liner_material

    @property
    def liner_thickness(self):
        """Gets the liner_thickness of this WellDetail.


        :return: The liner_thickness of this WellDetail.
        :rtype: str
        """
        return self._liner_thickness

    @liner_thickness.setter
    def liner_thickness(self, liner_thickness):
        """Sets the liner_thickness of this WellDetail.


        :param liner_thickness: The liner_thickness of this WellDetail.
        :type liner_thickness: str
        """

        self._liner_thickness = liner_thickness

    @property
    def liner_to(self):
        """Gets the liner_to of this WellDetail.


        :return: The liner_to of this WellDetail.
        :rtype: str
        """
        return self._liner_to

    @liner_to.setter
    def liner_to(self, liner_to):
        """Sets the liner_to of this WellDetail.


        :param liner_to: The liner_to of this WellDetail.
        :type liner_to: str
        """

        self._liner_to = liner_to

    @property
    def linerperforation_set(self):
        """Gets the linerperforation_set of this WellDetail.


        :return: The linerperforation_set of this WellDetail.
        :rtype: List[LinerPerforation]
        """
        return self._linerperforation_set

    @linerperforation_set.setter
    def linerperforation_set(self, linerperforation_set):
        """Sets the linerperforation_set of this WellDetail.


        :param linerperforation_set: The linerperforation_set of this WellDetail.
        :type linerperforation_set: List[LinerPerforation]
        """
        if linerperforation_set is None:
            raise ValueError("Invalid value for `linerperforation_set`, must not be `None`")

        self._linerperforation_set = linerperforation_set

    @property
    def lithologydescription_set(self):
        """Gets the lithologydescription_set of this WellDetail.


        :return: The lithologydescription_set of this WellDetail.
        :rtype: List[LithologyDescription]
        """
        return self._lithologydescription_set

    @lithologydescription_set.setter
    def lithologydescription_set(self, lithologydescription_set):
        """Sets the lithologydescription_set of this WellDetail.


        :param lithologydescription_set: The lithologydescription_set of this WellDetail.
        :type lithologydescription_set: List[LithologyDescription]
        """
        if lithologydescription_set is None:
            raise ValueError("Invalid value for `lithologydescription_set`, must not be `None`")

        self._lithologydescription_set = lithologydescription_set

    @property
    def longitude(self):
        """Gets the longitude of this WellDetail.


        :return: The longitude of this WellDetail.
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this WellDetail.


        :param longitude: The longitude of this WellDetail.
        :type longitude: str
        """

        self._longitude = longitude

    @property
    def observation_well_number(self):
        """Gets the observation_well_number of this WellDetail.


        :return: The observation_well_number of this WellDetail.
        :rtype: str
        """
        return self._observation_well_number

    @observation_well_number.setter
    def observation_well_number(self, observation_well_number):
        """Sets the observation_well_number of this WellDetail.


        :param observation_well_number: The observation_well_number of this WellDetail.
        :type observation_well_number: str
        """
        if observation_well_number is not None and len(observation_well_number) > 30:
            raise ValueError("Invalid value for `observation_well_number`, length must be less than or equal to `30`")

        self._observation_well_number = observation_well_number

    @property
    def observation_well_status(self):
        """Gets the observation_well_status of this WellDetail.


        :return: The observation_well_status of this WellDetail.
        :rtype: str
        """
        return self._observation_well_status

    @observation_well_status.setter
    def observation_well_status(self, observation_well_status):
        """Sets the observation_well_status of this WellDetail.


        :param observation_well_status: The observation_well_status of this WellDetail.
        :type observation_well_status: str
        """

        self._observation_well_status = observation_well_status

    @property
    def other_drilling_method(self):
        """Gets the other_drilling_method of this WellDetail.


        :return: The other_drilling_method of this WellDetail.
        :rtype: str
        """
        return self._other_drilling_method

    @other_drilling_method.setter
    def other_drilling_method(self, other_drilling_method):
        """Sets the other_drilling_method of this WellDetail.


        :param other_drilling_method: The other_drilling_method of this WellDetail.
        :type other_drilling_method: str
        """
        if other_drilling_method is not None and len(other_drilling_method) > 50:
            raise ValueError("Invalid value for `other_drilling_method`, length must be less than or equal to `50`")

        self._other_drilling_method = other_drilling_method

    @property
    def other_screen_bottom(self):
        """Gets the other_screen_bottom of this WellDetail.


        :return: The other_screen_bottom of this WellDetail.
        :rtype: str
        """
        return self._other_screen_bottom

    @other_screen_bottom.setter
    def other_screen_bottom(self, other_screen_bottom):
        """Sets the other_screen_bottom of this WellDetail.


        :param other_screen_bottom: The other_screen_bottom of this WellDetail.
        :type other_screen_bottom: str
        """
        if other_screen_bottom is not None and len(other_screen_bottom) > 50:
            raise ValueError("Invalid value for `other_screen_bottom`, length must be less than or equal to `50`")

        self._other_screen_bottom = other_screen_bottom

    @property
    def other_screen_material(self):
        """Gets the other_screen_material of this WellDetail.


        :return: The other_screen_material of this WellDetail.
        :rtype: str
        """
        return self._other_screen_material

    @other_screen_material.setter
    def other_screen_material(self, other_screen_material):
        """Sets the other_screen_material of this WellDetail.


        :param other_screen_material: The other_screen_material of this WellDetail.
        :type other_screen_material: str
        """
        if other_screen_material is not None and len(other_screen_material) > 50:
            raise ValueError("Invalid value for `other_screen_material`, length must be less than or equal to `50`")

        self._other_screen_material = other_screen_material

    @property
    def owner_full_name(self):
        """Gets the owner_full_name of this WellDetail.


        :return: The owner_full_name of this WellDetail.
        :rtype: str
        """
        return self._owner_full_name

    @owner_full_name.setter
    def owner_full_name(self, owner_full_name):
        """Sets the owner_full_name of this WellDetail.


        :param owner_full_name: The owner_full_name of this WellDetail.
        :type owner_full_name: str
        """
        if owner_full_name is None:
            raise ValueError("Invalid value for `owner_full_name`, must not be `None`")
        if owner_full_name is not None and len(owner_full_name) > 200:
            raise ValueError("Invalid value for `owner_full_name`, length must be less than or equal to `200`")

        self._owner_full_name = owner_full_name

    @property
    def person_responsible(self):
        """Gets the person_responsible of this WellDetail.


        :return: The person_responsible of this WellDetail.
        :rtype: PersonBasic
        """
        return self._person_responsible

    @person_responsible.setter
    def person_responsible(self, person_responsible):
        """Sets the person_responsible of this WellDetail.


        :param person_responsible: The person_responsible of this WellDetail.
        :type person_responsible: PersonBasic
        """
        if person_responsible is None:
            raise ValueError("Invalid value for `person_responsible`, must not be `None`")

        self._person_responsible = person_responsible

    @property
    def recommended_pump_depth(self):
        """Gets the recommended_pump_depth of this WellDetail.


        :return: The recommended_pump_depth of this WellDetail.
        :rtype: str
        """
        return self._recommended_pump_depth

    @recommended_pump_depth.setter
    def recommended_pump_depth(self, recommended_pump_depth):
        """Sets the recommended_pump_depth of this WellDetail.


        :param recommended_pump_depth: The recommended_pump_depth of this WellDetail.
        :type recommended_pump_depth: str
        """

        self._recommended_pump_depth = recommended_pump_depth

    @property
    def recommended_pump_rate(self):
        """Gets the recommended_pump_rate of this WellDetail.


        :return: The recommended_pump_rate of this WellDetail.
        :rtype: str
        """
        return self._recommended_pump_rate

    @recommended_pump_rate.setter
    def recommended_pump_rate(self, recommended_pump_rate):
        """Sets the recommended_pump_rate of this WellDetail.


        :param recommended_pump_rate: The recommended_pump_rate of this WellDetail.
        :type recommended_pump_rate: str
        """

        self._recommended_pump_rate = recommended_pump_rate

    @property
    def screen_bottom(self):
        """Gets the screen_bottom of this WellDetail.


        :return: The screen_bottom of this WellDetail.
        :rtype: str
        """
        return self._screen_bottom

    @screen_bottom.setter
    def screen_bottom(self, screen_bottom):
        """Sets the screen_bottom of this WellDetail.


        :param screen_bottom: The screen_bottom of this WellDetail.
        :type screen_bottom: str
        """

        self._screen_bottom = screen_bottom

    @property
    def screen_information(self):
        """Gets the screen_information of this WellDetail.


        :return: The screen_information of this WellDetail.
        :rtype: str
        """
        return self._screen_information

    @screen_information.setter
    def screen_information(self, screen_information):
        """Sets the screen_information of this WellDetail.


        :param screen_information: The screen_information of this WellDetail.
        :type screen_information: str
        """
        if screen_information is not None and len(screen_information) > 300:
            raise ValueError("Invalid value for `screen_information`, length must be less than or equal to `300`")

        self._screen_information = screen_information

    @property
    def screen_intake_method(self):
        """Gets the screen_intake_method of this WellDetail.


        :return: The screen_intake_method of this WellDetail.
        :rtype: str
        """
        return self._screen_intake_method

    @screen_intake_method.setter
    def screen_intake_method(self, screen_intake_method):
        """Sets the screen_intake_method of this WellDetail.


        :param screen_intake_method: The screen_intake_method of this WellDetail.
        :type screen_intake_method: str
        """

        self._screen_intake_method = screen_intake_method

    @property
    def screen_material(self):
        """Gets the screen_material of this WellDetail.


        :return: The screen_material of this WellDetail.
        :rtype: str
        """
        return self._screen_material

    @screen_material.setter
    def screen_material(self, screen_material):
        """Sets the screen_material of this WellDetail.


        :param screen_material: The screen_material of this WellDetail.
        :type screen_material: str
        """

        self._screen_material = screen_material

    @property
    def screen_opening(self):
        """Gets the screen_opening of this WellDetail.


        :return: The screen_opening of this WellDetail.
        :rtype: str
        """
        return self._screen_opening

    @screen_opening.setter
    def screen_opening(self, screen_opening):
        """Sets the screen_opening of this WellDetail.


        :param screen_opening: The screen_opening of this WellDetail.
        :type screen_opening: str
        """

        self._screen_opening = screen_opening

    @property
    def screen_set(self):
        """Gets the screen_set of this WellDetail.


        :return: The screen_set of this WellDetail.
        :rtype: List[Screen]
        """
        return self._screen_set

    @screen_set.setter
    def screen_set(self, screen_set):
        """Sets the screen_set of this WellDetail.


        :param screen_set: The screen_set of this WellDetail.
        :type screen_set: List[Screen]
        """
        if screen_set is None:
            raise ValueError("Invalid value for `screen_set`, must not be `None`")

        self._screen_set = screen_set

    @property
    def screen_type(self):
        """Gets the screen_type of this WellDetail.


        :return: The screen_type of this WellDetail.
        :rtype: str
        """
        return self._screen_type

    @screen_type.setter
    def screen_type(self, screen_type):
        """Sets the screen_type of this WellDetail.


        :param screen_type: The screen_type of this WellDetail.
        :type screen_type: str
        """

        self._screen_type = screen_type

    @property
    def sealant_material(self):
        """Gets the sealant_material of this WellDetail.


        :return: The sealant_material of this WellDetail.
        :rtype: str
        """
        return self._sealant_material

    @sealant_material.setter
    def sealant_material(self, sealant_material):
        """Sets the sealant_material of this WellDetail.


        :param sealant_material: The sealant_material of this WellDetail.
        :type sealant_material: str
        """
        if sealant_material is not None and len(sealant_material) > 100:
            raise ValueError("Invalid value for `sealant_material`, length must be less than or equal to `100`")

        self._sealant_material = sealant_material

    @property
    def specific_storage(self):
        """Gets the specific_storage of this WellDetail.


        :return: The specific_storage of this WellDetail.
        :rtype: str
        """
        return self._specific_storage

    @specific_storage.setter
    def specific_storage(self, specific_storage):
        """Sets the specific_storage of this WellDetail.


        :param specific_storage: The specific_storage of this WellDetail.
        :type specific_storage: str
        """
        if specific_storage is not None and len(specific_storage) > 100:
            raise ValueError("Invalid value for `specific_storage`, length must be less than or equal to `100`")

        self._specific_storage = specific_storage

    @property
    def specific_yield(self):
        """Gets the specific_yield of this WellDetail.


        :return: The specific_yield of this WellDetail.
        :rtype: str
        """
        return self._specific_yield

    @specific_yield.setter
    def specific_yield(self, specific_yield):
        """Sets the specific_yield of this WellDetail.


        :param specific_yield: The specific_yield of this WellDetail.
        :type specific_yield: str
        """

        self._specific_yield = specific_yield

    @property
    def static_level_before_test(self):
        """Gets the static_level_before_test of this WellDetail.


        :return: The static_level_before_test of this WellDetail.
        :rtype: str
        """
        return self._static_level_before_test

    @static_level_before_test.setter
    def static_level_before_test(self, static_level_before_test):
        """Sets the static_level_before_test of this WellDetail.


        :param static_level_before_test: The static_level_before_test of this WellDetail.
        :type static_level_before_test: str
        """

        self._static_level_before_test = static_level_before_test

    @property
    def static_water_level(self):
        """Gets the static_water_level of this WellDetail.


        :return: The static_water_level of this WellDetail.
        :rtype: str
        """
        return self._static_water_level

    @static_water_level.setter
    def static_water_level(self, static_water_level):
        """Sets the static_water_level of this WellDetail.


        :param static_water_level: The static_water_level of this WellDetail.
        :type static_water_level: str
        """

        self._static_water_level = static_water_level

    @property
    def storativity(self):
        """Gets the storativity of this WellDetail.


        :return: The storativity of this WellDetail.
        :rtype: str
        """
        return self._storativity

    @storativity.setter
    def storativity(self, storativity):
        """Sets the storativity of this WellDetail.


        :param storativity: The storativity of this WellDetail.
        :type storativity: str
        """

        self._storativity = storativity

    @property
    def street_address(self):
        """Gets the street_address of this WellDetail.


        :return: The street_address of this WellDetail.
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this WellDetail.


        :param street_address: The street_address of this WellDetail.
        :type street_address: str
        """
        if street_address is not None and len(street_address) > 100:
            raise ValueError("Invalid value for `street_address`, length must be less than or equal to `100`")

        self._street_address = street_address

    @property
    def surface_seal_depth(self):
        """Gets the surface_seal_depth of this WellDetail.


        :return: The surface_seal_depth of this WellDetail.
        :rtype: str
        """
        return self._surface_seal_depth

    @surface_seal_depth.setter
    def surface_seal_depth(self, surface_seal_depth):
        """Sets the surface_seal_depth of this WellDetail.


        :param surface_seal_depth: The surface_seal_depth of this WellDetail.
        :type surface_seal_depth: str
        """

        self._surface_seal_depth = surface_seal_depth

    @property
    def surface_seal_length(self):
        """Gets the surface_seal_length of this WellDetail.


        :return: The surface_seal_length of this WellDetail.
        :rtype: str
        """
        return self._surface_seal_length

    @surface_seal_length.setter
    def surface_seal_length(self, surface_seal_length):
        """Sets the surface_seal_length of this WellDetail.


        :param surface_seal_length: The surface_seal_length of this WellDetail.
        :type surface_seal_length: str
        """

        self._surface_seal_length = surface_seal_length

    @property
    def surface_seal_material(self):
        """Gets the surface_seal_material of this WellDetail.


        :return: The surface_seal_material of this WellDetail.
        :rtype: str
        """
        return self._surface_seal_material

    @surface_seal_material.setter
    def surface_seal_material(self, surface_seal_material):
        """Sets the surface_seal_material of this WellDetail.


        :param surface_seal_material: The surface_seal_material of this WellDetail.
        :type surface_seal_material: str
        """

        self._surface_seal_material = surface_seal_material

    @property
    def surface_seal_method(self):
        """Gets the surface_seal_method of this WellDetail.


        :return: The surface_seal_method of this WellDetail.
        :rtype: str
        """
        return self._surface_seal_method

    @surface_seal_method.setter
    def surface_seal_method(self, surface_seal_method):
        """Sets the surface_seal_method of this WellDetail.


        :param surface_seal_method: The surface_seal_method of this WellDetail.
        :type surface_seal_method: str
        """

        self._surface_seal_method = surface_seal_method

    @property
    def surface_seal_thickness(self):
        """Gets the surface_seal_thickness of this WellDetail.


        :return: The surface_seal_thickness of this WellDetail.
        :rtype: str
        """
        return self._surface_seal_thickness

    @surface_seal_thickness.setter
    def surface_seal_thickness(self, surface_seal_thickness):
        """Sets the surface_seal_thickness of this WellDetail.


        :param surface_seal_thickness: The surface_seal_thickness of this WellDetail.
        :type surface_seal_thickness: str
        """

        self._surface_seal_thickness = surface_seal_thickness

    @property
    def testing_duration(self):
        """Gets the testing_duration of this WellDetail.


        :return: The testing_duration of this WellDetail.
        :rtype: int
        """
        return self._testing_duration

    @testing_duration.setter
    def testing_duration(self, testing_duration):
        """Sets the testing_duration of this WellDetail.


        :param testing_duration: The testing_duration of this WellDetail.
        :type testing_duration: int
        """
        if testing_duration is not None and testing_duration > 2147483647:
            raise ValueError("Invalid value for `testing_duration`, must be a value less than or equal to `2147483647`")
        if testing_duration is not None and testing_duration < 0:
            raise ValueError("Invalid value for `testing_duration`, must be a value greater than or equal to `0`")

        self._testing_duration = testing_duration

    @property
    def testing_method(self):
        """Gets the testing_method of this WellDetail.


        :return: The testing_method of this WellDetail.
        :rtype: str
        """
        return self._testing_method

    @testing_method.setter
    def testing_method(self, testing_method):
        """Sets the testing_method of this WellDetail.


        :param testing_method: The testing_method of this WellDetail.
        :type testing_method: str
        """
        if testing_method is not None and len(testing_method) > 100:
            raise ValueError("Invalid value for `testing_method`, length must be less than or equal to `100`")

        self._testing_method = testing_method

    @property
    def total_depth_drilled(self):
        """Gets the total_depth_drilled of this WellDetail.


        :return: The total_depth_drilled of this WellDetail.
        :rtype: str
        """
        return self._total_depth_drilled

    @total_depth_drilled.setter
    def total_depth_drilled(self, total_depth_drilled):
        """Sets the total_depth_drilled of this WellDetail.


        :param total_depth_drilled: The total_depth_drilled of this WellDetail.
        :type total_depth_drilled: str
        """

        self._total_depth_drilled = total_depth_drilled

    @property
    def transmissivity(self):
        """Gets the transmissivity of this WellDetail.


        :return: The transmissivity of this WellDetail.
        :rtype: str
        """
        return self._transmissivity

    @transmissivity.setter
    def transmissivity(self, transmissivity):
        """Sets the transmissivity of this WellDetail.


        :param transmissivity: The transmissivity of this WellDetail.
        :type transmissivity: str
        """

        self._transmissivity = transmissivity

    @property
    def utm_easting(self):
        """Gets the utm_easting of this WellDetail.


        :return: The utm_easting of this WellDetail.
        :rtype: int
        """
        return self._utm_easting

    @utm_easting.setter
    def utm_easting(self, utm_easting):
        """Sets the utm_easting of this WellDetail.


        :param utm_easting: The utm_easting of this WellDetail.
        :type utm_easting: int
        """
        if utm_easting is not None and utm_easting > 2147483647:
            raise ValueError("Invalid value for `utm_easting`, must be a value less than or equal to `2147483647`")
        if utm_easting is not None and utm_easting < -2147483648:
            raise ValueError("Invalid value for `utm_easting`, must be a value greater than or equal to `-2147483648`")

        self._utm_easting = utm_easting

    @property
    def utm_northing(self):
        """Gets the utm_northing of this WellDetail.


        :return: The utm_northing of this WellDetail.
        :rtype: int
        """
        return self._utm_northing

    @utm_northing.setter
    def utm_northing(self, utm_northing):
        """Sets the utm_northing of this WellDetail.


        :param utm_northing: The utm_northing of this WellDetail.
        :type utm_northing: int
        """
        if utm_northing is not None and utm_northing > 2147483647:
            raise ValueError("Invalid value for `utm_northing`, must be a value less than or equal to `2147483647`")
        if utm_northing is not None and utm_northing < -2147483648:
            raise ValueError("Invalid value for `utm_northing`, must be a value greater than or equal to `-2147483648`")

        self._utm_northing = utm_northing

    @property
    def utm_zone_code(self):
        """Gets the utm_zone_code of this WellDetail.


        :return: The utm_zone_code of this WellDetail.
        :rtype: str
        """
        return self._utm_zone_code

    @utm_zone_code.setter
    def utm_zone_code(self, utm_zone_code):
        """Sets the utm_zone_code of this WellDetail.


        :param utm_zone_code: The utm_zone_code of this WellDetail.
        :type utm_zone_code: str
        """
        if utm_zone_code is not None and len(utm_zone_code) > 10:
            raise ValueError("Invalid value for `utm_zone_code`, length must be less than or equal to `10`")

        self._utm_zone_code = utm_zone_code

    @property
    def water_quality_characteristics(self):
        """Gets the water_quality_characteristics of this WellDetail.


        :return: The water_quality_characteristics of this WellDetail.
        :rtype: list[str]
        """
        return self._water_quality_characteristics

    @water_quality_characteristics.setter
    def water_quality_characteristics(self, water_quality_characteristics):
        """Sets the water_quality_characteristics of this WellDetail.


        :param water_quality_characteristics: The water_quality_characteristics of this WellDetail.
        :type water_quality_characteristics: list[str]
        """

        self._water_quality_characteristics = water_quality_characteristics

    @property
    def water_quality_colour(self):
        """Gets the water_quality_colour of this WellDetail.


        :return: The water_quality_colour of this WellDetail.
        :rtype: str
        """
        return self._water_quality_colour

    @water_quality_colour.setter
    def water_quality_colour(self, water_quality_colour):
        """Sets the water_quality_colour of this WellDetail.


        :param water_quality_colour: The water_quality_colour of this WellDetail.
        :type water_quality_colour: str
        """
        if water_quality_colour is not None and len(water_quality_colour) > 60:
            raise ValueError("Invalid value for `water_quality_colour`, length must be less than or equal to `60`")

        self._water_quality_colour = water_quality_colour

    @property
    def water_quality_odour(self):
        """Gets the water_quality_odour of this WellDetail.


        :return: The water_quality_odour of this WellDetail.
        :rtype: str
        """
        return self._water_quality_odour

    @water_quality_odour.setter
    def water_quality_odour(self, water_quality_odour):
        """Sets the water_quality_odour of this WellDetail.


        :param water_quality_odour: The water_quality_odour of this WellDetail.
        :type water_quality_odour: str
        """
        if water_quality_odour is not None and len(water_quality_odour) > 60:
            raise ValueError("Invalid value for `water_quality_odour`, length must be less than or equal to `60`")

        self._water_quality_odour = water_quality_odour

    @property
    def water_supply_system_name(self):
        """Gets the water_supply_system_name of this WellDetail.


        :return: The water_supply_system_name of this WellDetail.
        :rtype: str
        """
        return self._water_supply_system_name

    @water_supply_system_name.setter
    def water_supply_system_name(self, water_supply_system_name):
        """Sets the water_supply_system_name of this WellDetail.


        :param water_supply_system_name: The water_supply_system_name of this WellDetail.
        :type water_supply_system_name: str
        """
        if water_supply_system_name is not None and len(water_supply_system_name) > 80:
            raise ValueError("Invalid value for `water_supply_system_name`, length must be less than or equal to `80`")

        self._water_supply_system_name = water_supply_system_name

    @property
    def water_supply_system_well_name(self):
        """Gets the water_supply_system_well_name of this WellDetail.


        :return: The water_supply_system_well_name of this WellDetail.
        :rtype: str
        """
        return self._water_supply_system_well_name

    @water_supply_system_well_name.setter
    def water_supply_system_well_name(self, water_supply_system_well_name):
        """Sets the water_supply_system_well_name of this WellDetail.


        :param water_supply_system_well_name: The water_supply_system_well_name of this WellDetail.
        :type water_supply_system_well_name: str
        """
        if water_supply_system_well_name is not None and len(water_supply_system_well_name) > 80:
            raise ValueError("Invalid value for `water_supply_system_well_name`, length must be less than or equal to `80`")

        self._water_supply_system_well_name = water_supply_system_well_name

    @property
    def well(self):
        """Gets the well of this WellDetail.


        :return: The well of this WellDetail.
        :rtype: int
        """
        return self._well

    @well.setter
    def well(self, well):
        """Sets the well of this WellDetail.


        :param well: The well of this WellDetail.
        :type well: int
        """
        if well is None:
            raise ValueError("Invalid value for `well`, must not be `None`")

        self._well = well

    @property
    def well_cap_type(self):
        """Gets the well_cap_type of this WellDetail.


        :return: The well_cap_type of this WellDetail.
        :rtype: str
        """
        return self._well_cap_type

    @well_cap_type.setter
    def well_cap_type(self, well_cap_type):
        """Sets the well_cap_type of this WellDetail.


        :param well_cap_type: The well_cap_type of this WellDetail.
        :type well_cap_type: str
        """
        if well_cap_type is not None and len(well_cap_type) > 40:
            raise ValueError("Invalid value for `well_cap_type`, length must be less than or equal to `40`")

        self._well_cap_type = well_cap_type

    @property
    def well_class(self):
        """Gets the well_class of this WellDetail.


        :return: The well_class of this WellDetail.
        :rtype: str
        """
        return self._well_class

    @well_class.setter
    def well_class(self, well_class):
        """Sets the well_class of this WellDetail.


        :param well_class: The well_class of this WellDetail.
        :type well_class: str
        """

        self._well_class = well_class

    @property
    def well_disinfected(self):
        """Gets the well_disinfected of this WellDetail.


        :return: The well_disinfected of this WellDetail.
        :rtype: bool
        """
        return self._well_disinfected

    @well_disinfected.setter
    def well_disinfected(self, well_disinfected):
        """Sets the well_disinfected of this WellDetail.


        :param well_disinfected: The well_disinfected of this WellDetail.
        :type well_disinfected: bool
        """

        self._well_disinfected = well_disinfected

    @property
    def well_guid(self):
        """Gets the well_guid of this WellDetail.


        :return: The well_guid of this WellDetail.
        :rtype: str
        """
        return self._well_guid

    @well_guid.setter
    def well_guid(self, well_guid):
        """Sets the well_guid of this WellDetail.


        :param well_guid: The well_guid of this WellDetail.
        :type well_guid: str
        """

        self._well_guid = well_guid

    @property
    def well_identification_plate_attached(self):
        """Gets the well_identification_plate_attached of this WellDetail.


        :return: The well_identification_plate_attached of this WellDetail.
        :rtype: str
        """
        return self._well_identification_plate_attached

    @well_identification_plate_attached.setter
    def well_identification_plate_attached(self, well_identification_plate_attached):
        """Sets the well_identification_plate_attached of this WellDetail.


        :param well_identification_plate_attached: The well_identification_plate_attached of this WellDetail.
        :type well_identification_plate_attached: str
        """
        if well_identification_plate_attached is not None and len(well_identification_plate_attached) > 500:
            raise ValueError("Invalid value for `well_identification_plate_attached`, length must be less than or equal to `500`")

        self._well_identification_plate_attached = well_identification_plate_attached

    @property
    def well_location_description(self):
        """Gets the well_location_description of this WellDetail.


        :return: The well_location_description of this WellDetail.
        :rtype: str
        """
        return self._well_location_description

    @well_location_description.setter
    def well_location_description(self, well_location_description):
        """Sets the well_location_description of this WellDetail.


        :param well_location_description: The well_location_description of this WellDetail.
        :type well_location_description: str
        """
        if well_location_description is not None and len(well_location_description) > 500:
            raise ValueError("Invalid value for `well_location_description`, length must be less than or equal to `500`")

        self._well_location_description = well_location_description

    @property
    def well_orientation(self):
        """Gets the well_orientation of this WellDetail.


        :return: The well_orientation of this WellDetail.
        :rtype: bool
        """
        return self._well_orientation

    @well_orientation.setter
    def well_orientation(self, well_orientation):
        """Sets the well_orientation of this WellDetail.


        :param well_orientation: The well_orientation of this WellDetail.
        :type well_orientation: bool
        """

        self._well_orientation = well_orientation

    @property
    def well_status(self):
        """Gets the well_status of this WellDetail.


        :return: The well_status of this WellDetail.
        :rtype: str
        """
        return self._well_status

    @well_status.setter
    def well_status(self, well_status):
        """Sets the well_status of this WellDetail.


        :param well_status: The well_status of this WellDetail.
        :type well_status: str
        """

        self._well_status = well_status

    @property
    def well_subclass(self):
        """Gets the well_subclass of this WellDetail.


        :return: The well_subclass of this WellDetail.
        :rtype: str
        """
        return self._well_subclass

    @well_subclass.setter
    def well_subclass(self, well_subclass):
        """Sets the well_subclass of this WellDetail.


        :param well_subclass: The well_subclass of this WellDetail.
        :type well_subclass: str
        """

        self._well_subclass = well_subclass

    @property
    def well_tag_number(self):
        """Gets the well_tag_number of this WellDetail.


        :return: The well_tag_number of this WellDetail.
        :rtype: int
        """
        return self._well_tag_number

    @well_tag_number.setter
    def well_tag_number(self, well_tag_number):
        """Sets the well_tag_number of this WellDetail.


        :param well_tag_number: The well_tag_number of this WellDetail.
        :type well_tag_number: int
        """

        self._well_tag_number = well_tag_number

    @property
    def well_yield(self):
        """Gets the well_yield of this WellDetail.


        :return: The well_yield of this WellDetail.
        :rtype: str
        """
        return self._well_yield

    @well_yield.setter
    def well_yield(self, well_yield):
        """Sets the well_yield of this WellDetail.


        :param well_yield: The well_yield of this WellDetail.
        :type well_yield: str
        """

        self._well_yield = well_yield

    @property
    def well_yield_unit(self):
        """Gets the well_yield_unit of this WellDetail.


        :return: The well_yield_unit of this WellDetail.
        :rtype: str
        """
        return self._well_yield_unit

    @well_yield_unit.setter
    def well_yield_unit(self, well_yield_unit):
        """Sets the well_yield_unit of this WellDetail.


        :param well_yield_unit: The well_yield_unit of this WellDetail.
        :type well_yield_unit: str
        """

        self._well_yield_unit = well_yield_unit

    @property
    def yield_estimation_duration(self):
        """Gets the yield_estimation_duration of this WellDetail.


        :return: The yield_estimation_duration of this WellDetail.
        :rtype: str
        """
        return self._yield_estimation_duration

    @yield_estimation_duration.setter
    def yield_estimation_duration(self, yield_estimation_duration):
        """Sets the yield_estimation_duration of this WellDetail.


        :param yield_estimation_duration: The yield_estimation_duration of this WellDetail.
        :type yield_estimation_duration: str
        """

        self._yield_estimation_duration = yield_estimation_duration

    @property
    def yield_estimation_method(self):
        """Gets the yield_estimation_method of this WellDetail.


        :return: The yield_estimation_method of this WellDetail.
        :rtype: str
        """
        return self._yield_estimation_method

    @yield_estimation_method.setter
    def yield_estimation_method(self, yield_estimation_method):
        """Sets the yield_estimation_method of this WellDetail.


        :param yield_estimation_method: The yield_estimation_method of this WellDetail.
        :type yield_estimation_method: str
        """

        self._yield_estimation_method = yield_estimation_method

    @property
    def yield_estimation_rate(self):
        """Gets the yield_estimation_rate of this WellDetail.


        :return: The yield_estimation_rate of this WellDetail.
        :rtype: str
        """
        return self._yield_estimation_rate

    @yield_estimation_rate.setter
    def yield_estimation_rate(self, yield_estimation_rate):
        """Sets the yield_estimation_rate of this WellDetail.


        :param yield_estimation_rate: The yield_estimation_rate of this WellDetail.
        :type yield_estimation_rate: str
        """

        self._yield_estimation_rate = yield_estimation_rate
