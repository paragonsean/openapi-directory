# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Casing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, casing_code: str=None, casing_material: str=None, diameter: str=None, drive_shoe: bool=None, end: str=None, start: str=None, wall_thickness: str=None):
        """Casing - a model defined in OpenAPI

        :param casing_code: The casing_code of this Casing.
        :param casing_material: The casing_material of this Casing.
        :param diameter: The diameter of this Casing.
        :param drive_shoe: The drive_shoe of this Casing.
        :param end: The end of this Casing.
        :param start: The start of this Casing.
        :param wall_thickness: The wall_thickness of this Casing.
        """
        self.openapi_types = {
            'casing_code': str,
            'casing_material': str,
            'diameter': str,
            'drive_shoe': bool,
            'end': str,
            'start': str,
            'wall_thickness': str
        }

        self.attribute_map = {
            'casing_code': 'casing_code',
            'casing_material': 'casing_material',
            'diameter': 'diameter',
            'drive_shoe': 'drive_shoe',
            'end': 'end',
            'start': 'start',
            'wall_thickness': 'wall_thickness'
        }

        self._casing_code = casing_code
        self._casing_material = casing_material
        self._diameter = diameter
        self._drive_shoe = drive_shoe
        self._end = end
        self._start = start
        self._wall_thickness = wall_thickness

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Casing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Casing of this Casing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def casing_code(self):
        """Gets the casing_code of this Casing.


        :return: The casing_code of this Casing.
        :rtype: str
        """
        return self._casing_code

    @casing_code.setter
    def casing_code(self, casing_code):
        """Sets the casing_code of this Casing.


        :param casing_code: The casing_code of this Casing.
        :type casing_code: str
        """

        self._casing_code = casing_code

    @property
    def casing_material(self):
        """Gets the casing_material of this Casing.


        :return: The casing_material of this Casing.
        :rtype: str
        """
        return self._casing_material

    @casing_material.setter
    def casing_material(self, casing_material):
        """Sets the casing_material of this Casing.


        :param casing_material: The casing_material of this Casing.
        :type casing_material: str
        """

        self._casing_material = casing_material

    @property
    def diameter(self):
        """Gets the diameter of this Casing.


        :return: The diameter of this Casing.
        :rtype: str
        """
        return self._diameter

    @diameter.setter
    def diameter(self, diameter):
        """Sets the diameter of this Casing.


        :param diameter: The diameter of this Casing.
        :type diameter: str
        """
        if diameter is None:
            raise ValueError("Invalid value for `diameter`, must not be `None`")

        self._diameter = diameter

    @property
    def drive_shoe(self):
        """Gets the drive_shoe of this Casing.


        :return: The drive_shoe of this Casing.
        :rtype: bool
        """
        return self._drive_shoe

    @drive_shoe.setter
    def drive_shoe(self, drive_shoe):
        """Sets the drive_shoe of this Casing.


        :param drive_shoe: The drive_shoe of this Casing.
        :type drive_shoe: bool
        """

        self._drive_shoe = drive_shoe

    @property
    def end(self):
        """Gets the end of this Casing.


        :return: The end of this Casing.
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Casing.


        :param end: The end of this Casing.
        :type end: str
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")

        self._end = end

    @property
    def start(self):
        """Gets the start of this Casing.


        :return: The start of this Casing.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Casing.


        :param start: The start of this Casing.
        :type start: str
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")

        self._start = start

    @property
    def wall_thickness(self):
        """Gets the wall_thickness of this Casing.


        :return: The wall_thickness of this Casing.
        :rtype: str
        """
        return self._wall_thickness

    @wall_thickness.setter
    def wall_thickness(self, wall_thickness):
        """Sets the wall_thickness of this Casing.


        :param wall_thickness: The wall_thickness of this Casing.
        :type wall_thickness: str
        """

        self._wall_thickness = wall_thickness
