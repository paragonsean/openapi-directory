/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AquifersFilesList200Response from '../model/AquifersFilesList200Response';
import WellDetail from '../model/WellDetail';
import WellTagSearch from '../model/WellTagSearch';
import WellsList200Response from '../model/WellsList200Response';

/**
* Wells service.
* @module api/WellsApi
* @version v1
*/
export default class WellsApi {

    /**
    * Constructs a new WellsApi. 
    * @alias module:api/WellsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the wellsFilesList operation.
     * @callback module:api/WellsApi~wellsFilesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AquifersFilesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list files found for the well identified in the uri
     * @param {String} tag 
     * @param {module:api/WellsApi~wellsFilesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AquifersFilesList200Response}
     */
    wellsFilesList(tag, callback) {
      let postBody = null;
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling wellsFilesList");
      }

      let pathParams = {
        'tag': tag
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AquifersFilesList200Response;
      return this.apiClient.callApi(
        '/wells/{tag}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wellsList operation.
     * @callback module:api/WellsApi~wellsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WellsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns a list of wells
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/WellsApi~wellsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WellsList200Response}
     */
    wellsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WellsList200Response;
      return this.apiClient.callApi(
        '/wells/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wellsRead operation.
     * @callback module:api/WellsApi~wellsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WellDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return well detail. This view is open to all, and has no permissions.
     * @param {Number} wellTagNumber A unique integer value identifying this well.
     * @param {module:api/WellsApi~wellsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WellDetail}
     */
    wellsRead(wellTagNumber, callback) {
      let postBody = null;
      // verify the required parameter 'wellTagNumber' is set
      if (wellTagNumber === undefined || wellTagNumber === null) {
        throw new Error("Missing the required parameter 'wellTagNumber' when calling wellsRead");
      }

      let pathParams = {
        'well_tag_number': wellTagNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WellDetail;
      return this.apiClient.callApi(
        '/wells/{well_tag_number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wellsTagsList operation.
     * @callback module:api/WellsApi~wellsTagsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WellTagSearch>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * seach for wells by tag or owner
     * @param {Object} opts Optional parameters
     * @param {String} [search] A search term.
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {module:api/WellsApi~wellsTagsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WellTagSearch>}
     */
    wellsTagsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WellTagSearch];
      return this.apiClient.callApi(
        '/wells/tags/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
