/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Aquifer from '../model/Aquifer';
import AquiferSerializerBasic from '../model/AquiferSerializerBasic';
import AquifersFilesList200Response from '../model/AquifersFilesList200Response';
import AquifersList200Response from '../model/AquifersList200Response';

/**
* Aquifers service.
* @module api/AquifersApi
* @version v1
*/
export default class AquifersApi {

    /**
    * Constructs a new AquifersApi. 
    * @alias module:api/AquifersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the aquifersFilesList operation.
     * @callback module:api/AquifersApi~aquifersFilesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AquifersFilesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list files found for the aquifer identified in the uri
     * @param {String} aquiferId 
     * @param {module:api/AquifersApi~aquifersFilesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AquifersFilesList200Response}
     */
    aquifersFilesList(aquiferId, callback) {
      let postBody = null;
      // verify the required parameter 'aquiferId' is set
      if (aquiferId === undefined || aquiferId === null) {
        throw new Error("Missing the required parameter 'aquiferId' when calling aquifersFilesList");
      }

      let pathParams = {
        'aquifer_id': aquiferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AquifersFilesList200Response;
      return this.apiClient.callApi(
        '/aquifers/{aquifer_id}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aquifersList operation.
     * @callback module:api/AquifersApi~aquifersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AquifersList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * return a list of aquifers
     * @param {Object} opts Optional parameters
     * @param {Number} [aquiferId] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {String} [search] A search term.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/AquifersApi~aquifersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AquifersList200Response}
     */
    aquifersList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'aquifer_id': opts['aquiferId'],
        'ordering': opts['ordering'],
        'search': opts['search'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AquifersList200Response;
      return this.apiClient.callApi(
        '/aquifers/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aquifersNamesList operation.
     * @callback module:api/AquifersApi~aquifersNamesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AquiferSerializerBasic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all aquifers in a simplified format
     * @param {Object} opts Optional parameters
     * @param {String} [search] A search term.
     * @param {module:api/AquifersApi~aquifersNamesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AquiferSerializerBasic>}
     */
    aquifersNamesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AquiferSerializerBasic];
      return this.apiClient.callApi(
        '/aquifers/names/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aquifersRead operation.
     * @callback module:api/AquifersApi~aquifersReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Aquifer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * return details of aquifers
     * @param {Number} aquiferId A unique integer value identifying this aquifer.
     * @param {module:api/AquifersApi~aquifersReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Aquifer}
     */
    aquifersRead(aquiferId, callback) {
      let postBody = null;
      // verify the required parameter 'aquiferId' is set
      if (aquiferId === undefined || aquiferId === null) {
        throw new Error("Missing the required parameter 'aquiferId' when calling aquifersRead");
      }

      let pathParams = {
        'aquifer_id': aquiferId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Aquifer;
      return this.apiClient.callApi(
        '/aquifers/{aquifer_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
