/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AquifersFilesList200Response from '../model/AquifersFilesList200Response';
import PersonList from '../model/PersonList';
import PersonName from '../model/PersonName';

/**
* Drillers service.
* @module api/DrillersApi
* @version v1
*/
export default class DrillersApi {

    /**
    * Constructs a new DrillersApi. 
    * @alias module:api/DrillersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the drillersFilesList operation.
     * @callback module:api/DrillersApi~drillersFilesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AquifersFilesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list files found for the aquifer identified in the uri
     * @param {String} personGuid 
     * @param {module:api/DrillersApi~drillersFilesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AquifersFilesList200Response}
     */
    drillersFilesList(personGuid, callback) {
      let postBody = null;
      // verify the required parameter 'personGuid' is set
      if (personGuid === undefined || personGuid === null) {
        throw new Error("Missing the required parameter 'personGuid' when calling drillersFilesList");
      }

      let pathParams = {
        'person_guid': personGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AquifersFilesList200Response;
      return this.apiClient.callApi(
        '/drillers/{person_guid}/files/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the drillersList operation.
     * @callback module:api/DrillersApi~drillersListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PersonList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all person records
     * @param {Object} opts Optional parameters
     * @param {String} [search] A search term.
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DrillersApi~drillersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PersonList>}
     */
    drillersList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PersonList];
      return this.apiClient.callApi(
        '/drillers/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the drillersNamesList operation.
     * @callback module:api/DrillersApi~drillersNamesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PersonName>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for a person in the Register
     * @param {Object} opts Optional parameters
     * @param {String} [search] A search term.
     * @param {module:api/DrillersApi~drillersNamesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PersonName>}
     */
    drillersNamesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PersonName];
      return this.apiClient.callApi(
        '/drillers/names/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
