/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AquiferCodesDemandList200Response from '../model/AquiferCodesDemandList200Response';
import AquiferCodesMaterialsList200Response from '../model/AquiferCodesMaterialsList200Response';
import AquiferCodesProductivityList200Response from '../model/AquiferCodesProductivityList200Response';
import AquiferCodesQualityConcernsList200Response from '../model/AquiferCodesQualityConcernsList200Response';
import AquiferCodesSubtypesList200Response from '../model/AquiferCodesSubtypesList200Response';
import AquiferCodesVulnerabilityList200Response from '../model/AquiferCodesVulnerabilityList200Response';
import AquiferCodesWaterUseList200Response from '../model/AquiferCodesWaterUseList200Response';

/**
* AquiferCodes service.
* @module api/AquiferCodesApi
* @version v1
*/
export default class AquiferCodesApi {

    /**
    * Constructs a new AquiferCodesApi. 
    * @alias module:api/AquiferCodesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the aquiferCodesDemandList operation.
     * @callback module:api/AquiferCodesApi~aquiferCodesDemandListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AquiferCodesDemandList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * return a list of aquifer demand codes
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/AquiferCodesApi~aquiferCodesDemandListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AquiferCodesDemandList200Response}
     */
    aquiferCodesDemandList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AquiferCodesDemandList200Response;
      return this.apiClient.callApi(
        '/aquifer-codes/demand/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aquiferCodesMaterialsList operation.
     * @callback module:api/AquiferCodesApi~aquiferCodesMaterialsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AquiferCodesMaterialsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * return a list of aquifer material codes
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/AquiferCodesApi~aquiferCodesMaterialsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AquiferCodesMaterialsList200Response}
     */
    aquiferCodesMaterialsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AquiferCodesMaterialsList200Response;
      return this.apiClient.callApi(
        '/aquifer-codes/materials/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aquiferCodesProductivityList operation.
     * @callback module:api/AquiferCodesApi~aquiferCodesProductivityListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AquiferCodesProductivityList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * return a list of aquifer productivity codes
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/AquiferCodesApi~aquiferCodesProductivityListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AquiferCodesProductivityList200Response}
     */
    aquiferCodesProductivityList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AquiferCodesProductivityList200Response;
      return this.apiClient.callApi(
        '/aquifer-codes/productivity/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aquiferCodesQualityConcernsList operation.
     * @callback module:api/AquiferCodesApi~aquiferCodesQualityConcernsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AquiferCodesQualityConcernsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * return a list of quality concern codes
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/AquiferCodesApi~aquiferCodesQualityConcernsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AquiferCodesQualityConcernsList200Response}
     */
    aquiferCodesQualityConcernsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AquiferCodesQualityConcernsList200Response;
      return this.apiClient.callApi(
        '/aquifer-codes/quality-concerns/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aquiferCodesSubtypesList operation.
     * @callback module:api/AquiferCodesApi~aquiferCodesSubtypesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AquiferCodesSubtypesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * return a list of aquifer subtype codes
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/AquiferCodesApi~aquiferCodesSubtypesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AquiferCodesSubtypesList200Response}
     */
    aquiferCodesSubtypesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AquiferCodesSubtypesList200Response;
      return this.apiClient.callApi(
        '/aquifer-codes/subtypes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aquiferCodesVulnerabilityList operation.
     * @callback module:api/AquiferCodesApi~aquiferCodesVulnerabilityListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AquiferCodesVulnerabilityList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * return a list of aquifer vulnerability codes
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/AquiferCodesApi~aquiferCodesVulnerabilityListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AquiferCodesVulnerabilityList200Response}
     */
    aquiferCodesVulnerabilityList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AquiferCodesVulnerabilityList200Response;
      return this.apiClient.callApi(
        '/aquifer-codes/vulnerability/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aquiferCodesWaterUseList operation.
     * @callback module:api/AquiferCodesApi~aquiferCodesWaterUseListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AquiferCodesWaterUseList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * return a list of water use codes
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/AquiferCodesApi~aquiferCodesWaterUseListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AquiferCodesWaterUseList200Response}
     */
    aquiferCodesWaterUseList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AquiferCodesWaterUseList200Response;
      return this.apiClient.callApi(
        '/aquifer-codes/water-use/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
