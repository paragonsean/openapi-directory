/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Aquifer model module.
 * @module model/Aquifer
 * @version v1
 */
class Aquifer {
    /**
     * Constructs a new <code>Aquifer</code>.
     * @alias module:model/Aquifer
     */
    constructor() { 
        
        Aquifer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Aquifer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Aquifer} obj Optional instance to populate.
     * @return {module:model/Aquifer} The populated <code>Aquifer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Aquifer();

            if (data.hasOwnProperty('aquifer_id')) {
                obj['aquifer_id'] = ApiClient.convertToType(data['aquifer_id'], 'Number');
            }
            if (data.hasOwnProperty('aquifer_name')) {
                obj['aquifer_name'] = ApiClient.convertToType(data['aquifer_name'], 'String');
            }
            if (data.hasOwnProperty('area')) {
                obj['area'] = ApiClient.convertToType(data['area'], 'Number');
            }
            if (data.hasOwnProperty('demand')) {
                obj['demand'] = ApiClient.convertToType(data['demand'], 'String');
            }
            if (data.hasOwnProperty('demand_description')) {
                obj['demand_description'] = ApiClient.convertToType(data['demand_description'], 'String');
            }
            if (data.hasOwnProperty('known_water_use')) {
                obj['known_water_use'] = ApiClient.convertToType(data['known_water_use'], 'String');
            }
            if (data.hasOwnProperty('known_water_use_description')) {
                obj['known_water_use_description'] = ApiClient.convertToType(data['known_water_use_description'], 'String');
            }
            if (data.hasOwnProperty('litho_stratographic_unit')) {
                obj['litho_stratographic_unit'] = ApiClient.convertToType(data['litho_stratographic_unit'], 'String');
            }
            if (data.hasOwnProperty('location_description')) {
                obj['location_description'] = ApiClient.convertToType(data['location_description'], 'String');
            }
            if (data.hasOwnProperty('mapping_year')) {
                obj['mapping_year'] = ApiClient.convertToType(data['mapping_year'], 'Number');
            }
            if (data.hasOwnProperty('material')) {
                obj['material'] = ApiClient.convertToType(data['material'], 'String');
            }
            if (data.hasOwnProperty('material_description')) {
                obj['material_description'] = ApiClient.convertToType(data['material_description'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('productivity')) {
                obj['productivity'] = ApiClient.convertToType(data['productivity'], 'String');
            }
            if (data.hasOwnProperty('productivity_description')) {
                obj['productivity_description'] = ApiClient.convertToType(data['productivity_description'], 'String');
            }
            if (data.hasOwnProperty('quality_concern')) {
                obj['quality_concern'] = ApiClient.convertToType(data['quality_concern'], 'String');
            }
            if (data.hasOwnProperty('quality_concern_description')) {
                obj['quality_concern_description'] = ApiClient.convertToType(data['quality_concern_description'], 'String');
            }
            if (data.hasOwnProperty('subtype')) {
                obj['subtype'] = ApiClient.convertToType(data['subtype'], 'String');
            }
            if (data.hasOwnProperty('subtype_description')) {
                obj['subtype_description'] = ApiClient.convertToType(data['subtype_description'], 'String');
            }
            if (data.hasOwnProperty('vulnerability')) {
                obj['vulnerability'] = ApiClient.convertToType(data['vulnerability'], 'String');
            }
            if (data.hasOwnProperty('vulnerability_description')) {
                obj['vulnerability_description'] = ApiClient.convertToType(data['vulnerability_description'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Aquifer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Aquifer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aquifer_name'] && !(typeof data['aquifer_name'] === 'string' || data['aquifer_name'] instanceof String)) {
            throw new Error("Expected the field `aquifer_name` to be a primitive type in the JSON string but got " + data['aquifer_name']);
        }
        // ensure the json data is a string
        if (data['area'] && !(typeof data['area'] === 'string' || data['area'] instanceof String)) {
            throw new Error("Expected the field `area` to be a primitive type in the JSON string but got " + data['area']);
        }
        // ensure the json data is a string
        if (data['demand'] && !(typeof data['demand'] === 'string' || data['demand'] instanceof String)) {
            throw new Error("Expected the field `demand` to be a primitive type in the JSON string but got " + data['demand']);
        }
        // ensure the json data is a string
        if (data['demand_description'] && !(typeof data['demand_description'] === 'string' || data['demand_description'] instanceof String)) {
            throw new Error("Expected the field `demand_description` to be a primitive type in the JSON string but got " + data['demand_description']);
        }
        // ensure the json data is a string
        if (data['known_water_use'] && !(typeof data['known_water_use'] === 'string' || data['known_water_use'] instanceof String)) {
            throw new Error("Expected the field `known_water_use` to be a primitive type in the JSON string but got " + data['known_water_use']);
        }
        // ensure the json data is a string
        if (data['known_water_use_description'] && !(typeof data['known_water_use_description'] === 'string' || data['known_water_use_description'] instanceof String)) {
            throw new Error("Expected the field `known_water_use_description` to be a primitive type in the JSON string but got " + data['known_water_use_description']);
        }
        // ensure the json data is a string
        if (data['litho_stratographic_unit'] && !(typeof data['litho_stratographic_unit'] === 'string' || data['litho_stratographic_unit'] instanceof String)) {
            throw new Error("Expected the field `litho_stratographic_unit` to be a primitive type in the JSON string but got " + data['litho_stratographic_unit']);
        }
        // ensure the json data is a string
        if (data['location_description'] && !(typeof data['location_description'] === 'string' || data['location_description'] instanceof String)) {
            throw new Error("Expected the field `location_description` to be a primitive type in the JSON string but got " + data['location_description']);
        }
        // ensure the json data is a string
        if (data['material'] && !(typeof data['material'] === 'string' || data['material'] instanceof String)) {
            throw new Error("Expected the field `material` to be a primitive type in the JSON string but got " + data['material']);
        }
        // ensure the json data is a string
        if (data['material_description'] && !(typeof data['material_description'] === 'string' || data['material_description'] instanceof String)) {
            throw new Error("Expected the field `material_description` to be a primitive type in the JSON string but got " + data['material_description']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['productivity'] && !(typeof data['productivity'] === 'string' || data['productivity'] instanceof String)) {
            throw new Error("Expected the field `productivity` to be a primitive type in the JSON string but got " + data['productivity']);
        }
        // ensure the json data is a string
        if (data['productivity_description'] && !(typeof data['productivity_description'] === 'string' || data['productivity_description'] instanceof String)) {
            throw new Error("Expected the field `productivity_description` to be a primitive type in the JSON string but got " + data['productivity_description']);
        }
        // ensure the json data is a string
        if (data['quality_concern'] && !(typeof data['quality_concern'] === 'string' || data['quality_concern'] instanceof String)) {
            throw new Error("Expected the field `quality_concern` to be a primitive type in the JSON string but got " + data['quality_concern']);
        }
        // ensure the json data is a string
        if (data['quality_concern_description'] && !(typeof data['quality_concern_description'] === 'string' || data['quality_concern_description'] instanceof String)) {
            throw new Error("Expected the field `quality_concern_description` to be a primitive type in the JSON string but got " + data['quality_concern_description']);
        }
        // ensure the json data is a string
        if (data['subtype'] && !(typeof data['subtype'] === 'string' || data['subtype'] instanceof String)) {
            throw new Error("Expected the field `subtype` to be a primitive type in the JSON string but got " + data['subtype']);
        }
        // ensure the json data is a string
        if (data['subtype_description'] && !(typeof data['subtype_description'] === 'string' || data['subtype_description'] instanceof String)) {
            throw new Error("Expected the field `subtype_description` to be a primitive type in the JSON string but got " + data['subtype_description']);
        }
        // ensure the json data is a string
        if (data['vulnerability'] && !(typeof data['vulnerability'] === 'string' || data['vulnerability'] instanceof String)) {
            throw new Error("Expected the field `vulnerability` to be a primitive type in the JSON string but got " + data['vulnerability']);
        }
        // ensure the json data is a string
        if (data['vulnerability_description'] && !(typeof data['vulnerability_description'] === 'string' || data['vulnerability_description'] instanceof String)) {
            throw new Error("Expected the field `vulnerability_description` to be a primitive type in the JSON string but got " + data['vulnerability_description']);
        }

        return true;
    }


}



/**
 * @member {Number} aquifer_id
 */
Aquifer.prototype['aquifer_id'] = undefined;

/**
 * @member {String} aquifer_name
 */
Aquifer.prototype['aquifer_name'] = undefined;

/**
 * @member {Number} area
 */
Aquifer.prototype['area'] = undefined;

/**
 * @member {String} demand
 */
Aquifer.prototype['demand'] = undefined;

/**
 * @member {String} demand_description
 */
Aquifer.prototype['demand_description'] = undefined;

/**
 * @member {String} known_water_use
 */
Aquifer.prototype['known_water_use'] = undefined;

/**
 * @member {String} known_water_use_description
 */
Aquifer.prototype['known_water_use_description'] = undefined;

/**
 * @member {String} litho_stratographic_unit
 */
Aquifer.prototype['litho_stratographic_unit'] = undefined;

/**
 * @member {String} location_description
 */
Aquifer.prototype['location_description'] = undefined;

/**
 * Use the following format: 
 * @member {Number} mapping_year
 */
Aquifer.prototype['mapping_year'] = undefined;

/**
 * @member {String} material
 */
Aquifer.prototype['material'] = undefined;

/**
 * @member {String} material_description
 */
Aquifer.prototype['material_description'] = undefined;

/**
 * @member {String} notes
 */
Aquifer.prototype['notes'] = undefined;

/**
 * @member {String} productivity
 */
Aquifer.prototype['productivity'] = undefined;

/**
 * @member {String} productivity_description
 */
Aquifer.prototype['productivity_description'] = undefined;

/**
 * @member {String} quality_concern
 */
Aquifer.prototype['quality_concern'] = undefined;

/**
 * @member {String} quality_concern_description
 */
Aquifer.prototype['quality_concern_description'] = undefined;

/**
 * @member {String} subtype
 */
Aquifer.prototype['subtype'] = undefined;

/**
 * @member {String} subtype_description
 */
Aquifer.prototype['subtype_description'] = undefined;

/**
 * @member {String} vulnerability
 */
Aquifer.prototype['vulnerability'] = undefined;

/**
 * @member {String} vulnerability_description
 */
Aquifer.prototype['vulnerability_description'] = undefined;






export default Aquifer;

