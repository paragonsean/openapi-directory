/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrganizationList model module.
 * @module model/OrganizationList
 * @version v1
 */
class OrganizationList {
    /**
     * Constructs a new <code>OrganizationList</code>.
     * @alias module:model/OrganizationList
     * @param name {String} 
     * @param provinceState {String} 
     */
    constructor(name, provinceState) { 
        
        OrganizationList.initialize(this, name, provinceState);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, provinceState) { 
        obj['name'] = name;
        obj['province_state'] = provinceState;
    }

    /**
     * Constructs a <code>OrganizationList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrganizationList} obj Optional instance to populate.
     * @return {module:model/OrganizationList} The populated <code>OrganizationList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrganizationList();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('fax_tel')) {
                obj['fax_tel'] = ApiClient.convertToType(data['fax_tel'], 'String');
            }
            if (data.hasOwnProperty('main_tel')) {
                obj['main_tel'] = ApiClient.convertToType(data['main_tel'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('org_guid')) {
                obj['org_guid'] = ApiClient.convertToType(data['org_guid'], 'String');
            }
            if (data.hasOwnProperty('org_verbose_name')) {
                obj['org_verbose_name'] = ApiClient.convertToType(data['org_verbose_name'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
            if (data.hasOwnProperty('province_state')) {
                obj['province_state'] = ApiClient.convertToType(data['province_state'], 'String');
            }
            if (data.hasOwnProperty('street_address')) {
                obj['street_address'] = ApiClient.convertToType(data['street_address'], 'String');
            }
            if (data.hasOwnProperty('website_url')) {
                obj['website_url'] = ApiClient.convertToType(data['website_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrganizationList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrganizationList</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrganizationList.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['fax_tel'] && !(typeof data['fax_tel'] === 'string' || data['fax_tel'] instanceof String)) {
            throw new Error("Expected the field `fax_tel` to be a primitive type in the JSON string but got " + data['fax_tel']);
        }
        // ensure the json data is a string
        if (data['main_tel'] && !(typeof data['main_tel'] === 'string' || data['main_tel'] instanceof String)) {
            throw new Error("Expected the field `main_tel` to be a primitive type in the JSON string but got " + data['main_tel']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['org_guid'] && !(typeof data['org_guid'] === 'string' || data['org_guid'] instanceof String)) {
            throw new Error("Expected the field `org_guid` to be a primitive type in the JSON string but got " + data['org_guid']);
        }
        // ensure the json data is a string
        if (data['org_verbose_name'] && !(typeof data['org_verbose_name'] === 'string' || data['org_verbose_name'] instanceof String)) {
            throw new Error("Expected the field `org_verbose_name` to be a primitive type in the JSON string but got " + data['org_verbose_name']);
        }
        // ensure the json data is a string
        if (data['postal_code'] && !(typeof data['postal_code'] === 'string' || data['postal_code'] instanceof String)) {
            throw new Error("Expected the field `postal_code` to be a primitive type in the JSON string but got " + data['postal_code']);
        }
        // ensure the json data is a string
        if (data['province_state'] && !(typeof data['province_state'] === 'string' || data['province_state'] instanceof String)) {
            throw new Error("Expected the field `province_state` to be a primitive type in the JSON string but got " + data['province_state']);
        }
        // ensure the json data is a string
        if (data['street_address'] && !(typeof data['street_address'] === 'string' || data['street_address'] instanceof String)) {
            throw new Error("Expected the field `street_address` to be a primitive type in the JSON string but got " + data['street_address']);
        }
        // ensure the json data is a string
        if (data['website_url'] && !(typeof data['website_url'] === 'string' || data['website_url'] instanceof String)) {
            throw new Error("Expected the field `website_url` to be a primitive type in the JSON string but got " + data['website_url']);
        }

        return true;
    }


}

OrganizationList.RequiredProperties = ["name", "province_state"];

/**
 * @member {String} city
 */
OrganizationList.prototype['city'] = undefined;

/**
 * @member {String} email
 */
OrganizationList.prototype['email'] = undefined;

/**
 * @member {String} fax_tel
 */
OrganizationList.prototype['fax_tel'] = undefined;

/**
 * @member {String} main_tel
 */
OrganizationList.prototype['main_tel'] = undefined;

/**
 * @member {String} name
 */
OrganizationList.prototype['name'] = undefined;

/**
 * @member {String} org_guid
 */
OrganizationList.prototype['org_guid'] = undefined;

/**
 * @member {String} org_verbose_name
 */
OrganizationList.prototype['org_verbose_name'] = undefined;

/**
 * @member {String} postal_code
 */
OrganizationList.prototype['postal_code'] = undefined;

/**
 * @member {String} province_state
 */
OrganizationList.prototype['province_state'] = undefined;

/**
 * @member {String} street_address
 */
OrganizationList.prototype['street_address'] = undefined;

/**
 * @member {String} website_url
 */
OrganizationList.prototype['website_url'] = undefined;






export default OrganizationList;

