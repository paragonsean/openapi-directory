/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationList from './ApplicationList';
import OrganizationList from './OrganizationList';

/**
 * The RegistrationsList model module.
 * @module model/RegistrationsList
 * @version v1
 */
class RegistrationsList {
    /**
     * Constructs a new <code>RegistrationsList</code>.
     * @alias module:model/RegistrationsList
     * @param organization {module:model/OrganizationList} 
     */
    constructor(organization) { 
        
        RegistrationsList.initialize(this, organization);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, organization) { 
        obj['organization'] = organization;
    }

    /**
     * Constructs a <code>RegistrationsList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegistrationsList} obj Optional instance to populate.
     * @return {module:model/RegistrationsList} The populated <code>RegistrationsList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegistrationsList();

            if (data.hasOwnProperty('activity')) {
                obj['activity'] = ApiClient.convertToType(data['activity'], 'String');
            }
            if (data.hasOwnProperty('activity_description')) {
                obj['activity_description'] = ApiClient.convertToType(data['activity_description'], 'String');
            }
            if (data.hasOwnProperty('applications')) {
                obj['applications'] = ApiClient.convertToType(data['applications'], [ApplicationList]);
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = OrganizationList.constructFromObject(data['organization']);
            }
            if (data.hasOwnProperty('registration_no')) {
                obj['registration_no'] = ApiClient.convertToType(data['registration_no'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegistrationsList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegistrationsList</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RegistrationsList.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['activity'] && !(typeof data['activity'] === 'string' || data['activity'] instanceof String)) {
            throw new Error("Expected the field `activity` to be a primitive type in the JSON string but got " + data['activity']);
        }
        // ensure the json data is a string
        if (data['activity_description'] && !(typeof data['activity_description'] === 'string' || data['activity_description'] instanceof String)) {
            throw new Error("Expected the field `activity_description` to be a primitive type in the JSON string but got " + data['activity_description']);
        }
        if (data['applications']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['applications'])) {
                throw new Error("Expected the field `applications` to be an array in the JSON data but got " + data['applications']);
            }
            // validate the optional field `applications` (array)
            for (const item of data['applications']) {
                ApplicationList.validateJSON(item);
            };
        }
        // validate the optional field `organization`
        if (data['organization']) { // data not null
          OrganizationList.validateJSON(data['organization']);
        }
        // ensure the json data is a string
        if (data['registration_no'] && !(typeof data['registration_no'] === 'string' || data['registration_no'] instanceof String)) {
            throw new Error("Expected the field `registration_no` to be a primitive type in the JSON string but got " + data['registration_no']);
        }

        return true;
    }


}

RegistrationsList.RequiredProperties = ["organization"];

/**
 * @member {String} activity
 */
RegistrationsList.prototype['activity'] = undefined;

/**
 * @member {String} activity_description
 */
RegistrationsList.prototype['activity_description'] = undefined;

/**
 * @member {Array.<module:model/ApplicationList>} applications
 */
RegistrationsList.prototype['applications'] = undefined;

/**
 * @member {module:model/OrganizationList} organization
 */
RegistrationsList.prototype['organization'] = undefined;

/**
 * @member {String} registration_no
 */
RegistrationsList.prototype['registration_no'] = undefined;






export default RegistrationsList;

