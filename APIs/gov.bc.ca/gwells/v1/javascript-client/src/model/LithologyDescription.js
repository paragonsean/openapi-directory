/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LithologyDescription model module.
 * @module model/LithologyDescription
 * @version v1
 */
class LithologyDescription {
    /**
     * Constructs a new <code>LithologyDescription</code>.
     * @alias module:model/LithologyDescription
     */
    constructor() { 
        
        LithologyDescription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LithologyDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LithologyDescription} obj Optional instance to populate.
     * @return {module:model/LithologyDescription} The populated <code>LithologyDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LithologyDescription();

            if (data.hasOwnProperty('lithology_colour')) {
                obj['lithology_colour'] = ApiClient.convertToType(data['lithology_colour'], 'String');
            }
            if (data.hasOwnProperty('lithology_from')) {
                obj['lithology_from'] = ApiClient.convertToType(data['lithology_from'], 'Number');
            }
            if (data.hasOwnProperty('lithology_hardness')) {
                obj['lithology_hardness'] = ApiClient.convertToType(data['lithology_hardness'], 'String');
            }
            if (data.hasOwnProperty('lithology_moisture')) {
                obj['lithology_moisture'] = ApiClient.convertToType(data['lithology_moisture'], 'String');
            }
            if (data.hasOwnProperty('lithology_raw_data')) {
                obj['lithology_raw_data'] = ApiClient.convertToType(data['lithology_raw_data'], 'String');
            }
            if (data.hasOwnProperty('lithology_to')) {
                obj['lithology_to'] = ApiClient.convertToType(data['lithology_to'], 'Number');
            }
            if (data.hasOwnProperty('water_bearing_estimated_flow')) {
                obj['water_bearing_estimated_flow'] = ApiClient.convertToType(data['water_bearing_estimated_flow'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LithologyDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LithologyDescription</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['lithology_colour'] && !(typeof data['lithology_colour'] === 'string' || data['lithology_colour'] instanceof String)) {
            throw new Error("Expected the field `lithology_colour` to be a primitive type in the JSON string but got " + data['lithology_colour']);
        }
        // ensure the json data is a string
        if (data['lithology_from'] && !(typeof data['lithology_from'] === 'string' || data['lithology_from'] instanceof String)) {
            throw new Error("Expected the field `lithology_from` to be a primitive type in the JSON string but got " + data['lithology_from']);
        }
        // ensure the json data is a string
        if (data['lithology_hardness'] && !(typeof data['lithology_hardness'] === 'string' || data['lithology_hardness'] instanceof String)) {
            throw new Error("Expected the field `lithology_hardness` to be a primitive type in the JSON string but got " + data['lithology_hardness']);
        }
        // ensure the json data is a string
        if (data['lithology_moisture'] && !(typeof data['lithology_moisture'] === 'string' || data['lithology_moisture'] instanceof String)) {
            throw new Error("Expected the field `lithology_moisture` to be a primitive type in the JSON string but got " + data['lithology_moisture']);
        }
        // ensure the json data is a string
        if (data['lithology_raw_data'] && !(typeof data['lithology_raw_data'] === 'string' || data['lithology_raw_data'] instanceof String)) {
            throw new Error("Expected the field `lithology_raw_data` to be a primitive type in the JSON string but got " + data['lithology_raw_data']);
        }
        // ensure the json data is a string
        if (data['lithology_to'] && !(typeof data['lithology_to'] === 'string' || data['lithology_to'] instanceof String)) {
            throw new Error("Expected the field `lithology_to` to be a primitive type in the JSON string but got " + data['lithology_to']);
        }
        // ensure the json data is a string
        if (data['water_bearing_estimated_flow'] && !(typeof data['water_bearing_estimated_flow'] === 'string' || data['water_bearing_estimated_flow'] instanceof String)) {
            throw new Error("Expected the field `water_bearing_estimated_flow` to be a primitive type in the JSON string but got " + data['water_bearing_estimated_flow']);
        }

        return true;
    }


}



/**
 * @member {String} lithology_colour
 */
LithologyDescription.prototype['lithology_colour'] = undefined;

/**
 * @member {Number} lithology_from
 */
LithologyDescription.prototype['lithology_from'] = undefined;

/**
 * @member {String} lithology_hardness
 */
LithologyDescription.prototype['lithology_hardness'] = undefined;

/**
 * @member {String} lithology_moisture
 */
LithologyDescription.prototype['lithology_moisture'] = undefined;

/**
 * @member {String} lithology_raw_data
 */
LithologyDescription.prototype['lithology_raw_data'] = undefined;

/**
 * @member {Number} lithology_to
 */
LithologyDescription.prototype['lithology_to'] = undefined;

/**
 * @member {Number} water_bearing_estimated_flow
 */
LithologyDescription.prototype['water_bearing_estimated_flow'] = undefined;






export default LithologyDescription;

