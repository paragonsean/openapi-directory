/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationStatusCode from './ApplicationStatusCode';
import Qualification from './Qualification';
import Subactivity from './Subactivity';

/**
 * The ApplicationList model module.
 * @module model/ApplicationList
 * @version v1
 */
class ApplicationList {
    /**
     * Constructs a new <code>ApplicationList</code>.
     * @alias module:model/ApplicationList
     * @param subactivity {module:model/Subactivity} 
     */
    constructor(subactivity) { 
        
        ApplicationList.initialize(this, subactivity);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, subactivity) { 
        obj['subactivity'] = subactivity;
    }

    /**
     * Constructs a <code>ApplicationList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationList} obj Optional instance to populate.
     * @return {module:model/ApplicationList} The populated <code>ApplicationList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationList();

            if (data.hasOwnProperty('cert_authority')) {
                obj['cert_authority'] = ApiClient.convertToType(data['cert_authority'], 'String');
            }
            if (data.hasOwnProperty('certificate')) {
                obj['certificate'] = ApiClient.convertToType(data['certificate'], 'String');
            }
            if (data.hasOwnProperty('current_status')) {
                obj['current_status'] = ApplicationStatusCode.constructFromObject(data['current_status']);
            }
            if (data.hasOwnProperty('display_status')) {
                obj['display_status'] = ApiClient.convertToType(data['display_status'], 'String');
            }
            if (data.hasOwnProperty('qualifications')) {
                obj['qualifications'] = ApiClient.convertToType(data['qualifications'], [Qualification]);
            }
            if (data.hasOwnProperty('removal_date')) {
                obj['removal_date'] = ApiClient.convertToType(data['removal_date'], 'Date');
            }
            if (data.hasOwnProperty('subactivity')) {
                obj['subactivity'] = Subactivity.constructFromObject(data['subactivity']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationList</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApplicationList.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cert_authority'] && !(typeof data['cert_authority'] === 'string' || data['cert_authority'] instanceof String)) {
            throw new Error("Expected the field `cert_authority` to be a primitive type in the JSON string but got " + data['cert_authority']);
        }
        // ensure the json data is a string
        if (data['certificate'] && !(typeof data['certificate'] === 'string' || data['certificate'] instanceof String)) {
            throw new Error("Expected the field `certificate` to be a primitive type in the JSON string but got " + data['certificate']);
        }
        // validate the optional field `current_status`
        if (data['current_status']) { // data not null
          ApplicationStatusCode.validateJSON(data['current_status']);
        }
        // ensure the json data is a string
        if (data['display_status'] && !(typeof data['display_status'] === 'string' || data['display_status'] instanceof String)) {
            throw new Error("Expected the field `display_status` to be a primitive type in the JSON string but got " + data['display_status']);
        }
        if (data['qualifications']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['qualifications'])) {
                throw new Error("Expected the field `qualifications` to be an array in the JSON data but got " + data['qualifications']);
            }
            // validate the optional field `qualifications` (array)
            for (const item of data['qualifications']) {
                Qualification.validateJSON(item);
            };
        }
        // validate the optional field `subactivity`
        if (data['subactivity']) { // data not null
          Subactivity.validateJSON(data['subactivity']);
        }

        return true;
    }


}

ApplicationList.RequiredProperties = ["subactivity"];

/**
 * @member {String} cert_authority
 */
ApplicationList.prototype['cert_authority'] = undefined;

/**
 * @member {String} certificate
 */
ApplicationList.prototype['certificate'] = undefined;

/**
 * @member {module:model/ApplicationStatusCode} current_status
 */
ApplicationList.prototype['current_status'] = undefined;

/**
 * @member {String} display_status
 */
ApplicationList.prototype['display_status'] = undefined;

/**
 * @member {Array.<module:model/Qualification>} qualifications
 */
ApplicationList.prototype['qualifications'] = undefined;

/**
 * @member {Date} removal_date
 */
ApplicationList.prototype['removal_date'] = undefined;

/**
 * @member {module:model/Subactivity} subactivity
 */
ApplicationList.prototype['subactivity'] = undefined;






export default ApplicationList;

