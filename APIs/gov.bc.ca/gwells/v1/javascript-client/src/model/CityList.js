/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Organization from './Organization';

/**
 * The CityList model module.
 * @module model/CityList
 * @version v1
 */
class CityList {
    /**
     * Constructs a new <code>CityList</code>.
     * @alias module:model/CityList
     * @param organization {module:model/Organization} 
     */
    constructor(organization) { 
        
        CityList.initialize(this, organization);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, organization) { 
        obj['organization'] = organization;
    }

    /**
     * Constructs a <code>CityList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CityList} obj Optional instance to populate.
     * @return {module:model/CityList} The populated <code>CityList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CityList();

            if (data.hasOwnProperty('organization')) {
                obj['organization'] = Organization.constructFromObject(data['organization']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CityList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CityList</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CityList.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `organization`
        if (data['organization']) { // data not null
          Organization.validateJSON(data['organization']);
        }

        return true;
    }


}

CityList.RequiredProperties = ["organization"];

/**
 * @member {module:model/Organization} organization
 */
CityList.prototype['organization'] = undefined;






export default CityList;

