/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RegistrationsList from './RegistrationsList';

/**
 * The PersonList model module.
 * @module model/PersonList
 * @version v1
 */
class PersonList {
    /**
     * Constructs a new <code>PersonList</code>.
     * @alias module:model/PersonList
     * @param firstName {String} 
     * @param surname {String} 
     */
    constructor(firstName, surname) { 
        
        PersonList.initialize(this, firstName, surname);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, firstName, surname) { 
        obj['first_name'] = firstName;
        obj['surname'] = surname;
    }

    /**
     * Constructs a <code>PersonList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PersonList} obj Optional instance to populate.
     * @return {module:model/PersonList} The populated <code>PersonList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PersonList();

            if (data.hasOwnProperty('contact_cell')) {
                obj['contact_cell'] = ApiClient.convertToType(data['contact_cell'], 'String');
            }
            if (data.hasOwnProperty('contact_email')) {
                obj['contact_email'] = ApiClient.convertToType(data['contact_email'], 'String');
            }
            if (data.hasOwnProperty('contact_tel')) {
                obj['contact_tel'] = ApiClient.convertToType(data['contact_tel'], 'String');
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('person_guid')) {
                obj['person_guid'] = ApiClient.convertToType(data['person_guid'], 'String');
            }
            if (data.hasOwnProperty('registrations')) {
                obj['registrations'] = ApiClient.convertToType(data['registrations'], [RegistrationsList]);
            }
            if (data.hasOwnProperty('surname')) {
                obj['surname'] = ApiClient.convertToType(data['surname'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PersonList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PersonList</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PersonList.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['contact_cell'] && !(typeof data['contact_cell'] === 'string' || data['contact_cell'] instanceof String)) {
            throw new Error("Expected the field `contact_cell` to be a primitive type in the JSON string but got " + data['contact_cell']);
        }
        // ensure the json data is a string
        if (data['contact_email'] && !(typeof data['contact_email'] === 'string' || data['contact_email'] instanceof String)) {
            throw new Error("Expected the field `contact_email` to be a primitive type in the JSON string but got " + data['contact_email']);
        }
        // ensure the json data is a string
        if (data['contact_tel'] && !(typeof data['contact_tel'] === 'string' || data['contact_tel'] instanceof String)) {
            throw new Error("Expected the field `contact_tel` to be a primitive type in the JSON string but got " + data['contact_tel']);
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['person_guid'] && !(typeof data['person_guid'] === 'string' || data['person_guid'] instanceof String)) {
            throw new Error("Expected the field `person_guid` to be a primitive type in the JSON string but got " + data['person_guid']);
        }
        if (data['registrations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['registrations'])) {
                throw new Error("Expected the field `registrations` to be an array in the JSON data but got " + data['registrations']);
            }
            // validate the optional field `registrations` (array)
            for (const item of data['registrations']) {
                RegistrationsList.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['surname'] && !(typeof data['surname'] === 'string' || data['surname'] instanceof String)) {
            throw new Error("Expected the field `surname` to be a primitive type in the JSON string but got " + data['surname']);
        }

        return true;
    }


}

PersonList.RequiredProperties = ["first_name", "surname"];

/**
 * @member {String} contact_cell
 */
PersonList.prototype['contact_cell'] = undefined;

/**
 * @member {String} contact_email
 */
PersonList.prototype['contact_email'] = undefined;

/**
 * @member {String} contact_tel
 */
PersonList.prototype['contact_tel'] = undefined;

/**
 * @member {String} first_name
 */
PersonList.prototype['first_name'] = undefined;

/**
 * @member {String} person_guid
 */
PersonList.prototype['person_guid'] = undefined;

/**
 * @member {Array.<module:model/RegistrationsList>} registrations
 */
PersonList.prototype['registrations'] = undefined;

/**
 * @member {String} surname
 */
PersonList.prototype['surname'] = undefined;






export default PersonList;

