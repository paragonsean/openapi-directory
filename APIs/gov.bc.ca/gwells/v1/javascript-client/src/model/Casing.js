/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Casing model module.
 * @module model/Casing
 * @version v1
 */
class Casing {
    /**
     * Constructs a new <code>Casing</code>.
     * @alias module:model/Casing
     * @param diameter {Number} 
     * @param end {Number} 
     * @param start {Number} 
     */
    constructor(diameter, end, start) { 
        
        Casing.initialize(this, diameter, end, start);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, diameter, end, start) { 
        obj['diameter'] = diameter;
        obj['end'] = end;
        obj['start'] = start;
    }

    /**
     * Constructs a <code>Casing</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Casing} obj Optional instance to populate.
     * @return {module:model/Casing} The populated <code>Casing</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Casing();

            if (data.hasOwnProperty('casing_code')) {
                obj['casing_code'] = ApiClient.convertToType(data['casing_code'], 'String');
            }
            if (data.hasOwnProperty('casing_material')) {
                obj['casing_material'] = ApiClient.convertToType(data['casing_material'], 'String');
            }
            if (data.hasOwnProperty('diameter')) {
                obj['diameter'] = ApiClient.convertToType(data['diameter'], 'Number');
            }
            if (data.hasOwnProperty('drive_shoe')) {
                obj['drive_shoe'] = ApiClient.convertToType(data['drive_shoe'], 'Boolean');
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'Number');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Number');
            }
            if (data.hasOwnProperty('wall_thickness')) {
                obj['wall_thickness'] = ApiClient.convertToType(data['wall_thickness'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Casing</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Casing</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Casing.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['casing_code'] && !(typeof data['casing_code'] === 'string' || data['casing_code'] instanceof String)) {
            throw new Error("Expected the field `casing_code` to be a primitive type in the JSON string but got " + data['casing_code']);
        }
        // ensure the json data is a string
        if (data['casing_material'] && !(typeof data['casing_material'] === 'string' || data['casing_material'] instanceof String)) {
            throw new Error("Expected the field `casing_material` to be a primitive type in the JSON string but got " + data['casing_material']);
        }
        // ensure the json data is a string
        if (data['diameter'] && !(typeof data['diameter'] === 'string' || data['diameter'] instanceof String)) {
            throw new Error("Expected the field `diameter` to be a primitive type in the JSON string but got " + data['diameter']);
        }
        // ensure the json data is a string
        if (data['end'] && !(typeof data['end'] === 'string' || data['end'] instanceof String)) {
            throw new Error("Expected the field `end` to be a primitive type in the JSON string but got " + data['end']);
        }
        // ensure the json data is a string
        if (data['start'] && !(typeof data['start'] === 'string' || data['start'] instanceof String)) {
            throw new Error("Expected the field `start` to be a primitive type in the JSON string but got " + data['start']);
        }
        // ensure the json data is a string
        if (data['wall_thickness'] && !(typeof data['wall_thickness'] === 'string' || data['wall_thickness'] instanceof String)) {
            throw new Error("Expected the field `wall_thickness` to be a primitive type in the JSON string but got " + data['wall_thickness']);
        }

        return true;
    }


}

Casing.RequiredProperties = ["diameter", "end", "start"];

/**
 * @member {String} casing_code
 */
Casing.prototype['casing_code'] = undefined;

/**
 * @member {String} casing_material
 */
Casing.prototype['casing_material'] = undefined;

/**
 * @member {Number} diameter
 */
Casing.prototype['diameter'] = undefined;

/**
 * @member {Boolean} drive_shoe
 */
Casing.prototype['drive_shoe'] = undefined;

/**
 * @member {Number} end
 */
Casing.prototype['end'] = undefined;

/**
 * @member {Number} start
 */
Casing.prototype['start'] = undefined;

/**
 * @member {Number} wall_thickness
 */
Casing.prototype['wall_thickness'] = undefined;






export default Casing;

