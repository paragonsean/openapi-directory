/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICityList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICityList::OAICityList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICityList::OAICityList() {
    this->initializeModel();
}

OAICityList::~OAICityList() {}

void OAICityList::initializeModel() {

    m_organization_isSet = false;
    m_organization_isValid = false;
}

void OAICityList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICityList::fromJsonObject(QJsonObject json) {

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;
}

QString OAICityList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICityList::asJsonObject() const {
    QJsonObject obj;
    if (m_organization.isSet()) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    return obj;
}

OAIOrganization OAICityList::getOrganization() const {
    return m_organization;
}
void OAICityList::setOrganization(const OAIOrganization &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAICityList::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAICityList::is_organization_Valid() const{
    return m_organization_isValid;
}

bool OAICityList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICityList::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_organization_isValid && true;
}

} // namespace OpenAPI
