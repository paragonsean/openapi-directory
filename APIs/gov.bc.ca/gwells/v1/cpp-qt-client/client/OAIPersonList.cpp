/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersonList::OAIPersonList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersonList::OAIPersonList() {
    this->initializeModel();
}

OAIPersonList::~OAIPersonList() {}

void OAIPersonList::initializeModel() {

    m_contact_cell_isSet = false;
    m_contact_cell_isValid = false;

    m_contact_email_isSet = false;
    m_contact_email_isValid = false;

    m_contact_tel_isSet = false;
    m_contact_tel_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_person_guid_isSet = false;
    m_person_guid_isValid = false;

    m_registrations_isSet = false;
    m_registrations_isValid = false;

    m_surname_isSet = false;
    m_surname_isValid = false;
}

void OAIPersonList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersonList::fromJsonObject(QJsonObject json) {

    m_contact_cell_isValid = ::OpenAPI::fromJsonValue(m_contact_cell, json[QString("contact_cell")]);
    m_contact_cell_isSet = !json[QString("contact_cell")].isNull() && m_contact_cell_isValid;

    m_contact_email_isValid = ::OpenAPI::fromJsonValue(m_contact_email, json[QString("contact_email")]);
    m_contact_email_isSet = !json[QString("contact_email")].isNull() && m_contact_email_isValid;

    m_contact_tel_isValid = ::OpenAPI::fromJsonValue(m_contact_tel, json[QString("contact_tel")]);
    m_contact_tel_isSet = !json[QString("contact_tel")].isNull() && m_contact_tel_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_person_guid_isValid = ::OpenAPI::fromJsonValue(m_person_guid, json[QString("person_guid")]);
    m_person_guid_isSet = !json[QString("person_guid")].isNull() && m_person_guid_isValid;

    m_registrations_isValid = ::OpenAPI::fromJsonValue(m_registrations, json[QString("registrations")]);
    m_registrations_isSet = !json[QString("registrations")].isNull() && m_registrations_isValid;

    m_surname_isValid = ::OpenAPI::fromJsonValue(m_surname, json[QString("surname")]);
    m_surname_isSet = !json[QString("surname")].isNull() && m_surname_isValid;
}

QString OAIPersonList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersonList::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_cell_isSet) {
        obj.insert(QString("contact_cell"), ::OpenAPI::toJsonValue(m_contact_cell));
    }
    if (m_contact_email_isSet) {
        obj.insert(QString("contact_email"), ::OpenAPI::toJsonValue(m_contact_email));
    }
    if (m_contact_tel_isSet) {
        obj.insert(QString("contact_tel"), ::OpenAPI::toJsonValue(m_contact_tel));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_person_guid_isSet) {
        obj.insert(QString("person_guid"), ::OpenAPI::toJsonValue(m_person_guid));
    }
    if (m_registrations.size() > 0) {
        obj.insert(QString("registrations"), ::OpenAPI::toJsonValue(m_registrations));
    }
    if (m_surname_isSet) {
        obj.insert(QString("surname"), ::OpenAPI::toJsonValue(m_surname));
    }
    return obj;
}

QString OAIPersonList::getContactCell() const {
    return m_contact_cell;
}
void OAIPersonList::setContactCell(const QString &contact_cell) {
    m_contact_cell = contact_cell;
    m_contact_cell_isSet = true;
}

bool OAIPersonList::is_contact_cell_Set() const{
    return m_contact_cell_isSet;
}

bool OAIPersonList::is_contact_cell_Valid() const{
    return m_contact_cell_isValid;
}

QString OAIPersonList::getContactEmail() const {
    return m_contact_email;
}
void OAIPersonList::setContactEmail(const QString &contact_email) {
    m_contact_email = contact_email;
    m_contact_email_isSet = true;
}

bool OAIPersonList::is_contact_email_Set() const{
    return m_contact_email_isSet;
}

bool OAIPersonList::is_contact_email_Valid() const{
    return m_contact_email_isValid;
}

QString OAIPersonList::getContactTel() const {
    return m_contact_tel;
}
void OAIPersonList::setContactTel(const QString &contact_tel) {
    m_contact_tel = contact_tel;
    m_contact_tel_isSet = true;
}

bool OAIPersonList::is_contact_tel_Set() const{
    return m_contact_tel_isSet;
}

bool OAIPersonList::is_contact_tel_Valid() const{
    return m_contact_tel_isValid;
}

QString OAIPersonList::getFirstName() const {
    return m_first_name;
}
void OAIPersonList::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIPersonList::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIPersonList::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIPersonList::getPersonGuid() const {
    return m_person_guid;
}
void OAIPersonList::setPersonGuid(const QString &person_guid) {
    m_person_guid = person_guid;
    m_person_guid_isSet = true;
}

bool OAIPersonList::is_person_guid_Set() const{
    return m_person_guid_isSet;
}

bool OAIPersonList::is_person_guid_Valid() const{
    return m_person_guid_isValid;
}

QList<OAIRegistrationsList> OAIPersonList::getRegistrations() const {
    return m_registrations;
}
void OAIPersonList::setRegistrations(const QList<OAIRegistrationsList> &registrations) {
    m_registrations = registrations;
    m_registrations_isSet = true;
}

bool OAIPersonList::is_registrations_Set() const{
    return m_registrations_isSet;
}

bool OAIPersonList::is_registrations_Valid() const{
    return m_registrations_isValid;
}

QString OAIPersonList::getSurname() const {
    return m_surname;
}
void OAIPersonList::setSurname(const QString &surname) {
    m_surname = surname;
    m_surname_isSet = true;
}

bool OAIPersonList::is_surname_Set() const{
    return m_surname_isSet;
}

bool OAIPersonList::is_surname_Valid() const{
    return m_surname_isValid;
}

bool OAIPersonList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_cell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_tel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registrations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_surname_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersonList::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_first_name_isValid && m_surname_isValid && true;
}

} // namespace OpenAPI
