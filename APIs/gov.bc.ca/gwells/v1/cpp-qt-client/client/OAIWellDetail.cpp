/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWellDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWellDetail::OAIWellDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWellDetail::OAIWellDetail() {
    this->initializeModel();
}

OAIWellDetail::~OAIWellDetail() {}

void OAIWellDetail::initializeModel() {

    m_alteration_end_date_isSet = false;
    m_alteration_end_date_isValid = false;

    m_alternative_specs_submitted_isSet = false;
    m_alternative_specs_submitted_isValid = false;

    m_analytic_solution_type_isSet = false;
    m_analytic_solution_type_isValid = false;

    m_aquifer_isSet = false;
    m_aquifer_isValid = false;

    m_aquifer_vulnerability_index_isSet = false;
    m_aquifer_vulnerability_index_isValid = false;

    m_artesian_flow_isSet = false;
    m_artesian_flow_isValid = false;

    m_artesian_pressure_isSet = false;
    m_artesian_pressure_isValid = false;

    m_backfill_depth_isSet = false;
    m_backfill_depth_isValid = false;

    m_backfill_material_isSet = false;
    m_backfill_material_isValid = false;

    m_backfill_type_isSet = false;
    m_backfill_type_isValid = false;

    m_bcgs_id_isSet = false;
    m_bcgs_id_isValid = false;

    m_bedrock_depth_isSet = false;
    m_bedrock_depth_isValid = false;

    m_boundary_effect_isSet = false;
    m_boundary_effect_isValid = false;

    m_casing_set_isSet = false;
    m_casing_set_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_company_of_person_responsible_isSet = false;
    m_company_of_person_responsible_isValid = false;

    m_construction_end_date_isSet = false;
    m_construction_end_date_isValid = false;

    m_construction_start_date_isSet = false;
    m_construction_start_date_isValid = false;

    m_coordinate_acquisition_code_isSet = false;
    m_coordinate_acquisition_code_isValid = false;

    m_decommission_description_set_isSet = false;
    m_decommission_description_set_isValid = false;

    m_decommission_details_isSet = false;
    m_decommission_details_isValid = false;

    m_decommission_end_date_isSet = false;
    m_decommission_end_date_isValid = false;

    m_decommission_method_isSet = false;
    m_decommission_method_isValid = false;

    m_decommission_reason_isSet = false;
    m_decommission_reason_isValid = false;

    m_decommission_start_date_isSet = false;
    m_decommission_start_date_isValid = false;

    m_development_hours_isSet = false;
    m_development_hours_isValid = false;

    m_development_method_isSet = false;
    m_development_method_isValid = false;

    m_development_notes_isSet = false;
    m_development_notes_isValid = false;

    m_diameter_isSet = false;
    m_diameter_isValid = false;

    m_drawdown_isSet = false;
    m_drawdown_isValid = false;

    m_drilling_company_isSet = false;
    m_drilling_company_isValid = false;

    m_drilling_method_isSet = false;
    m_drilling_method_isValid = false;

    m_ems_isSet = false;
    m_ems_isValid = false;

    m_filter_pack_from_isSet = false;
    m_filter_pack_from_isValid = false;

    m_filter_pack_material_isSet = false;
    m_filter_pack_material_isValid = false;

    m_filter_pack_material_size_isSet = false;
    m_filter_pack_material_size_isValid = false;

    m_filter_pack_thickness_isSet = false;
    m_filter_pack_thickness_isValid = false;

    m_filter_pack_to_isSet = false;
    m_filter_pack_to_isValid = false;

    m_final_casing_stick_up_isSet = false;
    m_final_casing_stick_up_isValid = false;

    m_finished_well_depth_isSet = false;
    m_finished_well_depth_isValid = false;

    m_ground_elevation_isSet = false;
    m_ground_elevation_isValid = false;

    m_ground_elevation_method_isSet = false;
    m_ground_elevation_method_isValid = false;

    m_hydraulic_conductivity_isSet = false;
    m_hydraulic_conductivity_isValid = false;

    m_hydro_fracturing_performed_isSet = false;
    m_hydro_fracturing_performed_isValid = false;

    m_hydro_fracturing_yield_increase_isSet = false;
    m_hydro_fracturing_yield_increase_isValid = false;

    m_id_plate_attached_by_isSet = false;
    m_id_plate_attached_by_isValid = false;

    m_identification_plate_number_isSet = false;
    m_identification_plate_number_isValid = false;

    m_intended_water_use_isSet = false;
    m_intended_water_use_isValid = false;

    m_land_district_isSet = false;
    m_land_district_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_legal_block_isSet = false;
    m_legal_block_isValid = false;

    m_legal_district_lot_isSet = false;
    m_legal_district_lot_isValid = false;

    m_legal_lot_isSet = false;
    m_legal_lot_isValid = false;

    m_legal_pid_isSet = false;
    m_legal_pid_isValid = false;

    m_legal_plan_isSet = false;
    m_legal_plan_isValid = false;

    m_legal_range_isSet = false;
    m_legal_range_isValid = false;

    m_legal_section_isSet = false;
    m_legal_section_isValid = false;

    m_legal_township_isSet = false;
    m_legal_township_isValid = false;

    m_licenced_status_isSet = false;
    m_licenced_status_isValid = false;

    m_liner_diameter_isSet = false;
    m_liner_diameter_isValid = false;

    m_liner_from_isSet = false;
    m_liner_from_isValid = false;

    m_liner_material_isSet = false;
    m_liner_material_isValid = false;

    m_liner_thickness_isSet = false;
    m_liner_thickness_isValid = false;

    m_liner_to_isSet = false;
    m_liner_to_isValid = false;

    m_linerperforation_set_isSet = false;
    m_linerperforation_set_isValid = false;

    m_lithologydescription_set_isSet = false;
    m_lithologydescription_set_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_observation_well_number_isSet = false;
    m_observation_well_number_isValid = false;

    m_observation_well_status_isSet = false;
    m_observation_well_status_isValid = false;

    m_other_drilling_method_isSet = false;
    m_other_drilling_method_isValid = false;

    m_other_screen_bottom_isSet = false;
    m_other_screen_bottom_isValid = false;

    m_other_screen_material_isSet = false;
    m_other_screen_material_isValid = false;

    m_owner_full_name_isSet = false;
    m_owner_full_name_isValid = false;

    m_person_responsible_isSet = false;
    m_person_responsible_isValid = false;

    m_recommended_pump_depth_isSet = false;
    m_recommended_pump_depth_isValid = false;

    m_recommended_pump_rate_isSet = false;
    m_recommended_pump_rate_isValid = false;

    m_screen_bottom_isSet = false;
    m_screen_bottom_isValid = false;

    m_screen_information_isSet = false;
    m_screen_information_isValid = false;

    m_screen_intake_method_isSet = false;
    m_screen_intake_method_isValid = false;

    m_screen_material_isSet = false;
    m_screen_material_isValid = false;

    m_screen_opening_isSet = false;
    m_screen_opening_isValid = false;

    m_screen_set_isSet = false;
    m_screen_set_isValid = false;

    m_screen_type_isSet = false;
    m_screen_type_isValid = false;

    m_sealant_material_isSet = false;
    m_sealant_material_isValid = false;

    m_specific_storage_isSet = false;
    m_specific_storage_isValid = false;

    m_specific_yield_isSet = false;
    m_specific_yield_isValid = false;

    m_static_level_before_test_isSet = false;
    m_static_level_before_test_isValid = false;

    m_static_water_level_isSet = false;
    m_static_water_level_isValid = false;

    m_storativity_isSet = false;
    m_storativity_isValid = false;

    m_street_address_isSet = false;
    m_street_address_isValid = false;

    m_surface_seal_depth_isSet = false;
    m_surface_seal_depth_isValid = false;

    m_surface_seal_length_isSet = false;
    m_surface_seal_length_isValid = false;

    m_surface_seal_material_isSet = false;
    m_surface_seal_material_isValid = false;

    m_surface_seal_method_isSet = false;
    m_surface_seal_method_isValid = false;

    m_surface_seal_thickness_isSet = false;
    m_surface_seal_thickness_isValid = false;

    m_testing_duration_isSet = false;
    m_testing_duration_isValid = false;

    m_testing_method_isSet = false;
    m_testing_method_isValid = false;

    m_total_depth_drilled_isSet = false;
    m_total_depth_drilled_isValid = false;

    m_transmissivity_isSet = false;
    m_transmissivity_isValid = false;

    m_utm_easting_isSet = false;
    m_utm_easting_isValid = false;

    m_utm_northing_isSet = false;
    m_utm_northing_isValid = false;

    m_utm_zone_code_isSet = false;
    m_utm_zone_code_isValid = false;

    m_water_quality_characteristics_isSet = false;
    m_water_quality_characteristics_isValid = false;

    m_water_quality_colour_isSet = false;
    m_water_quality_colour_isValid = false;

    m_water_quality_odour_isSet = false;
    m_water_quality_odour_isValid = false;

    m_water_supply_system_name_isSet = false;
    m_water_supply_system_name_isValid = false;

    m_water_supply_system_well_name_isSet = false;
    m_water_supply_system_well_name_isValid = false;

    m_well_isSet = false;
    m_well_isValid = false;

    m_well_cap_type_isSet = false;
    m_well_cap_type_isValid = false;

    m_well_class_isSet = false;
    m_well_class_isValid = false;

    m_well_disinfected_isSet = false;
    m_well_disinfected_isValid = false;

    m_well_guid_isSet = false;
    m_well_guid_isValid = false;

    m_well_identification_plate_attached_isSet = false;
    m_well_identification_plate_attached_isValid = false;

    m_well_location_description_isSet = false;
    m_well_location_description_isValid = false;

    m_well_orientation_isSet = false;
    m_well_orientation_isValid = false;

    m_well_status_isSet = false;
    m_well_status_isValid = false;

    m_well_subclass_isSet = false;
    m_well_subclass_isValid = false;

    m_well_tag_number_isSet = false;
    m_well_tag_number_isValid = false;

    m_well_yield_isSet = false;
    m_well_yield_isValid = false;

    m_well_yield_unit_isSet = false;
    m_well_yield_unit_isValid = false;

    m_yield_estimation_duration_isSet = false;
    m_yield_estimation_duration_isValid = false;

    m_yield_estimation_method_isSet = false;
    m_yield_estimation_method_isValid = false;

    m_yield_estimation_rate_isSet = false;
    m_yield_estimation_rate_isValid = false;
}

void OAIWellDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWellDetail::fromJsonObject(QJsonObject json) {

    m_alteration_end_date_isValid = ::OpenAPI::fromJsonValue(m_alteration_end_date, json[QString("alteration_end_date")]);
    m_alteration_end_date_isSet = !json[QString("alteration_end_date")].isNull() && m_alteration_end_date_isValid;

    m_alternative_specs_submitted_isValid = ::OpenAPI::fromJsonValue(m_alternative_specs_submitted, json[QString("alternative_specs_submitted")]);
    m_alternative_specs_submitted_isSet = !json[QString("alternative_specs_submitted")].isNull() && m_alternative_specs_submitted_isValid;

    m_analytic_solution_type_isValid = ::OpenAPI::fromJsonValue(m_analytic_solution_type, json[QString("analytic_solution_type")]);
    m_analytic_solution_type_isSet = !json[QString("analytic_solution_type")].isNull() && m_analytic_solution_type_isValid;

    m_aquifer_isValid = ::OpenAPI::fromJsonValue(m_aquifer, json[QString("aquifer")]);
    m_aquifer_isSet = !json[QString("aquifer")].isNull() && m_aquifer_isValid;

    m_aquifer_vulnerability_index_isValid = ::OpenAPI::fromJsonValue(m_aquifer_vulnerability_index, json[QString("aquifer_vulnerability_index")]);
    m_aquifer_vulnerability_index_isSet = !json[QString("aquifer_vulnerability_index")].isNull() && m_aquifer_vulnerability_index_isValid;

    m_artesian_flow_isValid = ::OpenAPI::fromJsonValue(m_artesian_flow, json[QString("artesian_flow")]);
    m_artesian_flow_isSet = !json[QString("artesian_flow")].isNull() && m_artesian_flow_isValid;

    m_artesian_pressure_isValid = ::OpenAPI::fromJsonValue(m_artesian_pressure, json[QString("artesian_pressure")]);
    m_artesian_pressure_isSet = !json[QString("artesian_pressure")].isNull() && m_artesian_pressure_isValid;

    m_backfill_depth_isValid = ::OpenAPI::fromJsonValue(m_backfill_depth, json[QString("backfill_depth")]);
    m_backfill_depth_isSet = !json[QString("backfill_depth")].isNull() && m_backfill_depth_isValid;

    m_backfill_material_isValid = ::OpenAPI::fromJsonValue(m_backfill_material, json[QString("backfill_material")]);
    m_backfill_material_isSet = !json[QString("backfill_material")].isNull() && m_backfill_material_isValid;

    m_backfill_type_isValid = ::OpenAPI::fromJsonValue(m_backfill_type, json[QString("backfill_type")]);
    m_backfill_type_isSet = !json[QString("backfill_type")].isNull() && m_backfill_type_isValid;

    m_bcgs_id_isValid = ::OpenAPI::fromJsonValue(m_bcgs_id, json[QString("bcgs_id")]);
    m_bcgs_id_isSet = !json[QString("bcgs_id")].isNull() && m_bcgs_id_isValid;

    m_bedrock_depth_isValid = ::OpenAPI::fromJsonValue(m_bedrock_depth, json[QString("bedrock_depth")]);
    m_bedrock_depth_isSet = !json[QString("bedrock_depth")].isNull() && m_bedrock_depth_isValid;

    m_boundary_effect_isValid = ::OpenAPI::fromJsonValue(m_boundary_effect, json[QString("boundary_effect")]);
    m_boundary_effect_isSet = !json[QString("boundary_effect")].isNull() && m_boundary_effect_isValid;

    m_casing_set_isValid = ::OpenAPI::fromJsonValue(m_casing_set, json[QString("casing_set")]);
    m_casing_set_isSet = !json[QString("casing_set")].isNull() && m_casing_set_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_company_of_person_responsible_isValid = ::OpenAPI::fromJsonValue(m_company_of_person_responsible, json[QString("company_of_person_responsible")]);
    m_company_of_person_responsible_isSet = !json[QString("company_of_person_responsible")].isNull() && m_company_of_person_responsible_isValid;

    m_construction_end_date_isValid = ::OpenAPI::fromJsonValue(m_construction_end_date, json[QString("construction_end_date")]);
    m_construction_end_date_isSet = !json[QString("construction_end_date")].isNull() && m_construction_end_date_isValid;

    m_construction_start_date_isValid = ::OpenAPI::fromJsonValue(m_construction_start_date, json[QString("construction_start_date")]);
    m_construction_start_date_isSet = !json[QString("construction_start_date")].isNull() && m_construction_start_date_isValid;

    m_coordinate_acquisition_code_isValid = ::OpenAPI::fromJsonValue(m_coordinate_acquisition_code, json[QString("coordinate_acquisition_code")]);
    m_coordinate_acquisition_code_isSet = !json[QString("coordinate_acquisition_code")].isNull() && m_coordinate_acquisition_code_isValid;

    m_decommission_description_set_isValid = ::OpenAPI::fromJsonValue(m_decommission_description_set, json[QString("decommission_description_set")]);
    m_decommission_description_set_isSet = !json[QString("decommission_description_set")].isNull() && m_decommission_description_set_isValid;

    m_decommission_details_isValid = ::OpenAPI::fromJsonValue(m_decommission_details, json[QString("decommission_details")]);
    m_decommission_details_isSet = !json[QString("decommission_details")].isNull() && m_decommission_details_isValid;

    m_decommission_end_date_isValid = ::OpenAPI::fromJsonValue(m_decommission_end_date, json[QString("decommission_end_date")]);
    m_decommission_end_date_isSet = !json[QString("decommission_end_date")].isNull() && m_decommission_end_date_isValid;

    m_decommission_method_isValid = ::OpenAPI::fromJsonValue(m_decommission_method, json[QString("decommission_method")]);
    m_decommission_method_isSet = !json[QString("decommission_method")].isNull() && m_decommission_method_isValid;

    m_decommission_reason_isValid = ::OpenAPI::fromJsonValue(m_decommission_reason, json[QString("decommission_reason")]);
    m_decommission_reason_isSet = !json[QString("decommission_reason")].isNull() && m_decommission_reason_isValid;

    m_decommission_start_date_isValid = ::OpenAPI::fromJsonValue(m_decommission_start_date, json[QString("decommission_start_date")]);
    m_decommission_start_date_isSet = !json[QString("decommission_start_date")].isNull() && m_decommission_start_date_isValid;

    m_development_hours_isValid = ::OpenAPI::fromJsonValue(m_development_hours, json[QString("development_hours")]);
    m_development_hours_isSet = !json[QString("development_hours")].isNull() && m_development_hours_isValid;

    m_development_method_isValid = ::OpenAPI::fromJsonValue(m_development_method, json[QString("development_method")]);
    m_development_method_isSet = !json[QString("development_method")].isNull() && m_development_method_isValid;

    m_development_notes_isValid = ::OpenAPI::fromJsonValue(m_development_notes, json[QString("development_notes")]);
    m_development_notes_isSet = !json[QString("development_notes")].isNull() && m_development_notes_isValid;

    m_diameter_isValid = ::OpenAPI::fromJsonValue(m_diameter, json[QString("diameter")]);
    m_diameter_isSet = !json[QString("diameter")].isNull() && m_diameter_isValid;

    m_drawdown_isValid = ::OpenAPI::fromJsonValue(m_drawdown, json[QString("drawdown")]);
    m_drawdown_isSet = !json[QString("drawdown")].isNull() && m_drawdown_isValid;

    m_drilling_company_isValid = ::OpenAPI::fromJsonValue(m_drilling_company, json[QString("drilling_company")]);
    m_drilling_company_isSet = !json[QString("drilling_company")].isNull() && m_drilling_company_isValid;

    m_drilling_method_isValid = ::OpenAPI::fromJsonValue(m_drilling_method, json[QString("drilling_method")]);
    m_drilling_method_isSet = !json[QString("drilling_method")].isNull() && m_drilling_method_isValid;

    m_ems_isValid = ::OpenAPI::fromJsonValue(m_ems, json[QString("ems")]);
    m_ems_isSet = !json[QString("ems")].isNull() && m_ems_isValid;

    m_filter_pack_from_isValid = ::OpenAPI::fromJsonValue(m_filter_pack_from, json[QString("filter_pack_from")]);
    m_filter_pack_from_isSet = !json[QString("filter_pack_from")].isNull() && m_filter_pack_from_isValid;

    m_filter_pack_material_isValid = ::OpenAPI::fromJsonValue(m_filter_pack_material, json[QString("filter_pack_material")]);
    m_filter_pack_material_isSet = !json[QString("filter_pack_material")].isNull() && m_filter_pack_material_isValid;

    m_filter_pack_material_size_isValid = ::OpenAPI::fromJsonValue(m_filter_pack_material_size, json[QString("filter_pack_material_size")]);
    m_filter_pack_material_size_isSet = !json[QString("filter_pack_material_size")].isNull() && m_filter_pack_material_size_isValid;

    m_filter_pack_thickness_isValid = ::OpenAPI::fromJsonValue(m_filter_pack_thickness, json[QString("filter_pack_thickness")]);
    m_filter_pack_thickness_isSet = !json[QString("filter_pack_thickness")].isNull() && m_filter_pack_thickness_isValid;

    m_filter_pack_to_isValid = ::OpenAPI::fromJsonValue(m_filter_pack_to, json[QString("filter_pack_to")]);
    m_filter_pack_to_isSet = !json[QString("filter_pack_to")].isNull() && m_filter_pack_to_isValid;

    m_final_casing_stick_up_isValid = ::OpenAPI::fromJsonValue(m_final_casing_stick_up, json[QString("final_casing_stick_up")]);
    m_final_casing_stick_up_isSet = !json[QString("final_casing_stick_up")].isNull() && m_final_casing_stick_up_isValid;

    m_finished_well_depth_isValid = ::OpenAPI::fromJsonValue(m_finished_well_depth, json[QString("finished_well_depth")]);
    m_finished_well_depth_isSet = !json[QString("finished_well_depth")].isNull() && m_finished_well_depth_isValid;

    m_ground_elevation_isValid = ::OpenAPI::fromJsonValue(m_ground_elevation, json[QString("ground_elevation")]);
    m_ground_elevation_isSet = !json[QString("ground_elevation")].isNull() && m_ground_elevation_isValid;

    m_ground_elevation_method_isValid = ::OpenAPI::fromJsonValue(m_ground_elevation_method, json[QString("ground_elevation_method")]);
    m_ground_elevation_method_isSet = !json[QString("ground_elevation_method")].isNull() && m_ground_elevation_method_isValid;

    m_hydraulic_conductivity_isValid = ::OpenAPI::fromJsonValue(m_hydraulic_conductivity, json[QString("hydraulic_conductivity")]);
    m_hydraulic_conductivity_isSet = !json[QString("hydraulic_conductivity")].isNull() && m_hydraulic_conductivity_isValid;

    m_hydro_fracturing_performed_isValid = ::OpenAPI::fromJsonValue(m_hydro_fracturing_performed, json[QString("hydro_fracturing_performed")]);
    m_hydro_fracturing_performed_isSet = !json[QString("hydro_fracturing_performed")].isNull() && m_hydro_fracturing_performed_isValid;

    m_hydro_fracturing_yield_increase_isValid = ::OpenAPI::fromJsonValue(m_hydro_fracturing_yield_increase, json[QString("hydro_fracturing_yield_increase")]);
    m_hydro_fracturing_yield_increase_isSet = !json[QString("hydro_fracturing_yield_increase")].isNull() && m_hydro_fracturing_yield_increase_isValid;

    m_id_plate_attached_by_isValid = ::OpenAPI::fromJsonValue(m_id_plate_attached_by, json[QString("id_plate_attached_by")]);
    m_id_plate_attached_by_isSet = !json[QString("id_plate_attached_by")].isNull() && m_id_plate_attached_by_isValid;

    m_identification_plate_number_isValid = ::OpenAPI::fromJsonValue(m_identification_plate_number, json[QString("identification_plate_number")]);
    m_identification_plate_number_isSet = !json[QString("identification_plate_number")].isNull() && m_identification_plate_number_isValid;

    m_intended_water_use_isValid = ::OpenAPI::fromJsonValue(m_intended_water_use, json[QString("intended_water_use")]);
    m_intended_water_use_isSet = !json[QString("intended_water_use")].isNull() && m_intended_water_use_isValid;

    m_land_district_isValid = ::OpenAPI::fromJsonValue(m_land_district, json[QString("land_district")]);
    m_land_district_isSet = !json[QString("land_district")].isNull() && m_land_district_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_legal_block_isValid = ::OpenAPI::fromJsonValue(m_legal_block, json[QString("legal_block")]);
    m_legal_block_isSet = !json[QString("legal_block")].isNull() && m_legal_block_isValid;

    m_legal_district_lot_isValid = ::OpenAPI::fromJsonValue(m_legal_district_lot, json[QString("legal_district_lot")]);
    m_legal_district_lot_isSet = !json[QString("legal_district_lot")].isNull() && m_legal_district_lot_isValid;

    m_legal_lot_isValid = ::OpenAPI::fromJsonValue(m_legal_lot, json[QString("legal_lot")]);
    m_legal_lot_isSet = !json[QString("legal_lot")].isNull() && m_legal_lot_isValid;

    m_legal_pid_isValid = ::OpenAPI::fromJsonValue(m_legal_pid, json[QString("legal_pid")]);
    m_legal_pid_isSet = !json[QString("legal_pid")].isNull() && m_legal_pid_isValid;

    m_legal_plan_isValid = ::OpenAPI::fromJsonValue(m_legal_plan, json[QString("legal_plan")]);
    m_legal_plan_isSet = !json[QString("legal_plan")].isNull() && m_legal_plan_isValid;

    m_legal_range_isValid = ::OpenAPI::fromJsonValue(m_legal_range, json[QString("legal_range")]);
    m_legal_range_isSet = !json[QString("legal_range")].isNull() && m_legal_range_isValid;

    m_legal_section_isValid = ::OpenAPI::fromJsonValue(m_legal_section, json[QString("legal_section")]);
    m_legal_section_isSet = !json[QString("legal_section")].isNull() && m_legal_section_isValid;

    m_legal_township_isValid = ::OpenAPI::fromJsonValue(m_legal_township, json[QString("legal_township")]);
    m_legal_township_isSet = !json[QString("legal_township")].isNull() && m_legal_township_isValid;

    m_licenced_status_isValid = ::OpenAPI::fromJsonValue(m_licenced_status, json[QString("licenced_status")]);
    m_licenced_status_isSet = !json[QString("licenced_status")].isNull() && m_licenced_status_isValid;

    m_liner_diameter_isValid = ::OpenAPI::fromJsonValue(m_liner_diameter, json[QString("liner_diameter")]);
    m_liner_diameter_isSet = !json[QString("liner_diameter")].isNull() && m_liner_diameter_isValid;

    m_liner_from_isValid = ::OpenAPI::fromJsonValue(m_liner_from, json[QString("liner_from")]);
    m_liner_from_isSet = !json[QString("liner_from")].isNull() && m_liner_from_isValid;

    m_liner_material_isValid = ::OpenAPI::fromJsonValue(m_liner_material, json[QString("liner_material")]);
    m_liner_material_isSet = !json[QString("liner_material")].isNull() && m_liner_material_isValid;

    m_liner_thickness_isValid = ::OpenAPI::fromJsonValue(m_liner_thickness, json[QString("liner_thickness")]);
    m_liner_thickness_isSet = !json[QString("liner_thickness")].isNull() && m_liner_thickness_isValid;

    m_liner_to_isValid = ::OpenAPI::fromJsonValue(m_liner_to, json[QString("liner_to")]);
    m_liner_to_isSet = !json[QString("liner_to")].isNull() && m_liner_to_isValid;

    m_linerperforation_set_isValid = ::OpenAPI::fromJsonValue(m_linerperforation_set, json[QString("linerperforation_set")]);
    m_linerperforation_set_isSet = !json[QString("linerperforation_set")].isNull() && m_linerperforation_set_isValid;

    m_lithologydescription_set_isValid = ::OpenAPI::fromJsonValue(m_lithologydescription_set, json[QString("lithologydescription_set")]);
    m_lithologydescription_set_isSet = !json[QString("lithologydescription_set")].isNull() && m_lithologydescription_set_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_observation_well_number_isValid = ::OpenAPI::fromJsonValue(m_observation_well_number, json[QString("observation_well_number")]);
    m_observation_well_number_isSet = !json[QString("observation_well_number")].isNull() && m_observation_well_number_isValid;

    m_observation_well_status_isValid = ::OpenAPI::fromJsonValue(m_observation_well_status, json[QString("observation_well_status")]);
    m_observation_well_status_isSet = !json[QString("observation_well_status")].isNull() && m_observation_well_status_isValid;

    m_other_drilling_method_isValid = ::OpenAPI::fromJsonValue(m_other_drilling_method, json[QString("other_drilling_method")]);
    m_other_drilling_method_isSet = !json[QString("other_drilling_method")].isNull() && m_other_drilling_method_isValid;

    m_other_screen_bottom_isValid = ::OpenAPI::fromJsonValue(m_other_screen_bottom, json[QString("other_screen_bottom")]);
    m_other_screen_bottom_isSet = !json[QString("other_screen_bottom")].isNull() && m_other_screen_bottom_isValid;

    m_other_screen_material_isValid = ::OpenAPI::fromJsonValue(m_other_screen_material, json[QString("other_screen_material")]);
    m_other_screen_material_isSet = !json[QString("other_screen_material")].isNull() && m_other_screen_material_isValid;

    m_owner_full_name_isValid = ::OpenAPI::fromJsonValue(m_owner_full_name, json[QString("owner_full_name")]);
    m_owner_full_name_isSet = !json[QString("owner_full_name")].isNull() && m_owner_full_name_isValid;

    m_person_responsible_isValid = ::OpenAPI::fromJsonValue(m_person_responsible, json[QString("person_responsible")]);
    m_person_responsible_isSet = !json[QString("person_responsible")].isNull() && m_person_responsible_isValid;

    m_recommended_pump_depth_isValid = ::OpenAPI::fromJsonValue(m_recommended_pump_depth, json[QString("recommended_pump_depth")]);
    m_recommended_pump_depth_isSet = !json[QString("recommended_pump_depth")].isNull() && m_recommended_pump_depth_isValid;

    m_recommended_pump_rate_isValid = ::OpenAPI::fromJsonValue(m_recommended_pump_rate, json[QString("recommended_pump_rate")]);
    m_recommended_pump_rate_isSet = !json[QString("recommended_pump_rate")].isNull() && m_recommended_pump_rate_isValid;

    m_screen_bottom_isValid = ::OpenAPI::fromJsonValue(m_screen_bottom, json[QString("screen_bottom")]);
    m_screen_bottom_isSet = !json[QString("screen_bottom")].isNull() && m_screen_bottom_isValid;

    m_screen_information_isValid = ::OpenAPI::fromJsonValue(m_screen_information, json[QString("screen_information")]);
    m_screen_information_isSet = !json[QString("screen_information")].isNull() && m_screen_information_isValid;

    m_screen_intake_method_isValid = ::OpenAPI::fromJsonValue(m_screen_intake_method, json[QString("screen_intake_method")]);
    m_screen_intake_method_isSet = !json[QString("screen_intake_method")].isNull() && m_screen_intake_method_isValid;

    m_screen_material_isValid = ::OpenAPI::fromJsonValue(m_screen_material, json[QString("screen_material")]);
    m_screen_material_isSet = !json[QString("screen_material")].isNull() && m_screen_material_isValid;

    m_screen_opening_isValid = ::OpenAPI::fromJsonValue(m_screen_opening, json[QString("screen_opening")]);
    m_screen_opening_isSet = !json[QString("screen_opening")].isNull() && m_screen_opening_isValid;

    m_screen_set_isValid = ::OpenAPI::fromJsonValue(m_screen_set, json[QString("screen_set")]);
    m_screen_set_isSet = !json[QString("screen_set")].isNull() && m_screen_set_isValid;

    m_screen_type_isValid = ::OpenAPI::fromJsonValue(m_screen_type, json[QString("screen_type")]);
    m_screen_type_isSet = !json[QString("screen_type")].isNull() && m_screen_type_isValid;

    m_sealant_material_isValid = ::OpenAPI::fromJsonValue(m_sealant_material, json[QString("sealant_material")]);
    m_sealant_material_isSet = !json[QString("sealant_material")].isNull() && m_sealant_material_isValid;

    m_specific_storage_isValid = ::OpenAPI::fromJsonValue(m_specific_storage, json[QString("specific_storage")]);
    m_specific_storage_isSet = !json[QString("specific_storage")].isNull() && m_specific_storage_isValid;

    m_specific_yield_isValid = ::OpenAPI::fromJsonValue(m_specific_yield, json[QString("specific_yield")]);
    m_specific_yield_isSet = !json[QString("specific_yield")].isNull() && m_specific_yield_isValid;

    m_static_level_before_test_isValid = ::OpenAPI::fromJsonValue(m_static_level_before_test, json[QString("static_level_before_test")]);
    m_static_level_before_test_isSet = !json[QString("static_level_before_test")].isNull() && m_static_level_before_test_isValid;

    m_static_water_level_isValid = ::OpenAPI::fromJsonValue(m_static_water_level, json[QString("static_water_level")]);
    m_static_water_level_isSet = !json[QString("static_water_level")].isNull() && m_static_water_level_isValid;

    m_storativity_isValid = ::OpenAPI::fromJsonValue(m_storativity, json[QString("storativity")]);
    m_storativity_isSet = !json[QString("storativity")].isNull() && m_storativity_isValid;

    m_street_address_isValid = ::OpenAPI::fromJsonValue(m_street_address, json[QString("street_address")]);
    m_street_address_isSet = !json[QString("street_address")].isNull() && m_street_address_isValid;

    m_surface_seal_depth_isValid = ::OpenAPI::fromJsonValue(m_surface_seal_depth, json[QString("surface_seal_depth")]);
    m_surface_seal_depth_isSet = !json[QString("surface_seal_depth")].isNull() && m_surface_seal_depth_isValid;

    m_surface_seal_length_isValid = ::OpenAPI::fromJsonValue(m_surface_seal_length, json[QString("surface_seal_length")]);
    m_surface_seal_length_isSet = !json[QString("surface_seal_length")].isNull() && m_surface_seal_length_isValid;

    m_surface_seal_material_isValid = ::OpenAPI::fromJsonValue(m_surface_seal_material, json[QString("surface_seal_material")]);
    m_surface_seal_material_isSet = !json[QString("surface_seal_material")].isNull() && m_surface_seal_material_isValid;

    m_surface_seal_method_isValid = ::OpenAPI::fromJsonValue(m_surface_seal_method, json[QString("surface_seal_method")]);
    m_surface_seal_method_isSet = !json[QString("surface_seal_method")].isNull() && m_surface_seal_method_isValid;

    m_surface_seal_thickness_isValid = ::OpenAPI::fromJsonValue(m_surface_seal_thickness, json[QString("surface_seal_thickness")]);
    m_surface_seal_thickness_isSet = !json[QString("surface_seal_thickness")].isNull() && m_surface_seal_thickness_isValid;

    m_testing_duration_isValid = ::OpenAPI::fromJsonValue(m_testing_duration, json[QString("testing_duration")]);
    m_testing_duration_isSet = !json[QString("testing_duration")].isNull() && m_testing_duration_isValid;

    m_testing_method_isValid = ::OpenAPI::fromJsonValue(m_testing_method, json[QString("testing_method")]);
    m_testing_method_isSet = !json[QString("testing_method")].isNull() && m_testing_method_isValid;

    m_total_depth_drilled_isValid = ::OpenAPI::fromJsonValue(m_total_depth_drilled, json[QString("total_depth_drilled")]);
    m_total_depth_drilled_isSet = !json[QString("total_depth_drilled")].isNull() && m_total_depth_drilled_isValid;

    m_transmissivity_isValid = ::OpenAPI::fromJsonValue(m_transmissivity, json[QString("transmissivity")]);
    m_transmissivity_isSet = !json[QString("transmissivity")].isNull() && m_transmissivity_isValid;

    m_utm_easting_isValid = ::OpenAPI::fromJsonValue(m_utm_easting, json[QString("utm_easting")]);
    m_utm_easting_isSet = !json[QString("utm_easting")].isNull() && m_utm_easting_isValid;

    m_utm_northing_isValid = ::OpenAPI::fromJsonValue(m_utm_northing, json[QString("utm_northing")]);
    m_utm_northing_isSet = !json[QString("utm_northing")].isNull() && m_utm_northing_isValid;

    m_utm_zone_code_isValid = ::OpenAPI::fromJsonValue(m_utm_zone_code, json[QString("utm_zone_code")]);
    m_utm_zone_code_isSet = !json[QString("utm_zone_code")].isNull() && m_utm_zone_code_isValid;

    m_water_quality_characteristics_isValid = ::OpenAPI::fromJsonValue(m_water_quality_characteristics, json[QString("water_quality_characteristics")]);
    m_water_quality_characteristics_isSet = !json[QString("water_quality_characteristics")].isNull() && m_water_quality_characteristics_isValid;

    m_water_quality_colour_isValid = ::OpenAPI::fromJsonValue(m_water_quality_colour, json[QString("water_quality_colour")]);
    m_water_quality_colour_isSet = !json[QString("water_quality_colour")].isNull() && m_water_quality_colour_isValid;

    m_water_quality_odour_isValid = ::OpenAPI::fromJsonValue(m_water_quality_odour, json[QString("water_quality_odour")]);
    m_water_quality_odour_isSet = !json[QString("water_quality_odour")].isNull() && m_water_quality_odour_isValid;

    m_water_supply_system_name_isValid = ::OpenAPI::fromJsonValue(m_water_supply_system_name, json[QString("water_supply_system_name")]);
    m_water_supply_system_name_isSet = !json[QString("water_supply_system_name")].isNull() && m_water_supply_system_name_isValid;

    m_water_supply_system_well_name_isValid = ::OpenAPI::fromJsonValue(m_water_supply_system_well_name, json[QString("water_supply_system_well_name")]);
    m_water_supply_system_well_name_isSet = !json[QString("water_supply_system_well_name")].isNull() && m_water_supply_system_well_name_isValid;

    m_well_isValid = ::OpenAPI::fromJsonValue(m_well, json[QString("well")]);
    m_well_isSet = !json[QString("well")].isNull() && m_well_isValid;

    m_well_cap_type_isValid = ::OpenAPI::fromJsonValue(m_well_cap_type, json[QString("well_cap_type")]);
    m_well_cap_type_isSet = !json[QString("well_cap_type")].isNull() && m_well_cap_type_isValid;

    m_well_class_isValid = ::OpenAPI::fromJsonValue(m_well_class, json[QString("well_class")]);
    m_well_class_isSet = !json[QString("well_class")].isNull() && m_well_class_isValid;

    m_well_disinfected_isValid = ::OpenAPI::fromJsonValue(m_well_disinfected, json[QString("well_disinfected")]);
    m_well_disinfected_isSet = !json[QString("well_disinfected")].isNull() && m_well_disinfected_isValid;

    m_well_guid_isValid = ::OpenAPI::fromJsonValue(m_well_guid, json[QString("well_guid")]);
    m_well_guid_isSet = !json[QString("well_guid")].isNull() && m_well_guid_isValid;

    m_well_identification_plate_attached_isValid = ::OpenAPI::fromJsonValue(m_well_identification_plate_attached, json[QString("well_identification_plate_attached")]);
    m_well_identification_plate_attached_isSet = !json[QString("well_identification_plate_attached")].isNull() && m_well_identification_plate_attached_isValid;

    m_well_location_description_isValid = ::OpenAPI::fromJsonValue(m_well_location_description, json[QString("well_location_description")]);
    m_well_location_description_isSet = !json[QString("well_location_description")].isNull() && m_well_location_description_isValid;

    m_well_orientation_isValid = ::OpenAPI::fromJsonValue(m_well_orientation, json[QString("well_orientation")]);
    m_well_orientation_isSet = !json[QString("well_orientation")].isNull() && m_well_orientation_isValid;

    m_well_status_isValid = ::OpenAPI::fromJsonValue(m_well_status, json[QString("well_status")]);
    m_well_status_isSet = !json[QString("well_status")].isNull() && m_well_status_isValid;

    m_well_subclass_isValid = ::OpenAPI::fromJsonValue(m_well_subclass, json[QString("well_subclass")]);
    m_well_subclass_isSet = !json[QString("well_subclass")].isNull() && m_well_subclass_isValid;

    m_well_tag_number_isValid = ::OpenAPI::fromJsonValue(m_well_tag_number, json[QString("well_tag_number")]);
    m_well_tag_number_isSet = !json[QString("well_tag_number")].isNull() && m_well_tag_number_isValid;

    m_well_yield_isValid = ::OpenAPI::fromJsonValue(m_well_yield, json[QString("well_yield")]);
    m_well_yield_isSet = !json[QString("well_yield")].isNull() && m_well_yield_isValid;

    m_well_yield_unit_isValid = ::OpenAPI::fromJsonValue(m_well_yield_unit, json[QString("well_yield_unit")]);
    m_well_yield_unit_isSet = !json[QString("well_yield_unit")].isNull() && m_well_yield_unit_isValid;

    m_yield_estimation_duration_isValid = ::OpenAPI::fromJsonValue(m_yield_estimation_duration, json[QString("yield_estimation_duration")]);
    m_yield_estimation_duration_isSet = !json[QString("yield_estimation_duration")].isNull() && m_yield_estimation_duration_isValid;

    m_yield_estimation_method_isValid = ::OpenAPI::fromJsonValue(m_yield_estimation_method, json[QString("yield_estimation_method")]);
    m_yield_estimation_method_isSet = !json[QString("yield_estimation_method")].isNull() && m_yield_estimation_method_isValid;

    m_yield_estimation_rate_isValid = ::OpenAPI::fromJsonValue(m_yield_estimation_rate, json[QString("yield_estimation_rate")]);
    m_yield_estimation_rate_isSet = !json[QString("yield_estimation_rate")].isNull() && m_yield_estimation_rate_isValid;
}

QString OAIWellDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWellDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_alteration_end_date_isSet) {
        obj.insert(QString("alteration_end_date"), ::OpenAPI::toJsonValue(m_alteration_end_date));
    }
    if (m_alternative_specs_submitted_isSet) {
        obj.insert(QString("alternative_specs_submitted"), ::OpenAPI::toJsonValue(m_alternative_specs_submitted));
    }
    if (m_analytic_solution_type_isSet) {
        obj.insert(QString("analytic_solution_type"), ::OpenAPI::toJsonValue(m_analytic_solution_type));
    }
    if (m_aquifer_isSet) {
        obj.insert(QString("aquifer"), ::OpenAPI::toJsonValue(m_aquifer));
    }
    if (m_aquifer_vulnerability_index_isSet) {
        obj.insert(QString("aquifer_vulnerability_index"), ::OpenAPI::toJsonValue(m_aquifer_vulnerability_index));
    }
    if (m_artesian_flow_isSet) {
        obj.insert(QString("artesian_flow"), ::OpenAPI::toJsonValue(m_artesian_flow));
    }
    if (m_artesian_pressure_isSet) {
        obj.insert(QString("artesian_pressure"), ::OpenAPI::toJsonValue(m_artesian_pressure));
    }
    if (m_backfill_depth_isSet) {
        obj.insert(QString("backfill_depth"), ::OpenAPI::toJsonValue(m_backfill_depth));
    }
    if (m_backfill_material_isSet) {
        obj.insert(QString("backfill_material"), ::OpenAPI::toJsonValue(m_backfill_material));
    }
    if (m_backfill_type_isSet) {
        obj.insert(QString("backfill_type"), ::OpenAPI::toJsonValue(m_backfill_type));
    }
    if (m_bcgs_id_isSet) {
        obj.insert(QString("bcgs_id"), ::OpenAPI::toJsonValue(m_bcgs_id));
    }
    if (m_bedrock_depth_isSet) {
        obj.insert(QString("bedrock_depth"), ::OpenAPI::toJsonValue(m_bedrock_depth));
    }
    if (m_boundary_effect_isSet) {
        obj.insert(QString("boundary_effect"), ::OpenAPI::toJsonValue(m_boundary_effect));
    }
    if (m_casing_set.size() > 0) {
        obj.insert(QString("casing_set"), ::OpenAPI::toJsonValue(m_casing_set));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_company_of_person_responsible.isSet()) {
        obj.insert(QString("company_of_person_responsible"), ::OpenAPI::toJsonValue(m_company_of_person_responsible));
    }
    if (m_construction_end_date_isSet) {
        obj.insert(QString("construction_end_date"), ::OpenAPI::toJsonValue(m_construction_end_date));
    }
    if (m_construction_start_date_isSet) {
        obj.insert(QString("construction_start_date"), ::OpenAPI::toJsonValue(m_construction_start_date));
    }
    if (m_coordinate_acquisition_code_isSet) {
        obj.insert(QString("coordinate_acquisition_code"), ::OpenAPI::toJsonValue(m_coordinate_acquisition_code));
    }
    if (m_decommission_description_set.size() > 0) {
        obj.insert(QString("decommission_description_set"), ::OpenAPI::toJsonValue(m_decommission_description_set));
    }
    if (m_decommission_details_isSet) {
        obj.insert(QString("decommission_details"), ::OpenAPI::toJsonValue(m_decommission_details));
    }
    if (m_decommission_end_date_isSet) {
        obj.insert(QString("decommission_end_date"), ::OpenAPI::toJsonValue(m_decommission_end_date));
    }
    if (m_decommission_method_isSet) {
        obj.insert(QString("decommission_method"), ::OpenAPI::toJsonValue(m_decommission_method));
    }
    if (m_decommission_reason_isSet) {
        obj.insert(QString("decommission_reason"), ::OpenAPI::toJsonValue(m_decommission_reason));
    }
    if (m_decommission_start_date_isSet) {
        obj.insert(QString("decommission_start_date"), ::OpenAPI::toJsonValue(m_decommission_start_date));
    }
    if (m_development_hours_isSet) {
        obj.insert(QString("development_hours"), ::OpenAPI::toJsonValue(m_development_hours));
    }
    if (m_development_method_isSet) {
        obj.insert(QString("development_method"), ::OpenAPI::toJsonValue(m_development_method));
    }
    if (m_development_notes_isSet) {
        obj.insert(QString("development_notes"), ::OpenAPI::toJsonValue(m_development_notes));
    }
    if (m_diameter_isSet) {
        obj.insert(QString("diameter"), ::OpenAPI::toJsonValue(m_diameter));
    }
    if (m_drawdown_isSet) {
        obj.insert(QString("drawdown"), ::OpenAPI::toJsonValue(m_drawdown));
    }
    if (m_drilling_company_isSet) {
        obj.insert(QString("drilling_company"), ::OpenAPI::toJsonValue(m_drilling_company));
    }
    if (m_drilling_method_isSet) {
        obj.insert(QString("drilling_method"), ::OpenAPI::toJsonValue(m_drilling_method));
    }
    if (m_ems_isSet) {
        obj.insert(QString("ems"), ::OpenAPI::toJsonValue(m_ems));
    }
    if (m_filter_pack_from_isSet) {
        obj.insert(QString("filter_pack_from"), ::OpenAPI::toJsonValue(m_filter_pack_from));
    }
    if (m_filter_pack_material_isSet) {
        obj.insert(QString("filter_pack_material"), ::OpenAPI::toJsonValue(m_filter_pack_material));
    }
    if (m_filter_pack_material_size_isSet) {
        obj.insert(QString("filter_pack_material_size"), ::OpenAPI::toJsonValue(m_filter_pack_material_size));
    }
    if (m_filter_pack_thickness_isSet) {
        obj.insert(QString("filter_pack_thickness"), ::OpenAPI::toJsonValue(m_filter_pack_thickness));
    }
    if (m_filter_pack_to_isSet) {
        obj.insert(QString("filter_pack_to"), ::OpenAPI::toJsonValue(m_filter_pack_to));
    }
    if (m_final_casing_stick_up_isSet) {
        obj.insert(QString("final_casing_stick_up"), ::OpenAPI::toJsonValue(m_final_casing_stick_up));
    }
    if (m_finished_well_depth_isSet) {
        obj.insert(QString("finished_well_depth"), ::OpenAPI::toJsonValue(m_finished_well_depth));
    }
    if (m_ground_elevation_isSet) {
        obj.insert(QString("ground_elevation"), ::OpenAPI::toJsonValue(m_ground_elevation));
    }
    if (m_ground_elevation_method_isSet) {
        obj.insert(QString("ground_elevation_method"), ::OpenAPI::toJsonValue(m_ground_elevation_method));
    }
    if (m_hydraulic_conductivity_isSet) {
        obj.insert(QString("hydraulic_conductivity"), ::OpenAPI::toJsonValue(m_hydraulic_conductivity));
    }
    if (m_hydro_fracturing_performed_isSet) {
        obj.insert(QString("hydro_fracturing_performed"), ::OpenAPI::toJsonValue(m_hydro_fracturing_performed));
    }
    if (m_hydro_fracturing_yield_increase_isSet) {
        obj.insert(QString("hydro_fracturing_yield_increase"), ::OpenAPI::toJsonValue(m_hydro_fracturing_yield_increase));
    }
    if (m_id_plate_attached_by_isSet) {
        obj.insert(QString("id_plate_attached_by"), ::OpenAPI::toJsonValue(m_id_plate_attached_by));
    }
    if (m_identification_plate_number_isSet) {
        obj.insert(QString("identification_plate_number"), ::OpenAPI::toJsonValue(m_identification_plate_number));
    }
    if (m_intended_water_use_isSet) {
        obj.insert(QString("intended_water_use"), ::OpenAPI::toJsonValue(m_intended_water_use));
    }
    if (m_land_district_isSet) {
        obj.insert(QString("land_district"), ::OpenAPI::toJsonValue(m_land_district));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_legal_block_isSet) {
        obj.insert(QString("legal_block"), ::OpenAPI::toJsonValue(m_legal_block));
    }
    if (m_legal_district_lot_isSet) {
        obj.insert(QString("legal_district_lot"), ::OpenAPI::toJsonValue(m_legal_district_lot));
    }
    if (m_legal_lot_isSet) {
        obj.insert(QString("legal_lot"), ::OpenAPI::toJsonValue(m_legal_lot));
    }
    if (m_legal_pid_isSet) {
        obj.insert(QString("legal_pid"), ::OpenAPI::toJsonValue(m_legal_pid));
    }
    if (m_legal_plan_isSet) {
        obj.insert(QString("legal_plan"), ::OpenAPI::toJsonValue(m_legal_plan));
    }
    if (m_legal_range_isSet) {
        obj.insert(QString("legal_range"), ::OpenAPI::toJsonValue(m_legal_range));
    }
    if (m_legal_section_isSet) {
        obj.insert(QString("legal_section"), ::OpenAPI::toJsonValue(m_legal_section));
    }
    if (m_legal_township_isSet) {
        obj.insert(QString("legal_township"), ::OpenAPI::toJsonValue(m_legal_township));
    }
    if (m_licenced_status_isSet) {
        obj.insert(QString("licenced_status"), ::OpenAPI::toJsonValue(m_licenced_status));
    }
    if (m_liner_diameter_isSet) {
        obj.insert(QString("liner_diameter"), ::OpenAPI::toJsonValue(m_liner_diameter));
    }
    if (m_liner_from_isSet) {
        obj.insert(QString("liner_from"), ::OpenAPI::toJsonValue(m_liner_from));
    }
    if (m_liner_material_isSet) {
        obj.insert(QString("liner_material"), ::OpenAPI::toJsonValue(m_liner_material));
    }
    if (m_liner_thickness_isSet) {
        obj.insert(QString("liner_thickness"), ::OpenAPI::toJsonValue(m_liner_thickness));
    }
    if (m_liner_to_isSet) {
        obj.insert(QString("liner_to"), ::OpenAPI::toJsonValue(m_liner_to));
    }
    if (m_linerperforation_set.size() > 0) {
        obj.insert(QString("linerperforation_set"), ::OpenAPI::toJsonValue(m_linerperforation_set));
    }
    if (m_lithologydescription_set.size() > 0) {
        obj.insert(QString("lithologydescription_set"), ::OpenAPI::toJsonValue(m_lithologydescription_set));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_observation_well_number_isSet) {
        obj.insert(QString("observation_well_number"), ::OpenAPI::toJsonValue(m_observation_well_number));
    }
    if (m_observation_well_status_isSet) {
        obj.insert(QString("observation_well_status"), ::OpenAPI::toJsonValue(m_observation_well_status));
    }
    if (m_other_drilling_method_isSet) {
        obj.insert(QString("other_drilling_method"), ::OpenAPI::toJsonValue(m_other_drilling_method));
    }
    if (m_other_screen_bottom_isSet) {
        obj.insert(QString("other_screen_bottom"), ::OpenAPI::toJsonValue(m_other_screen_bottom));
    }
    if (m_other_screen_material_isSet) {
        obj.insert(QString("other_screen_material"), ::OpenAPI::toJsonValue(m_other_screen_material));
    }
    if (m_owner_full_name_isSet) {
        obj.insert(QString("owner_full_name"), ::OpenAPI::toJsonValue(m_owner_full_name));
    }
    if (m_person_responsible.isSet()) {
        obj.insert(QString("person_responsible"), ::OpenAPI::toJsonValue(m_person_responsible));
    }
    if (m_recommended_pump_depth_isSet) {
        obj.insert(QString("recommended_pump_depth"), ::OpenAPI::toJsonValue(m_recommended_pump_depth));
    }
    if (m_recommended_pump_rate_isSet) {
        obj.insert(QString("recommended_pump_rate"), ::OpenAPI::toJsonValue(m_recommended_pump_rate));
    }
    if (m_screen_bottom_isSet) {
        obj.insert(QString("screen_bottom"), ::OpenAPI::toJsonValue(m_screen_bottom));
    }
    if (m_screen_information_isSet) {
        obj.insert(QString("screen_information"), ::OpenAPI::toJsonValue(m_screen_information));
    }
    if (m_screen_intake_method_isSet) {
        obj.insert(QString("screen_intake_method"), ::OpenAPI::toJsonValue(m_screen_intake_method));
    }
    if (m_screen_material_isSet) {
        obj.insert(QString("screen_material"), ::OpenAPI::toJsonValue(m_screen_material));
    }
    if (m_screen_opening_isSet) {
        obj.insert(QString("screen_opening"), ::OpenAPI::toJsonValue(m_screen_opening));
    }
    if (m_screen_set.size() > 0) {
        obj.insert(QString("screen_set"), ::OpenAPI::toJsonValue(m_screen_set));
    }
    if (m_screen_type_isSet) {
        obj.insert(QString("screen_type"), ::OpenAPI::toJsonValue(m_screen_type));
    }
    if (m_sealant_material_isSet) {
        obj.insert(QString("sealant_material"), ::OpenAPI::toJsonValue(m_sealant_material));
    }
    if (m_specific_storage_isSet) {
        obj.insert(QString("specific_storage"), ::OpenAPI::toJsonValue(m_specific_storage));
    }
    if (m_specific_yield_isSet) {
        obj.insert(QString("specific_yield"), ::OpenAPI::toJsonValue(m_specific_yield));
    }
    if (m_static_level_before_test_isSet) {
        obj.insert(QString("static_level_before_test"), ::OpenAPI::toJsonValue(m_static_level_before_test));
    }
    if (m_static_water_level_isSet) {
        obj.insert(QString("static_water_level"), ::OpenAPI::toJsonValue(m_static_water_level));
    }
    if (m_storativity_isSet) {
        obj.insert(QString("storativity"), ::OpenAPI::toJsonValue(m_storativity));
    }
    if (m_street_address_isSet) {
        obj.insert(QString("street_address"), ::OpenAPI::toJsonValue(m_street_address));
    }
    if (m_surface_seal_depth_isSet) {
        obj.insert(QString("surface_seal_depth"), ::OpenAPI::toJsonValue(m_surface_seal_depth));
    }
    if (m_surface_seal_length_isSet) {
        obj.insert(QString("surface_seal_length"), ::OpenAPI::toJsonValue(m_surface_seal_length));
    }
    if (m_surface_seal_material_isSet) {
        obj.insert(QString("surface_seal_material"), ::OpenAPI::toJsonValue(m_surface_seal_material));
    }
    if (m_surface_seal_method_isSet) {
        obj.insert(QString("surface_seal_method"), ::OpenAPI::toJsonValue(m_surface_seal_method));
    }
    if (m_surface_seal_thickness_isSet) {
        obj.insert(QString("surface_seal_thickness"), ::OpenAPI::toJsonValue(m_surface_seal_thickness));
    }
    if (m_testing_duration_isSet) {
        obj.insert(QString("testing_duration"), ::OpenAPI::toJsonValue(m_testing_duration));
    }
    if (m_testing_method_isSet) {
        obj.insert(QString("testing_method"), ::OpenAPI::toJsonValue(m_testing_method));
    }
    if (m_total_depth_drilled_isSet) {
        obj.insert(QString("total_depth_drilled"), ::OpenAPI::toJsonValue(m_total_depth_drilled));
    }
    if (m_transmissivity_isSet) {
        obj.insert(QString("transmissivity"), ::OpenAPI::toJsonValue(m_transmissivity));
    }
    if (m_utm_easting_isSet) {
        obj.insert(QString("utm_easting"), ::OpenAPI::toJsonValue(m_utm_easting));
    }
    if (m_utm_northing_isSet) {
        obj.insert(QString("utm_northing"), ::OpenAPI::toJsonValue(m_utm_northing));
    }
    if (m_utm_zone_code_isSet) {
        obj.insert(QString("utm_zone_code"), ::OpenAPI::toJsonValue(m_utm_zone_code));
    }
    if (m_water_quality_characteristics.size() > 0) {
        obj.insert(QString("water_quality_characteristics"), ::OpenAPI::toJsonValue(m_water_quality_characteristics));
    }
    if (m_water_quality_colour_isSet) {
        obj.insert(QString("water_quality_colour"), ::OpenAPI::toJsonValue(m_water_quality_colour));
    }
    if (m_water_quality_odour_isSet) {
        obj.insert(QString("water_quality_odour"), ::OpenAPI::toJsonValue(m_water_quality_odour));
    }
    if (m_water_supply_system_name_isSet) {
        obj.insert(QString("water_supply_system_name"), ::OpenAPI::toJsonValue(m_water_supply_system_name));
    }
    if (m_water_supply_system_well_name_isSet) {
        obj.insert(QString("water_supply_system_well_name"), ::OpenAPI::toJsonValue(m_water_supply_system_well_name));
    }
    if (m_well_isSet) {
        obj.insert(QString("well"), ::OpenAPI::toJsonValue(m_well));
    }
    if (m_well_cap_type_isSet) {
        obj.insert(QString("well_cap_type"), ::OpenAPI::toJsonValue(m_well_cap_type));
    }
    if (m_well_class_isSet) {
        obj.insert(QString("well_class"), ::OpenAPI::toJsonValue(m_well_class));
    }
    if (m_well_disinfected_isSet) {
        obj.insert(QString("well_disinfected"), ::OpenAPI::toJsonValue(m_well_disinfected));
    }
    if (m_well_guid_isSet) {
        obj.insert(QString("well_guid"), ::OpenAPI::toJsonValue(m_well_guid));
    }
    if (m_well_identification_plate_attached_isSet) {
        obj.insert(QString("well_identification_plate_attached"), ::OpenAPI::toJsonValue(m_well_identification_plate_attached));
    }
    if (m_well_location_description_isSet) {
        obj.insert(QString("well_location_description"), ::OpenAPI::toJsonValue(m_well_location_description));
    }
    if (m_well_orientation_isSet) {
        obj.insert(QString("well_orientation"), ::OpenAPI::toJsonValue(m_well_orientation));
    }
    if (m_well_status_isSet) {
        obj.insert(QString("well_status"), ::OpenAPI::toJsonValue(m_well_status));
    }
    if (m_well_subclass_isSet) {
        obj.insert(QString("well_subclass"), ::OpenAPI::toJsonValue(m_well_subclass));
    }
    if (m_well_tag_number_isSet) {
        obj.insert(QString("well_tag_number"), ::OpenAPI::toJsonValue(m_well_tag_number));
    }
    if (m_well_yield_isSet) {
        obj.insert(QString("well_yield"), ::OpenAPI::toJsonValue(m_well_yield));
    }
    if (m_well_yield_unit_isSet) {
        obj.insert(QString("well_yield_unit"), ::OpenAPI::toJsonValue(m_well_yield_unit));
    }
    if (m_yield_estimation_duration_isSet) {
        obj.insert(QString("yield_estimation_duration"), ::OpenAPI::toJsonValue(m_yield_estimation_duration));
    }
    if (m_yield_estimation_method_isSet) {
        obj.insert(QString("yield_estimation_method"), ::OpenAPI::toJsonValue(m_yield_estimation_method));
    }
    if (m_yield_estimation_rate_isSet) {
        obj.insert(QString("yield_estimation_rate"), ::OpenAPI::toJsonValue(m_yield_estimation_rate));
    }
    return obj;
}

QDate OAIWellDetail::getAlterationEndDate() const {
    return m_alteration_end_date;
}
void OAIWellDetail::setAlterationEndDate(const QDate &alteration_end_date) {
    m_alteration_end_date = alteration_end_date;
    m_alteration_end_date_isSet = true;
}

bool OAIWellDetail::is_alteration_end_date_Set() const{
    return m_alteration_end_date_isSet;
}

bool OAIWellDetail::is_alteration_end_date_Valid() const{
    return m_alteration_end_date_isValid;
}

bool OAIWellDetail::isAlternativeSpecsSubmitted() const {
    return m_alternative_specs_submitted;
}
void OAIWellDetail::setAlternativeSpecsSubmitted(const bool &alternative_specs_submitted) {
    m_alternative_specs_submitted = alternative_specs_submitted;
    m_alternative_specs_submitted_isSet = true;
}

bool OAIWellDetail::is_alternative_specs_submitted_Set() const{
    return m_alternative_specs_submitted_isSet;
}

bool OAIWellDetail::is_alternative_specs_submitted_Valid() const{
    return m_alternative_specs_submitted_isValid;
}

QString OAIWellDetail::getAnalyticSolutionType() const {
    return m_analytic_solution_type;
}
void OAIWellDetail::setAnalyticSolutionType(const QString &analytic_solution_type) {
    m_analytic_solution_type = analytic_solution_type;
    m_analytic_solution_type_isSet = true;
}

bool OAIWellDetail::is_analytic_solution_type_Set() const{
    return m_analytic_solution_type_isSet;
}

bool OAIWellDetail::is_analytic_solution_type_Valid() const{
    return m_analytic_solution_type_isValid;
}

qint32 OAIWellDetail::getAquifer() const {
    return m_aquifer;
}
void OAIWellDetail::setAquifer(const qint32 &aquifer) {
    m_aquifer = aquifer;
    m_aquifer_isSet = true;
}

bool OAIWellDetail::is_aquifer_Set() const{
    return m_aquifer_isSet;
}

bool OAIWellDetail::is_aquifer_Valid() const{
    return m_aquifer_isValid;
}

QString OAIWellDetail::getAquiferVulnerabilityIndex() const {
    return m_aquifer_vulnerability_index;
}
void OAIWellDetail::setAquiferVulnerabilityIndex(const QString &aquifer_vulnerability_index) {
    m_aquifer_vulnerability_index = aquifer_vulnerability_index;
    m_aquifer_vulnerability_index_isSet = true;
}

bool OAIWellDetail::is_aquifer_vulnerability_index_Set() const{
    return m_aquifer_vulnerability_index_isSet;
}

bool OAIWellDetail::is_aquifer_vulnerability_index_Valid() const{
    return m_aquifer_vulnerability_index_isValid;
}

QString OAIWellDetail::getArtesianFlow() const {
    return m_artesian_flow;
}
void OAIWellDetail::setArtesianFlow(const QString &artesian_flow) {
    m_artesian_flow = artesian_flow;
    m_artesian_flow_isSet = true;
}

bool OAIWellDetail::is_artesian_flow_Set() const{
    return m_artesian_flow_isSet;
}

bool OAIWellDetail::is_artesian_flow_Valid() const{
    return m_artesian_flow_isValid;
}

QString OAIWellDetail::getArtesianPressure() const {
    return m_artesian_pressure;
}
void OAIWellDetail::setArtesianPressure(const QString &artesian_pressure) {
    m_artesian_pressure = artesian_pressure;
    m_artesian_pressure_isSet = true;
}

bool OAIWellDetail::is_artesian_pressure_Set() const{
    return m_artesian_pressure_isSet;
}

bool OAIWellDetail::is_artesian_pressure_Valid() const{
    return m_artesian_pressure_isValid;
}

QString OAIWellDetail::getBackfillDepth() const {
    return m_backfill_depth;
}
void OAIWellDetail::setBackfillDepth(const QString &backfill_depth) {
    m_backfill_depth = backfill_depth;
    m_backfill_depth_isSet = true;
}

bool OAIWellDetail::is_backfill_depth_Set() const{
    return m_backfill_depth_isSet;
}

bool OAIWellDetail::is_backfill_depth_Valid() const{
    return m_backfill_depth_isValid;
}

QString OAIWellDetail::getBackfillMaterial() const {
    return m_backfill_material;
}
void OAIWellDetail::setBackfillMaterial(const QString &backfill_material) {
    m_backfill_material = backfill_material;
    m_backfill_material_isSet = true;
}

bool OAIWellDetail::is_backfill_material_Set() const{
    return m_backfill_material_isSet;
}

bool OAIWellDetail::is_backfill_material_Valid() const{
    return m_backfill_material_isValid;
}

QString OAIWellDetail::getBackfillType() const {
    return m_backfill_type;
}
void OAIWellDetail::setBackfillType(const QString &backfill_type) {
    m_backfill_type = backfill_type;
    m_backfill_type_isSet = true;
}

bool OAIWellDetail::is_backfill_type_Set() const{
    return m_backfill_type_isSet;
}

bool OAIWellDetail::is_backfill_type_Valid() const{
    return m_backfill_type_isValid;
}

qint32 OAIWellDetail::getBcgsId() const {
    return m_bcgs_id;
}
void OAIWellDetail::setBcgsId(const qint32 &bcgs_id) {
    m_bcgs_id = bcgs_id;
    m_bcgs_id_isSet = true;
}

bool OAIWellDetail::is_bcgs_id_Set() const{
    return m_bcgs_id_isSet;
}

bool OAIWellDetail::is_bcgs_id_Valid() const{
    return m_bcgs_id_isValid;
}

QString OAIWellDetail::getBedrockDepth() const {
    return m_bedrock_depth;
}
void OAIWellDetail::setBedrockDepth(const QString &bedrock_depth) {
    m_bedrock_depth = bedrock_depth;
    m_bedrock_depth_isSet = true;
}

bool OAIWellDetail::is_bedrock_depth_Set() const{
    return m_bedrock_depth_isSet;
}

bool OAIWellDetail::is_bedrock_depth_Valid() const{
    return m_bedrock_depth_isValid;
}

QString OAIWellDetail::getBoundaryEffect() const {
    return m_boundary_effect;
}
void OAIWellDetail::setBoundaryEffect(const QString &boundary_effect) {
    m_boundary_effect = boundary_effect;
    m_boundary_effect_isSet = true;
}

bool OAIWellDetail::is_boundary_effect_Set() const{
    return m_boundary_effect_isSet;
}

bool OAIWellDetail::is_boundary_effect_Valid() const{
    return m_boundary_effect_isValid;
}

QList<OAICasing> OAIWellDetail::getCasingSet() const {
    return m_casing_set;
}
void OAIWellDetail::setCasingSet(const QList<OAICasing> &casing_set) {
    m_casing_set = casing_set;
    m_casing_set_isSet = true;
}

bool OAIWellDetail::is_casing_set_Set() const{
    return m_casing_set_isSet;
}

bool OAIWellDetail::is_casing_set_Valid() const{
    return m_casing_set_isValid;
}

QString OAIWellDetail::getCity() const {
    return m_city;
}
void OAIWellDetail::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIWellDetail::is_city_Set() const{
    return m_city_isSet;
}

bool OAIWellDetail::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIWellDetail::getComments() const {
    return m_comments;
}
void OAIWellDetail::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIWellDetail::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIWellDetail::is_comments_Valid() const{
    return m_comments_isValid;
}

OAIOrganizationNameList OAIWellDetail::getCompanyOfPersonResponsible() const {
    return m_company_of_person_responsible;
}
void OAIWellDetail::setCompanyOfPersonResponsible(const OAIOrganizationNameList &company_of_person_responsible) {
    m_company_of_person_responsible = company_of_person_responsible;
    m_company_of_person_responsible_isSet = true;
}

bool OAIWellDetail::is_company_of_person_responsible_Set() const{
    return m_company_of_person_responsible_isSet;
}

bool OAIWellDetail::is_company_of_person_responsible_Valid() const{
    return m_company_of_person_responsible_isValid;
}

QDate OAIWellDetail::getConstructionEndDate() const {
    return m_construction_end_date;
}
void OAIWellDetail::setConstructionEndDate(const QDate &construction_end_date) {
    m_construction_end_date = construction_end_date;
    m_construction_end_date_isSet = true;
}

bool OAIWellDetail::is_construction_end_date_Set() const{
    return m_construction_end_date_isSet;
}

bool OAIWellDetail::is_construction_end_date_Valid() const{
    return m_construction_end_date_isValid;
}

QDate OAIWellDetail::getConstructionStartDate() const {
    return m_construction_start_date;
}
void OAIWellDetail::setConstructionStartDate(const QDate &construction_start_date) {
    m_construction_start_date = construction_start_date;
    m_construction_start_date_isSet = true;
}

bool OAIWellDetail::is_construction_start_date_Set() const{
    return m_construction_start_date_isSet;
}

bool OAIWellDetail::is_construction_start_date_Valid() const{
    return m_construction_start_date_isValid;
}

QString OAIWellDetail::getCoordinateAcquisitionCode() const {
    return m_coordinate_acquisition_code;
}
void OAIWellDetail::setCoordinateAcquisitionCode(const QString &coordinate_acquisition_code) {
    m_coordinate_acquisition_code = coordinate_acquisition_code;
    m_coordinate_acquisition_code_isSet = true;
}

bool OAIWellDetail::is_coordinate_acquisition_code_Set() const{
    return m_coordinate_acquisition_code_isSet;
}

bool OAIWellDetail::is_coordinate_acquisition_code_Valid() const{
    return m_coordinate_acquisition_code_isValid;
}

QList<OAIDecommissionDescription> OAIWellDetail::getDecommissionDescriptionSet() const {
    return m_decommission_description_set;
}
void OAIWellDetail::setDecommissionDescriptionSet(const QList<OAIDecommissionDescription> &decommission_description_set) {
    m_decommission_description_set = decommission_description_set;
    m_decommission_description_set_isSet = true;
}

bool OAIWellDetail::is_decommission_description_set_Set() const{
    return m_decommission_description_set_isSet;
}

bool OAIWellDetail::is_decommission_description_set_Valid() const{
    return m_decommission_description_set_isValid;
}

QString OAIWellDetail::getDecommissionDetails() const {
    return m_decommission_details;
}
void OAIWellDetail::setDecommissionDetails(const QString &decommission_details) {
    m_decommission_details = decommission_details;
    m_decommission_details_isSet = true;
}

bool OAIWellDetail::is_decommission_details_Set() const{
    return m_decommission_details_isSet;
}

bool OAIWellDetail::is_decommission_details_Valid() const{
    return m_decommission_details_isValid;
}

QDate OAIWellDetail::getDecommissionEndDate() const {
    return m_decommission_end_date;
}
void OAIWellDetail::setDecommissionEndDate(const QDate &decommission_end_date) {
    m_decommission_end_date = decommission_end_date;
    m_decommission_end_date_isSet = true;
}

bool OAIWellDetail::is_decommission_end_date_Set() const{
    return m_decommission_end_date_isSet;
}

bool OAIWellDetail::is_decommission_end_date_Valid() const{
    return m_decommission_end_date_isValid;
}

QString OAIWellDetail::getDecommissionMethod() const {
    return m_decommission_method;
}
void OAIWellDetail::setDecommissionMethod(const QString &decommission_method) {
    m_decommission_method = decommission_method;
    m_decommission_method_isSet = true;
}

bool OAIWellDetail::is_decommission_method_Set() const{
    return m_decommission_method_isSet;
}

bool OAIWellDetail::is_decommission_method_Valid() const{
    return m_decommission_method_isValid;
}

QString OAIWellDetail::getDecommissionReason() const {
    return m_decommission_reason;
}
void OAIWellDetail::setDecommissionReason(const QString &decommission_reason) {
    m_decommission_reason = decommission_reason;
    m_decommission_reason_isSet = true;
}

bool OAIWellDetail::is_decommission_reason_Set() const{
    return m_decommission_reason_isSet;
}

bool OAIWellDetail::is_decommission_reason_Valid() const{
    return m_decommission_reason_isValid;
}

QDate OAIWellDetail::getDecommissionStartDate() const {
    return m_decommission_start_date;
}
void OAIWellDetail::setDecommissionStartDate(const QDate &decommission_start_date) {
    m_decommission_start_date = decommission_start_date;
    m_decommission_start_date_isSet = true;
}

bool OAIWellDetail::is_decommission_start_date_Set() const{
    return m_decommission_start_date_isSet;
}

bool OAIWellDetail::is_decommission_start_date_Valid() const{
    return m_decommission_start_date_isValid;
}

QString OAIWellDetail::getDevelopmentHours() const {
    return m_development_hours;
}
void OAIWellDetail::setDevelopmentHours(const QString &development_hours) {
    m_development_hours = development_hours;
    m_development_hours_isSet = true;
}

bool OAIWellDetail::is_development_hours_Set() const{
    return m_development_hours_isSet;
}

bool OAIWellDetail::is_development_hours_Valid() const{
    return m_development_hours_isValid;
}

QString OAIWellDetail::getDevelopmentMethod() const {
    return m_development_method;
}
void OAIWellDetail::setDevelopmentMethod(const QString &development_method) {
    m_development_method = development_method;
    m_development_method_isSet = true;
}

bool OAIWellDetail::is_development_method_Set() const{
    return m_development_method_isSet;
}

bool OAIWellDetail::is_development_method_Valid() const{
    return m_development_method_isValid;
}

QString OAIWellDetail::getDevelopmentNotes() const {
    return m_development_notes;
}
void OAIWellDetail::setDevelopmentNotes(const QString &development_notes) {
    m_development_notes = development_notes;
    m_development_notes_isSet = true;
}

bool OAIWellDetail::is_development_notes_Set() const{
    return m_development_notes_isSet;
}

bool OAIWellDetail::is_development_notes_Valid() const{
    return m_development_notes_isValid;
}

QString OAIWellDetail::getDiameter() const {
    return m_diameter;
}
void OAIWellDetail::setDiameter(const QString &diameter) {
    m_diameter = diameter;
    m_diameter_isSet = true;
}

bool OAIWellDetail::is_diameter_Set() const{
    return m_diameter_isSet;
}

bool OAIWellDetail::is_diameter_Valid() const{
    return m_diameter_isValid;
}

QString OAIWellDetail::getDrawdown() const {
    return m_drawdown;
}
void OAIWellDetail::setDrawdown(const QString &drawdown) {
    m_drawdown = drawdown;
    m_drawdown_isSet = true;
}

bool OAIWellDetail::is_drawdown_Set() const{
    return m_drawdown_isSet;
}

bool OAIWellDetail::is_drawdown_Valid() const{
    return m_drawdown_isValid;
}

QString OAIWellDetail::getDrillingCompany() const {
    return m_drilling_company;
}
void OAIWellDetail::setDrillingCompany(const QString &drilling_company) {
    m_drilling_company = drilling_company;
    m_drilling_company_isSet = true;
}

bool OAIWellDetail::is_drilling_company_Set() const{
    return m_drilling_company_isSet;
}

bool OAIWellDetail::is_drilling_company_Valid() const{
    return m_drilling_company_isValid;
}

QString OAIWellDetail::getDrillingMethod() const {
    return m_drilling_method;
}
void OAIWellDetail::setDrillingMethod(const QString &drilling_method) {
    m_drilling_method = drilling_method;
    m_drilling_method_isSet = true;
}

bool OAIWellDetail::is_drilling_method_Set() const{
    return m_drilling_method_isSet;
}

bool OAIWellDetail::is_drilling_method_Valid() const{
    return m_drilling_method_isValid;
}

QString OAIWellDetail::getEms() const {
    return m_ems;
}
void OAIWellDetail::setEms(const QString &ems) {
    m_ems = ems;
    m_ems_isSet = true;
}

bool OAIWellDetail::is_ems_Set() const{
    return m_ems_isSet;
}

bool OAIWellDetail::is_ems_Valid() const{
    return m_ems_isValid;
}

QString OAIWellDetail::getFilterPackFrom() const {
    return m_filter_pack_from;
}
void OAIWellDetail::setFilterPackFrom(const QString &filter_pack_from) {
    m_filter_pack_from = filter_pack_from;
    m_filter_pack_from_isSet = true;
}

bool OAIWellDetail::is_filter_pack_from_Set() const{
    return m_filter_pack_from_isSet;
}

bool OAIWellDetail::is_filter_pack_from_Valid() const{
    return m_filter_pack_from_isValid;
}

QString OAIWellDetail::getFilterPackMaterial() const {
    return m_filter_pack_material;
}
void OAIWellDetail::setFilterPackMaterial(const QString &filter_pack_material) {
    m_filter_pack_material = filter_pack_material;
    m_filter_pack_material_isSet = true;
}

bool OAIWellDetail::is_filter_pack_material_Set() const{
    return m_filter_pack_material_isSet;
}

bool OAIWellDetail::is_filter_pack_material_Valid() const{
    return m_filter_pack_material_isValid;
}

QString OAIWellDetail::getFilterPackMaterialSize() const {
    return m_filter_pack_material_size;
}
void OAIWellDetail::setFilterPackMaterialSize(const QString &filter_pack_material_size) {
    m_filter_pack_material_size = filter_pack_material_size;
    m_filter_pack_material_size_isSet = true;
}

bool OAIWellDetail::is_filter_pack_material_size_Set() const{
    return m_filter_pack_material_size_isSet;
}

bool OAIWellDetail::is_filter_pack_material_size_Valid() const{
    return m_filter_pack_material_size_isValid;
}

QString OAIWellDetail::getFilterPackThickness() const {
    return m_filter_pack_thickness;
}
void OAIWellDetail::setFilterPackThickness(const QString &filter_pack_thickness) {
    m_filter_pack_thickness = filter_pack_thickness;
    m_filter_pack_thickness_isSet = true;
}

bool OAIWellDetail::is_filter_pack_thickness_Set() const{
    return m_filter_pack_thickness_isSet;
}

bool OAIWellDetail::is_filter_pack_thickness_Valid() const{
    return m_filter_pack_thickness_isValid;
}

QString OAIWellDetail::getFilterPackTo() const {
    return m_filter_pack_to;
}
void OAIWellDetail::setFilterPackTo(const QString &filter_pack_to) {
    m_filter_pack_to = filter_pack_to;
    m_filter_pack_to_isSet = true;
}

bool OAIWellDetail::is_filter_pack_to_Set() const{
    return m_filter_pack_to_isSet;
}

bool OAIWellDetail::is_filter_pack_to_Valid() const{
    return m_filter_pack_to_isValid;
}

QString OAIWellDetail::getFinalCasingStickUp() const {
    return m_final_casing_stick_up;
}
void OAIWellDetail::setFinalCasingStickUp(const QString &final_casing_stick_up) {
    m_final_casing_stick_up = final_casing_stick_up;
    m_final_casing_stick_up_isSet = true;
}

bool OAIWellDetail::is_final_casing_stick_up_Set() const{
    return m_final_casing_stick_up_isSet;
}

bool OAIWellDetail::is_final_casing_stick_up_Valid() const{
    return m_final_casing_stick_up_isValid;
}

QString OAIWellDetail::getFinishedWellDepth() const {
    return m_finished_well_depth;
}
void OAIWellDetail::setFinishedWellDepth(const QString &finished_well_depth) {
    m_finished_well_depth = finished_well_depth;
    m_finished_well_depth_isSet = true;
}

bool OAIWellDetail::is_finished_well_depth_Set() const{
    return m_finished_well_depth_isSet;
}

bool OAIWellDetail::is_finished_well_depth_Valid() const{
    return m_finished_well_depth_isValid;
}

QString OAIWellDetail::getGroundElevation() const {
    return m_ground_elevation;
}
void OAIWellDetail::setGroundElevation(const QString &ground_elevation) {
    m_ground_elevation = ground_elevation;
    m_ground_elevation_isSet = true;
}

bool OAIWellDetail::is_ground_elevation_Set() const{
    return m_ground_elevation_isSet;
}

bool OAIWellDetail::is_ground_elevation_Valid() const{
    return m_ground_elevation_isValid;
}

QString OAIWellDetail::getGroundElevationMethod() const {
    return m_ground_elevation_method;
}
void OAIWellDetail::setGroundElevationMethod(const QString &ground_elevation_method) {
    m_ground_elevation_method = ground_elevation_method;
    m_ground_elevation_method_isSet = true;
}

bool OAIWellDetail::is_ground_elevation_method_Set() const{
    return m_ground_elevation_method_isSet;
}

bool OAIWellDetail::is_ground_elevation_method_Valid() const{
    return m_ground_elevation_method_isValid;
}

QString OAIWellDetail::getHydraulicConductivity() const {
    return m_hydraulic_conductivity;
}
void OAIWellDetail::setHydraulicConductivity(const QString &hydraulic_conductivity) {
    m_hydraulic_conductivity = hydraulic_conductivity;
    m_hydraulic_conductivity_isSet = true;
}

bool OAIWellDetail::is_hydraulic_conductivity_Set() const{
    return m_hydraulic_conductivity_isSet;
}

bool OAIWellDetail::is_hydraulic_conductivity_Valid() const{
    return m_hydraulic_conductivity_isValid;
}

bool OAIWellDetail::isHydroFracturingPerformed() const {
    return m_hydro_fracturing_performed;
}
void OAIWellDetail::setHydroFracturingPerformed(const bool &hydro_fracturing_performed) {
    m_hydro_fracturing_performed = hydro_fracturing_performed;
    m_hydro_fracturing_performed_isSet = true;
}

bool OAIWellDetail::is_hydro_fracturing_performed_Set() const{
    return m_hydro_fracturing_performed_isSet;
}

bool OAIWellDetail::is_hydro_fracturing_performed_Valid() const{
    return m_hydro_fracturing_performed_isValid;
}

QString OAIWellDetail::getHydroFracturingYieldIncrease() const {
    return m_hydro_fracturing_yield_increase;
}
void OAIWellDetail::setHydroFracturingYieldIncrease(const QString &hydro_fracturing_yield_increase) {
    m_hydro_fracturing_yield_increase = hydro_fracturing_yield_increase;
    m_hydro_fracturing_yield_increase_isSet = true;
}

bool OAIWellDetail::is_hydro_fracturing_yield_increase_Set() const{
    return m_hydro_fracturing_yield_increase_isSet;
}

bool OAIWellDetail::is_hydro_fracturing_yield_increase_Valid() const{
    return m_hydro_fracturing_yield_increase_isValid;
}

QString OAIWellDetail::getIdPlateAttachedBy() const {
    return m_id_plate_attached_by;
}
void OAIWellDetail::setIdPlateAttachedBy(const QString &id_plate_attached_by) {
    m_id_plate_attached_by = id_plate_attached_by;
    m_id_plate_attached_by_isSet = true;
}

bool OAIWellDetail::is_id_plate_attached_by_Set() const{
    return m_id_plate_attached_by_isSet;
}

bool OAIWellDetail::is_id_plate_attached_by_Valid() const{
    return m_id_plate_attached_by_isValid;
}

qint32 OAIWellDetail::getIdentificationPlateNumber() const {
    return m_identification_plate_number;
}
void OAIWellDetail::setIdentificationPlateNumber(const qint32 &identification_plate_number) {
    m_identification_plate_number = identification_plate_number;
    m_identification_plate_number_isSet = true;
}

bool OAIWellDetail::is_identification_plate_number_Set() const{
    return m_identification_plate_number_isSet;
}

bool OAIWellDetail::is_identification_plate_number_Valid() const{
    return m_identification_plate_number_isValid;
}

QString OAIWellDetail::getIntendedWaterUse() const {
    return m_intended_water_use;
}
void OAIWellDetail::setIntendedWaterUse(const QString &intended_water_use) {
    m_intended_water_use = intended_water_use;
    m_intended_water_use_isSet = true;
}

bool OAIWellDetail::is_intended_water_use_Set() const{
    return m_intended_water_use_isSet;
}

bool OAIWellDetail::is_intended_water_use_Valid() const{
    return m_intended_water_use_isValid;
}

QString OAIWellDetail::getLandDistrict() const {
    return m_land_district;
}
void OAIWellDetail::setLandDistrict(const QString &land_district) {
    m_land_district = land_district;
    m_land_district_isSet = true;
}

bool OAIWellDetail::is_land_district_Set() const{
    return m_land_district_isSet;
}

bool OAIWellDetail::is_land_district_Valid() const{
    return m_land_district_isValid;
}

QString OAIWellDetail::getLatitude() const {
    return m_latitude;
}
void OAIWellDetail::setLatitude(const QString &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIWellDetail::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIWellDetail::is_latitude_Valid() const{
    return m_latitude_isValid;
}

QString OAIWellDetail::getLegalBlock() const {
    return m_legal_block;
}
void OAIWellDetail::setLegalBlock(const QString &legal_block) {
    m_legal_block = legal_block;
    m_legal_block_isSet = true;
}

bool OAIWellDetail::is_legal_block_Set() const{
    return m_legal_block_isSet;
}

bool OAIWellDetail::is_legal_block_Valid() const{
    return m_legal_block_isValid;
}

QString OAIWellDetail::getLegalDistrictLot() const {
    return m_legal_district_lot;
}
void OAIWellDetail::setLegalDistrictLot(const QString &legal_district_lot) {
    m_legal_district_lot = legal_district_lot;
    m_legal_district_lot_isSet = true;
}

bool OAIWellDetail::is_legal_district_lot_Set() const{
    return m_legal_district_lot_isSet;
}

bool OAIWellDetail::is_legal_district_lot_Valid() const{
    return m_legal_district_lot_isValid;
}

QString OAIWellDetail::getLegalLot() const {
    return m_legal_lot;
}
void OAIWellDetail::setLegalLot(const QString &legal_lot) {
    m_legal_lot = legal_lot;
    m_legal_lot_isSet = true;
}

bool OAIWellDetail::is_legal_lot_Set() const{
    return m_legal_lot_isSet;
}

bool OAIWellDetail::is_legal_lot_Valid() const{
    return m_legal_lot_isValid;
}

qint32 OAIWellDetail::getLegalPid() const {
    return m_legal_pid;
}
void OAIWellDetail::setLegalPid(const qint32 &legal_pid) {
    m_legal_pid = legal_pid;
    m_legal_pid_isSet = true;
}

bool OAIWellDetail::is_legal_pid_Set() const{
    return m_legal_pid_isSet;
}

bool OAIWellDetail::is_legal_pid_Valid() const{
    return m_legal_pid_isValid;
}

QString OAIWellDetail::getLegalPlan() const {
    return m_legal_plan;
}
void OAIWellDetail::setLegalPlan(const QString &legal_plan) {
    m_legal_plan = legal_plan;
    m_legal_plan_isSet = true;
}

bool OAIWellDetail::is_legal_plan_Set() const{
    return m_legal_plan_isSet;
}

bool OAIWellDetail::is_legal_plan_Valid() const{
    return m_legal_plan_isValid;
}

QString OAIWellDetail::getLegalRange() const {
    return m_legal_range;
}
void OAIWellDetail::setLegalRange(const QString &legal_range) {
    m_legal_range = legal_range;
    m_legal_range_isSet = true;
}

bool OAIWellDetail::is_legal_range_Set() const{
    return m_legal_range_isSet;
}

bool OAIWellDetail::is_legal_range_Valid() const{
    return m_legal_range_isValid;
}

QString OAIWellDetail::getLegalSection() const {
    return m_legal_section;
}
void OAIWellDetail::setLegalSection(const QString &legal_section) {
    m_legal_section = legal_section;
    m_legal_section_isSet = true;
}

bool OAIWellDetail::is_legal_section_Set() const{
    return m_legal_section_isSet;
}

bool OAIWellDetail::is_legal_section_Valid() const{
    return m_legal_section_isValid;
}

QString OAIWellDetail::getLegalTownship() const {
    return m_legal_township;
}
void OAIWellDetail::setLegalTownship(const QString &legal_township) {
    m_legal_township = legal_township;
    m_legal_township_isSet = true;
}

bool OAIWellDetail::is_legal_township_Set() const{
    return m_legal_township_isSet;
}

bool OAIWellDetail::is_legal_township_Valid() const{
    return m_legal_township_isValid;
}

QString OAIWellDetail::getLicencedStatus() const {
    return m_licenced_status;
}
void OAIWellDetail::setLicencedStatus(const QString &licenced_status) {
    m_licenced_status = licenced_status;
    m_licenced_status_isSet = true;
}

bool OAIWellDetail::is_licenced_status_Set() const{
    return m_licenced_status_isSet;
}

bool OAIWellDetail::is_licenced_status_Valid() const{
    return m_licenced_status_isValid;
}

QString OAIWellDetail::getLinerDiameter() const {
    return m_liner_diameter;
}
void OAIWellDetail::setLinerDiameter(const QString &liner_diameter) {
    m_liner_diameter = liner_diameter;
    m_liner_diameter_isSet = true;
}

bool OAIWellDetail::is_liner_diameter_Set() const{
    return m_liner_diameter_isSet;
}

bool OAIWellDetail::is_liner_diameter_Valid() const{
    return m_liner_diameter_isValid;
}

QString OAIWellDetail::getLinerFrom() const {
    return m_liner_from;
}
void OAIWellDetail::setLinerFrom(const QString &liner_from) {
    m_liner_from = liner_from;
    m_liner_from_isSet = true;
}

bool OAIWellDetail::is_liner_from_Set() const{
    return m_liner_from_isSet;
}

bool OAIWellDetail::is_liner_from_Valid() const{
    return m_liner_from_isValid;
}

QString OAIWellDetail::getLinerMaterial() const {
    return m_liner_material;
}
void OAIWellDetail::setLinerMaterial(const QString &liner_material) {
    m_liner_material = liner_material;
    m_liner_material_isSet = true;
}

bool OAIWellDetail::is_liner_material_Set() const{
    return m_liner_material_isSet;
}

bool OAIWellDetail::is_liner_material_Valid() const{
    return m_liner_material_isValid;
}

QString OAIWellDetail::getLinerThickness() const {
    return m_liner_thickness;
}
void OAIWellDetail::setLinerThickness(const QString &liner_thickness) {
    m_liner_thickness = liner_thickness;
    m_liner_thickness_isSet = true;
}

bool OAIWellDetail::is_liner_thickness_Set() const{
    return m_liner_thickness_isSet;
}

bool OAIWellDetail::is_liner_thickness_Valid() const{
    return m_liner_thickness_isValid;
}

QString OAIWellDetail::getLinerTo() const {
    return m_liner_to;
}
void OAIWellDetail::setLinerTo(const QString &liner_to) {
    m_liner_to = liner_to;
    m_liner_to_isSet = true;
}

bool OAIWellDetail::is_liner_to_Set() const{
    return m_liner_to_isSet;
}

bool OAIWellDetail::is_liner_to_Valid() const{
    return m_liner_to_isValid;
}

QList<OAILinerPerforation> OAIWellDetail::getLinerperforationSet() const {
    return m_linerperforation_set;
}
void OAIWellDetail::setLinerperforationSet(const QList<OAILinerPerforation> &linerperforation_set) {
    m_linerperforation_set = linerperforation_set;
    m_linerperforation_set_isSet = true;
}

bool OAIWellDetail::is_linerperforation_set_Set() const{
    return m_linerperforation_set_isSet;
}

bool OAIWellDetail::is_linerperforation_set_Valid() const{
    return m_linerperforation_set_isValid;
}

QList<OAILithologyDescription> OAIWellDetail::getLithologydescriptionSet() const {
    return m_lithologydescription_set;
}
void OAIWellDetail::setLithologydescriptionSet(const QList<OAILithologyDescription> &lithologydescription_set) {
    m_lithologydescription_set = lithologydescription_set;
    m_lithologydescription_set_isSet = true;
}

bool OAIWellDetail::is_lithologydescription_set_Set() const{
    return m_lithologydescription_set_isSet;
}

bool OAIWellDetail::is_lithologydescription_set_Valid() const{
    return m_lithologydescription_set_isValid;
}

QString OAIWellDetail::getLongitude() const {
    return m_longitude;
}
void OAIWellDetail::setLongitude(const QString &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIWellDetail::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIWellDetail::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIWellDetail::getObservationWellNumber() const {
    return m_observation_well_number;
}
void OAIWellDetail::setObservationWellNumber(const QString &observation_well_number) {
    m_observation_well_number = observation_well_number;
    m_observation_well_number_isSet = true;
}

bool OAIWellDetail::is_observation_well_number_Set() const{
    return m_observation_well_number_isSet;
}

bool OAIWellDetail::is_observation_well_number_Valid() const{
    return m_observation_well_number_isValid;
}

QString OAIWellDetail::getObservationWellStatus() const {
    return m_observation_well_status;
}
void OAIWellDetail::setObservationWellStatus(const QString &observation_well_status) {
    m_observation_well_status = observation_well_status;
    m_observation_well_status_isSet = true;
}

bool OAIWellDetail::is_observation_well_status_Set() const{
    return m_observation_well_status_isSet;
}

bool OAIWellDetail::is_observation_well_status_Valid() const{
    return m_observation_well_status_isValid;
}

QString OAIWellDetail::getOtherDrillingMethod() const {
    return m_other_drilling_method;
}
void OAIWellDetail::setOtherDrillingMethod(const QString &other_drilling_method) {
    m_other_drilling_method = other_drilling_method;
    m_other_drilling_method_isSet = true;
}

bool OAIWellDetail::is_other_drilling_method_Set() const{
    return m_other_drilling_method_isSet;
}

bool OAIWellDetail::is_other_drilling_method_Valid() const{
    return m_other_drilling_method_isValid;
}

QString OAIWellDetail::getOtherScreenBottom() const {
    return m_other_screen_bottom;
}
void OAIWellDetail::setOtherScreenBottom(const QString &other_screen_bottom) {
    m_other_screen_bottom = other_screen_bottom;
    m_other_screen_bottom_isSet = true;
}

bool OAIWellDetail::is_other_screen_bottom_Set() const{
    return m_other_screen_bottom_isSet;
}

bool OAIWellDetail::is_other_screen_bottom_Valid() const{
    return m_other_screen_bottom_isValid;
}

QString OAIWellDetail::getOtherScreenMaterial() const {
    return m_other_screen_material;
}
void OAIWellDetail::setOtherScreenMaterial(const QString &other_screen_material) {
    m_other_screen_material = other_screen_material;
    m_other_screen_material_isSet = true;
}

bool OAIWellDetail::is_other_screen_material_Set() const{
    return m_other_screen_material_isSet;
}

bool OAIWellDetail::is_other_screen_material_Valid() const{
    return m_other_screen_material_isValid;
}

QString OAIWellDetail::getOwnerFullName() const {
    return m_owner_full_name;
}
void OAIWellDetail::setOwnerFullName(const QString &owner_full_name) {
    m_owner_full_name = owner_full_name;
    m_owner_full_name_isSet = true;
}

bool OAIWellDetail::is_owner_full_name_Set() const{
    return m_owner_full_name_isSet;
}

bool OAIWellDetail::is_owner_full_name_Valid() const{
    return m_owner_full_name_isValid;
}

OAIPersonBasic OAIWellDetail::getPersonResponsible() const {
    return m_person_responsible;
}
void OAIWellDetail::setPersonResponsible(const OAIPersonBasic &person_responsible) {
    m_person_responsible = person_responsible;
    m_person_responsible_isSet = true;
}

bool OAIWellDetail::is_person_responsible_Set() const{
    return m_person_responsible_isSet;
}

bool OAIWellDetail::is_person_responsible_Valid() const{
    return m_person_responsible_isValid;
}

QString OAIWellDetail::getRecommendedPumpDepth() const {
    return m_recommended_pump_depth;
}
void OAIWellDetail::setRecommendedPumpDepth(const QString &recommended_pump_depth) {
    m_recommended_pump_depth = recommended_pump_depth;
    m_recommended_pump_depth_isSet = true;
}

bool OAIWellDetail::is_recommended_pump_depth_Set() const{
    return m_recommended_pump_depth_isSet;
}

bool OAIWellDetail::is_recommended_pump_depth_Valid() const{
    return m_recommended_pump_depth_isValid;
}

QString OAIWellDetail::getRecommendedPumpRate() const {
    return m_recommended_pump_rate;
}
void OAIWellDetail::setRecommendedPumpRate(const QString &recommended_pump_rate) {
    m_recommended_pump_rate = recommended_pump_rate;
    m_recommended_pump_rate_isSet = true;
}

bool OAIWellDetail::is_recommended_pump_rate_Set() const{
    return m_recommended_pump_rate_isSet;
}

bool OAIWellDetail::is_recommended_pump_rate_Valid() const{
    return m_recommended_pump_rate_isValid;
}

QString OAIWellDetail::getScreenBottom() const {
    return m_screen_bottom;
}
void OAIWellDetail::setScreenBottom(const QString &screen_bottom) {
    m_screen_bottom = screen_bottom;
    m_screen_bottom_isSet = true;
}

bool OAIWellDetail::is_screen_bottom_Set() const{
    return m_screen_bottom_isSet;
}

bool OAIWellDetail::is_screen_bottom_Valid() const{
    return m_screen_bottom_isValid;
}

QString OAIWellDetail::getScreenInformation() const {
    return m_screen_information;
}
void OAIWellDetail::setScreenInformation(const QString &screen_information) {
    m_screen_information = screen_information;
    m_screen_information_isSet = true;
}

bool OAIWellDetail::is_screen_information_Set() const{
    return m_screen_information_isSet;
}

bool OAIWellDetail::is_screen_information_Valid() const{
    return m_screen_information_isValid;
}

QString OAIWellDetail::getScreenIntakeMethod() const {
    return m_screen_intake_method;
}
void OAIWellDetail::setScreenIntakeMethod(const QString &screen_intake_method) {
    m_screen_intake_method = screen_intake_method;
    m_screen_intake_method_isSet = true;
}

bool OAIWellDetail::is_screen_intake_method_Set() const{
    return m_screen_intake_method_isSet;
}

bool OAIWellDetail::is_screen_intake_method_Valid() const{
    return m_screen_intake_method_isValid;
}

QString OAIWellDetail::getScreenMaterial() const {
    return m_screen_material;
}
void OAIWellDetail::setScreenMaterial(const QString &screen_material) {
    m_screen_material = screen_material;
    m_screen_material_isSet = true;
}

bool OAIWellDetail::is_screen_material_Set() const{
    return m_screen_material_isSet;
}

bool OAIWellDetail::is_screen_material_Valid() const{
    return m_screen_material_isValid;
}

QString OAIWellDetail::getScreenOpening() const {
    return m_screen_opening;
}
void OAIWellDetail::setScreenOpening(const QString &screen_opening) {
    m_screen_opening = screen_opening;
    m_screen_opening_isSet = true;
}

bool OAIWellDetail::is_screen_opening_Set() const{
    return m_screen_opening_isSet;
}

bool OAIWellDetail::is_screen_opening_Valid() const{
    return m_screen_opening_isValid;
}

QList<OAIScreen> OAIWellDetail::getScreenSet() const {
    return m_screen_set;
}
void OAIWellDetail::setScreenSet(const QList<OAIScreen> &screen_set) {
    m_screen_set = screen_set;
    m_screen_set_isSet = true;
}

bool OAIWellDetail::is_screen_set_Set() const{
    return m_screen_set_isSet;
}

bool OAIWellDetail::is_screen_set_Valid() const{
    return m_screen_set_isValid;
}

QString OAIWellDetail::getScreenType() const {
    return m_screen_type;
}
void OAIWellDetail::setScreenType(const QString &screen_type) {
    m_screen_type = screen_type;
    m_screen_type_isSet = true;
}

bool OAIWellDetail::is_screen_type_Set() const{
    return m_screen_type_isSet;
}

bool OAIWellDetail::is_screen_type_Valid() const{
    return m_screen_type_isValid;
}

QString OAIWellDetail::getSealantMaterial() const {
    return m_sealant_material;
}
void OAIWellDetail::setSealantMaterial(const QString &sealant_material) {
    m_sealant_material = sealant_material;
    m_sealant_material_isSet = true;
}

bool OAIWellDetail::is_sealant_material_Set() const{
    return m_sealant_material_isSet;
}

bool OAIWellDetail::is_sealant_material_Valid() const{
    return m_sealant_material_isValid;
}

QString OAIWellDetail::getSpecificStorage() const {
    return m_specific_storage;
}
void OAIWellDetail::setSpecificStorage(const QString &specific_storage) {
    m_specific_storage = specific_storage;
    m_specific_storage_isSet = true;
}

bool OAIWellDetail::is_specific_storage_Set() const{
    return m_specific_storage_isSet;
}

bool OAIWellDetail::is_specific_storage_Valid() const{
    return m_specific_storage_isValid;
}

QString OAIWellDetail::getSpecificYield() const {
    return m_specific_yield;
}
void OAIWellDetail::setSpecificYield(const QString &specific_yield) {
    m_specific_yield = specific_yield;
    m_specific_yield_isSet = true;
}

bool OAIWellDetail::is_specific_yield_Set() const{
    return m_specific_yield_isSet;
}

bool OAIWellDetail::is_specific_yield_Valid() const{
    return m_specific_yield_isValid;
}

QString OAIWellDetail::getStaticLevelBeforeTest() const {
    return m_static_level_before_test;
}
void OAIWellDetail::setStaticLevelBeforeTest(const QString &static_level_before_test) {
    m_static_level_before_test = static_level_before_test;
    m_static_level_before_test_isSet = true;
}

bool OAIWellDetail::is_static_level_before_test_Set() const{
    return m_static_level_before_test_isSet;
}

bool OAIWellDetail::is_static_level_before_test_Valid() const{
    return m_static_level_before_test_isValid;
}

QString OAIWellDetail::getStaticWaterLevel() const {
    return m_static_water_level;
}
void OAIWellDetail::setStaticWaterLevel(const QString &static_water_level) {
    m_static_water_level = static_water_level;
    m_static_water_level_isSet = true;
}

bool OAIWellDetail::is_static_water_level_Set() const{
    return m_static_water_level_isSet;
}

bool OAIWellDetail::is_static_water_level_Valid() const{
    return m_static_water_level_isValid;
}

QString OAIWellDetail::getStorativity() const {
    return m_storativity;
}
void OAIWellDetail::setStorativity(const QString &storativity) {
    m_storativity = storativity;
    m_storativity_isSet = true;
}

bool OAIWellDetail::is_storativity_Set() const{
    return m_storativity_isSet;
}

bool OAIWellDetail::is_storativity_Valid() const{
    return m_storativity_isValid;
}

QString OAIWellDetail::getStreetAddress() const {
    return m_street_address;
}
void OAIWellDetail::setStreetAddress(const QString &street_address) {
    m_street_address = street_address;
    m_street_address_isSet = true;
}

bool OAIWellDetail::is_street_address_Set() const{
    return m_street_address_isSet;
}

bool OAIWellDetail::is_street_address_Valid() const{
    return m_street_address_isValid;
}

QString OAIWellDetail::getSurfaceSealDepth() const {
    return m_surface_seal_depth;
}
void OAIWellDetail::setSurfaceSealDepth(const QString &surface_seal_depth) {
    m_surface_seal_depth = surface_seal_depth;
    m_surface_seal_depth_isSet = true;
}

bool OAIWellDetail::is_surface_seal_depth_Set() const{
    return m_surface_seal_depth_isSet;
}

bool OAIWellDetail::is_surface_seal_depth_Valid() const{
    return m_surface_seal_depth_isValid;
}

QString OAIWellDetail::getSurfaceSealLength() const {
    return m_surface_seal_length;
}
void OAIWellDetail::setSurfaceSealLength(const QString &surface_seal_length) {
    m_surface_seal_length = surface_seal_length;
    m_surface_seal_length_isSet = true;
}

bool OAIWellDetail::is_surface_seal_length_Set() const{
    return m_surface_seal_length_isSet;
}

bool OAIWellDetail::is_surface_seal_length_Valid() const{
    return m_surface_seal_length_isValid;
}

QString OAIWellDetail::getSurfaceSealMaterial() const {
    return m_surface_seal_material;
}
void OAIWellDetail::setSurfaceSealMaterial(const QString &surface_seal_material) {
    m_surface_seal_material = surface_seal_material;
    m_surface_seal_material_isSet = true;
}

bool OAIWellDetail::is_surface_seal_material_Set() const{
    return m_surface_seal_material_isSet;
}

bool OAIWellDetail::is_surface_seal_material_Valid() const{
    return m_surface_seal_material_isValid;
}

QString OAIWellDetail::getSurfaceSealMethod() const {
    return m_surface_seal_method;
}
void OAIWellDetail::setSurfaceSealMethod(const QString &surface_seal_method) {
    m_surface_seal_method = surface_seal_method;
    m_surface_seal_method_isSet = true;
}

bool OAIWellDetail::is_surface_seal_method_Set() const{
    return m_surface_seal_method_isSet;
}

bool OAIWellDetail::is_surface_seal_method_Valid() const{
    return m_surface_seal_method_isValid;
}

QString OAIWellDetail::getSurfaceSealThickness() const {
    return m_surface_seal_thickness;
}
void OAIWellDetail::setSurfaceSealThickness(const QString &surface_seal_thickness) {
    m_surface_seal_thickness = surface_seal_thickness;
    m_surface_seal_thickness_isSet = true;
}

bool OAIWellDetail::is_surface_seal_thickness_Set() const{
    return m_surface_seal_thickness_isSet;
}

bool OAIWellDetail::is_surface_seal_thickness_Valid() const{
    return m_surface_seal_thickness_isValid;
}

qint32 OAIWellDetail::getTestingDuration() const {
    return m_testing_duration;
}
void OAIWellDetail::setTestingDuration(const qint32 &testing_duration) {
    m_testing_duration = testing_duration;
    m_testing_duration_isSet = true;
}

bool OAIWellDetail::is_testing_duration_Set() const{
    return m_testing_duration_isSet;
}

bool OAIWellDetail::is_testing_duration_Valid() const{
    return m_testing_duration_isValid;
}

QString OAIWellDetail::getTestingMethod() const {
    return m_testing_method;
}
void OAIWellDetail::setTestingMethod(const QString &testing_method) {
    m_testing_method = testing_method;
    m_testing_method_isSet = true;
}

bool OAIWellDetail::is_testing_method_Set() const{
    return m_testing_method_isSet;
}

bool OAIWellDetail::is_testing_method_Valid() const{
    return m_testing_method_isValid;
}

QString OAIWellDetail::getTotalDepthDrilled() const {
    return m_total_depth_drilled;
}
void OAIWellDetail::setTotalDepthDrilled(const QString &total_depth_drilled) {
    m_total_depth_drilled = total_depth_drilled;
    m_total_depth_drilled_isSet = true;
}

bool OAIWellDetail::is_total_depth_drilled_Set() const{
    return m_total_depth_drilled_isSet;
}

bool OAIWellDetail::is_total_depth_drilled_Valid() const{
    return m_total_depth_drilled_isValid;
}

QString OAIWellDetail::getTransmissivity() const {
    return m_transmissivity;
}
void OAIWellDetail::setTransmissivity(const QString &transmissivity) {
    m_transmissivity = transmissivity;
    m_transmissivity_isSet = true;
}

bool OAIWellDetail::is_transmissivity_Set() const{
    return m_transmissivity_isSet;
}

bool OAIWellDetail::is_transmissivity_Valid() const{
    return m_transmissivity_isValid;
}

qint32 OAIWellDetail::getUtmEasting() const {
    return m_utm_easting;
}
void OAIWellDetail::setUtmEasting(const qint32 &utm_easting) {
    m_utm_easting = utm_easting;
    m_utm_easting_isSet = true;
}

bool OAIWellDetail::is_utm_easting_Set() const{
    return m_utm_easting_isSet;
}

bool OAIWellDetail::is_utm_easting_Valid() const{
    return m_utm_easting_isValid;
}

qint32 OAIWellDetail::getUtmNorthing() const {
    return m_utm_northing;
}
void OAIWellDetail::setUtmNorthing(const qint32 &utm_northing) {
    m_utm_northing = utm_northing;
    m_utm_northing_isSet = true;
}

bool OAIWellDetail::is_utm_northing_Set() const{
    return m_utm_northing_isSet;
}

bool OAIWellDetail::is_utm_northing_Valid() const{
    return m_utm_northing_isValid;
}

QString OAIWellDetail::getUtmZoneCode() const {
    return m_utm_zone_code;
}
void OAIWellDetail::setUtmZoneCode(const QString &utm_zone_code) {
    m_utm_zone_code = utm_zone_code;
    m_utm_zone_code_isSet = true;
}

bool OAIWellDetail::is_utm_zone_code_Set() const{
    return m_utm_zone_code_isSet;
}

bool OAIWellDetail::is_utm_zone_code_Valid() const{
    return m_utm_zone_code_isValid;
}

QSet<QString> OAIWellDetail::getWaterQualityCharacteristics() const {
    return m_water_quality_characteristics;
}
void OAIWellDetail::setWaterQualityCharacteristics(const QSet<QString> &water_quality_characteristics) {
    m_water_quality_characteristics = water_quality_characteristics;
    m_water_quality_characteristics_isSet = true;
}

bool OAIWellDetail::is_water_quality_characteristics_Set() const{
    return m_water_quality_characteristics_isSet;
}

bool OAIWellDetail::is_water_quality_characteristics_Valid() const{
    return m_water_quality_characteristics_isValid;
}

QString OAIWellDetail::getWaterQualityColour() const {
    return m_water_quality_colour;
}
void OAIWellDetail::setWaterQualityColour(const QString &water_quality_colour) {
    m_water_quality_colour = water_quality_colour;
    m_water_quality_colour_isSet = true;
}

bool OAIWellDetail::is_water_quality_colour_Set() const{
    return m_water_quality_colour_isSet;
}

bool OAIWellDetail::is_water_quality_colour_Valid() const{
    return m_water_quality_colour_isValid;
}

QString OAIWellDetail::getWaterQualityOdour() const {
    return m_water_quality_odour;
}
void OAIWellDetail::setWaterQualityOdour(const QString &water_quality_odour) {
    m_water_quality_odour = water_quality_odour;
    m_water_quality_odour_isSet = true;
}

bool OAIWellDetail::is_water_quality_odour_Set() const{
    return m_water_quality_odour_isSet;
}

bool OAIWellDetail::is_water_quality_odour_Valid() const{
    return m_water_quality_odour_isValid;
}

QString OAIWellDetail::getWaterSupplySystemName() const {
    return m_water_supply_system_name;
}
void OAIWellDetail::setWaterSupplySystemName(const QString &water_supply_system_name) {
    m_water_supply_system_name = water_supply_system_name;
    m_water_supply_system_name_isSet = true;
}

bool OAIWellDetail::is_water_supply_system_name_Set() const{
    return m_water_supply_system_name_isSet;
}

bool OAIWellDetail::is_water_supply_system_name_Valid() const{
    return m_water_supply_system_name_isValid;
}

QString OAIWellDetail::getWaterSupplySystemWellName() const {
    return m_water_supply_system_well_name;
}
void OAIWellDetail::setWaterSupplySystemWellName(const QString &water_supply_system_well_name) {
    m_water_supply_system_well_name = water_supply_system_well_name;
    m_water_supply_system_well_name_isSet = true;
}

bool OAIWellDetail::is_water_supply_system_well_name_Set() const{
    return m_water_supply_system_well_name_isSet;
}

bool OAIWellDetail::is_water_supply_system_well_name_Valid() const{
    return m_water_supply_system_well_name_isValid;
}

qint32 OAIWellDetail::getWell() const {
    return m_well;
}
void OAIWellDetail::setWell(const qint32 &well) {
    m_well = well;
    m_well_isSet = true;
}

bool OAIWellDetail::is_well_Set() const{
    return m_well_isSet;
}

bool OAIWellDetail::is_well_Valid() const{
    return m_well_isValid;
}

QString OAIWellDetail::getWellCapType() const {
    return m_well_cap_type;
}
void OAIWellDetail::setWellCapType(const QString &well_cap_type) {
    m_well_cap_type = well_cap_type;
    m_well_cap_type_isSet = true;
}

bool OAIWellDetail::is_well_cap_type_Set() const{
    return m_well_cap_type_isSet;
}

bool OAIWellDetail::is_well_cap_type_Valid() const{
    return m_well_cap_type_isValid;
}

QString OAIWellDetail::getWellClass() const {
    return m_well_class;
}
void OAIWellDetail::setWellClass(const QString &well_class) {
    m_well_class = well_class;
    m_well_class_isSet = true;
}

bool OAIWellDetail::is_well_class_Set() const{
    return m_well_class_isSet;
}

bool OAIWellDetail::is_well_class_Valid() const{
    return m_well_class_isValid;
}

bool OAIWellDetail::isWellDisinfected() const {
    return m_well_disinfected;
}
void OAIWellDetail::setWellDisinfected(const bool &well_disinfected) {
    m_well_disinfected = well_disinfected;
    m_well_disinfected_isSet = true;
}

bool OAIWellDetail::is_well_disinfected_Set() const{
    return m_well_disinfected_isSet;
}

bool OAIWellDetail::is_well_disinfected_Valid() const{
    return m_well_disinfected_isValid;
}

QString OAIWellDetail::getWellGuid() const {
    return m_well_guid;
}
void OAIWellDetail::setWellGuid(const QString &well_guid) {
    m_well_guid = well_guid;
    m_well_guid_isSet = true;
}

bool OAIWellDetail::is_well_guid_Set() const{
    return m_well_guid_isSet;
}

bool OAIWellDetail::is_well_guid_Valid() const{
    return m_well_guid_isValid;
}

QString OAIWellDetail::getWellIdentificationPlateAttached() const {
    return m_well_identification_plate_attached;
}
void OAIWellDetail::setWellIdentificationPlateAttached(const QString &well_identification_plate_attached) {
    m_well_identification_plate_attached = well_identification_plate_attached;
    m_well_identification_plate_attached_isSet = true;
}

bool OAIWellDetail::is_well_identification_plate_attached_Set() const{
    return m_well_identification_plate_attached_isSet;
}

bool OAIWellDetail::is_well_identification_plate_attached_Valid() const{
    return m_well_identification_plate_attached_isValid;
}

QString OAIWellDetail::getWellLocationDescription() const {
    return m_well_location_description;
}
void OAIWellDetail::setWellLocationDescription(const QString &well_location_description) {
    m_well_location_description = well_location_description;
    m_well_location_description_isSet = true;
}

bool OAIWellDetail::is_well_location_description_Set() const{
    return m_well_location_description_isSet;
}

bool OAIWellDetail::is_well_location_description_Valid() const{
    return m_well_location_description_isValid;
}

bool OAIWellDetail::isWellOrientation() const {
    return m_well_orientation;
}
void OAIWellDetail::setWellOrientation(const bool &well_orientation) {
    m_well_orientation = well_orientation;
    m_well_orientation_isSet = true;
}

bool OAIWellDetail::is_well_orientation_Set() const{
    return m_well_orientation_isSet;
}

bool OAIWellDetail::is_well_orientation_Valid() const{
    return m_well_orientation_isValid;
}

QString OAIWellDetail::getWellStatus() const {
    return m_well_status;
}
void OAIWellDetail::setWellStatus(const QString &well_status) {
    m_well_status = well_status;
    m_well_status_isSet = true;
}

bool OAIWellDetail::is_well_status_Set() const{
    return m_well_status_isSet;
}

bool OAIWellDetail::is_well_status_Valid() const{
    return m_well_status_isValid;
}

QString OAIWellDetail::getWellSubclass() const {
    return m_well_subclass;
}
void OAIWellDetail::setWellSubclass(const QString &well_subclass) {
    m_well_subclass = well_subclass;
    m_well_subclass_isSet = true;
}

bool OAIWellDetail::is_well_subclass_Set() const{
    return m_well_subclass_isSet;
}

bool OAIWellDetail::is_well_subclass_Valid() const{
    return m_well_subclass_isValid;
}

qint32 OAIWellDetail::getWellTagNumber() const {
    return m_well_tag_number;
}
void OAIWellDetail::setWellTagNumber(const qint32 &well_tag_number) {
    m_well_tag_number = well_tag_number;
    m_well_tag_number_isSet = true;
}

bool OAIWellDetail::is_well_tag_number_Set() const{
    return m_well_tag_number_isSet;
}

bool OAIWellDetail::is_well_tag_number_Valid() const{
    return m_well_tag_number_isValid;
}

QString OAIWellDetail::getWellYield() const {
    return m_well_yield;
}
void OAIWellDetail::setWellYield(const QString &well_yield) {
    m_well_yield = well_yield;
    m_well_yield_isSet = true;
}

bool OAIWellDetail::is_well_yield_Set() const{
    return m_well_yield_isSet;
}

bool OAIWellDetail::is_well_yield_Valid() const{
    return m_well_yield_isValid;
}

QString OAIWellDetail::getWellYieldUnit() const {
    return m_well_yield_unit;
}
void OAIWellDetail::setWellYieldUnit(const QString &well_yield_unit) {
    m_well_yield_unit = well_yield_unit;
    m_well_yield_unit_isSet = true;
}

bool OAIWellDetail::is_well_yield_unit_Set() const{
    return m_well_yield_unit_isSet;
}

bool OAIWellDetail::is_well_yield_unit_Valid() const{
    return m_well_yield_unit_isValid;
}

QString OAIWellDetail::getYieldEstimationDuration() const {
    return m_yield_estimation_duration;
}
void OAIWellDetail::setYieldEstimationDuration(const QString &yield_estimation_duration) {
    m_yield_estimation_duration = yield_estimation_duration;
    m_yield_estimation_duration_isSet = true;
}

bool OAIWellDetail::is_yield_estimation_duration_Set() const{
    return m_yield_estimation_duration_isSet;
}

bool OAIWellDetail::is_yield_estimation_duration_Valid() const{
    return m_yield_estimation_duration_isValid;
}

QString OAIWellDetail::getYieldEstimationMethod() const {
    return m_yield_estimation_method;
}
void OAIWellDetail::setYieldEstimationMethod(const QString &yield_estimation_method) {
    m_yield_estimation_method = yield_estimation_method;
    m_yield_estimation_method_isSet = true;
}

bool OAIWellDetail::is_yield_estimation_method_Set() const{
    return m_yield_estimation_method_isSet;
}

bool OAIWellDetail::is_yield_estimation_method_Valid() const{
    return m_yield_estimation_method_isValid;
}

QString OAIWellDetail::getYieldEstimationRate() const {
    return m_yield_estimation_rate;
}
void OAIWellDetail::setYieldEstimationRate(const QString &yield_estimation_rate) {
    m_yield_estimation_rate = yield_estimation_rate;
    m_yield_estimation_rate_isSet = true;
}

bool OAIWellDetail::is_yield_estimation_rate_Set() const{
    return m_yield_estimation_rate_isSet;
}

bool OAIWellDetail::is_yield_estimation_rate_Valid() const{
    return m_yield_estimation_rate_isValid;
}

bool OAIWellDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alteration_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternative_specs_submitted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analytic_solution_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aquifer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aquifer_vulnerability_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artesian_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artesian_pressure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backfill_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backfill_material_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backfill_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bcgs_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bedrock_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boundary_effect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_casing_set.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_of_person_responsible.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_construction_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_construction_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinate_acquisition_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decommission_description_set.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_decommission_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decommission_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decommission_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decommission_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decommission_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_development_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_development_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_development_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diameter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drawdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drilling_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drilling_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ems_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_pack_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_pack_material_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_pack_material_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_pack_thickness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_pack_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_casing_stick_up_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_well_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ground_elevation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ground_elevation_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hydraulic_conductivity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hydro_fracturing_performed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hydro_fracturing_yield_increase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_plate_attached_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identification_plate_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intended_water_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_land_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_district_lot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_lot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_section_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_township_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_licenced_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liner_diameter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liner_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liner_material_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liner_thickness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liner_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linerperforation_set.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lithologydescription_set.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observation_well_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observation_well_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_drilling_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_screen_bottom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_screen_material_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_responsible.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_pump_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_pump_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_bottom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_intake_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_material_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_opening_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_set.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sealant_material_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_specific_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_specific_yield_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_level_before_test_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_water_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storativity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surface_seal_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surface_seal_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surface_seal_material_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surface_seal_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surface_seal_thickness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_testing_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_testing_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_depth_drilled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmissivity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utm_easting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utm_northing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utm_zone_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_quality_characteristics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_quality_colour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_quality_odour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_supply_system_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_supply_system_well_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_well_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_well_cap_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_well_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_well_disinfected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_well_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_well_identification_plate_attached_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_well_location_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_well_orientation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_well_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_well_subclass_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_well_tag_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_well_yield_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_well_yield_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yield_estimation_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yield_estimation_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yield_estimation_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWellDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_casing_set_isValid && m_company_of_person_responsible_isValid && m_decommission_description_set_isValid && m_linerperforation_set_isValid && m_lithologydescription_set_isValid && m_owner_full_name_isValid && m_person_responsible_isValid && m_screen_set_isValid && m_well_isValid && true;
}

} // namespace OpenAPI
