/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILithologyDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILithologyDescription::OAILithologyDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILithologyDescription::OAILithologyDescription() {
    this->initializeModel();
}

OAILithologyDescription::~OAILithologyDescription() {}

void OAILithologyDescription::initializeModel() {

    m_lithology_colour_isSet = false;
    m_lithology_colour_isValid = false;

    m_lithology_from_isSet = false;
    m_lithology_from_isValid = false;

    m_lithology_hardness_isSet = false;
    m_lithology_hardness_isValid = false;

    m_lithology_moisture_isSet = false;
    m_lithology_moisture_isValid = false;

    m_lithology_raw_data_isSet = false;
    m_lithology_raw_data_isValid = false;

    m_lithology_to_isSet = false;
    m_lithology_to_isValid = false;

    m_water_bearing_estimated_flow_isSet = false;
    m_water_bearing_estimated_flow_isValid = false;
}

void OAILithologyDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILithologyDescription::fromJsonObject(QJsonObject json) {

    m_lithology_colour_isValid = ::OpenAPI::fromJsonValue(m_lithology_colour, json[QString("lithology_colour")]);
    m_lithology_colour_isSet = !json[QString("lithology_colour")].isNull() && m_lithology_colour_isValid;

    m_lithology_from_isValid = ::OpenAPI::fromJsonValue(m_lithology_from, json[QString("lithology_from")]);
    m_lithology_from_isSet = !json[QString("lithology_from")].isNull() && m_lithology_from_isValid;

    m_lithology_hardness_isValid = ::OpenAPI::fromJsonValue(m_lithology_hardness, json[QString("lithology_hardness")]);
    m_lithology_hardness_isSet = !json[QString("lithology_hardness")].isNull() && m_lithology_hardness_isValid;

    m_lithology_moisture_isValid = ::OpenAPI::fromJsonValue(m_lithology_moisture, json[QString("lithology_moisture")]);
    m_lithology_moisture_isSet = !json[QString("lithology_moisture")].isNull() && m_lithology_moisture_isValid;

    m_lithology_raw_data_isValid = ::OpenAPI::fromJsonValue(m_lithology_raw_data, json[QString("lithology_raw_data")]);
    m_lithology_raw_data_isSet = !json[QString("lithology_raw_data")].isNull() && m_lithology_raw_data_isValid;

    m_lithology_to_isValid = ::OpenAPI::fromJsonValue(m_lithology_to, json[QString("lithology_to")]);
    m_lithology_to_isSet = !json[QString("lithology_to")].isNull() && m_lithology_to_isValid;

    m_water_bearing_estimated_flow_isValid = ::OpenAPI::fromJsonValue(m_water_bearing_estimated_flow, json[QString("water_bearing_estimated_flow")]);
    m_water_bearing_estimated_flow_isSet = !json[QString("water_bearing_estimated_flow")].isNull() && m_water_bearing_estimated_flow_isValid;
}

QString OAILithologyDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILithologyDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_lithology_colour_isSet) {
        obj.insert(QString("lithology_colour"), ::OpenAPI::toJsonValue(m_lithology_colour));
    }
    if (m_lithology_from_isSet) {
        obj.insert(QString("lithology_from"), ::OpenAPI::toJsonValue(m_lithology_from));
    }
    if (m_lithology_hardness_isSet) {
        obj.insert(QString("lithology_hardness"), ::OpenAPI::toJsonValue(m_lithology_hardness));
    }
    if (m_lithology_moisture_isSet) {
        obj.insert(QString("lithology_moisture"), ::OpenAPI::toJsonValue(m_lithology_moisture));
    }
    if (m_lithology_raw_data_isSet) {
        obj.insert(QString("lithology_raw_data"), ::OpenAPI::toJsonValue(m_lithology_raw_data));
    }
    if (m_lithology_to_isSet) {
        obj.insert(QString("lithology_to"), ::OpenAPI::toJsonValue(m_lithology_to));
    }
    if (m_water_bearing_estimated_flow_isSet) {
        obj.insert(QString("water_bearing_estimated_flow"), ::OpenAPI::toJsonValue(m_water_bearing_estimated_flow));
    }
    return obj;
}

QString OAILithologyDescription::getLithologyColour() const {
    return m_lithology_colour;
}
void OAILithologyDescription::setLithologyColour(const QString &lithology_colour) {
    m_lithology_colour = lithology_colour;
    m_lithology_colour_isSet = true;
}

bool OAILithologyDescription::is_lithology_colour_Set() const{
    return m_lithology_colour_isSet;
}

bool OAILithologyDescription::is_lithology_colour_Valid() const{
    return m_lithology_colour_isValid;
}

QString OAILithologyDescription::getLithologyFrom() const {
    return m_lithology_from;
}
void OAILithologyDescription::setLithologyFrom(const QString &lithology_from) {
    m_lithology_from = lithology_from;
    m_lithology_from_isSet = true;
}

bool OAILithologyDescription::is_lithology_from_Set() const{
    return m_lithology_from_isSet;
}

bool OAILithologyDescription::is_lithology_from_Valid() const{
    return m_lithology_from_isValid;
}

QString OAILithologyDescription::getLithologyHardness() const {
    return m_lithology_hardness;
}
void OAILithologyDescription::setLithologyHardness(const QString &lithology_hardness) {
    m_lithology_hardness = lithology_hardness;
    m_lithology_hardness_isSet = true;
}

bool OAILithologyDescription::is_lithology_hardness_Set() const{
    return m_lithology_hardness_isSet;
}

bool OAILithologyDescription::is_lithology_hardness_Valid() const{
    return m_lithology_hardness_isValid;
}

QString OAILithologyDescription::getLithologyMoisture() const {
    return m_lithology_moisture;
}
void OAILithologyDescription::setLithologyMoisture(const QString &lithology_moisture) {
    m_lithology_moisture = lithology_moisture;
    m_lithology_moisture_isSet = true;
}

bool OAILithologyDescription::is_lithology_moisture_Set() const{
    return m_lithology_moisture_isSet;
}

bool OAILithologyDescription::is_lithology_moisture_Valid() const{
    return m_lithology_moisture_isValid;
}

QString OAILithologyDescription::getLithologyRawData() const {
    return m_lithology_raw_data;
}
void OAILithologyDescription::setLithologyRawData(const QString &lithology_raw_data) {
    m_lithology_raw_data = lithology_raw_data;
    m_lithology_raw_data_isSet = true;
}

bool OAILithologyDescription::is_lithology_raw_data_Set() const{
    return m_lithology_raw_data_isSet;
}

bool OAILithologyDescription::is_lithology_raw_data_Valid() const{
    return m_lithology_raw_data_isValid;
}

QString OAILithologyDescription::getLithologyTo() const {
    return m_lithology_to;
}
void OAILithologyDescription::setLithologyTo(const QString &lithology_to) {
    m_lithology_to = lithology_to;
    m_lithology_to_isSet = true;
}

bool OAILithologyDescription::is_lithology_to_Set() const{
    return m_lithology_to_isSet;
}

bool OAILithologyDescription::is_lithology_to_Valid() const{
    return m_lithology_to_isValid;
}

QString OAILithologyDescription::getWaterBearingEstimatedFlow() const {
    return m_water_bearing_estimated_flow;
}
void OAILithologyDescription::setWaterBearingEstimatedFlow(const QString &water_bearing_estimated_flow) {
    m_water_bearing_estimated_flow = water_bearing_estimated_flow;
    m_water_bearing_estimated_flow_isSet = true;
}

bool OAILithologyDescription::is_water_bearing_estimated_flow_Set() const{
    return m_water_bearing_estimated_flow_isSet;
}

bool OAILithologyDescription::is_water_bearing_estimated_flow_Valid() const{
    return m_water_bearing_estimated_flow_isValid;
}

bool OAILithologyDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lithology_colour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lithology_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lithology_hardness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lithology_moisture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lithology_raw_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lithology_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_bearing_estimated_flow_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILithologyDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
