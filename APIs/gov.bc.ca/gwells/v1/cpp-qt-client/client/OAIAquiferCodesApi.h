/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAquiferCodesApi_H
#define OAI_OAIAquiferCodesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAquifer_codes_demand_list_200_response.h"
#include "OAIAquifer_codes_materials_list_200_response.h"
#include "OAIAquifer_codes_productivity_list_200_response.h"
#include "OAIAquifer_codes_quality_concerns_list_200_response.h"
#include "OAIAquifer_codes_subtypes_list_200_response.h"
#include "OAIAquifer_codes_vulnerability_list_200_response.h"
#include "OAIAquifer_codes_water_use_list_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAquiferCodesApi : public QObject {
    Q_OBJECT

public:
    OAIAquiferCodesApi(const int timeOut = 0);
    ~OAIAquiferCodesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void aquiferCodesDemandList(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void aquiferCodesMaterialsList(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void aquiferCodesProductivityList(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void aquiferCodesQualityConcernsList(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void aquiferCodesSubtypesList(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void aquiferCodesVulnerabilityList(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void aquiferCodesWaterUseList(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void aquiferCodesDemandListCallback(OAIHttpRequestWorker *worker);
    void aquiferCodesMaterialsListCallback(OAIHttpRequestWorker *worker);
    void aquiferCodesProductivityListCallback(OAIHttpRequestWorker *worker);
    void aquiferCodesQualityConcernsListCallback(OAIHttpRequestWorker *worker);
    void aquiferCodesSubtypesListCallback(OAIHttpRequestWorker *worker);
    void aquiferCodesVulnerabilityListCallback(OAIHttpRequestWorker *worker);
    void aquiferCodesWaterUseListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void aquiferCodesDemandListSignal(OAIAquifer_codes_demand_list_200_response summary);
    void aquiferCodesMaterialsListSignal(OAIAquifer_codes_materials_list_200_response summary);
    void aquiferCodesProductivityListSignal(OAIAquifer_codes_productivity_list_200_response summary);
    void aquiferCodesQualityConcernsListSignal(OAIAquifer_codes_quality_concerns_list_200_response summary);
    void aquiferCodesSubtypesListSignal(OAIAquifer_codes_subtypes_list_200_response summary);
    void aquiferCodesVulnerabilityListSignal(OAIAquifer_codes_vulnerability_list_200_response summary);
    void aquiferCodesWaterUseListSignal(OAIAquifer_codes_water_use_list_200_response summary);


    void aquiferCodesDemandListSignalFull(OAIHttpRequestWorker *worker, OAIAquifer_codes_demand_list_200_response summary);
    void aquiferCodesMaterialsListSignalFull(OAIHttpRequestWorker *worker, OAIAquifer_codes_materials_list_200_response summary);
    void aquiferCodesProductivityListSignalFull(OAIHttpRequestWorker *worker, OAIAquifer_codes_productivity_list_200_response summary);
    void aquiferCodesQualityConcernsListSignalFull(OAIHttpRequestWorker *worker, OAIAquifer_codes_quality_concerns_list_200_response summary);
    void aquiferCodesSubtypesListSignalFull(OAIHttpRequestWorker *worker, OAIAquifer_codes_subtypes_list_200_response summary);
    void aquiferCodesVulnerabilityListSignalFull(OAIHttpRequestWorker *worker, OAIAquifer_codes_vulnerability_list_200_response summary);
    void aquiferCodesWaterUseListSignalFull(OAIHttpRequestWorker *worker, OAIAquifer_codes_water_use_list_200_response summary);

    Q_DECL_DEPRECATED_X("Use aquiferCodesDemandListSignalError() instead")
    void aquiferCodesDemandListSignalE(OAIAquifer_codes_demand_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aquiferCodesDemandListSignalError(OAIAquifer_codes_demand_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aquiferCodesMaterialsListSignalError() instead")
    void aquiferCodesMaterialsListSignalE(OAIAquifer_codes_materials_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aquiferCodesMaterialsListSignalError(OAIAquifer_codes_materials_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aquiferCodesProductivityListSignalError() instead")
    void aquiferCodesProductivityListSignalE(OAIAquifer_codes_productivity_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aquiferCodesProductivityListSignalError(OAIAquifer_codes_productivity_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aquiferCodesQualityConcernsListSignalError() instead")
    void aquiferCodesQualityConcernsListSignalE(OAIAquifer_codes_quality_concerns_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aquiferCodesQualityConcernsListSignalError(OAIAquifer_codes_quality_concerns_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aquiferCodesSubtypesListSignalError() instead")
    void aquiferCodesSubtypesListSignalE(OAIAquifer_codes_subtypes_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aquiferCodesSubtypesListSignalError(OAIAquifer_codes_subtypes_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aquiferCodesVulnerabilityListSignalError() instead")
    void aquiferCodesVulnerabilityListSignalE(OAIAquifer_codes_vulnerability_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aquiferCodesVulnerabilityListSignalError(OAIAquifer_codes_vulnerability_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aquiferCodesWaterUseListSignalError() instead")
    void aquiferCodesWaterUseListSignalE(OAIAquifer_codes_water_use_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aquiferCodesWaterUseListSignalError(OAIAquifer_codes_water_use_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use aquiferCodesDemandListSignalErrorFull() instead")
    void aquiferCodesDemandListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aquiferCodesDemandListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aquiferCodesMaterialsListSignalErrorFull() instead")
    void aquiferCodesMaterialsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aquiferCodesMaterialsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aquiferCodesProductivityListSignalErrorFull() instead")
    void aquiferCodesProductivityListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aquiferCodesProductivityListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aquiferCodesQualityConcernsListSignalErrorFull() instead")
    void aquiferCodesQualityConcernsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aquiferCodesQualityConcernsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aquiferCodesSubtypesListSignalErrorFull() instead")
    void aquiferCodesSubtypesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aquiferCodesSubtypesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aquiferCodesVulnerabilityListSignalErrorFull() instead")
    void aquiferCodesVulnerabilityListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aquiferCodesVulnerabilityListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aquiferCodesWaterUseListSignalErrorFull() instead")
    void aquiferCodesWaterUseListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aquiferCodesWaterUseListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
