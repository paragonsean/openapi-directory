/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganizationList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganizationList::OAIOrganizationList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganizationList::OAIOrganizationList() {
    this->initializeModel();
}

OAIOrganizationList::~OAIOrganizationList() {}

void OAIOrganizationList::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_fax_tel_isSet = false;
    m_fax_tel_isValid = false;

    m_main_tel_isSet = false;
    m_main_tel_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_org_guid_isSet = false;
    m_org_guid_isValid = false;

    m_org_verbose_name_isSet = false;
    m_org_verbose_name_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_province_state_isSet = false;
    m_province_state_isValid = false;

    m_street_address_isSet = false;
    m_street_address_isValid = false;

    m_website_url_isSet = false;
    m_website_url_isValid = false;
}

void OAIOrganizationList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganizationList::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_fax_tel_isValid = ::OpenAPI::fromJsonValue(m_fax_tel, json[QString("fax_tel")]);
    m_fax_tel_isSet = !json[QString("fax_tel")].isNull() && m_fax_tel_isValid;

    m_main_tel_isValid = ::OpenAPI::fromJsonValue(m_main_tel, json[QString("main_tel")]);
    m_main_tel_isSet = !json[QString("main_tel")].isNull() && m_main_tel_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_org_guid_isValid = ::OpenAPI::fromJsonValue(m_org_guid, json[QString("org_guid")]);
    m_org_guid_isSet = !json[QString("org_guid")].isNull() && m_org_guid_isValid;

    m_org_verbose_name_isValid = ::OpenAPI::fromJsonValue(m_org_verbose_name, json[QString("org_verbose_name")]);
    m_org_verbose_name_isSet = !json[QString("org_verbose_name")].isNull() && m_org_verbose_name_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postal_code")]);
    m_postal_code_isSet = !json[QString("postal_code")].isNull() && m_postal_code_isValid;

    m_province_state_isValid = ::OpenAPI::fromJsonValue(m_province_state, json[QString("province_state")]);
    m_province_state_isSet = !json[QString("province_state")].isNull() && m_province_state_isValid;

    m_street_address_isValid = ::OpenAPI::fromJsonValue(m_street_address, json[QString("street_address")]);
    m_street_address_isSet = !json[QString("street_address")].isNull() && m_street_address_isValid;

    m_website_url_isValid = ::OpenAPI::fromJsonValue(m_website_url, json[QString("website_url")]);
    m_website_url_isSet = !json[QString("website_url")].isNull() && m_website_url_isValid;
}

QString OAIOrganizationList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganizationList::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_fax_tel_isSet) {
        obj.insert(QString("fax_tel"), ::OpenAPI::toJsonValue(m_fax_tel));
    }
    if (m_main_tel_isSet) {
        obj.insert(QString("main_tel"), ::OpenAPI::toJsonValue(m_main_tel));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_org_guid_isSet) {
        obj.insert(QString("org_guid"), ::OpenAPI::toJsonValue(m_org_guid));
    }
    if (m_org_verbose_name_isSet) {
        obj.insert(QString("org_verbose_name"), ::OpenAPI::toJsonValue(m_org_verbose_name));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postal_code"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_province_state_isSet) {
        obj.insert(QString("province_state"), ::OpenAPI::toJsonValue(m_province_state));
    }
    if (m_street_address_isSet) {
        obj.insert(QString("street_address"), ::OpenAPI::toJsonValue(m_street_address));
    }
    if (m_website_url_isSet) {
        obj.insert(QString("website_url"), ::OpenAPI::toJsonValue(m_website_url));
    }
    return obj;
}

QString OAIOrganizationList::getCity() const {
    return m_city;
}
void OAIOrganizationList::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIOrganizationList::is_city_Set() const{
    return m_city_isSet;
}

bool OAIOrganizationList::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIOrganizationList::getEmail() const {
    return m_email;
}
void OAIOrganizationList::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIOrganizationList::is_email_Set() const{
    return m_email_isSet;
}

bool OAIOrganizationList::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIOrganizationList::getFaxTel() const {
    return m_fax_tel;
}
void OAIOrganizationList::setFaxTel(const QString &fax_tel) {
    m_fax_tel = fax_tel;
    m_fax_tel_isSet = true;
}

bool OAIOrganizationList::is_fax_tel_Set() const{
    return m_fax_tel_isSet;
}

bool OAIOrganizationList::is_fax_tel_Valid() const{
    return m_fax_tel_isValid;
}

QString OAIOrganizationList::getMainTel() const {
    return m_main_tel;
}
void OAIOrganizationList::setMainTel(const QString &main_tel) {
    m_main_tel = main_tel;
    m_main_tel_isSet = true;
}

bool OAIOrganizationList::is_main_tel_Set() const{
    return m_main_tel_isSet;
}

bool OAIOrganizationList::is_main_tel_Valid() const{
    return m_main_tel_isValid;
}

QString OAIOrganizationList::getName() const {
    return m_name;
}
void OAIOrganizationList::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrganizationList::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrganizationList::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOrganizationList::getOrgGuid() const {
    return m_org_guid;
}
void OAIOrganizationList::setOrgGuid(const QString &org_guid) {
    m_org_guid = org_guid;
    m_org_guid_isSet = true;
}

bool OAIOrganizationList::is_org_guid_Set() const{
    return m_org_guid_isSet;
}

bool OAIOrganizationList::is_org_guid_Valid() const{
    return m_org_guid_isValid;
}

QString OAIOrganizationList::getOrgVerboseName() const {
    return m_org_verbose_name;
}
void OAIOrganizationList::setOrgVerboseName(const QString &org_verbose_name) {
    m_org_verbose_name = org_verbose_name;
    m_org_verbose_name_isSet = true;
}

bool OAIOrganizationList::is_org_verbose_name_Set() const{
    return m_org_verbose_name_isSet;
}

bool OAIOrganizationList::is_org_verbose_name_Valid() const{
    return m_org_verbose_name_isValid;
}

QString OAIOrganizationList::getPostalCode() const {
    return m_postal_code;
}
void OAIOrganizationList::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIOrganizationList::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIOrganizationList::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIOrganizationList::getProvinceState() const {
    return m_province_state;
}
void OAIOrganizationList::setProvinceState(const QString &province_state) {
    m_province_state = province_state;
    m_province_state_isSet = true;
}

bool OAIOrganizationList::is_province_state_Set() const{
    return m_province_state_isSet;
}

bool OAIOrganizationList::is_province_state_Valid() const{
    return m_province_state_isValid;
}

QString OAIOrganizationList::getStreetAddress() const {
    return m_street_address;
}
void OAIOrganizationList::setStreetAddress(const QString &street_address) {
    m_street_address = street_address;
    m_street_address_isSet = true;
}

bool OAIOrganizationList::is_street_address_Set() const{
    return m_street_address_isSet;
}

bool OAIOrganizationList::is_street_address_Valid() const{
    return m_street_address_isValid;
}

QString OAIOrganizationList::getWebsiteUrl() const {
    return m_website_url;
}
void OAIOrganizationList::setWebsiteUrl(const QString &website_url) {
    m_website_url = website_url;
    m_website_url_isSet = true;
}

bool OAIOrganizationList::is_website_url_Set() const{
    return m_website_url_isSet;
}

bool OAIOrganizationList::is_website_url_Valid() const{
    return m_website_url_isValid;
}

bool OAIOrganizationList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax_tel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_tel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_verbose_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_province_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganizationList::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_province_state_isValid && true;
}

} // namespace OpenAPI
