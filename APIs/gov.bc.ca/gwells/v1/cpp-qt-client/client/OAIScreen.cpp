/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScreen.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScreen::OAIScreen(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScreen::OAIScreen() {
    this->initializeModel();
}

OAIScreen::~OAIScreen() {}

void OAIScreen::initializeModel() {

    m_assembly_type_isSet = false;
    m_assembly_type_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_internal_diameter_isSet = false;
    m_internal_diameter_isValid = false;

    m_slot_size_isSet = false;
    m_slot_size_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAIScreen::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScreen::fromJsonObject(QJsonObject json) {

    m_assembly_type_isValid = ::OpenAPI::fromJsonValue(m_assembly_type, json[QString("assembly_type")]);
    m_assembly_type_isSet = !json[QString("assembly_type")].isNull() && m_assembly_type_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_internal_diameter_isValid = ::OpenAPI::fromJsonValue(m_internal_diameter, json[QString("internal_diameter")]);
    m_internal_diameter_isSet = !json[QString("internal_diameter")].isNull() && m_internal_diameter_isValid;

    m_slot_size_isValid = ::OpenAPI::fromJsonValue(m_slot_size, json[QString("slot_size")]);
    m_slot_size_isSet = !json[QString("slot_size")].isNull() && m_slot_size_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;
}

QString OAIScreen::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScreen::asJsonObject() const {
    QJsonObject obj;
    if (m_assembly_type_isSet) {
        obj.insert(QString("assembly_type"), ::OpenAPI::toJsonValue(m_assembly_type));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_internal_diameter_isSet) {
        obj.insert(QString("internal_diameter"), ::OpenAPI::toJsonValue(m_internal_diameter));
    }
    if (m_slot_size_isSet) {
        obj.insert(QString("slot_size"), ::OpenAPI::toJsonValue(m_slot_size));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

QString OAIScreen::getAssemblyType() const {
    return m_assembly_type;
}
void OAIScreen::setAssemblyType(const QString &assembly_type) {
    m_assembly_type = assembly_type;
    m_assembly_type_isSet = true;
}

bool OAIScreen::is_assembly_type_Set() const{
    return m_assembly_type_isSet;
}

bool OAIScreen::is_assembly_type_Valid() const{
    return m_assembly_type_isValid;
}

QString OAIScreen::getEnd() const {
    return m_end;
}
void OAIScreen::setEnd(const QString &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIScreen::is_end_Set() const{
    return m_end_isSet;
}

bool OAIScreen::is_end_Valid() const{
    return m_end_isValid;
}

QString OAIScreen::getInternalDiameter() const {
    return m_internal_diameter;
}
void OAIScreen::setInternalDiameter(const QString &internal_diameter) {
    m_internal_diameter = internal_diameter;
    m_internal_diameter_isSet = true;
}

bool OAIScreen::is_internal_diameter_Set() const{
    return m_internal_diameter_isSet;
}

bool OAIScreen::is_internal_diameter_Valid() const{
    return m_internal_diameter_isValid;
}

QString OAIScreen::getSlotSize() const {
    return m_slot_size;
}
void OAIScreen::setSlotSize(const QString &slot_size) {
    m_slot_size = slot_size;
    m_slot_size_isSet = true;
}

bool OAIScreen::is_slot_size_Set() const{
    return m_slot_size_isSet;
}

bool OAIScreen::is_slot_size_Valid() const{
    return m_slot_size_isValid;
}

QString OAIScreen::getStart() const {
    return m_start;
}
void OAIScreen::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIScreen::is_start_Set() const{
    return m_start_isSet;
}

bool OAIScreen::is_start_Valid() const{
    return m_start_isValid;
}

bool OAIScreen::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assembly_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_diameter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScreen::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assembly_type_isValid && m_end_isValid && m_start_isValid && true;
}

} // namespace OpenAPI
