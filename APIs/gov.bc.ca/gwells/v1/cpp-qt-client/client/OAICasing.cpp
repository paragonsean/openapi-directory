/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICasing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICasing::OAICasing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICasing::OAICasing() {
    this->initializeModel();
}

OAICasing::~OAICasing() {}

void OAICasing::initializeModel() {

    m_casing_code_isSet = false;
    m_casing_code_isValid = false;

    m_casing_material_isSet = false;
    m_casing_material_isValid = false;

    m_diameter_isSet = false;
    m_diameter_isValid = false;

    m_drive_shoe_isSet = false;
    m_drive_shoe_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_wall_thickness_isSet = false;
    m_wall_thickness_isValid = false;
}

void OAICasing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICasing::fromJsonObject(QJsonObject json) {

    m_casing_code_isValid = ::OpenAPI::fromJsonValue(m_casing_code, json[QString("casing_code")]);
    m_casing_code_isSet = !json[QString("casing_code")].isNull() && m_casing_code_isValid;

    m_casing_material_isValid = ::OpenAPI::fromJsonValue(m_casing_material, json[QString("casing_material")]);
    m_casing_material_isSet = !json[QString("casing_material")].isNull() && m_casing_material_isValid;

    m_diameter_isValid = ::OpenAPI::fromJsonValue(m_diameter, json[QString("diameter")]);
    m_diameter_isSet = !json[QString("diameter")].isNull() && m_diameter_isValid;

    m_drive_shoe_isValid = ::OpenAPI::fromJsonValue(m_drive_shoe, json[QString("drive_shoe")]);
    m_drive_shoe_isSet = !json[QString("drive_shoe")].isNull() && m_drive_shoe_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_wall_thickness_isValid = ::OpenAPI::fromJsonValue(m_wall_thickness, json[QString("wall_thickness")]);
    m_wall_thickness_isSet = !json[QString("wall_thickness")].isNull() && m_wall_thickness_isValid;
}

QString OAICasing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICasing::asJsonObject() const {
    QJsonObject obj;
    if (m_casing_code_isSet) {
        obj.insert(QString("casing_code"), ::OpenAPI::toJsonValue(m_casing_code));
    }
    if (m_casing_material_isSet) {
        obj.insert(QString("casing_material"), ::OpenAPI::toJsonValue(m_casing_material));
    }
    if (m_diameter_isSet) {
        obj.insert(QString("diameter"), ::OpenAPI::toJsonValue(m_diameter));
    }
    if (m_drive_shoe_isSet) {
        obj.insert(QString("drive_shoe"), ::OpenAPI::toJsonValue(m_drive_shoe));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_wall_thickness_isSet) {
        obj.insert(QString("wall_thickness"), ::OpenAPI::toJsonValue(m_wall_thickness));
    }
    return obj;
}

QString OAICasing::getCasingCode() const {
    return m_casing_code;
}
void OAICasing::setCasingCode(const QString &casing_code) {
    m_casing_code = casing_code;
    m_casing_code_isSet = true;
}

bool OAICasing::is_casing_code_Set() const{
    return m_casing_code_isSet;
}

bool OAICasing::is_casing_code_Valid() const{
    return m_casing_code_isValid;
}

QString OAICasing::getCasingMaterial() const {
    return m_casing_material;
}
void OAICasing::setCasingMaterial(const QString &casing_material) {
    m_casing_material = casing_material;
    m_casing_material_isSet = true;
}

bool OAICasing::is_casing_material_Set() const{
    return m_casing_material_isSet;
}

bool OAICasing::is_casing_material_Valid() const{
    return m_casing_material_isValid;
}

QString OAICasing::getDiameter() const {
    return m_diameter;
}
void OAICasing::setDiameter(const QString &diameter) {
    m_diameter = diameter;
    m_diameter_isSet = true;
}

bool OAICasing::is_diameter_Set() const{
    return m_diameter_isSet;
}

bool OAICasing::is_diameter_Valid() const{
    return m_diameter_isValid;
}

bool OAICasing::isDriveShoe() const {
    return m_drive_shoe;
}
void OAICasing::setDriveShoe(const bool &drive_shoe) {
    m_drive_shoe = drive_shoe;
    m_drive_shoe_isSet = true;
}

bool OAICasing::is_drive_shoe_Set() const{
    return m_drive_shoe_isSet;
}

bool OAICasing::is_drive_shoe_Valid() const{
    return m_drive_shoe_isValid;
}

QString OAICasing::getEnd() const {
    return m_end;
}
void OAICasing::setEnd(const QString &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAICasing::is_end_Set() const{
    return m_end_isSet;
}

bool OAICasing::is_end_Valid() const{
    return m_end_isValid;
}

QString OAICasing::getStart() const {
    return m_start;
}
void OAICasing::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAICasing::is_start_Set() const{
    return m_start_isSet;
}

bool OAICasing::is_start_Valid() const{
    return m_start_isValid;
}

QString OAICasing::getWallThickness() const {
    return m_wall_thickness;
}
void OAICasing::setWallThickness(const QString &wall_thickness) {
    m_wall_thickness = wall_thickness;
    m_wall_thickness_isSet = true;
}

bool OAICasing::is_wall_thickness_Set() const{
    return m_wall_thickness_isSet;
}

bool OAICasing::is_wall_thickness_Valid() const{
    return m_wall_thickness_isValid;
}

bool OAICasing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_casing_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_casing_material_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diameter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_shoe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wall_thickness_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICasing::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_diameter_isValid && m_end_isValid && m_start_isValid && true;
}

} // namespace OpenAPI
