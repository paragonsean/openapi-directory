/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAquiferSerializerBasic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAquiferSerializerBasic::OAIAquiferSerializerBasic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAquiferSerializerBasic::OAIAquiferSerializerBasic() {
    this->initializeModel();
}

OAIAquiferSerializerBasic::~OAIAquiferSerializerBasic() {}

void OAIAquiferSerializerBasic::initializeModel() {

    m_aquifer_id_isSet = false;
    m_aquifer_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIAquiferSerializerBasic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAquiferSerializerBasic::fromJsonObject(QJsonObject json) {

    m_aquifer_id_isValid = ::OpenAPI::fromJsonValue(m_aquifer_id, json[QString("aquifer_id")]);
    m_aquifer_id_isSet = !json[QString("aquifer_id")].isNull() && m_aquifer_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;
}

QString OAIAquiferSerializerBasic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAquiferSerializerBasic::asJsonObject() const {
    QJsonObject obj;
    if (m_aquifer_id_isSet) {
        obj.insert(QString("aquifer_id"), ::OpenAPI::toJsonValue(m_aquifer_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

qint32 OAIAquiferSerializerBasic::getAquiferId() const {
    return m_aquifer_id;
}
void OAIAquiferSerializerBasic::setAquiferId(const qint32 &aquifer_id) {
    m_aquifer_id = aquifer_id;
    m_aquifer_id_isSet = true;
}

bool OAIAquiferSerializerBasic::is_aquifer_id_Set() const{
    return m_aquifer_id_isSet;
}

bool OAIAquiferSerializerBasic::is_aquifer_id_Valid() const{
    return m_aquifer_id_isValid;
}

QString OAIAquiferSerializerBasic::getDescription() const {
    return m_description;
}
void OAIAquiferSerializerBasic::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAquiferSerializerBasic::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAquiferSerializerBasic::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIAquiferSerializerBasic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aquifer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAquiferSerializerBasic::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
