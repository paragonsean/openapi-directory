/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationList::OAIApplicationList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationList::OAIApplicationList() {
    this->initializeModel();
}

OAIApplicationList::~OAIApplicationList() {}

void OAIApplicationList::initializeModel() {

    m_cert_authority_isSet = false;
    m_cert_authority_isValid = false;

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_current_status_isSet = false;
    m_current_status_isValid = false;

    m_display_status_isSet = false;
    m_display_status_isValid = false;

    m_qualifications_isSet = false;
    m_qualifications_isValid = false;

    m_removal_date_isSet = false;
    m_removal_date_isValid = false;

    m_subactivity_isSet = false;
    m_subactivity_isValid = false;
}

void OAIApplicationList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationList::fromJsonObject(QJsonObject json) {

    m_cert_authority_isValid = ::OpenAPI::fromJsonValue(m_cert_authority, json[QString("cert_authority")]);
    m_cert_authority_isSet = !json[QString("cert_authority")].isNull() && m_cert_authority_isValid;

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("certificate")]);
    m_certificate_isSet = !json[QString("certificate")].isNull() && m_certificate_isValid;

    m_current_status_isValid = ::OpenAPI::fromJsonValue(m_current_status, json[QString("current_status")]);
    m_current_status_isSet = !json[QString("current_status")].isNull() && m_current_status_isValid;

    m_display_status_isValid = ::OpenAPI::fromJsonValue(m_display_status, json[QString("display_status")]);
    m_display_status_isSet = !json[QString("display_status")].isNull() && m_display_status_isValid;

    m_qualifications_isValid = ::OpenAPI::fromJsonValue(m_qualifications, json[QString("qualifications")]);
    m_qualifications_isSet = !json[QString("qualifications")].isNull() && m_qualifications_isValid;

    m_removal_date_isValid = ::OpenAPI::fromJsonValue(m_removal_date, json[QString("removal_date")]);
    m_removal_date_isSet = !json[QString("removal_date")].isNull() && m_removal_date_isValid;

    m_subactivity_isValid = ::OpenAPI::fromJsonValue(m_subactivity, json[QString("subactivity")]);
    m_subactivity_isSet = !json[QString("subactivity")].isNull() && m_subactivity_isValid;
}

QString OAIApplicationList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationList::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_authority_isSet) {
        obj.insert(QString("cert_authority"), ::OpenAPI::toJsonValue(m_cert_authority));
    }
    if (m_certificate_isSet) {
        obj.insert(QString("certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_current_status.isSet()) {
        obj.insert(QString("current_status"), ::OpenAPI::toJsonValue(m_current_status));
    }
    if (m_display_status_isSet) {
        obj.insert(QString("display_status"), ::OpenAPI::toJsonValue(m_display_status));
    }
    if (m_qualifications.size() > 0) {
        obj.insert(QString("qualifications"), ::OpenAPI::toJsonValue(m_qualifications));
    }
    if (m_removal_date_isSet) {
        obj.insert(QString("removal_date"), ::OpenAPI::toJsonValue(m_removal_date));
    }
    if (m_subactivity.isSet()) {
        obj.insert(QString("subactivity"), ::OpenAPI::toJsonValue(m_subactivity));
    }
    return obj;
}

QString OAIApplicationList::getCertAuthority() const {
    return m_cert_authority;
}
void OAIApplicationList::setCertAuthority(const QString &cert_authority) {
    m_cert_authority = cert_authority;
    m_cert_authority_isSet = true;
}

bool OAIApplicationList::is_cert_authority_Set() const{
    return m_cert_authority_isSet;
}

bool OAIApplicationList::is_cert_authority_Valid() const{
    return m_cert_authority_isValid;
}

QString OAIApplicationList::getCertificate() const {
    return m_certificate;
}
void OAIApplicationList::setCertificate(const QString &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAIApplicationList::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAIApplicationList::is_certificate_Valid() const{
    return m_certificate_isValid;
}

OAIApplicationStatusCode OAIApplicationList::getCurrentStatus() const {
    return m_current_status;
}
void OAIApplicationList::setCurrentStatus(const OAIApplicationStatusCode &current_status) {
    m_current_status = current_status;
    m_current_status_isSet = true;
}

bool OAIApplicationList::is_current_status_Set() const{
    return m_current_status_isSet;
}

bool OAIApplicationList::is_current_status_Valid() const{
    return m_current_status_isValid;
}

QString OAIApplicationList::getDisplayStatus() const {
    return m_display_status;
}
void OAIApplicationList::setDisplayStatus(const QString &display_status) {
    m_display_status = display_status;
    m_display_status_isSet = true;
}

bool OAIApplicationList::is_display_status_Set() const{
    return m_display_status_isSet;
}

bool OAIApplicationList::is_display_status_Valid() const{
    return m_display_status_isValid;
}

QList<OAIQualification> OAIApplicationList::getQualifications() const {
    return m_qualifications;
}
void OAIApplicationList::setQualifications(const QList<OAIQualification> &qualifications) {
    m_qualifications = qualifications;
    m_qualifications_isSet = true;
}

bool OAIApplicationList::is_qualifications_Set() const{
    return m_qualifications_isSet;
}

bool OAIApplicationList::is_qualifications_Valid() const{
    return m_qualifications_isValid;
}

QDate OAIApplicationList::getRemovalDate() const {
    return m_removal_date;
}
void OAIApplicationList::setRemovalDate(const QDate &removal_date) {
    m_removal_date = removal_date;
    m_removal_date_isSet = true;
}

bool OAIApplicationList::is_removal_date_Set() const{
    return m_removal_date_isSet;
}

bool OAIApplicationList::is_removal_date_Valid() const{
    return m_removal_date_isValid;
}

OAISubactivity OAIApplicationList::getSubactivity() const {
    return m_subactivity;
}
void OAIApplicationList::setSubactivity(const OAISubactivity &subactivity) {
    m_subactivity = subactivity;
    m_subactivity_isSet = true;
}

bool OAIApplicationList::is_subactivity_Set() const{
    return m_subactivity_isSet;
}

bool OAIApplicationList::is_subactivity_Valid() const{
    return m_subactivity_isValid;
}

bool OAIApplicationList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_removal_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subactivity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationList::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_subactivity_isValid && true;
}

} // namespace OpenAPI
