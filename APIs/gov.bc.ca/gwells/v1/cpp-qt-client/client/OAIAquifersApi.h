/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAquifersApi_H
#define OAI_OAIAquifersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAquifer.h"
#include "OAIAquiferSerializerBasic.h"
#include "OAIAquifers_files_list_200_response.h"
#include "OAIAquifers_list_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAquifersApi : public QObject {
    Q_OBJECT

public:
    OAIAquifersApi(const int timeOut = 0);
    ~OAIAquifersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  aquifer_id QString [required]
    */
    virtual void aquifersFilesList(const QString &aquifer_id);

    /**
    * @param[in]  aquifer_id double [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void aquifersList(const ::OpenAPI::OptionalParam<double> &aquifer_id = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  search QString [optional]
    */
    virtual void aquifersNamesList(const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aquifer_id qint32 [required]
    */
    virtual void aquifersRead(const qint32 &aquifer_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void aquifersFilesListCallback(OAIHttpRequestWorker *worker);
    void aquifersListCallback(OAIHttpRequestWorker *worker);
    void aquifersNamesListCallback(OAIHttpRequestWorker *worker);
    void aquifersReadCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void aquifersFilesListSignal(OAIAquifers_files_list_200_response summary);
    void aquifersListSignal(OAIAquifers_list_200_response summary);
    void aquifersNamesListSignal(QList<OAIAquiferSerializerBasic> summary);
    void aquifersReadSignal(OAIAquifer summary);


    void aquifersFilesListSignalFull(OAIHttpRequestWorker *worker, OAIAquifers_files_list_200_response summary);
    void aquifersListSignalFull(OAIHttpRequestWorker *worker, OAIAquifers_list_200_response summary);
    void aquifersNamesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIAquiferSerializerBasic> summary);
    void aquifersReadSignalFull(OAIHttpRequestWorker *worker, OAIAquifer summary);

    Q_DECL_DEPRECATED_X("Use aquifersFilesListSignalError() instead")
    void aquifersFilesListSignalE(OAIAquifers_files_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aquifersFilesListSignalError(OAIAquifers_files_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aquifersListSignalError() instead")
    void aquifersListSignalE(OAIAquifers_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aquifersListSignalError(OAIAquifers_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aquifersNamesListSignalError() instead")
    void aquifersNamesListSignalE(QList<OAIAquiferSerializerBasic> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aquifersNamesListSignalError(QList<OAIAquiferSerializerBasic> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aquifersReadSignalError() instead")
    void aquifersReadSignalE(OAIAquifer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aquifersReadSignalError(OAIAquifer summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use aquifersFilesListSignalErrorFull() instead")
    void aquifersFilesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aquifersFilesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aquifersListSignalErrorFull() instead")
    void aquifersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aquifersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aquifersNamesListSignalErrorFull() instead")
    void aquifersNamesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aquifersNamesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aquifersReadSignalErrorFull() instead")
    void aquifersReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aquifersReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
