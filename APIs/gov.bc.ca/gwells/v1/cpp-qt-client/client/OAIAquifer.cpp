/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAquifer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAquifer::OAIAquifer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAquifer::OAIAquifer() {
    this->initializeModel();
}

OAIAquifer::~OAIAquifer() {}

void OAIAquifer::initializeModel() {

    m_aquifer_id_isSet = false;
    m_aquifer_id_isValid = false;

    m_aquifer_name_isSet = false;
    m_aquifer_name_isValid = false;

    m_area_isSet = false;
    m_area_isValid = false;

    m_demand_isSet = false;
    m_demand_isValid = false;

    m_demand_description_isSet = false;
    m_demand_description_isValid = false;

    m_known_water_use_isSet = false;
    m_known_water_use_isValid = false;

    m_known_water_use_description_isSet = false;
    m_known_water_use_description_isValid = false;

    m_litho_stratographic_unit_isSet = false;
    m_litho_stratographic_unit_isValid = false;

    m_location_description_isSet = false;
    m_location_description_isValid = false;

    m_mapping_year_isSet = false;
    m_mapping_year_isValid = false;

    m_material_isSet = false;
    m_material_isValid = false;

    m_material_description_isSet = false;
    m_material_description_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_productivity_isSet = false;
    m_productivity_isValid = false;

    m_productivity_description_isSet = false;
    m_productivity_description_isValid = false;

    m_quality_concern_isSet = false;
    m_quality_concern_isValid = false;

    m_quality_concern_description_isSet = false;
    m_quality_concern_description_isValid = false;

    m_subtype_isSet = false;
    m_subtype_isValid = false;

    m_subtype_description_isSet = false;
    m_subtype_description_isValid = false;

    m_vulnerability_isSet = false;
    m_vulnerability_isValid = false;

    m_vulnerability_description_isSet = false;
    m_vulnerability_description_isValid = false;
}

void OAIAquifer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAquifer::fromJsonObject(QJsonObject json) {

    m_aquifer_id_isValid = ::OpenAPI::fromJsonValue(m_aquifer_id, json[QString("aquifer_id")]);
    m_aquifer_id_isSet = !json[QString("aquifer_id")].isNull() && m_aquifer_id_isValid;

    m_aquifer_name_isValid = ::OpenAPI::fromJsonValue(m_aquifer_name, json[QString("aquifer_name")]);
    m_aquifer_name_isSet = !json[QString("aquifer_name")].isNull() && m_aquifer_name_isValid;

    m_area_isValid = ::OpenAPI::fromJsonValue(m_area, json[QString("area")]);
    m_area_isSet = !json[QString("area")].isNull() && m_area_isValid;

    m_demand_isValid = ::OpenAPI::fromJsonValue(m_demand, json[QString("demand")]);
    m_demand_isSet = !json[QString("demand")].isNull() && m_demand_isValid;

    m_demand_description_isValid = ::OpenAPI::fromJsonValue(m_demand_description, json[QString("demand_description")]);
    m_demand_description_isSet = !json[QString("demand_description")].isNull() && m_demand_description_isValid;

    m_known_water_use_isValid = ::OpenAPI::fromJsonValue(m_known_water_use, json[QString("known_water_use")]);
    m_known_water_use_isSet = !json[QString("known_water_use")].isNull() && m_known_water_use_isValid;

    m_known_water_use_description_isValid = ::OpenAPI::fromJsonValue(m_known_water_use_description, json[QString("known_water_use_description")]);
    m_known_water_use_description_isSet = !json[QString("known_water_use_description")].isNull() && m_known_water_use_description_isValid;

    m_litho_stratographic_unit_isValid = ::OpenAPI::fromJsonValue(m_litho_stratographic_unit, json[QString("litho_stratographic_unit")]);
    m_litho_stratographic_unit_isSet = !json[QString("litho_stratographic_unit")].isNull() && m_litho_stratographic_unit_isValid;

    m_location_description_isValid = ::OpenAPI::fromJsonValue(m_location_description, json[QString("location_description")]);
    m_location_description_isSet = !json[QString("location_description")].isNull() && m_location_description_isValid;

    m_mapping_year_isValid = ::OpenAPI::fromJsonValue(m_mapping_year, json[QString("mapping_year")]);
    m_mapping_year_isSet = !json[QString("mapping_year")].isNull() && m_mapping_year_isValid;

    m_material_isValid = ::OpenAPI::fromJsonValue(m_material, json[QString("material")]);
    m_material_isSet = !json[QString("material")].isNull() && m_material_isValid;

    m_material_description_isValid = ::OpenAPI::fromJsonValue(m_material_description, json[QString("material_description")]);
    m_material_description_isSet = !json[QString("material_description")].isNull() && m_material_description_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_productivity_isValid = ::OpenAPI::fromJsonValue(m_productivity, json[QString("productivity")]);
    m_productivity_isSet = !json[QString("productivity")].isNull() && m_productivity_isValid;

    m_productivity_description_isValid = ::OpenAPI::fromJsonValue(m_productivity_description, json[QString("productivity_description")]);
    m_productivity_description_isSet = !json[QString("productivity_description")].isNull() && m_productivity_description_isValid;

    m_quality_concern_isValid = ::OpenAPI::fromJsonValue(m_quality_concern, json[QString("quality_concern")]);
    m_quality_concern_isSet = !json[QString("quality_concern")].isNull() && m_quality_concern_isValid;

    m_quality_concern_description_isValid = ::OpenAPI::fromJsonValue(m_quality_concern_description, json[QString("quality_concern_description")]);
    m_quality_concern_description_isSet = !json[QString("quality_concern_description")].isNull() && m_quality_concern_description_isValid;

    m_subtype_isValid = ::OpenAPI::fromJsonValue(m_subtype, json[QString("subtype")]);
    m_subtype_isSet = !json[QString("subtype")].isNull() && m_subtype_isValid;

    m_subtype_description_isValid = ::OpenAPI::fromJsonValue(m_subtype_description, json[QString("subtype_description")]);
    m_subtype_description_isSet = !json[QString("subtype_description")].isNull() && m_subtype_description_isValid;

    m_vulnerability_isValid = ::OpenAPI::fromJsonValue(m_vulnerability, json[QString("vulnerability")]);
    m_vulnerability_isSet = !json[QString("vulnerability")].isNull() && m_vulnerability_isValid;

    m_vulnerability_description_isValid = ::OpenAPI::fromJsonValue(m_vulnerability_description, json[QString("vulnerability_description")]);
    m_vulnerability_description_isSet = !json[QString("vulnerability_description")].isNull() && m_vulnerability_description_isValid;
}

QString OAIAquifer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAquifer::asJsonObject() const {
    QJsonObject obj;
    if (m_aquifer_id_isSet) {
        obj.insert(QString("aquifer_id"), ::OpenAPI::toJsonValue(m_aquifer_id));
    }
    if (m_aquifer_name_isSet) {
        obj.insert(QString("aquifer_name"), ::OpenAPI::toJsonValue(m_aquifer_name));
    }
    if (m_area_isSet) {
        obj.insert(QString("area"), ::OpenAPI::toJsonValue(m_area));
    }
    if (m_demand_isSet) {
        obj.insert(QString("demand"), ::OpenAPI::toJsonValue(m_demand));
    }
    if (m_demand_description_isSet) {
        obj.insert(QString("demand_description"), ::OpenAPI::toJsonValue(m_demand_description));
    }
    if (m_known_water_use_isSet) {
        obj.insert(QString("known_water_use"), ::OpenAPI::toJsonValue(m_known_water_use));
    }
    if (m_known_water_use_description_isSet) {
        obj.insert(QString("known_water_use_description"), ::OpenAPI::toJsonValue(m_known_water_use_description));
    }
    if (m_litho_stratographic_unit_isSet) {
        obj.insert(QString("litho_stratographic_unit"), ::OpenAPI::toJsonValue(m_litho_stratographic_unit));
    }
    if (m_location_description_isSet) {
        obj.insert(QString("location_description"), ::OpenAPI::toJsonValue(m_location_description));
    }
    if (m_mapping_year_isSet) {
        obj.insert(QString("mapping_year"), ::OpenAPI::toJsonValue(m_mapping_year));
    }
    if (m_material_isSet) {
        obj.insert(QString("material"), ::OpenAPI::toJsonValue(m_material));
    }
    if (m_material_description_isSet) {
        obj.insert(QString("material_description"), ::OpenAPI::toJsonValue(m_material_description));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_productivity_isSet) {
        obj.insert(QString("productivity"), ::OpenAPI::toJsonValue(m_productivity));
    }
    if (m_productivity_description_isSet) {
        obj.insert(QString("productivity_description"), ::OpenAPI::toJsonValue(m_productivity_description));
    }
    if (m_quality_concern_isSet) {
        obj.insert(QString("quality_concern"), ::OpenAPI::toJsonValue(m_quality_concern));
    }
    if (m_quality_concern_description_isSet) {
        obj.insert(QString("quality_concern_description"), ::OpenAPI::toJsonValue(m_quality_concern_description));
    }
    if (m_subtype_isSet) {
        obj.insert(QString("subtype"), ::OpenAPI::toJsonValue(m_subtype));
    }
    if (m_subtype_description_isSet) {
        obj.insert(QString("subtype_description"), ::OpenAPI::toJsonValue(m_subtype_description));
    }
    if (m_vulnerability_isSet) {
        obj.insert(QString("vulnerability"), ::OpenAPI::toJsonValue(m_vulnerability));
    }
    if (m_vulnerability_description_isSet) {
        obj.insert(QString("vulnerability_description"), ::OpenAPI::toJsonValue(m_vulnerability_description));
    }
    return obj;
}

qint32 OAIAquifer::getAquiferId() const {
    return m_aquifer_id;
}
void OAIAquifer::setAquiferId(const qint32 &aquifer_id) {
    m_aquifer_id = aquifer_id;
    m_aquifer_id_isSet = true;
}

bool OAIAquifer::is_aquifer_id_Set() const{
    return m_aquifer_id_isSet;
}

bool OAIAquifer::is_aquifer_id_Valid() const{
    return m_aquifer_id_isValid;
}

QString OAIAquifer::getAquiferName() const {
    return m_aquifer_name;
}
void OAIAquifer::setAquiferName(const QString &aquifer_name) {
    m_aquifer_name = aquifer_name;
    m_aquifer_name_isSet = true;
}

bool OAIAquifer::is_aquifer_name_Set() const{
    return m_aquifer_name_isSet;
}

bool OAIAquifer::is_aquifer_name_Valid() const{
    return m_aquifer_name_isValid;
}

QString OAIAquifer::getArea() const {
    return m_area;
}
void OAIAquifer::setArea(const QString &area) {
    m_area = area;
    m_area_isSet = true;
}

bool OAIAquifer::is_area_Set() const{
    return m_area_isSet;
}

bool OAIAquifer::is_area_Valid() const{
    return m_area_isValid;
}

QString OAIAquifer::getDemand() const {
    return m_demand;
}
void OAIAquifer::setDemand(const QString &demand) {
    m_demand = demand;
    m_demand_isSet = true;
}

bool OAIAquifer::is_demand_Set() const{
    return m_demand_isSet;
}

bool OAIAquifer::is_demand_Valid() const{
    return m_demand_isValid;
}

QString OAIAquifer::getDemandDescription() const {
    return m_demand_description;
}
void OAIAquifer::setDemandDescription(const QString &demand_description) {
    m_demand_description = demand_description;
    m_demand_description_isSet = true;
}

bool OAIAquifer::is_demand_description_Set() const{
    return m_demand_description_isSet;
}

bool OAIAquifer::is_demand_description_Valid() const{
    return m_demand_description_isValid;
}

QString OAIAquifer::getKnownWaterUse() const {
    return m_known_water_use;
}
void OAIAquifer::setKnownWaterUse(const QString &known_water_use) {
    m_known_water_use = known_water_use;
    m_known_water_use_isSet = true;
}

bool OAIAquifer::is_known_water_use_Set() const{
    return m_known_water_use_isSet;
}

bool OAIAquifer::is_known_water_use_Valid() const{
    return m_known_water_use_isValid;
}

QString OAIAquifer::getKnownWaterUseDescription() const {
    return m_known_water_use_description;
}
void OAIAquifer::setKnownWaterUseDescription(const QString &known_water_use_description) {
    m_known_water_use_description = known_water_use_description;
    m_known_water_use_description_isSet = true;
}

bool OAIAquifer::is_known_water_use_description_Set() const{
    return m_known_water_use_description_isSet;
}

bool OAIAquifer::is_known_water_use_description_Valid() const{
    return m_known_water_use_description_isValid;
}

QString OAIAquifer::getLithoStratographicUnit() const {
    return m_litho_stratographic_unit;
}
void OAIAquifer::setLithoStratographicUnit(const QString &litho_stratographic_unit) {
    m_litho_stratographic_unit = litho_stratographic_unit;
    m_litho_stratographic_unit_isSet = true;
}

bool OAIAquifer::is_litho_stratographic_unit_Set() const{
    return m_litho_stratographic_unit_isSet;
}

bool OAIAquifer::is_litho_stratographic_unit_Valid() const{
    return m_litho_stratographic_unit_isValid;
}

QString OAIAquifer::getLocationDescription() const {
    return m_location_description;
}
void OAIAquifer::setLocationDescription(const QString &location_description) {
    m_location_description = location_description;
    m_location_description_isSet = true;
}

bool OAIAquifer::is_location_description_Set() const{
    return m_location_description_isSet;
}

bool OAIAquifer::is_location_description_Valid() const{
    return m_location_description_isValid;
}

qint32 OAIAquifer::getMappingYear() const {
    return m_mapping_year;
}
void OAIAquifer::setMappingYear(const qint32 &mapping_year) {
    m_mapping_year = mapping_year;
    m_mapping_year_isSet = true;
}

bool OAIAquifer::is_mapping_year_Set() const{
    return m_mapping_year_isSet;
}

bool OAIAquifer::is_mapping_year_Valid() const{
    return m_mapping_year_isValid;
}

QString OAIAquifer::getMaterial() const {
    return m_material;
}
void OAIAquifer::setMaterial(const QString &material) {
    m_material = material;
    m_material_isSet = true;
}

bool OAIAquifer::is_material_Set() const{
    return m_material_isSet;
}

bool OAIAquifer::is_material_Valid() const{
    return m_material_isValid;
}

QString OAIAquifer::getMaterialDescription() const {
    return m_material_description;
}
void OAIAquifer::setMaterialDescription(const QString &material_description) {
    m_material_description = material_description;
    m_material_description_isSet = true;
}

bool OAIAquifer::is_material_description_Set() const{
    return m_material_description_isSet;
}

bool OAIAquifer::is_material_description_Valid() const{
    return m_material_description_isValid;
}

QString OAIAquifer::getNotes() const {
    return m_notes;
}
void OAIAquifer::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIAquifer::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIAquifer::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIAquifer::getProductivity() const {
    return m_productivity;
}
void OAIAquifer::setProductivity(const QString &productivity) {
    m_productivity = productivity;
    m_productivity_isSet = true;
}

bool OAIAquifer::is_productivity_Set() const{
    return m_productivity_isSet;
}

bool OAIAquifer::is_productivity_Valid() const{
    return m_productivity_isValid;
}

QString OAIAquifer::getProductivityDescription() const {
    return m_productivity_description;
}
void OAIAquifer::setProductivityDescription(const QString &productivity_description) {
    m_productivity_description = productivity_description;
    m_productivity_description_isSet = true;
}

bool OAIAquifer::is_productivity_description_Set() const{
    return m_productivity_description_isSet;
}

bool OAIAquifer::is_productivity_description_Valid() const{
    return m_productivity_description_isValid;
}

QString OAIAquifer::getQualityConcern() const {
    return m_quality_concern;
}
void OAIAquifer::setQualityConcern(const QString &quality_concern) {
    m_quality_concern = quality_concern;
    m_quality_concern_isSet = true;
}

bool OAIAquifer::is_quality_concern_Set() const{
    return m_quality_concern_isSet;
}

bool OAIAquifer::is_quality_concern_Valid() const{
    return m_quality_concern_isValid;
}

QString OAIAquifer::getQualityConcernDescription() const {
    return m_quality_concern_description;
}
void OAIAquifer::setQualityConcernDescription(const QString &quality_concern_description) {
    m_quality_concern_description = quality_concern_description;
    m_quality_concern_description_isSet = true;
}

bool OAIAquifer::is_quality_concern_description_Set() const{
    return m_quality_concern_description_isSet;
}

bool OAIAquifer::is_quality_concern_description_Valid() const{
    return m_quality_concern_description_isValid;
}

QString OAIAquifer::getSubtype() const {
    return m_subtype;
}
void OAIAquifer::setSubtype(const QString &subtype) {
    m_subtype = subtype;
    m_subtype_isSet = true;
}

bool OAIAquifer::is_subtype_Set() const{
    return m_subtype_isSet;
}

bool OAIAquifer::is_subtype_Valid() const{
    return m_subtype_isValid;
}

QString OAIAquifer::getSubtypeDescription() const {
    return m_subtype_description;
}
void OAIAquifer::setSubtypeDescription(const QString &subtype_description) {
    m_subtype_description = subtype_description;
    m_subtype_description_isSet = true;
}

bool OAIAquifer::is_subtype_description_Set() const{
    return m_subtype_description_isSet;
}

bool OAIAquifer::is_subtype_description_Valid() const{
    return m_subtype_description_isValid;
}

QString OAIAquifer::getVulnerability() const {
    return m_vulnerability;
}
void OAIAquifer::setVulnerability(const QString &vulnerability) {
    m_vulnerability = vulnerability;
    m_vulnerability_isSet = true;
}

bool OAIAquifer::is_vulnerability_Set() const{
    return m_vulnerability_isSet;
}

bool OAIAquifer::is_vulnerability_Valid() const{
    return m_vulnerability_isValid;
}

QString OAIAquifer::getVulnerabilityDescription() const {
    return m_vulnerability_description;
}
void OAIAquifer::setVulnerabilityDescription(const QString &vulnerability_description) {
    m_vulnerability_description = vulnerability_description;
    m_vulnerability_description_isSet = true;
}

bool OAIAquifer::is_vulnerability_description_Set() const{
    return m_vulnerability_description_isSet;
}

bool OAIAquifer::is_vulnerability_description_Valid() const{
    return m_vulnerability_description_isValid;
}

bool OAIAquifer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aquifer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aquifer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_demand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_demand_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_known_water_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_known_water_use_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_litho_stratographic_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapping_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_material_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_material_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_productivity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_productivity_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_concern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_concern_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtype_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerability_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAquifer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
