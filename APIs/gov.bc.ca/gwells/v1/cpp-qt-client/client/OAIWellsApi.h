/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWellsApi_H
#define OAI_OAIWellsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAquifers_files_list_200_response.h"
#include "OAIWellDetail.h"
#include "OAIWellTagSearch.h"
#include "OAIWells_list_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWellsApi : public QObject {
    Q_OBJECT

public:
    OAIWellsApi(const int timeOut = 0);
    ~OAIWellsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  tag QString [required]
    */
    virtual void wellsFilesList(const QString &tag);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void wellsList(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  well_tag_number qint32 [required]
    */
    virtual void wellsRead(const qint32 &well_tag_number);

    /**
    * @param[in]  search QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void wellsTagsList(const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void wellsFilesListCallback(OAIHttpRequestWorker *worker);
    void wellsListCallback(OAIHttpRequestWorker *worker);
    void wellsReadCallback(OAIHttpRequestWorker *worker);
    void wellsTagsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void wellsFilesListSignal(OAIAquifers_files_list_200_response summary);
    void wellsListSignal(OAIWells_list_200_response summary);
    void wellsReadSignal(OAIWellDetail summary);
    void wellsTagsListSignal(QList<OAIWellTagSearch> summary);


    void wellsFilesListSignalFull(OAIHttpRequestWorker *worker, OAIAquifers_files_list_200_response summary);
    void wellsListSignalFull(OAIHttpRequestWorker *worker, OAIWells_list_200_response summary);
    void wellsReadSignalFull(OAIHttpRequestWorker *worker, OAIWellDetail summary);
    void wellsTagsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIWellTagSearch> summary);

    Q_DECL_DEPRECATED_X("Use wellsFilesListSignalError() instead")
    void wellsFilesListSignalE(OAIAquifers_files_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wellsFilesListSignalError(OAIAquifers_files_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wellsListSignalError() instead")
    void wellsListSignalE(OAIWells_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wellsListSignalError(OAIWells_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wellsReadSignalError() instead")
    void wellsReadSignalE(OAIWellDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wellsReadSignalError(OAIWellDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wellsTagsListSignalError() instead")
    void wellsTagsListSignalE(QList<OAIWellTagSearch> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wellsTagsListSignalError(QList<OAIWellTagSearch> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use wellsFilesListSignalErrorFull() instead")
    void wellsFilesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wellsFilesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wellsListSignalErrorFull() instead")
    void wellsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wellsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wellsReadSignalErrorFull() instead")
    void wellsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wellsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wellsTagsListSignalErrorFull() instead")
    void wellsTagsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wellsTagsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
