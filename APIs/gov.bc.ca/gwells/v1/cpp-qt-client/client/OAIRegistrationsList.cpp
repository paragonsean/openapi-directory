/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistrationsList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistrationsList::OAIRegistrationsList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistrationsList::OAIRegistrationsList() {
    this->initializeModel();
}

OAIRegistrationsList::~OAIRegistrationsList() {}

void OAIRegistrationsList::initializeModel() {

    m_activity_isSet = false;
    m_activity_isValid = false;

    m_activity_description_isSet = false;
    m_activity_description_isValid = false;

    m_applications_isSet = false;
    m_applications_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_registration_no_isSet = false;
    m_registration_no_isValid = false;
}

void OAIRegistrationsList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistrationsList::fromJsonObject(QJsonObject json) {

    m_activity_isValid = ::OpenAPI::fromJsonValue(m_activity, json[QString("activity")]);
    m_activity_isSet = !json[QString("activity")].isNull() && m_activity_isValid;

    m_activity_description_isValid = ::OpenAPI::fromJsonValue(m_activity_description, json[QString("activity_description")]);
    m_activity_description_isSet = !json[QString("activity_description")].isNull() && m_activity_description_isValid;

    m_applications_isValid = ::OpenAPI::fromJsonValue(m_applications, json[QString("applications")]);
    m_applications_isSet = !json[QString("applications")].isNull() && m_applications_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_registration_no_isValid = ::OpenAPI::fromJsonValue(m_registration_no, json[QString("registration_no")]);
    m_registration_no_isSet = !json[QString("registration_no")].isNull() && m_registration_no_isValid;
}

QString OAIRegistrationsList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistrationsList::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_isSet) {
        obj.insert(QString("activity"), ::OpenAPI::toJsonValue(m_activity));
    }
    if (m_activity_description_isSet) {
        obj.insert(QString("activity_description"), ::OpenAPI::toJsonValue(m_activity_description));
    }
    if (m_applications.size() > 0) {
        obj.insert(QString("applications"), ::OpenAPI::toJsonValue(m_applications));
    }
    if (m_organization.isSet()) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_registration_no_isSet) {
        obj.insert(QString("registration_no"), ::OpenAPI::toJsonValue(m_registration_no));
    }
    return obj;
}

QString OAIRegistrationsList::getActivity() const {
    return m_activity;
}
void OAIRegistrationsList::setActivity(const QString &activity) {
    m_activity = activity;
    m_activity_isSet = true;
}

bool OAIRegistrationsList::is_activity_Set() const{
    return m_activity_isSet;
}

bool OAIRegistrationsList::is_activity_Valid() const{
    return m_activity_isValid;
}

QString OAIRegistrationsList::getActivityDescription() const {
    return m_activity_description;
}
void OAIRegistrationsList::setActivityDescription(const QString &activity_description) {
    m_activity_description = activity_description;
    m_activity_description_isSet = true;
}

bool OAIRegistrationsList::is_activity_description_Set() const{
    return m_activity_description_isSet;
}

bool OAIRegistrationsList::is_activity_description_Valid() const{
    return m_activity_description_isValid;
}

QList<OAIApplicationList> OAIRegistrationsList::getApplications() const {
    return m_applications;
}
void OAIRegistrationsList::setApplications(const QList<OAIApplicationList> &applications) {
    m_applications = applications;
    m_applications_isSet = true;
}

bool OAIRegistrationsList::is_applications_Set() const{
    return m_applications_isSet;
}

bool OAIRegistrationsList::is_applications_Valid() const{
    return m_applications_isValid;
}

OAIOrganizationList OAIRegistrationsList::getOrganization() const {
    return m_organization;
}
void OAIRegistrationsList::setOrganization(const OAIOrganizationList &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIRegistrationsList::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIRegistrationsList::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIRegistrationsList::getRegistrationNo() const {
    return m_registration_no;
}
void OAIRegistrationsList::setRegistrationNo(const QString &registration_no) {
    m_registration_no = registration_no;
    m_registration_no_isSet = true;
}

bool OAIRegistrationsList::is_registration_no_Set() const{
    return m_registration_no_isSet;
}

bool OAIRegistrationsList::is_registration_no_Valid() const{
    return m_registration_no_isValid;
}

bool OAIRegistrationsList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_applications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_no_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistrationsList::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_organization_isValid && true;
}

} // namespace OpenAPI
