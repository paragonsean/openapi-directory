/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILithologyDescription.h
 *
 * 
 */

#ifndef OAILithologyDescription_H
#define OAILithologyDescription_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILithologyDescription : public OAIObject {
public:
    OAILithologyDescription();
    OAILithologyDescription(QString json);
    ~OAILithologyDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLithologyColour() const;
    void setLithologyColour(const QString &lithology_colour);
    bool is_lithology_colour_Set() const;
    bool is_lithology_colour_Valid() const;

    QString getLithologyFrom() const;
    void setLithologyFrom(const QString &lithology_from);
    bool is_lithology_from_Set() const;
    bool is_lithology_from_Valid() const;

    QString getLithologyHardness() const;
    void setLithologyHardness(const QString &lithology_hardness);
    bool is_lithology_hardness_Set() const;
    bool is_lithology_hardness_Valid() const;

    QString getLithologyMoisture() const;
    void setLithologyMoisture(const QString &lithology_moisture);
    bool is_lithology_moisture_Set() const;
    bool is_lithology_moisture_Valid() const;

    QString getLithologyRawData() const;
    void setLithologyRawData(const QString &lithology_raw_data);
    bool is_lithology_raw_data_Set() const;
    bool is_lithology_raw_data_Valid() const;

    QString getLithologyTo() const;
    void setLithologyTo(const QString &lithology_to);
    bool is_lithology_to_Set() const;
    bool is_lithology_to_Valid() const;

    QString getWaterBearingEstimatedFlow() const;
    void setWaterBearingEstimatedFlow(const QString &water_bearing_estimated_flow);
    bool is_water_bearing_estimated_flow_Set() const;
    bool is_water_bearing_estimated_flow_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_lithology_colour;
    bool m_lithology_colour_isSet;
    bool m_lithology_colour_isValid;

    QString m_lithology_from;
    bool m_lithology_from_isSet;
    bool m_lithology_from_isValid;

    QString m_lithology_hardness;
    bool m_lithology_hardness_isSet;
    bool m_lithology_hardness_isValid;

    QString m_lithology_moisture;
    bool m_lithology_moisture_isSet;
    bool m_lithology_moisture_isValid;

    QString m_lithology_raw_data;
    bool m_lithology_raw_data_isSet;
    bool m_lithology_raw_data_isValid;

    QString m_lithology_to;
    bool m_lithology_to_isSet;
    bool m_lithology_to_isValid;

    QString m_water_bearing_estimated_flow;
    bool m_water_bearing_estimated_flow_isSet;
    bool m_water_bearing_estimated_flow_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILithologyDescription)

#endif // OAILithologyDescription_H
