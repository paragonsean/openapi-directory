/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAquifers_files_list_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAquifers_files_list_200_response::OAIAquifers_files_list_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAquifers_files_list_200_response::OAIAquifers_files_list_200_response() {
    this->initializeModel();
}

OAIAquifers_files_list_200_response::~OAIAquifers_files_list_200_response() {}

void OAIAquifers_files_list_200_response::initializeModel() {

    m_r_private_isSet = false;
    m_r_private_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;
}

void OAIAquifers_files_list_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAquifers_files_list_200_response::fromJsonObject(QJsonObject json) {

    m_r_private_isValid = ::OpenAPI::fromJsonValue(m_r_private, json[QString("private")]);
    m_r_private_isSet = !json[QString("private")].isNull() && m_r_private_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;
}

QString OAIAquifers_files_list_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAquifers_files_list_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_r_private.size() > 0) {
        obj.insert(QString("private"), ::OpenAPI::toJsonValue(m_r_private));
    }
    if (m_r_public.size() > 0) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    return obj;
}

QList<OAIAquifers_files_list_200_response_private_inner> OAIAquifers_files_list_200_response::getRPrivate() const {
    return m_r_private;
}
void OAIAquifers_files_list_200_response::setRPrivate(const QList<OAIAquifers_files_list_200_response_private_inner> &r_private) {
    m_r_private = r_private;
    m_r_private_isSet = true;
}

bool OAIAquifers_files_list_200_response::is_r_private_Set() const{
    return m_r_private_isSet;
}

bool OAIAquifers_files_list_200_response::is_r_private_Valid() const{
    return m_r_private_isValid;
}

QList<OAIAquifers_files_list_200_response_private_inner> OAIAquifers_files_list_200_response::getRPublic() const {
    return m_r_public;
}
void OAIAquifers_files_list_200_response::setRPublic(const QList<OAIAquifers_files_list_200_response_private_inner> &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAIAquifers_files_list_200_response::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAIAquifers_files_list_200_response::is_r_public_Valid() const{
    return m_r_public_isValid;
}

bool OAIAquifers_files_list_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_private.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAquifers_files_list_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
