/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistrationsNumber.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistrationsNumber::OAIRegistrationsNumber(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistrationsNumber::OAIRegistrationsNumber() {
    this->initializeModel();
}

OAIRegistrationsNumber::~OAIRegistrationsNumber() {}

void OAIRegistrationsNumber::initializeModel() {

    m_registration_no_isSet = false;
    m_registration_no_isValid = false;

    m_registries_activity_isSet = false;
    m_registries_activity_isValid = false;
}

void OAIRegistrationsNumber::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistrationsNumber::fromJsonObject(QJsonObject json) {

    m_registration_no_isValid = ::OpenAPI::fromJsonValue(m_registration_no, json[QString("registration_no")]);
    m_registration_no_isSet = !json[QString("registration_no")].isNull() && m_registration_no_isValid;

    m_registries_activity_isValid = ::OpenAPI::fromJsonValue(m_registries_activity, json[QString("registries_activity")]);
    m_registries_activity_isSet = !json[QString("registries_activity")].isNull() && m_registries_activity_isValid;
}

QString OAIRegistrationsNumber::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistrationsNumber::asJsonObject() const {
    QJsonObject obj;
    if (m_registration_no_isSet) {
        obj.insert(QString("registration_no"), ::OpenAPI::toJsonValue(m_registration_no));
    }
    if (m_registries_activity_isSet) {
        obj.insert(QString("registries_activity"), ::OpenAPI::toJsonValue(m_registries_activity));
    }
    return obj;
}

QString OAIRegistrationsNumber::getRegistrationNo() const {
    return m_registration_no;
}
void OAIRegistrationsNumber::setRegistrationNo(const QString &registration_no) {
    m_registration_no = registration_no;
    m_registration_no_isSet = true;
}

bool OAIRegistrationsNumber::is_registration_no_Set() const{
    return m_registration_no_isSet;
}

bool OAIRegistrationsNumber::is_registration_no_Valid() const{
    return m_registration_no_isValid;
}

QString OAIRegistrationsNumber::getRegistriesActivity() const {
    return m_registries_activity;
}
void OAIRegistrationsNumber::setRegistriesActivity(const QString &registries_activity) {
    m_registries_activity = registries_activity;
    m_registries_activity_isSet = true;
}

bool OAIRegistrationsNumber::is_registries_activity_Set() const{
    return m_registries_activity_isSet;
}

bool OAIRegistrationsNumber::is_registries_activity_Valid() const{
    return m_registries_activity_isValid;
}

bool OAIRegistrationsNumber::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_registration_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registries_activity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistrationsNumber::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_registries_activity_isValid && true;
}

} // namespace OpenAPI
