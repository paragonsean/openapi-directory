/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDrillersApi_H
#define OAI_OAIDrillersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAquifers_files_list_200_response.h"
#include "OAIPersonList.h"
#include "OAIPersonName.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDrillersApi : public QObject {
    Q_OBJECT

public:
    OAIDrillersApi(const int timeOut = 0);
    ~OAIDrillersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  person_guid QString [required]
    */
    virtual void drillersFilesList(const QString &person_guid);

    /**
    * @param[in]  search QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void drillersList(const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  search QString [optional]
    */
    virtual void drillersNamesList(const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void drillersFilesListCallback(OAIHttpRequestWorker *worker);
    void drillersListCallback(OAIHttpRequestWorker *worker);
    void drillersNamesListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void drillersFilesListSignal(OAIAquifers_files_list_200_response summary);
    void drillersListSignal(QList<OAIPersonList> summary);
    void drillersNamesListSignal(QList<OAIPersonName> summary);


    void drillersFilesListSignalFull(OAIHttpRequestWorker *worker, OAIAquifers_files_list_200_response summary);
    void drillersListSignalFull(OAIHttpRequestWorker *worker, QList<OAIPersonList> summary);
    void drillersNamesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIPersonName> summary);

    Q_DECL_DEPRECATED_X("Use drillersFilesListSignalError() instead")
    void drillersFilesListSignalE(OAIAquifers_files_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drillersFilesListSignalError(OAIAquifers_files_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drillersListSignalError() instead")
    void drillersListSignalE(QList<OAIPersonList> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drillersListSignalError(QList<OAIPersonList> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drillersNamesListSignalError() instead")
    void drillersNamesListSignalE(QList<OAIPersonName> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drillersNamesListSignalError(QList<OAIPersonName> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use drillersFilesListSignalErrorFull() instead")
    void drillersFilesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drillersFilesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drillersListSignalErrorFull() instead")
    void drillersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drillersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drillersNamesListSignalErrorFull() instead")
    void drillersNamesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drillersNamesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
