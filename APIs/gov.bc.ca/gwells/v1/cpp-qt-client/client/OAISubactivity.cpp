/**
 * Groundwater Wells, Aquifers and Registry API
 * The groundwater wells, aquifers and registry API contains information related to groundwater wells and aquifers as well as a register of qualified well drillers and well pump installers registered to operate in B.C.
 *
 * The version of the OpenAPI document: v1
 * Contact: groundwater@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubactivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubactivity::OAISubactivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubactivity::OAISubactivity() {
    this->initializeModel();
}

OAISubactivity::~OAISubactivity() {}

void OAISubactivity::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_qualification_set_isSet = false;
    m_qualification_set_isValid = false;

    m_registries_subactivity_code_isSet = false;
    m_registries_subactivity_code_isValid = false;
}

void OAISubactivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubactivity::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_qualification_set_isValid = ::OpenAPI::fromJsonValue(m_qualification_set, json[QString("qualification_set")]);
    m_qualification_set_isSet = !json[QString("qualification_set")].isNull() && m_qualification_set_isValid;

    m_registries_subactivity_code_isValid = ::OpenAPI::fromJsonValue(m_registries_subactivity_code, json[QString("registries_subactivity_code")]);
    m_registries_subactivity_code_isSet = !json[QString("registries_subactivity_code")].isNull() && m_registries_subactivity_code_isValid;
}

QString OAISubactivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubactivity::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_qualification_set.size() > 0) {
        obj.insert(QString("qualification_set"), ::OpenAPI::toJsonValue(m_qualification_set));
    }
    if (m_registries_subactivity_code_isSet) {
        obj.insert(QString("registries_subactivity_code"), ::OpenAPI::toJsonValue(m_registries_subactivity_code));
    }
    return obj;
}

QString OAISubactivity::getDescription() const {
    return m_description;
}
void OAISubactivity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISubactivity::is_description_Set() const{
    return m_description_isSet;
}

bool OAISubactivity::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIQualification> OAISubactivity::getQualificationSet() const {
    return m_qualification_set;
}
void OAISubactivity::setQualificationSet(const QList<OAIQualification> &qualification_set) {
    m_qualification_set = qualification_set;
    m_qualification_set_isSet = true;
}

bool OAISubactivity::is_qualification_set_Set() const{
    return m_qualification_set_isSet;
}

bool OAISubactivity::is_qualification_set_Valid() const{
    return m_qualification_set_isValid;
}

QString OAISubactivity::getRegistriesSubactivityCode() const {
    return m_registries_subactivity_code;
}
void OAISubactivity::setRegistriesSubactivityCode(const QString &registries_subactivity_code) {
    m_registries_subactivity_code = registries_subactivity_code;
    m_registries_subactivity_code_isSet = true;
}

bool OAISubactivity::is_registries_subactivity_code_Set() const{
    return m_registries_subactivity_code_isSet;
}

bool OAISubactivity::is_registries_subactivity_code_Valid() const{
    return m_registries_subactivity_code_isValid;
}

bool OAISubactivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualification_set.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_registries_subactivity_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubactivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && true;
}

} // namespace OpenAPI
