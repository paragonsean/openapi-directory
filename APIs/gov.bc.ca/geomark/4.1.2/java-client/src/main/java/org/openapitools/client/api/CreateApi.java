/*
 * GeoMark Web Service REST API
 * The Geomark Web Service allows you to create and share geographic areas of interest over the web in a variety of formats and coordinate systems. This service is especially helpful when you need to share an area of interest with people who require that the data be in a different format, or they use different mapping software.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs/tree/master/geomark) in other API console viewers.
 *
 * The version of the OpenAPI document: 4.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CreateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CreateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CreateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for geomarksCopyPost
     * @param geomarkUrl One or more geomark URLs or identifiers to create the new geomark from. (required)
     * @param resultFormat The file format the geomark info resource should be returned using. (optional)
     * @param allowOverlap Select this option to allow overlapping geometries (optional, default to false)
     * @param paramCallback The callback function a JSON result format would be wrapped in to support Ajax requests. (optional)
     * @param redirectUrl The optional external URL to redirect the user to when the geomark is created rather than showing the geomark info page. The geomarkId and geomarkUrl query string parameters will be added to the redirectUrl so that the target application gets a reference to the geomark. (optional)
     * @param failureRedirectUrl The url to redirect if the geomark could not be created. The URL will include a &lt;fieldName&gt;_Error parameter with the error message for the field that caused the error. (optional)
     * @param bufferMetres The amount to buffer the geometry in metres, must only contain numerical digits (e.g 10). Leave blank and no buffer will be added to input geometries. If blank then any Point, LineString, MultiPoint and MultiLineString geometries will be ignored. (optional)
     * @param bufferJoin If bufferMetres is specified, The style of buffer to use for joins between the line segments for lines and polygons. (optional, default to ROUND)
     * @param bufferCap If bufferMetres is specified, The style of buffer to use at the ends of a buffered line. (optional, default to ROUND)
     * @param bufferMitreLimit If bufferMetres is specified, the maximum ratio of distance from the original geometry to a mitre buffer point and the buffer amount. If the ratio is greater than this a bevel will be used instead. This prevents infinite distances when the angle between the two lines at a join is small. Must be &gt; 0. (optional, default to 5)
     * @param bufferSegments If bufferMetres is specified, the number of line segments used in each quadrant to approximate the curve for round end-cap and join styles. Must be &gt; 0. (optional, default to 8)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the geomark was created via a web service call. </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> If the geomark was created and a redirectUrl was specified then the response will redirect to the redirectUrl with the query string parameters geomarkId and geomarkUrl of the created geomark.  Additional reasons for this status code can be found in the [Geomark Web Service Developer Guide](https://apps.gov.bc.ca/pub/geomark/docs/rest-api/) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Couldn&#39;t create Geomark.**  Possible reasons:  * No Polygon, Multi-Polygon, or folder(set) of Polygons provided. * A point or line was provided without a buffer width.  Additional reasons for this status code can be found in the [Geomark Web Service Developer Guide](https://apps.gov.bc.ca/pub/geomark/docs/rest-api/) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error** </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call geomarksCopyPostCall(String geomarkUrl, String resultFormat, Boolean allowOverlap, String paramCallback, String redirectUrl, String failureRedirectUrl, Integer bufferMetres, String bufferJoin, String bufferCap, Integer bufferMitreLimit, Integer bufferSegments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/geomarks/copy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (geomarkUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geomarkUrl", geomarkUrl));
        }

        if (resultFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resultFormat", resultFormat));
        }

        if (allowOverlap != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowOverlap", allowOverlap));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (redirectUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirectUrl", redirectUrl));
        }

        if (failureRedirectUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("failureRedirectUrl", failureRedirectUrl));
        }

        if (bufferMetres != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bufferMetres", bufferMetres));
        }

        if (bufferJoin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bufferJoin", bufferJoin));
        }

        if (bufferCap != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bufferCap", bufferCap));
        }

        if (bufferMitreLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bufferMitreLimit", bufferMitreLimit));
        }

        if (bufferSegments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bufferSegments", bufferSegments));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call geomarksCopyPostValidateBeforeCall(String geomarkUrl, String resultFormat, Boolean allowOverlap, String paramCallback, String redirectUrl, String failureRedirectUrl, Integer bufferMetres, String bufferJoin, String bufferCap, Integer bufferMitreLimit, Integer bufferSegments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'geomarkUrl' is set
        if (geomarkUrl == null) {
            throw new ApiException("Missing the required parameter 'geomarkUrl' when calling geomarksCopyPost(Async)");
        }

        return geomarksCopyPostCall(geomarkUrl, resultFormat, allowOverlap, paramCallback, redirectUrl, failureRedirectUrl, bufferMetres, bufferJoin, bufferCap, bufferMitreLimit, bufferSegments, _callback);

    }

    /**
     * Create a new geomark by copying the geometries from one or more existing geomarks from the current server.
     * The source geomarks can be specified by with the geomarkUrl parameter.  Repeat the parameter if sourcing from multiple geomarks
     * @param geomarkUrl One or more geomark URLs or identifiers to create the new geomark from. (required)
     * @param resultFormat The file format the geomark info resource should be returned using. (optional)
     * @param allowOverlap Select this option to allow overlapping geometries (optional, default to false)
     * @param paramCallback The callback function a JSON result format would be wrapped in to support Ajax requests. (optional)
     * @param redirectUrl The optional external URL to redirect the user to when the geomark is created rather than showing the geomark info page. The geomarkId and geomarkUrl query string parameters will be added to the redirectUrl so that the target application gets a reference to the geomark. (optional)
     * @param failureRedirectUrl The url to redirect if the geomark could not be created. The URL will include a &lt;fieldName&gt;_Error parameter with the error message for the field that caused the error. (optional)
     * @param bufferMetres The amount to buffer the geometry in metres, must only contain numerical digits (e.g 10). Leave blank and no buffer will be added to input geometries. If blank then any Point, LineString, MultiPoint and MultiLineString geometries will be ignored. (optional)
     * @param bufferJoin If bufferMetres is specified, The style of buffer to use for joins between the line segments for lines and polygons. (optional, default to ROUND)
     * @param bufferCap If bufferMetres is specified, The style of buffer to use at the ends of a buffered line. (optional, default to ROUND)
     * @param bufferMitreLimit If bufferMetres is specified, the maximum ratio of distance from the original geometry to a mitre buffer point and the buffer amount. If the ratio is greater than this a bevel will be used instead. This prevents infinite distances when the angle between the two lines at a join is small. Must be &gt; 0. (optional, default to 5)
     * @param bufferSegments If bufferMetres is specified, the number of line segments used in each quadrant to approximate the curve for round end-cap and join styles. Must be &gt; 0. (optional, default to 8)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the geomark was created via a web service call. </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> If the geomark was created and a redirectUrl was specified then the response will redirect to the redirectUrl with the query string parameters geomarkId and geomarkUrl of the created geomark.  Additional reasons for this status code can be found in the [Geomark Web Service Developer Guide](https://apps.gov.bc.ca/pub/geomark/docs/rest-api/) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Couldn&#39;t create Geomark.**  Possible reasons:  * No Polygon, Multi-Polygon, or folder(set) of Polygons provided. * A point or line was provided without a buffer width.  Additional reasons for this status code can be found in the [Geomark Web Service Developer Guide](https://apps.gov.bc.ca/pub/geomark/docs/rest-api/) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error** </td><td>  -  </td></tr>
     </table>
     */
    public void geomarksCopyPost(String geomarkUrl, String resultFormat, Boolean allowOverlap, String paramCallback, String redirectUrl, String failureRedirectUrl, Integer bufferMetres, String bufferJoin, String bufferCap, Integer bufferMitreLimit, Integer bufferSegments) throws ApiException {
        geomarksCopyPostWithHttpInfo(geomarkUrl, resultFormat, allowOverlap, paramCallback, redirectUrl, failureRedirectUrl, bufferMetres, bufferJoin, bufferCap, bufferMitreLimit, bufferSegments);
    }

    /**
     * Create a new geomark by copying the geometries from one or more existing geomarks from the current server.
     * The source geomarks can be specified by with the geomarkUrl parameter.  Repeat the parameter if sourcing from multiple geomarks
     * @param geomarkUrl One or more geomark URLs or identifiers to create the new geomark from. (required)
     * @param resultFormat The file format the geomark info resource should be returned using. (optional)
     * @param allowOverlap Select this option to allow overlapping geometries (optional, default to false)
     * @param paramCallback The callback function a JSON result format would be wrapped in to support Ajax requests. (optional)
     * @param redirectUrl The optional external URL to redirect the user to when the geomark is created rather than showing the geomark info page. The geomarkId and geomarkUrl query string parameters will be added to the redirectUrl so that the target application gets a reference to the geomark. (optional)
     * @param failureRedirectUrl The url to redirect if the geomark could not be created. The URL will include a &lt;fieldName&gt;_Error parameter with the error message for the field that caused the error. (optional)
     * @param bufferMetres The amount to buffer the geometry in metres, must only contain numerical digits (e.g 10). Leave blank and no buffer will be added to input geometries. If blank then any Point, LineString, MultiPoint and MultiLineString geometries will be ignored. (optional)
     * @param bufferJoin If bufferMetres is specified, The style of buffer to use for joins between the line segments for lines and polygons. (optional, default to ROUND)
     * @param bufferCap If bufferMetres is specified, The style of buffer to use at the ends of a buffered line. (optional, default to ROUND)
     * @param bufferMitreLimit If bufferMetres is specified, the maximum ratio of distance from the original geometry to a mitre buffer point and the buffer amount. If the ratio is greater than this a bevel will be used instead. This prevents infinite distances when the angle between the two lines at a join is small. Must be &gt; 0. (optional, default to 5)
     * @param bufferSegments If bufferMetres is specified, the number of line segments used in each quadrant to approximate the curve for round end-cap and join styles. Must be &gt; 0. (optional, default to 8)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the geomark was created via a web service call. </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> If the geomark was created and a redirectUrl was specified then the response will redirect to the redirectUrl with the query string parameters geomarkId and geomarkUrl of the created geomark.  Additional reasons for this status code can be found in the [Geomark Web Service Developer Guide](https://apps.gov.bc.ca/pub/geomark/docs/rest-api/) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Couldn&#39;t create Geomark.**  Possible reasons:  * No Polygon, Multi-Polygon, or folder(set) of Polygons provided. * A point or line was provided without a buffer width.  Additional reasons for this status code can be found in the [Geomark Web Service Developer Guide](https://apps.gov.bc.ca/pub/geomark/docs/rest-api/) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error** </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> geomarksCopyPostWithHttpInfo(String geomarkUrl, String resultFormat, Boolean allowOverlap, String paramCallback, String redirectUrl, String failureRedirectUrl, Integer bufferMetres, String bufferJoin, String bufferCap, Integer bufferMitreLimit, Integer bufferSegments) throws ApiException {
        okhttp3.Call localVarCall = geomarksCopyPostValidateBeforeCall(geomarkUrl, resultFormat, allowOverlap, paramCallback, redirectUrl, failureRedirectUrl, bufferMetres, bufferJoin, bufferCap, bufferMitreLimit, bufferSegments, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new geomark by copying the geometries from one or more existing geomarks from the current server. (asynchronously)
     * The source geomarks can be specified by with the geomarkUrl parameter.  Repeat the parameter if sourcing from multiple geomarks
     * @param geomarkUrl One or more geomark URLs or identifiers to create the new geomark from. (required)
     * @param resultFormat The file format the geomark info resource should be returned using. (optional)
     * @param allowOverlap Select this option to allow overlapping geometries (optional, default to false)
     * @param paramCallback The callback function a JSON result format would be wrapped in to support Ajax requests. (optional)
     * @param redirectUrl The optional external URL to redirect the user to when the geomark is created rather than showing the geomark info page. The geomarkId and geomarkUrl query string parameters will be added to the redirectUrl so that the target application gets a reference to the geomark. (optional)
     * @param failureRedirectUrl The url to redirect if the geomark could not be created. The URL will include a &lt;fieldName&gt;_Error parameter with the error message for the field that caused the error. (optional)
     * @param bufferMetres The amount to buffer the geometry in metres, must only contain numerical digits (e.g 10). Leave blank and no buffer will be added to input geometries. If blank then any Point, LineString, MultiPoint and MultiLineString geometries will be ignored. (optional)
     * @param bufferJoin If bufferMetres is specified, The style of buffer to use for joins between the line segments for lines and polygons. (optional, default to ROUND)
     * @param bufferCap If bufferMetres is specified, The style of buffer to use at the ends of a buffered line. (optional, default to ROUND)
     * @param bufferMitreLimit If bufferMetres is specified, the maximum ratio of distance from the original geometry to a mitre buffer point and the buffer amount. If the ratio is greater than this a bevel will be used instead. This prevents infinite distances when the angle between the two lines at a join is small. Must be &gt; 0. (optional, default to 5)
     * @param bufferSegments If bufferMetres is specified, the number of line segments used in each quadrant to approximate the curve for round end-cap and join styles. Must be &gt; 0. (optional, default to 8)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the geomark was created via a web service call. </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> If the geomark was created and a redirectUrl was specified then the response will redirect to the redirectUrl with the query string parameters geomarkId and geomarkUrl of the created geomark.  Additional reasons for this status code can be found in the [Geomark Web Service Developer Guide](https://apps.gov.bc.ca/pub/geomark/docs/rest-api/) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Couldn&#39;t create Geomark.**  Possible reasons:  * No Polygon, Multi-Polygon, or folder(set) of Polygons provided. * A point or line was provided without a buffer width.  Additional reasons for this status code can be found in the [Geomark Web Service Developer Guide](https://apps.gov.bc.ca/pub/geomark/docs/rest-api/) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error** </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call geomarksCopyPostAsync(String geomarkUrl, String resultFormat, Boolean allowOverlap, String paramCallback, String redirectUrl, String failureRedirectUrl, Integer bufferMetres, String bufferJoin, String bufferCap, Integer bufferMitreLimit, Integer bufferSegments, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = geomarksCopyPostValidateBeforeCall(geomarkUrl, resultFormat, allowOverlap, paramCallback, redirectUrl, failureRedirectUrl, bufferMetres, bufferJoin, bufferCap, bufferMitreLimit, bufferSegments, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for geomarksNewPost
     * @param allowOverlap When multiple&#x3D;true select this option to allow overlapping geometries (optional, default to false)
     * @param body The binary or character content representing the geometry or geometries (optional)
     * @param bufferCap If bufferMetres is specified, The style of buffer to use at the ends of a buffered line. (optional, default to ROUND)
     * @param bufferJoin If bufferMetres is specified, The style of buffer to use for joins between the line segments for lines and polygons. (optional, default to ROUND)
     * @param bufferMetres The amount to buffer the geometry in metres, must only contain numerical digits (e.g 10). Leave blank and no buffer will be added to input geometries. If blank then any Point, LineString, MultiPoint and MultiLineString geometries will be ignored. (optional)
     * @param bufferMitreLimit If bufferMetres is specified, the maximum ratio of distance from the original geometry to a mitre buffer point and the buffer amount. If the ratio is greater than this a bevel will be used instead. This prevents infinite distances when the angle between the two lines at a join is small. Must be &gt; 0. (optional, default to 5)
     * @param bufferSegments If bufferMetres is specified, the number of line segments used in each quadrant to approximate the curve for round end-cap and join styles. Must be &gt; 0. (optional, default to 8)
     * @param paramCallback The callback function a JSON result format would be wrapped in to support Ajax requests. (optional)
     * @param failureRedirectUrl The url to redirect if the geomark could not be created. The URL will include a &lt;fieldName&gt;_Error parameter with the error message for the field that caused the error. (optional)
     * @param format The file format name extension of the input geometry. (optional)
     * @param multiple Boolean flag indicating if multiple geometries are to be used for the geomark (true) or only a single geometry from the first geometry (false). (optional, default to false)
     * @param redirectUrl The optional external URL to redirect the user to when the geomark is created rather than showing the geomark info page. The geomarkId and geomarkUrl query string parameters will be added to the redirectUrl so that the target application gets a reference to the geomark. (optional)
     * @param resultFormat The file format the geomark info resource should be returned using. (optional)
     * @param srid The srid of the coordinate system the input geometries are in. If the file includes a coordinate system definition that will be used. (optional, default to 4326)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the geomark was created via a web service call. </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> If the geomark was created and a redirectUrl was specified then the response will redirect to the redirectUrl with the query string parameters geomarkId and geomarkUrl of the created geomark.  Additional reasons for this status code can be found in the [Geomark Web Service Developer Guide](https://apps.gov.bc.ca/pub/geomark/docs/rest-api/) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Couldn&#39;t create Geomark.**  Possible reasons:  * No Polygon, Multi-Polygon, or folder(set) of Polygons provided. * A point or line was provided without a buffer width.  Additional reasons for this status code can be found in the [Geomark Web Service Developer Guide](https://apps.gov.bc.ca/pub/geomark/docs/rest-api/) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error** </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call geomarksNewPostCall(Boolean allowOverlap, String body, String bufferCap, String bufferJoin, Integer bufferMetres, Integer bufferMitreLimit, Integer bufferSegments, String paramCallback, String failureRedirectUrl, String format, Boolean multiple, String redirectUrl, String resultFormat, Integer srid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/geomarks/new";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowOverlap != null) {
            localVarFormParams.put("allowOverlap", allowOverlap);
        }

        if (body != null) {
            localVarFormParams.put("body", body);
        }

        if (bufferCap != null) {
            localVarFormParams.put("bufferCap", bufferCap);
        }

        if (bufferJoin != null) {
            localVarFormParams.put("bufferJoin", bufferJoin);
        }

        if (bufferMetres != null) {
            localVarFormParams.put("bufferMetres", bufferMetres);
        }

        if (bufferMitreLimit != null) {
            localVarFormParams.put("bufferMitreLimit", bufferMitreLimit);
        }

        if (bufferSegments != null) {
            localVarFormParams.put("bufferSegments", bufferSegments);
        }

        if (paramCallback != null) {
            localVarFormParams.put("callback", paramCallback);
        }

        if (failureRedirectUrl != null) {
            localVarFormParams.put("failureRedirectUrl", failureRedirectUrl);
        }

        if (format != null) {
            localVarFormParams.put("format", format);
        }

        if (multiple != null) {
            localVarFormParams.put("multiple", multiple);
        }

        if (redirectUrl != null) {
            localVarFormParams.put("redirectUrl", redirectUrl);
        }

        if (resultFormat != null) {
            localVarFormParams.put("resultFormat", resultFormat);
        }

        if (srid != null) {
            localVarFormParams.put("srid", srid);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call geomarksNewPostValidateBeforeCall(Boolean allowOverlap, String body, String bufferCap, String bufferJoin, Integer bufferMetres, Integer bufferMitreLimit, Integer bufferSegments, String paramCallback, String failureRedirectUrl, String format, Boolean multiple, String redirectUrl, String resultFormat, Integer srid, final ApiCallback _callback) throws ApiException {
        return geomarksNewPostCall(allowOverlap, body, bufferCap, bufferJoin, bufferMetres, bufferMitreLimit, bufferSegments, paramCallback, failureRedirectUrl, format, multiple, redirectUrl, resultFormat, srid, _callback);

    }

    /**
     * Create a new geomark
     * Create a new geomark from the geometries read from the &#39;body&#39; parameter or file.
     * @param allowOverlap When multiple&#x3D;true select this option to allow overlapping geometries (optional, default to false)
     * @param body The binary or character content representing the geometry or geometries (optional)
     * @param bufferCap If bufferMetres is specified, The style of buffer to use at the ends of a buffered line. (optional, default to ROUND)
     * @param bufferJoin If bufferMetres is specified, The style of buffer to use for joins between the line segments for lines and polygons. (optional, default to ROUND)
     * @param bufferMetres The amount to buffer the geometry in metres, must only contain numerical digits (e.g 10). Leave blank and no buffer will be added to input geometries. If blank then any Point, LineString, MultiPoint and MultiLineString geometries will be ignored. (optional)
     * @param bufferMitreLimit If bufferMetres is specified, the maximum ratio of distance from the original geometry to a mitre buffer point and the buffer amount. If the ratio is greater than this a bevel will be used instead. This prevents infinite distances when the angle between the two lines at a join is small. Must be &gt; 0. (optional, default to 5)
     * @param bufferSegments If bufferMetres is specified, the number of line segments used in each quadrant to approximate the curve for round end-cap and join styles. Must be &gt; 0. (optional, default to 8)
     * @param paramCallback The callback function a JSON result format would be wrapped in to support Ajax requests. (optional)
     * @param failureRedirectUrl The url to redirect if the geomark could not be created. The URL will include a &lt;fieldName&gt;_Error parameter with the error message for the field that caused the error. (optional)
     * @param format The file format name extension of the input geometry. (optional)
     * @param multiple Boolean flag indicating if multiple geometries are to be used for the geomark (true) or only a single geometry from the first geometry (false). (optional, default to false)
     * @param redirectUrl The optional external URL to redirect the user to when the geomark is created rather than showing the geomark info page. The geomarkId and geomarkUrl query string parameters will be added to the redirectUrl so that the target application gets a reference to the geomark. (optional)
     * @param resultFormat The file format the geomark info resource should be returned using. (optional)
     * @param srid The srid of the coordinate system the input geometries are in. If the file includes a coordinate system definition that will be used. (optional, default to 4326)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the geomark was created via a web service call. </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> If the geomark was created and a redirectUrl was specified then the response will redirect to the redirectUrl with the query string parameters geomarkId and geomarkUrl of the created geomark.  Additional reasons for this status code can be found in the [Geomark Web Service Developer Guide](https://apps.gov.bc.ca/pub/geomark/docs/rest-api/) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Couldn&#39;t create Geomark.**  Possible reasons:  * No Polygon, Multi-Polygon, or folder(set) of Polygons provided. * A point or line was provided without a buffer width.  Additional reasons for this status code can be found in the [Geomark Web Service Developer Guide](https://apps.gov.bc.ca/pub/geomark/docs/rest-api/) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error** </td><td>  -  </td></tr>
     </table>
     */
    public void geomarksNewPost(Boolean allowOverlap, String body, String bufferCap, String bufferJoin, Integer bufferMetres, Integer bufferMitreLimit, Integer bufferSegments, String paramCallback, String failureRedirectUrl, String format, Boolean multiple, String redirectUrl, String resultFormat, Integer srid) throws ApiException {
        geomarksNewPostWithHttpInfo(allowOverlap, body, bufferCap, bufferJoin, bufferMetres, bufferMitreLimit, bufferSegments, paramCallback, failureRedirectUrl, format, multiple, redirectUrl, resultFormat, srid);
    }

    /**
     * Create a new geomark
     * Create a new geomark from the geometries read from the &#39;body&#39; parameter or file.
     * @param allowOverlap When multiple&#x3D;true select this option to allow overlapping geometries (optional, default to false)
     * @param body The binary or character content representing the geometry or geometries (optional)
     * @param bufferCap If bufferMetres is specified, The style of buffer to use at the ends of a buffered line. (optional, default to ROUND)
     * @param bufferJoin If bufferMetres is specified, The style of buffer to use for joins between the line segments for lines and polygons. (optional, default to ROUND)
     * @param bufferMetres The amount to buffer the geometry in metres, must only contain numerical digits (e.g 10). Leave blank and no buffer will be added to input geometries. If blank then any Point, LineString, MultiPoint and MultiLineString geometries will be ignored. (optional)
     * @param bufferMitreLimit If bufferMetres is specified, the maximum ratio of distance from the original geometry to a mitre buffer point and the buffer amount. If the ratio is greater than this a bevel will be used instead. This prevents infinite distances when the angle between the two lines at a join is small. Must be &gt; 0. (optional, default to 5)
     * @param bufferSegments If bufferMetres is specified, the number of line segments used in each quadrant to approximate the curve for round end-cap and join styles. Must be &gt; 0. (optional, default to 8)
     * @param paramCallback The callback function a JSON result format would be wrapped in to support Ajax requests. (optional)
     * @param failureRedirectUrl The url to redirect if the geomark could not be created. The URL will include a &lt;fieldName&gt;_Error parameter with the error message for the field that caused the error. (optional)
     * @param format The file format name extension of the input geometry. (optional)
     * @param multiple Boolean flag indicating if multiple geometries are to be used for the geomark (true) or only a single geometry from the first geometry (false). (optional, default to false)
     * @param redirectUrl The optional external URL to redirect the user to when the geomark is created rather than showing the geomark info page. The geomarkId and geomarkUrl query string parameters will be added to the redirectUrl so that the target application gets a reference to the geomark. (optional)
     * @param resultFormat The file format the geomark info resource should be returned using. (optional)
     * @param srid The srid of the coordinate system the input geometries are in. If the file includes a coordinate system definition that will be used. (optional, default to 4326)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the geomark was created via a web service call. </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> If the geomark was created and a redirectUrl was specified then the response will redirect to the redirectUrl with the query string parameters geomarkId and geomarkUrl of the created geomark.  Additional reasons for this status code can be found in the [Geomark Web Service Developer Guide](https://apps.gov.bc.ca/pub/geomark/docs/rest-api/) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Couldn&#39;t create Geomark.**  Possible reasons:  * No Polygon, Multi-Polygon, or folder(set) of Polygons provided. * A point or line was provided without a buffer width.  Additional reasons for this status code can be found in the [Geomark Web Service Developer Guide](https://apps.gov.bc.ca/pub/geomark/docs/rest-api/) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error** </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> geomarksNewPostWithHttpInfo(Boolean allowOverlap, String body, String bufferCap, String bufferJoin, Integer bufferMetres, Integer bufferMitreLimit, Integer bufferSegments, String paramCallback, String failureRedirectUrl, String format, Boolean multiple, String redirectUrl, String resultFormat, Integer srid) throws ApiException {
        okhttp3.Call localVarCall = geomarksNewPostValidateBeforeCall(allowOverlap, body, bufferCap, bufferJoin, bufferMetres, bufferMitreLimit, bufferSegments, paramCallback, failureRedirectUrl, format, multiple, redirectUrl, resultFormat, srid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new geomark (asynchronously)
     * Create a new geomark from the geometries read from the &#39;body&#39; parameter or file.
     * @param allowOverlap When multiple&#x3D;true select this option to allow overlapping geometries (optional, default to false)
     * @param body The binary or character content representing the geometry or geometries (optional)
     * @param bufferCap If bufferMetres is specified, The style of buffer to use at the ends of a buffered line. (optional, default to ROUND)
     * @param bufferJoin If bufferMetres is specified, The style of buffer to use for joins between the line segments for lines and polygons. (optional, default to ROUND)
     * @param bufferMetres The amount to buffer the geometry in metres, must only contain numerical digits (e.g 10). Leave blank and no buffer will be added to input geometries. If blank then any Point, LineString, MultiPoint and MultiLineString geometries will be ignored. (optional)
     * @param bufferMitreLimit If bufferMetres is specified, the maximum ratio of distance from the original geometry to a mitre buffer point and the buffer amount. If the ratio is greater than this a bevel will be used instead. This prevents infinite distances when the angle between the two lines at a join is small. Must be &gt; 0. (optional, default to 5)
     * @param bufferSegments If bufferMetres is specified, the number of line segments used in each quadrant to approximate the curve for round end-cap and join styles. Must be &gt; 0. (optional, default to 8)
     * @param paramCallback The callback function a JSON result format would be wrapped in to support Ajax requests. (optional)
     * @param failureRedirectUrl The url to redirect if the geomark could not be created. The URL will include a &lt;fieldName&gt;_Error parameter with the error message for the field that caused the error. (optional)
     * @param format The file format name extension of the input geometry. (optional)
     * @param multiple Boolean flag indicating if multiple geometries are to be used for the geomark (true) or only a single geometry from the first geometry (false). (optional, default to false)
     * @param redirectUrl The optional external URL to redirect the user to when the geomark is created rather than showing the geomark info page. The geomarkId and geomarkUrl query string parameters will be added to the redirectUrl so that the target application gets a reference to the geomark. (optional)
     * @param resultFormat The file format the geomark info resource should be returned using. (optional)
     * @param srid The srid of the coordinate system the input geometries are in. If the file includes a coordinate system definition that will be used. (optional, default to 4326)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If the geomark was created via a web service call. </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> If the geomark was created and a redirectUrl was specified then the response will redirect to the redirectUrl with the query string parameters geomarkId and geomarkUrl of the created geomark.  Additional reasons for this status code can be found in the [Geomark Web Service Developer Guide](https://apps.gov.bc.ca/pub/geomark/docs/rest-api/) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Couldn&#39;t create Geomark.**  Possible reasons:  * No Polygon, Multi-Polygon, or folder(set) of Polygons provided. * A point or line was provided without a buffer width.  Additional reasons for this status code can be found in the [Geomark Web Service Developer Guide](https://apps.gov.bc.ca/pub/geomark/docs/rest-api/) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error** </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call geomarksNewPostAsync(Boolean allowOverlap, String body, String bufferCap, String bufferJoin, Integer bufferMetres, Integer bufferMitreLimit, Integer bufferSegments, String paramCallback, String failureRedirectUrl, String format, Boolean multiple, String redirectUrl, String resultFormat, Integer srid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = geomarksNewPostValidateBeforeCall(allowOverlap, body, bufferCap, bufferJoin, bufferMetres, bufferMitreLimit, bufferSegments, paramCallback, failureRedirectUrl, format, multiple, redirectUrl, resultFormat, srid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
