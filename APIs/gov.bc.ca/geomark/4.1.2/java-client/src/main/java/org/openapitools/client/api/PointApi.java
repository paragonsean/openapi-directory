/*
 * GeoMark Web Service REST API
 * The Geomark Web Service allows you to create and share geographic areas of interest over the web in a variety of formats and coordinate systems. This service is especially helpful when you need to share an area of interest with people who require that the data be in a different format, or they use different mapping software.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs/tree/master/geomark) in other API console viewers.
 *
 * The version of the OpenAPI document: 4.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PointApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PointApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PointApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for geomarksGeomarkIdPointFileFormatExtensionGet
     * @param geomarkId The unique identifier for the geomark. (required)
     * @param fileFormatExtension The file format name extension used to represent the geomark download. (required)
     * @param srid The srid of the coordinate system the geometry should be converted to. (optional, default to 4326)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The geomark will be returned in the body of the HTTP response encoded in the requested [file format](https://apps.gov.bc.ca/pub/geomark/docs/fileFormats.html). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Coordinate system with srid &#x3D; &lt;srid&gt; is not supported.**  Check the list of supported [coordinate systems](https://apps.gov.bc.ca/pub/geomark/docs/coordinateSystems.html). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **The geomark &lt;geomarkId&gt; could not be found.**  Check for extra characters on the end of the URL. The geomark may have expired and been deleted. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error** </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call geomarksGeomarkIdPointFileFormatExtensionGetCall(String geomarkId, String fileFormatExtension, Integer srid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/geomarks/{geomarkId}/point.{fileFormatExtension}"
            .replace("{" + "geomarkId" + "}", localVarApiClient.escapeString(geomarkId.toString()))
            .replace("{" + "fileFormatExtension" + "}", localVarApiClient.escapeString(fileFormatExtension.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (srid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("srid", srid));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call geomarksGeomarkIdPointFileFormatExtensionGetValidateBeforeCall(String geomarkId, String fileFormatExtension, Integer srid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'geomarkId' is set
        if (geomarkId == null) {
            throw new ApiException("Missing the required parameter 'geomarkId' when calling geomarksGeomarkIdPointFileFormatExtensionGet(Async)");
        }

        // verify the required parameter 'fileFormatExtension' is set
        if (fileFormatExtension == null) {
            throw new ApiException("Missing the required parameter 'fileFormatExtension' when calling geomarksGeomarkIdPointFileFormatExtensionGet(Async)");
        }

        return geomarksGeomarkIdPointFileFormatExtensionGetCall(geomarkId, fileFormatExtension, srid, _callback);

    }

    /**
     * Gets a single spatial point representative of the geomark.
     * The geomark point resource returns a single spatial feature with a single Point and the geomark attribution.  The point geometry will be created from the first geometry part of the Geomark. Point geomarks will return the first Point part in the geomark.  LineString geomarks will return the first coordinate of the first LineString part in the geomark. Polygon geomarks will return the centroid or another point inside the first Polygon part in the geomark. The geometry and attribution can be downloaded as a spatial download file format in a supported coordinate system. The download files can then be used in a desktop GIS application (e.g. ArcMap), Google Earth or a web mapping application.
     * @param geomarkId The unique identifier for the geomark. (required)
     * @param fileFormatExtension The file format name extension used to represent the geomark download. (required)
     * @param srid The srid of the coordinate system the geometry should be converted to. (optional, default to 4326)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The geomark will be returned in the body of the HTTP response encoded in the requested [file format](https://apps.gov.bc.ca/pub/geomark/docs/fileFormats.html). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Coordinate system with srid &#x3D; &lt;srid&gt; is not supported.**  Check the list of supported [coordinate systems](https://apps.gov.bc.ca/pub/geomark/docs/coordinateSystems.html). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **The geomark &lt;geomarkId&gt; could not be found.**  Check for extra characters on the end of the URL. The geomark may have expired and been deleted. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error** </td><td>  -  </td></tr>
     </table>
     */
    public void geomarksGeomarkIdPointFileFormatExtensionGet(String geomarkId, String fileFormatExtension, Integer srid) throws ApiException {
        geomarksGeomarkIdPointFileFormatExtensionGetWithHttpInfo(geomarkId, fileFormatExtension, srid);
    }

    /**
     * Gets a single spatial point representative of the geomark.
     * The geomark point resource returns a single spatial feature with a single Point and the geomark attribution.  The point geometry will be created from the first geometry part of the Geomark. Point geomarks will return the first Point part in the geomark.  LineString geomarks will return the first coordinate of the first LineString part in the geomark. Polygon geomarks will return the centroid or another point inside the first Polygon part in the geomark. The geometry and attribution can be downloaded as a spatial download file format in a supported coordinate system. The download files can then be used in a desktop GIS application (e.g. ArcMap), Google Earth or a web mapping application.
     * @param geomarkId The unique identifier for the geomark. (required)
     * @param fileFormatExtension The file format name extension used to represent the geomark download. (required)
     * @param srid The srid of the coordinate system the geometry should be converted to. (optional, default to 4326)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The geomark will be returned in the body of the HTTP response encoded in the requested [file format](https://apps.gov.bc.ca/pub/geomark/docs/fileFormats.html). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Coordinate system with srid &#x3D; &lt;srid&gt; is not supported.**  Check the list of supported [coordinate systems](https://apps.gov.bc.ca/pub/geomark/docs/coordinateSystems.html). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **The geomark &lt;geomarkId&gt; could not be found.**  Check for extra characters on the end of the URL. The geomark may have expired and been deleted. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error** </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> geomarksGeomarkIdPointFileFormatExtensionGetWithHttpInfo(String geomarkId, String fileFormatExtension, Integer srid) throws ApiException {
        okhttp3.Call localVarCall = geomarksGeomarkIdPointFileFormatExtensionGetValidateBeforeCall(geomarkId, fileFormatExtension, srid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets a single spatial point representative of the geomark. (asynchronously)
     * The geomark point resource returns a single spatial feature with a single Point and the geomark attribution.  The point geometry will be created from the first geometry part of the Geomark. Point geomarks will return the first Point part in the geomark.  LineString geomarks will return the first coordinate of the first LineString part in the geomark. Polygon geomarks will return the centroid or another point inside the first Polygon part in the geomark. The geometry and attribution can be downloaded as a spatial download file format in a supported coordinate system. The download files can then be used in a desktop GIS application (e.g. ArcMap), Google Earth or a web mapping application.
     * @param geomarkId The unique identifier for the geomark. (required)
     * @param fileFormatExtension The file format name extension used to represent the geomark download. (required)
     * @param srid The srid of the coordinate system the geometry should be converted to. (optional, default to 4326)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The geomark will be returned in the body of the HTTP response encoded in the requested [file format](https://apps.gov.bc.ca/pub/geomark/docs/fileFormats.html). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> **Coordinate system with srid &#x3D; &lt;srid&gt; is not supported.**  Check the list of supported [coordinate systems](https://apps.gov.bc.ca/pub/geomark/docs/coordinateSystems.html). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> **The geomark &lt;geomarkId&gt; could not be found.**  Check for extra characters on the end of the URL. The geomark may have expired and been deleted. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error** </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call geomarksGeomarkIdPointFileFormatExtensionGetAsync(String geomarkId, String fileFormatExtension, Integer srid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = geomarksGeomarkIdPointFileFormatExtensionGetValidateBeforeCall(geomarkId, fileFormatExtension, srid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
