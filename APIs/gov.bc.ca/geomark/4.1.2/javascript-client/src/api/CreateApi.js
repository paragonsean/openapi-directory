/**
 * GeoMark Web Service REST API
 * The Geomark Web Service allows you to create and share geographic areas of interest over the web in a variety of formats and coordinate systems. This service is especially helpful when you need to share an area of interest with people who require that the data be in a different format, or they use different mapping software.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs/tree/master/geomark) in other API console viewers.
 *
 * The version of the OpenAPI document: 4.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Create service.
* @module api/CreateApi
* @version 4.1.2
*/
export default class CreateApi {

    /**
    * Constructs a new CreateApi. 
    * @alias module:api/CreateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the geomarksCopyPost operation.
     * @callback module:api/CreateApi~geomarksCopyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new geomark by copying the geometries from one or more existing geomarks from the current server.
     * The source geomarks can be specified by with the geomarkUrl parameter.  Repeat the parameter if sourcing from multiple geomarks
     * @param {String} geomarkUrl One or more geomark URLs or identifiers to create the new geomark from.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [resultFormat] The file format the geomark info resource should be returned using.
     * @param {Boolean} [allowOverlap = false)] Select this option to allow overlapping geometries
     * @param {String} [callback] The callback function a JSON result format would be wrapped in to support Ajax requests.
     * @param {String} [redirectUrl] The optional external URL to redirect the user to when the geomark is created rather than showing the geomark info page. The geomarkId and geomarkUrl query string parameters will be added to the redirectUrl so that the target application gets a reference to the geomark.
     * @param {String} [failureRedirectUrl] The url to redirect if the geomark could not be created. The URL will include a <fieldName>_Error parameter with the error message for the field that caused the error.
     * @param {Number} [bufferMetres] The amount to buffer the geometry in metres, must only contain numerical digits (e.g 10). Leave blank and no buffer will be added to input geometries. If blank then any Point, LineString, MultiPoint and MultiLineString geometries will be ignored.
     * @param {module:model/String} [bufferJoin = 'ROUND')] If bufferMetres is specified, The style of buffer to use for joins between the line segments for lines and polygons.
     * @param {module:model/String} [bufferCap = 'ROUND')] If bufferMetres is specified, The style of buffer to use at the ends of a buffered line.
     * @param {Number} [bufferMitreLimit = 5)] If bufferMetres is specified, the maximum ratio of distance from the original geometry to a mitre buffer point and the buffer amount. If the ratio is greater than this a bevel will be used instead. This prevents infinite distances when the angle between the two lines at a join is small. Must be > 0.
     * @param {Number} [bufferSegments = 8)] If bufferMetres is specified, the number of line segments used in each quadrant to approximate the curve for round end-cap and join styles. Must be > 0.
     * @param {module:api/CreateApi~geomarksCopyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    geomarksCopyPost(geomarkUrl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'geomarkUrl' is set
      if (geomarkUrl === undefined || geomarkUrl === null) {
        throw new Error("Missing the required parameter 'geomarkUrl' when calling geomarksCopyPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'geomarkUrl': geomarkUrl,
        'resultFormat': opts['resultFormat'],
        'allowOverlap': opts['allowOverlap'],
        'callback': opts['callback'],
        'redirectUrl': opts['redirectUrl'],
        'failureRedirectUrl': opts['failureRedirectUrl'],
        'bufferMetres': opts['bufferMetres'],
        'bufferJoin': opts['bufferJoin'],
        'bufferCap': opts['bufferCap'],
        'bufferMitreLimit': opts['bufferMitreLimit'],
        'bufferSegments': opts['bufferSegments']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/geomarks/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the geomarksNewPost operation.
     * @callback module:api/CreateApi~geomarksNewPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new geomark
     * Create a new geomark from the geometries read from the 'body' parameter or file.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [allowOverlap = false)] When multiple=true select this option to allow overlapping geometries
     * @param {String} [body] The binary or character content representing the geometry or geometries
     * @param {module:model/String} [bufferCap = 'ROUND')] If bufferMetres is specified, The style of buffer to use at the ends of a buffered line.
     * @param {module:model/String} [bufferJoin = 'ROUND')] If bufferMetres is specified, The style of buffer to use for joins between the line segments for lines and polygons.
     * @param {Number} [bufferMetres] The amount to buffer the geometry in metres, must only contain numerical digits (e.g 10). Leave blank and no buffer will be added to input geometries. If blank then any Point, LineString, MultiPoint and MultiLineString geometries will be ignored.
     * @param {Number} [bufferMitreLimit = 5)] If bufferMetres is specified, the maximum ratio of distance from the original geometry to a mitre buffer point and the buffer amount. If the ratio is greater than this a bevel will be used instead. This prevents infinite distances when the angle between the two lines at a join is small. Must be > 0.
     * @param {Number} [bufferSegments = 8)] If bufferMetres is specified, the number of line segments used in each quadrant to approximate the curve for round end-cap and join styles. Must be > 0.
     * @param {String} [callback] The callback function a JSON result format would be wrapped in to support Ajax requests.
     * @param {String} [failureRedirectUrl] The url to redirect if the geomark could not be created. The URL will include a <fieldName>_Error parameter with the error message for the field that caused the error.
     * @param {module:model/String} [format] The file format name extension of the input geometry.
     * @param {Boolean} [multiple = false)] Boolean flag indicating if multiple geometries are to be used for the geomark (true) or only a single geometry from the first geometry (false).
     * @param {String} [redirectUrl] The optional external URL to redirect the user to when the geomark is created rather than showing the geomark info page. The geomarkId and geomarkUrl query string parameters will be added to the redirectUrl so that the target application gets a reference to the geomark.
     * @param {module:model/String} [resultFormat] The file format the geomark info resource should be returned using.
     * @param {module:model/Number} [srid = 4326)] The srid of the coordinate system the input geometries are in. If the file includes a coordinate system definition that will be used.
     * @param {module:api/CreateApi~geomarksNewPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    geomarksNewPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'allowOverlap': opts['allowOverlap'],
        'body': opts['body'],
        'bufferCap': opts['bufferCap'],
        'bufferJoin': opts['bufferJoin'],
        'bufferMetres': opts['bufferMetres'],
        'bufferMitreLimit': opts['bufferMitreLimit'],
        'bufferSegments': opts['bufferSegments'],
        'callback': opts['callback'],
        'failureRedirectUrl': opts['failureRedirectUrl'],
        'format': opts['format'],
        'multiple': opts['multiple'],
        'redirectUrl': opts['redirectUrl'],
        'resultFormat': opts['resultFormat'],
        'srid': opts['srid']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/geomarks/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
