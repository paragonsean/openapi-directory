/**
 * Geocoder REST API
 * This API represents address cleaning, correction, completion, geocoding, reverse geocoding, and proximity resources for intersection addresses, physical addresses and their occupants in British Columbia. Please read our [data collection notice](https://github.com/bcgov/api-specs/blob/master/COLLECTION_NOTICE.md#collection-notice).    Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.   [API keys](https://api.gov.bc.ca/devportal/api-directory/273) are unique and can be acquired with a GitHub or IDIR account.    **Notification:** If you have applications or web pages that link to the BC Address Geocoder you must use the following URL.    *https://geocoder.api.gov.bc.ca*    Please note that the following URLs were deprecated in September 2018 [More Details](https://www2.gov.bc.ca/gov/content?id=103ADC5A956842828554238DEF28D6E5).    - http://apps.gov.bc.ca/pub/geocoder   - https://apps.gov.bc.ca/pub/geocoder \\ \\  
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISitesApi_H
#define OAI_OAISitesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISitesApi : public QObject {
    Q_OBJECT

public:
    OAISitesApi(const int timeOut = 0);
    ~OAISitesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  address_string QString [optional]
    * @param[in]  location_descriptor QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  interpolation QString [optional]
    * @param[in]  echo bool [optional]
    * @param[in]  brief bool [optional]
    * @param[in]  auto_complete bool [optional]
    * @param[in]  set_back qint32 [optional]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  min_score qint32 [optional]
    * @param[in]  match_precision QString [optional]
    * @param[in]  match_precision_not QString [optional]
    * @param[in]  site_name QString [optional]
    * @param[in]  unit_designator QString [optional]
    * @param[in]  unit_number QString [optional]
    * @param[in]  unit_number_suffix QString [optional]
    * @param[in]  civic_number QString [optional]
    * @param[in]  civic_number_suffix QString [optional]
    * @param[in]  street_name QString [optional]
    * @param[in]  street_type QString [optional]
    * @param[in]  street_direction QString [optional]
    * @param[in]  street_qualifier QString [optional]
    * @param[in]  locality_name QString [optional]
    * @param[in]  province_code QString [optional]
    * @param[in]  localities QString [optional]
    * @param[in]  not_localities QString [optional]
    * @param[in]  bbox QString [optional]
    * @param[in]  centre QString [optional]
    * @param[in]  max_distance double [optional]
    * @param[in]  extrapolate bool [optional]
    * @param[in]  parcel_point QString [optional]
    */
    virtual void addressesOutputFormatGet(const QString &output_format, const ::OpenAPI::OptionalParam<QString> &address_string = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_descriptor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &interpolation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &echo = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &brief = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &auto_complete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &set_back = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_score = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &match_precision = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &match_precision_not = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unit_designator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unit_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unit_number_suffix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &civic_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &civic_number_suffix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &street_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &street_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &street_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &street_qualifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locality_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &province_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &localities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &not_localities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bbox = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &centre = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &max_distance = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<bool> &extrapolate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &parcel_point = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  point QString [required]
    * @param[in]  max_distance qint32 [optional]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  location_descriptor QString [optional]
    * @param[in]  set_back qint32 [optional]
    * @param[in]  brief bool [optional]
    * @param[in]  exclude_units bool [optional]
    * @param[in]  only_civic bool [optional]
    */
    virtual void sitesNearOutputFormatGet(const QString &output_format, const QString &point, const ::OpenAPI::OptionalParam<qint32> &max_distance = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &location_descriptor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &set_back = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &brief = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_units = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &only_civic = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  point QString [required]
    * @param[in]  max_distance qint32 [optional]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  location_descriptor QString [optional]
    * @param[in]  set_back qint32 [optional]
    * @param[in]  brief bool [optional]
    * @param[in]  exclude_units bool [optional]
    * @param[in]  only_civic bool [optional]
    */
    virtual void sitesNearestOutputFormatGet(const QString &output_format, const QString &point, const ::OpenAPI::OptionalParam<qint32> &max_distance = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &location_descriptor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &set_back = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &brief = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_units = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &only_civic = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  output_format QString [required]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  location_descriptor QString [optional]
    * @param[in]  brief bool [optional]
    * @param[in]  set_back qint32 [optional]
    */
    virtual void sitesSiteIDOutputFormatGet(const QString &site_id, const QString &output_format, const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &location_descriptor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &brief = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &set_back = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  output_format QString [required]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  location_descriptor QString [optional]
    * @param[in]  brief bool [optional]
    * @param[in]  set_back qint32 [optional]
    */
    virtual void sitesSiteIDSubsitesOutputFormatGet(const QString &site_id, const QString &output_format, const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &location_descriptor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &brief = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &set_back = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  bbox QString [required]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  location_descriptor QString [optional]
    * @param[in]  set_back qint32 [optional]
    * @param[in]  brief bool [optional]
    * @param[in]  exclude_units bool [optional]
    * @param[in]  only_civic bool [optional]
    */
    virtual void sitesWithinOutputFormatGet(const QString &output_format, const QString &bbox, const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &location_descriptor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &set_back = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &brief = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_units = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &only_civic = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addressesOutputFormatGetCallback(OAIHttpRequestWorker *worker);
    void sitesNearOutputFormatGetCallback(OAIHttpRequestWorker *worker);
    void sitesNearestOutputFormatGetCallback(OAIHttpRequestWorker *worker);
    void sitesSiteIDOutputFormatGetCallback(OAIHttpRequestWorker *worker);
    void sitesSiteIDSubsitesOutputFormatGetCallback(OAIHttpRequestWorker *worker);
    void sitesWithinOutputFormatGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addressesOutputFormatGetSignal();
    void sitesNearOutputFormatGetSignal();
    void sitesNearestOutputFormatGetSignal();
    void sitesSiteIDOutputFormatGetSignal();
    void sitesSiteIDSubsitesOutputFormatGetSignal();
    void sitesWithinOutputFormatGetSignal();


    void addressesOutputFormatGetSignalFull(OAIHttpRequestWorker *worker);
    void sitesNearOutputFormatGetSignalFull(OAIHttpRequestWorker *worker);
    void sitesNearestOutputFormatGetSignalFull(OAIHttpRequestWorker *worker);
    void sitesSiteIDOutputFormatGetSignalFull(OAIHttpRequestWorker *worker);
    void sitesSiteIDSubsitesOutputFormatGetSignalFull(OAIHttpRequestWorker *worker);
    void sitesWithinOutputFormatGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addressesOutputFormatGetSignalError() instead")
    void addressesOutputFormatGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addressesOutputFormatGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesNearOutputFormatGetSignalError() instead")
    void sitesNearOutputFormatGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sitesNearOutputFormatGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesNearestOutputFormatGetSignalError() instead")
    void sitesNearestOutputFormatGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sitesNearestOutputFormatGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesSiteIDOutputFormatGetSignalError() instead")
    void sitesSiteIDOutputFormatGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sitesSiteIDOutputFormatGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesSiteIDSubsitesOutputFormatGetSignalError() instead")
    void sitesSiteIDSubsitesOutputFormatGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sitesSiteIDSubsitesOutputFormatGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesWithinOutputFormatGetSignalError() instead")
    void sitesWithinOutputFormatGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sitesWithinOutputFormatGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addressesOutputFormatGetSignalErrorFull() instead")
    void addressesOutputFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addressesOutputFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesNearOutputFormatGetSignalErrorFull() instead")
    void sitesNearOutputFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesNearOutputFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesNearestOutputFormatGetSignalErrorFull() instead")
    void sitesNearestOutputFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesNearestOutputFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesSiteIDOutputFormatGetSignalErrorFull() instead")
    void sitesSiteIDOutputFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesSiteIDOutputFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesSiteIDSubsitesOutputFormatGetSignalErrorFull() instead")
    void sitesSiteIDSubsitesOutputFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesSiteIDSubsitesOutputFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesWithinOutputFormatGetSignalErrorFull() instead")
    void sitesWithinOutputFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesWithinOutputFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
