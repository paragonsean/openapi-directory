/*
 * Geocoder REST API
 * This API represents address cleaning, correction, completion, geocoding, reverse geocoding, and proximity resources for intersection addresses, physical addresses and their occupants in British Columbia. Please read our [data collection notice](https://github.com/bcgov/api-specs/blob/master/COLLECTION_NOTICE.md#collection-notice).    Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.   [API keys](https://api.gov.bc.ca/devportal/api-directory/273) are unique and can be acquired with a GitHub or IDIR account.    **Notification:** If you have applications or web pages that link to the BC Address Geocoder you must use the following URL.    *https://geocoder.api.gov.bc.ca*    Please note that the following URLs were deprecated in September 2018 [More Details](https://www2.gov.bc.ca/gov/content?id=103ADC5A956842828554238DEF28D6E5).    - http://apps.gov.bc.ca/pub/geocoder   - https://apps.gov.bc.ca/pub/geocoder \\ \\  
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OccupantsApi
 */
@Disabled
public class OccupantsApiTest {

    private final OccupantsApi api = new OccupantsApi();

    /**
     * Geocode an address and identify site occupants
     *
     * Represents the set of occupants whose addresses best match a given query address. Every occupant has an associated site which has a standardized address and a coordinate location on the Earth.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void occupantsAddressesOutputFormatGetTest() throws ApiException {
        String outputFormat = null;
        String addressString = null;
        String tags = null;
        String locationDescriptor = null;
        Integer maxResults = null;
        String interpolation = null;
        Boolean echo = null;
        Boolean brief = null;
        Boolean autoComplete = null;
        Integer setBack = null;
        Integer outputSRS = null;
        Integer minScore = null;
        String matchPrecision = null;
        String matchPrecisionNot = null;
        String siteName = null;
        String unitDesignator = null;
        String unitNumber = null;
        String unitNumberSuffix = null;
        String civicNumber = null;
        String civicNumberSuffix = null;
        String streetName = null;
        String streetType = null;
        String streetDirection = null;
        String streetQualifier = null;
        String localityName = null;
        String provinceCode = null;
        String localities = null;
        String notLocalities = null;
        String bbox = null;
        String centre = null;
        BigDecimal maxDistance = null;
        Boolean extrapolate = null;
        String parcelPoint = null;
        api.occupantsAddressesOutputFormatGet(outputFormat, addressString, tags, locationDescriptor, maxResults, interpolation, echo, brief, autoComplete, setBack, outputSRS, minScore, matchPrecision, matchPrecisionNot, siteName, unitDesignator, unitNumber, unitNumberSuffix, civicNumber, civicNumberSuffix, streetName, streetType, streetDirection, streetQualifier, localityName, provinceCode, localities, notLocalities, bbox, centre, maxDistance, extrapolate, parcelPoint);
        // TODO: test validations
    }

    /**
     * Find occupants of sites near to a geographic point
     *
     * Represents occupants near a given point in order of closest to farthest
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void occupantsNearOutputFormatGetTest() throws ApiException {
        String outputFormat = null;
        String point = null;
        String tags = null;
        Integer maxDistance = null;
        Integer outputSRS = null;
        Integer maxResults = null;
        String locationDescriptor = null;
        Boolean brief = null;
        Integer setBack = null;
        api.occupantsNearOutputFormatGet(outputFormat, point, tags, maxDistance, outputSRS, maxResults, locationDescriptor, brief, setBack);
        // TODO: test validations
    }

    /**
     * Find occupants of the site nearest to a geographic point
     *
     * Represents the closest occupant to a given point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void occupantsNearestOutputFormatGetTest() throws ApiException {
        String outputFormat = null;
        String point = null;
        Integer maxDistance = null;
        String tags = null;
        Integer outputSRS = null;
        String locationDescriptor = null;
        Boolean brief = null;
        Integer setBack = null;
        api.occupantsNearestOutputFormatGet(outputFormat, point, maxDistance, tags, outputSRS, locationDescriptor, brief, setBack);
        // TODO: test validations
    }

    /**
     * Get an occupant (of a site) by its unique ID
     *
     * Represents an individual occupant
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void occupantsOccupantIDOutputFormatGetTest() throws ApiException {
        String occupantID = null;
        String outputFormat = null;
        Integer outputSRS = null;
        String locationDescriptor = null;
        Boolean brief = null;
        Integer setBack = null;
        api.occupantsOccupantIDOutputFormatGet(occupantID, outputFormat, outputSRS, locationDescriptor, brief, setBack);
        // TODO: test validations
    }

    /**
     * Find occupants of sites in a geographic area
     *
     * Represents all occupants within a given area
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void occupantsWithinOutputFormatGetTest() throws ApiException {
        String outputFormat = null;
        String bbox = null;
        String tags = null;
        Integer outputSRS = null;
        Integer maxResults = null;
        String locationDescriptor = null;
        Boolean brief = null;
        Integer setBack = null;
        api.occupantsWithinOutputFormatGet(outputFormat, bbox, tags, outputSRS, maxResults, locationDescriptor, brief, setBack);
        // TODO: test validations
    }

}
