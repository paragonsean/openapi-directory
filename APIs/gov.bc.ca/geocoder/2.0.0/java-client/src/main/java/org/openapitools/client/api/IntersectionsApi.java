/*
 * Geocoder REST API
 * This API represents address cleaning, correction, completion, geocoding, reverse geocoding, and proximity resources for intersection addresses, physical addresses and their occupants in British Columbia. Please read our [data collection notice](https://github.com/bcgov/api-specs/blob/master/COLLECTION_NOTICE.md#collection-notice).    Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.   [API keys](https://api.gov.bc.ca/devportal/api-directory/273) are unique and can be acquired with a GitHub or IDIR account.    **Notification:** If you have applications or web pages that link to the BC Address Geocoder you must use the following URL.    *https://geocoder.api.gov.bc.ca*    Please note that the following URLs were deprecated in September 2018 [More Details](https://www2.gov.bc.ca/gov/content?id=103ADC5A956842828554238DEF28D6E5).    - http://apps.gov.bc.ca/pub/geocoder   - https://apps.gov.bc.ca/pub/geocoder \\ \\  
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntersectionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IntersectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IntersectionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addressesOutputFormatGet_0
     * @param outputFormat Results format. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target&#x3D;\&quot;_blank\&quot;&gt;outputFormat&lt;/a&gt;.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS&#x3D;4326) (required)
     * @param addressString Civic or intersection address as a single string. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#addressString target&#x3D;\&quot;_blank\&quot;&gt;addressString&lt;/a&gt; (optional)
     * @param locationDescriptor Describes the nature of the address location. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#locationDescriptor target&#x3D;\&quot;_blank\&quot;&gt;locationDescriptor&lt;/a&gt; (optional, default to any)
     * @param maxResults The maximum number of search results to return. (optional, default to 1)
     * @param interpolation accessPoint interpolation method. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#interpolation target&#x3D;\&quot;_blank\&quot;&gt;interpolation&lt;/a&gt; (optional, default to adaptive)
     * @param echo If true, include unmatched address details such as site name in results. (optional, default to true)
     * @param brief If true, include only basic match and address details in results. Not supported for shp, csv, and gml formats. (optional, default to false)
     * @param autoComplete If true, addressString is expected to contain a partial address that requires completion. Not supported for shp, csv, gml formats. (optional, default to false)
     * @param setBack The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to 0)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param minScore The minimum score required for a match to be returned. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#minScore target&#x3D;\&quot;_blank\&quot;&gt;minScore&lt;/a&gt; (optional, default to 1)
     * @param matchPrecision Example: street,locality.  A comma separated list of individual match precision levels to include in results. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#matchPrecision target&#x3D;\&quot;_blank\&quot;&gt;matchPrecision&lt;/a&gt; (optional)
     * @param matchPrecisionNot Example: street,locality.  A comma separated list of individual match precision levels to exclude from results. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#matchPrecisionNot target&#x3D;\&quot;_blank\&quot;&gt;matchPrecisionNot&lt;/a&gt; (optional)
     * @param siteName A string containing the name of the building, facility, or institution (e.g., Duck Building, Casa Del Mar, Crystal Garden, Bluebird House).See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#siteName target&#x3D;\&quot;_blank\&quot;&gt;siteName&lt;/a&gt; (optional)
     * @param unitDesignator The type of unit within a house or building. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#unitDesignator target&#x3D;\&quot;_blank\&quot;&gt;unitDesignator&lt;/a&gt; (optional)
     * @param unitNumber The number of the unit, suite, or apartment within a house or building. (optional)
     * @param unitNumberSuffix A letter that follows the unit number as in Unit 1A or Suite 302B. (optional)
     * @param civicNumber The official number assigned to a site by an address authority. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#civicNumber target&#x3D;\&quot;_blank\&quot;&gt;civicNumber&lt;/a&gt; (optional)
     * @param civicNumberSuffix A letter or fraction that follows the civic number (e.g., the A in 1039A Bledsoe St). See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#civicNumberSuffix target&#x3D;\&quot;_blank\&quot;&gt;civicNumberSuffix&lt;/a&gt; (optional)
     * @param streetName The official name of the street as assigned by an address authority (e.g., the Douglas in 1175 Douglas Street). See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetName target&#x3D;\&quot;_blank\&quot;&gt;streetName&lt;/a&gt; (optional)
     * @param streetType The type of street as assigned by a municipality (e.g., the ST in 1175 DOUGLAS St). See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetType target&#x3D;\&quot;_blank\&quot;&gt;streetType&lt;/a&gt; (optional)
     * @param streetDirection The abbreviated compass direction as defined by Canada Post and B.C. civic addressing authorities. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetDirection target&#x3D;\&quot;_blank\&quot;&gt;streetDirection&lt;/a&gt; (optional)
     * @param streetQualifier Example: the Bridge in Johnson St Bridge. The qualifier of a street name. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetQualifier target&#x3D;\&quot;_blank\&quot;&gt;streetQualifier&lt;/a&gt; (optional)
     * @param localityName The name of the locality assigned to a given site by an address authority. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#localityName target&#x3D;\&quot;_blank\&quot;&gt;localityName&lt;/a&gt; (optional)
     * @param provinceCode The ISO 3166-2 Sub-Country Code. The code for British Columbia is BC. (optional, default to BC)
     * @param localities A comma separated list of locality names that matched addresses must belong to. For example, setting localities to Nanaimo only returns addresses in Nanaimo (optional)
     * @param notLocalities A comma-separated list of localities to exclude from the search. (optional)
     * @param bbox Example: -126.07929,49.7628,-126.0163,49.7907.  A bounding box (xmin,ymin,xmax,ymax) that limits the search area. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#bbox target&#x3D;\&quot;_blank\&quot;&gt;bbox&lt;/a&gt; (optional)
     * @param centre Example: -124.0165926,49.2296251 .  The coordinates of a centre point (x,y) used to define a bounding circle that will limit the search area. This parameter must be specified together with &#39;maxDistance&#39;. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#centre target&#x3D;&#39;_blank&#39;&gt;centre&lt;/a&gt; (optional)
     * @param maxDistance The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited. (optional)
     * @param extrapolate If true, uses supplied parcelPoint to derive an appropriate accessPoint.           See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#extrapolate target&#x3D;\&quot;_blank\&quot;&gt;extrapolate&lt;/a&gt; (optional)
     * @param parcelPoint The coordinates of a point (x,y) known to be inside the parcel containing a given address. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#parcelPoint target&#x3D;\&quot;_blank\&quot;&gt;parcelPoint&lt;/a&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of matching sites or intersections and their physical locations. See &lt;a href&#x3D;&#39;https://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md#resource-representations-in-http-responses&#39; target&#x3D;\&quot;_blank\&quot;&gt;addresses response&lt;/a&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addressesOutputFormatGet_0Call(String outputFormat, String addressString, String locationDescriptor, Integer maxResults, String interpolation, Boolean echo, Boolean brief, Boolean autoComplete, Integer setBack, Integer outputSRS, Integer minScore, String matchPrecision, String matchPrecisionNot, String siteName, String unitDesignator, String unitNumber, String unitNumberSuffix, String civicNumber, String civicNumberSuffix, String streetName, String streetType, String streetDirection, String streetQualifier, String localityName, String provinceCode, String localities, String notLocalities, String bbox, String centre, BigDecimal maxDistance, Boolean extrapolate, String parcelPoint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/addresses.{outputFormat}"
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addressString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addressString", addressString));
        }

        if (locationDescriptor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationDescriptor", locationDescriptor));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (interpolation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interpolation", interpolation));
        }

        if (echo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("echo", echo));
        }

        if (brief != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("brief", brief));
        }

        if (autoComplete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("autoComplete", autoComplete));
        }

        if (setBack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("setBack", setBack));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (minScore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minScore", minScore));
        }

        if (matchPrecision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("matchPrecision", matchPrecision));
        }

        if (matchPrecisionNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("matchPrecisionNot", matchPrecisionNot));
        }

        if (siteName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteName", siteName));
        }

        if (unitDesignator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitDesignator", unitDesignator));
        }

        if (unitNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitNumber", unitNumber));
        }

        if (unitNumberSuffix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unitNumberSuffix", unitNumberSuffix));
        }

        if (civicNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("civicNumber", civicNumber));
        }

        if (civicNumberSuffix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("civicNumberSuffix", civicNumberSuffix));
        }

        if (streetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("streetName", streetName));
        }

        if (streetType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("streetType", streetType));
        }

        if (streetDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("streetDirection", streetDirection));
        }

        if (streetQualifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("streetQualifier", streetQualifier));
        }

        if (localityName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("localityName", localityName));
        }

        if (provinceCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provinceCode", provinceCode));
        }

        if (localities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("localities", localities));
        }

        if (notLocalities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notLocalities", notLocalities));
        }

        if (bbox != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bbox", bbox));
        }

        if (centre != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("centre", centre));
        }

        if (maxDistance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxDistance", maxDistance));
        }

        if (extrapolate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extrapolate", extrapolate));
        }

        if (parcelPoint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parcelPoint", parcelPoint));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addressesOutputFormatGet_0ValidateBeforeCall(String outputFormat, String addressString, String locationDescriptor, Integer maxResults, String interpolation, Boolean echo, Boolean brief, Boolean autoComplete, Integer setBack, Integer outputSRS, Integer minScore, String matchPrecision, String matchPrecisionNot, String siteName, String unitDesignator, String unitNumber, String unitNumberSuffix, String civicNumber, String civicNumberSuffix, String streetName, String streetType, String streetDirection, String streetQualifier, String localityName, String provinceCode, String localities, String notLocalities, String bbox, String centre, BigDecimal maxDistance, Boolean extrapolate, String parcelPoint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling addressesOutputFormatGet_0(Async)");
        }

        return addressesOutputFormatGet_0Call(outputFormat, addressString, locationDescriptor, maxResults, interpolation, echo, brief, autoComplete, setBack, outputSRS, minScore, matchPrecision, matchPrecisionNot, siteName, unitDesignator, unitNumber, unitNumberSuffix, civicNumber, civicNumberSuffix, streetName, streetType, streetDirection, streetQualifier, localityName, provinceCode, localities, notLocalities, bbox, centre, maxDistance, extrapolate, parcelPoint, _callback);

    }

    /**
     * Geocode an address
     * Represents the set of geocoded and standardized sites and intersections whose address best matches a given query address.
     * @param outputFormat Results format. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target&#x3D;\&quot;_blank\&quot;&gt;outputFormat&lt;/a&gt;.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS&#x3D;4326) (required)
     * @param addressString Civic or intersection address as a single string. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#addressString target&#x3D;\&quot;_blank\&quot;&gt;addressString&lt;/a&gt; (optional)
     * @param locationDescriptor Describes the nature of the address location. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#locationDescriptor target&#x3D;\&quot;_blank\&quot;&gt;locationDescriptor&lt;/a&gt; (optional, default to any)
     * @param maxResults The maximum number of search results to return. (optional, default to 1)
     * @param interpolation accessPoint interpolation method. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#interpolation target&#x3D;\&quot;_blank\&quot;&gt;interpolation&lt;/a&gt; (optional, default to adaptive)
     * @param echo If true, include unmatched address details such as site name in results. (optional, default to true)
     * @param brief If true, include only basic match and address details in results. Not supported for shp, csv, and gml formats. (optional, default to false)
     * @param autoComplete If true, addressString is expected to contain a partial address that requires completion. Not supported for shp, csv, gml formats. (optional, default to false)
     * @param setBack The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to 0)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param minScore The minimum score required for a match to be returned. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#minScore target&#x3D;\&quot;_blank\&quot;&gt;minScore&lt;/a&gt; (optional, default to 1)
     * @param matchPrecision Example: street,locality.  A comma separated list of individual match precision levels to include in results. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#matchPrecision target&#x3D;\&quot;_blank\&quot;&gt;matchPrecision&lt;/a&gt; (optional)
     * @param matchPrecisionNot Example: street,locality.  A comma separated list of individual match precision levels to exclude from results. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#matchPrecisionNot target&#x3D;\&quot;_blank\&quot;&gt;matchPrecisionNot&lt;/a&gt; (optional)
     * @param siteName A string containing the name of the building, facility, or institution (e.g., Duck Building, Casa Del Mar, Crystal Garden, Bluebird House).See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#siteName target&#x3D;\&quot;_blank\&quot;&gt;siteName&lt;/a&gt; (optional)
     * @param unitDesignator The type of unit within a house or building. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#unitDesignator target&#x3D;\&quot;_blank\&quot;&gt;unitDesignator&lt;/a&gt; (optional)
     * @param unitNumber The number of the unit, suite, or apartment within a house or building. (optional)
     * @param unitNumberSuffix A letter that follows the unit number as in Unit 1A or Suite 302B. (optional)
     * @param civicNumber The official number assigned to a site by an address authority. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#civicNumber target&#x3D;\&quot;_blank\&quot;&gt;civicNumber&lt;/a&gt; (optional)
     * @param civicNumberSuffix A letter or fraction that follows the civic number (e.g., the A in 1039A Bledsoe St). See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#civicNumberSuffix target&#x3D;\&quot;_blank\&quot;&gt;civicNumberSuffix&lt;/a&gt; (optional)
     * @param streetName The official name of the street as assigned by an address authority (e.g., the Douglas in 1175 Douglas Street). See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetName target&#x3D;\&quot;_blank\&quot;&gt;streetName&lt;/a&gt; (optional)
     * @param streetType The type of street as assigned by a municipality (e.g., the ST in 1175 DOUGLAS St). See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetType target&#x3D;\&quot;_blank\&quot;&gt;streetType&lt;/a&gt; (optional)
     * @param streetDirection The abbreviated compass direction as defined by Canada Post and B.C. civic addressing authorities. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetDirection target&#x3D;\&quot;_blank\&quot;&gt;streetDirection&lt;/a&gt; (optional)
     * @param streetQualifier Example: the Bridge in Johnson St Bridge. The qualifier of a street name. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetQualifier target&#x3D;\&quot;_blank\&quot;&gt;streetQualifier&lt;/a&gt; (optional)
     * @param localityName The name of the locality assigned to a given site by an address authority. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#localityName target&#x3D;\&quot;_blank\&quot;&gt;localityName&lt;/a&gt; (optional)
     * @param provinceCode The ISO 3166-2 Sub-Country Code. The code for British Columbia is BC. (optional, default to BC)
     * @param localities A comma separated list of locality names that matched addresses must belong to. For example, setting localities to Nanaimo only returns addresses in Nanaimo (optional)
     * @param notLocalities A comma-separated list of localities to exclude from the search. (optional)
     * @param bbox Example: -126.07929,49.7628,-126.0163,49.7907.  A bounding box (xmin,ymin,xmax,ymax) that limits the search area. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#bbox target&#x3D;\&quot;_blank\&quot;&gt;bbox&lt;/a&gt; (optional)
     * @param centre Example: -124.0165926,49.2296251 .  The coordinates of a centre point (x,y) used to define a bounding circle that will limit the search area. This parameter must be specified together with &#39;maxDistance&#39;. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#centre target&#x3D;&#39;_blank&#39;&gt;centre&lt;/a&gt; (optional)
     * @param maxDistance The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited. (optional)
     * @param extrapolate If true, uses supplied parcelPoint to derive an appropriate accessPoint.           See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#extrapolate target&#x3D;\&quot;_blank\&quot;&gt;extrapolate&lt;/a&gt; (optional)
     * @param parcelPoint The coordinates of a point (x,y) known to be inside the parcel containing a given address. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#parcelPoint target&#x3D;\&quot;_blank\&quot;&gt;parcelPoint&lt;/a&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of matching sites or intersections and their physical locations. See &lt;a href&#x3D;&#39;https://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md#resource-representations-in-http-responses&#39; target&#x3D;\&quot;_blank\&quot;&gt;addresses response&lt;/a&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void addressesOutputFormatGet_0(String outputFormat, String addressString, String locationDescriptor, Integer maxResults, String interpolation, Boolean echo, Boolean brief, Boolean autoComplete, Integer setBack, Integer outputSRS, Integer minScore, String matchPrecision, String matchPrecisionNot, String siteName, String unitDesignator, String unitNumber, String unitNumberSuffix, String civicNumber, String civicNumberSuffix, String streetName, String streetType, String streetDirection, String streetQualifier, String localityName, String provinceCode, String localities, String notLocalities, String bbox, String centre, BigDecimal maxDistance, Boolean extrapolate, String parcelPoint) throws ApiException {
        addressesOutputFormatGet_0WithHttpInfo(outputFormat, addressString, locationDescriptor, maxResults, interpolation, echo, brief, autoComplete, setBack, outputSRS, minScore, matchPrecision, matchPrecisionNot, siteName, unitDesignator, unitNumber, unitNumberSuffix, civicNumber, civicNumberSuffix, streetName, streetType, streetDirection, streetQualifier, localityName, provinceCode, localities, notLocalities, bbox, centre, maxDistance, extrapolate, parcelPoint);
    }

    /**
     * Geocode an address
     * Represents the set of geocoded and standardized sites and intersections whose address best matches a given query address.
     * @param outputFormat Results format. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target&#x3D;\&quot;_blank\&quot;&gt;outputFormat&lt;/a&gt;.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS&#x3D;4326) (required)
     * @param addressString Civic or intersection address as a single string. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#addressString target&#x3D;\&quot;_blank\&quot;&gt;addressString&lt;/a&gt; (optional)
     * @param locationDescriptor Describes the nature of the address location. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#locationDescriptor target&#x3D;\&quot;_blank\&quot;&gt;locationDescriptor&lt;/a&gt; (optional, default to any)
     * @param maxResults The maximum number of search results to return. (optional, default to 1)
     * @param interpolation accessPoint interpolation method. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#interpolation target&#x3D;\&quot;_blank\&quot;&gt;interpolation&lt;/a&gt; (optional, default to adaptive)
     * @param echo If true, include unmatched address details such as site name in results. (optional, default to true)
     * @param brief If true, include only basic match and address details in results. Not supported for shp, csv, and gml formats. (optional, default to false)
     * @param autoComplete If true, addressString is expected to contain a partial address that requires completion. Not supported for shp, csv, gml formats. (optional, default to false)
     * @param setBack The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to 0)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param minScore The minimum score required for a match to be returned. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#minScore target&#x3D;\&quot;_blank\&quot;&gt;minScore&lt;/a&gt; (optional, default to 1)
     * @param matchPrecision Example: street,locality.  A comma separated list of individual match precision levels to include in results. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#matchPrecision target&#x3D;\&quot;_blank\&quot;&gt;matchPrecision&lt;/a&gt; (optional)
     * @param matchPrecisionNot Example: street,locality.  A comma separated list of individual match precision levels to exclude from results. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#matchPrecisionNot target&#x3D;\&quot;_blank\&quot;&gt;matchPrecisionNot&lt;/a&gt; (optional)
     * @param siteName A string containing the name of the building, facility, or institution (e.g., Duck Building, Casa Del Mar, Crystal Garden, Bluebird House).See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#siteName target&#x3D;\&quot;_blank\&quot;&gt;siteName&lt;/a&gt; (optional)
     * @param unitDesignator The type of unit within a house or building. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#unitDesignator target&#x3D;\&quot;_blank\&quot;&gt;unitDesignator&lt;/a&gt; (optional)
     * @param unitNumber The number of the unit, suite, or apartment within a house or building. (optional)
     * @param unitNumberSuffix A letter that follows the unit number as in Unit 1A or Suite 302B. (optional)
     * @param civicNumber The official number assigned to a site by an address authority. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#civicNumber target&#x3D;\&quot;_blank\&quot;&gt;civicNumber&lt;/a&gt; (optional)
     * @param civicNumberSuffix A letter or fraction that follows the civic number (e.g., the A in 1039A Bledsoe St). See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#civicNumberSuffix target&#x3D;\&quot;_blank\&quot;&gt;civicNumberSuffix&lt;/a&gt; (optional)
     * @param streetName The official name of the street as assigned by an address authority (e.g., the Douglas in 1175 Douglas Street). See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetName target&#x3D;\&quot;_blank\&quot;&gt;streetName&lt;/a&gt; (optional)
     * @param streetType The type of street as assigned by a municipality (e.g., the ST in 1175 DOUGLAS St). See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetType target&#x3D;\&quot;_blank\&quot;&gt;streetType&lt;/a&gt; (optional)
     * @param streetDirection The abbreviated compass direction as defined by Canada Post and B.C. civic addressing authorities. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetDirection target&#x3D;\&quot;_blank\&quot;&gt;streetDirection&lt;/a&gt; (optional)
     * @param streetQualifier Example: the Bridge in Johnson St Bridge. The qualifier of a street name. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetQualifier target&#x3D;\&quot;_blank\&quot;&gt;streetQualifier&lt;/a&gt; (optional)
     * @param localityName The name of the locality assigned to a given site by an address authority. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#localityName target&#x3D;\&quot;_blank\&quot;&gt;localityName&lt;/a&gt; (optional)
     * @param provinceCode The ISO 3166-2 Sub-Country Code. The code for British Columbia is BC. (optional, default to BC)
     * @param localities A comma separated list of locality names that matched addresses must belong to. For example, setting localities to Nanaimo only returns addresses in Nanaimo (optional)
     * @param notLocalities A comma-separated list of localities to exclude from the search. (optional)
     * @param bbox Example: -126.07929,49.7628,-126.0163,49.7907.  A bounding box (xmin,ymin,xmax,ymax) that limits the search area. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#bbox target&#x3D;\&quot;_blank\&quot;&gt;bbox&lt;/a&gt; (optional)
     * @param centre Example: -124.0165926,49.2296251 .  The coordinates of a centre point (x,y) used to define a bounding circle that will limit the search area. This parameter must be specified together with &#39;maxDistance&#39;. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#centre target&#x3D;&#39;_blank&#39;&gt;centre&lt;/a&gt; (optional)
     * @param maxDistance The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited. (optional)
     * @param extrapolate If true, uses supplied parcelPoint to derive an appropriate accessPoint.           See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#extrapolate target&#x3D;\&quot;_blank\&quot;&gt;extrapolate&lt;/a&gt; (optional)
     * @param parcelPoint The coordinates of a point (x,y) known to be inside the parcel containing a given address. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#parcelPoint target&#x3D;\&quot;_blank\&quot;&gt;parcelPoint&lt;/a&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of matching sites or intersections and their physical locations. See &lt;a href&#x3D;&#39;https://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md#resource-representations-in-http-responses&#39; target&#x3D;\&quot;_blank\&quot;&gt;addresses response&lt;/a&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addressesOutputFormatGet_0WithHttpInfo(String outputFormat, String addressString, String locationDescriptor, Integer maxResults, String interpolation, Boolean echo, Boolean brief, Boolean autoComplete, Integer setBack, Integer outputSRS, Integer minScore, String matchPrecision, String matchPrecisionNot, String siteName, String unitDesignator, String unitNumber, String unitNumberSuffix, String civicNumber, String civicNumberSuffix, String streetName, String streetType, String streetDirection, String streetQualifier, String localityName, String provinceCode, String localities, String notLocalities, String bbox, String centre, BigDecimal maxDistance, Boolean extrapolate, String parcelPoint) throws ApiException {
        okhttp3.Call localVarCall = addressesOutputFormatGet_0ValidateBeforeCall(outputFormat, addressString, locationDescriptor, maxResults, interpolation, echo, brief, autoComplete, setBack, outputSRS, minScore, matchPrecision, matchPrecisionNot, siteName, unitDesignator, unitNumber, unitNumberSuffix, civicNumber, civicNumberSuffix, streetName, streetType, streetDirection, streetQualifier, localityName, provinceCode, localities, notLocalities, bbox, centre, maxDistance, extrapolate, parcelPoint, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Geocode an address (asynchronously)
     * Represents the set of geocoded and standardized sites and intersections whose address best matches a given query address.
     * @param outputFormat Results format. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target&#x3D;\&quot;_blank\&quot;&gt;outputFormat&lt;/a&gt;.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS&#x3D;4326) (required)
     * @param addressString Civic or intersection address as a single string. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#addressString target&#x3D;\&quot;_blank\&quot;&gt;addressString&lt;/a&gt; (optional)
     * @param locationDescriptor Describes the nature of the address location. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#locationDescriptor target&#x3D;\&quot;_blank\&quot;&gt;locationDescriptor&lt;/a&gt; (optional, default to any)
     * @param maxResults The maximum number of search results to return. (optional, default to 1)
     * @param interpolation accessPoint interpolation method. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#interpolation target&#x3D;\&quot;_blank\&quot;&gt;interpolation&lt;/a&gt; (optional, default to adaptive)
     * @param echo If true, include unmatched address details such as site name in results. (optional, default to true)
     * @param brief If true, include only basic match and address details in results. Not supported for shp, csv, and gml formats. (optional, default to false)
     * @param autoComplete If true, addressString is expected to contain a partial address that requires completion. Not supported for shp, csv, gml formats. (optional, default to false)
     * @param setBack The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to 0)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param minScore The minimum score required for a match to be returned. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#minScore target&#x3D;\&quot;_blank\&quot;&gt;minScore&lt;/a&gt; (optional, default to 1)
     * @param matchPrecision Example: street,locality.  A comma separated list of individual match precision levels to include in results. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#matchPrecision target&#x3D;\&quot;_blank\&quot;&gt;matchPrecision&lt;/a&gt; (optional)
     * @param matchPrecisionNot Example: street,locality.  A comma separated list of individual match precision levels to exclude from results. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#matchPrecisionNot target&#x3D;\&quot;_blank\&quot;&gt;matchPrecisionNot&lt;/a&gt; (optional)
     * @param siteName A string containing the name of the building, facility, or institution (e.g., Duck Building, Casa Del Mar, Crystal Garden, Bluebird House).See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#siteName target&#x3D;\&quot;_blank\&quot;&gt;siteName&lt;/a&gt; (optional)
     * @param unitDesignator The type of unit within a house or building. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#unitDesignator target&#x3D;\&quot;_blank\&quot;&gt;unitDesignator&lt;/a&gt; (optional)
     * @param unitNumber The number of the unit, suite, or apartment within a house or building. (optional)
     * @param unitNumberSuffix A letter that follows the unit number as in Unit 1A or Suite 302B. (optional)
     * @param civicNumber The official number assigned to a site by an address authority. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#civicNumber target&#x3D;\&quot;_blank\&quot;&gt;civicNumber&lt;/a&gt; (optional)
     * @param civicNumberSuffix A letter or fraction that follows the civic number (e.g., the A in 1039A Bledsoe St). See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#civicNumberSuffix target&#x3D;\&quot;_blank\&quot;&gt;civicNumberSuffix&lt;/a&gt; (optional)
     * @param streetName The official name of the street as assigned by an address authority (e.g., the Douglas in 1175 Douglas Street). See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetName target&#x3D;\&quot;_blank\&quot;&gt;streetName&lt;/a&gt; (optional)
     * @param streetType The type of street as assigned by a municipality (e.g., the ST in 1175 DOUGLAS St). See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetType target&#x3D;\&quot;_blank\&quot;&gt;streetType&lt;/a&gt; (optional)
     * @param streetDirection The abbreviated compass direction as defined by Canada Post and B.C. civic addressing authorities. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetDirection target&#x3D;\&quot;_blank\&quot;&gt;streetDirection&lt;/a&gt; (optional)
     * @param streetQualifier Example: the Bridge in Johnson St Bridge. The qualifier of a street name. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetQualifier target&#x3D;\&quot;_blank\&quot;&gt;streetQualifier&lt;/a&gt; (optional)
     * @param localityName The name of the locality assigned to a given site by an address authority. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#localityName target&#x3D;\&quot;_blank\&quot;&gt;localityName&lt;/a&gt; (optional)
     * @param provinceCode The ISO 3166-2 Sub-Country Code. The code for British Columbia is BC. (optional, default to BC)
     * @param localities A comma separated list of locality names that matched addresses must belong to. For example, setting localities to Nanaimo only returns addresses in Nanaimo (optional)
     * @param notLocalities A comma-separated list of localities to exclude from the search. (optional)
     * @param bbox Example: -126.07929,49.7628,-126.0163,49.7907.  A bounding box (xmin,ymin,xmax,ymax) that limits the search area. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#bbox target&#x3D;\&quot;_blank\&quot;&gt;bbox&lt;/a&gt; (optional)
     * @param centre Example: -124.0165926,49.2296251 .  The coordinates of a centre point (x,y) used to define a bounding circle that will limit the search area. This parameter must be specified together with &#39;maxDistance&#39;. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#centre target&#x3D;&#39;_blank&#39;&gt;centre&lt;/a&gt; (optional)
     * @param maxDistance The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited. (optional)
     * @param extrapolate If true, uses supplied parcelPoint to derive an appropriate accessPoint.           See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#extrapolate target&#x3D;\&quot;_blank\&quot;&gt;extrapolate&lt;/a&gt; (optional)
     * @param parcelPoint The coordinates of a point (x,y) known to be inside the parcel containing a given address. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#parcelPoint target&#x3D;\&quot;_blank\&quot;&gt;parcelPoint&lt;/a&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of matching sites or intersections and their physical locations. See &lt;a href&#x3D;&#39;https://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md#resource-representations-in-http-responses&#39; target&#x3D;\&quot;_blank\&quot;&gt;addresses response&lt;/a&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addressesOutputFormatGet_0Async(String outputFormat, String addressString, String locationDescriptor, Integer maxResults, String interpolation, Boolean echo, Boolean brief, Boolean autoComplete, Integer setBack, Integer outputSRS, Integer minScore, String matchPrecision, String matchPrecisionNot, String siteName, String unitDesignator, String unitNumber, String unitNumberSuffix, String civicNumber, String civicNumberSuffix, String streetName, String streetType, String streetDirection, String streetQualifier, String localityName, String provinceCode, String localities, String notLocalities, String bbox, String centre, BigDecimal maxDistance, Boolean extrapolate, String parcelPoint, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addressesOutputFormatGet_0ValidateBeforeCall(outputFormat, addressString, locationDescriptor, maxResults, interpolation, echo, brief, autoComplete, setBack, outputSRS, minScore, matchPrecision, matchPrecisionNot, siteName, unitDesignator, unitNumber, unitNumberSuffix, civicNumber, civicNumberSuffix, streetName, streetType, streetDirection, streetQualifier, localityName, provinceCode, localities, notLocalities, bbox, centre, maxDistance, extrapolate, parcelPoint, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for intersectionsIntersectionIDOutputFormatGet
     * @param intersectionID A unique intersection identifier (required)
     * @param outputFormat Results format. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target&#x3D;\&quot;_blank\&quot;&gt;outputFormat&lt;/a&gt;.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS&#x3D;4326) (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Intersection with the requested intersectionID in &lt;a href&#x3D;\&quot;https://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md#intersection-address-representation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Intersection Address Representation&lt;/a&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call intersectionsIntersectionIDOutputFormatGetCall(String intersectionID, String outputFormat, Integer outputSRS, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/intersections/{intersectionID}.{outputFormat}"
            .replace("{" + "intersectionID" + "}", localVarApiClient.escapeString(intersectionID.toString()))
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call intersectionsIntersectionIDOutputFormatGetValidateBeforeCall(String intersectionID, String outputFormat, Integer outputSRS, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'intersectionID' is set
        if (intersectionID == null) {
            throw new ApiException("Missing the required parameter 'intersectionID' when calling intersectionsIntersectionIDOutputFormatGet(Async)");
        }

        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling intersectionsIntersectionIDOutputFormatGet(Async)");
        }

        return intersectionsIntersectionIDOutputFormatGetCall(intersectionID, outputFormat, outputSRS, _callback);

    }

    /**
     * Get an intersection by its unique ID
     * Represents a individual intersection
     * @param intersectionID A unique intersection identifier (required)
     * @param outputFormat Results format. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target&#x3D;\&quot;_blank\&quot;&gt;outputFormat&lt;/a&gt;.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS&#x3D;4326) (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Intersection with the requested intersectionID in &lt;a href&#x3D;\&quot;https://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md#intersection-address-representation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Intersection Address Representation&lt;/a&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void intersectionsIntersectionIDOutputFormatGet(String intersectionID, String outputFormat, Integer outputSRS) throws ApiException {
        intersectionsIntersectionIDOutputFormatGetWithHttpInfo(intersectionID, outputFormat, outputSRS);
    }

    /**
     * Get an intersection by its unique ID
     * Represents a individual intersection
     * @param intersectionID A unique intersection identifier (required)
     * @param outputFormat Results format. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target&#x3D;\&quot;_blank\&quot;&gt;outputFormat&lt;/a&gt;.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS&#x3D;4326) (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Intersection with the requested intersectionID in &lt;a href&#x3D;\&quot;https://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md#intersection-address-representation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Intersection Address Representation&lt;/a&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> intersectionsIntersectionIDOutputFormatGetWithHttpInfo(String intersectionID, String outputFormat, Integer outputSRS) throws ApiException {
        okhttp3.Call localVarCall = intersectionsIntersectionIDOutputFormatGetValidateBeforeCall(intersectionID, outputFormat, outputSRS, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get an intersection by its unique ID (asynchronously)
     * Represents a individual intersection
     * @param intersectionID A unique intersection identifier (required)
     * @param outputFormat Results format. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target&#x3D;\&quot;_blank\&quot;&gt;outputFormat&lt;/a&gt;.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS&#x3D;4326) (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Intersection with the requested intersectionID in &lt;a href&#x3D;\&quot;https://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md#intersection-address-representation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Intersection Address Representation&lt;/a&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call intersectionsIntersectionIDOutputFormatGetAsync(String intersectionID, String outputFormat, Integer outputSRS, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = intersectionsIntersectionIDOutputFormatGetValidateBeforeCall(intersectionID, outputFormat, outputSRS, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for intersectionsNearOutputFormatGet
     * @param outputFormat Results format. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target&#x3D;\&quot;_blank\&quot;&gt;outputFormat&lt;/a&gt;.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS&#x3D;4326) (required)
     * @param point The point (x,y) from which the nearest site will be identified. The coordinates must be specified in the same SRS as given by the &#39;outputSRS&#39; parameter. (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (required)
     * @param maxDistance The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited. (optional)
     * @param maxResults The maximum number of search results to return. (optional, default to 1)
     * @param minDegree The minimum degree an intersection can have to be included in results. A dead-end has a degree of 1. (optional, default to 2)
     * @param maxDegree The maximum degree an interesection can have to be included in results. A four-way stop has a degree of 4. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of selected intersections near a given point. Each intersection is in &lt;a href&#x3D;\&quot;https://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md#intersection-address-representation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Intersection Address Representation&lt;/a&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call intersectionsNearOutputFormatGetCall(String outputFormat, String point, Integer outputSRS, Integer maxDistance, Integer maxResults, Integer minDegree, Integer maxDegree, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/intersections/near.{outputFormat}"
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (point != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("point", point));
        }

        if (maxDistance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxDistance", maxDistance));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (minDegree != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minDegree", minDegree));
        }

        if (maxDegree != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxDegree", maxDegree));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call intersectionsNearOutputFormatGetValidateBeforeCall(String outputFormat, String point, Integer outputSRS, Integer maxDistance, Integer maxResults, Integer minDegree, Integer maxDegree, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling intersectionsNearOutputFormatGet(Async)");
        }

        // verify the required parameter 'point' is set
        if (point == null) {
            throw new ApiException("Missing the required parameter 'point' when calling intersectionsNearOutputFormatGet(Async)");
        }

        // verify the required parameter 'outputSRS' is set
        if (outputSRS == null) {
            throw new ApiException("Missing the required parameter 'outputSRS' when calling intersectionsNearOutputFormatGet(Async)");
        }

        return intersectionsNearOutputFormatGetCall(outputFormat, point, outputSRS, maxDistance, maxResults, minDegree, maxDegree, _callback);

    }

    /**
     * Find intersections near to a geographic point
     * Represents intersections near a given point
     * @param outputFormat Results format. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target&#x3D;\&quot;_blank\&quot;&gt;outputFormat&lt;/a&gt;.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS&#x3D;4326) (required)
     * @param point The point (x,y) from which the nearest site will be identified. The coordinates must be specified in the same SRS as given by the &#39;outputSRS&#39; parameter. (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (required)
     * @param maxDistance The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited. (optional)
     * @param maxResults The maximum number of search results to return. (optional, default to 1)
     * @param minDegree The minimum degree an intersection can have to be included in results. A dead-end has a degree of 1. (optional, default to 2)
     * @param maxDegree The maximum degree an interesection can have to be included in results. A four-way stop has a degree of 4. (optional, default to 100)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of selected intersections near a given point. Each intersection is in &lt;a href&#x3D;\&quot;https://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md#intersection-address-representation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Intersection Address Representation&lt;/a&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void intersectionsNearOutputFormatGet(String outputFormat, String point, Integer outputSRS, Integer maxDistance, Integer maxResults, Integer minDegree, Integer maxDegree) throws ApiException {
        intersectionsNearOutputFormatGetWithHttpInfo(outputFormat, point, outputSRS, maxDistance, maxResults, minDegree, maxDegree);
    }

    /**
     * Find intersections near to a geographic point
     * Represents intersections near a given point
     * @param outputFormat Results format. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target&#x3D;\&quot;_blank\&quot;&gt;outputFormat&lt;/a&gt;.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS&#x3D;4326) (required)
     * @param point The point (x,y) from which the nearest site will be identified. The coordinates must be specified in the same SRS as given by the &#39;outputSRS&#39; parameter. (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (required)
     * @param maxDistance The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited. (optional)
     * @param maxResults The maximum number of search results to return. (optional, default to 1)
     * @param minDegree The minimum degree an intersection can have to be included in results. A dead-end has a degree of 1. (optional, default to 2)
     * @param maxDegree The maximum degree an interesection can have to be included in results. A four-way stop has a degree of 4. (optional, default to 100)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of selected intersections near a given point. Each intersection is in &lt;a href&#x3D;\&quot;https://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md#intersection-address-representation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Intersection Address Representation&lt;/a&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> intersectionsNearOutputFormatGetWithHttpInfo(String outputFormat, String point, Integer outputSRS, Integer maxDistance, Integer maxResults, Integer minDegree, Integer maxDegree) throws ApiException {
        okhttp3.Call localVarCall = intersectionsNearOutputFormatGetValidateBeforeCall(outputFormat, point, outputSRS, maxDistance, maxResults, minDegree, maxDegree, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Find intersections near to a geographic point (asynchronously)
     * Represents intersections near a given point
     * @param outputFormat Results format. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target&#x3D;\&quot;_blank\&quot;&gt;outputFormat&lt;/a&gt;.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS&#x3D;4326) (required)
     * @param point The point (x,y) from which the nearest site will be identified. The coordinates must be specified in the same SRS as given by the &#39;outputSRS&#39; parameter. (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (required)
     * @param maxDistance The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited. (optional)
     * @param maxResults The maximum number of search results to return. (optional, default to 1)
     * @param minDegree The minimum degree an intersection can have to be included in results. A dead-end has a degree of 1. (optional, default to 2)
     * @param maxDegree The maximum degree an interesection can have to be included in results. A four-way stop has a degree of 4. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of selected intersections near a given point. Each intersection is in &lt;a href&#x3D;\&quot;https://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md#intersection-address-representation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Intersection Address Representation&lt;/a&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call intersectionsNearOutputFormatGetAsync(String outputFormat, String point, Integer outputSRS, Integer maxDistance, Integer maxResults, Integer minDegree, Integer maxDegree, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = intersectionsNearOutputFormatGetValidateBeforeCall(outputFormat, point, outputSRS, maxDistance, maxResults, minDegree, maxDegree, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for intersectionsNearestOutputFormatGet
     * @param outputFormat Results format. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target&#x3D;\&quot;_blank\&quot;&gt;outputFormat&lt;/a&gt;.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS&#x3D;4326) (required)
     * @param point Example: -122.377,50.121  The point (x,y) from which the nearest site will be identified. The coordinates must be specified in the same SRS as given by the &#39;outputSRS&#39; parameter. (required)
     * @param maxDistance The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited. (optional)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param minDegree The minimum degree an intersection can have to be included in results. A dead-end has a degree of 1. (optional, default to 2)
     * @param maxDegree The maximum degree an interesection can have to be included in results. A four-way stop has a degree of 4. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The nearest intersection in &lt;a href&#x3D;\&quot;https://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md#intersection-address-representation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Intersection Address Representation&lt;/a&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call intersectionsNearestOutputFormatGetCall(String outputFormat, String point, Integer maxDistance, Integer outputSRS, Integer minDegree, Integer maxDegree, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/intersections/nearest.{outputFormat}"
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (point != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("point", point));
        }

        if (maxDistance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxDistance", maxDistance));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (minDegree != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minDegree", minDegree));
        }

        if (maxDegree != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxDegree", maxDegree));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call intersectionsNearestOutputFormatGetValidateBeforeCall(String outputFormat, String point, Integer maxDistance, Integer outputSRS, Integer minDegree, Integer maxDegree, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling intersectionsNearestOutputFormatGet(Async)");
        }

        // verify the required parameter 'point' is set
        if (point == null) {
            throw new ApiException("Missing the required parameter 'point' when calling intersectionsNearestOutputFormatGet(Async)");
        }

        return intersectionsNearestOutputFormatGetCall(outputFormat, point, maxDistance, outputSRS, minDegree, maxDegree, _callback);

    }

    /**
     * Find nearest intersection to a geographic point
     * Represents the closest intersection to a given point
     * @param outputFormat Results format. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target&#x3D;\&quot;_blank\&quot;&gt;outputFormat&lt;/a&gt;.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS&#x3D;4326) (required)
     * @param point Example: -122.377,50.121  The point (x,y) from which the nearest site will be identified. The coordinates must be specified in the same SRS as given by the &#39;outputSRS&#39; parameter. (required)
     * @param maxDistance The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited. (optional)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param minDegree The minimum degree an intersection can have to be included in results. A dead-end has a degree of 1. (optional, default to 2)
     * @param maxDegree The maximum degree an interesection can have to be included in results. A four-way stop has a degree of 4. (optional, default to 100)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The nearest intersection in &lt;a href&#x3D;\&quot;https://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md#intersection-address-representation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Intersection Address Representation&lt;/a&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void intersectionsNearestOutputFormatGet(String outputFormat, String point, Integer maxDistance, Integer outputSRS, Integer minDegree, Integer maxDegree) throws ApiException {
        intersectionsNearestOutputFormatGetWithHttpInfo(outputFormat, point, maxDistance, outputSRS, minDegree, maxDegree);
    }

    /**
     * Find nearest intersection to a geographic point
     * Represents the closest intersection to a given point
     * @param outputFormat Results format. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target&#x3D;\&quot;_blank\&quot;&gt;outputFormat&lt;/a&gt;.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS&#x3D;4326) (required)
     * @param point Example: -122.377,50.121  The point (x,y) from which the nearest site will be identified. The coordinates must be specified in the same SRS as given by the &#39;outputSRS&#39; parameter. (required)
     * @param maxDistance The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited. (optional)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param minDegree The minimum degree an intersection can have to be included in results. A dead-end has a degree of 1. (optional, default to 2)
     * @param maxDegree The maximum degree an interesection can have to be included in results. A four-way stop has a degree of 4. (optional, default to 100)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The nearest intersection in &lt;a href&#x3D;\&quot;https://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md#intersection-address-representation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Intersection Address Representation&lt;/a&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> intersectionsNearestOutputFormatGetWithHttpInfo(String outputFormat, String point, Integer maxDistance, Integer outputSRS, Integer minDegree, Integer maxDegree) throws ApiException {
        okhttp3.Call localVarCall = intersectionsNearestOutputFormatGetValidateBeforeCall(outputFormat, point, maxDistance, outputSRS, minDegree, maxDegree, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Find nearest intersection to a geographic point (asynchronously)
     * Represents the closest intersection to a given point
     * @param outputFormat Results format. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target&#x3D;\&quot;_blank\&quot;&gt;outputFormat&lt;/a&gt;.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS&#x3D;4326) (required)
     * @param point Example: -122.377,50.121  The point (x,y) from which the nearest site will be identified. The coordinates must be specified in the same SRS as given by the &#39;outputSRS&#39; parameter. (required)
     * @param maxDistance The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited. (optional)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param minDegree The minimum degree an intersection can have to be included in results. A dead-end has a degree of 1. (optional, default to 2)
     * @param maxDegree The maximum degree an interesection can have to be included in results. A four-way stop has a degree of 4. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The nearest intersection in &lt;a href&#x3D;\&quot;https://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md#intersection-address-representation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Intersection Address Representation&lt;/a&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call intersectionsNearestOutputFormatGetAsync(String outputFormat, String point, Integer maxDistance, Integer outputSRS, Integer minDegree, Integer maxDegree, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = intersectionsNearestOutputFormatGetValidateBeforeCall(outputFormat, point, maxDistance, outputSRS, minDegree, maxDegree, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for intersectionsWithinOutputFormatGet
     * @param outputFormat Results format. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target&#x3D;\&quot;_blank\&quot;&gt;outputFormat&lt;/a&gt;.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS&#x3D;4326) (required)
     * @param bbox A bounding box (xmin,ymin,xmax,ymax) used to limit the search area. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#bbox target&#x3D;\&quot;_blank\&quot;&gt;bbox&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param maxResults The maximum number of search results (optional, default to 200)
     * @param minDegree The minimum degree an intersection can have to be included in results. A dead-end has a degree of 1. (optional, default to 2)
     * @param maxDegree The maximum degree an interesection can have to be included in results. A four-way stop has a degree of 4. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of selected intersections within the given area. Each intersection is in Each intersection is in &lt;a href&#x3D;\&quot;https://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md#intersection-address-representation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Intersection Address Representation&lt;/a&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call intersectionsWithinOutputFormatGetCall(String outputFormat, String bbox, Integer outputSRS, Integer maxResults, Integer minDegree, Integer maxDegree, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/intersections/within.{outputFormat}"
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bbox != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bbox", bbox));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (minDegree != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minDegree", minDegree));
        }

        if (maxDegree != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxDegree", maxDegree));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call intersectionsWithinOutputFormatGetValidateBeforeCall(String outputFormat, String bbox, Integer outputSRS, Integer maxResults, Integer minDegree, Integer maxDegree, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling intersectionsWithinOutputFormatGet(Async)");
        }

        // verify the required parameter 'bbox' is set
        if (bbox == null) {
            throw new ApiException("Missing the required parameter 'bbox' when calling intersectionsWithinOutputFormatGet(Async)");
        }

        return intersectionsWithinOutputFormatGetCall(outputFormat, bbox, outputSRS, maxResults, minDegree, maxDegree, _callback);

    }

    /**
     * Find intersections in a geographic area
     * Represents all intersections within a given area
     * @param outputFormat Results format. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target&#x3D;\&quot;_blank\&quot;&gt;outputFormat&lt;/a&gt;.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS&#x3D;4326) (required)
     * @param bbox A bounding box (xmin,ymin,xmax,ymax) used to limit the search area. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#bbox target&#x3D;\&quot;_blank\&quot;&gt;bbox&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param maxResults The maximum number of search results (optional, default to 200)
     * @param minDegree The minimum degree an intersection can have to be included in results. A dead-end has a degree of 1. (optional, default to 2)
     * @param maxDegree The maximum degree an interesection can have to be included in results. A four-way stop has a degree of 4. (optional, default to 100)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of selected intersections within the given area. Each intersection is in Each intersection is in &lt;a href&#x3D;\&quot;https://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md#intersection-address-representation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Intersection Address Representation&lt;/a&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void intersectionsWithinOutputFormatGet(String outputFormat, String bbox, Integer outputSRS, Integer maxResults, Integer minDegree, Integer maxDegree) throws ApiException {
        intersectionsWithinOutputFormatGetWithHttpInfo(outputFormat, bbox, outputSRS, maxResults, minDegree, maxDegree);
    }

    /**
     * Find intersections in a geographic area
     * Represents all intersections within a given area
     * @param outputFormat Results format. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target&#x3D;\&quot;_blank\&quot;&gt;outputFormat&lt;/a&gt;.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS&#x3D;4326) (required)
     * @param bbox A bounding box (xmin,ymin,xmax,ymax) used to limit the search area. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#bbox target&#x3D;\&quot;_blank\&quot;&gt;bbox&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param maxResults The maximum number of search results (optional, default to 200)
     * @param minDegree The minimum degree an intersection can have to be included in results. A dead-end has a degree of 1. (optional, default to 2)
     * @param maxDegree The maximum degree an interesection can have to be included in results. A four-way stop has a degree of 4. (optional, default to 100)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of selected intersections within the given area. Each intersection is in Each intersection is in &lt;a href&#x3D;\&quot;https://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md#intersection-address-representation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Intersection Address Representation&lt;/a&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> intersectionsWithinOutputFormatGetWithHttpInfo(String outputFormat, String bbox, Integer outputSRS, Integer maxResults, Integer minDegree, Integer maxDegree) throws ApiException {
        okhttp3.Call localVarCall = intersectionsWithinOutputFormatGetValidateBeforeCall(outputFormat, bbox, outputSRS, maxResults, minDegree, maxDegree, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Find intersections in a geographic area (asynchronously)
     * Represents all intersections within a given area
     * @param outputFormat Results format. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target&#x3D;\&quot;_blank\&quot;&gt;outputFormat&lt;/a&gt;.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS&#x3D;4326) (required)
     * @param bbox A bounding box (xmin,ymin,xmax,ymax) used to limit the search area. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#bbox target&#x3D;\&quot;_blank\&quot;&gt;bbox&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param maxResults The maximum number of search results (optional, default to 200)
     * @param minDegree The minimum degree an intersection can have to be included in results. A dead-end has a degree of 1. (optional, default to 2)
     * @param maxDegree The maximum degree an interesection can have to be included in results. A four-way stop has a degree of 4. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of selected intersections within the given area. Each intersection is in Each intersection is in &lt;a href&#x3D;\&quot;https://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md#intersection-address-representation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Intersection Address Representation&lt;/a&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call intersectionsWithinOutputFormatGetAsync(String outputFormat, String bbox, Integer outputSRS, Integer maxResults, Integer minDegree, Integer maxDegree, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = intersectionsWithinOutputFormatGetValidateBeforeCall(outputFormat, bbox, outputSRS, maxResults, minDegree, maxDegree, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
