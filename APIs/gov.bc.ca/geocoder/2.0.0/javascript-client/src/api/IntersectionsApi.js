/**
 * Geocoder REST API
 * This API represents address cleaning, correction, completion, geocoding, reverse geocoding, and proximity resources for intersection addresses, physical addresses and their occupants in British Columbia. Please read our [data collection notice](https://github.com/bcgov/api-specs/blob/master/COLLECTION_NOTICE.md#collection-notice).    Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.   [API keys](https://api.gov.bc.ca/devportal/api-directory/273) are unique and can be acquired with a GitHub or IDIR account.    **Notification:** If you have applications or web pages that link to the BC Address Geocoder you must use the following URL.    *https://geocoder.api.gov.bc.ca*    Please note that the following URLs were deprecated in September 2018 [More Details](https://www2.gov.bc.ca/gov/content?id=103ADC5A956842828554238DEF28D6E5).    - http://apps.gov.bc.ca/pub/geocoder   - https://apps.gov.bc.ca/pub/geocoder \\ \\  
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Intersections service.
* @module api/IntersectionsApi
* @version 2.0.0
*/
export default class IntersectionsApi {

    /**
    * Constructs a new IntersectionsApi. 
    * @alias module:api/IntersectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addressesOutputFormatGet_0 operation.
     * @callback module:api/IntersectionsApi~addressesOutputFormatGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Geocode an address
     * Represents the set of geocoded and standardized sites and intersections whose address best matches a given query address.
     * @param {module:model/String} outputFormat Results format. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target=\"_blank\">outputFormat</a>.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS=4326)
     * @param {Object} opts Optional parameters
     * @param {String} [addressString] Civic or intersection address as a single string. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#addressString target=\"_blank\">addressString</a>
     * @param {module:model/String} [locationDescriptor = 'any')] Describes the nature of the address location. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#locationDescriptor target=\"_blank\">locationDescriptor</a>
     * @param {Number} [maxResults = 1)] The maximum number of search results to return.
     * @param {module:model/String} [interpolation = 'adaptive')] accessPoint interpolation method. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#interpolation target=\"_blank\">interpolation</a>
     * @param {Boolean} [echo = true)] If true, include unmatched address details such as site name in results.
     * @param {Boolean} [brief = false)] If true, include only basic match and address details in results. Not supported for shp, csv, and gml formats.
     * @param {Boolean} [autoComplete = false)] If true, addressString is expected to contain a partial address that requires completion. Not supported for shp, csv, gml formats.
     * @param {Number} [setBack = 0)] The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {Number} [minScore = 1)] The minimum score required for a match to be returned. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#minScore target=\"_blank\">minScore</a>
     * @param {String} [matchPrecision] Example: street,locality.  A comma separated list of individual match precision levels to include in results. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#matchPrecision target=\"_blank\">matchPrecision</a>
     * @param {String} [matchPrecisionNot] Example: street,locality.  A comma separated list of individual match precision levels to exclude from results. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#matchPrecisionNot target=\"_blank\">matchPrecisionNot</a>
     * @param {String} [siteName] A string containing the name of the building, facility, or institution (e.g., Duck Building, Casa Del Mar, Crystal Garden, Bluebird House).See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#siteName target=\"_blank\">siteName</a>
     * @param {module:model/String} [unitDesignator] The type of unit within a house or building. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#unitDesignator target=\"_blank\">unitDesignator</a>
     * @param {String} [unitNumber] The number of the unit, suite, or apartment within a house or building.
     * @param {String} [unitNumberSuffix] A letter that follows the unit number as in Unit 1A or Suite 302B.
     * @param {String} [civicNumber] The official number assigned to a site by an address authority. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#civicNumber target=\"_blank\">civicNumber</a>
     * @param {String} [civicNumberSuffix] A letter or fraction that follows the civic number (e.g., the A in 1039A Bledsoe St). See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#civicNumberSuffix target=\"_blank\">civicNumberSuffix</a>
     * @param {String} [streetName] The official name of the street as assigned by an address authority (e.g., the Douglas in 1175 Douglas Street). See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetName target=\"_blank\">streetName</a>
     * @param {String} [streetType] The type of street as assigned by a municipality (e.g., the ST in 1175 DOUGLAS St). See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetType target=\"_blank\">streetType</a>
     * @param {module:model/String} [streetDirection] The abbreviated compass direction as defined by Canada Post and B.C. civic addressing authorities. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetDirection target=\"_blank\">streetDirection</a>
     * @param {String} [streetQualifier] Example: the Bridge in Johnson St Bridge. The qualifier of a street name. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#streetQualifier target=\"_blank\">streetQualifier</a>
     * @param {String} [localityName] The name of the locality assigned to a given site by an address authority. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#localityName target=\"_blank\">localityName</a>
     * @param {String} [provinceCode = 'BC')] The ISO 3166-2 Sub-Country Code. The code for British Columbia is BC.
     * @param {String} [localities] A comma separated list of locality names that matched addresses must belong to. For example, setting localities to Nanaimo only returns addresses in Nanaimo
     * @param {String} [notLocalities] A comma-separated list of localities to exclude from the search.
     * @param {String} [bbox] Example: -126.07929,49.7628,-126.0163,49.7907.  A bounding box (xmin,ymin,xmax,ymax) that limits the search area. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#bbox target=\"_blank\">bbox</a>
     * @param {String} [centre] Example: -124.0165926,49.2296251 .  The coordinates of a centre point (x,y) used to define a bounding circle that will limit the search area. This parameter must be specified together with 'maxDistance'. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#centre target='_blank'>centre</a>
     * @param {Number} [maxDistance] The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited.
     * @param {Boolean} [extrapolate] If true, uses supplied parcelPoint to derive an appropriate accessPoint.           See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#extrapolate target=\"_blank\">extrapolate</a>
     * @param {String} [parcelPoint] The coordinates of a point (x,y) known to be inside the parcel containing a given address. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#parcelPoint target=\"_blank\">parcelPoint</a>
     * @param {module:api/IntersectionsApi~addressesOutputFormatGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    addressesOutputFormatGet_0(outputFormat, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling addressesOutputFormatGet_0");
      }

      let pathParams = {
        'outputFormat': outputFormat
      };
      let queryParams = {
        'addressString': opts['addressString'],
        'locationDescriptor': opts['locationDescriptor'],
        'maxResults': opts['maxResults'],
        'interpolation': opts['interpolation'],
        'echo': opts['echo'],
        'brief': opts['brief'],
        'autoComplete': opts['autoComplete'],
        'setBack': opts['setBack'],
        'outputSRS': opts['outputSRS'],
        'minScore': opts['minScore'],
        'matchPrecision': opts['matchPrecision'],
        'matchPrecisionNot': opts['matchPrecisionNot'],
        'siteName': opts['siteName'],
        'unitDesignator': opts['unitDesignator'],
        'unitNumber': opts['unitNumber'],
        'unitNumberSuffix': opts['unitNumberSuffix'],
        'civicNumber': opts['civicNumber'],
        'civicNumberSuffix': opts['civicNumberSuffix'],
        'streetName': opts['streetName'],
        'streetType': opts['streetType'],
        'streetDirection': opts['streetDirection'],
        'streetQualifier': opts['streetQualifier'],
        'localityName': opts['localityName'],
        'provinceCode': opts['provinceCode'],
        'localities': opts['localities'],
        'notLocalities': opts['notLocalities'],
        'bbox': opts['bbox'],
        'centre': opts['centre'],
        'maxDistance': opts['maxDistance'],
        'extrapolate': opts['extrapolate'],
        'parcelPoint': opts['parcelPoint']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/addresses.{outputFormat}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the intersectionsIntersectionIDOutputFormatGet operation.
     * @callback module:api/IntersectionsApi~intersectionsIntersectionIDOutputFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an intersection by its unique ID
     * Represents a individual intersection
     * @param {String} intersectionID A unique intersection identifier
     * @param {module:model/String} outputFormat Results format. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target=\"_blank\">outputFormat</a>.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS=4326)
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {module:api/IntersectionsApi~intersectionsIntersectionIDOutputFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    intersectionsIntersectionIDOutputFormatGet(intersectionID, outputFormat, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'intersectionID' is set
      if (intersectionID === undefined || intersectionID === null) {
        throw new Error("Missing the required parameter 'intersectionID' when calling intersectionsIntersectionIDOutputFormatGet");
      }
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling intersectionsIntersectionIDOutputFormatGet");
      }

      let pathParams = {
        'intersectionID': intersectionID,
        'outputFormat': outputFormat
      };
      let queryParams = {
        'outputSRS': opts['outputSRS']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/intersections/{intersectionID}.{outputFormat}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the intersectionsNearOutputFormatGet operation.
     * @callback module:api/IntersectionsApi~intersectionsNearOutputFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find intersections near to a geographic point
     * Represents intersections near a given point
     * @param {module:model/String} outputFormat Results format. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target=\"_blank\">outputFormat</a>.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS=4326)
     * @param {String} point The point (x,y) from which the nearest site will be identified. The coordinates must be specified in the same SRS as given by the 'outputSRS' parameter.
     * @param {module:model/Number} outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {Object} opts Optional parameters
     * @param {Number} [maxDistance] The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited.
     * @param {Number} [maxResults = 1)] The maximum number of search results to return.
     * @param {Number} [minDegree = 2)] The minimum degree an intersection can have to be included in results. A dead-end has a degree of 1.
     * @param {Number} [maxDegree = 100)] The maximum degree an interesection can have to be included in results. A four-way stop has a degree of 4.
     * @param {module:api/IntersectionsApi~intersectionsNearOutputFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    intersectionsNearOutputFormatGet(outputFormat, point, outputSRS, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling intersectionsNearOutputFormatGet");
      }
      // verify the required parameter 'point' is set
      if (point === undefined || point === null) {
        throw new Error("Missing the required parameter 'point' when calling intersectionsNearOutputFormatGet");
      }
      // verify the required parameter 'outputSRS' is set
      if (outputSRS === undefined || outputSRS === null) {
        throw new Error("Missing the required parameter 'outputSRS' when calling intersectionsNearOutputFormatGet");
      }

      let pathParams = {
        'outputFormat': outputFormat
      };
      let queryParams = {
        'point': point,
        'maxDistance': opts['maxDistance'],
        'outputSRS': outputSRS,
        'maxResults': opts['maxResults'],
        'minDegree': opts['minDegree'],
        'maxDegree': opts['maxDegree']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/intersections/near.{outputFormat}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the intersectionsNearestOutputFormatGet operation.
     * @callback module:api/IntersectionsApi~intersectionsNearestOutputFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find nearest intersection to a geographic point
     * Represents the closest intersection to a given point
     * @param {module:model/String} outputFormat Results format. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target=\"_blank\">outputFormat</a>.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS=4326)
     * @param {String} point Example: -122.377,50.121  The point (x,y) from which the nearest site will be identified. The coordinates must be specified in the same SRS as given by the 'outputSRS' parameter.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxDistance] The maximum distance (in metres) to search from the given point.  If not specified, the search distance is unlimited.
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {Number} [minDegree = 2)] The minimum degree an intersection can have to be included in results. A dead-end has a degree of 1.
     * @param {Number} [maxDegree = 100)] The maximum degree an interesection can have to be included in results. A four-way stop has a degree of 4.
     * @param {module:api/IntersectionsApi~intersectionsNearestOutputFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    intersectionsNearestOutputFormatGet(outputFormat, point, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling intersectionsNearestOutputFormatGet");
      }
      // verify the required parameter 'point' is set
      if (point === undefined || point === null) {
        throw new Error("Missing the required parameter 'point' when calling intersectionsNearestOutputFormatGet");
      }

      let pathParams = {
        'outputFormat': outputFormat
      };
      let queryParams = {
        'point': point,
        'maxDistance': opts['maxDistance'],
        'outputSRS': opts['outputSRS'],
        'minDegree': opts['minDegree'],
        'maxDegree': opts['maxDegree']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/intersections/nearest.{outputFormat}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the intersectionsWithinOutputFormatGet operation.
     * @callback module:api/IntersectionsApi~intersectionsWithinOutputFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find intersections in a geographic area
     * Represents all intersections within a given area
     * @param {module:model/String} outputFormat Results format. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputFormat target=\"_blank\">outputFormat</a>.   Note: GeoJSON and KML formats only support EPSG:4326 (outputSRS=4326)
     * @param {String} bbox A bounding box (xmin,ymin,xmax,ymax) used to limit the search area. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#bbox target=\"_blank\">bbox</a>
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-geocoder/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {Number} [maxResults = 200)] The maximum number of search results
     * @param {Number} [minDegree = 2)] The minimum degree an intersection can have to be included in results. A dead-end has a degree of 1.
     * @param {Number} [maxDegree = 100)] The maximum degree an interesection can have to be included in results. A four-way stop has a degree of 4.
     * @param {module:api/IntersectionsApi~intersectionsWithinOutputFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    intersectionsWithinOutputFormatGet(outputFormat, bbox, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling intersectionsWithinOutputFormatGet");
      }
      // verify the required parameter 'bbox' is set
      if (bbox === undefined || bbox === null) {
        throw new Error("Missing the required parameter 'bbox' when calling intersectionsWithinOutputFormatGet");
      }

      let pathParams = {
        'outputFormat': outputFormat
      };
      let queryParams = {
        'bbox': bbox,
        'outputSRS': opts['outputSRS'],
        'maxResults': opts['maxResults'],
        'minDegree': opts['minDegree'],
        'maxDegree': opts['maxDegree']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/intersections/within.{outputFormat}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
