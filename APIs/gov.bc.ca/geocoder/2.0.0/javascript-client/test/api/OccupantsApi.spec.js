/**
 * Geocoder REST API
 * This API represents address cleaning, correction, completion, geocoding, reverse geocoding, and proximity resources for intersection addresses, physical addresses and their occupants in British Columbia. Please read our [data collection notice](https://github.com/bcgov/api-specs/blob/master/COLLECTION_NOTICE.md#collection-notice).    Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.   [API keys](https://api.gov.bc.ca/devportal/api-directory/273) are unique and can be acquired with a GitHub or IDIR account.    **Notification:** If you have applications or web pages that link to the BC Address Geocoder you must use the following URL.    *https://geocoder.api.gov.bc.ca*    Please note that the following URLs were deprecated in September 2018 [More Details](https://www2.gov.bc.ca/gov/content?id=103ADC5A956842828554238DEF28D6E5).    - http://apps.gov.bc.ca/pub/geocoder   - https://apps.gov.bc.ca/pub/geocoder \\ \\  
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GeocoderRestApi);
  }
}(this, function(expect, GeocoderRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GeocoderRestApi.OccupantsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OccupantsApi', function() {
    describe('occupantsAddressesOutputFormatGet', function() {
      it('should call occupantsAddressesOutputFormatGet successfully', function(done) {
        //uncomment below and update the code to test occupantsAddressesOutputFormatGet
        //instance.occupantsAddressesOutputFormatGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('occupantsNearOutputFormatGet', function() {
      it('should call occupantsNearOutputFormatGet successfully', function(done) {
        //uncomment below and update the code to test occupantsNearOutputFormatGet
        //instance.occupantsNearOutputFormatGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('occupantsNearestOutputFormatGet', function() {
      it('should call occupantsNearestOutputFormatGet successfully', function(done) {
        //uncomment below and update the code to test occupantsNearestOutputFormatGet
        //instance.occupantsNearestOutputFormatGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('occupantsOccupantIDOutputFormatGet', function() {
      it('should call occupantsOccupantIDOutputFormatGet successfully', function(done) {
        //uncomment below and update the code to test occupantsOccupantIDOutputFormatGet
        //instance.occupantsOccupantIDOutputFormatGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('occupantsWithinOutputFormatGet', function() {
      it('should call occupantsWithinOutputFormatGet successfully', function(done) {
        //uncomment below and update the code to test occupantsWithinOutputFormatGet
        //instance.occupantsWithinOutputFormatGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
