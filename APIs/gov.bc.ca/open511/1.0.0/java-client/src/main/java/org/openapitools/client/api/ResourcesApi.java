/*
 * DriveBC's Open511 API
 * This API is DriveBC's implementation of the Open511 specification.  It provides information about known road events (traffic accidents, construction, etc.) in British Columbia, Canada.  Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: TRANBMClientRelations@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResourcesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for areasGet
     * @param format The format of the response (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call areasGetCall(String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/areas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call areasGetValidateBeforeCall(String format, final ApiCallback _callback) throws ApiException {
        return areasGetCall(format, _callback);

    }

    /**
     * Lists the geographical areas (e.g. districts) that can be used to filter events.
     * 
     * @param format The format of the response (optional, default to json)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public void areasGet(String format) throws ApiException {
        areasGetWithHttpInfo(format);
    }

    /**
     * Lists the geographical areas (e.g. districts) that can be used to filter events.
     * 
     * @param format The format of the response (optional, default to json)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> areasGetWithHttpInfo(String format) throws ApiException {
        okhttp3.Call localVarCall = areasGetValidateBeforeCall(format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists the geographical areas (e.g. districts) that can be used to filter events. (asynchronously)
     * 
     * @param format The format of the response (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call areasGetAsync(String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = areasGetValidateBeforeCall(format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventsGet
     * @param format The format of the response (optional, default to json)
     * @param status Limits the response to events having a given status. (optional, default to ALL)
     * @param severity Limits the response to events tagged with one of the listed severity values. The possible values are: [MINOR, MODERATE, MAJOR].  Multiple values may be listed, and should be separated by a comma. The default is to return events of any severity. (optional, default to MAJOR)
     * @param jurisdiction Limits the response to events reported by a given jurisdiction. The value given must be specified as the ID of a jurisdiction returned by the /jurisdiction resource. The default is to return events from all jurisdictions. (optional, default to drivebc.ca)
     * @param eventType Limits the response to events tagged with one of the listed event types.  The possible values include: [CONSTRUCTION, INCIDENT, SPECIAL_EVENT, WEATHER_CONDITION].  Multiple values may be listed, and should be separated by a comma. The default is to return events of all types. (optional, default to INCIDENT)
     * @param created Limits the response to events based on the date and time that the event was created (first recorded). The date/time must be specified in ISO 8601 format, and may be prefixed by one of the following operators [&lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;] to indicate &#39;before&#39;, &#39;before or equal to&#39;, &#39;after&#39; or &#39;after or equal to&#39; respectively.  For example, &gt;2013-12-01T12:00:00Z requests all events create after Dec. 1, 2015 at 12pm (noon) Coordinated Universal Time.  The default is to return events with any creation time. (optional, default to &gt;2015-09-01T12:00:00Z)
     * @param updated Limits the response to events based on the date and time that the event was last updated. The date/time must be specified in ISO 8601 format, and may be prefixed by one of the following operators [&lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;] to indicate &#39;before&#39;, &#39;before or equal to&#39;, &#39;after&#39; or &#39;after or equal to&#39; respectively.  For example, &gt;2013-12-01T12:00:00Z requests all events updated after Dec. 1, 2015 at 12pm (noon) Coordinated Universal Time. The default is to return events with any update time (optional, default to &gt;2015-09-01T12:00:00Z)
     * @param roadName Limits the response to events on a given road as specified by the road name.  An example of a valid road name is &#39;Highway 1&#39;. The default is to return events on all roads. (optional, default to Highway 99)
     * @param areaId Limits the response to events within one of the specified areas.  An area must be specified as the ID of an item returned by the /areas resource. For example: an area_id of &#39;drivebc.ca/1&#39; limits events to those within the Lower Mainland District.  The default is to return events in all areas. (optional, default to drivebc.ca/1)
     * @param bbox Limits the response to events that fall within the specified geographical bounding box.  The bbox format must be &#39;[min longitude],[min latitude],[max longitude],[max latitude]&#39; with WGS84 coordinates.  For example: -123.45,48.99,-122.45,49.49.  The default is to return events in all geographical locations. (optional, default to -130,48,-116,60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsGetCall(String format, String status, String severity, String jurisdiction, String eventType, String created, String updated, String roadName, String areaId, String bbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (severity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("severity", severity));
        }

        if (jurisdiction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jurisdiction", jurisdiction));
        }

        if (eventType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event_type", eventType));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (updated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated", updated));
        }

        if (roadName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("road_name", roadName));
        }

        if (areaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("area_id", areaId));
        }

        if (bbox != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bbox", bbox));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsGetValidateBeforeCall(String format, String status, String severity, String jurisdiction, String eventType, String created, String updated, String roadName, String areaId, String bbox, final ApiCallback _callback) throws ApiException {
        return eventsGetCall(format, status, severity, jurisdiction, eventType, created, updated, roadName, areaId, bbox, _callback);

    }

    /**
     * Lists road events
     * The events resource provides information about road events (e.g. accidents, construction, special events). The response is a list of event elements matching the filtering parameters if any are provided. 
     * @param format The format of the response (optional, default to json)
     * @param status Limits the response to events having a given status. (optional, default to ALL)
     * @param severity Limits the response to events tagged with one of the listed severity values. The possible values are: [MINOR, MODERATE, MAJOR].  Multiple values may be listed, and should be separated by a comma. The default is to return events of any severity. (optional, default to MAJOR)
     * @param jurisdiction Limits the response to events reported by a given jurisdiction. The value given must be specified as the ID of a jurisdiction returned by the /jurisdiction resource. The default is to return events from all jurisdictions. (optional, default to drivebc.ca)
     * @param eventType Limits the response to events tagged with one of the listed event types.  The possible values include: [CONSTRUCTION, INCIDENT, SPECIAL_EVENT, WEATHER_CONDITION].  Multiple values may be listed, and should be separated by a comma. The default is to return events of all types. (optional, default to INCIDENT)
     * @param created Limits the response to events based on the date and time that the event was created (first recorded). The date/time must be specified in ISO 8601 format, and may be prefixed by one of the following operators [&lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;] to indicate &#39;before&#39;, &#39;before or equal to&#39;, &#39;after&#39; or &#39;after or equal to&#39; respectively.  For example, &gt;2013-12-01T12:00:00Z requests all events create after Dec. 1, 2015 at 12pm (noon) Coordinated Universal Time.  The default is to return events with any creation time. (optional, default to &gt;2015-09-01T12:00:00Z)
     * @param updated Limits the response to events based on the date and time that the event was last updated. The date/time must be specified in ISO 8601 format, and may be prefixed by one of the following operators [&lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;] to indicate &#39;before&#39;, &#39;before or equal to&#39;, &#39;after&#39; or &#39;after or equal to&#39; respectively.  For example, &gt;2013-12-01T12:00:00Z requests all events updated after Dec. 1, 2015 at 12pm (noon) Coordinated Universal Time. The default is to return events with any update time (optional, default to &gt;2015-09-01T12:00:00Z)
     * @param roadName Limits the response to events on a given road as specified by the road name.  An example of a valid road name is &#39;Highway 1&#39;. The default is to return events on all roads. (optional, default to Highway 99)
     * @param areaId Limits the response to events within one of the specified areas.  An area must be specified as the ID of an item returned by the /areas resource. For example: an area_id of &#39;drivebc.ca/1&#39; limits events to those within the Lower Mainland District.  The default is to return events in all areas. (optional, default to drivebc.ca/1)
     * @param bbox Limits the response to events that fall within the specified geographical bounding box.  The bbox format must be &#39;[min longitude],[min latitude],[max longitude],[max latitude]&#39; with WGS84 coordinates.  For example: -123.45,48.99,-122.45,49.49.  The default is to return events in all geographical locations. (optional, default to -130,48,-116,60)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public void eventsGet(String format, String status, String severity, String jurisdiction, String eventType, String created, String updated, String roadName, String areaId, String bbox) throws ApiException {
        eventsGetWithHttpInfo(format, status, severity, jurisdiction, eventType, created, updated, roadName, areaId, bbox);
    }

    /**
     * Lists road events
     * The events resource provides information about road events (e.g. accidents, construction, special events). The response is a list of event elements matching the filtering parameters if any are provided. 
     * @param format The format of the response (optional, default to json)
     * @param status Limits the response to events having a given status. (optional, default to ALL)
     * @param severity Limits the response to events tagged with one of the listed severity values. The possible values are: [MINOR, MODERATE, MAJOR].  Multiple values may be listed, and should be separated by a comma. The default is to return events of any severity. (optional, default to MAJOR)
     * @param jurisdiction Limits the response to events reported by a given jurisdiction. The value given must be specified as the ID of a jurisdiction returned by the /jurisdiction resource. The default is to return events from all jurisdictions. (optional, default to drivebc.ca)
     * @param eventType Limits the response to events tagged with one of the listed event types.  The possible values include: [CONSTRUCTION, INCIDENT, SPECIAL_EVENT, WEATHER_CONDITION].  Multiple values may be listed, and should be separated by a comma. The default is to return events of all types. (optional, default to INCIDENT)
     * @param created Limits the response to events based on the date and time that the event was created (first recorded). The date/time must be specified in ISO 8601 format, and may be prefixed by one of the following operators [&lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;] to indicate &#39;before&#39;, &#39;before or equal to&#39;, &#39;after&#39; or &#39;after or equal to&#39; respectively.  For example, &gt;2013-12-01T12:00:00Z requests all events create after Dec. 1, 2015 at 12pm (noon) Coordinated Universal Time.  The default is to return events with any creation time. (optional, default to &gt;2015-09-01T12:00:00Z)
     * @param updated Limits the response to events based on the date and time that the event was last updated. The date/time must be specified in ISO 8601 format, and may be prefixed by one of the following operators [&lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;] to indicate &#39;before&#39;, &#39;before or equal to&#39;, &#39;after&#39; or &#39;after or equal to&#39; respectively.  For example, &gt;2013-12-01T12:00:00Z requests all events updated after Dec. 1, 2015 at 12pm (noon) Coordinated Universal Time. The default is to return events with any update time (optional, default to &gt;2015-09-01T12:00:00Z)
     * @param roadName Limits the response to events on a given road as specified by the road name.  An example of a valid road name is &#39;Highway 1&#39;. The default is to return events on all roads. (optional, default to Highway 99)
     * @param areaId Limits the response to events within one of the specified areas.  An area must be specified as the ID of an item returned by the /areas resource. For example: an area_id of &#39;drivebc.ca/1&#39; limits events to those within the Lower Mainland District.  The default is to return events in all areas. (optional, default to drivebc.ca/1)
     * @param bbox Limits the response to events that fall within the specified geographical bounding box.  The bbox format must be &#39;[min longitude],[min latitude],[max longitude],[max latitude]&#39; with WGS84 coordinates.  For example: -123.45,48.99,-122.45,49.49.  The default is to return events in all geographical locations. (optional, default to -130,48,-116,60)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventsGetWithHttpInfo(String format, String status, String severity, String jurisdiction, String eventType, String created, String updated, String roadName, String areaId, String bbox) throws ApiException {
        okhttp3.Call localVarCall = eventsGetValidateBeforeCall(format, status, severity, jurisdiction, eventType, created, updated, roadName, areaId, bbox, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists road events (asynchronously)
     * The events resource provides information about road events (e.g. accidents, construction, special events). The response is a list of event elements matching the filtering parameters if any are provided. 
     * @param format The format of the response (optional, default to json)
     * @param status Limits the response to events having a given status. (optional, default to ALL)
     * @param severity Limits the response to events tagged with one of the listed severity values. The possible values are: [MINOR, MODERATE, MAJOR].  Multiple values may be listed, and should be separated by a comma. The default is to return events of any severity. (optional, default to MAJOR)
     * @param jurisdiction Limits the response to events reported by a given jurisdiction. The value given must be specified as the ID of a jurisdiction returned by the /jurisdiction resource. The default is to return events from all jurisdictions. (optional, default to drivebc.ca)
     * @param eventType Limits the response to events tagged with one of the listed event types.  The possible values include: [CONSTRUCTION, INCIDENT, SPECIAL_EVENT, WEATHER_CONDITION].  Multiple values may be listed, and should be separated by a comma. The default is to return events of all types. (optional, default to INCIDENT)
     * @param created Limits the response to events based on the date and time that the event was created (first recorded). The date/time must be specified in ISO 8601 format, and may be prefixed by one of the following operators [&lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;] to indicate &#39;before&#39;, &#39;before or equal to&#39;, &#39;after&#39; or &#39;after or equal to&#39; respectively.  For example, &gt;2013-12-01T12:00:00Z requests all events create after Dec. 1, 2015 at 12pm (noon) Coordinated Universal Time.  The default is to return events with any creation time. (optional, default to &gt;2015-09-01T12:00:00Z)
     * @param updated Limits the response to events based on the date and time that the event was last updated. The date/time must be specified in ISO 8601 format, and may be prefixed by one of the following operators [&lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;] to indicate &#39;before&#39;, &#39;before or equal to&#39;, &#39;after&#39; or &#39;after or equal to&#39; respectively.  For example, &gt;2013-12-01T12:00:00Z requests all events updated after Dec. 1, 2015 at 12pm (noon) Coordinated Universal Time. The default is to return events with any update time (optional, default to &gt;2015-09-01T12:00:00Z)
     * @param roadName Limits the response to events on a given road as specified by the road name.  An example of a valid road name is &#39;Highway 1&#39;. The default is to return events on all roads. (optional, default to Highway 99)
     * @param areaId Limits the response to events within one of the specified areas.  An area must be specified as the ID of an item returned by the /areas resource. For example: an area_id of &#39;drivebc.ca/1&#39; limits events to those within the Lower Mainland District.  The default is to return events in all areas. (optional, default to drivebc.ca/1)
     * @param bbox Limits the response to events that fall within the specified geographical bounding box.  The bbox format must be &#39;[min longitude],[min latitude],[max longitude],[max latitude]&#39; with WGS84 coordinates.  For example: -123.45,48.99,-122.45,49.49.  The default is to return events in all geographical locations. (optional, default to -130,48,-116,60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsGetAsync(String format, String status, String severity, String jurisdiction, String eventType, String created, String updated, String roadName, String areaId, String bbox, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsGetValidateBeforeCall(format, status, severity, jurisdiction, eventType, created, updated, roadName, areaId, bbox, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for jurisdictionGet
     * @param format The format of the response (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jurisdictionGetCall(String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jurisdiction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jurisdictionGetValidateBeforeCall(String format, final ApiCallback _callback) throws ApiException {
        return jurisdictionGetCall(format, _callback);

    }

    /**
     * Lists the jurisdictions publishing data through this Open511 API implementation
     * 
     * @param format The format of the response (optional, default to json)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public void jurisdictionGet(String format) throws ApiException {
        jurisdictionGetWithHttpInfo(format);
    }

    /**
     * Lists the jurisdictions publishing data through this Open511 API implementation
     * 
     * @param format The format of the response (optional, default to json)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jurisdictionGetWithHttpInfo(String format) throws ApiException {
        okhttp3.Call localVarCall = jurisdictionGetValidateBeforeCall(format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lists the jurisdictions publishing data through this Open511 API implementation (asynchronously)
     * 
     * @param format The format of the response (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jurisdictionGetAsync(String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jurisdictionGetValidateBeforeCall(format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for jurisdictiongeographyGet
     * @param format The format of the response (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jurisdictiongeographyGetCall(String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jurisdictiongeography";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jurisdictiongeographyGetValidateBeforeCall(String format, final ApiCallback _callback) throws ApiException {
        return jurisdictiongeographyGetCall(format, _callback);

    }

    /**
     * Provides the geographical boundaries for all the jurisdictions.
     * 
     * @param format The format of the response (optional, default to json)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public void jurisdictiongeographyGet(String format) throws ApiException {
        jurisdictiongeographyGetWithHttpInfo(format);
    }

    /**
     * Provides the geographical boundaries for all the jurisdictions.
     * 
     * @param format The format of the response (optional, default to json)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jurisdictiongeographyGetWithHttpInfo(String format) throws ApiException {
        okhttp3.Call localVarCall = jurisdictiongeographyGetValidateBeforeCall(format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Provides the geographical boundaries for all the jurisdictions. (asynchronously)
     * 
     * @param format The format of the response (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jurisdictiongeographyGetAsync(String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jurisdictiongeographyGetValidateBeforeCall(format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
