/**
 * BC Geographical Names Web Service - REST API
 * This REST API provides searchable access to information about geographical names in the province of British Columbia, including name status and details about the corresponding geographic feature.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 3.x.x
 * Contact: geographical.names@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BcGeographicalNamesWebServiceRestApi);
  }
}(this, function(expect, BcGeographicalNamesWebServiceRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BcGeographicalNamesWebServiceRestApi.FeatureTaxonomyApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FeatureTaxonomyApi', function() {
    describe('featureCategoriesGet', function() {
      it('should call featureCategoriesGet successfully', function(done) {
        //uncomment below and update the code to test featureCategoriesGet
        //instance.featureCategoriesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('featureClassesGet', function() {
      it('should call featureClassesGet successfully', function(done) {
        //uncomment below and update the code to test featureClassesGet
        //instance.featureClassesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('featureTypesGet', function() {
      it('should call featureTypesGet successfully', function(done) {
        //uncomment below and update the code to test featureTypesGet
        //instance.featureTypesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
