/**
 * BC Geographical Names Web Service - REST API
 * This REST API provides searchable access to information about geographical names in the province of British Columbia, including name status and details about the corresponding geographic feature.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 3.x.x
 * Contact: geographical.names@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BcGeographicalNamesWebServiceRestApi);
  }
}(this, function(expect, BcGeographicalNamesWebServiceRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BcGeographicalNamesWebServiceRestApi.NameApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NameApi', function() {
    describe('namesChangesGet_0', function() {
      it('should call namesChangesGet_0 successfully', function(done) {
        //uncomment below and update the code to test namesChangesGet_0
        //instance.namesChangesGet_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namesDecisionsRecentGet_0', function() {
      it('should call namesDecisionsRecentGet_0 successfully', function(done) {
        //uncomment below and update the code to test namesDecisionsRecentGet_0
        //instance.namesDecisionsRecentGet_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namesDecisionsYearGet_0', function() {
      it('should call namesDecisionsYearGet_0 successfully', function(done) {
        //uncomment below and update the code to test namesDecisionsYearGet_0
        //instance.namesDecisionsYearGet_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namesInsideGet_0', function() {
      it('should call namesInsideGet_0 successfully', function(done) {
        //uncomment below and update the code to test namesInsideGet_0
        //instance.namesInsideGet_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namesNameIdOutputFormatGet', function() {
      it('should call namesNameIdOutputFormatGet successfully', function(done) {
        //uncomment below and update the code to test namesNameIdOutputFormatGet
        //instance.namesNameIdOutputFormatGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namesNearGet_0', function() {
      it('should call namesNearGet_0 successfully', function(done) {
        //uncomment below and update the code to test namesNearGet_0
        //instance.namesNearGet_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namesNotOfficialSearchGet_0', function() {
      it('should call namesNotOfficialSearchGet_0 successfully', function(done) {
        //uncomment below and update the code to test namesNotOfficialSearchGet_0
        //instance.namesNotOfficialSearchGet_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namesOfficialSearchGet_0', function() {
      it('should call namesOfficialSearchGet_0 successfully', function(done) {
        //uncomment below and update the code to test namesOfficialSearchGet_0
        //instance.namesOfficialSearchGet_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namesSearchGet_0', function() {
      it('should call namesSearchGet_0 successfully', function(done) {
        //uncomment below and update the code to test namesSearchGet_0
        //instance.namesSearchGet_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
