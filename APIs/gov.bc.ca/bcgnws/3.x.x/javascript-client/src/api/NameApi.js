/**
 * BC Geographical Names Web Service - REST API
 * This REST API provides searchable access to information about geographical names in the province of British Columbia, including name status and details about the corresponding geographic feature.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 3.x.x
 * Contact: geographical.names@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Name service.
* @module api/NameApi
* @version 3.x.x
*/
export default class NameApi {

    /**
    * Constructs a new NameApi. 
    * @alias module:api/NameApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the namesChangesGet_0 operation.
     * @callback module:api/NameApi~namesChangesGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for names with metadata changes in a given period
     * Search for information about geographical names which have changed most recently within a specified time window.  Changes may include status cupdates and metadata corrections.
     * @param {module:model/String} outputFormat The format of the output.
     * @param {Number} fromDate Defines the earliest date (YYYY-MM-DD format) of the change time window for the search
     * @param {Number} toDate Defines the latest date (YYYY-MM-DD format) of the change time window for the search
     * @param {Object} opts Optional parameters
     * @param {String} [featureClass = '*')] A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.
     * @param {String} [featureCategory = '*')] A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.
     * @param {String} [featureType = '*')] A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included
     * @param {module:model/String} [sortBy = 'name')] The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries.
     * @param {module:model/Number} [embed] A flag to indicate whether to embed the corresponding 'feature' into each matching name
     * @param {module:model/String} [outputStyle = 'summary')] A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
     * @param {Number} [itemsPerPage = 20)] The number of search results to return (1-200)
     * @param {Number} [startIndex = 1)] The index of the first record to be returned (>= 1)
     * @param {module:api/NameApi~namesChangesGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    namesChangesGet_0(outputFormat, fromDate, toDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling namesChangesGet_0");
      }
      // verify the required parameter 'fromDate' is set
      if (fromDate === undefined || fromDate === null) {
        throw new Error("Missing the required parameter 'fromDate' when calling namesChangesGet_0");
      }
      // verify the required parameter 'toDate' is set
      if (toDate === undefined || toDate === null) {
        throw new Error("Missing the required parameter 'toDate' when calling namesChangesGet_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'outputFormat': outputFormat,
        'fromDate': fromDate,
        'toDate': toDate,
        'featureClass': opts['featureClass'],
        'featureCategory': opts['featureCategory'],
        'featureType': opts['featureType'],
        'sortBy': opts['sortBy'],
        'outputSRS': opts['outputSRS'],
        'embed': opts['embed'],
        'outputStyle': opts['outputStyle'],
        'itemsPerPage': opts['itemsPerPage'],
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/names/changes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namesDecisionsRecentGet_0 operation.
     * @callback module:api/NameApi~namesDecisionsRecentGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for names affected by recent naming decision
     * Search for information about geographical names affected by naming 'decisions' made by the BC Geographical Names Office (naming authority) within the last X days.
     * @param {module:model/String} outputFormat The format of the output.
     * @param {Number} days The number of days used to define the time window of naming decisions to search.  The number is interpreted as searching for 'names affected by decisions within the last X days'.
     * @param {Object} opts Optional parameters
     * @param {String} [featureClass = '*')] A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.
     * @param {String} [featureCategory = '*')] A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.
     * @param {String} [featureType = '*')] A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included
     * @param {module:model/String} [sortBy = 'name')] The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries.
     * @param {module:model/Number} [embed] A flag to indicate whether to embed the corresponding 'feature' into each matching name
     * @param {module:model/String} [outputStyle = 'summary')] A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
     * @param {Number} [itemsPerPage = 20)] The number of search results to return (1-200)
     * @param {Number} [startIndex = 1)] The index of the first record to be returned (>= 1)
     * @param {module:api/NameApi~namesDecisionsRecentGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    namesDecisionsRecentGet_0(outputFormat, days, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling namesDecisionsRecentGet_0");
      }
      // verify the required parameter 'days' is set
      if (days === undefined || days === null) {
        throw new Error("Missing the required parameter 'days' when calling namesDecisionsRecentGet_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'outputFormat': outputFormat,
        'days': days,
        'featureClass': opts['featureClass'],
        'featureCategory': opts['featureCategory'],
        'featureType': opts['featureType'],
        'sortBy': opts['sortBy'],
        'outputSRS': opts['outputSRS'],
        'embed': opts['embed'],
        'outputStyle': opts['outputStyle'],
        'itemsPerPage': opts['itemsPerPage'],
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/names/decisions/recent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namesDecisionsYearGet_0 operation.
     * @callback module:api/NameApi~namesDecisionsYearGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for names affected by naming decisions in a given year
     * Search for information about geographical names affected by naming 'decisions' made by the BC Geographical Names Office (naming authority) in a given year.
     * @param {module:model/String} outputFormat The format of the output.
     * @param {Number} year The year in which to search for names affected by naming decisions'.
     * @param {Object} opts Optional parameters
     * @param {String} [featureClass = '*')] A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.
     * @param {String} [featureCategory = '*')] A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.
     * @param {String} [featureType = '*')] A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included
     * @param {module:model/String} [sortBy = 'name')] The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries.
     * @param {module:model/Number} [embed] A flag to indicate whether to embed the corresponding 'feature' into each matching name
     * @param {module:model/String} [outputStyle = 'summary')] A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
     * @param {Number} [itemsPerPage = 20)] The number of search results to return (1-200)
     * @param {Number} [startIndex = 1)] The index of the first record to be returned (>= 1)
     * @param {module:api/NameApi~namesDecisionsYearGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    namesDecisionsYearGet_0(outputFormat, year, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling namesDecisionsYearGet_0");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling namesDecisionsYearGet_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'outputFormat': outputFormat,
        'year': year,
        'featureClass': opts['featureClass'],
        'featureCategory': opts['featureCategory'],
        'featureType': opts['featureType'],
        'sortBy': opts['sortBy'],
        'outputSRS': opts['outputSRS'],
        'embed': opts['embed'],
        'outputStyle': opts['outputStyle'],
        'itemsPerPage': opts['itemsPerPage'],
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/names/decisions/year', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namesInsideGet_0 operation.
     * @callback module:api/NameApi~namesInsideGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search in a geographic area
     * Search for information about geographical names that correspond to features within a geographic bounding box.  Various options and filter parameters are available to refine the search.
     * @param {module:model/String} outputFormat The format of the output.
     * @param {String} bbox A geographic bounding box defining the search area.  Must be specified as a string of the form 'minLongitude,minLatitude,maxLongitude,maxLatitude' (WGS84). e.g. -119,49,-118,50
     * @param {Object} opts Optional parameters
     * @param {String} [featureClass = '*')] A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.
     * @param {String} [featureCategory = '*')] A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.
     * @param {String} [featureType = '*')] A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included
     * @param {module:model/String} [sortBy = 'name')] The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries.
     * @param {module:model/Number} [embed] A flag to indicate whether to embed the corresponding 'feature' into each matching name
     * @param {module:model/String} [outputStyle = 'summary')] A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
     * @param {Number} [itemsPerPage = 20)] The number of search results to return (1-200)
     * @param {Number} [startIndex = 1)] The index of the first record to be returned (>= 1)
     * @param {module:api/NameApi~namesInsideGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    namesInsideGet_0(outputFormat, bbox, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling namesInsideGet_0");
      }
      // verify the required parameter 'bbox' is set
      if (bbox === undefined || bbox === null) {
        throw new Error("Missing the required parameter 'bbox' when calling namesInsideGet_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'outputFormat': outputFormat,
        'bbox': bbox,
        'featureClass': opts['featureClass'],
        'featureCategory': opts['featureCategory'],
        'featureType': opts['featureType'],
        'sortBy': opts['sortBy'],
        'outputSRS': opts['outputSRS'],
        'embed': opts['embed'],
        'outputStyle': opts['outputStyle'],
        'itemsPerPage': opts['itemsPerPage'],
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/names/inside', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namesNameIdOutputFormatGet operation.
     * @callback module:api/NameApi~namesNameIdOutputFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a name by its nameId
     * Get information about the geographical name with the specified nameId.
     * @param {Number} nameId The unique identifier for a name
     * @param {module:model/String} outputFormat The format of the output.
     * @param {module:api/NameApi~namesNameIdOutputFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    namesNameIdOutputFormatGet(nameId, outputFormat, callback) {
      let postBody = null;
      // verify the required parameter 'nameId' is set
      if (nameId === undefined || nameId === null) {
        throw new Error("Missing the required parameter 'nameId' when calling namesNameIdOutputFormatGet");
      }
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling namesNameIdOutputFormatGet");
      }

      let pathParams = {
        'nameId': nameId,
        'outputFormat': outputFormat
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/names/{nameId}.{outputFormat}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namesNearGet_0 operation.
     * @callback module:api/NameApi~namesNearGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search near to a geographic point
     * Search for information about geographical names that correspond to features within a geographic area defined by a centre point and a radius.  Various options and filter parameters are available to refine the search.
     * @param {module:model/String} outputFormat The format of the output.
     * @param {String} featurePoint A geographic coordinate specifying the centre point of the search area.  Must be specified as a string of the form 'longitude,latitude' (WGS84).  e.g. -120,51
     * @param {String} distance A radius (in kilometres) around the centre point.
     * @param {Object} opts Optional parameters
     * @param {String} [featureClass = '*')] A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.
     * @param {String} [featureCategory = '*')] A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.
     * @param {String} [featureType = '*')] A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included
     * @param {module:model/String} [sortBy = 'name')] The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries.
     * @param {module:model/Number} [embed] A flag to indicate whether to embed the corresponding 'feature' into each matching name
     * @param {module:model/String} [outputStyle = 'summary')] A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
     * @param {Number} [itemsPerPage = 20)] The number of search results to return (1-200)
     * @param {Number} [startIndex = 1)] The index of the first record to be returned (>= 1)
     * @param {module:api/NameApi~namesNearGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    namesNearGet_0(outputFormat, featurePoint, distance, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling namesNearGet_0");
      }
      // verify the required parameter 'featurePoint' is set
      if (featurePoint === undefined || featurePoint === null) {
        throw new Error("Missing the required parameter 'featurePoint' when calling namesNearGet_0");
      }
      // verify the required parameter 'distance' is set
      if (distance === undefined || distance === null) {
        throw new Error("Missing the required parameter 'distance' when calling namesNearGet_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'outputFormat': outputFormat,
        'featurePoint': featurePoint,
        'distance': distance,
        'featureClass': opts['featureClass'],
        'featureCategory': opts['featureCategory'],
        'featureType': opts['featureType'],
        'sortBy': opts['sortBy'],
        'outputSRS': opts['outputSRS'],
        'embed': opts['embed'],
        'outputStyle': opts['outputStyle'],
        'itemsPerPage': opts['itemsPerPage'],
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/names/near', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namesNotOfficialSearchGet_0 operation.
     * @callback module:api/NameApi~namesNotOfficialSearchGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search by name, limit to unofficial names only
     * Search for information about unofficial geographical names by the text of the name itself.  Various options and filter parameters are available to refine the search.
     * @param {module:model/String} outputFormat The format of the output.
     * @param {String} name A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example 'vancouv*'
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [exactSpelling = 0)] If the 'name' parameter is specified, 'exactSpelling' specifies whether to include only names that exactly match the search text (exactSpelling=1), or whether to also include names with similar spellings (exactSpelling=0)
     * @param {String} [featureClass = '*')] A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.
     * @param {String} [featureCategory = '*')] A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.
     * @param {String} [featureType = '*')] A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included
     * @param {module:model/String} [sortBy = 'relevance')] The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries.
     * @param {module:model/Number} [embed] A flag to indicate whether to embed the corresponding 'feature' into each matching name
     * @param {module:model/String} [outputStyle = 'summary')] A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
     * @param {Number} [itemsPerPage = 20)] The number of search results to return (1-200)
     * @param {Number} [startIndex = 1)] The index of the first record to be returned (>= 1)
     * @param {module:api/NameApi~namesNotOfficialSearchGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    namesNotOfficialSearchGet_0(outputFormat, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling namesNotOfficialSearchGet_0");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling namesNotOfficialSearchGet_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'outputFormat': outputFormat,
        'name': name,
        'exactSpelling': opts['exactSpelling'],
        'featureClass': opts['featureClass'],
        'featureCategory': opts['featureCategory'],
        'featureType': opts['featureType'],
        'sortBy': opts['sortBy'],
        'outputSRS': opts['outputSRS'],
        'embed': opts['embed'],
        'outputStyle': opts['outputStyle'],
        'itemsPerPage': opts['itemsPerPage'],
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/names/notOfficial/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namesOfficialSearchGet_0 operation.
     * @callback module:api/NameApi~namesOfficialSearchGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search by name, limit to official names only
     * Search for information about official geographical names by the text of the name itself.  Various options and filter parameters are available to refine the search.
     * @param {module:model/String} outputFormat The format of the output.
     * @param {String} name A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example 'vancouv*'
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [exactSpelling = 0)] If the 'name' parameter is specified, 'exactSpelling' specifies whether to include only names that exactly match the search text (exactSpelling=1), or whether to also include names with similar spellings (exactSpelling=0)
     * @param {String} [featureClass = '*')] A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.
     * @param {String} [featureCategory = '*')] A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.
     * @param {String} [featureType = '*')] A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included
     * @param {module:model/String} [sortBy = 'relevance')] The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries.
     * @param {module:model/Number} [embed] A flag to indicate whether to embed the corresponding 'feature' into each matching name
     * @param {module:model/String} [outputStyle = 'summary')] A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
     * @param {Number} [itemsPerPage = 20)] The number of search results to return (1-200)
     * @param {Number} [startIndex = 1)] The index of the first record to be returned (>= 1)
     * @param {module:api/NameApi~namesOfficialSearchGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    namesOfficialSearchGet_0(outputFormat, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling namesOfficialSearchGet_0");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling namesOfficialSearchGet_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'outputFormat': outputFormat,
        'name': name,
        'exactSpelling': opts['exactSpelling'],
        'featureClass': opts['featureClass'],
        'featureCategory': opts['featureCategory'],
        'featureType': opts['featureType'],
        'sortBy': opts['sortBy'],
        'outputSRS': opts['outputSRS'],
        'embed': opts['embed'],
        'outputStyle': opts['outputStyle'],
        'itemsPerPage': opts['itemsPerPage'],
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/names/official/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namesSearchGet_0 operation.
     * @callback module:api/NameApi~namesSearchGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search by name
     * Search for information about geographical names by the text of the name itself.  The response will include both official and unofficial names.  Various options and filter parameters are available to refine the search.
     * @param {module:model/String} outputFormat The format of the output.
     * @param {String} name A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example 'vancouv*'
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [exactSpelling = 0)] If the 'name' parameter is specified, 'exactSpelling' specifies whether to include only names that exactly match the search text (exactSpelling=1), or whether to also include names with similar spellings (exactSpelling=0)
     * @param {String} [featureClass = '*')] A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.
     * @param {String} [featureCategory = '*')] A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.
     * @param {String} [featureType = '*')] A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included
     * @param {module:model/String} [sortBy = 'relevance')] The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries.
     * @param {module:model/Number} [embed] A flag to indicate whether to embed the corresponding 'feature' into each matching name
     * @param {module:model/String} [outputStyle = 'summary')] A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
     * @param {Number} [itemsPerPage = 20)] The number of search results to return (1-200)
     * @param {Number} [startIndex = 1)] The index of the first record to be returned (>= 1)
     * @param {module:api/NameApi~namesSearchGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    namesSearchGet_0(outputFormat, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling namesSearchGet_0");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling namesSearchGet_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'outputFormat': outputFormat,
        'name': name,
        'exactSpelling': opts['exactSpelling'],
        'featureClass': opts['featureClass'],
        'featureCategory': opts['featureCategory'],
        'featureType': opts['featureType'],
        'sortBy': opts['sortBy'],
        'outputSRS': opts['outputSRS'],
        'embed': opts['embed'],
        'outputStyle': opts['outputStyle'],
        'itemsPerPage': opts['itemsPerPage'],
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/names/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
