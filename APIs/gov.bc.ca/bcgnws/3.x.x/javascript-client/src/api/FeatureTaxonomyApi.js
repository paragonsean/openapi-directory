/**
 * BC Geographical Names Web Service - REST API
 * This REST API provides searchable access to information about geographical names in the province of British Columbia, including name status and details about the corresponding geographic feature.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 3.x.x
 * Contact: geographical.names@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* FeatureTaxonomy service.
* @module api/FeatureTaxonomyApi
* @version 3.x.x
*/
export default class FeatureTaxonomyApi {

    /**
    * Constructs a new FeatureTaxonomyApi. 
    * @alias module:api/FeatureTaxonomyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the featureCategoriesGet operation.
     * @callback module:api/FeatureTaxonomyApi~featureCategoriesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all feature categories
     * Gets a list of all feature categories used by the BC Geographical Names Information System (BCGNIS).  Note: there are three levels of classification in the BCGNIS feature taxonomy: classes, categories and types.  A type is a subset of a category, and a category is a subset of a class.
     * @param {module:model/String} outputFormat The format of the output.
     * @param {module:api/FeatureTaxonomyApi~featureCategoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    featureCategoriesGet(outputFormat, callback) {
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling featureCategoriesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'outputFormat': outputFormat
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/featureCategories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featureClassesGet operation.
     * @callback module:api/FeatureTaxonomyApi~featureClassesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all feature classes
     * Gets a list of all feature classes used by the BC Geographical Names Information System (BCGNIS).  Note: there are three levels of classification in the BCGNIS feature taxonomy: classes, categories and types.  A type is a subset of a category, and a category is a subset of a class.
     * @param {module:model/String} outputFormat The format of the output.
     * @param {module:api/FeatureTaxonomyApi~featureClassesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    featureClassesGet(outputFormat, callback) {
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling featureClassesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'outputFormat': outputFormat
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/featureClasses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featureTypesGet operation.
     * @callback module:api/FeatureTaxonomyApi~featureTypesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all feature types
     * Gets a list of all feature types used by the BC Geographical Names Information System (BCGNIS).  Note: there are three levels of classification in the BCGNIS feature taxonomy: classes, categories and types.  A type is a subset of a category, and a category is a subset of a class.
     * @param {module:model/String} outputFormat The format of the output.
     * @param {module:api/FeatureTaxonomyApi~featureTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    featureTypesGet(outputFormat, callback) {
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling featureTypesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'outputFormat': outputFormat
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/featureTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
