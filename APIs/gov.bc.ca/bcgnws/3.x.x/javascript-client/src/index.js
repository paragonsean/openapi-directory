/**
 * BC Geographical Names Web Service - REST API
 * This REST API provides searchable access to information about geographical names in the province of British Columbia, including name status and details about the corresponding geographic feature.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 3.x.x
 * Contact: geographical.names@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import FeatureApi from './api/FeatureApi';
import FeatureTaxonomyApi from './api/FeatureTaxonomyApi';
import NameApi from './api/NameApi';
import NameAuthorityApi from './api/NameAuthorityApi';
import SearchApi from './api/SearchApi';


/**
* This REST API provides searchable access to information about geographical names in the province of British Columbia, including name status and details about the corresponding geographic feature.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var BcGeographicalNamesWebServiceRestApi = require('index'); // See note below*.
* var xxxSvc = new BcGeographicalNamesWebServiceRestApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new BcGeographicalNamesWebServiceRestApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new BcGeographicalNamesWebServiceRestApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new BcGeographicalNamesWebServiceRestApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 3.x.x
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
    * The FeatureApi service constructor.
    * @property {module:api/FeatureApi}
    */
    FeatureApi,

    /**
    * The FeatureTaxonomyApi service constructor.
    * @property {module:api/FeatureTaxonomyApi}
    */
    FeatureTaxonomyApi,

    /**
    * The NameApi service constructor.
    * @property {module:api/NameApi}
    */
    NameApi,

    /**
    * The NameAuthorityApi service constructor.
    * @property {module:api/NameAuthorityApi}
    */
    NameAuthorityApi,

    /**
    * The SearchApi service constructor.
    * @property {module:api/SearchApi}
    */
    SearchApi
};
