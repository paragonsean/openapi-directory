/**
 * BC Geographical Names Web Service - REST API
 * This REST API provides searchable access to information about geographical names in the province of British Columbia, including name status and details about the corresponding geographic feature.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 3.x.x
 * Contact: geographical.names@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFeatureTaxonomyApi_H
#define OAI_OAIFeatureTaxonomyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFeatureTaxonomyApi : public QObject {
    Q_OBJECT

public:
    OAIFeatureTaxonomyApi(const int timeOut = 0);
    ~OAIFeatureTaxonomyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  output_format QString [required]
    */
    virtual void featureCategoriesGet(const QString &output_format);

    /**
    * @param[in]  output_format QString [required]
    */
    virtual void featureClassesGet(const QString &output_format);

    /**
    * @param[in]  output_format QString [required]
    */
    virtual void featureTypesGet(const QString &output_format);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void featureCategoriesGetCallback(OAIHttpRequestWorker *worker);
    void featureClassesGetCallback(OAIHttpRequestWorker *worker);
    void featureTypesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void featureCategoriesGetSignal();
    void featureClassesGetSignal();
    void featureTypesGetSignal();


    void featureCategoriesGetSignalFull(OAIHttpRequestWorker *worker);
    void featureClassesGetSignalFull(OAIHttpRequestWorker *worker);
    void featureTypesGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use featureCategoriesGetSignalError() instead")
    void featureCategoriesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void featureCategoriesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featureClassesGetSignalError() instead")
    void featureClassesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void featureClassesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featureTypesGetSignalError() instead")
    void featureTypesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void featureTypesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use featureCategoriesGetSignalErrorFull() instead")
    void featureCategoriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featureCategoriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featureClassesGetSignalErrorFull() instead")
    void featureClassesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featureClassesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featureTypesGetSignalErrorFull() instead")
    void featureTypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featureTypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
