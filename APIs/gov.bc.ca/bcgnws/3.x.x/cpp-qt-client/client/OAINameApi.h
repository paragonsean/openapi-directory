/**
 * BC Geographical Names Web Service - REST API
 * This REST API provides searchable access to information about geographical names in the province of British Columbia, including name status and details about the corresponding geographic feature.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 3.x.x
 * Contact: geographical.names@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINameApi_H
#define OAI_OAINameApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINameApi : public QObject {
    Q_OBJECT

public:
    OAINameApi(const int timeOut = 0);
    ~OAINameApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  from_date qint32 [required]
    * @param[in]  to_date qint32 [required]
    * @param[in]  feature_class QString [optional]
    * @param[in]  feature_category QString [optional]
    * @param[in]  feature_type QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  embed qint32 [optional]
    * @param[in]  output_style QString [optional]
    * @param[in]  items_per_page qint32 [optional]
    * @param[in]  start_index qint32 [optional]
    */
    virtual void namesChangesGet(const QString &output_format, const qint32 &from_date, const qint32 &to_date, const ::OpenAPI::OptionalParam<QString> &feature_class = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &embed = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &output_style = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &items_per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  days qint32 [required]
    * @param[in]  feature_class QString [optional]
    * @param[in]  feature_category QString [optional]
    * @param[in]  feature_type QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  embed qint32 [optional]
    * @param[in]  output_style QString [optional]
    * @param[in]  items_per_page qint32 [optional]
    * @param[in]  start_index qint32 [optional]
    */
    virtual void namesDecisionsRecentGet(const QString &output_format, const qint32 &days, const ::OpenAPI::OptionalParam<QString> &feature_class = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &embed = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &output_style = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &items_per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  feature_class QString [optional]
    * @param[in]  feature_category QString [optional]
    * @param[in]  feature_type QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  embed qint32 [optional]
    * @param[in]  output_style QString [optional]
    * @param[in]  items_per_page qint32 [optional]
    * @param[in]  start_index qint32 [optional]
    */
    virtual void namesDecisionsYearGet(const QString &output_format, const qint32 &year, const ::OpenAPI::OptionalParam<QString> &feature_class = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &embed = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &output_style = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &items_per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  bbox QString [required]
    * @param[in]  feature_class QString [optional]
    * @param[in]  feature_category QString [optional]
    * @param[in]  feature_type QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  embed qint32 [optional]
    * @param[in]  output_style QString [optional]
    * @param[in]  items_per_page qint32 [optional]
    * @param[in]  start_index qint32 [optional]
    */
    virtual void namesInsideGet(const QString &output_format, const QString &bbox, const ::OpenAPI::OptionalParam<QString> &feature_class = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &embed = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &output_style = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &items_per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  name_id qint32 [required]
    * @param[in]  output_format QString [required]
    */
    virtual void namesNameIdOutputFormatGet(const qint32 &name_id, const QString &output_format);

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  feature_point QString [required]
    * @param[in]  distance QString [required]
    * @param[in]  feature_class QString [optional]
    * @param[in]  feature_category QString [optional]
    * @param[in]  feature_type QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  embed qint32 [optional]
    * @param[in]  output_style QString [optional]
    * @param[in]  items_per_page qint32 [optional]
    * @param[in]  start_index qint32 [optional]
    */
    virtual void namesNearGet(const QString &output_format, const QString &feature_point, const QString &distance, const ::OpenAPI::OptionalParam<QString> &feature_class = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &embed = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &output_style = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &items_per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  name QString [required]
    * @param[in]  exact_spelling qint32 [optional]
    * @param[in]  feature_class QString [optional]
    * @param[in]  feature_category QString [optional]
    * @param[in]  feature_type QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  embed qint32 [optional]
    * @param[in]  output_style QString [optional]
    * @param[in]  items_per_page qint32 [optional]
    * @param[in]  start_index qint32 [optional]
    */
    virtual void namesNotOfficialSearchGet(const QString &output_format, const QString &name, const ::OpenAPI::OptionalParam<qint32> &exact_spelling = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &feature_class = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &embed = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &output_style = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &items_per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  name QString [required]
    * @param[in]  exact_spelling qint32 [optional]
    * @param[in]  feature_class QString [optional]
    * @param[in]  feature_category QString [optional]
    * @param[in]  feature_type QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  embed qint32 [optional]
    * @param[in]  output_style QString [optional]
    * @param[in]  items_per_page qint32 [optional]
    * @param[in]  start_index qint32 [optional]
    */
    virtual void namesOfficialSearchGet(const QString &output_format, const QString &name, const ::OpenAPI::OptionalParam<qint32> &exact_spelling = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &feature_class = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &embed = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &output_style = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &items_per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  name QString [required]
    * @param[in]  exact_spelling qint32 [optional]
    * @param[in]  feature_class QString [optional]
    * @param[in]  feature_category QString [optional]
    * @param[in]  feature_type QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  embed qint32 [optional]
    * @param[in]  output_style QString [optional]
    * @param[in]  items_per_page qint32 [optional]
    * @param[in]  start_index qint32 [optional]
    */
    virtual void namesSearchGet(const QString &output_format, const QString &name, const ::OpenAPI::OptionalParam<qint32> &exact_spelling = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &feature_class = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feature_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &embed = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &output_style = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &items_per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void namesChangesGetCallback(OAIHttpRequestWorker *worker);
    void namesDecisionsRecentGetCallback(OAIHttpRequestWorker *worker);
    void namesDecisionsYearGetCallback(OAIHttpRequestWorker *worker);
    void namesInsideGetCallback(OAIHttpRequestWorker *worker);
    void namesNameIdOutputFormatGetCallback(OAIHttpRequestWorker *worker);
    void namesNearGetCallback(OAIHttpRequestWorker *worker);
    void namesNotOfficialSearchGetCallback(OAIHttpRequestWorker *worker);
    void namesOfficialSearchGetCallback(OAIHttpRequestWorker *worker);
    void namesSearchGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void namesChangesGetSignal();
    void namesDecisionsRecentGetSignal();
    void namesDecisionsYearGetSignal();
    void namesInsideGetSignal();
    void namesNameIdOutputFormatGetSignal();
    void namesNearGetSignal();
    void namesNotOfficialSearchGetSignal();
    void namesOfficialSearchGetSignal();
    void namesSearchGetSignal();


    void namesChangesGetSignalFull(OAIHttpRequestWorker *worker);
    void namesDecisionsRecentGetSignalFull(OAIHttpRequestWorker *worker);
    void namesDecisionsYearGetSignalFull(OAIHttpRequestWorker *worker);
    void namesInsideGetSignalFull(OAIHttpRequestWorker *worker);
    void namesNameIdOutputFormatGetSignalFull(OAIHttpRequestWorker *worker);
    void namesNearGetSignalFull(OAIHttpRequestWorker *worker);
    void namesNotOfficialSearchGetSignalFull(OAIHttpRequestWorker *worker);
    void namesOfficialSearchGetSignalFull(OAIHttpRequestWorker *worker);
    void namesSearchGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use namesChangesGetSignalError() instead")
    void namesChangesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void namesChangesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesDecisionsRecentGetSignalError() instead")
    void namesDecisionsRecentGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void namesDecisionsRecentGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesDecisionsYearGetSignalError() instead")
    void namesDecisionsYearGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void namesDecisionsYearGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesInsideGetSignalError() instead")
    void namesInsideGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void namesInsideGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesNameIdOutputFormatGetSignalError() instead")
    void namesNameIdOutputFormatGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void namesNameIdOutputFormatGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesNearGetSignalError() instead")
    void namesNearGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void namesNearGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesNotOfficialSearchGetSignalError() instead")
    void namesNotOfficialSearchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void namesNotOfficialSearchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesOfficialSearchGetSignalError() instead")
    void namesOfficialSearchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void namesOfficialSearchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesSearchGetSignalError() instead")
    void namesSearchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void namesSearchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use namesChangesGetSignalErrorFull() instead")
    void namesChangesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namesChangesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesDecisionsRecentGetSignalErrorFull() instead")
    void namesDecisionsRecentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namesDecisionsRecentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesDecisionsYearGetSignalErrorFull() instead")
    void namesDecisionsYearGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namesDecisionsYearGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesInsideGetSignalErrorFull() instead")
    void namesInsideGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namesInsideGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesNameIdOutputFormatGetSignalErrorFull() instead")
    void namesNameIdOutputFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namesNameIdOutputFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesNearGetSignalErrorFull() instead")
    void namesNearGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namesNearGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesNotOfficialSearchGetSignalErrorFull() instead")
    void namesNotOfficialSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namesNotOfficialSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesOfficialSearchGetSignalErrorFull() instead")
    void namesOfficialSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namesOfficialSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesSearchGetSignalErrorFull() instead")
    void namesSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namesSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
