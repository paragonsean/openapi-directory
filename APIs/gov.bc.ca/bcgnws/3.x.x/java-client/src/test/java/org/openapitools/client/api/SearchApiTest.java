/*
 * BC Geographical Names Web Service - REST API
 * This REST API provides searchable access to information about geographical names in the province of British Columbia, including name status and details about the corresponding geographic feature.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 3.x.x
 * Contact: geographical.names@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SearchApi
 */
@Disabled
public class SearchApiTest {

    private final SearchApi api = new SearchApi();

    /**
     * Search for names with metadata changes in a given period
     *
     * Search for information about geographical names which have changed most recently within a specified time window.  Changes may include status cupdates and metadata corrections.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namesChangesGetTest() throws ApiException {
        String outputFormat = null;
        Integer fromDate = null;
        Integer toDate = null;
        String featureClass = null;
        String featureCategory = null;
        String featureType = null;
        String sortBy = null;
        Integer outputSRS = null;
        Integer embed = null;
        String outputStyle = null;
        Integer itemsPerPage = null;
        Integer startIndex = null;
        api.namesChangesGet(outputFormat, fromDate, toDate, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex);
        // TODO: test validations
    }

    /**
     * Search for names affected by recent naming decision
     *
     * Search for information about geographical names affected by naming &#39;decisions&#39; made by the BC Geographical Names Office (naming authority) within the last X days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namesDecisionsRecentGetTest() throws ApiException {
        String outputFormat = null;
        Integer days = null;
        String featureClass = null;
        String featureCategory = null;
        String featureType = null;
        String sortBy = null;
        Integer outputSRS = null;
        Integer embed = null;
        String outputStyle = null;
        Integer itemsPerPage = null;
        Integer startIndex = null;
        api.namesDecisionsRecentGet(outputFormat, days, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex);
        // TODO: test validations
    }

    /**
     * Search for names affected by naming decisions in a given year
     *
     * Search for information about geographical names affected by naming &#39;decisions&#39; made by the BC Geographical Names Office (naming authority) in a given year.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namesDecisionsYearGetTest() throws ApiException {
        String outputFormat = null;
        Integer year = null;
        String featureClass = null;
        String featureCategory = null;
        String featureType = null;
        String sortBy = null;
        Integer outputSRS = null;
        Integer embed = null;
        String outputStyle = null;
        Integer itemsPerPage = null;
        Integer startIndex = null;
        api.namesDecisionsYearGet(outputFormat, year, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex);
        // TODO: test validations
    }

    /**
     * Search in a geographic area
     *
     * Search for information about geographical names that correspond to features within a geographic bounding box.  Various options and filter parameters are available to refine the search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namesInsideGetTest() throws ApiException {
        String outputFormat = null;
        String bbox = null;
        String featureClass = null;
        String featureCategory = null;
        String featureType = null;
        String sortBy = null;
        Integer outputSRS = null;
        Integer embed = null;
        String outputStyle = null;
        Integer itemsPerPage = null;
        Integer startIndex = null;
        api.namesInsideGet(outputFormat, bbox, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex);
        // TODO: test validations
    }

    /**
     * Search near to a geographic point
     *
     * Search for information about geographical names that correspond to features within a geographic area defined by a centre point and a radius.  Various options and filter parameters are available to refine the search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namesNearGetTest() throws ApiException {
        String outputFormat = null;
        String featurePoint = null;
        String distance = null;
        String featureClass = null;
        String featureCategory = null;
        String featureType = null;
        String sortBy = null;
        Integer outputSRS = null;
        Integer embed = null;
        String outputStyle = null;
        Integer itemsPerPage = null;
        Integer startIndex = null;
        api.namesNearGet(outputFormat, featurePoint, distance, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex);
        // TODO: test validations
    }

    /**
     * Search by name, limit to unofficial names only
     *
     * Search for information about unofficial geographical names by the text of the name itself.  Various options and filter parameters are available to refine the search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namesNotOfficialSearchGetTest() throws ApiException {
        String outputFormat = null;
        String name = null;
        Integer exactSpelling = null;
        String featureClass = null;
        String featureCategory = null;
        String featureType = null;
        String sortBy = null;
        Integer outputSRS = null;
        Integer embed = null;
        String outputStyle = null;
        Integer itemsPerPage = null;
        Integer startIndex = null;
        api.namesNotOfficialSearchGet(outputFormat, name, exactSpelling, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex);
        // TODO: test validations
    }

    /**
     * Search by name, limit to official names only
     *
     * Search for information about official geographical names by the text of the name itself.  Various options and filter parameters are available to refine the search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namesOfficialSearchGetTest() throws ApiException {
        String outputFormat = null;
        String name = null;
        Integer exactSpelling = null;
        String featureClass = null;
        String featureCategory = null;
        String featureType = null;
        String sortBy = null;
        Integer outputSRS = null;
        Integer embed = null;
        String outputStyle = null;
        Integer itemsPerPage = null;
        Integer startIndex = null;
        api.namesOfficialSearchGet(outputFormat, name, exactSpelling, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex);
        // TODO: test validations
    }

    /**
     * Search by name
     *
     * Search for information about geographical names by the text of the name itself.  The response will include both official and unofficial names.  Various options and filter parameters are available to refine the search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namesSearchGetTest() throws ApiException {
        String outputFormat = null;
        String name = null;
        Integer exactSpelling = null;
        String featureClass = null;
        String featureCategory = null;
        String featureType = null;
        String sortBy = null;
        Integer outputSRS = null;
        Integer embed = null;
        String outputStyle = null;
        Integer itemsPerPage = null;
        Integer startIndex = null;
        api.namesSearchGet(outputFormat, name, exactSpelling, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex);
        // TODO: test validations
    }

}
