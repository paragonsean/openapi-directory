/*
 * BC Geographical Names Web Service - REST API
 * This REST API provides searchable access to information about geographical names in the province of British Columbia, including name status and details about the corresponding geographic feature.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 3.x.x
 * Contact: geographical.names@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NameApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NameApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NameApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for namesChangesGet_0
     * @param outputFormat The format of the output. (required)
     * @param fromDate Defines the earliest date (YYYY-MM-DD format) of the change time window for the search (required)
     * @param toDate Defines the latest date (YYYY-MM-DD format) of the change time window for the search (required)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to name)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesChangesGet_0Call(String outputFormat, Integer fromDate, Integer toDate, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/names/changes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (outputFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputFormat", outputFormat));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (featureClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureClass", featureClass));
        }

        if (featureCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureCategory", featureCategory));
        }

        if (featureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureType", featureType));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (embed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embed", embed));
        }

        if (outputStyle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputStyle", outputStyle));
        }

        if (itemsPerPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemsPerPage", itemsPerPage));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namesChangesGet_0ValidateBeforeCall(String outputFormat, Integer fromDate, Integer toDate, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling namesChangesGet_0(Async)");
        }

        // verify the required parameter 'fromDate' is set
        if (fromDate == null) {
            throw new ApiException("Missing the required parameter 'fromDate' when calling namesChangesGet_0(Async)");
        }

        // verify the required parameter 'toDate' is set
        if (toDate == null) {
            throw new ApiException("Missing the required parameter 'toDate' when calling namesChangesGet_0(Async)");
        }

        return namesChangesGet_0Call(outputFormat, fromDate, toDate, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, _callback);

    }

    /**
     * Search for names with metadata changes in a given period
     * Search for information about geographical names which have changed most recently within a specified time window.  Changes may include status cupdates and metadata corrections.
     * @param outputFormat The format of the output. (required)
     * @param fromDate Defines the earliest date (YYYY-MM-DD format) of the change time window for the search (required)
     * @param toDate Defines the latest date (YYYY-MM-DD format) of the change time window for the search (required)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to name)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public void namesChangesGet_0(String outputFormat, Integer fromDate, Integer toDate, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex) throws ApiException {
        namesChangesGet_0WithHttpInfo(outputFormat, fromDate, toDate, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex);
    }

    /**
     * Search for names with metadata changes in a given period
     * Search for information about geographical names which have changed most recently within a specified time window.  Changes may include status cupdates and metadata corrections.
     * @param outputFormat The format of the output. (required)
     * @param fromDate Defines the earliest date (YYYY-MM-DD format) of the change time window for the search (required)
     * @param toDate Defines the latest date (YYYY-MM-DD format) of the change time window for the search (required)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to name)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> namesChangesGet_0WithHttpInfo(String outputFormat, Integer fromDate, Integer toDate, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = namesChangesGet_0ValidateBeforeCall(outputFormat, fromDate, toDate, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search for names with metadata changes in a given period (asynchronously)
     * Search for information about geographical names which have changed most recently within a specified time window.  Changes may include status cupdates and metadata corrections.
     * @param outputFormat The format of the output. (required)
     * @param fromDate Defines the earliest date (YYYY-MM-DD format) of the change time window for the search (required)
     * @param toDate Defines the latest date (YYYY-MM-DD format) of the change time window for the search (required)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to name)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesChangesGet_0Async(String outputFormat, Integer fromDate, Integer toDate, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = namesChangesGet_0ValidateBeforeCall(outputFormat, fromDate, toDate, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for namesDecisionsRecentGet_0
     * @param outputFormat The format of the output. (required)
     * @param days The number of days used to define the time window of naming decisions to search.  The number is interpreted as searching for &#39;names affected by decisions within the last X days&#39;. (required)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to name)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesDecisionsRecentGet_0Call(String outputFormat, Integer days, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/names/decisions/recent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (outputFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputFormat", outputFormat));
        }

        if (days != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("days", days));
        }

        if (featureClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureClass", featureClass));
        }

        if (featureCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureCategory", featureCategory));
        }

        if (featureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureType", featureType));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (embed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embed", embed));
        }

        if (outputStyle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputStyle", outputStyle));
        }

        if (itemsPerPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemsPerPage", itemsPerPage));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namesDecisionsRecentGet_0ValidateBeforeCall(String outputFormat, Integer days, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling namesDecisionsRecentGet_0(Async)");
        }

        // verify the required parameter 'days' is set
        if (days == null) {
            throw new ApiException("Missing the required parameter 'days' when calling namesDecisionsRecentGet_0(Async)");
        }

        return namesDecisionsRecentGet_0Call(outputFormat, days, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, _callback);

    }

    /**
     * Search for names affected by recent naming decision
     * Search for information about geographical names affected by naming &#39;decisions&#39; made by the BC Geographical Names Office (naming authority) within the last X days.
     * @param outputFormat The format of the output. (required)
     * @param days The number of days used to define the time window of naming decisions to search.  The number is interpreted as searching for &#39;names affected by decisions within the last X days&#39;. (required)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to name)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public void namesDecisionsRecentGet_0(String outputFormat, Integer days, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex) throws ApiException {
        namesDecisionsRecentGet_0WithHttpInfo(outputFormat, days, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex);
    }

    /**
     * Search for names affected by recent naming decision
     * Search for information about geographical names affected by naming &#39;decisions&#39; made by the BC Geographical Names Office (naming authority) within the last X days.
     * @param outputFormat The format of the output. (required)
     * @param days The number of days used to define the time window of naming decisions to search.  The number is interpreted as searching for &#39;names affected by decisions within the last X days&#39;. (required)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to name)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> namesDecisionsRecentGet_0WithHttpInfo(String outputFormat, Integer days, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = namesDecisionsRecentGet_0ValidateBeforeCall(outputFormat, days, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search for names affected by recent naming decision (asynchronously)
     * Search for information about geographical names affected by naming &#39;decisions&#39; made by the BC Geographical Names Office (naming authority) within the last X days.
     * @param outputFormat The format of the output. (required)
     * @param days The number of days used to define the time window of naming decisions to search.  The number is interpreted as searching for &#39;names affected by decisions within the last X days&#39;. (required)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to name)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesDecisionsRecentGet_0Async(String outputFormat, Integer days, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = namesDecisionsRecentGet_0ValidateBeforeCall(outputFormat, days, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for namesDecisionsYearGet_0
     * @param outputFormat The format of the output. (required)
     * @param year The year in which to search for names affected by naming decisions&#39;. (required)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to name)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesDecisionsYearGet_0Call(String outputFormat, Integer year, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/names/decisions/year";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (outputFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputFormat", outputFormat));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (featureClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureClass", featureClass));
        }

        if (featureCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureCategory", featureCategory));
        }

        if (featureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureType", featureType));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (embed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embed", embed));
        }

        if (outputStyle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputStyle", outputStyle));
        }

        if (itemsPerPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemsPerPage", itemsPerPage));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namesDecisionsYearGet_0ValidateBeforeCall(String outputFormat, Integer year, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling namesDecisionsYearGet_0(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling namesDecisionsYearGet_0(Async)");
        }

        return namesDecisionsYearGet_0Call(outputFormat, year, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, _callback);

    }

    /**
     * Search for names affected by naming decisions in a given year
     * Search for information about geographical names affected by naming &#39;decisions&#39; made by the BC Geographical Names Office (naming authority) in a given year.
     * @param outputFormat The format of the output. (required)
     * @param year The year in which to search for names affected by naming decisions&#39;. (required)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to name)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public void namesDecisionsYearGet_0(String outputFormat, Integer year, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex) throws ApiException {
        namesDecisionsYearGet_0WithHttpInfo(outputFormat, year, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex);
    }

    /**
     * Search for names affected by naming decisions in a given year
     * Search for information about geographical names affected by naming &#39;decisions&#39; made by the BC Geographical Names Office (naming authority) in a given year.
     * @param outputFormat The format of the output. (required)
     * @param year The year in which to search for names affected by naming decisions&#39;. (required)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to name)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> namesDecisionsYearGet_0WithHttpInfo(String outputFormat, Integer year, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = namesDecisionsYearGet_0ValidateBeforeCall(outputFormat, year, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search for names affected by naming decisions in a given year (asynchronously)
     * Search for information about geographical names affected by naming &#39;decisions&#39; made by the BC Geographical Names Office (naming authority) in a given year.
     * @param outputFormat The format of the output. (required)
     * @param year The year in which to search for names affected by naming decisions&#39;. (required)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to name)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesDecisionsYearGet_0Async(String outputFormat, Integer year, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = namesDecisionsYearGet_0ValidateBeforeCall(outputFormat, year, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for namesInsideGet_0
     * @param outputFormat The format of the output. (required)
     * @param bbox A geographic bounding box defining the search area.  Must be specified as a string of the form &#39;minLongitude,minLatitude,maxLongitude,maxLatitude&#39; (WGS84). e.g. -119,49,-118,50 (required)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to name)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesInsideGet_0Call(String outputFormat, String bbox, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/names/inside";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (outputFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputFormat", outputFormat));
        }

        if (bbox != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bbox", bbox));
        }

        if (featureClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureClass", featureClass));
        }

        if (featureCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureCategory", featureCategory));
        }

        if (featureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureType", featureType));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (embed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embed", embed));
        }

        if (outputStyle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputStyle", outputStyle));
        }

        if (itemsPerPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemsPerPage", itemsPerPage));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namesInsideGet_0ValidateBeforeCall(String outputFormat, String bbox, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling namesInsideGet_0(Async)");
        }

        // verify the required parameter 'bbox' is set
        if (bbox == null) {
            throw new ApiException("Missing the required parameter 'bbox' when calling namesInsideGet_0(Async)");
        }

        return namesInsideGet_0Call(outputFormat, bbox, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, _callback);

    }

    /**
     * Search in a geographic area
     * Search for information about geographical names that correspond to features within a geographic bounding box.  Various options and filter parameters are available to refine the search.
     * @param outputFormat The format of the output. (required)
     * @param bbox A geographic bounding box defining the search area.  Must be specified as a string of the form &#39;minLongitude,minLatitude,maxLongitude,maxLatitude&#39; (WGS84). e.g. -119,49,-118,50 (required)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to name)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public void namesInsideGet_0(String outputFormat, String bbox, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex) throws ApiException {
        namesInsideGet_0WithHttpInfo(outputFormat, bbox, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex);
    }

    /**
     * Search in a geographic area
     * Search for information about geographical names that correspond to features within a geographic bounding box.  Various options and filter parameters are available to refine the search.
     * @param outputFormat The format of the output. (required)
     * @param bbox A geographic bounding box defining the search area.  Must be specified as a string of the form &#39;minLongitude,minLatitude,maxLongitude,maxLatitude&#39; (WGS84). e.g. -119,49,-118,50 (required)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to name)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> namesInsideGet_0WithHttpInfo(String outputFormat, String bbox, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = namesInsideGet_0ValidateBeforeCall(outputFormat, bbox, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search in a geographic area (asynchronously)
     * Search for information about geographical names that correspond to features within a geographic bounding box.  Various options and filter parameters are available to refine the search.
     * @param outputFormat The format of the output. (required)
     * @param bbox A geographic bounding box defining the search area.  Must be specified as a string of the form &#39;minLongitude,minLatitude,maxLongitude,maxLatitude&#39; (WGS84). e.g. -119,49,-118,50 (required)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to name)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesInsideGet_0Async(String outputFormat, String bbox, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = namesInsideGet_0ValidateBeforeCall(outputFormat, bbox, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for namesNameIdOutputFormatGet
     * @param nameId The unique identifier for a name (required)
     * @param outputFormat The format of the output. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about the name with the specified nameId </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The name with the given nameId doesn&#39;t exist, or the output format is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesNameIdOutputFormatGetCall(Integer nameId, String outputFormat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/names/{nameId}.{outputFormat}"
            .replace("{" + "nameId" + "}", localVarApiClient.escapeString(nameId.toString()))
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namesNameIdOutputFormatGetValidateBeforeCall(Integer nameId, String outputFormat, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nameId' is set
        if (nameId == null) {
            throw new ApiException("Missing the required parameter 'nameId' when calling namesNameIdOutputFormatGet(Async)");
        }

        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling namesNameIdOutputFormatGet(Async)");
        }

        return namesNameIdOutputFormatGetCall(nameId, outputFormat, _callback);

    }

    /**
     * Get a name by its nameId
     * Get information about the geographical name with the specified nameId.
     * @param nameId The unique identifier for a name (required)
     * @param outputFormat The format of the output. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about the name with the specified nameId </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The name with the given nameId doesn&#39;t exist, or the output format is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public void namesNameIdOutputFormatGet(Integer nameId, String outputFormat) throws ApiException {
        namesNameIdOutputFormatGetWithHttpInfo(nameId, outputFormat);
    }

    /**
     * Get a name by its nameId
     * Get information about the geographical name with the specified nameId.
     * @param nameId The unique identifier for a name (required)
     * @param outputFormat The format of the output. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about the name with the specified nameId </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The name with the given nameId doesn&#39;t exist, or the output format is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> namesNameIdOutputFormatGetWithHttpInfo(Integer nameId, String outputFormat) throws ApiException {
        okhttp3.Call localVarCall = namesNameIdOutputFormatGetValidateBeforeCall(nameId, outputFormat, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a name by its nameId (asynchronously)
     * Get information about the geographical name with the specified nameId.
     * @param nameId The unique identifier for a name (required)
     * @param outputFormat The format of the output. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about the name with the specified nameId </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The name with the given nameId doesn&#39;t exist, or the output format is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesNameIdOutputFormatGetAsync(Integer nameId, String outputFormat, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = namesNameIdOutputFormatGetValidateBeforeCall(nameId, outputFormat, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for namesNearGet_0
     * @param outputFormat The format of the output. (required)
     * @param featurePoint A geographic coordinate specifying the centre point of the search area.  Must be specified as a string of the form &#39;longitude,latitude&#39; (WGS84).  e.g. -120,51 (required)
     * @param distance A radius (in kilometres) around the centre point. (required)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to name)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesNearGet_0Call(String outputFormat, String featurePoint, String distance, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/names/near";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (outputFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputFormat", outputFormat));
        }

        if (featurePoint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featurePoint", featurePoint));
        }

        if (distance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distance", distance));
        }

        if (featureClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureClass", featureClass));
        }

        if (featureCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureCategory", featureCategory));
        }

        if (featureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureType", featureType));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (embed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embed", embed));
        }

        if (outputStyle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputStyle", outputStyle));
        }

        if (itemsPerPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemsPerPage", itemsPerPage));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namesNearGet_0ValidateBeforeCall(String outputFormat, String featurePoint, String distance, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling namesNearGet_0(Async)");
        }

        // verify the required parameter 'featurePoint' is set
        if (featurePoint == null) {
            throw new ApiException("Missing the required parameter 'featurePoint' when calling namesNearGet_0(Async)");
        }

        // verify the required parameter 'distance' is set
        if (distance == null) {
            throw new ApiException("Missing the required parameter 'distance' when calling namesNearGet_0(Async)");
        }

        return namesNearGet_0Call(outputFormat, featurePoint, distance, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, _callback);

    }

    /**
     * Search near to a geographic point
     * Search for information about geographical names that correspond to features within a geographic area defined by a centre point and a radius.  Various options and filter parameters are available to refine the search.
     * @param outputFormat The format of the output. (required)
     * @param featurePoint A geographic coordinate specifying the centre point of the search area.  Must be specified as a string of the form &#39;longitude,latitude&#39; (WGS84).  e.g. -120,51 (required)
     * @param distance A radius (in kilometres) around the centre point. (required)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to name)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public void namesNearGet_0(String outputFormat, String featurePoint, String distance, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex) throws ApiException {
        namesNearGet_0WithHttpInfo(outputFormat, featurePoint, distance, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex);
    }

    /**
     * Search near to a geographic point
     * Search for information about geographical names that correspond to features within a geographic area defined by a centre point and a radius.  Various options and filter parameters are available to refine the search.
     * @param outputFormat The format of the output. (required)
     * @param featurePoint A geographic coordinate specifying the centre point of the search area.  Must be specified as a string of the form &#39;longitude,latitude&#39; (WGS84).  e.g. -120,51 (required)
     * @param distance A radius (in kilometres) around the centre point. (required)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to name)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> namesNearGet_0WithHttpInfo(String outputFormat, String featurePoint, String distance, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = namesNearGet_0ValidateBeforeCall(outputFormat, featurePoint, distance, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search near to a geographic point (asynchronously)
     * Search for information about geographical names that correspond to features within a geographic area defined by a centre point and a radius.  Various options and filter parameters are available to refine the search.
     * @param outputFormat The format of the output. (required)
     * @param featurePoint A geographic coordinate specifying the centre point of the search area.  Must be specified as a string of the form &#39;longitude,latitude&#39; (WGS84).  e.g. -120,51 (required)
     * @param distance A radius (in kilometres) around the centre point. (required)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to name)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesNearGet_0Async(String outputFormat, String featurePoint, String distance, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = namesNearGet_0ValidateBeforeCall(outputFormat, featurePoint, distance, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for namesNotOfficialSearchGet_0
     * @param outputFormat The format of the output. (required)
     * @param name A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example &#39;vancouv*&#39; (required)
     * @param exactSpelling If the &#39;name&#39; parameter is specified, &#39;exactSpelling&#39; specifies whether to include only names that exactly match the search text (exactSpelling&#x3D;1), or whether to also include names with similar spellings (exactSpelling&#x3D;0) (optional, default to 0)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to relevance)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesNotOfficialSearchGet_0Call(String outputFormat, String name, Integer exactSpelling, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/names/notOfficial/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (outputFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputFormat", outputFormat));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (exactSpelling != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exactSpelling", exactSpelling));
        }

        if (featureClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureClass", featureClass));
        }

        if (featureCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureCategory", featureCategory));
        }

        if (featureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureType", featureType));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (embed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embed", embed));
        }

        if (outputStyle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputStyle", outputStyle));
        }

        if (itemsPerPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemsPerPage", itemsPerPage));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namesNotOfficialSearchGet_0ValidateBeforeCall(String outputFormat, String name, Integer exactSpelling, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling namesNotOfficialSearchGet_0(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling namesNotOfficialSearchGet_0(Async)");
        }

        return namesNotOfficialSearchGet_0Call(outputFormat, name, exactSpelling, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, _callback);

    }

    /**
     * Search by name, limit to unofficial names only
     * Search for information about unofficial geographical names by the text of the name itself.  Various options and filter parameters are available to refine the search.
     * @param outputFormat The format of the output. (required)
     * @param name A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example &#39;vancouv*&#39; (required)
     * @param exactSpelling If the &#39;name&#39; parameter is specified, &#39;exactSpelling&#39; specifies whether to include only names that exactly match the search text (exactSpelling&#x3D;1), or whether to also include names with similar spellings (exactSpelling&#x3D;0) (optional, default to 0)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to relevance)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public void namesNotOfficialSearchGet_0(String outputFormat, String name, Integer exactSpelling, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex) throws ApiException {
        namesNotOfficialSearchGet_0WithHttpInfo(outputFormat, name, exactSpelling, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex);
    }

    /**
     * Search by name, limit to unofficial names only
     * Search for information about unofficial geographical names by the text of the name itself.  Various options and filter parameters are available to refine the search.
     * @param outputFormat The format of the output. (required)
     * @param name A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example &#39;vancouv*&#39; (required)
     * @param exactSpelling If the &#39;name&#39; parameter is specified, &#39;exactSpelling&#39; specifies whether to include only names that exactly match the search text (exactSpelling&#x3D;1), or whether to also include names with similar spellings (exactSpelling&#x3D;0) (optional, default to 0)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to relevance)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> namesNotOfficialSearchGet_0WithHttpInfo(String outputFormat, String name, Integer exactSpelling, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = namesNotOfficialSearchGet_0ValidateBeforeCall(outputFormat, name, exactSpelling, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search by name, limit to unofficial names only (asynchronously)
     * Search for information about unofficial geographical names by the text of the name itself.  Various options and filter parameters are available to refine the search.
     * @param outputFormat The format of the output. (required)
     * @param name A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example &#39;vancouv*&#39; (required)
     * @param exactSpelling If the &#39;name&#39; parameter is specified, &#39;exactSpelling&#39; specifies whether to include only names that exactly match the search text (exactSpelling&#x3D;1), or whether to also include names with similar spellings (exactSpelling&#x3D;0) (optional, default to 0)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to relevance)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesNotOfficialSearchGet_0Async(String outputFormat, String name, Integer exactSpelling, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = namesNotOfficialSearchGet_0ValidateBeforeCall(outputFormat, name, exactSpelling, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for namesOfficialSearchGet_0
     * @param outputFormat The format of the output. (required)
     * @param name A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example &#39;vancouv*&#39; (required)
     * @param exactSpelling If the &#39;name&#39; parameter is specified, &#39;exactSpelling&#39; specifies whether to include only names that exactly match the search text (exactSpelling&#x3D;1), or whether to also include names with similar spellings (exactSpelling&#x3D;0) (optional, default to 0)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to relevance)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesOfficialSearchGet_0Call(String outputFormat, String name, Integer exactSpelling, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/names/official/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (outputFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputFormat", outputFormat));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (exactSpelling != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exactSpelling", exactSpelling));
        }

        if (featureClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureClass", featureClass));
        }

        if (featureCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureCategory", featureCategory));
        }

        if (featureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureType", featureType));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (embed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embed", embed));
        }

        if (outputStyle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputStyle", outputStyle));
        }

        if (itemsPerPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemsPerPage", itemsPerPage));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namesOfficialSearchGet_0ValidateBeforeCall(String outputFormat, String name, Integer exactSpelling, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling namesOfficialSearchGet_0(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling namesOfficialSearchGet_0(Async)");
        }

        return namesOfficialSearchGet_0Call(outputFormat, name, exactSpelling, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, _callback);

    }

    /**
     * Search by name, limit to official names only
     * Search for information about official geographical names by the text of the name itself.  Various options and filter parameters are available to refine the search.
     * @param outputFormat The format of the output. (required)
     * @param name A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example &#39;vancouv*&#39; (required)
     * @param exactSpelling If the &#39;name&#39; parameter is specified, &#39;exactSpelling&#39; specifies whether to include only names that exactly match the search text (exactSpelling&#x3D;1), or whether to also include names with similar spellings (exactSpelling&#x3D;0) (optional, default to 0)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to relevance)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public void namesOfficialSearchGet_0(String outputFormat, String name, Integer exactSpelling, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex) throws ApiException {
        namesOfficialSearchGet_0WithHttpInfo(outputFormat, name, exactSpelling, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex);
    }

    /**
     * Search by name, limit to official names only
     * Search for information about official geographical names by the text of the name itself.  Various options and filter parameters are available to refine the search.
     * @param outputFormat The format of the output. (required)
     * @param name A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example &#39;vancouv*&#39; (required)
     * @param exactSpelling If the &#39;name&#39; parameter is specified, &#39;exactSpelling&#39; specifies whether to include only names that exactly match the search text (exactSpelling&#x3D;1), or whether to also include names with similar spellings (exactSpelling&#x3D;0) (optional, default to 0)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to relevance)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> namesOfficialSearchGet_0WithHttpInfo(String outputFormat, String name, Integer exactSpelling, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = namesOfficialSearchGet_0ValidateBeforeCall(outputFormat, name, exactSpelling, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search by name, limit to official names only (asynchronously)
     * Search for information about official geographical names by the text of the name itself.  Various options and filter parameters are available to refine the search.
     * @param outputFormat The format of the output. (required)
     * @param name A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example &#39;vancouv*&#39; (required)
     * @param exactSpelling If the &#39;name&#39; parameter is specified, &#39;exactSpelling&#39; specifies whether to include only names that exactly match the search text (exactSpelling&#x3D;1), or whether to also include names with similar spellings (exactSpelling&#x3D;0) (optional, default to 0)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to relevance)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesOfficialSearchGet_0Async(String outputFormat, String name, Integer exactSpelling, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = namesOfficialSearchGet_0ValidateBeforeCall(outputFormat, name, exactSpelling, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for namesSearchGet_0
     * @param outputFormat The format of the output. (required)
     * @param name A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example &#39;vancouv*&#39; (required)
     * @param exactSpelling If the &#39;name&#39; parameter is specified, &#39;exactSpelling&#39; specifies whether to include only names that exactly match the search text (exactSpelling&#x3D;1), or whether to also include names with similar spellings (exactSpelling&#x3D;0) (optional, default to 0)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to relevance)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesSearchGet_0Call(String outputFormat, String name, Integer exactSpelling, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/names/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (outputFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputFormat", outputFormat));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (exactSpelling != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exactSpelling", exactSpelling));
        }

        if (featureClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureClass", featureClass));
        }

        if (featureCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureCategory", featureCategory));
        }

        if (featureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featureType", featureType));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (embed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embed", embed));
        }

        if (outputStyle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputStyle", outputStyle));
        }

        if (itemsPerPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemsPerPage", itemsPerPage));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call namesSearchGet_0ValidateBeforeCall(String outputFormat, String name, Integer exactSpelling, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling namesSearchGet_0(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling namesSearchGet_0(Async)");
        }

        return namesSearchGet_0Call(outputFormat, name, exactSpelling, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, _callback);

    }

    /**
     * Search by name
     * Search for information about geographical names by the text of the name itself.  The response will include both official and unofficial names.  Various options and filter parameters are available to refine the search.
     * @param outputFormat The format of the output. (required)
     * @param name A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example &#39;vancouv*&#39; (required)
     * @param exactSpelling If the &#39;name&#39; parameter is specified, &#39;exactSpelling&#39; specifies whether to include only names that exactly match the search text (exactSpelling&#x3D;1), or whether to also include names with similar spellings (exactSpelling&#x3D;0) (optional, default to 0)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to relevance)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public void namesSearchGet_0(String outputFormat, String name, Integer exactSpelling, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex) throws ApiException {
        namesSearchGet_0WithHttpInfo(outputFormat, name, exactSpelling, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex);
    }

    /**
     * Search by name
     * Search for information about geographical names by the text of the name itself.  The response will include both official and unofficial names.  Various options and filter parameters are available to refine the search.
     * @param outputFormat The format of the output. (required)
     * @param name A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example &#39;vancouv*&#39; (required)
     * @param exactSpelling If the &#39;name&#39; parameter is specified, &#39;exactSpelling&#39; specifies whether to include only names that exactly match the search text (exactSpelling&#x3D;1), or whether to also include names with similar spellings (exactSpelling&#x3D;0) (optional, default to 0)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to relevance)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> namesSearchGet_0WithHttpInfo(String outputFormat, String name, Integer exactSpelling, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = namesSearchGet_0ValidateBeforeCall(outputFormat, name, exactSpelling, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search by name (asynchronously)
     * Search for information about geographical names by the text of the name itself.  The response will include both official and unofficial names.  Various options and filter parameters are available to refine the search.
     * @param outputFormat The format of the output. (required)
     * @param name A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example &#39;vancouv*&#39; (required)
     * @param exactSpelling If the &#39;name&#39; parameter is specified, &#39;exactSpelling&#39; specifies whether to include only names that exactly match the search text (exactSpelling&#x3D;1), or whether to also include names with similar spellings (exactSpelling&#x3D;0) (optional, default to 0)
     * @param featureClass A filter to limit the search to names associated with features of a certain &#39;class&#39;  The value of this parameter should be a &#39;featureClassCode&#39; value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included. (optional, default to *)
     * @param featureCategory A filter to limit the search to names associated with features of a certain &#39;category&#39;  The value of this parameter should be a &#39;featureCategoryCode&#39; value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included. (optional, default to *)
     * @param featureType A filter to limit the search to names associated with features of a certain &#39;type&#39;  The value of this parameter should be a &#39;featureTypeCode&#39; value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included (optional, default to *)
     * @param sortBy The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint. (optional, default to relevance)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. (optional, default to 4326)
     * @param embed A flag to indicate whether to embed the corresponding &#39;feature&#39; into each matching name (optional)
     * @param outputStyle A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail) (optional, default to summary)
     * @param itemsPerPage The number of search results to return (1-200) (optional, default to 20)
     * @param startIndex The index of the first record to be returned (&gt;&#x3D; 1) (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of names matching the search criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A required parameter is missing or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call namesSearchGet_0Async(String outputFormat, String name, Integer exactSpelling, String featureClass, String featureCategory, String featureType, String sortBy, Integer outputSRS, Integer embed, String outputStyle, Integer itemsPerPage, Integer startIndex, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = namesSearchGet_0ValidateBeforeCall(outputFormat, name, exactSpelling, featureClass, featureCategory, featureType, sortBy, outputSRS, embed, outputStyle, itemsPerPage, startIndex, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
