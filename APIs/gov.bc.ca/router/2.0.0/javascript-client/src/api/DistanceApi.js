/**
 * BC Route Planner REST API
 * Finds shortest/fastest route between a start point and one or more stop points on British Columbia's public road network. The BC Route planner [webpage](https://www2.gov.bc.ca/gov/content?id=9D99E684CCD042CD88FADC51E079B4B5) provides additional information.  Here are some geocoded addresses to play with:<br>18 Douglas St,Victoria -123.36962,48.40892<br>1002 Johnson St, Victoria -123.355745,48.426206<br>543 Johnson St, Victoria, BC -123.36907,48.42770 <br>14 Centennial Sq, Victoria, BC -123.36564,48.42863<br>1105 Royal Ave,New Westminster  -122.92009,49.20063<br>808 Jackson Cres, New Westminster -122.90762,49.22558<br>10810 McDonald Rd, Chilliwack -121.93808,49.19859<br>3950 June Springs Rd, Kelowna -119.40751,49.83960<br>1201 Riondel Rd, Kootenay Bay -116.85402,49.74448<br>1201 Riondel Rd, Kootenay Bay -116.832759,49.730500 (parcelPoint)<br>2499 Walbran Pl, Courtenay -124.97295,49.71518<br>2013 Smoke Bluff Rd, Squamish -123.13946,49.70401<br>235 Kelvin Grove Way, Lions Bay -123.23524,49.45035<br>   Please see our <a href=https://github.com/bcgov/api-specs/blob/master/COLLECTION_NOTICE.md#collection-notice target=\"_blank\">data collection notice</a>.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.   [API keys](https://api.gov.bc.ca/devportal/api-directory/740) are unique and can be acquired with a GitHub or IDIR account.   
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Distance service.
* @module api/DistanceApi
* @version 2.0.0
*/
export default class DistanceApi {

    /**
    * Constructs a new DistanceApi. 
    * @alias module:api/DistanceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the distanceBetweenPairsOutputFormatGet operation.
     * @callback module:api/DistanceApi~distanceBetweenPairsOutputFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get distance and travel time between each pair of geographic points
     * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
     * @param {module:model/String} outputFormat Format of representation
     * @param {String} fromPoints A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>
     * @param {String} toPoints A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {module:model/String} [criteria = 'shortest')] Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
     * @param {module:model/String} [distanceUnit = 'km')] distance unit of measure (e.g., km, mi). Default is km.
     * @param {Date} [departure] departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
     * @param {Boolean} [correctSide = false)] If true, route starts and ends on same side of road as start and end points.Default is false.
     * @param {String} [disable = 'sc,tf,ev,td')] A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
     * @param {String} [routeDescription = 'Routing results')] Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
     * @param {Number} [maxPairs] The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
     * @param {module:api/DistanceApi~distanceBetweenPairsOutputFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    distanceBetweenPairsOutputFormatGet(outputFormat, fromPoints, toPoints, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling distanceBetweenPairsOutputFormatGet");
      }
      // verify the required parameter 'fromPoints' is set
      if (fromPoints === undefined || fromPoints === null) {
        throw new Error("Missing the required parameter 'fromPoints' when calling distanceBetweenPairsOutputFormatGet");
      }
      // verify the required parameter 'toPoints' is set
      if (toPoints === undefined || toPoints === null) {
        throw new Error("Missing the required parameter 'toPoints' when calling distanceBetweenPairsOutputFormatGet");
      }

      let pathParams = {
        'outputFormat': outputFormat
      };
      let queryParams = {
        'fromPoints': fromPoints,
        'toPoints': toPoints,
        'outputSRS': opts['outputSRS'],
        'criteria': opts['criteria'],
        'distanceUnit': opts['distanceUnit'],
        'departure': opts['departure'],
        'correctSide': opts['correctSide'],
        'disable': opts['disable'],
        'routeDescription': opts['routeDescription'],
        'maxPairs': opts['maxPairs']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/distance/betweenPairs.{outputFormat}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distanceBetweenPairsOutputFormatPost operation.
     * @callback module:api/DistanceApi~distanceBetweenPairsOutputFormatPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get distance and travel time between each pair of geographic points
     * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
     * @param {module:model/String} outputFormat Format of representation
     * @param {String} fromPoints A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>
     * @param {String} toPoints A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {module:model/String} [criteria = 'shortest')] Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
     * @param {module:model/String} [distanceUnit = 'km')] distance unit of measure (e.g., km, mi). Default is km.
     * @param {Date} [departure] departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
     * @param {Boolean} [correctSide = false)] If true, route starts and ends on same side of road as start and end points.Default is false.
     * @param {String} [disable = 'sc,tf,ev,td')] A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
     * @param {String} [routeDescription = 'Routing results')] Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
     * @param {Number} [maxPairs] The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
     * @param {module:api/DistanceApi~distanceBetweenPairsOutputFormatPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    distanceBetweenPairsOutputFormatPost(outputFormat, fromPoints, toPoints, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling distanceBetweenPairsOutputFormatPost");
      }
      // verify the required parameter 'fromPoints' is set
      if (fromPoints === undefined || fromPoints === null) {
        throw new Error("Missing the required parameter 'fromPoints' when calling distanceBetweenPairsOutputFormatPost");
      }
      // verify the required parameter 'toPoints' is set
      if (toPoints === undefined || toPoints === null) {
        throw new Error("Missing the required parameter 'toPoints' when calling distanceBetweenPairsOutputFormatPost");
      }

      let pathParams = {
        'outputFormat': outputFormat
      };
      let queryParams = {
        'fromPoints': fromPoints,
        'toPoints': toPoints,
        'outputSRS': opts['outputSRS'],
        'criteria': opts['criteria'],
        'distanceUnit': opts['distanceUnit'],
        'departure': opts['departure'],
        'correctSide': opts['correctSide'],
        'disable': opts['disable'],
        'routeDescription': opts['routeDescription'],
        'maxPairs': opts['maxPairs']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/distance/betweenPairs.{outputFormat}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distanceOutputFormatGet operation.
     * @callback module:api/DistanceApi~distanceOutputFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get distance and travel time between two geographic points
     * Represents the distance and time of the shortest or fastest path between given start and end points.
     * @param {module:model/String} outputFormat Format of representation
     * @param {String} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {module:model/String} [criteria = 'shortest')] Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
     * @param {module:model/String} [distanceUnit = 'km')] distance unit of measure (e.g., km, mi). Default is km.
     * @param {Boolean} [roundTrip = false)] If true, route ends at start point. Default is false.
     * @param {Date} [departure] departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
     * @param {Boolean} [correctSide = false)] If true, route starts and ends on same side of road as start and end points.Default is false.
     * @param {String} [disable = 'sc,tf,ev,td')] A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
     * @param {String} [routeDescription = 'Routing results')] Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
     * @param {module:api/DistanceApi~distanceOutputFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    distanceOutputFormatGet(outputFormat, points, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling distanceOutputFormatGet");
      }
      // verify the required parameter 'points' is set
      if (points === undefined || points === null) {
        throw new Error("Missing the required parameter 'points' when calling distanceOutputFormatGet");
      }

      let pathParams = {
        'outputFormat': outputFormat
      };
      let queryParams = {
        'points': points,
        'outputSRS': opts['outputSRS'],
        'criteria': opts['criteria'],
        'distanceUnit': opts['distanceUnit'],
        'roundTrip': opts['roundTrip'],
        'departure': opts['departure'],
        'correctSide': opts['correctSide'],
        'disable': opts['disable'],
        'routeDescription': opts['routeDescription']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/distance.{outputFormat}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distanceOutputFormatPost operation.
     * @callback module:api/DistanceApi~distanceOutputFormatPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get distance and travel time between two geographic points
     * Represents the distance and time of the shortest or fastest path between given start and end points.
     * @param {module:model/String} outputFormat Format of representation
     * @param {String} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {module:model/String} [criteria = 'shortest')] Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
     * @param {module:model/String} [distanceUnit = 'km')] distance unit of measure (e.g., km, mi). Default is km.
     * @param {Boolean} [roundTrip = false)] If true, route ends at start point. Default is false.
     * @param {Date} [departure] departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
     * @param {Boolean} [correctSide = false)] If true, route starts and ends on same side of road as start and end points.Default is false.
     * @param {String} [disable = 'sc,tf,ev,td')] A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
     * @param {String} [routeDescription = 'Routing results')] Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
     * @param {module:api/DistanceApi~distanceOutputFormatPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    distanceOutputFormatPost(outputFormat, points, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling distanceOutputFormatPost");
      }
      // verify the required parameter 'points' is set
      if (points === undefined || points === null) {
        throw new Error("Missing the required parameter 'points' when calling distanceOutputFormatPost");
      }

      let pathParams = {
        'outputFormat': outputFormat
      };
      let queryParams = {
        'points': points,
        'outputSRS': opts['outputSRS'],
        'criteria': opts['criteria'],
        'distanceUnit': opts['distanceUnit'],
        'roundTrip': opts['roundTrip'],
        'departure': opts['departure'],
        'correctSide': opts['correctSide'],
        'disable': opts['disable'],
        'routeDescription': opts['routeDescription']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/distance.{outputFormat}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the truckDistanceBetweenPairsOutputFormatGet operation.
     * @callback module:api/DistanceApi~truckDistanceBetweenPairsOutputFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get distance and travel time between each pair of geographic points for a commercial vehicle
     * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints for a commercial vehicle. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
     * @param {module:model/String} outputFormat Format of representation
     * @param {String} fromPoints A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>
     * @param {String} toPoints A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {module:model/String} [criteria = 'shortest')] Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
     * @param {module:model/String} [distanceUnit = 'km')] distance unit of measure (e.g., km, mi). Default is km.
     * @param {Date} [departure] departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
     * @param {Boolean} [correctSide = false)] If true, route starts and ends on same side of road as start and end points.Default is false.
     * @param {String} [disable = 'sc,tf,ev,td')] A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
     * @param {String} [routeDescription = 'Routing results')] Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
     * @param {Number} [maxPairs] The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
     * @param {module:api/DistanceApi~truckDistanceBetweenPairsOutputFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    truckDistanceBetweenPairsOutputFormatGet(outputFormat, fromPoints, toPoints, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling truckDistanceBetweenPairsOutputFormatGet");
      }
      // verify the required parameter 'fromPoints' is set
      if (fromPoints === undefined || fromPoints === null) {
        throw new Error("Missing the required parameter 'fromPoints' when calling truckDistanceBetweenPairsOutputFormatGet");
      }
      // verify the required parameter 'toPoints' is set
      if (toPoints === undefined || toPoints === null) {
        throw new Error("Missing the required parameter 'toPoints' when calling truckDistanceBetweenPairsOutputFormatGet");
      }

      let pathParams = {
        'outputFormat': outputFormat
      };
      let queryParams = {
        'fromPoints': fromPoints,
        'toPoints': toPoints,
        'outputSRS': opts['outputSRS'],
        'criteria': opts['criteria'],
        'distanceUnit': opts['distanceUnit'],
        'departure': opts['departure'],
        'correctSide': opts['correctSide'],
        'disable': opts['disable'],
        'routeDescription': opts['routeDescription'],
        'maxPairs': opts['maxPairs']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/truck/distance/betweenPairs.{outputFormat}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the truckDistanceBetweenPairsOutputFormatPost operation.
     * @callback module:api/DistanceApi~truckDistanceBetweenPairsOutputFormatPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get distance and travel time between each pair of geographic points
     * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
     * @param {module:model/String} outputFormat Format of representation
     * @param {String} fromPoints A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>
     * @param {String} toPoints A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {module:model/String} [criteria = 'shortest')] Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
     * @param {module:model/String} [distanceUnit = 'km')] distance unit of measure (e.g., km, mi). Default is km.
     * @param {Date} [departure] departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
     * @param {Boolean} [correctSide = false)] If true, route starts and ends on same side of road as start and end points.Default is false.
     * @param {String} [disable = 'sc,tf,ev,td')] A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
     * @param {String} [routeDescription = 'Routing results')] Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
     * @param {Number} [maxPairs] The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
     * @param {module:api/DistanceApi~truckDistanceBetweenPairsOutputFormatPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    truckDistanceBetweenPairsOutputFormatPost(outputFormat, fromPoints, toPoints, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling truckDistanceBetweenPairsOutputFormatPost");
      }
      // verify the required parameter 'fromPoints' is set
      if (fromPoints === undefined || fromPoints === null) {
        throw new Error("Missing the required parameter 'fromPoints' when calling truckDistanceBetweenPairsOutputFormatPost");
      }
      // verify the required parameter 'toPoints' is set
      if (toPoints === undefined || toPoints === null) {
        throw new Error("Missing the required parameter 'toPoints' when calling truckDistanceBetweenPairsOutputFormatPost");
      }

      let pathParams = {
        'outputFormat': outputFormat
      };
      let queryParams = {
        'fromPoints': fromPoints,
        'toPoints': toPoints,
        'outputSRS': opts['outputSRS'],
        'criteria': opts['criteria'],
        'distanceUnit': opts['distanceUnit'],
        'departure': opts['departure'],
        'correctSide': opts['correctSide'],
        'disable': opts['disable'],
        'routeDescription': opts['routeDescription'],
        'maxPairs': opts['maxPairs']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/truck/distance/betweenPairs.{outputFormat}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the truckDistanceOutputFormatGet operation.
     * @callback module:api/DistanceApi~truckDistanceOutputFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get distance and travel time between two geographic points for a commercial vehicle
     * Represents the distance and time of the shortest or fastest path between given start and end points.
     * @param {module:model/String} outputFormat Format of representation
     * @param {String} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {module:model/String} [criteria = 'shortest')] Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
     * @param {module:model/String} [distanceUnit = 'km')] distance unit of measure (e.g., km, mi). Default is km.
     * @param {Boolean} [roundTrip = false)] If true, route ends at start point. Default is false.
     * @param {Date} [departure] departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
     * @param {Boolean} [correctSide = false)] If true, route starts and ends on same side of road as start and end points.Default is false.
     * @param {Number} [truckRouteMultiplier = 9)] The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.
     * @param {String} [disable = 'sc,tf,ev,td')] A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
     * @param {String} [routeDescription = 'Routing results')] Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
     * @param {module:api/DistanceApi~truckDistanceOutputFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    truckDistanceOutputFormatGet(outputFormat, points, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling truckDistanceOutputFormatGet");
      }
      // verify the required parameter 'points' is set
      if (points === undefined || points === null) {
        throw new Error("Missing the required parameter 'points' when calling truckDistanceOutputFormatGet");
      }

      let pathParams = {
        'outputFormat': outputFormat
      };
      let queryParams = {
        'points': points,
        'outputSRS': opts['outputSRS'],
        'criteria': opts['criteria'],
        'distanceUnit': opts['distanceUnit'],
        'roundTrip': opts['roundTrip'],
        'departure': opts['departure'],
        'correctSide': opts['correctSide'],
        'truckRouteMultiplier': opts['truckRouteMultiplier'],
        'disable': opts['disable'],
        'routeDescription': opts['routeDescription']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/truck/distance.{outputFormat}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the truckDistanceOutputFormatPost operation.
     * @callback module:api/DistanceApi~truckDistanceOutputFormatPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get distance and travel time between two geographic points
     * Represents the distance and time of the shortest or fastest path between given start and end points.
     * @param {module:model/String} outputFormat Format of representation
     * @param {String} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {module:model/String} [criteria = 'shortest')] Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
     * @param {module:model/String} [distanceUnit = 'km')] distance unit of measure (e.g., km, mi). Default is km.
     * @param {Boolean} [roundTrip = false)] If true, route ends at start point. Default is false.
     * @param {Date} [departure] departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
     * @param {Boolean} [correctSide = false)] If true, route starts and ends on same side of road as start and end points.Default is false.
     * @param {String} [disable = 'sc,tf,ev,td')] A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
     * @param {String} [routeDescription = 'Routing results')] Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
     * @param {module:api/DistanceApi~truckDistanceOutputFormatPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    truckDistanceOutputFormatPost(outputFormat, points, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling truckDistanceOutputFormatPost");
      }
      // verify the required parameter 'points' is set
      if (points === undefined || points === null) {
        throw new Error("Missing the required parameter 'points' when calling truckDistanceOutputFormatPost");
      }

      let pathParams = {
        'outputFormat': outputFormat
      };
      let queryParams = {
        'points': points,
        'outputSRS': opts['outputSRS'],
        'criteria': opts['criteria'],
        'distanceUnit': opts['distanceUnit'],
        'roundTrip': opts['roundTrip'],
        'departure': opts['departure'],
        'correctSide': opts['correctSide'],
        'disable': opts['disable'],
        'routeDescription': opts['routeDescription']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/truck/distance.{outputFormat}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
