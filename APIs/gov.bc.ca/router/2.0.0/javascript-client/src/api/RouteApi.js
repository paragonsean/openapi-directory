/**
 * BC Route Planner REST API
 * Finds shortest/fastest route between a start point and one or more stop points on British Columbia's public road network. The BC Route planner [webpage](https://www2.gov.bc.ca/gov/content?id=9D99E684CCD042CD88FADC51E079B4B5) provides additional information.  Here are some geocoded addresses to play with:<br>18 Douglas St,Victoria -123.36962,48.40892<br>1002 Johnson St, Victoria -123.355745,48.426206<br>543 Johnson St, Victoria, BC -123.36907,48.42770 <br>14 Centennial Sq, Victoria, BC -123.36564,48.42863<br>1105 Royal Ave,New Westminster  -122.92009,49.20063<br>808 Jackson Cres, New Westminster -122.90762,49.22558<br>10810 McDonald Rd, Chilliwack -121.93808,49.19859<br>3950 June Springs Rd, Kelowna -119.40751,49.83960<br>1201 Riondel Rd, Kootenay Bay -116.85402,49.74448<br>1201 Riondel Rd, Kootenay Bay -116.832759,49.730500 (parcelPoint)<br>2499 Walbran Pl, Courtenay -124.97295,49.71518<br>2013 Smoke Bluff Rd, Squamish -123.13946,49.70401<br>235 Kelvin Grove Way, Lions Bay -123.23524,49.45035<br>   Please see our <a href=https://github.com/bcgov/api-specs/blob/master/COLLECTION_NOTICE.md#collection-notice target=\"_blank\">data collection notice</a>.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.   [API keys](https://api.gov.bc.ca/devportal/api-directory/740) are unique and can be acquired with a GitHub or IDIR account.   
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Route service.
* @module api/RouteApi
* @version 2.0.0
*/
export default class RouteApi {

    /**
    * Constructs a new RouteApi. 
    * @alias module:api/RouteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the optimalRouteOutputFormatGet operation.
     * @callback module:api/RouteApi~optimalRouteOutputFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
     * Represents the geometry, distance, and time of the shortest or fastest path between a start point and a series of end points which are reordered to minimize distance or time
     * @param {module:model/String} outputFormat Format of representation
     * @param {String} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {module:model/String} [criteria = 'shortest')] Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
     * @param {module:model/String} [distanceUnit = 'km')] distance unit of measure (e.g., km, mi). Default is km.
     * @param {Boolean} [roundTrip = false)] If true, route ends at start point. Default is false.
     * @param {Date} [departure] departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
     * @param {Boolean} [correctSide = false)] If true, route starts and ends on same side of road as start and end points.Default is false.
     * @param {String} [disable = 'sc,tf,ev,td')] A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
     * @param {String} [routeDescription = 'Routing results')] Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
     * @param {module:api/RouteApi~optimalRouteOutputFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    optimalRouteOutputFormatGet(outputFormat, points, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling optimalRouteOutputFormatGet");
      }
      // verify the required parameter 'points' is set
      if (points === undefined || points === null) {
        throw new Error("Missing the required parameter 'points' when calling optimalRouteOutputFormatGet");
      }

      let pathParams = {
        'outputFormat': outputFormat
      };
      let queryParams = {
        'points': points,
        'outputSRS': opts['outputSRS'],
        'criteria': opts['criteria'],
        'distanceUnit': opts['distanceUnit'],
        'roundTrip': opts['roundTrip'],
        'departure': opts['departure'],
        'correctSide': opts['correctSide'],
        'disable': opts['disable'],
        'routeDescription': opts['routeDescription']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/optimalRoute.{outputFormat}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the optimalRouteOutputFormatPost operation.
     * @callback module:api/RouteApi~optimalRouteOutputFormatPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
     * Represents the geometry, distance, and time of the shortest or fastest path between a start point and a series of end points which are reordered to minimize total distance or time.
     * @param {module:model/String} outputFormat Format of representation
     * @param {String} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {module:model/String} [criteria = 'shortest')] Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
     * @param {module:model/String} [distanceUnit = 'km')] distance unit of measure (e.g., km, mi). Default is km.
     * @param {Boolean} [roundTrip = false)] If true, route ends at start point. Default is false.
     * @param {Date} [departure] departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
     * @param {Boolean} [correctSide = false)] If true, route starts and ends on same side of road as start and end points.Default is false.
     * @param {String} [disable = 'sc,tf,ev,td')] A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
     * @param {String} [routeDescription = 'Routing results')] Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
     * @param {module:api/RouteApi~optimalRouteOutputFormatPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    optimalRouteOutputFormatPost(outputFormat, points, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling optimalRouteOutputFormatPost");
      }
      // verify the required parameter 'points' is set
      if (points === undefined || points === null) {
        throw new Error("Missing the required parameter 'points' when calling optimalRouteOutputFormatPost");
      }

      let pathParams = {
        'outputFormat': outputFormat
      };
      let queryParams = {
        'points': points,
        'outputSRS': opts['outputSRS'],
        'criteria': opts['criteria'],
        'distanceUnit': opts['distanceUnit'],
        'roundTrip': opts['roundTrip'],
        'departure': opts['departure'],
        'correctSide': opts['correctSide'],
        'disable': opts['disable'],
        'routeDescription': opts['routeDescription']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/optimalRoute.{outputFormat}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routeOutputFormatGet operation.
     * @callback module:api/RouteApi~routeOutputFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the path, distance and travel time between a series of geographic points
     * Represents the geometry, distance, and time of the shortest or fastest path between given start and end points.
     * @param {module:model/String} outputFormat Format of representation
     * @param {String} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {module:model/String} [criteria = 'shortest')] Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
     * @param {module:model/String} [distanceUnit = 'km')] distance unit of measure (e.g., km, mi). Default is km.
     * @param {Boolean} [roundTrip = false)] If true, route ends at start point. Default is false.
     * @param {Date} [departure] departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
     * @param {Boolean} [correctSide = false)] If true, route starts and ends on same side of road as start/end point.Default is false.
     * @param {String} [disable = 'sc,tf,ev,td')] A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br> Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
     * @param {String} [routeDescription = 'Routing results')] Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
     * @param {module:api/RouteApi~routeOutputFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    routeOutputFormatGet(outputFormat, points, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling routeOutputFormatGet");
      }
      // verify the required parameter 'points' is set
      if (points === undefined || points === null) {
        throw new Error("Missing the required parameter 'points' when calling routeOutputFormatGet");
      }

      let pathParams = {
        'outputFormat': outputFormat
      };
      let queryParams = {
        'points': points,
        'outputSRS': opts['outputSRS'],
        'criteria': opts['criteria'],
        'distanceUnit': opts['distanceUnit'],
        'roundTrip': opts['roundTrip'],
        'departure': opts['departure'],
        'correctSide': opts['correctSide'],
        'disable': opts['disable'],
        'routeDescription': opts['routeDescription']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/route.{outputFormat}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routeOutputFormatPost operation.
     * @callback module:api/RouteApi~routeOutputFormatPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the path, distance and travel time between a series of geographic points
     * Represents the geometry, distance, and time of the shortest or fastest path between given start and end points.
     * @param {module:model/String} outputFormat Format of representation
     * @param {String} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {module:model/String} [criteria = 'shortest')] Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
     * @param {module:model/String} [distanceUnit = 'km')] distance unit of measure (e.g., km, mi). Default is km.
     * @param {Boolean} [roundTrip = false)] If true, route ends at start point. Default is false.
     * @param {Date} [departure] departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
     * @param {Boolean} [correctSide = false)] If true, route starts and ends on same side of road as start/end point.Default is false.
     * @param {String} [disable = 'sc,tf,ev,td')] A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
     * @param {String} [routeDescription = 'Routing results')] Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
     * @param {module:api/RouteApi~routeOutputFormatPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    routeOutputFormatPost(outputFormat, points, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling routeOutputFormatPost");
      }
      // verify the required parameter 'points' is set
      if (points === undefined || points === null) {
        throw new Error("Missing the required parameter 'points' when calling routeOutputFormatPost");
      }

      let pathParams = {
        'outputFormat': outputFormat
      };
      let queryParams = {
        'points': points,
        'outputSRS': opts['outputSRS'],
        'criteria': opts['criteria'],
        'distanceUnit': opts['distanceUnit'],
        'roundTrip': opts['roundTrip'],
        'departure': opts['departure'],
        'correctSide': opts['correctSide'],
        'disable': opts['disable'],
        'routeDescription': opts['routeDescription']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/route.{outputFormat}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the truckOptimalRouteOutputFormatGet operation.
     * @callback module:api/RouteApi~truckOptimalRouteOutputFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time for a commercial vehicle
     * Represents the geometry, distance, and time of the shortest or fastest path between a start point and a series of end points which are reordered to minimize distance or time for a commercial vehicle.
     * @param {module:model/String} outputFormat Format of representation
     * @param {String} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {module:model/String} [criteria = 'shortest')] Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
     * @param {module:model/String} [distanceUnit = 'km')] distance unit of measure (e.g., km, mi). Default is km.
     * @param {Boolean} [roundTrip = false)] If true, route ends at start point. Default is false.
     * @param {Date} [departure] departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
     * @param {Boolean} [correctSide = false)] If true, route starts and ends on same side of road as start and end points.Default is false.
     * @param {Number} [truckRouteMultiplier = 9)] The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.
     * @param {String} [partition = '')] A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition
     * @param {String} [disable = 'sc,tf,ev,td')] A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
     * @param {String} [routeDescription = 'Routing results')] Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
     * @param {module:api/RouteApi~truckOptimalRouteOutputFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    truckOptimalRouteOutputFormatGet(outputFormat, points, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling truckOptimalRouteOutputFormatGet");
      }
      // verify the required parameter 'points' is set
      if (points === undefined || points === null) {
        throw new Error("Missing the required parameter 'points' when calling truckOptimalRouteOutputFormatGet");
      }

      let pathParams = {
        'outputFormat': outputFormat
      };
      let queryParams = {
        'points': points,
        'outputSRS': opts['outputSRS'],
        'criteria': opts['criteria'],
        'distanceUnit': opts['distanceUnit'],
        'roundTrip': opts['roundTrip'],
        'departure': opts['departure'],
        'correctSide': opts['correctSide'],
        'truckRouteMultiplier': opts['truckRouteMultiplier'],
        'partition': opts['partition'],
        'disable': opts['disable'],
        'routeDescription': opts['routeDescription']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/truck/optimalRoute.{outputFormat}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the truckOptimalRouteOutputFormatPost operation.
     * @callback module:api/RouteApi~truckOptimalRouteOutputFormatPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
     * Represents the geometry, distance, and time of the shortest or fastest path between a start point and a series of end points which are reordered to minimize total distance or time.
     * @param {module:model/String} outputFormat Format of representation
     * @param {String} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {module:model/String} [criteria = 'shortest')] Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
     * @param {module:model/String} [distanceUnit = 'km')] distance unit of measure (e.g., km, mi). Default is km.
     * @param {Boolean} [roundTrip = false)] If true, route ends at start point. Default is false.
     * @param {Date} [departure] departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
     * @param {Boolean} [correctSide = false)] If true, route starts and ends on same side of road as start and end points.Default is false.
     * @param {Number} [truckRouteMultiplier = 9)] The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.
     * @param {String} [partition = '')] A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition
     * @param {String} [disable = 'sc,tf,ev,td')] A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
     * @param {String} [routeDescription = 'Routing results')] Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
     * @param {module:api/RouteApi~truckOptimalRouteOutputFormatPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    truckOptimalRouteOutputFormatPost(outputFormat, points, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling truckOptimalRouteOutputFormatPost");
      }
      // verify the required parameter 'points' is set
      if (points === undefined || points === null) {
        throw new Error("Missing the required parameter 'points' when calling truckOptimalRouteOutputFormatPost");
      }

      let pathParams = {
        'outputFormat': outputFormat
      };
      let queryParams = {
        'points': points,
        'outputSRS': opts['outputSRS'],
        'criteria': opts['criteria'],
        'distanceUnit': opts['distanceUnit'],
        'roundTrip': opts['roundTrip'],
        'departure': opts['departure'],
        'correctSide': opts['correctSide'],
        'truckRouteMultiplier': opts['truckRouteMultiplier'],
        'partition': opts['partition'],
        'disable': opts['disable'],
        'routeDescription': opts['routeDescription']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/truck/optimalRoute.{outputFormat}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the truckRouteOutputFormatGet operation.
     * @callback module:api/RouteApi~truckRouteOutputFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the path, distance and travel time between a series of geographic points for a commercial vehicle
     * Represents the geometry, distance, and time of the shortest or fastest path between given start and end points for a commercial vehicle.
     * @param {module:model/String} outputFormat Format of representation
     * @param {String} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {module:model/String} [criteria = 'shortest')] Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
     * @param {module:model/String} [distanceUnit = 'km')] distance unit of measure (e.g., km, mi). Default is km.
     * @param {Boolean} [roundTrip = false)] If true, route ends at start point. Default is false.
     * @param {Date} [departure] departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
     * @param {Boolean} [correctSide = false)] If true, route starts and ends on same side of road as start/end point.Default is false.
     * @param {Number} [truckRouteMultiplier = 9)] The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.
     * @param {String} [partition = '')] A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition
     * @param {String} [disable = 'sc,tf,ev,td')] A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br> Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
     * @param {String} [routeDescription = 'Routing results')] Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
     * @param {module:api/RouteApi~truckRouteOutputFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    truckRouteOutputFormatGet(outputFormat, points, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling truckRouteOutputFormatGet");
      }
      // verify the required parameter 'points' is set
      if (points === undefined || points === null) {
        throw new Error("Missing the required parameter 'points' when calling truckRouteOutputFormatGet");
      }

      let pathParams = {
        'outputFormat': outputFormat
      };
      let queryParams = {
        'points': points,
        'outputSRS': opts['outputSRS'],
        'criteria': opts['criteria'],
        'distanceUnit': opts['distanceUnit'],
        'roundTrip': opts['roundTrip'],
        'departure': opts['departure'],
        'correctSide': opts['correctSide'],
        'truckRouteMultiplier': opts['truckRouteMultiplier'],
        'partition': opts['partition'],
        'disable': opts['disable'],
        'routeDescription': opts['routeDescription']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/truck/route.{outputFormat}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the truckRouteOutputFormatPost operation.
     * @callback module:api/RouteApi~truckRouteOutputFormatPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the path, distance and travel time between a series of geographic points
     * Represents the geometry, distance, and time of the shortest or fastest path between given start and end points.
     * @param {module:model/String} outputFormat Format of representation
     * @param {String} points A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [outputSRS = 4326)] The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
     * @param {module:model/String} [criteria = 'shortest')] Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
     * @param {module:model/String} [distanceUnit = 'km')] distance unit of measure (e.g., km, mi). Default is km.
     * @param {Boolean} [roundTrip = false)] If true, route ends at start point. Default is false.
     * @param {Date} [departure] departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
     * @param {Boolean} [correctSide = false)] If true, route starts and ends on same side of road as start/end point.Default is false.
     * @param {Number} [truckRouteMultiplier = 9)] The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.
     * @param {String} [partition = '')] A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. <br><br>Partition values:<br> isTruckRoute – Distinguish between truck route sections and non-truck route sections <br> isFerry – Distinguish between ferry sections and non-ferry sections <br> locality – Include the locality name for the route partition
     * @param {String} [disable = 'sc,tf,ev,td')] A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
     * @param {String} [routeDescription = 'Routing results')] Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
     * @param {module:api/RouteApi~truckRouteOutputFormatPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    truckRouteOutputFormatPost(outputFormat, points, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'outputFormat' is set
      if (outputFormat === undefined || outputFormat === null) {
        throw new Error("Missing the required parameter 'outputFormat' when calling truckRouteOutputFormatPost");
      }
      // verify the required parameter 'points' is set
      if (points === undefined || points === null) {
        throw new Error("Missing the required parameter 'points' when calling truckRouteOutputFormatPost");
      }

      let pathParams = {
        'outputFormat': outputFormat
      };
      let queryParams = {
        'points': points,
        'outputSRS': opts['outputSRS'],
        'criteria': opts['criteria'],
        'distanceUnit': opts['distanceUnit'],
        'roundTrip': opts['roundTrip'],
        'departure': opts['departure'],
        'correctSide': opts['correctSide'],
        'truckRouteMultiplier': opts['truckRouteMultiplier'],
        'partition': opts['partition'],
        'disable': opts['disable'],
        'routeDescription': opts['routeDescription']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/truck/route.{outputFormat}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
