/**
 * BC Route Planner REST API
 * Finds shortest/fastest route between a start point and one or more stop points on British Columbia's public road network. The BC Route planner [webpage](https://www2.gov.bc.ca/gov/content?id=9D99E684CCD042CD88FADC51E079B4B5) provides additional information.  Here are some geocoded addresses to play with:<br>18 Douglas St,Victoria -123.36962,48.40892<br>1002 Johnson St, Victoria -123.355745,48.426206<br>543 Johnson St, Victoria, BC -123.36907,48.42770 <br>14 Centennial Sq, Victoria, BC -123.36564,48.42863<br>1105 Royal Ave,New Westminster  -122.92009,49.20063<br>808 Jackson Cres, New Westminster -122.90762,49.22558<br>10810 McDonald Rd, Chilliwack -121.93808,49.19859<br>3950 June Springs Rd, Kelowna -119.40751,49.83960<br>1201 Riondel Rd, Kootenay Bay -116.85402,49.74448<br>1201 Riondel Rd, Kootenay Bay -116.832759,49.730500 (parcelPoint)<br>2499 Walbran Pl, Courtenay -124.97295,49.71518<br>2013 Smoke Bluff Rd, Squamish -123.13946,49.70401<br>235 Kelvin Grove Way, Lions Bay -123.23524,49.45035<br>   Please see our <a href=https://github.com/bcgov/api-specs/blob/master/COLLECTION_NOTICE.md#collection-notice target=\"_blank\">data collection notice</a>.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.   [API keys](https://api.gov.bc.ca/devportal/api-directory/740) are unique and can be acquired with a GitHub or IDIR account.   
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BcRoutePlannerRestApi);
  }
}(this, function(expect, BcRoutePlannerRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BcRoutePlannerRestApi.RouteApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RouteApi', function() {
    describe('optimalRouteOutputFormatGet', function() {
      it('should call optimalRouteOutputFormatGet successfully', function(done) {
        //uncomment below and update the code to test optimalRouteOutputFormatGet
        //instance.optimalRouteOutputFormatGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('optimalRouteOutputFormatPost', function() {
      it('should call optimalRouteOutputFormatPost successfully', function(done) {
        //uncomment below and update the code to test optimalRouteOutputFormatPost
        //instance.optimalRouteOutputFormatPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('routeOutputFormatGet', function() {
      it('should call routeOutputFormatGet successfully', function(done) {
        //uncomment below and update the code to test routeOutputFormatGet
        //instance.routeOutputFormatGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('routeOutputFormatPost', function() {
      it('should call routeOutputFormatPost successfully', function(done) {
        //uncomment below and update the code to test routeOutputFormatPost
        //instance.routeOutputFormatPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('truckOptimalRouteOutputFormatGet', function() {
      it('should call truckOptimalRouteOutputFormatGet successfully', function(done) {
        //uncomment below and update the code to test truckOptimalRouteOutputFormatGet
        //instance.truckOptimalRouteOutputFormatGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('truckOptimalRouteOutputFormatPost', function() {
      it('should call truckOptimalRouteOutputFormatPost successfully', function(done) {
        //uncomment below and update the code to test truckOptimalRouteOutputFormatPost
        //instance.truckOptimalRouteOutputFormatPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('truckRouteOutputFormatGet', function() {
      it('should call truckRouteOutputFormatGet successfully', function(done) {
        //uncomment below and update the code to test truckRouteOutputFormatGet
        //instance.truckRouteOutputFormatGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('truckRouteOutputFormatPost', function() {
      it('should call truckRouteOutputFormatPost successfully', function(done) {
        //uncomment below and update the code to test truckRouteOutputFormatPost
        //instance.truckRouteOutputFormatPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
