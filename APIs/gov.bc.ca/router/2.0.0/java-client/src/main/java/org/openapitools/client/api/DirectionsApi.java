/*
 * BC Route Planner REST API
 * Finds shortest/fastest route between a start point and one or more stop points on British Columbia's public road network. The BC Route planner [webpage](https://www2.gov.bc.ca/gov/content?id=9D99E684CCD042CD88FADC51E079B4B5) provides additional information.  Here are some geocoded addresses to play with:<br>18 Douglas St,Victoria -123.36962,48.40892<br>1002 Johnson St, Victoria -123.355745,48.426206<br>543 Johnson St, Victoria, BC -123.36907,48.42770 <br>14 Centennial Sq, Victoria, BC -123.36564,48.42863<br>1105 Royal Ave,New Westminster  -122.92009,49.20063<br>808 Jackson Cres, New Westminster -122.90762,49.22558<br>10810 McDonald Rd, Chilliwack -121.93808,49.19859<br>3950 June Springs Rd, Kelowna -119.40751,49.83960<br>1201 Riondel Rd, Kootenay Bay -116.85402,49.74448<br>1201 Riondel Rd, Kootenay Bay -116.832759,49.730500 (parcelPoint)<br>2499 Walbran Pl, Courtenay -124.97295,49.71518<br>2013 Smoke Bluff Rd, Squamish -123.13946,49.70401<br>235 Kelvin Grove Way, Lions Bay -123.23524,49.45035<br>   Please see our <a href=https://github.com/bcgov/api-specs/blob/master/COLLECTION_NOTICE.md#collection-notice target=\"_blank\">data collection notice</a>.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.   [API keys](https://api.gov.bc.ca/devportal/api-directory/740) are unique and can be acquired with a GitHub or IDIR account.   
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DirectionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DirectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DirectionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for directionsOutputFormatGet
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start/end point.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directionsOutputFormatGetCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directions.{outputFormat}"
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (points != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("points", points));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (criteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("criteria", criteria));
        }

        if (distanceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distanceUnit", distanceUnit));
        }

        if (roundTrip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roundTrip", roundTrip));
        }

        if (departure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departure", departure));
        }

        if (correctSide != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("correctSide", correctSide));
        }

        if (disable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable", disable));
        }

        if (routeDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeDescription", routeDescription));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call directionsOutputFormatGetValidateBeforeCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling directionsOutputFormatGet(Async)");
        }

        // verify the required parameter 'points' is set
        if (points == null) {
            throw new ApiException("Missing the required parameter 'points' when calling directionsOutputFormatGet(Async)");
        }

        return directionsOutputFormatGetCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, _callback);

    }

    /**
     * Get the directions, path, distance and travel time between a series of geographic points
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start/end point.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public void directionsOutputFormatGet(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription) throws ApiException {
        directionsOutputFormatGetWithHttpInfo(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription);
    }

    /**
     * Get the directions, path, distance and travel time between a series of geographic points
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start/end point.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> directionsOutputFormatGetWithHttpInfo(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription) throws ApiException {
        okhttp3.Call localVarCall = directionsOutputFormatGetValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the directions, path, distance and travel time between a series of geographic points (asynchronously)
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start/end point.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directionsOutputFormatGetAsync(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = directionsOutputFormatGetValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for directionsOutputFormatPost
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start/end point.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directionsOutputFormatPostCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directions.{outputFormat}"
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (points != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("points", points));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (criteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("criteria", criteria));
        }

        if (distanceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distanceUnit", distanceUnit));
        }

        if (roundTrip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roundTrip", roundTrip));
        }

        if (departure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departure", departure));
        }

        if (correctSide != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("correctSide", correctSide));
        }

        if (disable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable", disable));
        }

        if (routeDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeDescription", routeDescription));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call directionsOutputFormatPostValidateBeforeCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling directionsOutputFormatPost(Async)");
        }

        // verify the required parameter 'points' is set
        if (points == null) {
            throw new ApiException("Missing the required parameter 'points' when calling directionsOutputFormatPost(Async)");
        }

        return directionsOutputFormatPostCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, _callback);

    }

    /**
     * Get the directions, path, distance and travel time between a series of geographic points
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start/end point.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public void directionsOutputFormatPost(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription) throws ApiException {
        directionsOutputFormatPostWithHttpInfo(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription);
    }

    /**
     * Get the directions, path, distance and travel time between a series of geographic points
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start/end point.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> directionsOutputFormatPostWithHttpInfo(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription) throws ApiException {
        okhttp3.Call localVarCall = directionsOutputFormatPostValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the directions, path, distance and travel time between a series of geographic points (asynchronously)
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start/end point.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call directionsOutputFormatPostAsync(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = directionsOutputFormatPostValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for optimalDirectionsOutputFormatGet
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call optimalDirectionsOutputFormatGetCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/optimalDirections.{outputFormat}"
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (points != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("points", points));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (criteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("criteria", criteria));
        }

        if (distanceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distanceUnit", distanceUnit));
        }

        if (roundTrip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roundTrip", roundTrip));
        }

        if (departure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departure", departure));
        }

        if (correctSide != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("correctSide", correctSide));
        }

        if (disable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable", disable));
        }

        if (routeDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeDescription", routeDescription));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call optimalDirectionsOutputFormatGetValidateBeforeCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling optimalDirectionsOutputFormatGet(Async)");
        }

        // verify the required parameter 'points' is set
        if (points == null) {
            throw new ApiException("Missing the required parameter 'points' when calling optimalDirectionsOutputFormatGet(Async)");
        }

        return optimalDirectionsOutputFormatGetCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, _callback);

    }

    /**
     * Get the directions, optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and a series of end points which are reordered to minimize distance/time
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time. </td><td>  -  </td></tr>
     </table>
     */
    public void optimalDirectionsOutputFormatGet(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription) throws ApiException {
        optimalDirectionsOutputFormatGetWithHttpInfo(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription);
    }

    /**
     * Get the directions, optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and a series of end points which are reordered to minimize distance/time
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> optimalDirectionsOutputFormatGetWithHttpInfo(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription) throws ApiException {
        okhttp3.Call localVarCall = optimalDirectionsOutputFormatGetValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the directions, optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time. (asynchronously)
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and a series of end points which are reordered to minimize distance/time
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call optimalDirectionsOutputFormatGetAsync(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = optimalDirectionsOutputFormatGetValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for optimalDirectionsOutputFormatPost
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call optimalDirectionsOutputFormatPostCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/optimalDirections.{outputFormat}"
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (points != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("points", points));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (criteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("criteria", criteria));
        }

        if (distanceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distanceUnit", distanceUnit));
        }

        if (roundTrip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roundTrip", roundTrip));
        }

        if (departure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departure", departure));
        }

        if (correctSide != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("correctSide", correctSide));
        }

        if (disable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable", disable));
        }

        if (routeDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeDescription", routeDescription));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call optimalDirectionsOutputFormatPostValidateBeforeCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling optimalDirectionsOutputFormatPost(Async)");
        }

        // verify the required parameter 'points' is set
        if (points == null) {
            throw new ApiException("Missing the required parameter 'points' when calling optimalDirectionsOutputFormatPost(Async)");
        }

        return optimalDirectionsOutputFormatPostCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, _callback);

    }

    /**
     * Get the directions, optimal path, distance and travel time between a start point and one or more end points which are reordered to minimize total distance or time.
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and one or more end points which are reordered to minimize distance or time.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time. </td><td>  -  </td></tr>
     </table>
     */
    public void optimalDirectionsOutputFormatPost(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription) throws ApiException {
        optimalDirectionsOutputFormatPostWithHttpInfo(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription);
    }

    /**
     * Get the directions, optimal path, distance and travel time between a start point and one or more end points which are reordered to minimize total distance or time.
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and one or more end points which are reordered to minimize distance or time.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> optimalDirectionsOutputFormatPostWithHttpInfo(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription) throws ApiException {
        okhttp3.Call localVarCall = optimalDirectionsOutputFormatPostValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the directions, optimal path, distance and travel time between a start point and one or more end points which are reordered to minimize total distance or time. (asynchronously)
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and one or more end points which are reordered to minimize distance or time.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call optimalDirectionsOutputFormatPostAsync(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = optimalDirectionsOutputFormatPostValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for truckDirectionsOutputFormatGet
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start/end point.Default is false. (optional, default to false)
     * @param truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes. (optional, default to 9)
     * @param partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. &lt;br&gt;&lt;br&gt;Partition values:&lt;br&gt; isTruckRoute – Distinguish between truck route sections and non-truck route sections &lt;br&gt; isFerry – Distinguish between ferry sections and non-ferry sections &lt;br&gt; locality – Include the locality name for the route partition (optional, default to )
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call truckDirectionsOutputFormatGetCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String partition, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/truck/directions.{outputFormat}"
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (points != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("points", points));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (criteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("criteria", criteria));
        }

        if (distanceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distanceUnit", distanceUnit));
        }

        if (roundTrip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roundTrip", roundTrip));
        }

        if (departure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departure", departure));
        }

        if (correctSide != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("correctSide", correctSide));
        }

        if (truckRouteMultiplier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("truckRouteMultiplier", truckRouteMultiplier));
        }

        if (partition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partition", partition));
        }

        if (disable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable", disable));
        }

        if (routeDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeDescription", routeDescription));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call truckDirectionsOutputFormatGetValidateBeforeCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String partition, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling truckDirectionsOutputFormatGet(Async)");
        }

        // verify the required parameter 'points' is set
        if (points == null) {
            throw new ApiException("Missing the required parameter 'points' when calling truckDirectionsOutputFormatGet(Async)");
        }

        return truckDirectionsOutputFormatGetCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, partition, disable, routeDescription, _callback);

    }

    /**
     * Get the directions, path, distance and travel time between a series of geographic points for a commercial vehicle
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points for a commercial vehicle
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start/end point.Default is false. (optional, default to false)
     * @param truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes. (optional, default to 9)
     * @param partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. &lt;br&gt;&lt;br&gt;Partition values:&lt;br&gt; isTruckRoute – Distinguish between truck route sections and non-truck route sections &lt;br&gt; isFerry – Distinguish between ferry sections and non-ferry sections &lt;br&gt; locality – Include the locality name for the route partition (optional, default to )
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public void truckDirectionsOutputFormatGet(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String partition, String disable, String routeDescription) throws ApiException {
        truckDirectionsOutputFormatGetWithHttpInfo(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, partition, disable, routeDescription);
    }

    /**
     * Get the directions, path, distance and travel time between a series of geographic points for a commercial vehicle
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points for a commercial vehicle
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start/end point.Default is false. (optional, default to false)
     * @param truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes. (optional, default to 9)
     * @param partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. &lt;br&gt;&lt;br&gt;Partition values:&lt;br&gt; isTruckRoute – Distinguish between truck route sections and non-truck route sections &lt;br&gt; isFerry – Distinguish between ferry sections and non-ferry sections &lt;br&gt; locality – Include the locality name for the route partition (optional, default to )
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> truckDirectionsOutputFormatGetWithHttpInfo(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String partition, String disable, String routeDescription) throws ApiException {
        okhttp3.Call localVarCall = truckDirectionsOutputFormatGetValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, partition, disable, routeDescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the directions, path, distance and travel time between a series of geographic points for a commercial vehicle (asynchronously)
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points for a commercial vehicle
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start/end point.Default is false. (optional, default to false)
     * @param truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes. (optional, default to 9)
     * @param partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. &lt;br&gt;&lt;br&gt;Partition values:&lt;br&gt; isTruckRoute – Distinguish between truck route sections and non-truck route sections &lt;br&gt; isFerry – Distinguish between ferry sections and non-ferry sections &lt;br&gt; locality – Include the locality name for the route partition (optional, default to )
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call truckDirectionsOutputFormatGetAsync(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String partition, String disable, String routeDescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = truckDirectionsOutputFormatGetValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, partition, disable, routeDescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for truckDirectionsOutputFormatPost
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start/end point.Default is false. (optional, default to false)
     * @param truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes. (optional, default to 9)
     * @param partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. &lt;br&gt;&lt;br&gt;Partition values:&lt;br&gt; isTruckRoute – Distinguish between truck route sections and non-truck route sections &lt;br&gt; isFerry – Distinguish between ferry sections and non-ferry sections &lt;br&gt; locality – Include the locality name for the route partition (optional, default to )
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call truckDirectionsOutputFormatPostCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String partition, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/truck/directions.{outputFormat}"
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (points != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("points", points));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (criteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("criteria", criteria));
        }

        if (distanceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distanceUnit", distanceUnit));
        }

        if (roundTrip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roundTrip", roundTrip));
        }

        if (departure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departure", departure));
        }

        if (correctSide != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("correctSide", correctSide));
        }

        if (truckRouteMultiplier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("truckRouteMultiplier", truckRouteMultiplier));
        }

        if (partition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partition", partition));
        }

        if (disable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable", disable));
        }

        if (routeDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeDescription", routeDescription));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call truckDirectionsOutputFormatPostValidateBeforeCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String partition, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling truckDirectionsOutputFormatPost(Async)");
        }

        // verify the required parameter 'points' is set
        if (points == null) {
            throw new ApiException("Missing the required parameter 'points' when calling truckDirectionsOutputFormatPost(Async)");
        }

        return truckDirectionsOutputFormatPostCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, partition, disable, routeDescription, _callback);

    }

    /**
     * Get the directions, path, distance and travel time between a series of geographic points
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start/end point.Default is false. (optional, default to false)
     * @param truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes. (optional, default to 9)
     * @param partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. &lt;br&gt;&lt;br&gt;Partition values:&lt;br&gt; isTruckRoute – Distinguish between truck route sections and non-truck route sections &lt;br&gt; isFerry – Distinguish between ferry sections and non-ferry sections &lt;br&gt; locality – Include the locality name for the route partition (optional, default to )
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public void truckDirectionsOutputFormatPost(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String partition, String disable, String routeDescription) throws ApiException {
        truckDirectionsOutputFormatPostWithHttpInfo(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, partition, disable, routeDescription);
    }

    /**
     * Get the directions, path, distance and travel time between a series of geographic points
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start/end point.Default is false. (optional, default to false)
     * @param truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes. (optional, default to 9)
     * @param partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. &lt;br&gt;&lt;br&gt;Partition values:&lt;br&gt; isTruckRoute – Distinguish between truck route sections and non-truck route sections &lt;br&gt; isFerry – Distinguish between ferry sections and non-ferry sections &lt;br&gt; locality – Include the locality name for the route partition (optional, default to )
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> truckDirectionsOutputFormatPostWithHttpInfo(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String partition, String disable, String routeDescription) throws ApiException {
        okhttp3.Call localVarCall = truckDirectionsOutputFormatPostValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, partition, disable, routeDescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the directions, path, distance and travel time between a series of geographic points (asynchronously)
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between given start and end points
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start/end point.Default is false. (optional, default to false)
     * @param truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes. (optional, default to 9)
     * @param partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. &lt;br&gt;&lt;br&gt;Partition values:&lt;br&gt; isTruckRoute – Distinguish between truck route sections and non-truck route sections &lt;br&gt; isFerry – Distinguish between ferry sections and non-ferry sections &lt;br&gt; locality – Include the locality name for the route partition (optional, default to )
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call truckDirectionsOutputFormatPostAsync(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String partition, String disable, String routeDescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = truckDirectionsOutputFormatPostValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, partition, disable, routeDescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for truckOptimalDirectionsOutputFormatGet
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes. (optional, default to 9)
     * @param partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. &lt;br&gt;&lt;br&gt;Partition values:&lt;br&gt; isTruckRoute – Distinguish between truck route sections and non-truck route sections &lt;br&gt; isFerry – Distinguish between ferry sections and non-ferry sections &lt;br&gt; locality – Include the locality name for the route partition (optional, default to )
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call truckOptimalDirectionsOutputFormatGetCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String partition, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/truck/optimalDirections.{outputFormat}"
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (points != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("points", points));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (criteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("criteria", criteria));
        }

        if (distanceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distanceUnit", distanceUnit));
        }

        if (roundTrip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roundTrip", roundTrip));
        }

        if (departure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departure", departure));
        }

        if (correctSide != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("correctSide", correctSide));
        }

        if (truckRouteMultiplier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("truckRouteMultiplier", truckRouteMultiplier));
        }

        if (partition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partition", partition));
        }

        if (disable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable", disable));
        }

        if (routeDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeDescription", routeDescription));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call truckOptimalDirectionsOutputFormatGetValidateBeforeCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String partition, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling truckOptimalDirectionsOutputFormatGet(Async)");
        }

        // verify the required parameter 'points' is set
        if (points == null) {
            throw new ApiException("Missing the required parameter 'points' when calling truckOptimalDirectionsOutputFormatGet(Async)");
        }

        return truckOptimalDirectionsOutputFormatGetCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, partition, disable, routeDescription, _callback);

    }

    /**
     * Get the directions, optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time for a commercial vehicle
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and a series of end points which are reordered to minimize distance/time for a commercial vehicle.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes. (optional, default to 9)
     * @param partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. &lt;br&gt;&lt;br&gt;Partition values:&lt;br&gt; isTruckRoute – Distinguish between truck route sections and non-truck route sections &lt;br&gt; isFerry – Distinguish between ferry sections and non-ferry sections &lt;br&gt; locality – Include the locality name for the route partition (optional, default to )
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time. </td><td>  -  </td></tr>
     </table>
     */
    public void truckOptimalDirectionsOutputFormatGet(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String partition, String disable, String routeDescription) throws ApiException {
        truckOptimalDirectionsOutputFormatGetWithHttpInfo(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, partition, disable, routeDescription);
    }

    /**
     * Get the directions, optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time for a commercial vehicle
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and a series of end points which are reordered to minimize distance/time for a commercial vehicle.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes. (optional, default to 9)
     * @param partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. &lt;br&gt;&lt;br&gt;Partition values:&lt;br&gt; isTruckRoute – Distinguish between truck route sections and non-truck route sections &lt;br&gt; isFerry – Distinguish between ferry sections and non-ferry sections &lt;br&gt; locality – Include the locality name for the route partition (optional, default to )
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> truckOptimalDirectionsOutputFormatGetWithHttpInfo(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String partition, String disable, String routeDescription) throws ApiException {
        okhttp3.Call localVarCall = truckOptimalDirectionsOutputFormatGetValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, partition, disable, routeDescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the directions, optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time for a commercial vehicle (asynchronously)
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and a series of end points which are reordered to minimize distance/time for a commercial vehicle.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes. (optional, default to 9)
     * @param partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. &lt;br&gt;&lt;br&gt;Partition values:&lt;br&gt; isTruckRoute – Distinguish between truck route sections and non-truck route sections &lt;br&gt; isFerry – Distinguish between ferry sections and non-ferry sections &lt;br&gt; locality – Include the locality name for the route partition (optional, default to )
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call truckOptimalDirectionsOutputFormatGetAsync(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String partition, String disable, String routeDescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = truckOptimalDirectionsOutputFormatGetValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, partition, disable, routeDescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for truckOptimalDirectionsOutputFormatPost
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes. (optional, default to 9)
     * @param partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. &lt;br&gt;&lt;br&gt;Partition values:&lt;br&gt; isTruckRoute – Distinguish between truck route sections and non-truck route sections &lt;br&gt; isFerry – Distinguish between ferry sections and non-ferry sections &lt;br&gt; locality – Include the locality name for the route partition (optional, default to )
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call truckOptimalDirectionsOutputFormatPostCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String partition, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/truck/optimalDirections.{outputFormat}"
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (points != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("points", points));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (criteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("criteria", criteria));
        }

        if (distanceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distanceUnit", distanceUnit));
        }

        if (roundTrip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roundTrip", roundTrip));
        }

        if (departure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departure", departure));
        }

        if (correctSide != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("correctSide", correctSide));
        }

        if (truckRouteMultiplier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("truckRouteMultiplier", truckRouteMultiplier));
        }

        if (partition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partition", partition));
        }

        if (disable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable", disable));
        }

        if (routeDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeDescription", routeDescription));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call truckOptimalDirectionsOutputFormatPostValidateBeforeCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String partition, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling truckOptimalDirectionsOutputFormatPost(Async)");
        }

        // verify the required parameter 'points' is set
        if (points == null) {
            throw new ApiException("Missing the required parameter 'points' when calling truckOptimalDirectionsOutputFormatPost(Async)");
        }

        return truckOptimalDirectionsOutputFormatPostCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, partition, disable, routeDescription, _callback);

    }

    /**
     * Get the directions, optimal path, distance and travel time between a start point and one or more end points which are reordered to minimize total distance or time.
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and one or more end points which are reordered to minimize distance or time.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes. (optional, default to 9)
     * @param partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. &lt;br&gt;&lt;br&gt;Partition values:&lt;br&gt; isTruckRoute – Distinguish between truck route sections and non-truck route sections &lt;br&gt; isFerry – Distinguish between ferry sections and non-ferry sections &lt;br&gt; locality – Include the locality name for the route partition (optional, default to )
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time. </td><td>  -  </td></tr>
     </table>
     */
    public void truckOptimalDirectionsOutputFormatPost(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String partition, String disable, String routeDescription) throws ApiException {
        truckOptimalDirectionsOutputFormatPostWithHttpInfo(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, partition, disable, routeDescription);
    }

    /**
     * Get the directions, optimal path, distance and travel time between a start point and one or more end points which are reordered to minimize total distance or time.
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and one or more end points which are reordered to minimize distance or time.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes. (optional, default to 9)
     * @param partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. &lt;br&gt;&lt;br&gt;Partition values:&lt;br&gt; isTruckRoute – Distinguish between truck route sections and non-truck route sections &lt;br&gt; isFerry – Distinguish between ferry sections and non-ferry sections &lt;br&gt; locality – Include the locality name for the route partition (optional, default to )
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> truckOptimalDirectionsOutputFormatPostWithHttpInfo(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String partition, String disable, String routeDescription) throws ApiException {
        okhttp3.Call localVarCall = truckOptimalDirectionsOutputFormatPostValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, partition, disable, routeDescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the directions, optimal path, distance and travel time between a start point and one or more end points which are reordered to minimize total distance or time. (asynchronously)
     * Represents the turn-by-turn directions, geometry, distance, and time of the shortest path or fastest path between a start point and one or more end points which are reordered to minimize distance or time.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes. (optional, default to 9)
     * @param partition A comma-separated list of values to identify sections of the route that correspond to truck route sections and non-truck route sections, ferry sections and non-ferry sections, and locality names.  The response includes a partitions attribute, which is an array of objects, each of which has an index (into the route coordinate array) and a value for each of the attributes requested in the partition parameter. Any or all of the following values can be used. &lt;br&gt;&lt;br&gt;Partition values:&lt;br&gt; isTruckRoute – Distinguish between truck route sections and non-truck route sections &lt;br&gt; isFerry – Distinguish between ferry sections and non-ferry sections &lt;br&gt; locality – Include the locality name for the route partition (optional, default to )
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> turn-by-turn directions, geometry, distance, and time of the shortest or fastest route. End points are reordered to minimize total distance or time. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call truckOptimalDirectionsOutputFormatPostAsync(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String partition, String disable, String routeDescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = truckOptimalDirectionsOutputFormatPostValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, partition, disable, routeDescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
