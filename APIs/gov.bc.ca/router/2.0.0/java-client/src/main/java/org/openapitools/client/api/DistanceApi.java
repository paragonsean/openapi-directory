/*
 * BC Route Planner REST API
 * Finds shortest/fastest route between a start point and one or more stop points on British Columbia's public road network. The BC Route planner [webpage](https://www2.gov.bc.ca/gov/content?id=9D99E684CCD042CD88FADC51E079B4B5) provides additional information.  Here are some geocoded addresses to play with:<br>18 Douglas St,Victoria -123.36962,48.40892<br>1002 Johnson St, Victoria -123.355745,48.426206<br>543 Johnson St, Victoria, BC -123.36907,48.42770 <br>14 Centennial Sq, Victoria, BC -123.36564,48.42863<br>1105 Royal Ave,New Westminster  -122.92009,49.20063<br>808 Jackson Cres, New Westminster -122.90762,49.22558<br>10810 McDonald Rd, Chilliwack -121.93808,49.19859<br>3950 June Springs Rd, Kelowna -119.40751,49.83960<br>1201 Riondel Rd, Kootenay Bay -116.85402,49.74448<br>1201 Riondel Rd, Kootenay Bay -116.832759,49.730500 (parcelPoint)<br>2499 Walbran Pl, Courtenay -124.97295,49.71518<br>2013 Smoke Bluff Rd, Squamish -123.13946,49.70401<br>235 Kelvin Grove Way, Lions Bay -123.23524,49.45035<br>   Please see our <a href=https://github.com/bcgov/api-specs/blob/master/COLLECTION_NOTICE.md#collection-notice target=\"_blank\">data collection notice</a>.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.   [API keys](https://api.gov.bc.ca/devportal/api-directory/740) are unique and can be acquired with a GitHub or IDIR account.   
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DistanceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DistanceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DistanceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for distanceBetweenPairsOutputFormatGet
     * @param outputFormat Format of representation (required)
     * @param fromPoints A comma-separated list of origin points.  See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target&#x3D;&#39;_blank&#39;&gt;fromPoints&lt;/a&gt; (required)
     * @param toPoints A comma-separated list of destination points. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target&#x3D;&#39;_blank&#39;&gt;toPoints&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param maxPairs The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs&#x3D;1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs&#x3D;3 means return the 3 nearest toPoints to each fromPoint. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of routes and their route distances/times. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distanceBetweenPairsOutputFormatGetCall(String outputFormat, String fromPoints, String toPoints, Integer outputSRS, String criteria, String distanceUnit, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, Integer maxPairs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/distance/betweenPairs.{outputFormat}"
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromPoints != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromPoints", fromPoints));
        }

        if (toPoints != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toPoints", toPoints));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (criteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("criteria", criteria));
        }

        if (distanceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distanceUnit", distanceUnit));
        }

        if (departure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departure", departure));
        }

        if (correctSide != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("correctSide", correctSide));
        }

        if (disable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable", disable));
        }

        if (routeDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeDescription", routeDescription));
        }

        if (maxPairs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPairs", maxPairs));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distanceBetweenPairsOutputFormatGetValidateBeforeCall(String outputFormat, String fromPoints, String toPoints, Integer outputSRS, String criteria, String distanceUnit, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, Integer maxPairs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling distanceBetweenPairsOutputFormatGet(Async)");
        }

        // verify the required parameter 'fromPoints' is set
        if (fromPoints == null) {
            throw new ApiException("Missing the required parameter 'fromPoints' when calling distanceBetweenPairsOutputFormatGet(Async)");
        }

        // verify the required parameter 'toPoints' is set
        if (toPoints == null) {
            throw new ApiException("Missing the required parameter 'toPoints' when calling distanceBetweenPairsOutputFormatGet(Async)");
        }

        return distanceBetweenPairsOutputFormatGetCall(outputFormat, fromPoints, toPoints, outputSRS, criteria, distanceUnit, departure, correctSide, disable, routeDescription, maxPairs, _callback);

    }

    /**
     * Get distance and travel time between each pair of geographic points
     * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
     * @param outputFormat Format of representation (required)
     * @param fromPoints A comma-separated list of origin points.  See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target&#x3D;&#39;_blank&#39;&gt;fromPoints&lt;/a&gt; (required)
     * @param toPoints A comma-separated list of destination points. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target&#x3D;&#39;_blank&#39;&gt;toPoints&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param maxPairs The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs&#x3D;1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs&#x3D;3 means return the 3 nearest toPoints to each fromPoint. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of routes and their route distances/times. </td><td>  -  </td></tr>
     </table>
     */
    public void distanceBetweenPairsOutputFormatGet(String outputFormat, String fromPoints, String toPoints, Integer outputSRS, String criteria, String distanceUnit, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, Integer maxPairs) throws ApiException {
        distanceBetweenPairsOutputFormatGetWithHttpInfo(outputFormat, fromPoints, toPoints, outputSRS, criteria, distanceUnit, departure, correctSide, disable, routeDescription, maxPairs);
    }

    /**
     * Get distance and travel time between each pair of geographic points
     * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
     * @param outputFormat Format of representation (required)
     * @param fromPoints A comma-separated list of origin points.  See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target&#x3D;&#39;_blank&#39;&gt;fromPoints&lt;/a&gt; (required)
     * @param toPoints A comma-separated list of destination points. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target&#x3D;&#39;_blank&#39;&gt;toPoints&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param maxPairs The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs&#x3D;1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs&#x3D;3 means return the 3 nearest toPoints to each fromPoint. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of routes and their route distances/times. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> distanceBetweenPairsOutputFormatGetWithHttpInfo(String outputFormat, String fromPoints, String toPoints, Integer outputSRS, String criteria, String distanceUnit, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, Integer maxPairs) throws ApiException {
        okhttp3.Call localVarCall = distanceBetweenPairsOutputFormatGetValidateBeforeCall(outputFormat, fromPoints, toPoints, outputSRS, criteria, distanceUnit, departure, correctSide, disable, routeDescription, maxPairs, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get distance and travel time between each pair of geographic points (asynchronously)
     * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
     * @param outputFormat Format of representation (required)
     * @param fromPoints A comma-separated list of origin points.  See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target&#x3D;&#39;_blank&#39;&gt;fromPoints&lt;/a&gt; (required)
     * @param toPoints A comma-separated list of destination points. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target&#x3D;&#39;_blank&#39;&gt;toPoints&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param maxPairs The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs&#x3D;1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs&#x3D;3 means return the 3 nearest toPoints to each fromPoint. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of routes and their route distances/times. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distanceBetweenPairsOutputFormatGetAsync(String outputFormat, String fromPoints, String toPoints, Integer outputSRS, String criteria, String distanceUnit, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, Integer maxPairs, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = distanceBetweenPairsOutputFormatGetValidateBeforeCall(outputFormat, fromPoints, toPoints, outputSRS, criteria, distanceUnit, departure, correctSide, disable, routeDescription, maxPairs, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for distanceBetweenPairsOutputFormatPost
     * @param outputFormat Format of representation (required)
     * @param fromPoints A comma-separated list of origin points.  See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target&#x3D;&#39;_blank&#39;&gt;fromPoints&lt;/a&gt; (required)
     * @param toPoints A comma-separated list of destination points. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target&#x3D;&#39;_blank&#39;&gt;toPoints&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param maxPairs The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs&#x3D;1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs&#x3D;3 means return the 3 nearest toPoints to each fromPoint. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of routes and their route distances/times. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distanceBetweenPairsOutputFormatPostCall(String outputFormat, String fromPoints, String toPoints, Integer outputSRS, String criteria, String distanceUnit, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, Integer maxPairs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/distance/betweenPairs.{outputFormat}"
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromPoints != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromPoints", fromPoints));
        }

        if (toPoints != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toPoints", toPoints));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (criteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("criteria", criteria));
        }

        if (distanceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distanceUnit", distanceUnit));
        }

        if (departure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departure", departure));
        }

        if (correctSide != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("correctSide", correctSide));
        }

        if (disable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable", disable));
        }

        if (routeDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeDescription", routeDescription));
        }

        if (maxPairs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPairs", maxPairs));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distanceBetweenPairsOutputFormatPostValidateBeforeCall(String outputFormat, String fromPoints, String toPoints, Integer outputSRS, String criteria, String distanceUnit, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, Integer maxPairs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling distanceBetweenPairsOutputFormatPost(Async)");
        }

        // verify the required parameter 'fromPoints' is set
        if (fromPoints == null) {
            throw new ApiException("Missing the required parameter 'fromPoints' when calling distanceBetweenPairsOutputFormatPost(Async)");
        }

        // verify the required parameter 'toPoints' is set
        if (toPoints == null) {
            throw new ApiException("Missing the required parameter 'toPoints' when calling distanceBetweenPairsOutputFormatPost(Async)");
        }

        return distanceBetweenPairsOutputFormatPostCall(outputFormat, fromPoints, toPoints, outputSRS, criteria, distanceUnit, departure, correctSide, disable, routeDescription, maxPairs, _callback);

    }

    /**
     * Get distance and travel time between each pair of geographic points
     * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
     * @param outputFormat Format of representation (required)
     * @param fromPoints A comma-separated list of origin points.  See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target&#x3D;&#39;_blank&#39;&gt;fromPoints&lt;/a&gt; (required)
     * @param toPoints A comma-separated list of destination points. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target&#x3D;&#39;_blank&#39;&gt;toPoints&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param maxPairs The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs&#x3D;1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs&#x3D;3 means return the 3 nearest toPoints to each fromPoint. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of routes and their route distances/times. </td><td>  -  </td></tr>
     </table>
     */
    public void distanceBetweenPairsOutputFormatPost(String outputFormat, String fromPoints, String toPoints, Integer outputSRS, String criteria, String distanceUnit, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, Integer maxPairs) throws ApiException {
        distanceBetweenPairsOutputFormatPostWithHttpInfo(outputFormat, fromPoints, toPoints, outputSRS, criteria, distanceUnit, departure, correctSide, disable, routeDescription, maxPairs);
    }

    /**
     * Get distance and travel time between each pair of geographic points
     * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
     * @param outputFormat Format of representation (required)
     * @param fromPoints A comma-separated list of origin points.  See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target&#x3D;&#39;_blank&#39;&gt;fromPoints&lt;/a&gt; (required)
     * @param toPoints A comma-separated list of destination points. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target&#x3D;&#39;_blank&#39;&gt;toPoints&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param maxPairs The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs&#x3D;1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs&#x3D;3 means return the 3 nearest toPoints to each fromPoint. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of routes and their route distances/times. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> distanceBetweenPairsOutputFormatPostWithHttpInfo(String outputFormat, String fromPoints, String toPoints, Integer outputSRS, String criteria, String distanceUnit, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, Integer maxPairs) throws ApiException {
        okhttp3.Call localVarCall = distanceBetweenPairsOutputFormatPostValidateBeforeCall(outputFormat, fromPoints, toPoints, outputSRS, criteria, distanceUnit, departure, correctSide, disable, routeDescription, maxPairs, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get distance and travel time between each pair of geographic points (asynchronously)
     * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
     * @param outputFormat Format of representation (required)
     * @param fromPoints A comma-separated list of origin points.  See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target&#x3D;&#39;_blank&#39;&gt;fromPoints&lt;/a&gt; (required)
     * @param toPoints A comma-separated list of destination points. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target&#x3D;&#39;_blank&#39;&gt;toPoints&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param maxPairs The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs&#x3D;1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs&#x3D;3 means return the 3 nearest toPoints to each fromPoint. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of routes and their route distances/times. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distanceBetweenPairsOutputFormatPostAsync(String outputFormat, String fromPoints, String toPoints, Integer outputSRS, String criteria, String distanceUnit, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, Integer maxPairs, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = distanceBetweenPairsOutputFormatPostValidateBeforeCall(outputFormat, fromPoints, toPoints, outputSRS, criteria, distanceUnit, departure, correctSide, disable, routeDescription, maxPairs, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for distanceOutputFormatGet
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distance and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distanceOutputFormatGetCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/distance.{outputFormat}"
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (points != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("points", points));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (criteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("criteria", criteria));
        }

        if (distanceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distanceUnit", distanceUnit));
        }

        if (roundTrip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roundTrip", roundTrip));
        }

        if (departure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departure", departure));
        }

        if (correctSide != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("correctSide", correctSide));
        }

        if (disable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable", disable));
        }

        if (routeDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeDescription", routeDescription));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distanceOutputFormatGetValidateBeforeCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling distanceOutputFormatGet(Async)");
        }

        // verify the required parameter 'points' is set
        if (points == null) {
            throw new ApiException("Missing the required parameter 'points' when calling distanceOutputFormatGet(Async)");
        }

        return distanceOutputFormatGetCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, _callback);

    }

    /**
     * Get distance and travel time between two geographic points
     * Represents the distance and time of the shortest or fastest path between given start and end points.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distance and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public void distanceOutputFormatGet(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription) throws ApiException {
        distanceOutputFormatGetWithHttpInfo(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription);
    }

    /**
     * Get distance and travel time between two geographic points
     * Represents the distance and time of the shortest or fastest path between given start and end points.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distance and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> distanceOutputFormatGetWithHttpInfo(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription) throws ApiException {
        okhttp3.Call localVarCall = distanceOutputFormatGetValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get distance and travel time between two geographic points (asynchronously)
     * Represents the distance and time of the shortest or fastest path between given start and end points.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distance and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distanceOutputFormatGetAsync(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = distanceOutputFormatGetValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for distanceOutputFormatPost
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distance and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distanceOutputFormatPostCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/distance.{outputFormat}"
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (points != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("points", points));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (criteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("criteria", criteria));
        }

        if (distanceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distanceUnit", distanceUnit));
        }

        if (roundTrip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roundTrip", roundTrip));
        }

        if (departure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departure", departure));
        }

        if (correctSide != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("correctSide", correctSide));
        }

        if (disable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable", disable));
        }

        if (routeDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeDescription", routeDescription));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distanceOutputFormatPostValidateBeforeCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling distanceOutputFormatPost(Async)");
        }

        // verify the required parameter 'points' is set
        if (points == null) {
            throw new ApiException("Missing the required parameter 'points' when calling distanceOutputFormatPost(Async)");
        }

        return distanceOutputFormatPostCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, _callback);

    }

    /**
     * Get distance and travel time between two geographic points
     * Represents the distance and time of the shortest or fastest path between given start and end points.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distance and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public void distanceOutputFormatPost(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription) throws ApiException {
        distanceOutputFormatPostWithHttpInfo(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription);
    }

    /**
     * Get distance and travel time between two geographic points
     * Represents the distance and time of the shortest or fastest path between given start and end points.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distance and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> distanceOutputFormatPostWithHttpInfo(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription) throws ApiException {
        okhttp3.Call localVarCall = distanceOutputFormatPostValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get distance and travel time between two geographic points (asynchronously)
     * Represents the distance and time of the shortest or fastest path between given start and end points.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distance and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distanceOutputFormatPostAsync(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = distanceOutputFormatPostValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for truckDistanceBetweenPairsOutputFormatGet
     * @param outputFormat Format of representation (required)
     * @param fromPoints A comma-separated list of origin points.  See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target&#x3D;&#39;_blank&#39;&gt;fromPoints&lt;/a&gt; (required)
     * @param toPoints A comma-separated list of destination points. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target&#x3D;&#39;_blank&#39;&gt;toPoints&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param maxPairs The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs&#x3D;1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs&#x3D;3 means return the 3 nearest toPoints to each fromPoint. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of routes and their route distances/times. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call truckDistanceBetweenPairsOutputFormatGetCall(String outputFormat, String fromPoints, String toPoints, Integer outputSRS, String criteria, String distanceUnit, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, Integer maxPairs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/truck/distance/betweenPairs.{outputFormat}"
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromPoints != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromPoints", fromPoints));
        }

        if (toPoints != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toPoints", toPoints));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (criteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("criteria", criteria));
        }

        if (distanceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distanceUnit", distanceUnit));
        }

        if (departure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departure", departure));
        }

        if (correctSide != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("correctSide", correctSide));
        }

        if (disable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable", disable));
        }

        if (routeDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeDescription", routeDescription));
        }

        if (maxPairs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPairs", maxPairs));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call truckDistanceBetweenPairsOutputFormatGetValidateBeforeCall(String outputFormat, String fromPoints, String toPoints, Integer outputSRS, String criteria, String distanceUnit, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, Integer maxPairs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling truckDistanceBetweenPairsOutputFormatGet(Async)");
        }

        // verify the required parameter 'fromPoints' is set
        if (fromPoints == null) {
            throw new ApiException("Missing the required parameter 'fromPoints' when calling truckDistanceBetweenPairsOutputFormatGet(Async)");
        }

        // verify the required parameter 'toPoints' is set
        if (toPoints == null) {
            throw new ApiException("Missing the required parameter 'toPoints' when calling truckDistanceBetweenPairsOutputFormatGet(Async)");
        }

        return truckDistanceBetweenPairsOutputFormatGetCall(outputFormat, fromPoints, toPoints, outputSRS, criteria, distanceUnit, departure, correctSide, disable, routeDescription, maxPairs, _callback);

    }

    /**
     * Get distance and travel time between each pair of geographic points for a commercial vehicle
     * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints for a commercial vehicle. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
     * @param outputFormat Format of representation (required)
     * @param fromPoints A comma-separated list of origin points.  See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target&#x3D;&#39;_blank&#39;&gt;fromPoints&lt;/a&gt; (required)
     * @param toPoints A comma-separated list of destination points. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target&#x3D;&#39;_blank&#39;&gt;toPoints&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param maxPairs The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs&#x3D;1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs&#x3D;3 means return the 3 nearest toPoints to each fromPoint. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of routes and their route distances/times. </td><td>  -  </td></tr>
     </table>
     */
    public void truckDistanceBetweenPairsOutputFormatGet(String outputFormat, String fromPoints, String toPoints, Integer outputSRS, String criteria, String distanceUnit, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, Integer maxPairs) throws ApiException {
        truckDistanceBetweenPairsOutputFormatGetWithHttpInfo(outputFormat, fromPoints, toPoints, outputSRS, criteria, distanceUnit, departure, correctSide, disable, routeDescription, maxPairs);
    }

    /**
     * Get distance and travel time between each pair of geographic points for a commercial vehicle
     * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints for a commercial vehicle. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
     * @param outputFormat Format of representation (required)
     * @param fromPoints A comma-separated list of origin points.  See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target&#x3D;&#39;_blank&#39;&gt;fromPoints&lt;/a&gt; (required)
     * @param toPoints A comma-separated list of destination points. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target&#x3D;&#39;_blank&#39;&gt;toPoints&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param maxPairs The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs&#x3D;1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs&#x3D;3 means return the 3 nearest toPoints to each fromPoint. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of routes and their route distances/times. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> truckDistanceBetweenPairsOutputFormatGetWithHttpInfo(String outputFormat, String fromPoints, String toPoints, Integer outputSRS, String criteria, String distanceUnit, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, Integer maxPairs) throws ApiException {
        okhttp3.Call localVarCall = truckDistanceBetweenPairsOutputFormatGetValidateBeforeCall(outputFormat, fromPoints, toPoints, outputSRS, criteria, distanceUnit, departure, correctSide, disable, routeDescription, maxPairs, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get distance and travel time between each pair of geographic points for a commercial vehicle (asynchronously)
     * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints for a commercial vehicle. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
     * @param outputFormat Format of representation (required)
     * @param fromPoints A comma-separated list of origin points.  See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target&#x3D;&#39;_blank&#39;&gt;fromPoints&lt;/a&gt; (required)
     * @param toPoints A comma-separated list of destination points. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target&#x3D;&#39;_blank&#39;&gt;toPoints&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param maxPairs The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs&#x3D;1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs&#x3D;3 means return the 3 nearest toPoints to each fromPoint. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of routes and their route distances/times. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call truckDistanceBetweenPairsOutputFormatGetAsync(String outputFormat, String fromPoints, String toPoints, Integer outputSRS, String criteria, String distanceUnit, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, Integer maxPairs, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = truckDistanceBetweenPairsOutputFormatGetValidateBeforeCall(outputFormat, fromPoints, toPoints, outputSRS, criteria, distanceUnit, departure, correctSide, disable, routeDescription, maxPairs, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for truckDistanceBetweenPairsOutputFormatPost
     * @param outputFormat Format of representation (required)
     * @param fromPoints A comma-separated list of origin points.  See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target&#x3D;&#39;_blank&#39;&gt;fromPoints&lt;/a&gt; (required)
     * @param toPoints A comma-separated list of destination points. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target&#x3D;&#39;_blank&#39;&gt;toPoints&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param maxPairs The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs&#x3D;1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs&#x3D;3 means return the 3 nearest toPoints to each fromPoint. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of routes and their route distances/times. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call truckDistanceBetweenPairsOutputFormatPostCall(String outputFormat, String fromPoints, String toPoints, Integer outputSRS, String criteria, String distanceUnit, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, Integer maxPairs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/truck/distance/betweenPairs.{outputFormat}"
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromPoints != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromPoints", fromPoints));
        }

        if (toPoints != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toPoints", toPoints));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (criteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("criteria", criteria));
        }

        if (distanceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distanceUnit", distanceUnit));
        }

        if (departure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departure", departure));
        }

        if (correctSide != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("correctSide", correctSide));
        }

        if (disable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable", disable));
        }

        if (routeDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeDescription", routeDescription));
        }

        if (maxPairs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPairs", maxPairs));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call truckDistanceBetweenPairsOutputFormatPostValidateBeforeCall(String outputFormat, String fromPoints, String toPoints, Integer outputSRS, String criteria, String distanceUnit, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, Integer maxPairs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling truckDistanceBetweenPairsOutputFormatPost(Async)");
        }

        // verify the required parameter 'fromPoints' is set
        if (fromPoints == null) {
            throw new ApiException("Missing the required parameter 'fromPoints' when calling truckDistanceBetweenPairsOutputFormatPost(Async)");
        }

        // verify the required parameter 'toPoints' is set
        if (toPoints == null) {
            throw new ApiException("Missing the required parameter 'toPoints' when calling truckDistanceBetweenPairsOutputFormatPost(Async)");
        }

        return truckDistanceBetweenPairsOutputFormatPostCall(outputFormat, fromPoints, toPoints, outputSRS, criteria, distanceUnit, departure, correctSide, disable, routeDescription, maxPairs, _callback);

    }

    /**
     * Get distance and travel time between each pair of geographic points
     * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
     * @param outputFormat Format of representation (required)
     * @param fromPoints A comma-separated list of origin points.  See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target&#x3D;&#39;_blank&#39;&gt;fromPoints&lt;/a&gt; (required)
     * @param toPoints A comma-separated list of destination points. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target&#x3D;&#39;_blank&#39;&gt;toPoints&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param maxPairs The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs&#x3D;1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs&#x3D;3 means return the 3 nearest toPoints to each fromPoint. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of routes and their route distances/times. </td><td>  -  </td></tr>
     </table>
     */
    public void truckDistanceBetweenPairsOutputFormatPost(String outputFormat, String fromPoints, String toPoints, Integer outputSRS, String criteria, String distanceUnit, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, Integer maxPairs) throws ApiException {
        truckDistanceBetweenPairsOutputFormatPostWithHttpInfo(outputFormat, fromPoints, toPoints, outputSRS, criteria, distanceUnit, departure, correctSide, disable, routeDescription, maxPairs);
    }

    /**
     * Get distance and travel time between each pair of geographic points
     * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
     * @param outputFormat Format of representation (required)
     * @param fromPoints A comma-separated list of origin points.  See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target&#x3D;&#39;_blank&#39;&gt;fromPoints&lt;/a&gt; (required)
     * @param toPoints A comma-separated list of destination points. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target&#x3D;&#39;_blank&#39;&gt;toPoints&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param maxPairs The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs&#x3D;1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs&#x3D;3 means return the 3 nearest toPoints to each fromPoint. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of routes and their route distances/times. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> truckDistanceBetweenPairsOutputFormatPostWithHttpInfo(String outputFormat, String fromPoints, String toPoints, Integer outputSRS, String criteria, String distanceUnit, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, Integer maxPairs) throws ApiException {
        okhttp3.Call localVarCall = truckDistanceBetweenPairsOutputFormatPostValidateBeforeCall(outputFormat, fromPoints, toPoints, outputSRS, criteria, distanceUnit, departure, correctSide, disable, routeDescription, maxPairs, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get distance and travel time between each pair of geographic points (asynchronously)
     * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
     * @param outputFormat Format of representation (required)
     * @param fromPoints A comma-separated list of origin points.  See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target&#x3D;&#39;_blank&#39;&gt;fromPoints&lt;/a&gt; (required)
     * @param toPoints A comma-separated list of destination points. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target&#x3D;&#39;_blank&#39;&gt;toPoints&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param maxPairs The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs&#x3D;1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs&#x3D;3 means return the 3 nearest toPoints to each fromPoint. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of routes and their route distances/times. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call truckDistanceBetweenPairsOutputFormatPostAsync(String outputFormat, String fromPoints, String toPoints, Integer outputSRS, String criteria, String distanceUnit, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, Integer maxPairs, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = truckDistanceBetweenPairsOutputFormatPostValidateBeforeCall(outputFormat, fromPoints, toPoints, outputSRS, criteria, distanceUnit, departure, correctSide, disable, routeDescription, maxPairs, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for truckDistanceOutputFormatGet
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes. (optional, default to 9)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distance and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call truckDistanceOutputFormatGetCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/truck/distance.{outputFormat}"
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (points != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("points", points));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (criteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("criteria", criteria));
        }

        if (distanceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distanceUnit", distanceUnit));
        }

        if (roundTrip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roundTrip", roundTrip));
        }

        if (departure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departure", departure));
        }

        if (correctSide != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("correctSide", correctSide));
        }

        if (truckRouteMultiplier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("truckRouteMultiplier", truckRouteMultiplier));
        }

        if (disable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable", disable));
        }

        if (routeDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeDescription", routeDescription));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call truckDistanceOutputFormatGetValidateBeforeCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling truckDistanceOutputFormatGet(Async)");
        }

        // verify the required parameter 'points' is set
        if (points == null) {
            throw new ApiException("Missing the required parameter 'points' when calling truckDistanceOutputFormatGet(Async)");
        }

        return truckDistanceOutputFormatGetCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, disable, routeDescription, _callback);

    }

    /**
     * Get distance and travel time between two geographic points for a commercial vehicle
     * Represents the distance and time of the shortest or fastest path between given start and end points.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes. (optional, default to 9)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distance and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public void truckDistanceOutputFormatGet(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String disable, String routeDescription) throws ApiException {
        truckDistanceOutputFormatGetWithHttpInfo(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, disable, routeDescription);
    }

    /**
     * Get distance and travel time between two geographic points for a commercial vehicle
     * Represents the distance and time of the shortest or fastest path between given start and end points.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes. (optional, default to 9)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distance and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> truckDistanceOutputFormatGetWithHttpInfo(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String disable, String routeDescription) throws ApiException {
        okhttp3.Call localVarCall = truckDistanceOutputFormatGetValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, disable, routeDescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get distance and travel time between two geographic points for a commercial vehicle (asynchronously)
     * Represents the distance and time of the shortest or fastest path between given start and end points.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param truckRouteMultiplier The truck route multiplier value is used to multiply the cost of using roads that are not truck routes. (optional, default to 9)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distance and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call truckDistanceOutputFormatGetAsync(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, Integer truckRouteMultiplier, String disable, String routeDescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = truckDistanceOutputFormatGetValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, disable, routeDescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for truckDistanceOutputFormatPost
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distance and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call truckDistanceOutputFormatPostCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/truck/distance.{outputFormat}"
            .replace("{" + "outputFormat" + "}", localVarApiClient.escapeString(outputFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (points != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("points", points));
        }

        if (outputSRS != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputSRS", outputSRS));
        }

        if (criteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("criteria", criteria));
        }

        if (distanceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distanceUnit", distanceUnit));
        }

        if (roundTrip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roundTrip", roundTrip));
        }

        if (departure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departure", departure));
        }

        if (correctSide != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("correctSide", correctSide));
        }

        if (disable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable", disable));
        }

        if (routeDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeDescription", routeDescription));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call truckDistanceOutputFormatPostValidateBeforeCall(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling truckDistanceOutputFormatPost(Async)");
        }

        // verify the required parameter 'points' is set
        if (points == null) {
            throw new ApiException("Missing the required parameter 'points' when calling truckDistanceOutputFormatPost(Async)");
        }

        return truckDistanceOutputFormatPostCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, _callback);

    }

    /**
     * Get distance and travel time between two geographic points
     * Represents the distance and time of the shortest or fastest path between given start and end points.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distance and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public void truckDistanceOutputFormatPost(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription) throws ApiException {
        truckDistanceOutputFormatPostWithHttpInfo(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription);
    }

    /**
     * Get distance and travel time between two geographic points
     * Represents the distance and time of the shortest or fastest path between given start and end points.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distance and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> truckDistanceOutputFormatPostWithHttpInfo(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription) throws ApiException {
        okhttp3.Call localVarCall = truckDistanceOutputFormatPostValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get distance and travel time between two geographic points (asynchronously)
     * Represents the distance and time of the shortest or fastest path between given start and end points.
     * @param outputFormat Format of representation (required)
     * @param points A list of any number of route points in start to end order. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target&#x3D;&#39;_blank&#39;&gt;points&lt;/a&gt; (required)
     * @param outputSRS The EPSG code of the spatial reference system (SRS) to use for output geometries. See &lt;a href&#x3D;https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target&#x3D;\&quot;_blank\&quot;&gt;outputSRS&lt;/a&gt; (optional, default to 4326)
     * @param criteria Routing criteria to optimize (e.g., shortest, fastest). Default is shortest. (optional, default to shortest)
     * @param distanceUnit distance unit of measure (e.g., km, mi). Default is km. (optional, default to km)
     * @param roundTrip If true, route ends at start point. Default is false. (optional, default to false)
     * @param departure departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);&lt;br&gt; Ignored if time-dependency modules are disabled (optional)
     * @param correctSide If true, route starts and ends on same side of road as start and end points.Default is false. (optional, default to false)
     * @param disable A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).&lt;br&gt;&lt;br&gt;Module names include:&lt;br&gt; sc – ferry schedules; disabled by default; disabled by default and only suitable for demos&lt;br&gt;tf – historic traffic congestion; disabled by default and only suitable for demos&lt;br&gt;ev – road events; disabled by default and only suitable for demos&lt;br&gt;td – time-dependency; disabling this disables sc, tf, and ev modules&lt;br&gt;tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored&lt;br&gt;tc - turn costs (e.g., left turns take longer than right turns) (optional, default to sc,tf,ev,td)
     * @param routeDescription Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster) (optional, default to Routing results)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distance and time of the shortest or fastest route </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call truckDistanceOutputFormatPostAsync(String outputFormat, String points, Integer outputSRS, String criteria, String distanceUnit, Boolean roundTrip, OffsetDateTime departure, Boolean correctSide, String disable, String routeDescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = truckDistanceOutputFormatPostValidateBeforeCall(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
