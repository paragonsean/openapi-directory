/*
 * BC Route Planner REST API
 * Finds shortest/fastest route between a start point and one or more stop points on British Columbia's public road network. The BC Route planner [webpage](https://www2.gov.bc.ca/gov/content?id=9D99E684CCD042CD88FADC51E079B4B5) provides additional information.  Here are some geocoded addresses to play with:<br>18 Douglas St,Victoria -123.36962,48.40892<br>1002 Johnson St, Victoria -123.355745,48.426206<br>543 Johnson St, Victoria, BC -123.36907,48.42770 <br>14 Centennial Sq, Victoria, BC -123.36564,48.42863<br>1105 Royal Ave,New Westminster  -122.92009,49.20063<br>808 Jackson Cres, New Westminster -122.90762,49.22558<br>10810 McDonald Rd, Chilliwack -121.93808,49.19859<br>3950 June Springs Rd, Kelowna -119.40751,49.83960<br>1201 Riondel Rd, Kootenay Bay -116.85402,49.74448<br>1201 Riondel Rd, Kootenay Bay -116.832759,49.730500 (parcelPoint)<br>2499 Walbran Pl, Courtenay -124.97295,49.71518<br>2013 Smoke Bluff Rd, Squamish -123.13946,49.70401<br>235 Kelvin Grove Way, Lions Bay -123.23524,49.45035<br>   Please see our <a href=https://github.com/bcgov/api-specs/blob/master/COLLECTION_NOTICE.md#collection-notice target=\"_blank\">data collection notice</a>.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.   [API keys](https://api.gov.bc.ca/devportal/api-directory/740) are unique and can be acquired with a GitHub or IDIR account.   
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RouteApi
 */
@Disabled
public class RouteApiTest {

    private final RouteApi api = new RouteApi();

    /**
     * Get the optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
     *
     * Represents the geometry, distance, and time of the shortest or fastest path between a start point and a series of end points which are reordered to minimize distance or time
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void optimalRouteOutputFormatGetTest() throws ApiException {
        String outputFormat = null;
        String points = null;
        Integer outputSRS = null;
        String criteria = null;
        String distanceUnit = null;
        Boolean roundTrip = null;
        OffsetDateTime departure = null;
        Boolean correctSide = null;
        String disable = null;
        String routeDescription = null;
        api.optimalRouteOutputFormatGet(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription);
        // TODO: test validations
    }

    /**
     * Get the path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
     *
     * Represents the geometry, distance, and time of the shortest or fastest path between a start point and a series of end points which are reordered to minimize total distance or time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void optimalRouteOutputFormatPostTest() throws ApiException {
        String outputFormat = null;
        String points = null;
        Integer outputSRS = null;
        String criteria = null;
        String distanceUnit = null;
        Boolean roundTrip = null;
        OffsetDateTime departure = null;
        Boolean correctSide = null;
        String disable = null;
        String routeDescription = null;
        api.optimalRouteOutputFormatPost(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription);
        // TODO: test validations
    }

    /**
     * Get the path, distance and travel time between a series of geographic points
     *
     * Represents the geometry, distance, and time of the shortest or fastest path between given start and end points.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routeOutputFormatGetTest() throws ApiException {
        String outputFormat = null;
        String points = null;
        Integer outputSRS = null;
        String criteria = null;
        String distanceUnit = null;
        Boolean roundTrip = null;
        OffsetDateTime departure = null;
        Boolean correctSide = null;
        String disable = null;
        String routeDescription = null;
        api.routeOutputFormatGet(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription);
        // TODO: test validations
    }

    /**
     * Get the path, distance and travel time between a series of geographic points
     *
     * Represents the geometry, distance, and time of the shortest or fastest path between given start and end points.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routeOutputFormatPostTest() throws ApiException {
        String outputFormat = null;
        String points = null;
        Integer outputSRS = null;
        String criteria = null;
        String distanceUnit = null;
        Boolean roundTrip = null;
        OffsetDateTime departure = null;
        Boolean correctSide = null;
        String disable = null;
        String routeDescription = null;
        api.routeOutputFormatPost(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, disable, routeDescription);
        // TODO: test validations
    }

    /**
     * Get the optimal path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time for a commercial vehicle
     *
     * Represents the geometry, distance, and time of the shortest or fastest path between a start point and a series of end points which are reordered to minimize distance or time for a commercial vehicle.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void truckOptimalRouteOutputFormatGetTest() throws ApiException {
        String outputFormat = null;
        String points = null;
        Integer outputSRS = null;
        String criteria = null;
        String distanceUnit = null;
        Boolean roundTrip = null;
        OffsetDateTime departure = null;
        Boolean correctSide = null;
        Integer truckRouteMultiplier = null;
        String partition = null;
        String disable = null;
        String routeDescription = null;
        api.truckOptimalRouteOutputFormatGet(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, partition, disable, routeDescription);
        // TODO: test validations
    }

    /**
     * Get the path, distance and travel time between a start point and a series of end points which are reordered to minimize total distance or time.
     *
     * Represents the geometry, distance, and time of the shortest or fastest path between a start point and a series of end points which are reordered to minimize total distance or time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void truckOptimalRouteOutputFormatPostTest() throws ApiException {
        String outputFormat = null;
        String points = null;
        Integer outputSRS = null;
        String criteria = null;
        String distanceUnit = null;
        Boolean roundTrip = null;
        OffsetDateTime departure = null;
        Boolean correctSide = null;
        Integer truckRouteMultiplier = null;
        String partition = null;
        String disable = null;
        String routeDescription = null;
        api.truckOptimalRouteOutputFormatPost(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, partition, disable, routeDescription);
        // TODO: test validations
    }

    /**
     * Get the path, distance and travel time between a series of geographic points for a commercial vehicle
     *
     * Represents the geometry, distance, and time of the shortest or fastest path between given start and end points for a commercial vehicle.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void truckRouteOutputFormatGetTest() throws ApiException {
        String outputFormat = null;
        String points = null;
        Integer outputSRS = null;
        String criteria = null;
        String distanceUnit = null;
        Boolean roundTrip = null;
        OffsetDateTime departure = null;
        Boolean correctSide = null;
        Integer truckRouteMultiplier = null;
        String partition = null;
        String disable = null;
        String routeDescription = null;
        api.truckRouteOutputFormatGet(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, partition, disable, routeDescription);
        // TODO: test validations
    }

    /**
     * Get the path, distance and travel time between a series of geographic points
     *
     * Represents the geometry, distance, and time of the shortest or fastest path between given start and end points.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void truckRouteOutputFormatPostTest() throws ApiException {
        String outputFormat = null;
        String points = null;
        Integer outputSRS = null;
        String criteria = null;
        String distanceUnit = null;
        Boolean roundTrip = null;
        OffsetDateTime departure = null;
        Boolean correctSide = null;
        Integer truckRouteMultiplier = null;
        String partition = null;
        String disable = null;
        String routeDescription = null;
        api.truckRouteOutputFormatPost(outputFormat, points, outputSRS, criteria, distanceUnit, roundTrip, departure, correctSide, truckRouteMultiplier, partition, disable, routeDescription);
        // TODO: test validations
    }

}
