/**
 * BC Route Planner REST API
 * Finds shortest/fastest route between a start point and one or more stop points on British Columbia's public road network. The BC Route planner [webpage](https://www2.gov.bc.ca/gov/content?id=9D99E684CCD042CD88FADC51E079B4B5) provides additional information.  Here are some geocoded addresses to play with:<br>18 Douglas St,Victoria -123.36962,48.40892<br>1002 Johnson St, Victoria -123.355745,48.426206<br>543 Johnson St, Victoria, BC -123.36907,48.42770 <br>14 Centennial Sq, Victoria, BC -123.36564,48.42863<br>1105 Royal Ave,New Westminster  -122.92009,49.20063<br>808 Jackson Cres, New Westminster -122.90762,49.22558<br>10810 McDonald Rd, Chilliwack -121.93808,49.19859<br>3950 June Springs Rd, Kelowna -119.40751,49.83960<br>1201 Riondel Rd, Kootenay Bay -116.85402,49.74448<br>1201 Riondel Rd, Kootenay Bay -116.832759,49.730500 (parcelPoint)<br>2499 Walbran Pl, Courtenay -124.97295,49.71518<br>2013 Smoke Bluff Rd, Squamish -123.13946,49.70401<br>235 Kelvin Grove Way, Lions Bay -123.23524,49.45035<br>   Please see our <a href=https://github.com/bcgov/api-specs/blob/master/COLLECTION_NOTICE.md#collection-notice target=\"_blank\">data collection notice</a>.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.   [API keys](https://api.gov.bc.ca/devportal/api-directory/740) are unique and can be acquired with a GitHub or IDIR account.   
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDirectionsApi_H
#define OAI_OAIDirectionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDirectionsApi : public QObject {
    Q_OBJECT

public:
    OAIDirectionsApi(const int timeOut = 0);
    ~OAIDirectionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  points QString [required]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  criteria QString [optional]
    * @param[in]  distance_unit QString [optional]
    * @param[in]  round_trip bool [optional]
    * @param[in]  departure QDateTime [optional]
    * @param[in]  correct_side bool [optional]
    * @param[in]  disable QString [optional]
    * @param[in]  route_description QString [optional]
    */
    virtual void directionsOutputFormatGet(const QString &output_format, const QString &points, const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &criteria = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &distance_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &round_trip = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &departure = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &correct_side = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &disable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &route_description = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  points QString [required]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  criteria QString [optional]
    * @param[in]  distance_unit QString [optional]
    * @param[in]  round_trip bool [optional]
    * @param[in]  departure QDateTime [optional]
    * @param[in]  correct_side bool [optional]
    * @param[in]  disable QString [optional]
    * @param[in]  route_description QString [optional]
    */
    virtual void directionsOutputFormatPost(const QString &output_format, const QString &points, const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &criteria = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &distance_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &round_trip = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &departure = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &correct_side = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &disable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &route_description = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  points QString [required]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  criteria QString [optional]
    * @param[in]  distance_unit QString [optional]
    * @param[in]  round_trip bool [optional]
    * @param[in]  departure QDateTime [optional]
    * @param[in]  correct_side bool [optional]
    * @param[in]  disable QString [optional]
    * @param[in]  route_description QString [optional]
    */
    virtual void optimalDirectionsOutputFormatGet(const QString &output_format, const QString &points, const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &criteria = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &distance_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &round_trip = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &departure = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &correct_side = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &disable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &route_description = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  points QString [required]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  criteria QString [optional]
    * @param[in]  distance_unit QString [optional]
    * @param[in]  round_trip bool [optional]
    * @param[in]  departure QDateTime [optional]
    * @param[in]  correct_side bool [optional]
    * @param[in]  disable QString [optional]
    * @param[in]  route_description QString [optional]
    */
    virtual void optimalDirectionsOutputFormatPost(const QString &output_format, const QString &points, const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &criteria = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &distance_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &round_trip = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &departure = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &correct_side = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &disable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &route_description = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  points QString [required]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  criteria QString [optional]
    * @param[in]  distance_unit QString [optional]
    * @param[in]  round_trip bool [optional]
    * @param[in]  departure QDateTime [optional]
    * @param[in]  correct_side bool [optional]
    * @param[in]  truck_route_multiplier qint32 [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  disable QString [optional]
    * @param[in]  route_description QString [optional]
    */
    virtual void truckDirectionsOutputFormatGet(const QString &output_format, const QString &points, const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &criteria = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &distance_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &round_trip = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &departure = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &correct_side = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &truck_route_multiplier = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &route_description = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  points QString [required]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  criteria QString [optional]
    * @param[in]  distance_unit QString [optional]
    * @param[in]  round_trip bool [optional]
    * @param[in]  departure QDateTime [optional]
    * @param[in]  correct_side bool [optional]
    * @param[in]  truck_route_multiplier qint32 [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  disable QString [optional]
    * @param[in]  route_description QString [optional]
    */
    virtual void truckDirectionsOutputFormatPost(const QString &output_format, const QString &points, const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &criteria = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &distance_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &round_trip = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &departure = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &correct_side = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &truck_route_multiplier = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &route_description = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  points QString [required]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  criteria QString [optional]
    * @param[in]  distance_unit QString [optional]
    * @param[in]  round_trip bool [optional]
    * @param[in]  departure QDateTime [optional]
    * @param[in]  correct_side bool [optional]
    * @param[in]  truck_route_multiplier qint32 [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  disable QString [optional]
    * @param[in]  route_description QString [optional]
    */
    virtual void truckOptimalDirectionsOutputFormatGet(const QString &output_format, const QString &points, const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &criteria = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &distance_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &round_trip = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &departure = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &correct_side = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &truck_route_multiplier = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &route_description = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  output_format QString [required]
    * @param[in]  points QString [required]
    * @param[in]  output_srs qint32 [optional]
    * @param[in]  criteria QString [optional]
    * @param[in]  distance_unit QString [optional]
    * @param[in]  round_trip bool [optional]
    * @param[in]  departure QDateTime [optional]
    * @param[in]  correct_side bool [optional]
    * @param[in]  truck_route_multiplier qint32 [optional]
    * @param[in]  partition QString [optional]
    * @param[in]  disable QString [optional]
    * @param[in]  route_description QString [optional]
    */
    virtual void truckOptimalDirectionsOutputFormatPost(const QString &output_format, const QString &points, const ::OpenAPI::OptionalParam<qint32> &output_srs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &criteria = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &distance_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &round_trip = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &departure = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &correct_side = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &truck_route_multiplier = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &partition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &route_description = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void directionsOutputFormatGetCallback(OAIHttpRequestWorker *worker);
    void directionsOutputFormatPostCallback(OAIHttpRequestWorker *worker);
    void optimalDirectionsOutputFormatGetCallback(OAIHttpRequestWorker *worker);
    void optimalDirectionsOutputFormatPostCallback(OAIHttpRequestWorker *worker);
    void truckDirectionsOutputFormatGetCallback(OAIHttpRequestWorker *worker);
    void truckDirectionsOutputFormatPostCallback(OAIHttpRequestWorker *worker);
    void truckOptimalDirectionsOutputFormatGetCallback(OAIHttpRequestWorker *worker);
    void truckOptimalDirectionsOutputFormatPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void directionsOutputFormatGetSignal();
    void directionsOutputFormatPostSignal();
    void optimalDirectionsOutputFormatGetSignal();
    void optimalDirectionsOutputFormatPostSignal();
    void truckDirectionsOutputFormatGetSignal();
    void truckDirectionsOutputFormatPostSignal();
    void truckOptimalDirectionsOutputFormatGetSignal();
    void truckOptimalDirectionsOutputFormatPostSignal();


    void directionsOutputFormatGetSignalFull(OAIHttpRequestWorker *worker);
    void directionsOutputFormatPostSignalFull(OAIHttpRequestWorker *worker);
    void optimalDirectionsOutputFormatGetSignalFull(OAIHttpRequestWorker *worker);
    void optimalDirectionsOutputFormatPostSignalFull(OAIHttpRequestWorker *worker);
    void truckDirectionsOutputFormatGetSignalFull(OAIHttpRequestWorker *worker);
    void truckDirectionsOutputFormatPostSignalFull(OAIHttpRequestWorker *worker);
    void truckOptimalDirectionsOutputFormatGetSignalFull(OAIHttpRequestWorker *worker);
    void truckOptimalDirectionsOutputFormatPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use directionsOutputFormatGetSignalError() instead")
    void directionsOutputFormatGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void directionsOutputFormatGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use directionsOutputFormatPostSignalError() instead")
    void directionsOutputFormatPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void directionsOutputFormatPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use optimalDirectionsOutputFormatGetSignalError() instead")
    void optimalDirectionsOutputFormatGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void optimalDirectionsOutputFormatGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use optimalDirectionsOutputFormatPostSignalError() instead")
    void optimalDirectionsOutputFormatPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void optimalDirectionsOutputFormatPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use truckDirectionsOutputFormatGetSignalError() instead")
    void truckDirectionsOutputFormatGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void truckDirectionsOutputFormatGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use truckDirectionsOutputFormatPostSignalError() instead")
    void truckDirectionsOutputFormatPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void truckDirectionsOutputFormatPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use truckOptimalDirectionsOutputFormatGetSignalError() instead")
    void truckOptimalDirectionsOutputFormatGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void truckOptimalDirectionsOutputFormatGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use truckOptimalDirectionsOutputFormatPostSignalError() instead")
    void truckOptimalDirectionsOutputFormatPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void truckOptimalDirectionsOutputFormatPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use directionsOutputFormatGetSignalErrorFull() instead")
    void directionsOutputFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void directionsOutputFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use directionsOutputFormatPostSignalErrorFull() instead")
    void directionsOutputFormatPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void directionsOutputFormatPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use optimalDirectionsOutputFormatGetSignalErrorFull() instead")
    void optimalDirectionsOutputFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void optimalDirectionsOutputFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use optimalDirectionsOutputFormatPostSignalErrorFull() instead")
    void optimalDirectionsOutputFormatPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void optimalDirectionsOutputFormatPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use truckDirectionsOutputFormatGetSignalErrorFull() instead")
    void truckDirectionsOutputFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void truckDirectionsOutputFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use truckDirectionsOutputFormatPostSignalErrorFull() instead")
    void truckDirectionsOutputFormatPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void truckDirectionsOutputFormatPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use truckOptimalDirectionsOutputFormatGetSignalErrorFull() instead")
    void truckOptimalDirectionsOutputFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void truckOptimalDirectionsOutputFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use truckOptimalDirectionsOutputFormatPostSignalErrorFull() instead")
    void truckOptimalDirectionsOutputFormatPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void truckOptimalDirectionsOutputFormatPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
