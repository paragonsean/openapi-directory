/*
 * BC Data Catalogue API
 * This API provides live access to the BC Data Catalogue. Further documentation on the API is available from http://docs.ckan.org/en/latest/ Confirm the version of the API available from the catalogue by requesting https://catalogue.data.gov.bc.ca/api/3/action/status_show.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: data@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ActionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for actionOrganizationActivityListGet
     * @param id The id or name of the organization (optional, default to ministry-of-agriculture)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of an organization&#39;s activities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionOrganizationActivityListGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/organization_activity_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionOrganizationActivityListGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        return actionOrganizationActivityListGetCall(id, _callback);

    }

    /**
     * Get the activity stream of an organization
     * Return an organization&#39;s activity stream
     * @param id The id or name of the organization (optional, default to ministry-of-agriculture)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of an organization&#39;s activities </td><td>  -  </td></tr>
     </table>
     */
    public void actionOrganizationActivityListGet(String id) throws ApiException {
        actionOrganizationActivityListGetWithHttpInfo(id);
    }

    /**
     * Get the activity stream of an organization
     * Return an organization&#39;s activity stream
     * @param id The id or name of the organization (optional, default to ministry-of-agriculture)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of an organization&#39;s activities </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionOrganizationActivityListGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = actionOrganizationActivityListGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the activity stream of an organization (asynchronously)
     * Return an organization&#39;s activity stream
     * @param id The id or name of the organization (optional, default to ministry-of-agriculture)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of an organization&#39;s activities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionOrganizationActivityListGetAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionOrganizationActivityListGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionOrganizationActivityListHtmlGet
     * @param id The id or name of the organization (optional, default to ministry-of-agriculture)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of an organization&#39;s activities in HTML </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionOrganizationActivityListHtmlGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/organization_activity_list_html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionOrganizationActivityListHtmlGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        return actionOrganizationActivityListHtmlGetCall(id, _callback);

    }

    /**
     * Get the activity stream of an organization, HTML format
     * Return an organization&#39;s activity stream as HTML
     * @param id The id or name of the organization (optional, default to ministry-of-agriculture)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of an organization&#39;s activities in HTML </td><td>  -  </td></tr>
     </table>
     */
    public void actionOrganizationActivityListHtmlGet(String id) throws ApiException {
        actionOrganizationActivityListHtmlGetWithHttpInfo(id);
    }

    /**
     * Get the activity stream of an organization, HTML format
     * Return an organization&#39;s activity stream as HTML
     * @param id The id or name of the organization (optional, default to ministry-of-agriculture)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of an organization&#39;s activities in HTML </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionOrganizationActivityListHtmlGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = actionOrganizationActivityListHtmlGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the activity stream of an organization, HTML format (asynchronously)
     * Return an organization&#39;s activity stream as HTML
     * @param id The id or name of the organization (optional, default to ministry-of-agriculture)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of an organization&#39;s activities in HTML </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionOrganizationActivityListHtmlGetAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionOrganizationActivityListHtmlGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionOrganizationAutocompleteGet
     * @param q The string to search for (optional, default to ministry)
     * @param limit The maximum number of organizations to return (optional) (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organizations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionOrganizationAutocompleteGetCall(String q, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/organization_autocomplete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionOrganizationAutocompleteGetValidateBeforeCall(String q, Integer limit, final ApiCallback _callback) throws ApiException {
        return actionOrganizationAutocompleteGetCall(q, limit, _callback);

    }

    /**
     * Get names of organizations that match a query string
     * Return a list of organization names that contain a string
     * @param q The string to search for (optional, default to ministry)
     * @param limit The maximum number of organizations to return (optional) (optional, default to 20)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organizations </td><td>  -  </td></tr>
     </table>
     */
    public void actionOrganizationAutocompleteGet(String q, Integer limit) throws ApiException {
        actionOrganizationAutocompleteGetWithHttpInfo(q, limit);
    }

    /**
     * Get names of organizations that match a query string
     * Return a list of organization names that contain a string
     * @param q The string to search for (optional, default to ministry)
     * @param limit The maximum number of organizations to return (optional) (optional, default to 20)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organizations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionOrganizationAutocompleteGetWithHttpInfo(String q, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = actionOrganizationAutocompleteGetValidateBeforeCall(q, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get names of organizations that match a query string (asynchronously)
     * Return a list of organization names that contain a string
     * @param q The string to search for (optional, default to ministry)
     * @param limit The maximum number of organizations to return (optional) (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organizations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionOrganizationAutocompleteGetAsync(String q, Integer limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionOrganizationAutocompleteGetValidateBeforeCall(q, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionOrganizationFollowerCountGet
     * @param id The id or name of the organization (optional, default to ministry-of-agriculture)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of organization followers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionOrganizationFollowerCountGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/organization_follower_count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionOrganizationFollowerCountGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        return actionOrganizationFollowerCountGetCall(id, _callback);

    }

    /**
     * Get number of followers of an organization
     * Return the number of followers of an organization
     * @param id The id or name of the organization (optional, default to ministry-of-agriculture)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of organization followers </td><td>  -  </td></tr>
     </table>
     */
    public void actionOrganizationFollowerCountGet(String id) throws ApiException {
        actionOrganizationFollowerCountGetWithHttpInfo(id);
    }

    /**
     * Get number of followers of an organization
     * Return the number of followers of an organization
     * @param id The id or name of the organization (optional, default to ministry-of-agriculture)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of organization followers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionOrganizationFollowerCountGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = actionOrganizationFollowerCountGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get number of followers of an organization (asynchronously)
     * Return the number of followers of an organization
     * @param id The id or name of the organization (optional, default to ministry-of-agriculture)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of organization followers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionOrganizationFollowerCountGetAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionOrganizationFollowerCountGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionOrganizationFollowerListGet
     * @param id The id or name of the organization (optional, default to ministry-of-agriculture)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organization followers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionOrganizationFollowerListGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/organization_follower_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionOrganizationFollowerListGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        return actionOrganizationFollowerListGetCall(id, _callback);

    }

    /**
     * Get users following an organization
     * Return a list of users that are following a given organization
     * @param id The id or name of the organization (optional, default to ministry-of-agriculture)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organization followers </td><td>  -  </td></tr>
     </table>
     */
    public void actionOrganizationFollowerListGet(String id) throws ApiException {
        actionOrganizationFollowerListGetWithHttpInfo(id);
    }

    /**
     * Get users following an organization
     * Return a list of users that are following a given organization
     * @param id The id or name of the organization (optional, default to ministry-of-agriculture)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organization followers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionOrganizationFollowerListGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = actionOrganizationFollowerListGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get users following an organization (asynchronously)
     * Return a list of users that are following a given organization
     * @param id The id or name of the organization (optional, default to ministry-of-agriculture)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organization followers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionOrganizationFollowerListGetAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionOrganizationFollowerListGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionOrganizationListForUserGet
     * @param permission The permission the user has against the returned organization (optional, default to \&quot;edit_group\&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organizations for given permission </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionOrganizationListForUserGetCall(String permission, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/organization_list_for_user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionOrganizationListForUserGetValidateBeforeCall(String permission, final ApiCallback _callback) throws ApiException {
        return actionOrganizationListForUserGetCall(permission, _callback);

    }

    /**
     * Get organizations that a user has a given permission for
     * Return the organizations that the user has a given permission for
     * @param permission The permission the user has against the returned organization (optional, default to \&quot;edit_group\&quot;)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organizations for given permission </td><td>  -  </td></tr>
     </table>
     */
    public void actionOrganizationListForUserGet(String permission) throws ApiException {
        actionOrganizationListForUserGetWithHttpInfo(permission);
    }

    /**
     * Get organizations that a user has a given permission for
     * Return the organizations that the user has a given permission for
     * @param permission The permission the user has against the returned organization (optional, default to \&quot;edit_group\&quot;)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organizations for given permission </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionOrganizationListForUserGetWithHttpInfo(String permission) throws ApiException {
        okhttp3.Call localVarCall = actionOrganizationListForUserGetValidateBeforeCall(permission, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get organizations that a user has a given permission for (asynchronously)
     * Return the organizations that the user has a given permission for
     * @param permission The permission the user has against the returned organization (optional, default to \&quot;edit_group\&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organizations for given permission </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionOrganizationListForUserGetAsync(String permission, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionOrganizationListForUserGetValidateBeforeCall(permission, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionOrganizationListGet
     * @param offset The offset (index) of the first organizations to return (optional, default to 0)
     * @param limit The number of organizations to be returned per page (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organizations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionOrganizationListGetCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/organization_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionOrganizationListGetValidateBeforeCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return actionOrganizationListGetCall(offset, limit, _callback);

    }

    /**
     * Get names of all organizations
     * Returns the names of all indexed organizations
     * @param offset The offset (index) of the first organizations to return (optional, default to 0)
     * @param limit The number of organizations to be returned per page (optional, default to 100)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organizations </td><td>  -  </td></tr>
     </table>
     */
    public void actionOrganizationListGet(Integer offset, Integer limit) throws ApiException {
        actionOrganizationListGetWithHttpInfo(offset, limit);
    }

    /**
     * Get names of all organizations
     * Returns the names of all indexed organizations
     * @param offset The offset (index) of the first organizations to return (optional, default to 0)
     * @param limit The number of organizations to be returned per page (optional, default to 100)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organizations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionOrganizationListGetWithHttpInfo(Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = actionOrganizationListGetValidateBeforeCall(offset, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get names of all organizations (asynchronously)
     * Returns the names of all indexed organizations
     * @param offset The offset (index) of the first organizations to return (optional, default to 0)
     * @param limit The number of organizations to be returned per page (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organizations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionOrganizationListGetAsync(Integer offset, Integer limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionOrganizationListGetValidateBeforeCall(offset, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionOrganizationRevisionListGet
     * @param id The name or id of the organization (optional, default to ministry-of-agriculture)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of an organization&#39;s revisions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionOrganizationRevisionListGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/organization_revision_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionOrganizationRevisionListGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        return actionOrganizationRevisionListGetCall(id, _callback);

    }

    /**
     * Get organization revisions
     * Return an organization&#39;s revisions
     * @param id The name or id of the organization (optional, default to ministry-of-agriculture)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of an organization&#39;s revisions </td><td>  -  </td></tr>
     </table>
     */
    public void actionOrganizationRevisionListGet(String id) throws ApiException {
        actionOrganizationRevisionListGetWithHttpInfo(id);
    }

    /**
     * Get organization revisions
     * Return an organization&#39;s revisions
     * @param id The name or id of the organization (optional, default to ministry-of-agriculture)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of an organization&#39;s revisions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionOrganizationRevisionListGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = actionOrganizationRevisionListGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get organization revisions (asynchronously)
     * Return an organization&#39;s revisions
     * @param id The name or id of the organization (optional, default to ministry-of-agriculture)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of an organization&#39;s revisions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionOrganizationRevisionListGetAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionOrganizationRevisionListGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionOrganizationShowGet
     * @param id The id or name of the organization (optional, default to ministry-of-agriculture)
     * @param includeDatasets include a list of the organization&#39;s datasets (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List organization details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionOrganizationShowGetCall(String id, Boolean includeDatasets, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/organization_show";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (includeDatasets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_datasets", includeDatasets));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionOrganizationShowGetValidateBeforeCall(String id, Boolean includeDatasets, final ApiCallback _callback) throws ApiException {
        return actionOrganizationShowGetCall(id, includeDatasets, _callback);

    }

    /**
     * Get details of a specific organization
     * Return the details of an organization
     * @param id The id or name of the organization (optional, default to ministry-of-agriculture)
     * @param includeDatasets include a list of the organization&#39;s datasets (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List organization details </td><td>  -  </td></tr>
     </table>
     */
    public void actionOrganizationShowGet(String id, Boolean includeDatasets) throws ApiException {
        actionOrganizationShowGetWithHttpInfo(id, includeDatasets);
    }

    /**
     * Get details of a specific organization
     * Return the details of an organization
     * @param id The id or name of the organization (optional, default to ministry-of-agriculture)
     * @param includeDatasets include a list of the organization&#39;s datasets (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List organization details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionOrganizationShowGetWithHttpInfo(String id, Boolean includeDatasets) throws ApiException {
        okhttp3.Call localVarCall = actionOrganizationShowGetValidateBeforeCall(id, includeDatasets, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get details of a specific organization (asynchronously)
     * Return the details of an organization
     * @param id The id or name of the organization (optional, default to ministry-of-agriculture)
     * @param includeDatasets include a list of the organization&#39;s datasets (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List organization details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionOrganizationShowGetAsync(String id, Boolean includeDatasets, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionOrganizationShowGetValidateBeforeCall(id, includeDatasets, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionPackageActivityListGet
     * @param id The id or name of the package (optional, default to grizzly-bear-population-units)
     * @param offset Where to start getting activity items from (optional, default to 0)
     * @param limit The maximum number of activities to return (optional, default to 31)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of activities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionPackageActivityListGetCall(String id, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/package_activity_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionPackageActivityListGetValidateBeforeCall(String id, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return actionPackageActivityListGetCall(id, offset, limit, _callback);

    }

    /**
     * Get the activity stream of a package (dataset)
     * Returns a package&#39;s activity stream
     * @param id The id or name of the package (optional, default to grizzly-bear-population-units)
     * @param offset Where to start getting activity items from (optional, default to 0)
     * @param limit The maximum number of activities to return (optional, default to 31)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of activities </td><td>  -  </td></tr>
     </table>
     */
    public void actionPackageActivityListGet(String id, Integer offset, Integer limit) throws ApiException {
        actionPackageActivityListGetWithHttpInfo(id, offset, limit);
    }

    /**
     * Get the activity stream of a package (dataset)
     * Returns a package&#39;s activity stream
     * @param id The id or name of the package (optional, default to grizzly-bear-population-units)
     * @param offset Where to start getting activity items from (optional, default to 0)
     * @param limit The maximum number of activities to return (optional, default to 31)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of activities </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionPackageActivityListGetWithHttpInfo(String id, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = actionPackageActivityListGetValidateBeforeCall(id, offset, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the activity stream of a package (dataset) (asynchronously)
     * Returns a package&#39;s activity stream
     * @param id The id or name of the package (optional, default to grizzly-bear-population-units)
     * @param offset Where to start getting activity items from (optional, default to 0)
     * @param limit The maximum number of activities to return (optional, default to 31)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of activities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionPackageActivityListGetAsync(String id, Integer offset, Integer limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionPackageActivityListGetValidateBeforeCall(id, offset, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionPackageActivityListHtmlGet
     * @param id The id or name of the package (optional, default to grizzly-bear-population-units)
     * @param offset Where to start getting activity items from (optional, default to 0)
     * @param limit The maximum number of activities to return (optional, default to 31)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of activities rendered as HTML snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionPackageActivityListHtmlGetCall(String id, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/package_activity_list_html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionPackageActivityListHtmlGetValidateBeforeCall(String id, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return actionPackageActivityListHtmlGetCall(id, offset, limit, _callback);

    }

    /**
     * Get the activity stream of a package (dataset), HTML format
     * The activity stream is rendered as a snippet of HTML meant to be included in an HTML pag, i.e it doesn&#39;t have any header or footer.
     * @param id The id or name of the package (optional, default to grizzly-bear-population-units)
     * @param offset Where to start getting activity items from (optional, default to 0)
     * @param limit The maximum number of activities to return (optional, default to 31)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of activities rendered as HTML snippet </td><td>  -  </td></tr>
     </table>
     */
    public void actionPackageActivityListHtmlGet(String id, Integer offset, Integer limit) throws ApiException {
        actionPackageActivityListHtmlGetWithHttpInfo(id, offset, limit);
    }

    /**
     * Get the activity stream of a package (dataset), HTML format
     * The activity stream is rendered as a snippet of HTML meant to be included in an HTML pag, i.e it doesn&#39;t have any header or footer.
     * @param id The id or name of the package (optional, default to grizzly-bear-population-units)
     * @param offset Where to start getting activity items from (optional, default to 0)
     * @param limit The maximum number of activities to return (optional, default to 31)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of activities rendered as HTML snippet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionPackageActivityListHtmlGetWithHttpInfo(String id, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = actionPackageActivityListHtmlGetValidateBeforeCall(id, offset, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the activity stream of a package (dataset), HTML format (asynchronously)
     * The activity stream is rendered as a snippet of HTML meant to be included in an HTML pag, i.e it doesn&#39;t have any header or footer.
     * @param id The id or name of the package (optional, default to grizzly-bear-population-units)
     * @param offset Where to start getting activity items from (optional, default to 0)
     * @param limit The maximum number of activities to return (optional, default to 31)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of activities rendered as HTML snippet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionPackageActivityListHtmlGetAsync(String id, Integer offset, Integer limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionPackageActivityListHtmlGetValidateBeforeCall(id, offset, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionPackageAutocompleteGet
     * @param q The string to query (optional, default to \&quot;Okanagan Lake\&quot;)
     * @param limit The maximum number of resource formats to return (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of datasets that match a string </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionPackageAutocompleteGetCall(String q, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/package_autocomplete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionPackageAutocompleteGetValidateBeforeCall(String q, Integer limit, final ApiCallback _callback) throws ApiException {
        return actionPackageAutocompleteGetCall(q, limit, _callback);

    }

    /**
     * Find packages (datasets) matching a query
     * Return a list of datasets that match a string
     * @param q The string to query (optional, default to \&quot;Okanagan Lake\&quot;)
     * @param limit The maximum number of resource formats to return (optional, default to 10)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of datasets that match a string </td><td>  -  </td></tr>
     </table>
     */
    public void actionPackageAutocompleteGet(String q, Integer limit) throws ApiException {
        actionPackageAutocompleteGetWithHttpInfo(q, limit);
    }

    /**
     * Find packages (datasets) matching a query
     * Return a list of datasets that match a string
     * @param q The string to query (optional, default to \&quot;Okanagan Lake\&quot;)
     * @param limit The maximum number of resource formats to return (optional, default to 10)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of datasets that match a string </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionPackageAutocompleteGetWithHttpInfo(String q, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = actionPackageAutocompleteGetValidateBeforeCall(q, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Find packages (datasets) matching a query (asynchronously)
     * Return a list of datasets that match a string
     * @param q The string to query (optional, default to \&quot;Okanagan Lake\&quot;)
     * @param limit The maximum number of resource formats to return (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of datasets that match a string </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionPackageAutocompleteGetAsync(String q, Integer limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionPackageAutocompleteGetValidateBeforeCall(q, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionPackageListGet
     * @param offset The offset (index) of the first package to return (optional, default to 0)
     * @param limit The number of packages to be returned per page (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionPackageListGetCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/package_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionPackageListGetValidateBeforeCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return actionPackageListGetCall(offset, limit, _callback);

    }

    /**
     * Get a list of all packages (datasets)
     * Returns the names of all indexed packages (datasets)
     * @param offset The offset (index) of the first package to return (optional, default to 0)
     * @param limit The number of packages to be returned per page (optional, default to 100)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public void actionPackageListGet(Integer offset, Integer limit) throws ApiException {
        actionPackageListGetWithHttpInfo(offset, limit);
    }

    /**
     * Get a list of all packages (datasets)
     * Returns the names of all indexed packages (datasets)
     * @param offset The offset (index) of the first package to return (optional, default to 0)
     * @param limit The number of packages to be returned per page (optional, default to 100)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionPackageListGetWithHttpInfo(Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = actionPackageListGetValidateBeforeCall(offset, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a list of all packages (datasets) (asynchronously)
     * Returns the names of all indexed packages (datasets)
     * @param offset The offset (index) of the first package to return (optional, default to 0)
     * @param limit The number of packages to be returned per page (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionPackageListGetAsync(Integer offset, Integer limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionPackageListGetValidateBeforeCall(offset, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionPackageRelationshipsListGet
     * @param id The id or name of the first package (optional, default to grizzly-bear-population-units)
     * @param id2 The id or name of the second package (optional, default to important-fossil-areas)
     * @param rel relationship as string (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dataset relationships </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionPackageRelationshipsListGetCall(String id, String id2, String rel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/package_relationships_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (id2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id2", id2));
        }

        if (rel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rel", rel));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionPackageRelationshipsListGetValidateBeforeCall(String id, String id2, String rel, final ApiCallback _callback) throws ApiException {
        return actionPackageRelationshipsListGetCall(id, id2, rel, _callback);

    }

    /**
     * Get package (dataset) relationships
     * Return a dataset&#39;s relationships
     * @param id The id or name of the first package (optional, default to grizzly-bear-population-units)
     * @param id2 The id or name of the second package (optional, default to important-fossil-areas)
     * @param rel relationship as string (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dataset relationships </td><td>  -  </td></tr>
     </table>
     */
    public void actionPackageRelationshipsListGet(String id, String id2, String rel) throws ApiException {
        actionPackageRelationshipsListGetWithHttpInfo(id, id2, rel);
    }

    /**
     * Get package (dataset) relationships
     * Return a dataset&#39;s relationships
     * @param id The id or name of the first package (optional, default to grizzly-bear-population-units)
     * @param id2 The id or name of the second package (optional, default to important-fossil-areas)
     * @param rel relationship as string (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dataset relationships </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionPackageRelationshipsListGetWithHttpInfo(String id, String id2, String rel) throws ApiException {
        okhttp3.Call localVarCall = actionPackageRelationshipsListGetValidateBeforeCall(id, id2, rel, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get package (dataset) relationships (asynchronously)
     * Return a dataset&#39;s relationships
     * @param id The id or name of the first package (optional, default to grizzly-bear-population-units)
     * @param id2 The id or name of the second package (optional, default to important-fossil-areas)
     * @param rel relationship as string (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dataset relationships </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionPackageRelationshipsListGetAsync(String id, String id2, String rel, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionPackageRelationshipsListGetValidateBeforeCall(id, id2, rel, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionPackageRevisionListGet
     * @param id The id or name of the dataset (optional, default to grizzly-bear-population-units)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dataset revisions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionPackageRevisionListGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/package_revision_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionPackageRevisionListGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        return actionPackageRevisionListGetCall(id, _callback);

    }

    /**
     * Get list of revisions for a package (dataset)
     * Return a dataset&#39;s revision as a list of dictionaries
     * @param id The id or name of the dataset (optional, default to grizzly-bear-population-units)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dataset revisions </td><td>  -  </td></tr>
     </table>
     */
    public void actionPackageRevisionListGet(String id) throws ApiException {
        actionPackageRevisionListGetWithHttpInfo(id);
    }

    /**
     * Get list of revisions for a package (dataset)
     * Return a dataset&#39;s revision as a list of dictionaries
     * @param id The id or name of the dataset (optional, default to grizzly-bear-population-units)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dataset revisions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionPackageRevisionListGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = actionPackageRevisionListGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get list of revisions for a package (dataset) (asynchronously)
     * Return a dataset&#39;s revision as a list of dictionaries
     * @param id The id or name of the dataset (optional, default to grizzly-bear-population-units)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of dataset revisions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionPackageRevisionListGetAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionPackageRevisionListGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionPackageSearchGet
     * @param q A query string (optional, default to \&quot;Okanagan Lake\&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionPackageSearchGetCall(String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/package_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionPackageSearchGetValidateBeforeCall(String q, final ApiCallback _callback) throws ApiException {
        return actionPackageSearchGetCall(q, _callback);

    }

    /**
     * Find packages (datasets) matching query terms
     * Searches for packages (datasets) matching the specified query terms
     * @param q A query string (optional, default to \&quot;Okanagan Lake\&quot;)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public void actionPackageSearchGet(String q) throws ApiException {
        actionPackageSearchGetWithHttpInfo(q);
    }

    /**
     * Find packages (datasets) matching query terms
     * Searches for packages (datasets) matching the specified query terms
     * @param q A query string (optional, default to \&quot;Okanagan Lake\&quot;)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionPackageSearchGetWithHttpInfo(String q) throws ApiException {
        okhttp3.Call localVarCall = actionPackageSearchGetValidateBeforeCall(q, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Find packages (datasets) matching query terms (asynchronously)
     * Searches for packages (datasets) matching the specified query terms
     * @param q A query string (optional, default to \&quot;Okanagan Lake\&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of packages </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionPackageSearchGetAsync(String q, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionPackageSearchGetValidateBeforeCall(q, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionPackageShowGet
     * @param id The package name (optional, default to grizzly-bear-population-units)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A package metadata object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionPackageShowGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/package_show";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionPackageShowGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        return actionPackageShowGetCall(id, _callback);

    }

    /**
     * Get metadata about one specific package (dataset)
     * Returns metadata about the package (dataset) corresponding to the specified unique name
     * @param id The package name (optional, default to grizzly-bear-population-units)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A package metadata object </td><td>  -  </td></tr>
     </table>
     */
    public void actionPackageShowGet(String id) throws ApiException {
        actionPackageShowGetWithHttpInfo(id);
    }

    /**
     * Get metadata about one specific package (dataset)
     * Returns metadata about the package (dataset) corresponding to the specified unique name
     * @param id The package name (optional, default to grizzly-bear-population-units)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A package metadata object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionPackageShowGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = actionPackageShowGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get metadata about one specific package (dataset) (asynchronously)
     * Returns metadata about the package (dataset) corresponding to the specified unique name
     * @param id The package name (optional, default to grizzly-bear-population-units)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A package metadata object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionPackageShowGetAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionPackageShowGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionRelatedListGet
     * @param id id or name of the dataset (optional) (optional)
     * @param dataset Dataset dictionary of the dataset (optional) (optional)
     * @param typeFilter The type of related item to show (optional) (optional)
     * @param sort The order to sort the related items in (optional)
     * @param featured whether or not to restrict the results to only featured items (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search for related items </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRelatedListGetCall(String id, String dataset, String typeFilter, String sort, String featured, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/related_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (dataset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataset", dataset));
        }

        if (typeFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type_filter", typeFilter));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (featured != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featured", featured));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionRelatedListGetValidateBeforeCall(String id, String dataset, String typeFilter, String sort, String featured, final ApiCallback _callback) throws ApiException {
        return actionRelatedListGetCall(id, dataset, typeFilter, sort, featured, _callback);

    }

    /**
     * Gets items related to a package (dataset)
     * Returns a dataset&#39;s related items.
     * @param id id or name of the dataset (optional) (optional)
     * @param dataset Dataset dictionary of the dataset (optional) (optional)
     * @param typeFilter The type of related item to show (optional) (optional)
     * @param sort The order to sort the related items in (optional)
     * @param featured whether or not to restrict the results to only featured items (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search for related items </td><td>  -  </td></tr>
     </table>
     */
    public void actionRelatedListGet(String id, String dataset, String typeFilter, String sort, String featured) throws ApiException {
        actionRelatedListGetWithHttpInfo(id, dataset, typeFilter, sort, featured);
    }

    /**
     * Gets items related to a package (dataset)
     * Returns a dataset&#39;s related items.
     * @param id id or name of the dataset (optional) (optional)
     * @param dataset Dataset dictionary of the dataset (optional) (optional)
     * @param typeFilter The type of related item to show (optional) (optional)
     * @param sort The order to sort the related items in (optional)
     * @param featured whether or not to restrict the results to only featured items (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search for related items </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionRelatedListGetWithHttpInfo(String id, String dataset, String typeFilter, String sort, String featured) throws ApiException {
        okhttp3.Call localVarCall = actionRelatedListGetValidateBeforeCall(id, dataset, typeFilter, sort, featured, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Gets items related to a package (dataset) (asynchronously)
     * Returns a dataset&#39;s related items.
     * @param id id or name of the dataset (optional) (optional)
     * @param dataset Dataset dictionary of the dataset (optional) (optional)
     * @param typeFilter The type of related item to show (optional) (optional)
     * @param sort The order to sort the related items in (optional)
     * @param featured whether or not to restrict the results to only featured items (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search for related items </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRelatedListGetAsync(String id, String dataset, String typeFilter, String sort, String featured, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionRelatedListGetValidateBeforeCall(id, dataset, typeFilter, sort, featured, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionResourceSearchGet
     * @param query The search criteria string or list of strings of the form &#x60;&#x60;{field}:{term1}&#x60;&#x60; (optional, default to format:csv)
     * @param fields Depreciated (optional)
     * @param orderBy A field on the resource model that orders the results (optional)
     * @param offset Apply an offset to the query (optional, default to 0)
     * @param limit Apply a limit to the query (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search for resources </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionResourceSearchGetCall(String query, String fields, String orderBy, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/resource_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionResourceSearchGetValidateBeforeCall(String query, String fields, String orderBy, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return actionResourceSearchGetCall(query, fields, orderBy, offset, limit, _callback);

    }

    /**
     * Find resources
     * Returns a dictionary with two fields &#x60;&#x60;count&#x60;&#x60; and &#x60;&#x60;results&#x60;&#x60;.             The &#x60;&#x60;count&#x60;&#x60; field contains the total number of Resources                found without the limit or query parameters having an effect.             The &#x60;&#x60;results&#x60;&#x60; field is a list of dictized Resource objects.             The query parameter is a required field. It is a string in                the form &#x60;&#x60;{field}:{term}&#x60;&#x60; or a list of strings, each of the             same form. Within each string, &#x60;&#x60;{field}&#x60;&#x60; is a field or extra             field on the Resource domain object.
     * @param query The search criteria string or list of strings of the form &#x60;&#x60;{field}:{term1}&#x60;&#x60; (optional, default to format:csv)
     * @param fields Depreciated (optional)
     * @param orderBy A field on the resource model that orders the results (optional)
     * @param offset Apply an offset to the query (optional, default to 0)
     * @param limit Apply a limit to the query (optional, default to 0)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search for resources </td><td>  -  </td></tr>
     </table>
     */
    public void actionResourceSearchGet(String query, String fields, String orderBy, Integer offset, Integer limit) throws ApiException {
        actionResourceSearchGetWithHttpInfo(query, fields, orderBy, offset, limit);
    }

    /**
     * Find resources
     * Returns a dictionary with two fields &#x60;&#x60;count&#x60;&#x60; and &#x60;&#x60;results&#x60;&#x60;.             The &#x60;&#x60;count&#x60;&#x60; field contains the total number of Resources                found without the limit or query parameters having an effect.             The &#x60;&#x60;results&#x60;&#x60; field is a list of dictized Resource objects.             The query parameter is a required field. It is a string in                the form &#x60;&#x60;{field}:{term}&#x60;&#x60; or a list of strings, each of the             same form. Within each string, &#x60;&#x60;{field}&#x60;&#x60; is a field or extra             field on the Resource domain object.
     * @param query The search criteria string or list of strings of the form &#x60;&#x60;{field}:{term1}&#x60;&#x60; (optional, default to format:csv)
     * @param fields Depreciated (optional)
     * @param orderBy A field on the resource model that orders the results (optional)
     * @param offset Apply an offset to the query (optional, default to 0)
     * @param limit Apply a limit to the query (optional, default to 0)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search for resources </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionResourceSearchGetWithHttpInfo(String query, String fields, String orderBy, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = actionResourceSearchGetValidateBeforeCall(query, fields, orderBy, offset, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Find resources (asynchronously)
     * Returns a dictionary with two fields &#x60;&#x60;count&#x60;&#x60; and &#x60;&#x60;results&#x60;&#x60;.             The &#x60;&#x60;count&#x60;&#x60; field contains the total number of Resources                found without the limit or query parameters having an effect.             The &#x60;&#x60;results&#x60;&#x60; field is a list of dictized Resource objects.             The query parameter is a required field. It is a string in                the form &#x60;&#x60;{field}:{term}&#x60;&#x60; or a list of strings, each of the             same form. Within each string, &#x60;&#x60;{field}&#x60;&#x60; is a field or extra             field on the Resource domain object.
     * @param query The search criteria string or list of strings of the form &#x60;&#x60;{field}:{term1}&#x60;&#x60; (optional, default to format:csv)
     * @param fields Depreciated (optional)
     * @param orderBy A field on the resource model that orders the results (optional)
     * @param offset Apply an offset to the query (optional, default to 0)
     * @param limit Apply a limit to the query (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search for resources </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionResourceSearchGetAsync(String query, String fields, String orderBy, Integer offset, Integer limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionResourceSearchGetValidateBeforeCall(query, fields, orderBy, offset, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionResourceShowGet
     * @param id The id of the resource (optional, default to e6c8bb1d-3726-418b-9b7e-1d97a9bbb817)
     * @param includeTracking Add tracking information to dataset (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return metadata of a resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionResourceShowGetCall(String id, Boolean includeTracking, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/resource_show";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (includeTracking != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_tracking", includeTracking));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionResourceShowGetValidateBeforeCall(String id, Boolean includeTracking, final ApiCallback _callback) throws ApiException {
        return actionResourceShowGetCall(id, includeTracking, _callback);

    }

    /**
     * Get metadata for a specific resource
     * Return the metadata of a resource
     * @param id The id of the resource (optional, default to e6c8bb1d-3726-418b-9b7e-1d97a9bbb817)
     * @param includeTracking Add tracking information to dataset (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return metadata of a resource </td><td>  -  </td></tr>
     </table>
     */
    public void actionResourceShowGet(String id, Boolean includeTracking) throws ApiException {
        actionResourceShowGetWithHttpInfo(id, includeTracking);
    }

    /**
     * Get metadata for a specific resource
     * Return the metadata of a resource
     * @param id The id of the resource (optional, default to e6c8bb1d-3726-418b-9b7e-1d97a9bbb817)
     * @param includeTracking Add tracking information to dataset (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return metadata of a resource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionResourceShowGetWithHttpInfo(String id, Boolean includeTracking) throws ApiException {
        okhttp3.Call localVarCall = actionResourceShowGetValidateBeforeCall(id, includeTracking, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get metadata for a specific resource (asynchronously)
     * Return the metadata of a resource
     * @param id The id of the resource (optional, default to e6c8bb1d-3726-418b-9b7e-1d97a9bbb817)
     * @param includeTracking Add tracking information to dataset (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return metadata of a resource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionResourceShowGetAsync(String id, Boolean includeTracking, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionResourceShowGetValidateBeforeCall(id, includeTracking, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionStatusShowGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the site status, version, installed extensions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionStatusShowGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/status_show";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionStatusShowGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return actionStatusShowGetCall(_callback);

    }

    /**
     * Get the site status
     * Returns the site status
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the site status, version, installed extensions </td><td>  -  </td></tr>
     </table>
     */
    public void actionStatusShowGet() throws ApiException {
        actionStatusShowGetWithHttpInfo();
    }

    /**
     * Get the site status
     * Returns the site status
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the site status, version, installed extensions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionStatusShowGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = actionStatusShowGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the site status (asynchronously)
     * Returns the site status
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the site status, version, installed extensions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionStatusShowGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionStatusShowGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionTagListGet
     * @param offset The offset (index) of the first tag to return (optional, default to 0)
     * @param limit The number of tags to be returned per page (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionTagListGetCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action/tag_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey", "githubAccessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionTagListGetValidateBeforeCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return actionTagListGetCall(offset, limit, _callback);

    }

    /**
     * Get a list of tags
     * Returns the names of all indexed tags
     * @param offset The offset (index) of the first tag to return (optional, default to 0)
     * @param limit The number of tags to be returned per page (optional, default to 100)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tags </td><td>  -  </td></tr>
     </table>
     */
    public void actionTagListGet(Integer offset, Integer limit) throws ApiException {
        actionTagListGetWithHttpInfo(offset, limit);
    }

    /**
     * Get a list of tags
     * Returns the names of all indexed tags
     * @param offset The offset (index) of the first tag to return (optional, default to 0)
     * @param limit The number of tags to be returned per page (optional, default to 100)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tags </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionTagListGetWithHttpInfo(Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = actionTagListGetValidateBeforeCall(offset, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a list of tags (asynchronously)
     * Returns the names of all indexed tags
     * @param offset The offset (index) of the first tag to return (optional, default to 0)
     * @param limit The number of tags to be returned per page (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionTagListGetAsync(Integer offset, Integer limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionTagListGetValidateBeforeCall(offset, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
