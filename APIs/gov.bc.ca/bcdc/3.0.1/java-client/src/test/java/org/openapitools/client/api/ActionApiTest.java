/*
 * BC Data Catalogue API
 * This API provides live access to the BC Data Catalogue. Further documentation on the API is available from http://docs.ckan.org/en/latest/ Confirm the version of the API available from the catalogue by requesting https://catalogue.data.gov.bc.ca/api/3/action/status_show.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: data@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ActionApi
 */
@Disabled
public class ActionApiTest {

    private final ActionApi api = new ActionApi();

    /**
     * Get the activity stream of an organization
     *
     * Return an organization&#39;s activity stream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionOrganizationActivityListGetTest() throws ApiException {
        String id = null;
        api.actionOrganizationActivityListGet(id);
        // TODO: test validations
    }

    /**
     * Get the activity stream of an organization, HTML format
     *
     * Return an organization&#39;s activity stream as HTML
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionOrganizationActivityListHtmlGetTest() throws ApiException {
        String id = null;
        api.actionOrganizationActivityListHtmlGet(id);
        // TODO: test validations
    }

    /**
     * Get names of organizations that match a query string
     *
     * Return a list of organization names that contain a string
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionOrganizationAutocompleteGetTest() throws ApiException {
        String q = null;
        Integer limit = null;
        api.actionOrganizationAutocompleteGet(q, limit);
        // TODO: test validations
    }

    /**
     * Get number of followers of an organization
     *
     * Return the number of followers of an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionOrganizationFollowerCountGetTest() throws ApiException {
        String id = null;
        api.actionOrganizationFollowerCountGet(id);
        // TODO: test validations
    }

    /**
     * Get users following an organization
     *
     * Return a list of users that are following a given organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionOrganizationFollowerListGetTest() throws ApiException {
        String id = null;
        api.actionOrganizationFollowerListGet(id);
        // TODO: test validations
    }

    /**
     * Get organizations that a user has a given permission for
     *
     * Return the organizations that the user has a given permission for
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionOrganizationListForUserGetTest() throws ApiException {
        String permission = null;
        api.actionOrganizationListForUserGet(permission);
        // TODO: test validations
    }

    /**
     * Get names of all organizations
     *
     * Returns the names of all indexed organizations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionOrganizationListGetTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        api.actionOrganizationListGet(offset, limit);
        // TODO: test validations
    }

    /**
     * Get organization revisions
     *
     * Return an organization&#39;s revisions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionOrganizationRevisionListGetTest() throws ApiException {
        String id = null;
        api.actionOrganizationRevisionListGet(id);
        // TODO: test validations
    }

    /**
     * Get details of a specific organization
     *
     * Return the details of an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionOrganizationShowGetTest() throws ApiException {
        String id = null;
        Boolean includeDatasets = null;
        api.actionOrganizationShowGet(id, includeDatasets);
        // TODO: test validations
    }

    /**
     * Get the activity stream of a package (dataset)
     *
     * Returns a package&#39;s activity stream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionPackageActivityListGetTest() throws ApiException {
        String id = null;
        Integer offset = null;
        Integer limit = null;
        api.actionPackageActivityListGet(id, offset, limit);
        // TODO: test validations
    }

    /**
     * Get the activity stream of a package (dataset), HTML format
     *
     * The activity stream is rendered as a snippet of HTML meant to be included in an HTML pag, i.e it doesn&#39;t have any header or footer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionPackageActivityListHtmlGetTest() throws ApiException {
        String id = null;
        Integer offset = null;
        Integer limit = null;
        api.actionPackageActivityListHtmlGet(id, offset, limit);
        // TODO: test validations
    }

    /**
     * Find packages (datasets) matching a query
     *
     * Return a list of datasets that match a string
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionPackageAutocompleteGetTest() throws ApiException {
        String q = null;
        Integer limit = null;
        api.actionPackageAutocompleteGet(q, limit);
        // TODO: test validations
    }

    /**
     * Get a list of all packages (datasets)
     *
     * Returns the names of all indexed packages (datasets)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionPackageListGetTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        api.actionPackageListGet(offset, limit);
        // TODO: test validations
    }

    /**
     * Get package (dataset) relationships
     *
     * Return a dataset&#39;s relationships
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionPackageRelationshipsListGetTest() throws ApiException {
        String id = null;
        String id2 = null;
        String rel = null;
        api.actionPackageRelationshipsListGet(id, id2, rel);
        // TODO: test validations
    }

    /**
     * Get list of revisions for a package (dataset)
     *
     * Return a dataset&#39;s revision as a list of dictionaries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionPackageRevisionListGetTest() throws ApiException {
        String id = null;
        api.actionPackageRevisionListGet(id);
        // TODO: test validations
    }

    /**
     * Find packages (datasets) matching query terms
     *
     * Searches for packages (datasets) matching the specified query terms
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionPackageSearchGetTest() throws ApiException {
        String q = null;
        api.actionPackageSearchGet(q);
        // TODO: test validations
    }

    /**
     * Get metadata about one specific package (dataset)
     *
     * Returns metadata about the package (dataset) corresponding to the specified unique name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionPackageShowGetTest() throws ApiException {
        String id = null;
        api.actionPackageShowGet(id);
        // TODO: test validations
    }

    /**
     * Gets items related to a package (dataset)
     *
     * Returns a dataset&#39;s related items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionRelatedListGetTest() throws ApiException {
        String id = null;
        String dataset = null;
        String typeFilter = null;
        String sort = null;
        String featured = null;
        api.actionRelatedListGet(id, dataset, typeFilter, sort, featured);
        // TODO: test validations
    }

    /**
     * Find resources
     *
     * Returns a dictionary with two fields &#x60;&#x60;count&#x60;&#x60; and &#x60;&#x60;results&#x60;&#x60;.             The &#x60;&#x60;count&#x60;&#x60; field contains the total number of Resources                found without the limit or query parameters having an effect.             The &#x60;&#x60;results&#x60;&#x60; field is a list of dictized Resource objects.             The query parameter is a required field. It is a string in                the form &#x60;&#x60;{field}:{term}&#x60;&#x60; or a list of strings, each of the             same form. Within each string, &#x60;&#x60;{field}&#x60;&#x60; is a field or extra             field on the Resource domain object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionResourceSearchGetTest() throws ApiException {
        String query = null;
        String fields = null;
        String orderBy = null;
        Integer offset = null;
        Integer limit = null;
        api.actionResourceSearchGet(query, fields, orderBy, offset, limit);
        // TODO: test validations
    }

    /**
     * Get metadata for a specific resource
     *
     * Return the metadata of a resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionResourceShowGetTest() throws ApiException {
        String id = null;
        Boolean includeTracking = null;
        api.actionResourceShowGet(id, includeTracking);
        // TODO: test validations
    }

    /**
     * Get the site status
     *
     * Returns the site status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionStatusShowGetTest() throws ApiException {
        api.actionStatusShowGet();
        // TODO: test validations
    }

    /**
     * Get a list of tags
     *
     * Returns the names of all indexed tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionTagListGetTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        api.actionTagListGet(offset, limit);
        // TODO: test validations
    }

}
