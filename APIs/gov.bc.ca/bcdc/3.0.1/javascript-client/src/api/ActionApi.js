/**
 * BC Data Catalogue API
 * This API provides live access to the BC Data Catalogue. Further documentation on the API is available from http://docs.ckan.org/en/latest/ Confirm the version of the API available from the catalogue by requesting https://catalogue.data.gov.bc.ca/api/3/action/status_show.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: data@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Action service.
* @module api/ActionApi
* @version 3.0.1
*/
export default class ActionApi {

    /**
    * Constructs a new ActionApi. 
    * @alias module:api/ActionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the actionOrganizationActivityListGet operation.
     * @callback module:api/ActionApi~actionOrganizationActivityListGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the activity stream of an organization
     * Return an organization's activity stream
     * @param {Object} opts Optional parameters
     * @param {String} [id = 'ministry-of-agriculture')] The id or name of the organization
     * @param {module:api/ActionApi~actionOrganizationActivityListGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionOrganizationActivityListGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/organization_activity_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionOrganizationActivityListHtmlGet operation.
     * @callback module:api/ActionApi~actionOrganizationActivityListHtmlGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the activity stream of an organization, HTML format
     * Return an organization's activity stream as HTML
     * @param {Object} opts Optional parameters
     * @param {String} [id = 'ministry-of-agriculture')] The id or name of the organization
     * @param {module:api/ActionApi~actionOrganizationActivityListHtmlGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionOrganizationActivityListHtmlGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/organization_activity_list_html', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionOrganizationAutocompleteGet operation.
     * @callback module:api/ActionApi~actionOrganizationAutocompleteGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get names of organizations that match a query string
     * Return a list of organization names that contain a string
     * @param {Object} opts Optional parameters
     * @param {String} [q = 'ministry')] The string to search for
     * @param {Number} [limit = 20)] The maximum number of organizations to return (optional)
     * @param {module:api/ActionApi~actionOrganizationAutocompleteGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionOrganizationAutocompleteGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/organization_autocomplete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionOrganizationFollowerCountGet operation.
     * @callback module:api/ActionApi~actionOrganizationFollowerCountGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get number of followers of an organization
     * Return the number of followers of an organization
     * @param {Object} opts Optional parameters
     * @param {String} [id = 'ministry-of-agriculture')] The id or name of the organization
     * @param {module:api/ActionApi~actionOrganizationFollowerCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionOrganizationFollowerCountGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/organization_follower_count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionOrganizationFollowerListGet operation.
     * @callback module:api/ActionApi~actionOrganizationFollowerListGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get users following an organization
     * Return a list of users that are following a given organization
     * @param {Object} opts Optional parameters
     * @param {String} [id = 'ministry-of-agriculture')] The id or name of the organization
     * @param {module:api/ActionApi~actionOrganizationFollowerListGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionOrganizationFollowerListGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/organization_follower_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionOrganizationListForUserGet operation.
     * @callback module:api/ActionApi~actionOrganizationListForUserGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get organizations that a user has a given permission for
     * Return the organizations that the user has a given permission for
     * @param {Object} opts Optional parameters
     * @param {String} [permission = '"edit_group"')] The permission the user has against the returned organization
     * @param {module:api/ActionApi~actionOrganizationListForUserGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionOrganizationListForUserGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'permission': opts['permission']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/organization_list_for_user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionOrganizationListGet operation.
     * @callback module:api/ActionApi~actionOrganizationListGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get names of all organizations
     * Returns the names of all indexed organizations
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] The offset (index) of the first organizations to return
     * @param {Number} [limit = 100)] The number of organizations to be returned per page
     * @param {module:api/ActionApi~actionOrganizationListGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionOrganizationListGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/organization_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionOrganizationRevisionListGet operation.
     * @callback module:api/ActionApi~actionOrganizationRevisionListGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get organization revisions
     * Return an organization's revisions
     * @param {Object} opts Optional parameters
     * @param {String} [id = 'ministry-of-agriculture')] The name or id of the organization
     * @param {module:api/ActionApi~actionOrganizationRevisionListGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionOrganizationRevisionListGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/organization_revision_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionOrganizationShowGet operation.
     * @callback module:api/ActionApi~actionOrganizationShowGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of a specific organization
     * Return the details of an organization
     * @param {Object} opts Optional parameters
     * @param {String} [id = 'ministry-of-agriculture')] The id or name of the organization
     * @param {Boolean} [includeDatasets = true)] include a list of the organization's datasets
     * @param {module:api/ActionApi~actionOrganizationShowGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionOrganizationShowGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'include_datasets': opts['includeDatasets']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/organization_show', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionPackageActivityListGet operation.
     * @callback module:api/ActionApi~actionPackageActivityListGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the activity stream of a package (dataset)
     * Returns a package's activity stream
     * @param {Object} opts Optional parameters
     * @param {String} [id = 'grizzly-bear-population-units')] The id or name of the package
     * @param {Number} [offset = 0)] Where to start getting activity items from
     * @param {Number} [limit = 31)] The maximum number of activities to return
     * @param {module:api/ActionApi~actionPackageActivityListGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionPackageActivityListGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/package_activity_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionPackageActivityListHtmlGet operation.
     * @callback module:api/ActionApi~actionPackageActivityListHtmlGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the activity stream of a package (dataset), HTML format
     * The activity stream is rendered as a snippet of HTML meant to be included in an HTML pag, i.e it doesn't have any header or footer.
     * @param {Object} opts Optional parameters
     * @param {String} [id = 'grizzly-bear-population-units')] The id or name of the package
     * @param {Number} [offset = 0)] Where to start getting activity items from
     * @param {Number} [limit = 31)] The maximum number of activities to return
     * @param {module:api/ActionApi~actionPackageActivityListHtmlGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionPackageActivityListHtmlGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/package_activity_list_html', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionPackageAutocompleteGet operation.
     * @callback module:api/ActionApi~actionPackageAutocompleteGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find packages (datasets) matching a query
     * Return a list of datasets that match a string
     * @param {Object} opts Optional parameters
     * @param {String} [q = '"Okanagan Lake"')] The string to query
     * @param {Number} [limit = 10)] The maximum number of resource formats to return
     * @param {module:api/ActionApi~actionPackageAutocompleteGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionPackageAutocompleteGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/package_autocomplete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionPackageListGet operation.
     * @callback module:api/ActionApi~actionPackageListGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all packages (datasets)
     * Returns the names of all indexed packages (datasets)
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] The offset (index) of the first package to return
     * @param {Number} [limit = 100)] The number of packages to be returned per page
     * @param {module:api/ActionApi~actionPackageListGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionPackageListGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/package_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionPackageRelationshipsListGet operation.
     * @callback module:api/ActionApi~actionPackageRelationshipsListGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get package (dataset) relationships
     * Return a dataset's relationships
     * @param {Object} opts Optional parameters
     * @param {String} [id = 'grizzly-bear-population-units')] The id or name of the first package
     * @param {String} [id2 = 'important-fossil-areas')] The id or name of the second package
     * @param {String} [rel] relationship as string
     * @param {module:api/ActionApi~actionPackageRelationshipsListGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionPackageRelationshipsListGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'id2': opts['id2'],
        'rel': opts['rel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/package_relationships_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionPackageRevisionListGet operation.
     * @callback module:api/ActionApi~actionPackageRevisionListGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of revisions for a package (dataset)
     * Return a dataset's revision as a list of dictionaries
     * @param {Object} opts Optional parameters
     * @param {String} [id = 'grizzly-bear-population-units')] The id or name of the dataset
     * @param {module:api/ActionApi~actionPackageRevisionListGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionPackageRevisionListGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/package_revision_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionPackageSearchGet operation.
     * @callback module:api/ActionApi~actionPackageSearchGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find packages (datasets) matching query terms
     * Searches for packages (datasets) matching the specified query terms
     * @param {Object} opts Optional parameters
     * @param {String} [q = '"Okanagan Lake"')] A query string
     * @param {module:api/ActionApi~actionPackageSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionPackageSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/package_search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionPackageShowGet operation.
     * @callback module:api/ActionApi~actionPackageShowGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata about one specific package (dataset)
     * Returns metadata about the package (dataset) corresponding to the specified unique name
     * @param {Object} opts Optional parameters
     * @param {String} [id = 'grizzly-bear-population-units')] The package name
     * @param {module:api/ActionApi~actionPackageShowGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionPackageShowGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/package_show', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionRelatedListGet operation.
     * @callback module:api/ActionApi~actionRelatedListGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets items related to a package (dataset)
     * Returns a dataset's related items.
     * @param {Object} opts Optional parameters
     * @param {String} [id] id or name of the dataset (optional)
     * @param {String} [dataset] Dataset dictionary of the dataset (optional)
     * @param {String} [typeFilter] The type of related item to show (optional)
     * @param {String} [sort] The order to sort the related items in
     * @param {String} [featured] whether or not to restrict the results to only featured items
     * @param {module:api/ActionApi~actionRelatedListGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionRelatedListGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'dataset': opts['dataset'],
        'type_filter': opts['typeFilter'],
        'sort': opts['sort'],
        'featured': opts['featured']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/related_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionResourceSearchGet operation.
     * @callback module:api/ActionApi~actionResourceSearchGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find resources
     * Returns a dictionary with two fields ``count`` and ``results``.             The ``count`` field contains the total number of Resources                found without the limit or query parameters having an effect.             The ``results`` field is a list of dictized Resource objects.             The query parameter is a required field. It is a string in                the form ``{field}:{term}`` or a list of strings, each of the             same form. Within each string, ``{field}`` is a field or extra             field on the Resource domain object.
     * @param {Object} opts Optional parameters
     * @param {String} [query = 'format:csv')] The search criteria string or list of strings of the form ``{field}:{term1}``
     * @param {String} [fields] Depreciated
     * @param {String} [orderBy] A field on the resource model that orders the results
     * @param {Number} [offset = 0)] Apply an offset to the query
     * @param {Number} [limit = 0)] Apply a limit to the query
     * @param {module:api/ActionApi~actionResourceSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionResourceSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'fields': opts['fields'],
        'order_by': opts['orderBy'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/resource_search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionResourceShowGet operation.
     * @callback module:api/ActionApi~actionResourceShowGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata for a specific resource
     * Return the metadata of a resource
     * @param {Object} opts Optional parameters
     * @param {String} [id = 'e6c8bb1d-3726-418b-9b7e-1d97a9bbb817')] The id of the resource
     * @param {Boolean} [includeTracking = false)] Add tracking information to dataset
     * @param {module:api/ActionApi~actionResourceShowGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionResourceShowGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'include_tracking': opts['includeTracking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/resource_show', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionStatusShowGet operation.
     * @callback module:api/ActionApi~actionStatusShowGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the site status
     * Returns the site status
     * @param {module:api/ActionApi~actionStatusShowGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionStatusShowGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/status_show', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionTagListGet operation.
     * @callback module:api/ActionApi~actionTagListGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of tags
     * Returns the names of all indexed tags
     * @param {Object} opts Optional parameters
     * @param {Number} [offset = 0)] The offset (index) of the first tag to return
     * @param {Number} [limit = 100)] The number of tags to be returned per page
     * @param {module:api/ActionApi~actionTagListGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionTagListGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey', 'githubAccessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/action/tag_list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
