/**
 * BC Data Catalogue API
 * This API provides live access to the BC Data Catalogue. Further documentation on the API is available from http://docs.ckan.org/en/latest/ Confirm the version of the API available from the catalogue by requesting https://catalogue.data.gov.bc.ca/api/3/action/status_show.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: data@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActionApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIActionApi::OAIActionApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIActionApi::~OAIActionApi() {
}

void OAIActionApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://catalogue.data.gov.bc.ca/api/3"),
    "Production",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://cat.data.gov.bc.ca/api/3"),
    "Test",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://cad.data.gov.bc.ca/api/3"),
    "Delivery",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("actionOrganizationActivityListGet", defaultConf);
    _serverIndices.insert("actionOrganizationActivityListGet", 0);
    _serverConfigs.insert("actionOrganizationActivityListHtmlGet", defaultConf);
    _serverIndices.insert("actionOrganizationActivityListHtmlGet", 0);
    _serverConfigs.insert("actionOrganizationAutocompleteGet", defaultConf);
    _serverIndices.insert("actionOrganizationAutocompleteGet", 0);
    _serverConfigs.insert("actionOrganizationFollowerCountGet", defaultConf);
    _serverIndices.insert("actionOrganizationFollowerCountGet", 0);
    _serverConfigs.insert("actionOrganizationFollowerListGet", defaultConf);
    _serverIndices.insert("actionOrganizationFollowerListGet", 0);
    _serverConfigs.insert("actionOrganizationListForUserGet", defaultConf);
    _serverIndices.insert("actionOrganizationListForUserGet", 0);
    _serverConfigs.insert("actionOrganizationListGet", defaultConf);
    _serverIndices.insert("actionOrganizationListGet", 0);
    _serverConfigs.insert("actionOrganizationRevisionListGet", defaultConf);
    _serverIndices.insert("actionOrganizationRevisionListGet", 0);
    _serverConfigs.insert("actionOrganizationShowGet", defaultConf);
    _serverIndices.insert("actionOrganizationShowGet", 0);
    _serverConfigs.insert("actionPackageActivityListGet", defaultConf);
    _serverIndices.insert("actionPackageActivityListGet", 0);
    _serverConfigs.insert("actionPackageActivityListHtmlGet", defaultConf);
    _serverIndices.insert("actionPackageActivityListHtmlGet", 0);
    _serverConfigs.insert("actionPackageAutocompleteGet", defaultConf);
    _serverIndices.insert("actionPackageAutocompleteGet", 0);
    _serverConfigs.insert("actionPackageListGet", defaultConf);
    _serverIndices.insert("actionPackageListGet", 0);
    _serverConfigs.insert("actionPackageRelationshipsListGet", defaultConf);
    _serverIndices.insert("actionPackageRelationshipsListGet", 0);
    _serverConfigs.insert("actionPackageRevisionListGet", defaultConf);
    _serverIndices.insert("actionPackageRevisionListGet", 0);
    _serverConfigs.insert("actionPackageSearchGet", defaultConf);
    _serverIndices.insert("actionPackageSearchGet", 0);
    _serverConfigs.insert("actionPackageShowGet", defaultConf);
    _serverIndices.insert("actionPackageShowGet", 0);
    _serverConfigs.insert("actionRelatedListGet", defaultConf);
    _serverIndices.insert("actionRelatedListGet", 0);
    _serverConfigs.insert("actionResourceSearchGet", defaultConf);
    _serverIndices.insert("actionResourceSearchGet", 0);
    _serverConfigs.insert("actionResourceShowGet", defaultConf);
    _serverIndices.insert("actionResourceShowGet", 0);
    _serverConfigs.insert("actionStatusShowGet", defaultConf);
    _serverIndices.insert("actionStatusShowGet", 0);
    _serverConfigs.insert("actionTagListGet", defaultConf);
    _serverIndices.insert("actionTagListGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIActionApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIActionApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIActionApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIActionApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIActionApi::setUsername(const QString &username) {
    _username = username;
}

void OAIActionApi::setPassword(const QString &password) {
    _password = password;
}


void OAIActionApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIActionApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIActionApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIActionApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIActionApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIActionApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIActionApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIActionApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIActionApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIActionApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIActionApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIActionApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIActionApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIActionApi::actionOrganizationActivityListGet(const ::OpenAPI::OptionalParam<QString> &id) {
    QString fullPath = QString(_serverConfigs["actionOrganizationActivityListGet"][_serverIndices.value("actionOrganizationActivityListGet")].URL()+"/action/organization_activity_list");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(id.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionOrganizationActivityListGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionOrganizationActivityListGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionOrganizationActivityListGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionOrganizationActivityListGetSignal();
        Q_EMIT actionOrganizationActivityListGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionOrganizationActivityListGetSignalE(error_type, error_str);
        Q_EMIT actionOrganizationActivityListGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionOrganizationActivityListGetSignalError(error_type, error_str);
        Q_EMIT actionOrganizationActivityListGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionOrganizationActivityListHtmlGet(const ::OpenAPI::OptionalParam<QString> &id) {
    QString fullPath = QString(_serverConfigs["actionOrganizationActivityListHtmlGet"][_serverIndices.value("actionOrganizationActivityListHtmlGet")].URL()+"/action/organization_activity_list_html");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(id.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionOrganizationActivityListHtmlGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionOrganizationActivityListHtmlGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionOrganizationActivityListHtmlGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionOrganizationActivityListHtmlGetSignal();
        Q_EMIT actionOrganizationActivityListHtmlGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionOrganizationActivityListHtmlGetSignalE(error_type, error_str);
        Q_EMIT actionOrganizationActivityListHtmlGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionOrganizationActivityListHtmlGetSignalError(error_type, error_str);
        Q_EMIT actionOrganizationActivityListHtmlGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionOrganizationAutocompleteGet(const ::OpenAPI::OptionalParam<QString> &q, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["actionOrganizationAutocompleteGet"][_serverIndices.value("actionOrganizationAutocompleteGet")].URL()+"/action/organization_autocomplete");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (q.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q")).append(querySuffix).append(QUrl::toPercentEncoding(q.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionOrganizationAutocompleteGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionOrganizationAutocompleteGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionOrganizationAutocompleteGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionOrganizationAutocompleteGetSignal();
        Q_EMIT actionOrganizationAutocompleteGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionOrganizationAutocompleteGetSignalE(error_type, error_str);
        Q_EMIT actionOrganizationAutocompleteGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionOrganizationAutocompleteGetSignalError(error_type, error_str);
        Q_EMIT actionOrganizationAutocompleteGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionOrganizationFollowerCountGet(const ::OpenAPI::OptionalParam<QString> &id) {
    QString fullPath = QString(_serverConfigs["actionOrganizationFollowerCountGet"][_serverIndices.value("actionOrganizationFollowerCountGet")].URL()+"/action/organization_follower_count");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(id.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionOrganizationFollowerCountGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionOrganizationFollowerCountGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionOrganizationFollowerCountGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionOrganizationFollowerCountGetSignal();
        Q_EMIT actionOrganizationFollowerCountGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionOrganizationFollowerCountGetSignalE(error_type, error_str);
        Q_EMIT actionOrganizationFollowerCountGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionOrganizationFollowerCountGetSignalError(error_type, error_str);
        Q_EMIT actionOrganizationFollowerCountGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionOrganizationFollowerListGet(const ::OpenAPI::OptionalParam<QString> &id) {
    QString fullPath = QString(_serverConfigs["actionOrganizationFollowerListGet"][_serverIndices.value("actionOrganizationFollowerListGet")].URL()+"/action/organization_follower_list");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(id.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionOrganizationFollowerListGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionOrganizationFollowerListGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionOrganizationFollowerListGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionOrganizationFollowerListGetSignal();
        Q_EMIT actionOrganizationFollowerListGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionOrganizationFollowerListGetSignalE(error_type, error_str);
        Q_EMIT actionOrganizationFollowerListGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionOrganizationFollowerListGetSignalError(error_type, error_str);
        Q_EMIT actionOrganizationFollowerListGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionOrganizationListForUserGet(const ::OpenAPI::OptionalParam<QString> &permission) {
    QString fullPath = QString(_serverConfigs["actionOrganizationListForUserGet"][_serverIndices.value("actionOrganizationListForUserGet")].URL()+"/action/organization_list_for_user");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (permission.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "permission", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("permission")).append(querySuffix).append(QUrl::toPercentEncoding(permission.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionOrganizationListForUserGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionOrganizationListForUserGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionOrganizationListForUserGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionOrganizationListForUserGetSignal();
        Q_EMIT actionOrganizationListForUserGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionOrganizationListForUserGetSignalE(error_type, error_str);
        Q_EMIT actionOrganizationListForUserGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionOrganizationListForUserGetSignalError(error_type, error_str);
        Q_EMIT actionOrganizationListForUserGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionOrganizationListGet(const ::OpenAPI::OptionalParam<qint32> &offset, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["actionOrganizationListGet"][_serverIndices.value("actionOrganizationListGet")].URL()+"/action/organization_list");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionOrganizationListGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionOrganizationListGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionOrganizationListGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionOrganizationListGetSignal();
        Q_EMIT actionOrganizationListGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionOrganizationListGetSignalE(error_type, error_str);
        Q_EMIT actionOrganizationListGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionOrganizationListGetSignalError(error_type, error_str);
        Q_EMIT actionOrganizationListGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionOrganizationRevisionListGet(const ::OpenAPI::OptionalParam<QString> &id) {
    QString fullPath = QString(_serverConfigs["actionOrganizationRevisionListGet"][_serverIndices.value("actionOrganizationRevisionListGet")].URL()+"/action/organization_revision_list");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(id.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionOrganizationRevisionListGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionOrganizationRevisionListGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionOrganizationRevisionListGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionOrganizationRevisionListGetSignal();
        Q_EMIT actionOrganizationRevisionListGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionOrganizationRevisionListGetSignalE(error_type, error_str);
        Q_EMIT actionOrganizationRevisionListGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionOrganizationRevisionListGetSignalError(error_type, error_str);
        Q_EMIT actionOrganizationRevisionListGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionOrganizationShowGet(const ::OpenAPI::OptionalParam<QString> &id, const ::OpenAPI::OptionalParam<bool> &include_datasets) {
    QString fullPath = QString(_serverConfigs["actionOrganizationShowGet"][_serverIndices.value("actionOrganizationShowGet")].URL()+"/action/organization_show");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(id.stringValue()));
    }
    if (include_datasets.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "include_datasets", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("include_datasets")).append(querySuffix).append(QUrl::toPercentEncoding(include_datasets.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionOrganizationShowGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionOrganizationShowGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionOrganizationShowGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionOrganizationShowGetSignal();
        Q_EMIT actionOrganizationShowGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionOrganizationShowGetSignalE(error_type, error_str);
        Q_EMIT actionOrganizationShowGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionOrganizationShowGetSignalError(error_type, error_str);
        Q_EMIT actionOrganizationShowGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionPackageActivityListGet(const ::OpenAPI::OptionalParam<QString> &id, const ::OpenAPI::OptionalParam<qint32> &offset, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["actionPackageActivityListGet"][_serverIndices.value("actionPackageActivityListGet")].URL()+"/action/package_activity_list");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(id.stringValue()));
    }
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionPackageActivityListGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionPackageActivityListGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionPackageActivityListGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionPackageActivityListGetSignal();
        Q_EMIT actionPackageActivityListGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionPackageActivityListGetSignalE(error_type, error_str);
        Q_EMIT actionPackageActivityListGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionPackageActivityListGetSignalError(error_type, error_str);
        Q_EMIT actionPackageActivityListGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionPackageActivityListHtmlGet(const ::OpenAPI::OptionalParam<QString> &id, const ::OpenAPI::OptionalParam<qint32> &offset, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["actionPackageActivityListHtmlGet"][_serverIndices.value("actionPackageActivityListHtmlGet")].URL()+"/action/package_activity_list_html");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(id.stringValue()));
    }
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionPackageActivityListHtmlGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionPackageActivityListHtmlGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionPackageActivityListHtmlGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionPackageActivityListHtmlGetSignal();
        Q_EMIT actionPackageActivityListHtmlGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionPackageActivityListHtmlGetSignalE(error_type, error_str);
        Q_EMIT actionPackageActivityListHtmlGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionPackageActivityListHtmlGetSignalError(error_type, error_str);
        Q_EMIT actionPackageActivityListHtmlGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionPackageAutocompleteGet(const ::OpenAPI::OptionalParam<QString> &q, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["actionPackageAutocompleteGet"][_serverIndices.value("actionPackageAutocompleteGet")].URL()+"/action/package_autocomplete");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (q.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q")).append(querySuffix).append(QUrl::toPercentEncoding(q.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionPackageAutocompleteGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionPackageAutocompleteGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionPackageAutocompleteGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionPackageAutocompleteGetSignal();
        Q_EMIT actionPackageAutocompleteGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionPackageAutocompleteGetSignalE(error_type, error_str);
        Q_EMIT actionPackageAutocompleteGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionPackageAutocompleteGetSignalError(error_type, error_str);
        Q_EMIT actionPackageAutocompleteGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionPackageListGet(const ::OpenAPI::OptionalParam<qint32> &offset, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["actionPackageListGet"][_serverIndices.value("actionPackageListGet")].URL()+"/action/package_list");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionPackageListGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionPackageListGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionPackageListGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionPackageListGetSignal();
        Q_EMIT actionPackageListGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionPackageListGetSignalE(error_type, error_str);
        Q_EMIT actionPackageListGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionPackageListGetSignalError(error_type, error_str);
        Q_EMIT actionPackageListGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionPackageRelationshipsListGet(const ::OpenAPI::OptionalParam<QString> &id, const ::OpenAPI::OptionalParam<QString> &id2, const ::OpenAPI::OptionalParam<QString> &rel) {
    QString fullPath = QString(_serverConfigs["actionPackageRelationshipsListGet"][_serverIndices.value("actionPackageRelationshipsListGet")].URL()+"/action/package_relationships_list");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(id.stringValue()));
    }
    if (id2.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id2", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id2")).append(querySuffix).append(QUrl::toPercentEncoding(id2.stringValue()));
    }
    if (rel.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "rel", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("rel")).append(querySuffix).append(QUrl::toPercentEncoding(rel.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionPackageRelationshipsListGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionPackageRelationshipsListGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionPackageRelationshipsListGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionPackageRelationshipsListGetSignal();
        Q_EMIT actionPackageRelationshipsListGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionPackageRelationshipsListGetSignalE(error_type, error_str);
        Q_EMIT actionPackageRelationshipsListGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionPackageRelationshipsListGetSignalError(error_type, error_str);
        Q_EMIT actionPackageRelationshipsListGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionPackageRevisionListGet(const ::OpenAPI::OptionalParam<QString> &id) {
    QString fullPath = QString(_serverConfigs["actionPackageRevisionListGet"][_serverIndices.value("actionPackageRevisionListGet")].URL()+"/action/package_revision_list");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(id.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionPackageRevisionListGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionPackageRevisionListGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionPackageRevisionListGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionPackageRevisionListGetSignal();
        Q_EMIT actionPackageRevisionListGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionPackageRevisionListGetSignalE(error_type, error_str);
        Q_EMIT actionPackageRevisionListGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionPackageRevisionListGetSignalError(error_type, error_str);
        Q_EMIT actionPackageRevisionListGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionPackageSearchGet(const ::OpenAPI::OptionalParam<QString> &q) {
    QString fullPath = QString(_serverConfigs["actionPackageSearchGet"][_serverIndices.value("actionPackageSearchGet")].URL()+"/action/package_search");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (q.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q")).append(querySuffix).append(QUrl::toPercentEncoding(q.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionPackageSearchGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionPackageSearchGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionPackageSearchGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionPackageSearchGetSignal();
        Q_EMIT actionPackageSearchGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionPackageSearchGetSignalE(error_type, error_str);
        Q_EMIT actionPackageSearchGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionPackageSearchGetSignalError(error_type, error_str);
        Q_EMIT actionPackageSearchGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionPackageShowGet(const ::OpenAPI::OptionalParam<QString> &id) {
    QString fullPath = QString(_serverConfigs["actionPackageShowGet"][_serverIndices.value("actionPackageShowGet")].URL()+"/action/package_show");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(id.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionPackageShowGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionPackageShowGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionPackageShowGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionPackageShowGetSignal();
        Q_EMIT actionPackageShowGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionPackageShowGetSignalE(error_type, error_str);
        Q_EMIT actionPackageShowGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionPackageShowGetSignalError(error_type, error_str);
        Q_EMIT actionPackageShowGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionRelatedListGet(const ::OpenAPI::OptionalParam<QString> &id, const ::OpenAPI::OptionalParam<QString> &dataset, const ::OpenAPI::OptionalParam<QString> &type_filter, const ::OpenAPI::OptionalParam<QString> &sort, const ::OpenAPI::OptionalParam<QString> &featured) {
    QString fullPath = QString(_serverConfigs["actionRelatedListGet"][_serverIndices.value("actionRelatedListGet")].URL()+"/action/related_list");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(id.stringValue()));
    }
    if (dataset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "dataset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("dataset")).append(querySuffix).append(QUrl::toPercentEncoding(dataset.stringValue()));
    }
    if (type_filter.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "type_filter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("type_filter")).append(querySuffix).append(QUrl::toPercentEncoding(type_filter.stringValue()));
    }
    if (sort.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sort", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sort")).append(querySuffix).append(QUrl::toPercentEncoding(sort.stringValue()));
    }
    if (featured.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "featured", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("featured")).append(querySuffix).append(QUrl::toPercentEncoding(featured.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionRelatedListGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionRelatedListGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionRelatedListGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionRelatedListGetSignal();
        Q_EMIT actionRelatedListGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionRelatedListGetSignalE(error_type, error_str);
        Q_EMIT actionRelatedListGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionRelatedListGetSignalError(error_type, error_str);
        Q_EMIT actionRelatedListGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionResourceSearchGet(const ::OpenAPI::OptionalParam<QString> &query, const ::OpenAPI::OptionalParam<QString> &fields, const ::OpenAPI::OptionalParam<QString> &order_by, const ::OpenAPI::OptionalParam<qint32> &offset, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["actionResourceSearchGet"][_serverIndices.value("actionResourceSearchGet")].URL()+"/action/resource_search");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (query.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "query", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("query")).append(querySuffix).append(QUrl::toPercentEncoding(query.stringValue()));
    }
    if (fields.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fields", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fields")).append(querySuffix).append(QUrl::toPercentEncoding(fields.stringValue()));
    }
    if (order_by.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "order_by", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("order_by")).append(querySuffix).append(QUrl::toPercentEncoding(order_by.stringValue()));
    }
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionResourceSearchGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionResourceSearchGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionResourceSearchGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionResourceSearchGetSignal();
        Q_EMIT actionResourceSearchGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionResourceSearchGetSignalE(error_type, error_str);
        Q_EMIT actionResourceSearchGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionResourceSearchGetSignalError(error_type, error_str);
        Q_EMIT actionResourceSearchGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionResourceShowGet(const ::OpenAPI::OptionalParam<QString> &id, const ::OpenAPI::OptionalParam<bool> &include_tracking) {
    QString fullPath = QString(_serverConfigs["actionResourceShowGet"][_serverIndices.value("actionResourceShowGet")].URL()+"/action/resource_show");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(id.stringValue()));
    }
    if (include_tracking.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "include_tracking", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("include_tracking")).append(querySuffix).append(QUrl::toPercentEncoding(include_tracking.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionResourceShowGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionResourceShowGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionResourceShowGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionResourceShowGetSignal();
        Q_EMIT actionResourceShowGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionResourceShowGetSignalE(error_type, error_str);
        Q_EMIT actionResourceShowGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionResourceShowGetSignalError(error_type, error_str);
        Q_EMIT actionResourceShowGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionStatusShowGet() {
    QString fullPath = QString(_serverConfigs["actionStatusShowGet"][_serverIndices.value("actionStatusShowGet")].URL()+"/action/status_show");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionStatusShowGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionStatusShowGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionStatusShowGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionStatusShowGetSignal();
        Q_EMIT actionStatusShowGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionStatusShowGetSignalE(error_type, error_str);
        Q_EMIT actionStatusShowGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionStatusShowGetSignalError(error_type, error_str);
        Q_EMIT actionStatusShowGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::actionTagListGet(const ::OpenAPI::OptionalParam<qint32> &offset, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["actionTagListGet"][_serverIndices.value("actionTagListGet")].URL()+"/action/tag_list");
    
    if (_apiKeys.contains("internalApiKey")) {
        addHeaders("internalApiKey",_apiKeys.find("internalApiKey").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionTagListGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("user");
    scope.append("user:email");
    scope.append("user:follow");
    scope.append("public_repo");
    scope.append("repo");
    scope.append("repo_deployment");
    scope.append("repo:status");
    scope.append("delete_repo");
    scope.append("notifications");
    scope.append("gist");
    scope.append("read:repo_hook");
    scope.append("write:repo_hook");
    scope.append("admin:repo_hook");
    scope.append("read:org");
    scope.append("write:org");
    scope.append("admin:org");
    scope.append("read:public_key");
    scope.append("write:public_key");
    scope.append("admin:public_key");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIActionApi::actionTagListGetCallback);
    connect(this, &OAIActionApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIActionApi::actionTagListGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actionTagListGetSignal();
        Q_EMIT actionTagListGetSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("user");
        scope.append("user:email");
        scope.append("user:follow");
        scope.append("public_repo");
        scope.append("repo");
        scope.append("repo_deployment");
        scope.append("repo:status");
        scope.append("delete_repo");
        scope.append("notifications");
        scope.append("gist");
        scope.append("read:repo_hook");
        scope.append("write:repo_hook");
        scope.append("admin:repo_hook");
        scope.append("read:org");
        scope.append("write:org");
        scope.append("admin:org");
        scope.append("read:public_key");
        scope.append("write:public_key");
        scope.append("admin:public_key");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://github.com/login/oauth/authorize");
        QString tokenUrl("https://github.com/login/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actionTagListGetSignalE(error_type, error_str);
        Q_EMIT actionTagListGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actionTagListGetSignalError(error_type, error_str);
        Q_EMIT actionTagListGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIActionApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
