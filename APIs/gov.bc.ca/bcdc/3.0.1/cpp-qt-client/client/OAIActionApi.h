/**
 * BC Data Catalogue API
 * This API provides live access to the BC Data Catalogue. Further documentation on the API is available from http://docs.ckan.org/en/latest/ Confirm the version of the API available from the catalogue by requesting https://catalogue.data.gov.bc.ca/api/3/action/status_show.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: data@gov.bc.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIActionApi_H
#define OAI_OAIActionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIActionApi : public QObject {
    Q_OBJECT

public:
    OAIActionApi(const int timeOut = 0);
    ~OAIActionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [optional]
    */
    virtual void actionOrganizationActivityListGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [optional]
    */
    virtual void actionOrganizationActivityListHtmlGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  q QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void actionOrganizationAutocompleteGet(const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [optional]
    */
    virtual void actionOrganizationFollowerCountGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [optional]
    */
    virtual void actionOrganizationFollowerListGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  permission QString [optional]
    */
    virtual void actionOrganizationListForUserGet(const ::OpenAPI::OptionalParam<QString> &permission = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void actionOrganizationListGet(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [optional]
    */
    virtual void actionOrganizationRevisionListGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [optional]
    * @param[in]  include_datasets bool [optional]
    */
    virtual void actionOrganizationShowGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_datasets = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void actionPackageActivityListGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void actionPackageActivityListHtmlGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  q QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void actionPackageAutocompleteGet(const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void actionPackageListGet(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [optional]
    * @param[in]  id2 QString [optional]
    * @param[in]  rel QString [optional]
    */
    virtual void actionPackageRelationshipsListGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rel = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [optional]
    */
    virtual void actionPackageRevisionListGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  q QString [optional]
    */
    virtual void actionPackageSearchGet(const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [optional]
    */
    virtual void actionPackageShowGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [optional]
    * @param[in]  dataset QString [optional]
    * @param[in]  type_filter QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  featured QString [optional]
    */
    virtual void actionRelatedListGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dataset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &featured = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void actionResourceSearchGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [optional]
    * @param[in]  include_tracking bool [optional]
    */
    virtual void actionResourceShowGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_tracking = ::OpenAPI::OptionalParam<bool>());


    virtual void actionStatusShowGet();

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void actionTagListGet(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void actionOrganizationActivityListGetCallback(OAIHttpRequestWorker *worker);
    void actionOrganizationActivityListHtmlGetCallback(OAIHttpRequestWorker *worker);
    void actionOrganizationAutocompleteGetCallback(OAIHttpRequestWorker *worker);
    void actionOrganizationFollowerCountGetCallback(OAIHttpRequestWorker *worker);
    void actionOrganizationFollowerListGetCallback(OAIHttpRequestWorker *worker);
    void actionOrganizationListForUserGetCallback(OAIHttpRequestWorker *worker);
    void actionOrganizationListGetCallback(OAIHttpRequestWorker *worker);
    void actionOrganizationRevisionListGetCallback(OAIHttpRequestWorker *worker);
    void actionOrganizationShowGetCallback(OAIHttpRequestWorker *worker);
    void actionPackageActivityListGetCallback(OAIHttpRequestWorker *worker);
    void actionPackageActivityListHtmlGetCallback(OAIHttpRequestWorker *worker);
    void actionPackageAutocompleteGetCallback(OAIHttpRequestWorker *worker);
    void actionPackageListGetCallback(OAIHttpRequestWorker *worker);
    void actionPackageRelationshipsListGetCallback(OAIHttpRequestWorker *worker);
    void actionPackageRevisionListGetCallback(OAIHttpRequestWorker *worker);
    void actionPackageSearchGetCallback(OAIHttpRequestWorker *worker);
    void actionPackageShowGetCallback(OAIHttpRequestWorker *worker);
    void actionRelatedListGetCallback(OAIHttpRequestWorker *worker);
    void actionResourceSearchGetCallback(OAIHttpRequestWorker *worker);
    void actionResourceShowGetCallback(OAIHttpRequestWorker *worker);
    void actionStatusShowGetCallback(OAIHttpRequestWorker *worker);
    void actionTagListGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void actionOrganizationActivityListGetSignal();
    void actionOrganizationActivityListHtmlGetSignal();
    void actionOrganizationAutocompleteGetSignal();
    void actionOrganizationFollowerCountGetSignal();
    void actionOrganizationFollowerListGetSignal();
    void actionOrganizationListForUserGetSignal();
    void actionOrganizationListGetSignal();
    void actionOrganizationRevisionListGetSignal();
    void actionOrganizationShowGetSignal();
    void actionPackageActivityListGetSignal();
    void actionPackageActivityListHtmlGetSignal();
    void actionPackageAutocompleteGetSignal();
    void actionPackageListGetSignal();
    void actionPackageRelationshipsListGetSignal();
    void actionPackageRevisionListGetSignal();
    void actionPackageSearchGetSignal();
    void actionPackageShowGetSignal();
    void actionRelatedListGetSignal();
    void actionResourceSearchGetSignal();
    void actionResourceShowGetSignal();
    void actionStatusShowGetSignal();
    void actionTagListGetSignal();


    void actionOrganizationActivityListGetSignalFull(OAIHttpRequestWorker *worker);
    void actionOrganizationActivityListHtmlGetSignalFull(OAIHttpRequestWorker *worker);
    void actionOrganizationAutocompleteGetSignalFull(OAIHttpRequestWorker *worker);
    void actionOrganizationFollowerCountGetSignalFull(OAIHttpRequestWorker *worker);
    void actionOrganizationFollowerListGetSignalFull(OAIHttpRequestWorker *worker);
    void actionOrganizationListForUserGetSignalFull(OAIHttpRequestWorker *worker);
    void actionOrganizationListGetSignalFull(OAIHttpRequestWorker *worker);
    void actionOrganizationRevisionListGetSignalFull(OAIHttpRequestWorker *worker);
    void actionOrganizationShowGetSignalFull(OAIHttpRequestWorker *worker);
    void actionPackageActivityListGetSignalFull(OAIHttpRequestWorker *worker);
    void actionPackageActivityListHtmlGetSignalFull(OAIHttpRequestWorker *worker);
    void actionPackageAutocompleteGetSignalFull(OAIHttpRequestWorker *worker);
    void actionPackageListGetSignalFull(OAIHttpRequestWorker *worker);
    void actionPackageRelationshipsListGetSignalFull(OAIHttpRequestWorker *worker);
    void actionPackageRevisionListGetSignalFull(OAIHttpRequestWorker *worker);
    void actionPackageSearchGetSignalFull(OAIHttpRequestWorker *worker);
    void actionPackageShowGetSignalFull(OAIHttpRequestWorker *worker);
    void actionRelatedListGetSignalFull(OAIHttpRequestWorker *worker);
    void actionResourceSearchGetSignalFull(OAIHttpRequestWorker *worker);
    void actionResourceShowGetSignalFull(OAIHttpRequestWorker *worker);
    void actionStatusShowGetSignalFull(OAIHttpRequestWorker *worker);
    void actionTagListGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use actionOrganizationActivityListGetSignalError() instead")
    void actionOrganizationActivityListGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionOrganizationActivityListGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionOrganizationActivityListHtmlGetSignalError() instead")
    void actionOrganizationActivityListHtmlGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionOrganizationActivityListHtmlGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionOrganizationAutocompleteGetSignalError() instead")
    void actionOrganizationAutocompleteGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionOrganizationAutocompleteGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionOrganizationFollowerCountGetSignalError() instead")
    void actionOrganizationFollowerCountGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionOrganizationFollowerCountGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionOrganizationFollowerListGetSignalError() instead")
    void actionOrganizationFollowerListGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionOrganizationFollowerListGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionOrganizationListForUserGetSignalError() instead")
    void actionOrganizationListForUserGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionOrganizationListForUserGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionOrganizationListGetSignalError() instead")
    void actionOrganizationListGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionOrganizationListGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionOrganizationRevisionListGetSignalError() instead")
    void actionOrganizationRevisionListGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionOrganizationRevisionListGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionOrganizationShowGetSignalError() instead")
    void actionOrganizationShowGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionOrganizationShowGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionPackageActivityListGetSignalError() instead")
    void actionPackageActivityListGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionPackageActivityListGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionPackageActivityListHtmlGetSignalError() instead")
    void actionPackageActivityListHtmlGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionPackageActivityListHtmlGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionPackageAutocompleteGetSignalError() instead")
    void actionPackageAutocompleteGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionPackageAutocompleteGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionPackageListGetSignalError() instead")
    void actionPackageListGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionPackageListGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionPackageRelationshipsListGetSignalError() instead")
    void actionPackageRelationshipsListGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionPackageRelationshipsListGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionPackageRevisionListGetSignalError() instead")
    void actionPackageRevisionListGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionPackageRevisionListGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionPackageSearchGetSignalError() instead")
    void actionPackageSearchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionPackageSearchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionPackageShowGetSignalError() instead")
    void actionPackageShowGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionPackageShowGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionRelatedListGetSignalError() instead")
    void actionRelatedListGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionRelatedListGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionResourceSearchGetSignalError() instead")
    void actionResourceSearchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionResourceSearchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionResourceShowGetSignalError() instead")
    void actionResourceShowGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionResourceShowGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionStatusShowGetSignalError() instead")
    void actionStatusShowGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionStatusShowGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionTagListGetSignalError() instead")
    void actionTagListGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actionTagListGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use actionOrganizationActivityListGetSignalErrorFull() instead")
    void actionOrganizationActivityListGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionOrganizationActivityListGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionOrganizationActivityListHtmlGetSignalErrorFull() instead")
    void actionOrganizationActivityListHtmlGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionOrganizationActivityListHtmlGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionOrganizationAutocompleteGetSignalErrorFull() instead")
    void actionOrganizationAutocompleteGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionOrganizationAutocompleteGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionOrganizationFollowerCountGetSignalErrorFull() instead")
    void actionOrganizationFollowerCountGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionOrganizationFollowerCountGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionOrganizationFollowerListGetSignalErrorFull() instead")
    void actionOrganizationFollowerListGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionOrganizationFollowerListGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionOrganizationListForUserGetSignalErrorFull() instead")
    void actionOrganizationListForUserGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionOrganizationListForUserGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionOrganizationListGetSignalErrorFull() instead")
    void actionOrganizationListGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionOrganizationListGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionOrganizationRevisionListGetSignalErrorFull() instead")
    void actionOrganizationRevisionListGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionOrganizationRevisionListGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionOrganizationShowGetSignalErrorFull() instead")
    void actionOrganizationShowGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionOrganizationShowGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionPackageActivityListGetSignalErrorFull() instead")
    void actionPackageActivityListGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionPackageActivityListGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionPackageActivityListHtmlGetSignalErrorFull() instead")
    void actionPackageActivityListHtmlGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionPackageActivityListHtmlGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionPackageAutocompleteGetSignalErrorFull() instead")
    void actionPackageAutocompleteGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionPackageAutocompleteGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionPackageListGetSignalErrorFull() instead")
    void actionPackageListGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionPackageListGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionPackageRelationshipsListGetSignalErrorFull() instead")
    void actionPackageRelationshipsListGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionPackageRelationshipsListGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionPackageRevisionListGetSignalErrorFull() instead")
    void actionPackageRevisionListGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionPackageRevisionListGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionPackageSearchGetSignalErrorFull() instead")
    void actionPackageSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionPackageSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionPackageShowGetSignalErrorFull() instead")
    void actionPackageShowGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionPackageShowGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionRelatedListGetSignalErrorFull() instead")
    void actionRelatedListGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionRelatedListGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionResourceSearchGetSignalErrorFull() instead")
    void actionResourceSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionResourceSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionResourceShowGetSignalErrorFull() instead")
    void actionResourceShowGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionResourceShowGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionStatusShowGetSignalErrorFull() instead")
    void actionStatusShowGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionStatusShowGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actionTagListGetSignalErrorFull() instead")
    void actionTagListGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actionTagListGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
