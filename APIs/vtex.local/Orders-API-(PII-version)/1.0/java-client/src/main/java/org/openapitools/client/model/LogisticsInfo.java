/*
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeliveryId;
import org.openapitools.client.model.PickupStoreInfo;
import org.openapitools.client.model.Sla;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LogisticsInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:00.631491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LogisticsInfo {
  public static final String SERIALIZED_NAME_ADDRESS_ID = "addressId";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ID)
  private String addressId;

  public static final String SERIALIZED_NAME_DELIVERY_CHANNEL = "deliveryChannel";
  @SerializedName(SERIALIZED_NAME_DELIVERY_CHANNEL)
  private String deliveryChannel;

  public static final String SERIALIZED_NAME_DELIVERY_COMPANY = "deliveryCompany";
  @SerializedName(SERIALIZED_NAME_DELIVERY_COMPANY)
  private String deliveryCompany;

  public static final String SERIALIZED_NAME_DELIVERY_IDS = "deliveryIds";
  @SerializedName(SERIALIZED_NAME_DELIVERY_IDS)
  private List<DeliveryId> deliveryIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DELIVERY_WINDOW = "deliveryWindow";
  @SerializedName(SERIALIZED_NAME_DELIVERY_WINDOW)
  private String deliveryWindow;

  public static final String SERIALIZED_NAME_ITEM_INDEX = "itemIndex";
  @SerializedName(SERIALIZED_NAME_ITEM_INDEX)
  private Integer itemIndex;

  public static final String SERIALIZED_NAME_LIST_PRICE = "listPrice";
  @SerializedName(SERIALIZED_NAME_LIST_PRICE)
  private Integer listPrice;

  public static final String SERIALIZED_NAME_LOCK_T_T_L = "lockTTL";
  @SerializedName(SERIALIZED_NAME_LOCK_T_T_L)
  private String lockTTL;

  public static final String SERIALIZED_NAME_PICKUP_STORE_INFO = "pickupStoreInfo";
  @SerializedName(SERIALIZED_NAME_PICKUP_STORE_INFO)
  private PickupStoreInfo pickupStoreInfo;

  public static final String SERIALIZED_NAME_POLYGON_NAME = "polygonName";
  @SerializedName(SERIALIZED_NAME_POLYGON_NAME)
  private String polygonName;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Integer price;

  public static final String SERIALIZED_NAME_SELECTED_SLA = "selectedSla";
  @SerializedName(SERIALIZED_NAME_SELECTED_SLA)
  private String selectedSla;

  public static final String SERIALIZED_NAME_SELLING_PRICE = "sellingPrice";
  @SerializedName(SERIALIZED_NAME_SELLING_PRICE)
  private Integer sellingPrice;

  public static final String SERIALIZED_NAME_SHIPPING_ESTIMATE = "shippingEstimate";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ESTIMATE)
  private String shippingEstimate;

  public static final String SERIALIZED_NAME_SHIPPING_ESTIMATE_DATE = "shippingEstimateDate";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ESTIMATE_DATE)
  private String shippingEstimateDate;

  public static final String SERIALIZED_NAME_SHIPS_TO = "shipsTo";
  @SerializedName(SERIALIZED_NAME_SHIPS_TO)
  private List<String> shipsTo = new ArrayList<>();

  public static final String SERIALIZED_NAME_SLAS = "slas";
  @SerializedName(SERIALIZED_NAME_SLAS)
  private List<Sla> slas = new ArrayList<>();

  public LogisticsInfo() {
  }

  public LogisticsInfo addressId(String addressId) {
    this.addressId = addressId;
    return this;
  }

  /**
   * Address ID.
   * @return addressId
   */
  @javax.annotation.Nonnull
  public String getAddressId() {
    return addressId;
  }

  public void setAddressId(String addressId) {
    this.addressId = addressId;
  }


  public LogisticsInfo deliveryChannel(String deliveryChannel) {
    this.deliveryChannel = deliveryChannel;
    return this;
  }

  /**
   * Delivery channel.
   * @return deliveryChannel
   */
  @javax.annotation.Nonnull
  public String getDeliveryChannel() {
    return deliveryChannel;
  }

  public void setDeliveryChannel(String deliveryChannel) {
    this.deliveryChannel = deliveryChannel;
  }


  public LogisticsInfo deliveryCompany(String deliveryCompany) {
    this.deliveryCompany = deliveryCompany;
    return this;
  }

  /**
   * Delivery company.
   * @return deliveryCompany
   */
  @javax.annotation.Nonnull
  public String getDeliveryCompany() {
    return deliveryCompany;
  }

  public void setDeliveryCompany(String deliveryCompany) {
    this.deliveryCompany = deliveryCompany;
  }


  public LogisticsInfo deliveryIds(List<DeliveryId> deliveryIds) {
    this.deliveryIds = deliveryIds;
    return this;
  }

  public LogisticsInfo addDeliveryIdsItem(DeliveryId deliveryIdsItem) {
    if (this.deliveryIds == null) {
      this.deliveryIds = new ArrayList<>();
    }
    this.deliveryIds.add(deliveryIdsItem);
    return this;
  }

  /**
   * Array of delivery IDs.
   * @return deliveryIds
   */
  @javax.annotation.Nonnull
  public List<DeliveryId> getDeliveryIds() {
    return deliveryIds;
  }

  public void setDeliveryIds(List<DeliveryId> deliveryIds) {
    this.deliveryIds = deliveryIds;
  }


  public LogisticsInfo deliveryWindow(String deliveryWindow) {
    this.deliveryWindow = deliveryWindow;
    return this;
  }

  /**
   * Delivery window information.
   * @return deliveryWindow
   */
  @javax.annotation.Nullable
  public String getDeliveryWindow() {
    return deliveryWindow;
  }

  public void setDeliveryWindow(String deliveryWindow) {
    this.deliveryWindow = deliveryWindow;
  }


  public LogisticsInfo itemIndex(Integer itemIndex) {
    this.itemIndex = itemIndex;
    return this;
  }

  /**
   * Item index, matching the index in the &#x60;items&#x60; array.
   * @return itemIndex
   */
  @javax.annotation.Nonnull
  public Integer getItemIndex() {
    return itemIndex;
  }

  public void setItemIndex(Integer itemIndex) {
    this.itemIndex = itemIndex;
  }


  public LogisticsInfo listPrice(Integer listPrice) {
    this.listPrice = listPrice;
    return this;
  }

  /**
   * List price in cents.
   * @return listPrice
   */
  @javax.annotation.Nonnull
  public Integer getListPrice() {
    return listPrice;
  }

  public void setListPrice(Integer listPrice) {
    this.listPrice = listPrice;
  }


  public LogisticsInfo lockTTL(String lockTTL) {
    this.lockTTL = lockTTL;
    return this;
  }

  /**
   * Reservation lasting period.
   * @return lockTTL
   */
  @javax.annotation.Nonnull
  public String getLockTTL() {
    return lockTTL;
  }

  public void setLockTTL(String lockTTL) {
    this.lockTTL = lockTTL;
  }


  public LogisticsInfo pickupStoreInfo(PickupStoreInfo pickupStoreInfo) {
    this.pickupStoreInfo = pickupStoreInfo;
    return this;
  }

  /**
   * Get pickupStoreInfo
   * @return pickupStoreInfo
   */
  @javax.annotation.Nonnull
  public PickupStoreInfo getPickupStoreInfo() {
    return pickupStoreInfo;
  }

  public void setPickupStoreInfo(PickupStoreInfo pickupStoreInfo) {
    this.pickupStoreInfo = pickupStoreInfo;
  }


  public LogisticsInfo polygonName(String polygonName) {
    this.polygonName = polygonName;
    return this;
  }

  /**
   * Polygon name.
   * @return polygonName
   */
  @javax.annotation.Nullable
  public String getPolygonName() {
    return polygonName;
  }

  public void setPolygonName(String polygonName) {
    this.polygonName = polygonName;
  }


  public LogisticsInfo price(Integer price) {
    this.price = price;
    return this;
  }

  /**
   * Prince in cents.
   * @return price
   */
  @javax.annotation.Nonnull
  public Integer getPrice() {
    return price;
  }

  public void setPrice(Integer price) {
    this.price = price;
  }


  public LogisticsInfo selectedSla(String selectedSla) {
    this.selectedSla = selectedSla;
    return this;
  }

  /**
   * Selected SLA.
   * @return selectedSla
   */
  @javax.annotation.Nonnull
  public String getSelectedSla() {
    return selectedSla;
  }

  public void setSelectedSla(String selectedSla) {
    this.selectedSla = selectedSla;
  }


  public LogisticsInfo sellingPrice(Integer sellingPrice) {
    this.sellingPrice = sellingPrice;
    return this;
  }

  /**
   * Selling price in cents.
   * @return sellingPrice
   */
  @javax.annotation.Nonnull
  public Integer getSellingPrice() {
    return sellingPrice;
  }

  public void setSellingPrice(Integer sellingPrice) {
    this.sellingPrice = sellingPrice;
  }


  public LogisticsInfo shippingEstimate(String shippingEstimate) {
    this.shippingEstimate = shippingEstimate;
    return this;
  }

  /**
   * Shipping estimate.
   * @return shippingEstimate
   */
  @javax.annotation.Nonnull
  public String getShippingEstimate() {
    return shippingEstimate;
  }

  public void setShippingEstimate(String shippingEstimate) {
    this.shippingEstimate = shippingEstimate;
  }


  public LogisticsInfo shippingEstimateDate(String shippingEstimateDate) {
    this.shippingEstimateDate = shippingEstimateDate;
    return this;
  }

  /**
   * Shipping estimate date.
   * @return shippingEstimateDate
   */
  @javax.annotation.Nonnull
  public String getShippingEstimateDate() {
    return shippingEstimateDate;
  }

  public void setShippingEstimateDate(String shippingEstimateDate) {
    this.shippingEstimateDate = shippingEstimateDate;
  }


  public LogisticsInfo shipsTo(List<String> shipsTo) {
    this.shipsTo = shipsTo;
    return this;
  }

  public LogisticsInfo addShipsToItem(String shipsToItem) {
    if (this.shipsTo == null) {
      this.shipsTo = new ArrayList<>();
    }
    this.shipsTo.add(shipsToItem);
    return this;
  }

  /**
   * List of countries (three letter ISO code) to which shipping is available.
   * @return shipsTo
   */
  @javax.annotation.Nonnull
  public List<String> getShipsTo() {
    return shipsTo;
  }

  public void setShipsTo(List<String> shipsTo) {
    this.shipsTo = shipsTo;
  }


  public LogisticsInfo slas(List<Sla> slas) {
    this.slas = slas;
    return this;
  }

  public LogisticsInfo addSlasItem(Sla slasItem) {
    if (this.slas == null) {
      this.slas = new ArrayList<>();
    }
    this.slas.add(slasItem);
    return this;
  }

  /**
   * Array with information on the SLAs.
   * @return slas
   */
  @javax.annotation.Nonnull
  public List<Sla> getSlas() {
    return slas;
  }

  public void setSlas(List<Sla> slas) {
    this.slas = slas;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogisticsInfo logisticsInfo = (LogisticsInfo) o;
    return Objects.equals(this.addressId, logisticsInfo.addressId) &&
        Objects.equals(this.deliveryChannel, logisticsInfo.deliveryChannel) &&
        Objects.equals(this.deliveryCompany, logisticsInfo.deliveryCompany) &&
        Objects.equals(this.deliveryIds, logisticsInfo.deliveryIds) &&
        Objects.equals(this.deliveryWindow, logisticsInfo.deliveryWindow) &&
        Objects.equals(this.itemIndex, logisticsInfo.itemIndex) &&
        Objects.equals(this.listPrice, logisticsInfo.listPrice) &&
        Objects.equals(this.lockTTL, logisticsInfo.lockTTL) &&
        Objects.equals(this.pickupStoreInfo, logisticsInfo.pickupStoreInfo) &&
        Objects.equals(this.polygonName, logisticsInfo.polygonName) &&
        Objects.equals(this.price, logisticsInfo.price) &&
        Objects.equals(this.selectedSla, logisticsInfo.selectedSla) &&
        Objects.equals(this.sellingPrice, logisticsInfo.sellingPrice) &&
        Objects.equals(this.shippingEstimate, logisticsInfo.shippingEstimate) &&
        Objects.equals(this.shippingEstimateDate, logisticsInfo.shippingEstimateDate) &&
        Objects.equals(this.shipsTo, logisticsInfo.shipsTo) &&
        Objects.equals(this.slas, logisticsInfo.slas);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressId, deliveryChannel, deliveryCompany, deliveryIds, deliveryWindow, itemIndex, listPrice, lockTTL, pickupStoreInfo, polygonName, price, selectedSla, sellingPrice, shippingEstimate, shippingEstimateDate, shipsTo, slas);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogisticsInfo {\n");
    sb.append("    addressId: ").append(toIndentedString(addressId)).append("\n");
    sb.append("    deliveryChannel: ").append(toIndentedString(deliveryChannel)).append("\n");
    sb.append("    deliveryCompany: ").append(toIndentedString(deliveryCompany)).append("\n");
    sb.append("    deliveryIds: ").append(toIndentedString(deliveryIds)).append("\n");
    sb.append("    deliveryWindow: ").append(toIndentedString(deliveryWindow)).append("\n");
    sb.append("    itemIndex: ").append(toIndentedString(itemIndex)).append("\n");
    sb.append("    listPrice: ").append(toIndentedString(listPrice)).append("\n");
    sb.append("    lockTTL: ").append(toIndentedString(lockTTL)).append("\n");
    sb.append("    pickupStoreInfo: ").append(toIndentedString(pickupStoreInfo)).append("\n");
    sb.append("    polygonName: ").append(toIndentedString(polygonName)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    selectedSla: ").append(toIndentedString(selectedSla)).append("\n");
    sb.append("    sellingPrice: ").append(toIndentedString(sellingPrice)).append("\n");
    sb.append("    shippingEstimate: ").append(toIndentedString(shippingEstimate)).append("\n");
    sb.append("    shippingEstimateDate: ").append(toIndentedString(shippingEstimateDate)).append("\n");
    sb.append("    shipsTo: ").append(toIndentedString(shipsTo)).append("\n");
    sb.append("    slas: ").append(toIndentedString(slas)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressId");
    openapiFields.add("deliveryChannel");
    openapiFields.add("deliveryCompany");
    openapiFields.add("deliveryIds");
    openapiFields.add("deliveryWindow");
    openapiFields.add("itemIndex");
    openapiFields.add("listPrice");
    openapiFields.add("lockTTL");
    openapiFields.add("pickupStoreInfo");
    openapiFields.add("polygonName");
    openapiFields.add("price");
    openapiFields.add("selectedSla");
    openapiFields.add("sellingPrice");
    openapiFields.add("shippingEstimate");
    openapiFields.add("shippingEstimateDate");
    openapiFields.add("shipsTo");
    openapiFields.add("slas");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("addressId");
    openapiRequiredFields.add("deliveryChannel");
    openapiRequiredFields.add("deliveryCompany");
    openapiRequiredFields.add("deliveryIds");
    openapiRequiredFields.add("deliveryWindow");
    openapiRequiredFields.add("itemIndex");
    openapiRequiredFields.add("listPrice");
    openapiRequiredFields.add("lockTTL");
    openapiRequiredFields.add("pickupStoreInfo");
    openapiRequiredFields.add("polygonName");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("selectedSla");
    openapiRequiredFields.add("sellingPrice");
    openapiRequiredFields.add("shippingEstimate");
    openapiRequiredFields.add("shippingEstimateDate");
    openapiRequiredFields.add("shipsTo");
    openapiRequiredFields.add("slas");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LogisticsInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogisticsInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogisticsInfo is not found in the empty JSON string", LogisticsInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LogisticsInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LogisticsInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LogisticsInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("addressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressId").toString()));
      }
      if (!jsonObj.get("deliveryChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryChannel").toString()));
      }
      if (!jsonObj.get("deliveryCompany").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryCompany` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryCompany").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("deliveryIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryIds` to be an array in the JSON string but got `%s`", jsonObj.get("deliveryIds").toString()));
      }

      JsonArray jsonArraydeliveryIds = jsonObj.getAsJsonArray("deliveryIds");
      // validate the required field `deliveryIds` (array)
      for (int i = 0; i < jsonArraydeliveryIds.size(); i++) {
        DeliveryId.validateJsonElement(jsonArraydeliveryIds.get(i));
      };
      if ((jsonObj.get("deliveryWindow") != null && !jsonObj.get("deliveryWindow").isJsonNull()) && !jsonObj.get("deliveryWindow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryWindow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryWindow").toString()));
      }
      if (!jsonObj.get("lockTTL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockTTL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockTTL").toString()));
      }
      // validate the required field `pickupStoreInfo`
      PickupStoreInfo.validateJsonElement(jsonObj.get("pickupStoreInfo"));
      if ((jsonObj.get("polygonName") != null && !jsonObj.get("polygonName").isJsonNull()) && !jsonObj.get("polygonName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `polygonName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("polygonName").toString()));
      }
      if (!jsonObj.get("selectedSla").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectedSla` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectedSla").toString()));
      }
      if (!jsonObj.get("shippingEstimate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingEstimate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingEstimate").toString()));
      }
      if (!jsonObj.get("shippingEstimateDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingEstimateDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingEstimateDate").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("shipsTo") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("shipsTo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipsTo` to be an array in the JSON string but got `%s`", jsonObj.get("shipsTo").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("slas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `slas` to be an array in the JSON string but got `%s`", jsonObj.get("slas").toString()));
      }

      JsonArray jsonArrayslas = jsonObj.getAsJsonArray("slas");
      // validate the required field `slas` (array)
      for (int i = 0; i < jsonArrayslas.size(); i++) {
        Sla.validateJsonElement(jsonArrayslas.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogisticsInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogisticsInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogisticsInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogisticsInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<LogisticsInfo>() {
           @Override
           public void write(JsonWriter out, LogisticsInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LogisticsInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LogisticsInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LogisticsInfo
   * @throws IOException if the JSON string is invalid with respect to LogisticsInfo
   */
  public static LogisticsInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogisticsInfo.class);
  }

  /**
   * Convert an instance of LogisticsInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

