/*
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.Facets;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TotalValue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:00.631491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TotalValue {
  public static final String SERIALIZED_NAME_COUNT = "Count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_FACETS = "Facets";
  @SerializedName(SERIALIZED_NAME_FACETS)
  private Facets facets;

  public static final String SERIALIZED_NAME_MAX = "Max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Integer max;

  public static final String SERIALIZED_NAME_MEAN = "Mean";
  @SerializedName(SERIALIZED_NAME_MEAN)
  private BigDecimal mean;

  public static final String SERIALIZED_NAME_MIN = "Min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private Integer min;

  public static final String SERIALIZED_NAME_MISSING = "Missing";
  @SerializedName(SERIALIZED_NAME_MISSING)
  private Integer missing;

  public static final String SERIALIZED_NAME_STD_DEV = "StdDev";
  @SerializedName(SERIALIZED_NAME_STD_DEV)
  private BigDecimal stdDev;

  public static final String SERIALIZED_NAME_SUM = "Sum";
  @SerializedName(SERIALIZED_NAME_SUM)
  private Integer sum;

  public static final String SERIALIZED_NAME_SUM_OF_SQUARES = "SumOfSquares";
  @SerializedName(SERIALIZED_NAME_SUM_OF_SQUARES)
  private Long sumOfSquares;

  public TotalValue() {
  }

  public TotalValue count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Value count.
   * @return count
   */
  @javax.annotation.Nonnull
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public TotalValue facets(Facets facets) {
    this.facets = facets;
    return this;
  }

  /**
   * Get facets
   * @return facets
   */
  @javax.annotation.Nonnull
  public Facets getFacets() {
    return facets;
  }

  public void setFacets(Facets facets) {
    this.facets = facets;
  }


  public TotalValue max(Integer max) {
    this.max = max;
    return this;
  }

  /**
   * Value maximum.
   * @return max
   */
  @javax.annotation.Nonnull
  public Integer getMax() {
    return max;
  }

  public void setMax(Integer max) {
    this.max = max;
  }


  public TotalValue mean(BigDecimal mean) {
    this.mean = mean;
    return this;
  }

  /**
   * Value mean.
   * @return mean
   */
  @javax.annotation.Nonnull
  public BigDecimal getMean() {
    return mean;
  }

  public void setMean(BigDecimal mean) {
    this.mean = mean;
  }


  public TotalValue min(Integer min) {
    this.min = min;
    return this;
  }

  /**
   * Value minimum.
   * @return min
   */
  @javax.annotation.Nonnull
  public Integer getMin() {
    return min;
  }

  public void setMin(Integer min) {
    this.min = min;
  }


  public TotalValue missing(Integer missing) {
    this.missing = missing;
    return this;
  }

  /**
   * Missing values.
   * @return missing
   */
  @javax.annotation.Nonnull
  public Integer getMissing() {
    return missing;
  }

  public void setMissing(Integer missing) {
    this.missing = missing;
  }


  public TotalValue stdDev(BigDecimal stdDev) {
    this.stdDev = stdDev;
    return this;
  }

  /**
   * Values standard deviation.
   * @return stdDev
   */
  @javax.annotation.Nonnull
  public BigDecimal getStdDev() {
    return stdDev;
  }

  public void setStdDev(BigDecimal stdDev) {
    this.stdDev = stdDev;
  }


  public TotalValue sum(Integer sum) {
    this.sum = sum;
    return this;
  }

  /**
   * Values sum.
   * @return sum
   */
  @javax.annotation.Nonnull
  public Integer getSum() {
    return sum;
  }

  public void setSum(Integer sum) {
    this.sum = sum;
  }


  public TotalValue sumOfSquares(Long sumOfSquares) {
    this.sumOfSquares = sumOfSquares;
    return this;
  }

  /**
   * Values sum of squares
   * @return sumOfSquares
   */
  @javax.annotation.Nonnull
  public Long getSumOfSquares() {
    return sumOfSquares;
  }

  public void setSumOfSquares(Long sumOfSquares) {
    this.sumOfSquares = sumOfSquares;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TotalValue totalValue = (TotalValue) o;
    return Objects.equals(this.count, totalValue.count) &&
        Objects.equals(this.facets, totalValue.facets) &&
        Objects.equals(this.max, totalValue.max) &&
        Objects.equals(this.mean, totalValue.mean) &&
        Objects.equals(this.min, totalValue.min) &&
        Objects.equals(this.missing, totalValue.missing) &&
        Objects.equals(this.stdDev, totalValue.stdDev) &&
        Objects.equals(this.sum, totalValue.sum) &&
        Objects.equals(this.sumOfSquares, totalValue.sumOfSquares);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, facets, max, mean, min, missing, stdDev, sum, sumOfSquares);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TotalValue {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    facets: ").append(toIndentedString(facets)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    mean: ").append(toIndentedString(mean)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    missing: ").append(toIndentedString(missing)).append("\n");
    sb.append("    stdDev: ").append(toIndentedString(stdDev)).append("\n");
    sb.append("    sum: ").append(toIndentedString(sum)).append("\n");
    sb.append("    sumOfSquares: ").append(toIndentedString(sumOfSquares)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Count");
    openapiFields.add("Facets");
    openapiFields.add("Max");
    openapiFields.add("Mean");
    openapiFields.add("Min");
    openapiFields.add("Missing");
    openapiFields.add("StdDev");
    openapiFields.add("Sum");
    openapiFields.add("SumOfSquares");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Count");
    openapiRequiredFields.add("Facets");
    openapiRequiredFields.add("Max");
    openapiRequiredFields.add("Mean");
    openapiRequiredFields.add("Min");
    openapiRequiredFields.add("Missing");
    openapiRequiredFields.add("StdDev");
    openapiRequiredFields.add("Sum");
    openapiRequiredFields.add("SumOfSquares");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TotalValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TotalValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TotalValue is not found in the empty JSON string", TotalValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TotalValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TotalValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TotalValue.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Facets`
      Facets.validateJsonElement(jsonObj.get("Facets"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TotalValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TotalValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TotalValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TotalValue.class));

       return (TypeAdapter<T>) new TypeAdapter<TotalValue>() {
           @Override
           public void write(JsonWriter out, TotalValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TotalValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TotalValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TotalValue
   * @throws IOException if the JSON string is invalid with respect to TotalValue
   */
  public static TotalValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TotalValue.class);
  }

  /**
   * Convert an instance of TotalValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

