/*
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PickupStoreInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:00.631491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PickupStoreInfo {
  public static final String SERIALIZED_NAME_ADDITIONAL_INFO = "additionalInfo";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFO)
  private String additionalInfo;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_DOCK_ID = "dockId";
  @SerializedName(SERIALIZED_NAME_DOCK_ID)
  private String dockId;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_IS_PICKUP_STORE = "isPickupStore";
  @SerializedName(SERIALIZED_NAME_IS_PICKUP_STORE)
  private Boolean isPickupStore;

  public PickupStoreInfo() {
  }

  public PickupStoreInfo additionalInfo(String additionalInfo) {
    this.additionalInfo = additionalInfo;
    return this;
  }

  /**
   * Pickup additional information.
   * @return additionalInfo
   */
  @javax.annotation.Nullable
  public String getAdditionalInfo() {
    return additionalInfo;
  }

  public void setAdditionalInfo(String additionalInfo) {
    this.additionalInfo = additionalInfo;
  }


  public PickupStoreInfo address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Pickup address.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public PickupStoreInfo dockId(String dockId) {
    this.dockId = dockId;
    return this;
  }

  /**
   * Pickup dock ID.
   * @return dockId
   */
  @javax.annotation.Nullable
  public String getDockId() {
    return dockId;
  }

  public void setDockId(String dockId) {
    this.dockId = dockId;
  }


  public PickupStoreInfo friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Pickup friendly name.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public PickupStoreInfo isPickupStore(Boolean isPickupStore) {
    this.isPickupStore = isPickupStore;
    return this;
  }

  /**
   * Indicates whether it is pickup store.
   * @return isPickupStore
   */
  @javax.annotation.Nonnull
  public Boolean getIsPickupStore() {
    return isPickupStore;
  }

  public void setIsPickupStore(Boolean isPickupStore) {
    this.isPickupStore = isPickupStore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PickupStoreInfo pickupStoreInfo = (PickupStoreInfo) o;
    return Objects.equals(this.additionalInfo, pickupStoreInfo.additionalInfo) &&
        Objects.equals(this.address, pickupStoreInfo.address) &&
        Objects.equals(this.dockId, pickupStoreInfo.dockId) &&
        Objects.equals(this.friendlyName, pickupStoreInfo.friendlyName) &&
        Objects.equals(this.isPickupStore, pickupStoreInfo.isPickupStore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalInfo, address, dockId, friendlyName, isPickupStore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PickupStoreInfo {\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    dockId: ").append(toIndentedString(dockId)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    isPickupStore: ").append(toIndentedString(isPickupStore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalInfo");
    openapiFields.add("address");
    openapiFields.add("dockId");
    openapiFields.add("friendlyName");
    openapiFields.add("isPickupStore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("additionalInfo");
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("dockId");
    openapiRequiredFields.add("friendlyName");
    openapiRequiredFields.add("isPickupStore");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PickupStoreInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PickupStoreInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PickupStoreInfo is not found in the empty JSON string", PickupStoreInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PickupStoreInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PickupStoreInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PickupStoreInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalInfo") != null && !jsonObj.get("additionalInfo").isJsonNull()) && !jsonObj.get("additionalInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalInfo").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("dockId") != null && !jsonObj.get("dockId").isJsonNull()) && !jsonObj.get("dockId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockId").toString()));
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PickupStoreInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PickupStoreInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PickupStoreInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PickupStoreInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PickupStoreInfo>() {
           @Override
           public void write(JsonWriter out, PickupStoreInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PickupStoreInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PickupStoreInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PickupStoreInfo
   * @throws IOException if the JSON string is invalid with respect to PickupStoreInfo
   */
  public static PickupStoreInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PickupStoreInfo.class);
  }

  /**
   * Convert an instance of PickupStoreInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

