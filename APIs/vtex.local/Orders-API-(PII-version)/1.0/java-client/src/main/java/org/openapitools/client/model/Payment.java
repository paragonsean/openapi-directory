/*
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Payment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:00.631491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Payment {
  public static final String SERIALIZED_NAME_CARD_HOLDER = "cardHolder";
  @SerializedName(SERIALIZED_NAME_CARD_HOLDER)
  private String cardHolder;

  public static final String SERIALIZED_NAME_CARD_NUMBER = "cardNumber";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER)
  private String cardNumber;

  public static final String SERIALIZED_NAME_CONNECTOR_RESPONSES = "connectorResponses";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_RESPONSES)
  private Object connectorResponses;

  public static final String SERIALIZED_NAME_CVV2 = "cvv2";
  @SerializedName(SERIALIZED_NAME_CVV2)
  private String cvv2;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private String dueDate;

  public static final String SERIALIZED_NAME_EXPIRE_MONTH = "expireMonth";
  @SerializedName(SERIALIZED_NAME_EXPIRE_MONTH)
  private String expireMonth;

  public static final String SERIALIZED_NAME_EXPIRE_YEAR = "expireYear";
  @SerializedName(SERIALIZED_NAME_EXPIRE_YEAR)
  private String expireYear;

  public static final String SERIALIZED_NAME_FIRST_DIGITS = "firstDigits";
  @SerializedName(SERIALIZED_NAME_FIRST_DIGITS)
  private String firstDigits;

  public static final String SERIALIZED_NAME_GIFT_CARD_CAPTION = "giftCardCaption";
  @SerializedName(SERIALIZED_NAME_GIFT_CARD_CAPTION)
  private String giftCardCaption;

  public static final String SERIALIZED_NAME_GIFT_CARD_ID = "giftCardId";
  @SerializedName(SERIALIZED_NAME_GIFT_CARD_ID)
  private String giftCardId;

  public static final String SERIALIZED_NAME_GIFT_CARD_NAME = "giftCardName";
  @SerializedName(SERIALIZED_NAME_GIFT_CARD_NAME)
  private String giftCardName;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTALLMENTS = "installments";
  @SerializedName(SERIALIZED_NAME_INSTALLMENTS)
  private Integer installments;

  public static final String SERIALIZED_NAME_LAST_DIGITS = "lastDigits";
  @SerializedName(SERIALIZED_NAME_LAST_DIGITS)
  private String lastDigits;

  public static final String SERIALIZED_NAME_PAYMENT_SYSTEM = "paymentSystem";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SYSTEM)
  private String paymentSystem;

  public static final String SERIALIZED_NAME_PAYMENT_SYSTEM_NAME = "paymentSystemName";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SYSTEM_NAME)
  private String paymentSystemName;

  public static final String SERIALIZED_NAME_REDEMPTION_CODE = "redemptionCode";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_CODE)
  private String redemptionCode;

  public static final String SERIALIZED_NAME_REFERENCE_VALUE = "referenceValue";
  @SerializedName(SERIALIZED_NAME_REFERENCE_VALUE)
  private Integer referenceValue;

  public static final String SERIALIZED_NAME_TID = "tid";
  @SerializedName(SERIALIZED_NAME_TID)
  private String tid;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Integer value;

  public Payment() {
  }

  public Payment cardHolder(String cardHolder) {
    this.cardHolder = cardHolder;
    return this;
  }

  /**
   * Card holder
   * @return cardHolder
   */
  @javax.annotation.Nullable
  public String getCardHolder() {
    return cardHolder;
  }

  public void setCardHolder(String cardHolder) {
    this.cardHolder = cardHolder;
  }


  public Payment cardNumber(String cardNumber) {
    this.cardNumber = cardNumber;
    return this;
  }

  /**
   * Card number.
   * @return cardNumber
   */
  @javax.annotation.Nullable
  public String getCardNumber() {
    return cardNumber;
  }

  public void setCardNumber(String cardNumber) {
    this.cardNumber = cardNumber;
  }


  public Payment connectorResponses(Object connectorResponses) {
    this.connectorResponses = connectorResponses;
    return this;
  }

  /**
   * Connector responses.
   * @return connectorResponses
   */
  @javax.annotation.Nonnull
  public Object getConnectorResponses() {
    return connectorResponses;
  }

  public void setConnectorResponses(Object connectorResponses) {
    this.connectorResponses = connectorResponses;
  }


  public Payment cvv2(String cvv2) {
    this.cvv2 = cvv2;
    return this;
  }

  /**
   * Card verification code.
   * @return cvv2
   */
  @javax.annotation.Nullable
  public String getCvv2() {
    return cvv2;
  }

  public void setCvv2(String cvv2) {
    this.cvv2 = cvv2;
  }


  public Payment dueDate(String dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * Due date.
   * @return dueDate
   */
  @javax.annotation.Nonnull
  public String getDueDate() {
    return dueDate;
  }

  public void setDueDate(String dueDate) {
    this.dueDate = dueDate;
  }


  public Payment expireMonth(String expireMonth) {
    this.expireMonth = expireMonth;
    return this;
  }

  /**
   * Card expiration month.
   * @return expireMonth
   */
  @javax.annotation.Nullable
  public String getExpireMonth() {
    return expireMonth;
  }

  public void setExpireMonth(String expireMonth) {
    this.expireMonth = expireMonth;
  }


  public Payment expireYear(String expireYear) {
    this.expireYear = expireYear;
    return this;
  }

  /**
   * Card expiration year.
   * @return expireYear
   */
  @javax.annotation.Nullable
  public String getExpireYear() {
    return expireYear;
  }

  public void setExpireYear(String expireYear) {
    this.expireYear = expireYear;
  }


  public Payment firstDigits(String firstDigits) {
    this.firstDigits = firstDigits;
    return this;
  }

  /**
   * Card first digits.
   * @return firstDigits
   */
  @javax.annotation.Nullable
  public String getFirstDigits() {
    return firstDigits;
  }

  public void setFirstDigits(String firstDigits) {
    this.firstDigits = firstDigits;
  }


  public Payment giftCardCaption(String giftCardCaption) {
    this.giftCardCaption = giftCardCaption;
    return this;
  }

  /**
   * Gift card caption.
   * @return giftCardCaption
   */
  @javax.annotation.Nullable
  public String getGiftCardCaption() {
    return giftCardCaption;
  }

  public void setGiftCardCaption(String giftCardCaption) {
    this.giftCardCaption = giftCardCaption;
  }


  public Payment giftCardId(String giftCardId) {
    this.giftCardId = giftCardId;
    return this;
  }

  /**
   * Gift card ID.
   * @return giftCardId
   */
  @javax.annotation.Nullable
  public String getGiftCardId() {
    return giftCardId;
  }

  public void setGiftCardId(String giftCardId) {
    this.giftCardId = giftCardId;
  }


  public Payment giftCardName(String giftCardName) {
    this.giftCardName = giftCardName;
    return this;
  }

  /**
   * Gift card name.
   * @return giftCardName
   */
  @javax.annotation.Nullable
  public String getGiftCardName() {
    return giftCardName;
  }

  public void setGiftCardName(String giftCardName) {
    this.giftCardName = giftCardName;
  }


  public Payment group(String group) {
    this.group = group;
    return this;
  }

  /**
   * Payment group.
   * @return group
   */
  @javax.annotation.Nonnull
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }


  public Payment id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Payment ID.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Payment installments(Integer installments) {
    this.installments = installments;
    return this;
  }

  /**
   * Payment installments.
   * @return installments
   */
  @javax.annotation.Nonnull
  public Integer getInstallments() {
    return installments;
  }

  public void setInstallments(Integer installments) {
    this.installments = installments;
  }


  public Payment lastDigits(String lastDigits) {
    this.lastDigits = lastDigits;
    return this;
  }

  /**
   * Card last digits.
   * @return lastDigits
   */
  @javax.annotation.Nullable
  public String getLastDigits() {
    return lastDigits;
  }

  public void setLastDigits(String lastDigits) {
    this.lastDigits = lastDigits;
  }


  public Payment paymentSystem(String paymentSystem) {
    this.paymentSystem = paymentSystem;
    return this;
  }

  /**
   * Payment system.
   * @return paymentSystem
   */
  @javax.annotation.Nonnull
  public String getPaymentSystem() {
    return paymentSystem;
  }

  public void setPaymentSystem(String paymentSystem) {
    this.paymentSystem = paymentSystem;
  }


  public Payment paymentSystemName(String paymentSystemName) {
    this.paymentSystemName = paymentSystemName;
    return this;
  }

  /**
   * Payment system name.
   * @return paymentSystemName
   */
  @javax.annotation.Nonnull
  public String getPaymentSystemName() {
    return paymentSystemName;
  }

  public void setPaymentSystemName(String paymentSystemName) {
    this.paymentSystemName = paymentSystemName;
  }


  public Payment redemptionCode(String redemptionCode) {
    this.redemptionCode = redemptionCode;
    return this;
  }

  /**
   * Redemption code.
   * @return redemptionCode
   */
  @javax.annotation.Nullable
  public String getRedemptionCode() {
    return redemptionCode;
  }

  public void setRedemptionCode(String redemptionCode) {
    this.redemptionCode = redemptionCode;
  }


  public Payment referenceValue(Integer referenceValue) {
    this.referenceValue = referenceValue;
    return this;
  }

  /**
   * Reference value for interest calculation in cents.
   * @return referenceValue
   */
  @javax.annotation.Nonnull
  public Integer getReferenceValue() {
    return referenceValue;
  }

  public void setReferenceValue(Integer referenceValue) {
    this.referenceValue = referenceValue;
  }


  public Payment tid(String tid) {
    this.tid = tid;
    return this;
  }

  /**
   * Payment TID.
   * @return tid
   */
  @javax.annotation.Nullable
  public String getTid() {
    return tid;
  }

  public void setTid(String tid) {
    this.tid = tid;
  }


  public Payment url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Payment URL.
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Payment value(Integer value) {
    this.value = value;
    return this;
  }

  /**
   * Payment value in cents.
   * @return value
   */
  @javax.annotation.Nonnull
  public Integer getValue() {
    return value;
  }

  public void setValue(Integer value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Payment payment = (Payment) o;
    return Objects.equals(this.cardHolder, payment.cardHolder) &&
        Objects.equals(this.cardNumber, payment.cardNumber) &&
        Objects.equals(this.connectorResponses, payment.connectorResponses) &&
        Objects.equals(this.cvv2, payment.cvv2) &&
        Objects.equals(this.dueDate, payment.dueDate) &&
        Objects.equals(this.expireMonth, payment.expireMonth) &&
        Objects.equals(this.expireYear, payment.expireYear) &&
        Objects.equals(this.firstDigits, payment.firstDigits) &&
        Objects.equals(this.giftCardCaption, payment.giftCardCaption) &&
        Objects.equals(this.giftCardId, payment.giftCardId) &&
        Objects.equals(this.giftCardName, payment.giftCardName) &&
        Objects.equals(this.group, payment.group) &&
        Objects.equals(this.id, payment.id) &&
        Objects.equals(this.installments, payment.installments) &&
        Objects.equals(this.lastDigits, payment.lastDigits) &&
        Objects.equals(this.paymentSystem, payment.paymentSystem) &&
        Objects.equals(this.paymentSystemName, payment.paymentSystemName) &&
        Objects.equals(this.redemptionCode, payment.redemptionCode) &&
        Objects.equals(this.referenceValue, payment.referenceValue) &&
        Objects.equals(this.tid, payment.tid) &&
        Objects.equals(this.url, payment.url) &&
        Objects.equals(this.value, payment.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardHolder, cardNumber, connectorResponses, cvv2, dueDate, expireMonth, expireYear, firstDigits, giftCardCaption, giftCardId, giftCardName, group, id, installments, lastDigits, paymentSystem, paymentSystemName, redemptionCode, referenceValue, tid, url, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Payment {\n");
    sb.append("    cardHolder: ").append(toIndentedString(cardHolder)).append("\n");
    sb.append("    cardNumber: ").append(toIndentedString(cardNumber)).append("\n");
    sb.append("    connectorResponses: ").append(toIndentedString(connectorResponses)).append("\n");
    sb.append("    cvv2: ").append(toIndentedString(cvv2)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    expireMonth: ").append(toIndentedString(expireMonth)).append("\n");
    sb.append("    expireYear: ").append(toIndentedString(expireYear)).append("\n");
    sb.append("    firstDigits: ").append(toIndentedString(firstDigits)).append("\n");
    sb.append("    giftCardCaption: ").append(toIndentedString(giftCardCaption)).append("\n");
    sb.append("    giftCardId: ").append(toIndentedString(giftCardId)).append("\n");
    sb.append("    giftCardName: ").append(toIndentedString(giftCardName)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    installments: ").append(toIndentedString(installments)).append("\n");
    sb.append("    lastDigits: ").append(toIndentedString(lastDigits)).append("\n");
    sb.append("    paymentSystem: ").append(toIndentedString(paymentSystem)).append("\n");
    sb.append("    paymentSystemName: ").append(toIndentedString(paymentSystemName)).append("\n");
    sb.append("    redemptionCode: ").append(toIndentedString(redemptionCode)).append("\n");
    sb.append("    referenceValue: ").append(toIndentedString(referenceValue)).append("\n");
    sb.append("    tid: ").append(toIndentedString(tid)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cardHolder");
    openapiFields.add("cardNumber");
    openapiFields.add("connectorResponses");
    openapiFields.add("cvv2");
    openapiFields.add("dueDate");
    openapiFields.add("expireMonth");
    openapiFields.add("expireYear");
    openapiFields.add("firstDigits");
    openapiFields.add("giftCardCaption");
    openapiFields.add("giftCardId");
    openapiFields.add("giftCardName");
    openapiFields.add("group");
    openapiFields.add("id");
    openapiFields.add("installments");
    openapiFields.add("lastDigits");
    openapiFields.add("paymentSystem");
    openapiFields.add("paymentSystemName");
    openapiFields.add("redemptionCode");
    openapiFields.add("referenceValue");
    openapiFields.add("tid");
    openapiFields.add("url");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cardHolder");
    openapiRequiredFields.add("cardNumber");
    openapiRequiredFields.add("connectorResponses");
    openapiRequiredFields.add("cvv2");
    openapiRequiredFields.add("dueDate");
    openapiRequiredFields.add("expireMonth");
    openapiRequiredFields.add("expireYear");
    openapiRequiredFields.add("firstDigits");
    openapiRequiredFields.add("giftCardCaption");
    openapiRequiredFields.add("giftCardId");
    openapiRequiredFields.add("giftCardName");
    openapiRequiredFields.add("group");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("installments");
    openapiRequiredFields.add("lastDigits");
    openapiRequiredFields.add("paymentSystem");
    openapiRequiredFields.add("paymentSystemName");
    openapiRequiredFields.add("redemptionCode");
    openapiRequiredFields.add("referenceValue");
    openapiRequiredFields.add("tid");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Payment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Payment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Payment is not found in the empty JSON string", Payment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Payment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Payment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Payment.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cardHolder") != null && !jsonObj.get("cardHolder").isJsonNull()) && !jsonObj.get("cardHolder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardHolder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardHolder").toString()));
      }
      if ((jsonObj.get("cardNumber") != null && !jsonObj.get("cardNumber").isJsonNull()) && !jsonObj.get("cardNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardNumber").toString()));
      }
      if ((jsonObj.get("cvv2") != null && !jsonObj.get("cvv2").isJsonNull()) && !jsonObj.get("cvv2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cvv2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cvv2").toString()));
      }
      if (!jsonObj.get("dueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dueDate").toString()));
      }
      if ((jsonObj.get("expireMonth") != null && !jsonObj.get("expireMonth").isJsonNull()) && !jsonObj.get("expireMonth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireMonth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireMonth").toString()));
      }
      if ((jsonObj.get("expireYear") != null && !jsonObj.get("expireYear").isJsonNull()) && !jsonObj.get("expireYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireYear").toString()));
      }
      if ((jsonObj.get("firstDigits") != null && !jsonObj.get("firstDigits").isJsonNull()) && !jsonObj.get("firstDigits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstDigits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstDigits").toString()));
      }
      if ((jsonObj.get("giftCardCaption") != null && !jsonObj.get("giftCardCaption").isJsonNull()) && !jsonObj.get("giftCardCaption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `giftCardCaption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("giftCardCaption").toString()));
      }
      if ((jsonObj.get("giftCardId") != null && !jsonObj.get("giftCardId").isJsonNull()) && !jsonObj.get("giftCardId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `giftCardId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("giftCardId").toString()));
      }
      if ((jsonObj.get("giftCardName") != null && !jsonObj.get("giftCardName").isJsonNull()) && !jsonObj.get("giftCardName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `giftCardName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("giftCardName").toString()));
      }
      if (!jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("lastDigits") != null && !jsonObj.get("lastDigits").isJsonNull()) && !jsonObj.get("lastDigits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastDigits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastDigits").toString()));
      }
      if (!jsonObj.get("paymentSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentSystem").toString()));
      }
      if (!jsonObj.get("paymentSystemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentSystemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentSystemName").toString()));
      }
      if ((jsonObj.get("redemptionCode") != null && !jsonObj.get("redemptionCode").isJsonNull()) && !jsonObj.get("redemptionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redemptionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redemptionCode").toString()));
      }
      if ((jsonObj.get("tid") != null && !jsonObj.get("tid").isJsonNull()) && !jsonObj.get("tid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tid").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Payment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Payment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Payment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Payment.class));

       return (TypeAdapter<T>) new TypeAdapter<Payment>() {
           @Override
           public void write(JsonWriter out, Payment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Payment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Payment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Payment
   * @throws IOException if the JSON string is invalid with respect to Payment
   */
  public static Payment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Payment.class);
  }

  /**
   * Convert an instance of Payment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

