/*
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ClientProfileData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:00.631491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClientProfileData {
  public static final String SERIALIZED_NAME_CORPORATE_DOCUMENT = "corporateDocument";
  @SerializedName(SERIALIZED_NAME_CORPORATE_DOCUMENT)
  private String corporateDocument;

  public static final String SERIALIZED_NAME_CORPORATE_NAME = "corporateName";
  @SerializedName(SERIALIZED_NAME_CORPORATE_NAME)
  private String corporateName;

  public static final String SERIALIZED_NAME_CORPORATE_PHONE = "corporatePhone";
  @SerializedName(SERIALIZED_NAME_CORPORATE_PHONE)
  private String corporatePhone;

  public static final String SERIALIZED_NAME_CUSTOMER_CLASS = "customerClass";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_CLASS)
  private String customerClass;

  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private String document;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "documentType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private String documentType;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_CORPORATE = "isCorporate";
  @SerializedName(SERIALIZED_NAME_IS_CORPORATE)
  private Boolean isCorporate;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_STATE_INSCRIPTION = "stateInscription";
  @SerializedName(SERIALIZED_NAME_STATE_INSCRIPTION)
  private String stateInscription;

  public static final String SERIALIZED_NAME_TRADE_NAME = "tradeName";
  @SerializedName(SERIALIZED_NAME_TRADE_NAME)
  private String tradeName;

  public static final String SERIALIZED_NAME_USER_PROFILE_ID = "userProfileId";
  @SerializedName(SERIALIZED_NAME_USER_PROFILE_ID)
  private String userProfileId;

  public ClientProfileData() {
  }

  public ClientProfileData corporateDocument(String corporateDocument) {
    this.corporateDocument = corporateDocument;
    return this;
  }

  /**
   * Company document, in case client is corporate.
   * @return corporateDocument
   */
  @javax.annotation.Nullable
  public String getCorporateDocument() {
    return corporateDocument;
  }

  public void setCorporateDocument(String corporateDocument) {
    this.corporateDocument = corporateDocument;
  }


  public ClientProfileData corporateName(String corporateName) {
    this.corporateName = corporateName;
    return this;
  }

  /**
   * Company name, in case client is corporate.
   * @return corporateName
   */
  @javax.annotation.Nullable
  public String getCorporateName() {
    return corporateName;
  }

  public void setCorporateName(String corporateName) {
    this.corporateName = corporateName;
  }


  public ClientProfileData corporatePhone(String corporatePhone) {
    this.corporatePhone = corporatePhone;
    return this;
  }

  /**
   * Company telephone number, in case client is corporate.
   * @return corporatePhone
   */
  @javax.annotation.Nullable
  public String getCorporatePhone() {
    return corporatePhone;
  }

  public void setCorporatePhone(String corporatePhone) {
    this.corporatePhone = corporatePhone;
  }


  public ClientProfileData customerClass(String customerClass) {
    this.customerClass = customerClass;
    return this;
  }

  /**
   * Customer class.
   * @return customerClass
   */
  @javax.annotation.Nullable
  public String getCustomerClass() {
    return customerClass;
  }

  public void setCustomerClass(String customerClass) {
    this.customerClass = customerClass;
  }


  public ClientProfileData document(String document) {
    this.document = document;
    return this;
  }

  /**
   * Client document.
   * @return document
   */
  @javax.annotation.Nonnull
  public String getDocument() {
    return document;
  }

  public void setDocument(String document) {
    this.document = document;
  }


  public ClientProfileData documentType(String documentType) {
    this.documentType = documentType;
    return this;
  }

  /**
   * Client document type.
   * @return documentType
   */
  @javax.annotation.Nonnull
  public String getDocumentType() {
    return documentType;
  }

  public void setDocumentType(String documentType) {
    this.documentType = documentType;
  }


  public ClientProfileData email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Client email address.
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public ClientProfileData firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Client first name.
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public ClientProfileData id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Client ID.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ClientProfileData isCorporate(Boolean isCorporate) {
    this.isCorporate = isCorporate;
    return this;
  }

  /**
   * Indicates whether client is corporate.
   * @return isCorporate
   */
  @javax.annotation.Nonnull
  public Boolean getIsCorporate() {
    return isCorporate;
  }

  public void setIsCorporate(Boolean isCorporate) {
    this.isCorporate = isCorporate;
  }


  public ClientProfileData lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Client last name.
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public ClientProfileData phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Client telephone number.
   * @return phone
   */
  @javax.annotation.Nonnull
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public ClientProfileData stateInscription(String stateInscription) {
    this.stateInscription = stateInscription;
    return this;
  }

  /**
   * Company state inscription, in case client is corporate.
   * @return stateInscription
   */
  @javax.annotation.Nullable
  public String getStateInscription() {
    return stateInscription;
  }

  public void setStateInscription(String stateInscription) {
    this.stateInscription = stateInscription;
  }


  public ClientProfileData tradeName(String tradeName) {
    this.tradeName = tradeName;
    return this;
  }

  /**
   * Company trade name, in case client is corporate.
   * @return tradeName
   */
  @javax.annotation.Nullable
  public String getTradeName() {
    return tradeName;
  }

  public void setTradeName(String tradeName) {
    this.tradeName = tradeName;
  }


  public ClientProfileData userProfileId(String userProfileId) {
    this.userProfileId = userProfileId;
    return this;
  }

  /**
   * User profile ID.
   * @return userProfileId
   */
  @javax.annotation.Nonnull
  public String getUserProfileId() {
    return userProfileId;
  }

  public void setUserProfileId(String userProfileId) {
    this.userProfileId = userProfileId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientProfileData clientProfileData = (ClientProfileData) o;
    return Objects.equals(this.corporateDocument, clientProfileData.corporateDocument) &&
        Objects.equals(this.corporateName, clientProfileData.corporateName) &&
        Objects.equals(this.corporatePhone, clientProfileData.corporatePhone) &&
        Objects.equals(this.customerClass, clientProfileData.customerClass) &&
        Objects.equals(this.document, clientProfileData.document) &&
        Objects.equals(this.documentType, clientProfileData.documentType) &&
        Objects.equals(this.email, clientProfileData.email) &&
        Objects.equals(this.firstName, clientProfileData.firstName) &&
        Objects.equals(this.id, clientProfileData.id) &&
        Objects.equals(this.isCorporate, clientProfileData.isCorporate) &&
        Objects.equals(this.lastName, clientProfileData.lastName) &&
        Objects.equals(this.phone, clientProfileData.phone) &&
        Objects.equals(this.stateInscription, clientProfileData.stateInscription) &&
        Objects.equals(this.tradeName, clientProfileData.tradeName) &&
        Objects.equals(this.userProfileId, clientProfileData.userProfileId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(corporateDocument, corporateName, corporatePhone, customerClass, document, documentType, email, firstName, id, isCorporate, lastName, phone, stateInscription, tradeName, userProfileId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientProfileData {\n");
    sb.append("    corporateDocument: ").append(toIndentedString(corporateDocument)).append("\n");
    sb.append("    corporateName: ").append(toIndentedString(corporateName)).append("\n");
    sb.append("    corporatePhone: ").append(toIndentedString(corporatePhone)).append("\n");
    sb.append("    customerClass: ").append(toIndentedString(customerClass)).append("\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isCorporate: ").append(toIndentedString(isCorporate)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    stateInscription: ").append(toIndentedString(stateInscription)).append("\n");
    sb.append("    tradeName: ").append(toIndentedString(tradeName)).append("\n");
    sb.append("    userProfileId: ").append(toIndentedString(userProfileId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("corporateDocument");
    openapiFields.add("corporateName");
    openapiFields.add("corporatePhone");
    openapiFields.add("customerClass");
    openapiFields.add("document");
    openapiFields.add("documentType");
    openapiFields.add("email");
    openapiFields.add("firstName");
    openapiFields.add("id");
    openapiFields.add("isCorporate");
    openapiFields.add("lastName");
    openapiFields.add("phone");
    openapiFields.add("stateInscription");
    openapiFields.add("tradeName");
    openapiFields.add("userProfileId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("corporateDocument");
    openapiRequiredFields.add("corporateName");
    openapiRequiredFields.add("corporatePhone");
    openapiRequiredFields.add("customerClass");
    openapiRequiredFields.add("document");
    openapiRequiredFields.add("documentType");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isCorporate");
    openapiRequiredFields.add("lastName");
    openapiRequiredFields.add("phone");
    openapiRequiredFields.add("stateInscription");
    openapiRequiredFields.add("tradeName");
    openapiRequiredFields.add("userProfileId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClientProfileData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientProfileData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClientProfileData is not found in the empty JSON string", ClientProfileData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClientProfileData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClientProfileData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ClientProfileData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("corporateDocument") != null && !jsonObj.get("corporateDocument").isJsonNull()) && !jsonObj.get("corporateDocument").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `corporateDocument` to be a primitive type in the JSON string but got `%s`", jsonObj.get("corporateDocument").toString()));
      }
      if ((jsonObj.get("corporateName") != null && !jsonObj.get("corporateName").isJsonNull()) && !jsonObj.get("corporateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `corporateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("corporateName").toString()));
      }
      if ((jsonObj.get("corporatePhone") != null && !jsonObj.get("corporatePhone").isJsonNull()) && !jsonObj.get("corporatePhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `corporatePhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("corporatePhone").toString()));
      }
      if ((jsonObj.get("customerClass") != null && !jsonObj.get("customerClass").isJsonNull()) && !jsonObj.get("customerClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerClass").toString()));
      }
      if (!jsonObj.get("document").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document").toString()));
      }
      if (!jsonObj.get("documentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentType").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("stateInscription") != null && !jsonObj.get("stateInscription").isJsonNull()) && !jsonObj.get("stateInscription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateInscription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateInscription").toString()));
      }
      if ((jsonObj.get("tradeName") != null && !jsonObj.get("tradeName").isJsonNull()) && !jsonObj.get("tradeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tradeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tradeName").toString()));
      }
      if (!jsonObj.get("userProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userProfileId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientProfileData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientProfileData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientProfileData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientProfileData.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientProfileData>() {
           @Override
           public void write(JsonWriter out, ClientProfileData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientProfileData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClientProfileData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClientProfileData
   * @throws IOException if the JSON string is invalid with respect to ClientProfileData
   */
  public static ClientProfileData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientProfileData.class);
  }

  /**
   * Convert an instance of ClientProfileData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

