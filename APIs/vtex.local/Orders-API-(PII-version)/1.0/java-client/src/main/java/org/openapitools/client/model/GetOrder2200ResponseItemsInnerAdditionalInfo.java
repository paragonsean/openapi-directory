/*
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Additional information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:00.631491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetOrder2200ResponseItemsInnerAdditionalInfo {
  public static final String SERIALIZED_NAME_BRAND_ID = "brandId";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private String brandId;

  public static final String SERIALIZED_NAME_BRAND_NAME = "brandName";
  @SerializedName(SERIALIZED_NAME_BRAND_NAME)
  private String brandName;

  public static final String SERIALIZED_NAME_DIMENSION = "dimension";
  @SerializedName(SERIALIZED_NAME_DIMENSION)
  private String dimension;

  public static final String SERIALIZED_NAME_OFFERING_INFO = "offeringInfo";
  @SerializedName(SERIALIZED_NAME_OFFERING_INFO)
  private String offeringInfo;

  public static final String SERIALIZED_NAME_OFFERING_TYPE = "offeringType";
  @SerializedName(SERIALIZED_NAME_OFFERING_TYPE)
  private String offeringType;

  public static final String SERIALIZED_NAME_OFFERING_TYPE_ID = "offeringTypeId";
  @SerializedName(SERIALIZED_NAME_OFFERING_TYPE_ID)
  private String offeringTypeId;

  public GetOrder2200ResponseItemsInnerAdditionalInfo() {
  }

  public GetOrder2200ResponseItemsInnerAdditionalInfo brandId(String brandId) {
    this.brandId = brandId;
    return this;
  }

  /**
   * Brand ID.
   * @return brandId
   */
  @javax.annotation.Nullable
  public String getBrandId() {
    return brandId;
  }

  public void setBrandId(String brandId) {
    this.brandId = brandId;
  }


  public GetOrder2200ResponseItemsInnerAdditionalInfo brandName(String brandName) {
    this.brandName = brandName;
    return this;
  }

  /**
   * Brand name.
   * @return brandName
   */
  @javax.annotation.Nullable
  public String getBrandName() {
    return brandName;
  }

  public void setBrandName(String brandName) {
    this.brandName = brandName;
  }


  public GetOrder2200ResponseItemsInnerAdditionalInfo dimension(String dimension) {
    this.dimension = dimension;
    return this;
  }

  /**
   * Dimension.
   * @return dimension
   */
  @javax.annotation.Nullable
  public String getDimension() {
    return dimension;
  }

  public void setDimension(String dimension) {
    this.dimension = dimension;
  }


  public GetOrder2200ResponseItemsInnerAdditionalInfo offeringInfo(String offeringInfo) {
    this.offeringInfo = offeringInfo;
    return this;
  }

  /**
   * Offering information.
   * @return offeringInfo
   */
  @javax.annotation.Nullable
  public String getOfferingInfo() {
    return offeringInfo;
  }

  public void setOfferingInfo(String offeringInfo) {
    this.offeringInfo = offeringInfo;
  }


  public GetOrder2200ResponseItemsInnerAdditionalInfo offeringType(String offeringType) {
    this.offeringType = offeringType;
    return this;
  }

  /**
   * Offering type.
   * @return offeringType
   */
  @javax.annotation.Nullable
  public String getOfferingType() {
    return offeringType;
  }

  public void setOfferingType(String offeringType) {
    this.offeringType = offeringType;
  }


  public GetOrder2200ResponseItemsInnerAdditionalInfo offeringTypeId(String offeringTypeId) {
    this.offeringTypeId = offeringTypeId;
    return this;
  }

  /**
   * Offering type ID.
   * @return offeringTypeId
   */
  @javax.annotation.Nullable
  public String getOfferingTypeId() {
    return offeringTypeId;
  }

  public void setOfferingTypeId(String offeringTypeId) {
    this.offeringTypeId = offeringTypeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetOrder2200ResponseItemsInnerAdditionalInfo getOrder2200ResponseItemsInnerAdditionalInfo = (GetOrder2200ResponseItemsInnerAdditionalInfo) o;
    return Objects.equals(this.brandId, getOrder2200ResponseItemsInnerAdditionalInfo.brandId) &&
        Objects.equals(this.brandName, getOrder2200ResponseItemsInnerAdditionalInfo.brandName) &&
        Objects.equals(this.dimension, getOrder2200ResponseItemsInnerAdditionalInfo.dimension) &&
        Objects.equals(this.offeringInfo, getOrder2200ResponseItemsInnerAdditionalInfo.offeringInfo) &&
        Objects.equals(this.offeringType, getOrder2200ResponseItemsInnerAdditionalInfo.offeringType) &&
        Objects.equals(this.offeringTypeId, getOrder2200ResponseItemsInnerAdditionalInfo.offeringTypeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brandId, brandName, dimension, offeringInfo, offeringType, offeringTypeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetOrder2200ResponseItemsInnerAdditionalInfo {\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("    brandName: ").append(toIndentedString(brandName)).append("\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    offeringInfo: ").append(toIndentedString(offeringInfo)).append("\n");
    sb.append("    offeringType: ").append(toIndentedString(offeringType)).append("\n");
    sb.append("    offeringTypeId: ").append(toIndentedString(offeringTypeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brandId");
    openapiFields.add("brandName");
    openapiFields.add("dimension");
    openapiFields.add("offeringInfo");
    openapiFields.add("offeringType");
    openapiFields.add("offeringTypeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetOrder2200ResponseItemsInnerAdditionalInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetOrder2200ResponseItemsInnerAdditionalInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetOrder2200ResponseItemsInnerAdditionalInfo is not found in the empty JSON string", GetOrder2200ResponseItemsInnerAdditionalInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetOrder2200ResponseItemsInnerAdditionalInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetOrder2200ResponseItemsInnerAdditionalInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("brandId") != null && !jsonObj.get("brandId").isJsonNull()) && !jsonObj.get("brandId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandId").toString()));
      }
      if ((jsonObj.get("brandName") != null && !jsonObj.get("brandName").isJsonNull()) && !jsonObj.get("brandName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandName").toString()));
      }
      if ((jsonObj.get("dimension") != null && !jsonObj.get("dimension").isJsonNull()) && !jsonObj.get("dimension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dimension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dimension").toString()));
      }
      if ((jsonObj.get("offeringInfo") != null && !jsonObj.get("offeringInfo").isJsonNull()) && !jsonObj.get("offeringInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offeringInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offeringInfo").toString()));
      }
      if ((jsonObj.get("offeringType") != null && !jsonObj.get("offeringType").isJsonNull()) && !jsonObj.get("offeringType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offeringType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offeringType").toString()));
      }
      if ((jsonObj.get("offeringTypeId") != null && !jsonObj.get("offeringTypeId").isJsonNull()) && !jsonObj.get("offeringTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offeringTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offeringTypeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetOrder2200ResponseItemsInnerAdditionalInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetOrder2200ResponseItemsInnerAdditionalInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetOrder2200ResponseItemsInnerAdditionalInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetOrder2200ResponseItemsInnerAdditionalInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<GetOrder2200ResponseItemsInnerAdditionalInfo>() {
           @Override
           public void write(JsonWriter out, GetOrder2200ResponseItemsInnerAdditionalInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetOrder2200ResponseItemsInnerAdditionalInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetOrder2200ResponseItemsInnerAdditionalInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetOrder2200ResponseItemsInnerAdditionalInfo
   * @throws IOException if the JSON string is invalid with respect to GetOrder2200ResponseItemsInnerAdditionalInfo
   */
  public static GetOrder2200ResponseItemsInnerAdditionalInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetOrder2200ResponseItemsInnerAdditionalInfo.class);
  }

  /**
   * Convert an instance of GetOrder2200ResponseItemsInnerAdditionalInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

