/*
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CurrencyFormatInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:00.631491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CurrencyFormatInfo {
  public static final String SERIALIZED_NAME_CURRENCY_DECIMAL_DIGITS = "CurrencyDecimalDigits";
  @SerializedName(SERIALIZED_NAME_CURRENCY_DECIMAL_DIGITS)
  private Integer currencyDecimalDigits;

  public static final String SERIALIZED_NAME_CURRENCY_DECIMAL_SEPARATOR = "CurrencyDecimalSeparator";
  @SerializedName(SERIALIZED_NAME_CURRENCY_DECIMAL_SEPARATOR)
  private String currencyDecimalSeparator;

  public static final String SERIALIZED_NAME_CURRENCY_GROUP_SEPARATOR = "CurrencyGroupSeparator";
  @SerializedName(SERIALIZED_NAME_CURRENCY_GROUP_SEPARATOR)
  private String currencyGroupSeparator;

  public static final String SERIALIZED_NAME_CURRENCY_GROUP_SIZE = "CurrencyGroupSize";
  @SerializedName(SERIALIZED_NAME_CURRENCY_GROUP_SIZE)
  private Integer currencyGroupSize;

  public static final String SERIALIZED_NAME_STARTS_WITH_CURRENCY_SYMBOL = "StartsWithCurrencySymbol";
  @SerializedName(SERIALIZED_NAME_STARTS_WITH_CURRENCY_SYMBOL)
  private Boolean startsWithCurrencySymbol;

  public CurrencyFormatInfo() {
  }

  public CurrencyFormatInfo currencyDecimalDigits(Integer currencyDecimalDigits) {
    this.currencyDecimalDigits = currencyDecimalDigits;
    return this;
  }

  /**
   * Currency decimal digits.
   * @return currencyDecimalDigits
   */
  @javax.annotation.Nonnull
  public Integer getCurrencyDecimalDigits() {
    return currencyDecimalDigits;
  }

  public void setCurrencyDecimalDigits(Integer currencyDecimalDigits) {
    this.currencyDecimalDigits = currencyDecimalDigits;
  }


  public CurrencyFormatInfo currencyDecimalSeparator(String currencyDecimalSeparator) {
    this.currencyDecimalSeparator = currencyDecimalSeparator;
    return this;
  }

  /**
   * Currency decimal separator.
   * @return currencyDecimalSeparator
   */
  @javax.annotation.Nonnull
  public String getCurrencyDecimalSeparator() {
    return currencyDecimalSeparator;
  }

  public void setCurrencyDecimalSeparator(String currencyDecimalSeparator) {
    this.currencyDecimalSeparator = currencyDecimalSeparator;
  }


  public CurrencyFormatInfo currencyGroupSeparator(String currencyGroupSeparator) {
    this.currencyGroupSeparator = currencyGroupSeparator;
    return this;
  }

  /**
   * Currency group separator.
   * @return currencyGroupSeparator
   */
  @javax.annotation.Nonnull
  public String getCurrencyGroupSeparator() {
    return currencyGroupSeparator;
  }

  public void setCurrencyGroupSeparator(String currencyGroupSeparator) {
    this.currencyGroupSeparator = currencyGroupSeparator;
  }


  public CurrencyFormatInfo currencyGroupSize(Integer currencyGroupSize) {
    this.currencyGroupSize = currencyGroupSize;
    return this;
  }

  /**
   * Currency group size.
   * @return currencyGroupSize
   */
  @javax.annotation.Nonnull
  public Integer getCurrencyGroupSize() {
    return currencyGroupSize;
  }

  public void setCurrencyGroupSize(Integer currencyGroupSize) {
    this.currencyGroupSize = currencyGroupSize;
  }


  public CurrencyFormatInfo startsWithCurrencySymbol(Boolean startsWithCurrencySymbol) {
    this.startsWithCurrencySymbol = startsWithCurrencySymbol;
    return this;
  }

  /**
   * Indicates whether value representations start with currency symbol.
   * @return startsWithCurrencySymbol
   */
  @javax.annotation.Nonnull
  public Boolean getStartsWithCurrencySymbol() {
    return startsWithCurrencySymbol;
  }

  public void setStartsWithCurrencySymbol(Boolean startsWithCurrencySymbol) {
    this.startsWithCurrencySymbol = startsWithCurrencySymbol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrencyFormatInfo currencyFormatInfo = (CurrencyFormatInfo) o;
    return Objects.equals(this.currencyDecimalDigits, currencyFormatInfo.currencyDecimalDigits) &&
        Objects.equals(this.currencyDecimalSeparator, currencyFormatInfo.currencyDecimalSeparator) &&
        Objects.equals(this.currencyGroupSeparator, currencyFormatInfo.currencyGroupSeparator) &&
        Objects.equals(this.currencyGroupSize, currencyFormatInfo.currencyGroupSize) &&
        Objects.equals(this.startsWithCurrencySymbol, currencyFormatInfo.startsWithCurrencySymbol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyDecimalDigits, currencyDecimalSeparator, currencyGroupSeparator, currencyGroupSize, startsWithCurrencySymbol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrencyFormatInfo {\n");
    sb.append("    currencyDecimalDigits: ").append(toIndentedString(currencyDecimalDigits)).append("\n");
    sb.append("    currencyDecimalSeparator: ").append(toIndentedString(currencyDecimalSeparator)).append("\n");
    sb.append("    currencyGroupSeparator: ").append(toIndentedString(currencyGroupSeparator)).append("\n");
    sb.append("    currencyGroupSize: ").append(toIndentedString(currencyGroupSize)).append("\n");
    sb.append("    startsWithCurrencySymbol: ").append(toIndentedString(startsWithCurrencySymbol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CurrencyDecimalDigits");
    openapiFields.add("CurrencyDecimalSeparator");
    openapiFields.add("CurrencyGroupSeparator");
    openapiFields.add("CurrencyGroupSize");
    openapiFields.add("StartsWithCurrencySymbol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CurrencyDecimalDigits");
    openapiRequiredFields.add("CurrencyDecimalSeparator");
    openapiRequiredFields.add("CurrencyGroupSeparator");
    openapiRequiredFields.add("CurrencyGroupSize");
    openapiRequiredFields.add("StartsWithCurrencySymbol");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CurrencyFormatInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CurrencyFormatInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CurrencyFormatInfo is not found in the empty JSON string", CurrencyFormatInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CurrencyFormatInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CurrencyFormatInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CurrencyFormatInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("CurrencyDecimalSeparator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencyDecimalSeparator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrencyDecimalSeparator").toString()));
      }
      if (!jsonObj.get("CurrencyGroupSeparator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencyGroupSeparator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrencyGroupSeparator").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CurrencyFormatInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CurrencyFormatInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CurrencyFormatInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CurrencyFormatInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CurrencyFormatInfo>() {
           @Override
           public void write(JsonWriter out, CurrencyFormatInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CurrencyFormatInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CurrencyFormatInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CurrencyFormatInfo
   * @throws IOException if the JSON string is invalid with respect to CurrencyFormatInfo
   */
  public static CurrencyFormatInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CurrencyFormatInfo.class);
  }

  /**
   * Convert an instance of CurrencyFormatInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

