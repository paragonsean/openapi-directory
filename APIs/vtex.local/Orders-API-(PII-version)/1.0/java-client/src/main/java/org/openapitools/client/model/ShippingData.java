/*
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.LogisticsInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ShippingData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:00.631491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShippingData {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id = "shippingData";

  public static final String SERIALIZED_NAME_LOGISTICS_INFO = "logisticsInfo";
  @SerializedName(SERIALIZED_NAME_LOGISTICS_INFO)
  private List<LogisticsInfo> logisticsInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELECTED_ADDRESSES = "selectedAddresses";
  @SerializedName(SERIALIZED_NAME_SELECTED_ADDRESSES)
  private List<Address> selectedAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRACKING_HINTS = "trackingHints";
  @SerializedName(SERIALIZED_NAME_TRACKING_HINTS)
  private String trackingHints;

  public ShippingData() {
  }

  public ShippingData address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nonnull
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public ShippingData id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Field ID.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ShippingData logisticsInfo(List<LogisticsInfo> logisticsInfo) {
    this.logisticsInfo = logisticsInfo;
    return this;
  }

  public ShippingData addLogisticsInfoItem(LogisticsInfo logisticsInfoItem) {
    if (this.logisticsInfo == null) {
      this.logisticsInfo = new ArrayList<>();
    }
    this.logisticsInfo.add(logisticsInfoItem);
    return this;
  }

  /**
   * Array with logistics information of each item in the order.
   * @return logisticsInfo
   */
  @javax.annotation.Nonnull
  public List<LogisticsInfo> getLogisticsInfo() {
    return logisticsInfo;
  }

  public void setLogisticsInfo(List<LogisticsInfo> logisticsInfo) {
    this.logisticsInfo = logisticsInfo;
  }


  public ShippingData selectedAddresses(List<Address> selectedAddresses) {
    this.selectedAddresses = selectedAddresses;
    return this;
  }

  public ShippingData addSelectedAddressesItem(Address selectedAddressesItem) {
    if (this.selectedAddresses == null) {
      this.selectedAddresses = new ArrayList<>();
    }
    this.selectedAddresses.add(selectedAddressesItem);
    return this;
  }

  /**
   * Array of the selected addresses&#39; information.
   * @return selectedAddresses
   */
  @javax.annotation.Nonnull
  public List<Address> getSelectedAddresses() {
    return selectedAddresses;
  }

  public void setSelectedAddresses(List<Address> selectedAddresses) {
    this.selectedAddresses = selectedAddresses;
  }


  public ShippingData trackingHints(String trackingHints) {
    this.trackingHints = trackingHints;
    return this;
  }

  /**
   * Tracking hints.
   * @return trackingHints
   */
  @javax.annotation.Nullable
  public String getTrackingHints() {
    return trackingHints;
  }

  public void setTrackingHints(String trackingHints) {
    this.trackingHints = trackingHints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingData shippingData = (ShippingData) o;
    return Objects.equals(this.address, shippingData.address) &&
        Objects.equals(this.id, shippingData.id) &&
        Objects.equals(this.logisticsInfo, shippingData.logisticsInfo) &&
        Objects.equals(this.selectedAddresses, shippingData.selectedAddresses) &&
        Objects.equals(this.trackingHints, shippingData.trackingHints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, id, logisticsInfo, selectedAddresses, trackingHints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingData {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logisticsInfo: ").append(toIndentedString(logisticsInfo)).append("\n");
    sb.append("    selectedAddresses: ").append(toIndentedString(selectedAddresses)).append("\n");
    sb.append("    trackingHints: ").append(toIndentedString(trackingHints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("id");
    openapiFields.add("logisticsInfo");
    openapiFields.add("selectedAddresses");
    openapiFields.add("trackingHints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("logisticsInfo");
    openapiRequiredFields.add("selectedAddresses");
    openapiRequiredFields.add("trackingHints");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShippingData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShippingData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShippingData is not found in the empty JSON string", ShippingData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShippingData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShippingData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShippingData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `address`
      Address.validateJsonElement(jsonObj.get("address"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("logisticsInfo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `logisticsInfo` to be an array in the JSON string but got `%s`", jsonObj.get("logisticsInfo").toString()));
      }

      JsonArray jsonArraylogisticsInfo = jsonObj.getAsJsonArray("logisticsInfo");
      // validate the required field `logisticsInfo` (array)
      for (int i = 0; i < jsonArraylogisticsInfo.size(); i++) {
        LogisticsInfo.validateJsonElement(jsonArraylogisticsInfo.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("selectedAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectedAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("selectedAddresses").toString()));
      }

      JsonArray jsonArrayselectedAddresses = jsonObj.getAsJsonArray("selectedAddresses");
      // validate the required field `selectedAddresses` (array)
      for (int i = 0; i < jsonArrayselectedAddresses.size(); i++) {
        Address.validateJsonElement(jsonArrayselectedAddresses.get(i));
      };
      if ((jsonObj.get("trackingHints") != null && !jsonObj.get("trackingHints").isJsonNull()) && !jsonObj.get("trackingHints").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingHints` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingHints").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShippingData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShippingData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShippingData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShippingData.class));

       return (TypeAdapter<T>) new TypeAdapter<ShippingData>() {
           @Override
           public void write(JsonWriter out, ShippingData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShippingData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShippingData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShippingData
   * @throws IOException if the JSON string is invalid with respect to ShippingData
   */
  public static ShippingData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShippingData.class);
  }

  /**
   * Convert an instance of ShippingData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

