/*
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CurrencyFormatInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StorePreferencesData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:00.631491-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorePreferencesData {
  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_CURRENCY_FORMAT_INFO = "currencyFormatInfo";
  @SerializedName(SERIALIZED_NAME_CURRENCY_FORMAT_INFO)
  private CurrencyFormatInfo currencyFormatInfo;

  public static final String SERIALIZED_NAME_CURRENCY_LOCALE = "currencyLocale";
  @SerializedName(SERIALIZED_NAME_CURRENCY_LOCALE)
  private Integer currencyLocale;

  public static final String SERIALIZED_NAME_CURRENCY_SYMBOL = "currencySymbol";
  @SerializedName(SERIALIZED_NAME_CURRENCY_SYMBOL)
  private String currencySymbol;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public StorePreferencesData() {
  }

  public StorePreferencesData countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Three letter ISO country code.
   * @return countryCode
   */
  @javax.annotation.Nonnull
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public StorePreferencesData currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Currency code.
   * @return currencyCode
   */
  @javax.annotation.Nonnull
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public StorePreferencesData currencyFormatInfo(CurrencyFormatInfo currencyFormatInfo) {
    this.currencyFormatInfo = currencyFormatInfo;
    return this;
  }

  /**
   * Get currencyFormatInfo
   * @return currencyFormatInfo
   */
  @javax.annotation.Nonnull
  public CurrencyFormatInfo getCurrencyFormatInfo() {
    return currencyFormatInfo;
  }

  public void setCurrencyFormatInfo(CurrencyFormatInfo currencyFormatInfo) {
    this.currencyFormatInfo = currencyFormatInfo;
  }


  public StorePreferencesData currencyLocale(Integer currencyLocale) {
    this.currencyLocale = currencyLocale;
    return this;
  }

  /**
   * Currency locale.
   * @return currencyLocale
   */
  @javax.annotation.Nonnull
  public Integer getCurrencyLocale() {
    return currencyLocale;
  }

  public void setCurrencyLocale(Integer currencyLocale) {
    this.currencyLocale = currencyLocale;
  }


  public StorePreferencesData currencySymbol(String currencySymbol) {
    this.currencySymbol = currencySymbol;
    return this;
  }

  /**
   * Currency symbol.
   * @return currencySymbol
   */
  @javax.annotation.Nonnull
  public String getCurrencySymbol() {
    return currencySymbol;
  }

  public void setCurrencySymbol(String currencySymbol) {
    this.currencySymbol = currencySymbol;
  }


  public StorePreferencesData timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Time zone.
   * @return timeZone
   */
  @javax.annotation.Nonnull
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorePreferencesData storePreferencesData = (StorePreferencesData) o;
    return Objects.equals(this.countryCode, storePreferencesData.countryCode) &&
        Objects.equals(this.currencyCode, storePreferencesData.currencyCode) &&
        Objects.equals(this.currencyFormatInfo, storePreferencesData.currencyFormatInfo) &&
        Objects.equals(this.currencyLocale, storePreferencesData.currencyLocale) &&
        Objects.equals(this.currencySymbol, storePreferencesData.currencySymbol) &&
        Objects.equals(this.timeZone, storePreferencesData.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryCode, currencyCode, currencyFormatInfo, currencyLocale, currencySymbol, timeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorePreferencesData {\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    currencyFormatInfo: ").append(toIndentedString(currencyFormatInfo)).append("\n");
    sb.append("    currencyLocale: ").append(toIndentedString(currencyLocale)).append("\n");
    sb.append("    currencySymbol: ").append(toIndentedString(currencySymbol)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countryCode");
    openapiFields.add("currencyCode");
    openapiFields.add("currencyFormatInfo");
    openapiFields.add("currencyLocale");
    openapiFields.add("currencySymbol");
    openapiFields.add("timeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("countryCode");
    openapiRequiredFields.add("currencyCode");
    openapiRequiredFields.add("currencyFormatInfo");
    openapiRequiredFields.add("currencyLocale");
    openapiRequiredFields.add("currencySymbol");
    openapiRequiredFields.add("timeZone");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorePreferencesData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorePreferencesData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorePreferencesData is not found in the empty JSON string", StorePreferencesData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorePreferencesData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorePreferencesData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StorePreferencesData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if (!jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      // validate the required field `currencyFormatInfo`
      CurrencyFormatInfo.validateJsonElement(jsonObj.get("currencyFormatInfo"));
      if (!jsonObj.get("currencySymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencySymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencySymbol").toString()));
      }
      if (!jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorePreferencesData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorePreferencesData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorePreferencesData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorePreferencesData.class));

       return (TypeAdapter<T>) new TypeAdapter<StorePreferencesData>() {
           @Override
           public void write(JsonWriter out, StorePreferencesData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorePreferencesData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorePreferencesData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorePreferencesData
   * @throws IOException if the JSON string is invalid with respect to StorePreferencesData
   */
  public static StorePreferencesData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorePreferencesData.class);
  }

  /**
   * Convert an instance of StorePreferencesData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

