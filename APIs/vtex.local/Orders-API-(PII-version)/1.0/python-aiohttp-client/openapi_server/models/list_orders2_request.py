# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListOrders2Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, f_creation_date: str=None, page: int=None, per_page: int=None, q: str=None):
        """ListOrders2Request - a model defined in OpenAPI

        :param f_creation_date: The f_creation_date of this ListOrders2Request.
        :param page: The page of this ListOrders2Request.
        :param per_page: The per_page of this ListOrders2Request.
        :param q: The q of this ListOrders2Request.
        """
        self.openapi_types = {
            'f_creation_date': str,
            'page': int,
            'per_page': int,
            'q': str
        }

        self.attribute_map = {
            'f_creation_date': 'f_creationDate',
            'page': 'page',
            'per_page': 'per_page',
            'q': 'q'
        }

        self._f_creation_date = f_creation_date
        self._page = page
        self._per_page = per_page
        self._q = q

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListOrders2Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListOrders2_request of this ListOrders2Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def f_creation_date(self):
        """Gets the f_creation_date of this ListOrders2Request.

        Concatened value sufix {{creationDate}} and range date in Timestamp format.

        :return: The f_creation_date of this ListOrders2Request.
        :rtype: str
        """
        return self._f_creation_date

    @f_creation_date.setter
    def f_creation_date(self, f_creation_date):
        """Sets the f_creation_date of this ListOrders2Request.

        Concatened value sufix {{creationDate}} and range date in Timestamp format.

        :param f_creation_date: The f_creation_date of this ListOrders2Request.
        :type f_creation_date: str
        """
        if f_creation_date is None:
            raise ValueError("Invalid value for `f_creation_date`, must not be `None`")

        self._f_creation_date = f_creation_date

    @property
    def page(self):
        """Gets the page of this ListOrders2Request.

        Number of the page to be retrieved.

        :return: The page of this ListOrders2Request.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this ListOrders2Request.

        Number of the page to be retrieved.

        :param page: The page of this ListOrders2Request.
        :type page: int
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")

        self._page = page

    @property
    def per_page(self):
        """Gets the per_page of this ListOrders2Request.

        Number of orders per page.

        :return: The per_page of this ListOrders2Request.
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this ListOrders2Request.

        Number of orders per page.

        :param per_page: The per_page of this ListOrders2Request.
        :type per_page: int
        """
        if per_page is None:
            raise ValueError("Invalid value for `per_page`, must not be `None`")

        self._per_page = per_page

    @property
    def q(self):
        """Gets the q of this ListOrders2Request.

        Full-text search for the orders.

        :return: The q of this ListOrders2Request.
        :rtype: str
        """
        return self._q

    @q.setter
    def q(self, q):
        """Sets the q of this ListOrders2Request.

        Full-text search for the orders.

        :param q: The q of this ListOrders2Request.
        :type q: str
        """

        self._q = q
