# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Item1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item_index: str=None, price: int=None, quantity: int=None):
        """Item1 - a model defined in OpenAPI

        :param item_index: The item_index of this Item1.
        :param price: The price of this Item1.
        :param quantity: The quantity of this Item1.
        """
        self.openapi_types = {
            'item_index': str,
            'price': int,
            'quantity': int
        }

        self.attribute_map = {
            'item_index': 'itemIndex',
            'price': 'price',
            'quantity': 'quantity'
        }

        self._item_index = item_index
        self._price = price
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Item1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item1 of this Item1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item_index(self):
        """Gets the item_index of this Item1.

        Index of the SKU being invoiced.

        :return: The item_index of this Item1.
        :rtype: str
        """
        return self._item_index

    @item_index.setter
    def item_index(self, item_index):
        """Sets the item_index of this Item1.

        Index of the SKU being invoiced.

        :param item_index: The item_index of this Item1.
        :type item_index: str
        """
        if item_index is None:
            raise ValueError("Invalid value for `item_index`, must not be `None`")

        self._item_index = item_index

    @property
    def price(self):
        """Gets the price of this Item1.

        Total price of the SKU being invoiced in cents. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.

        :return: The price of this Item1.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Item1.

        Total price of the SKU being invoiced in cents. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.

        :param price: The price of this Item1.
        :type price: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this Item1.

        Quantity cof the SKU being invoiced.

        :return: The quantity of this Item1.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Item1.

        Quantity cof the SKU being invoiced.

        :param quantity: The quantity of this Item1.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity
