# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.paging import Paging
from openapi_server.models.stats import Stats
from openapi_server import util


class ListOrders(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facets: List[str]=None, list: List[List]=None, paging: Paging=None, stats: Stats=None):
        """ListOrders - a model defined in OpenAPI

        :param facets: The facets of this ListOrders.
        :param list: The list of this ListOrders.
        :param paging: The paging of this ListOrders.
        :param stats: The stats of this ListOrders.
        """
        self.openapi_types = {
            'facets': List[str],
            'list': List[List],
            'paging': Paging,
            'stats': Stats
        }

        self.attribute_map = {
            'facets': 'facets',
            'list': 'list',
            'paging': 'paging',
            'stats': 'stats'
        }

        self._facets = facets
        self._list = list
        self._paging = paging
        self._stats = stats

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListOrders':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListOrders of this ListOrders.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facets(self):
        """Gets the facets of this ListOrders.

        Array of facets.

        :return: The facets of this ListOrders.
        :rtype: List[str]
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this ListOrders.

        Array of facets.

        :param facets: The facets of this ListOrders.
        :type facets: List[str]
        """
        if facets is None:
            raise ValueError("Invalid value for `facets`, must not be `None`")

        self._facets = facets

    @property
    def list(self):
        """Gets the list of this ListOrders.

        Array containing information on orders listed.

        :return: The list of this ListOrders.
        :rtype: List[List]
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this ListOrders.

        Array containing information on orders listed.

        :param list: The list of this ListOrders.
        :type list: List[List]
        """
        if list is None:
            raise ValueError("Invalid value for `list`, must not be `None`")

        self._list = list

    @property
    def paging(self):
        """Gets the paging of this ListOrders.


        :return: The paging of this ListOrders.
        :rtype: Paging
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this ListOrders.


        :param paging: The paging of this ListOrders.
        :type paging: Paging
        """
        if paging is None:
            raise ValueError("Invalid value for `paging`, must not be `None`")

        self._paging = paging

    @property
    def stats(self):
        """Gets the stats of this ListOrders.


        :return: The stats of this ListOrders.
        :rtype: Stats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this ListOrders.


        :param stats: The stats of this ListOrders.
        :type stats: Stats
        """
        if stats is None:
            raise ValueError("Invalid value for `stats`, must not be `None`")

        self._stats = stats
