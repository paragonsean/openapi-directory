# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item1 import Item1
from openapi_server import util


class InvoiceNotificationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cfop: str=None, courier: str=None, extra_value: int=None, invoice_key: str=None, invoice_number: str=None, invoice_url: str=None, invoice_value: str=None, issued_date: str=None, items: List[Item1]=None, tracking_number: str=None, tracking_url: str=None, type: str=None, volumes: int=None):
        """InvoiceNotificationRequest - a model defined in OpenAPI

        :param cfop: The cfop of this InvoiceNotificationRequest.
        :param courier: The courier of this InvoiceNotificationRequest.
        :param extra_value: The extra_value of this InvoiceNotificationRequest.
        :param invoice_key: The invoice_key of this InvoiceNotificationRequest.
        :param invoice_number: The invoice_number of this InvoiceNotificationRequest.
        :param invoice_url: The invoice_url of this InvoiceNotificationRequest.
        :param invoice_value: The invoice_value of this InvoiceNotificationRequest.
        :param issued_date: The issued_date of this InvoiceNotificationRequest.
        :param items: The items of this InvoiceNotificationRequest.
        :param tracking_number: The tracking_number of this InvoiceNotificationRequest.
        :param tracking_url: The tracking_url of this InvoiceNotificationRequest.
        :param type: The type of this InvoiceNotificationRequest.
        :param volumes: The volumes of this InvoiceNotificationRequest.
        """
        self.openapi_types = {
            'cfop': str,
            'courier': str,
            'extra_value': int,
            'invoice_key': str,
            'invoice_number': str,
            'invoice_url': str,
            'invoice_value': str,
            'issued_date': str,
            'items': List[Item1],
            'tracking_number': str,
            'tracking_url': str,
            'type': str,
            'volumes': int
        }

        self.attribute_map = {
            'cfop': 'cfop',
            'courier': 'courier',
            'extra_value': 'extraValue',
            'invoice_key': 'invoiceKey',
            'invoice_number': 'invoiceNumber',
            'invoice_url': 'invoiceUrl',
            'invoice_value': 'invoiceValue',
            'issued_date': 'issuedDate',
            'items': 'items',
            'tracking_number': 'trackingNumber',
            'tracking_url': 'trackingUrl',
            'type': 'type',
            'volumes': 'volumes'
        }

        self._cfop = cfop
        self._courier = courier
        self._extra_value = extra_value
        self._invoice_key = invoice_key
        self._invoice_number = invoice_number
        self._invoice_url = invoice_url
        self._invoice_value = invoice_value
        self._issued_date = issued_date
        self._items = items
        self._tracking_number = tracking_number
        self._tracking_url = tracking_url
        self._type = type
        self._volumes = volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceNotificationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceNotificationRequest of this InvoiceNotificationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cfop(self):
        """Gets the cfop of this InvoiceNotificationRequest.

        Fiscal code used in Brazil.

        :return: The cfop of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._cfop

    @cfop.setter
    def cfop(self, cfop):
        """Sets the cfop of this InvoiceNotificationRequest.

        Fiscal code used in Brazil.

        :param cfop: The cfop of this InvoiceNotificationRequest.
        :type cfop: str
        """

        self._cfop = cfop

    @property
    def courier(self):
        """Gets the courier of this InvoiceNotificationRequest.

        The name of the carrier responsible for delivering the order.  > This field should only be used when sending **tracking** information. When the request is used for sending the invoice, this field should be left empty (`\"\"`).

        :return: The courier of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._courier

    @courier.setter
    def courier(self, courier):
        """Sets the courier of this InvoiceNotificationRequest.

        The name of the carrier responsible for delivering the order.  > This field should only be used when sending **tracking** information. When the request is used for sending the invoice, this field should be left empty (`\"\"`).

        :param courier: The courier of this InvoiceNotificationRequest.
        :type courier: str
        """

        self._courier = courier

    @property
    def extra_value(self):
        """Gets the extra_value of this InvoiceNotificationRequest.

        Extra value in the invoice in cents. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.

        :return: The extra_value of this InvoiceNotificationRequest.
        :rtype: int
        """
        return self._extra_value

    @extra_value.setter
    def extra_value(self, extra_value):
        """Sets the extra_value of this InvoiceNotificationRequest.

        Extra value in the invoice in cents. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.

        :param extra_value: The extra_value of this InvoiceNotificationRequest.
        :type extra_value: int
        """

        self._extra_value = extra_value

    @property
    def invoice_key(self):
        """Gets the invoice_key of this InvoiceNotificationRequest.

        Invoice key.

        :return: The invoice_key of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._invoice_key

    @invoice_key.setter
    def invoice_key(self, invoice_key):
        """Sets the invoice_key of this InvoiceNotificationRequest.

        Invoice key.

        :param invoice_key: The invoice_key of this InvoiceNotificationRequest.
        :type invoice_key: str
        """

        self._invoice_key = invoice_key

    @property
    def invoice_number(self):
        """Gets the invoice_number of this InvoiceNotificationRequest.

        Number that identifies the invoice.

        :return: The invoice_number of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this InvoiceNotificationRequest.

        Number that identifies the invoice.

        :param invoice_number: The invoice_number of this InvoiceNotificationRequest.
        :type invoice_number: str
        """
        if invoice_number is None:
            raise ValueError("Invalid value for `invoice_number`, must not be `None`")

        self._invoice_number = invoice_number

    @property
    def invoice_url(self):
        """Gets the invoice_url of this InvoiceNotificationRequest.

        URL of the invoice. Can be used to send the URL of an XML file, for example, which is useful for some integrations.

        :return: The invoice_url of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._invoice_url

    @invoice_url.setter
    def invoice_url(self, invoice_url):
        """Sets the invoice_url of this InvoiceNotificationRequest.

        URL of the invoice. Can be used to send the URL of an XML file, for example, which is useful for some integrations.

        :param invoice_url: The invoice_url of this InvoiceNotificationRequest.
        :type invoice_url: str
        """

        self._invoice_url = invoice_url

    @property
    def invoice_value(self):
        """Gets the invoice_value of this InvoiceNotificationRequest.

        Total amount being invoiced in cents. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.

        :return: The invoice_value of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._invoice_value

    @invoice_value.setter
    def invoice_value(self, invoice_value):
        """Sets the invoice_value of this InvoiceNotificationRequest.

        Total amount being invoiced in cents. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.

        :param invoice_value: The invoice_value of this InvoiceNotificationRequest.
        :type invoice_value: str
        """
        if invoice_value is None:
            raise ValueError("Invalid value for `invoice_value`, must not be `None`")

        self._invoice_value = invoice_value

    @property
    def issued_date(self):
        """Gets the issued_date of this InvoiceNotificationRequest.

        Issuance date of the invoice in ISO format.

        :return: The issued_date of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._issued_date

    @issued_date.setter
    def issued_date(self, issued_date):
        """Sets the issued_date of this InvoiceNotificationRequest.

        Issuance date of the invoice in ISO format.

        :param issued_date: The issued_date of this InvoiceNotificationRequest.
        :type issued_date: str
        """
        if issued_date is None:
            raise ValueError("Invalid value for `issued_date`, must not be `None`")

        self._issued_date = issued_date

    @property
    def items(self):
        """Gets the items of this InvoiceNotificationRequest.

        Array containing the SKUs that are being invoiced.

        :return: The items of this InvoiceNotificationRequest.
        :rtype: List[Item1]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this InvoiceNotificationRequest.

        Array containing the SKUs that are being invoiced.

        :param items: The items of this InvoiceNotificationRequest.
        :type items: List[Item1]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def tracking_number(self):
        """Gets the tracking_number of this InvoiceNotificationRequest.

        Code that identifies the order tracking.  > This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`\"\"`).

        :return: The tracking_number of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this InvoiceNotificationRequest.

        Code that identifies the order tracking.  > This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`\"\"`).

        :param tracking_number: The tracking_number of this InvoiceNotificationRequest.
        :type tracking_number: str
        """

        self._tracking_number = tracking_number

    @property
    def tracking_url(self):
        """Gets the tracking_url of this InvoiceNotificationRequest.

        URL used to track the order.  > This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`\"\"`).

        :return: The tracking_url of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._tracking_url

    @tracking_url.setter
    def tracking_url(self, tracking_url):
        """Sets the tracking_url of this InvoiceNotificationRequest.

        URL used to track the order.  > This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`\"\"`).

        :param tracking_url: The tracking_url of this InvoiceNotificationRequest.
        :type tracking_url: str
        """

        self._tracking_url = tracking_url

    @property
    def type(self):
        """Gets the type of this InvoiceNotificationRequest.

        The type of invoice. There are two possible values: `\"Output\"` and `\"Input\"`. The `\"Output\"` type should be used when the invoice you are sending is a selling invoice. The `\"Input\"` type should be used when you send a return invoice.

        :return: The type of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InvoiceNotificationRequest.

        The type of invoice. There are two possible values: `\"Output\"` and `\"Input\"`. The `\"Output\"` type should be used when the invoice you are sending is a selling invoice. The `\"Input\"` type should be used when you send a return invoice.

        :param type: The type of this InvoiceNotificationRequest.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def volumes(self):
        """Gets the volumes of this InvoiceNotificationRequest.

        Number of volumes in the invoice.

        :return: The volumes of this InvoiceNotificationRequest.
        :rtype: int
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this InvoiceNotificationRequest.

        Number of volumes in the invoice.

        :param volumes: The volumes of this InvoiceNotificationRequest.
        :type volumes: int
        """

        self._volumes = volumes
