# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Payment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_holder: str=None, card_number: str=None, connector_responses: object=None, cvv2: str=None, due_date: str=None, expire_month: str=None, expire_year: str=None, first_digits: str=None, gift_card_caption: str=None, gift_card_id: str=None, gift_card_name: str=None, group: str=None, id: str=None, installments: int=None, last_digits: str=None, payment_system: str=None, payment_system_name: str=None, redemption_code: str=None, reference_value: int=None, tid: str=None, url: str=None, value: int=None):
        """Payment - a model defined in OpenAPI

        :param card_holder: The card_holder of this Payment.
        :param card_number: The card_number of this Payment.
        :param connector_responses: The connector_responses of this Payment.
        :param cvv2: The cvv2 of this Payment.
        :param due_date: The due_date of this Payment.
        :param expire_month: The expire_month of this Payment.
        :param expire_year: The expire_year of this Payment.
        :param first_digits: The first_digits of this Payment.
        :param gift_card_caption: The gift_card_caption of this Payment.
        :param gift_card_id: The gift_card_id of this Payment.
        :param gift_card_name: The gift_card_name of this Payment.
        :param group: The group of this Payment.
        :param id: The id of this Payment.
        :param installments: The installments of this Payment.
        :param last_digits: The last_digits of this Payment.
        :param payment_system: The payment_system of this Payment.
        :param payment_system_name: The payment_system_name of this Payment.
        :param redemption_code: The redemption_code of this Payment.
        :param reference_value: The reference_value of this Payment.
        :param tid: The tid of this Payment.
        :param url: The url of this Payment.
        :param value: The value of this Payment.
        """
        self.openapi_types = {
            'card_holder': str,
            'card_number': str,
            'connector_responses': object,
            'cvv2': str,
            'due_date': str,
            'expire_month': str,
            'expire_year': str,
            'first_digits': str,
            'gift_card_caption': str,
            'gift_card_id': str,
            'gift_card_name': str,
            'group': str,
            'id': str,
            'installments': int,
            'last_digits': str,
            'payment_system': str,
            'payment_system_name': str,
            'redemption_code': str,
            'reference_value': int,
            'tid': str,
            'url': str,
            'value': int
        }

        self.attribute_map = {
            'card_holder': 'cardHolder',
            'card_number': 'cardNumber',
            'connector_responses': 'connectorResponses',
            'cvv2': 'cvv2',
            'due_date': 'dueDate',
            'expire_month': 'expireMonth',
            'expire_year': 'expireYear',
            'first_digits': 'firstDigits',
            'gift_card_caption': 'giftCardCaption',
            'gift_card_id': 'giftCardId',
            'gift_card_name': 'giftCardName',
            'group': 'group',
            'id': 'id',
            'installments': 'installments',
            'last_digits': 'lastDigits',
            'payment_system': 'paymentSystem',
            'payment_system_name': 'paymentSystemName',
            'redemption_code': 'redemptionCode',
            'reference_value': 'referenceValue',
            'tid': 'tid',
            'url': 'url',
            'value': 'value'
        }

        self._card_holder = card_holder
        self._card_number = card_number
        self._connector_responses = connector_responses
        self._cvv2 = cvv2
        self._due_date = due_date
        self._expire_month = expire_month
        self._expire_year = expire_year
        self._first_digits = first_digits
        self._gift_card_caption = gift_card_caption
        self._gift_card_id = gift_card_id
        self._gift_card_name = gift_card_name
        self._group = group
        self._id = id
        self._installments = installments
        self._last_digits = last_digits
        self._payment_system = payment_system
        self._payment_system_name = payment_system_name
        self._redemption_code = redemption_code
        self._reference_value = reference_value
        self._tid = tid
        self._url = url
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Payment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Payment of this Payment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_holder(self):
        """Gets the card_holder of this Payment.

        Card holder

        :return: The card_holder of this Payment.
        :rtype: str
        """
        return self._card_holder

    @card_holder.setter
    def card_holder(self, card_holder):
        """Sets the card_holder of this Payment.

        Card holder

        :param card_holder: The card_holder of this Payment.
        :type card_holder: str
        """
        if card_holder is None:
            raise ValueError("Invalid value for `card_holder`, must not be `None`")

        self._card_holder = card_holder

    @property
    def card_number(self):
        """Gets the card_number of this Payment.

        Card number.

        :return: The card_number of this Payment.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this Payment.

        Card number.

        :param card_number: The card_number of this Payment.
        :type card_number: str
        """
        if card_number is None:
            raise ValueError("Invalid value for `card_number`, must not be `None`")

        self._card_number = card_number

    @property
    def connector_responses(self):
        """Gets the connector_responses of this Payment.

        Connector responses.

        :return: The connector_responses of this Payment.
        :rtype: object
        """
        return self._connector_responses

    @connector_responses.setter
    def connector_responses(self, connector_responses):
        """Sets the connector_responses of this Payment.

        Connector responses.

        :param connector_responses: The connector_responses of this Payment.
        :type connector_responses: object
        """
        if connector_responses is None:
            raise ValueError("Invalid value for `connector_responses`, must not be `None`")

        self._connector_responses = connector_responses

    @property
    def cvv2(self):
        """Gets the cvv2 of this Payment.

        Card verification code.

        :return: The cvv2 of this Payment.
        :rtype: str
        """
        return self._cvv2

    @cvv2.setter
    def cvv2(self, cvv2):
        """Sets the cvv2 of this Payment.

        Card verification code.

        :param cvv2: The cvv2 of this Payment.
        :type cvv2: str
        """
        if cvv2 is None:
            raise ValueError("Invalid value for `cvv2`, must not be `None`")

        self._cvv2 = cvv2

    @property
    def due_date(self):
        """Gets the due_date of this Payment.

        Due date.

        :return: The due_date of this Payment.
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Payment.

        Due date.

        :param due_date: The due_date of this Payment.
        :type due_date: str
        """
        if due_date is None:
            raise ValueError("Invalid value for `due_date`, must not be `None`")

        self._due_date = due_date

    @property
    def expire_month(self):
        """Gets the expire_month of this Payment.

        Card expiration month.

        :return: The expire_month of this Payment.
        :rtype: str
        """
        return self._expire_month

    @expire_month.setter
    def expire_month(self, expire_month):
        """Sets the expire_month of this Payment.

        Card expiration month.

        :param expire_month: The expire_month of this Payment.
        :type expire_month: str
        """
        if expire_month is None:
            raise ValueError("Invalid value for `expire_month`, must not be `None`")

        self._expire_month = expire_month

    @property
    def expire_year(self):
        """Gets the expire_year of this Payment.

        Card expiration year.

        :return: The expire_year of this Payment.
        :rtype: str
        """
        return self._expire_year

    @expire_year.setter
    def expire_year(self, expire_year):
        """Sets the expire_year of this Payment.

        Card expiration year.

        :param expire_year: The expire_year of this Payment.
        :type expire_year: str
        """
        if expire_year is None:
            raise ValueError("Invalid value for `expire_year`, must not be `None`")

        self._expire_year = expire_year

    @property
    def first_digits(self):
        """Gets the first_digits of this Payment.

        Card first digits.

        :return: The first_digits of this Payment.
        :rtype: str
        """
        return self._first_digits

    @first_digits.setter
    def first_digits(self, first_digits):
        """Sets the first_digits of this Payment.

        Card first digits.

        :param first_digits: The first_digits of this Payment.
        :type first_digits: str
        """
        if first_digits is None:
            raise ValueError("Invalid value for `first_digits`, must not be `None`")

        self._first_digits = first_digits

    @property
    def gift_card_caption(self):
        """Gets the gift_card_caption of this Payment.

        Gift card caption.

        :return: The gift_card_caption of this Payment.
        :rtype: str
        """
        return self._gift_card_caption

    @gift_card_caption.setter
    def gift_card_caption(self, gift_card_caption):
        """Sets the gift_card_caption of this Payment.

        Gift card caption.

        :param gift_card_caption: The gift_card_caption of this Payment.
        :type gift_card_caption: str
        """
        if gift_card_caption is None:
            raise ValueError("Invalid value for `gift_card_caption`, must not be `None`")

        self._gift_card_caption = gift_card_caption

    @property
    def gift_card_id(self):
        """Gets the gift_card_id of this Payment.

        Gift card ID.

        :return: The gift_card_id of this Payment.
        :rtype: str
        """
        return self._gift_card_id

    @gift_card_id.setter
    def gift_card_id(self, gift_card_id):
        """Sets the gift_card_id of this Payment.

        Gift card ID.

        :param gift_card_id: The gift_card_id of this Payment.
        :type gift_card_id: str
        """
        if gift_card_id is None:
            raise ValueError("Invalid value for `gift_card_id`, must not be `None`")

        self._gift_card_id = gift_card_id

    @property
    def gift_card_name(self):
        """Gets the gift_card_name of this Payment.

        Gift card name.

        :return: The gift_card_name of this Payment.
        :rtype: str
        """
        return self._gift_card_name

    @gift_card_name.setter
    def gift_card_name(self, gift_card_name):
        """Sets the gift_card_name of this Payment.

        Gift card name.

        :param gift_card_name: The gift_card_name of this Payment.
        :type gift_card_name: str
        """
        if gift_card_name is None:
            raise ValueError("Invalid value for `gift_card_name`, must not be `None`")

        self._gift_card_name = gift_card_name

    @property
    def group(self):
        """Gets the group of this Payment.

        Payment group.

        :return: The group of this Payment.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Payment.

        Payment group.

        :param group: The group of this Payment.
        :type group: str
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")

        self._group = group

    @property
    def id(self):
        """Gets the id of this Payment.

        Payment ID.

        :return: The id of this Payment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Payment.

        Payment ID.

        :param id: The id of this Payment.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def installments(self):
        """Gets the installments of this Payment.

        Payment installments.

        :return: The installments of this Payment.
        :rtype: int
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this Payment.

        Payment installments.

        :param installments: The installments of this Payment.
        :type installments: int
        """
        if installments is None:
            raise ValueError("Invalid value for `installments`, must not be `None`")

        self._installments = installments

    @property
    def last_digits(self):
        """Gets the last_digits of this Payment.

        Card last digits.

        :return: The last_digits of this Payment.
        :rtype: str
        """
        return self._last_digits

    @last_digits.setter
    def last_digits(self, last_digits):
        """Sets the last_digits of this Payment.

        Card last digits.

        :param last_digits: The last_digits of this Payment.
        :type last_digits: str
        """
        if last_digits is None:
            raise ValueError("Invalid value for `last_digits`, must not be `None`")

        self._last_digits = last_digits

    @property
    def payment_system(self):
        """Gets the payment_system of this Payment.

        Payment system.

        :return: The payment_system of this Payment.
        :rtype: str
        """
        return self._payment_system

    @payment_system.setter
    def payment_system(self, payment_system):
        """Sets the payment_system of this Payment.

        Payment system.

        :param payment_system: The payment_system of this Payment.
        :type payment_system: str
        """
        if payment_system is None:
            raise ValueError("Invalid value for `payment_system`, must not be `None`")

        self._payment_system = payment_system

    @property
    def payment_system_name(self):
        """Gets the payment_system_name of this Payment.

        Payment system name.

        :return: The payment_system_name of this Payment.
        :rtype: str
        """
        return self._payment_system_name

    @payment_system_name.setter
    def payment_system_name(self, payment_system_name):
        """Sets the payment_system_name of this Payment.

        Payment system name.

        :param payment_system_name: The payment_system_name of this Payment.
        :type payment_system_name: str
        """
        if payment_system_name is None:
            raise ValueError("Invalid value for `payment_system_name`, must not be `None`")

        self._payment_system_name = payment_system_name

    @property
    def redemption_code(self):
        """Gets the redemption_code of this Payment.

        Redemption code.

        :return: The redemption_code of this Payment.
        :rtype: str
        """
        return self._redemption_code

    @redemption_code.setter
    def redemption_code(self, redemption_code):
        """Sets the redemption_code of this Payment.

        Redemption code.

        :param redemption_code: The redemption_code of this Payment.
        :type redemption_code: str
        """
        if redemption_code is None:
            raise ValueError("Invalid value for `redemption_code`, must not be `None`")

        self._redemption_code = redemption_code

    @property
    def reference_value(self):
        """Gets the reference_value of this Payment.

        Reference value for interest calculation in cents.

        :return: The reference_value of this Payment.
        :rtype: int
        """
        return self._reference_value

    @reference_value.setter
    def reference_value(self, reference_value):
        """Sets the reference_value of this Payment.

        Reference value for interest calculation in cents.

        :param reference_value: The reference_value of this Payment.
        :type reference_value: int
        """
        if reference_value is None:
            raise ValueError("Invalid value for `reference_value`, must not be `None`")

        self._reference_value = reference_value

    @property
    def tid(self):
        """Gets the tid of this Payment.

        Payment TID.

        :return: The tid of this Payment.
        :rtype: str
        """
        return self._tid

    @tid.setter
    def tid(self, tid):
        """Sets the tid of this Payment.

        Payment TID.

        :param tid: The tid of this Payment.
        :type tid: str
        """
        if tid is None:
            raise ValueError("Invalid value for `tid`, must not be `None`")

        self._tid = tid

    @property
    def url(self):
        """Gets the url of this Payment.

        Payment URL.

        :return: The url of this Payment.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Payment.

        Payment URL.

        :param url: The url of this Payment.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def value(self):
        """Gets the value of this Payment.

        Payment value in cents.

        :return: The value of this Payment.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Payment.

        Payment value in cents.

        :param value: The value of this Payment.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
