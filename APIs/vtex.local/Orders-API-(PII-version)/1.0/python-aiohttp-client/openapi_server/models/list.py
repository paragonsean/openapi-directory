# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class List(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, shipping_estimated_date: str=None, shipping_estimated_date_max: str=None, shipping_estimated_date_min: str=None, affiliate_id: str=None, authorized_date: str=None, call_center_operator_name: str=None, client_name: str=None, creation_date: str=None, currency_code: str=None, items: str=None, last_message_unread: str=None, list_id: str=None, list_type: str=None, market_place_order_id: str=None, order_id: str=None, order_is_complete: bool=None, origin: str=None, payment_names: str=None, sales_channel: str=None, sequence: str=None, status: str=None, status_description: str=None, total_items: int=None, total_value: int=None, workflow_in_error_state: bool=None, workflow_in_retry: bool=None):
        """List - a model defined in OpenAPI

        :param shipping_estimated_date: The shipping_estimated_date of this List.
        :param shipping_estimated_date_max: The shipping_estimated_date_max of this List.
        :param shipping_estimated_date_min: The shipping_estimated_date_min of this List.
        :param affiliate_id: The affiliate_id of this List.
        :param authorized_date: The authorized_date of this List.
        :param call_center_operator_name: The call_center_operator_name of this List.
        :param client_name: The client_name of this List.
        :param creation_date: The creation_date of this List.
        :param currency_code: The currency_code of this List.
        :param items: The items of this List.
        :param last_message_unread: The last_message_unread of this List.
        :param list_id: The list_id of this List.
        :param list_type: The list_type of this List.
        :param market_place_order_id: The market_place_order_id of this List.
        :param order_id: The order_id of this List.
        :param order_is_complete: The order_is_complete of this List.
        :param origin: The origin of this List.
        :param payment_names: The payment_names of this List.
        :param sales_channel: The sales_channel of this List.
        :param sequence: The sequence of this List.
        :param status: The status of this List.
        :param status_description: The status_description of this List.
        :param total_items: The total_items of this List.
        :param total_value: The total_value of this List.
        :param workflow_in_error_state: The workflow_in_error_state of this List.
        :param workflow_in_retry: The workflow_in_retry of this List.
        """
        self.openapi_types = {
            'shipping_estimated_date': str,
            'shipping_estimated_date_max': str,
            'shipping_estimated_date_min': str,
            'affiliate_id': str,
            'authorized_date': str,
            'call_center_operator_name': str,
            'client_name': str,
            'creation_date': str,
            'currency_code': str,
            'items': str,
            'last_message_unread': str,
            'list_id': str,
            'list_type': str,
            'market_place_order_id': str,
            'order_id': str,
            'order_is_complete': bool,
            'origin': str,
            'payment_names': str,
            'sales_channel': str,
            'sequence': str,
            'status': str,
            'status_description': str,
            'total_items': int,
            'total_value': int,
            'workflow_in_error_state': bool,
            'workflow_in_retry': bool
        }

        self.attribute_map = {
            'shipping_estimated_date': 'ShippingEstimatedDate',
            'shipping_estimated_date_max': 'ShippingEstimatedDateMax',
            'shipping_estimated_date_min': 'ShippingEstimatedDateMin',
            'affiliate_id': 'affiliateId',
            'authorized_date': 'authorizedDate',
            'call_center_operator_name': 'callCenterOperatorName',
            'client_name': 'clientName',
            'creation_date': 'creationDate',
            'currency_code': 'currencyCode',
            'items': 'items',
            'last_message_unread': 'lastMessageUnread',
            'list_id': 'listId',
            'list_type': 'listType',
            'market_place_order_id': 'marketPlaceOrderId',
            'order_id': 'orderId',
            'order_is_complete': 'orderIsComplete',
            'origin': 'origin',
            'payment_names': 'paymentNames',
            'sales_channel': 'salesChannel',
            'sequence': 'sequence',
            'status': 'status',
            'status_description': 'statusDescription',
            'total_items': 'totalItems',
            'total_value': 'totalValue',
            'workflow_in_error_state': 'workflowInErrorState',
            'workflow_in_retry': 'workflowInRetry'
        }

        self._shipping_estimated_date = shipping_estimated_date
        self._shipping_estimated_date_max = shipping_estimated_date_max
        self._shipping_estimated_date_min = shipping_estimated_date_min
        self._affiliate_id = affiliate_id
        self._authorized_date = authorized_date
        self._call_center_operator_name = call_center_operator_name
        self._client_name = client_name
        self._creation_date = creation_date
        self._currency_code = currency_code
        self._items = items
        self._last_message_unread = last_message_unread
        self._list_id = list_id
        self._list_type = list_type
        self._market_place_order_id = market_place_order_id
        self._order_id = order_id
        self._order_is_complete = order_is_complete
        self._origin = origin
        self._payment_names = payment_names
        self._sales_channel = sales_channel
        self._sequence = sequence
        self._status = status
        self._status_description = status_description
        self._total_items = total_items
        self._total_value = total_value
        self._workflow_in_error_state = workflow_in_error_state
        self._workflow_in_retry = workflow_in_retry

    @classmethod
    def from_dict(cls, dikt: dict) -> 'List':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The List of this List.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def shipping_estimated_date(self):
        """Gets the shipping_estimated_date of this List.

        Shipping estimate date.

        :return: The shipping_estimated_date of this List.
        :rtype: str
        """
        return self._shipping_estimated_date

    @shipping_estimated_date.setter
    def shipping_estimated_date(self, shipping_estimated_date):
        """Sets the shipping_estimated_date of this List.

        Shipping estimate date.

        :param shipping_estimated_date: The shipping_estimated_date of this List.
        :type shipping_estimated_date: str
        """
        if shipping_estimated_date is None:
            raise ValueError("Invalid value for `shipping_estimated_date`, must not be `None`")

        self._shipping_estimated_date = shipping_estimated_date

    @property
    def shipping_estimated_date_max(self):
        """Gets the shipping_estimated_date_max of this List.

        Maximum shipping estimate date.

        :return: The shipping_estimated_date_max of this List.
        :rtype: str
        """
        return self._shipping_estimated_date_max

    @shipping_estimated_date_max.setter
    def shipping_estimated_date_max(self, shipping_estimated_date_max):
        """Sets the shipping_estimated_date_max of this List.

        Maximum shipping estimate date.

        :param shipping_estimated_date_max: The shipping_estimated_date_max of this List.
        :type shipping_estimated_date_max: str
        """
        if shipping_estimated_date_max is None:
            raise ValueError("Invalid value for `shipping_estimated_date_max`, must not be `None`")

        self._shipping_estimated_date_max = shipping_estimated_date_max

    @property
    def shipping_estimated_date_min(self):
        """Gets the shipping_estimated_date_min of this List.

        Minimum shipping estimate date.

        :return: The shipping_estimated_date_min of this List.
        :rtype: str
        """
        return self._shipping_estimated_date_min

    @shipping_estimated_date_min.setter
    def shipping_estimated_date_min(self, shipping_estimated_date_min):
        """Sets the shipping_estimated_date_min of this List.

        Minimum shipping estimate date.

        :param shipping_estimated_date_min: The shipping_estimated_date_min of this List.
        :type shipping_estimated_date_min: str
        """
        if shipping_estimated_date_min is None:
            raise ValueError("Invalid value for `shipping_estimated_date_min`, must not be `None`")

        self._shipping_estimated_date_min = shipping_estimated_date_min

    @property
    def affiliate_id(self):
        """Gets the affiliate_id of this List.

        Three letter code indicating the marketplace in which the order was placed.

        :return: The affiliate_id of this List.
        :rtype: str
        """
        return self._affiliate_id

    @affiliate_id.setter
    def affiliate_id(self, affiliate_id):
        """Sets the affiliate_id of this List.

        Three letter code indicating the marketplace in which the order was placed.

        :param affiliate_id: The affiliate_id of this List.
        :type affiliate_id: str
        """
        if affiliate_id is None:
            raise ValueError("Invalid value for `affiliate_id`, must not be `None`")

        self._affiliate_id = affiliate_id

    @property
    def authorized_date(self):
        """Gets the authorized_date of this List.

        Authorized date.

        :return: The authorized_date of this List.
        :rtype: str
        """
        return self._authorized_date

    @authorized_date.setter
    def authorized_date(self, authorized_date):
        """Sets the authorized_date of this List.

        Authorized date.

        :param authorized_date: The authorized_date of this List.
        :type authorized_date: str
        """
        if authorized_date is None:
            raise ValueError("Invalid value for `authorized_date`, must not be `None`")

        self._authorized_date = authorized_date

    @property
    def call_center_operator_name(self):
        """Gets the call_center_operator_name of this List.

        Call center operator name.

        :return: The call_center_operator_name of this List.
        :rtype: str
        """
        return self._call_center_operator_name

    @call_center_operator_name.setter
    def call_center_operator_name(self, call_center_operator_name):
        """Sets the call_center_operator_name of this List.

        Call center operator name.

        :param call_center_operator_name: The call_center_operator_name of this List.
        :type call_center_operator_name: str
        """
        if call_center_operator_name is None:
            raise ValueError("Invalid value for `call_center_operator_name`, must not be `None`")

        self._call_center_operator_name = call_center_operator_name

    @property
    def client_name(self):
        """Gets the client_name of this List.

        Client name.

        :return: The client_name of this List.
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this List.

        Client name.

        :param client_name: The client_name of this List.
        :type client_name: str
        """
        if client_name is None:
            raise ValueError("Invalid value for `client_name`, must not be `None`")

        self._client_name = client_name

    @property
    def creation_date(self):
        """Gets the creation_date of this List.

        Creation date.

        :return: The creation_date of this List.
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this List.

        Creation date.

        :param creation_date: The creation_date of this List.
        :type creation_date: str
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")

        self._creation_date = creation_date

    @property
    def currency_code(self):
        """Gets the currency_code of this List.

        Currency code.

        :return: The currency_code of this List.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this List.

        Currency code.

        :param currency_code: The currency_code of this List.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def items(self):
        """Gets the items of this List.

        Order items.

        :return: The items of this List.
        :rtype: str
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this List.

        Order items.

        :param items: The items of this List.
        :type items: str
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def last_message_unread(self):
        """Gets the last_message_unread of this List.

        Last unread message.

        :return: The last_message_unread of this List.
        :rtype: str
        """
        return self._last_message_unread

    @last_message_unread.setter
    def last_message_unread(self, last_message_unread):
        """Sets the last_message_unread of this List.

        Last unread message.

        :param last_message_unread: The last_message_unread of this List.
        :type last_message_unread: str
        """
        if last_message_unread is None:
            raise ValueError("Invalid value for `last_message_unread`, must not be `None`")

        self._last_message_unread = last_message_unread

    @property
    def list_id(self):
        """Gets the list_id of this List.

        List ID.

        :return: The list_id of this List.
        :rtype: str
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this List.

        List ID.

        :param list_id: The list_id of this List.
        :type list_id: str
        """
        if list_id is None:
            raise ValueError("Invalid value for `list_id`, must not be `None`")

        self._list_id = list_id

    @property
    def list_type(self):
        """Gets the list_type of this List.

        List type.

        :return: The list_type of this List.
        :rtype: str
        """
        return self._list_type

    @list_type.setter
    def list_type(self, list_type):
        """Sets the list_type of this List.

        List type.

        :param list_type: The list_type of this List.
        :type list_type: str
        """
        if list_type is None:
            raise ValueError("Invalid value for `list_type`, must not be `None`")

        self._list_type = list_type

    @property
    def market_place_order_id(self):
        """Gets the market_place_order_id of this List.

        ID of the order in the marketplace.

        :return: The market_place_order_id of this List.
        :rtype: str
        """
        return self._market_place_order_id

    @market_place_order_id.setter
    def market_place_order_id(self, market_place_order_id):
        """Sets the market_place_order_id of this List.

        ID of the order in the marketplace.

        :param market_place_order_id: The market_place_order_id of this List.
        :type market_place_order_id: str
        """
        if market_place_order_id is None:
            raise ValueError("Invalid value for `market_place_order_id`, must not be `None`")

        self._market_place_order_id = market_place_order_id

    @property
    def order_id(self):
        """Gets the order_id of this List.

        Order ID.

        :return: The order_id of this List.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this List.

        Order ID.

        :param order_id: The order_id of this List.
        :type order_id: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def order_is_complete(self):
        """Gets the order_is_complete of this List.

        Indicates whether order is complete.

        :return: The order_is_complete of this List.
        :rtype: bool
        """
        return self._order_is_complete

    @order_is_complete.setter
    def order_is_complete(self, order_is_complete):
        """Sets the order_is_complete of this List.

        Indicates whether order is complete.

        :param order_is_complete: The order_is_complete of this List.
        :type order_is_complete: bool
        """
        if order_is_complete is None:
            raise ValueError("Invalid value for `order_is_complete`, must not be `None`")

        self._order_is_complete = order_is_complete

    @property
    def origin(self):
        """Gets the origin of this List.

        Indicates whether order is marketplace, fulfillment or chain.

        :return: The origin of this List.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this List.

        Indicates whether order is marketplace, fulfillment or chain.

        :param origin: The origin of this List.
        :type origin: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")

        self._origin = origin

    @property
    def payment_names(self):
        """Gets the payment_names of this List.

        Order payment names.

        :return: The payment_names of this List.
        :rtype: str
        """
        return self._payment_names

    @payment_names.setter
    def payment_names(self, payment_names):
        """Sets the payment_names of this List.

        Order payment names.

        :param payment_names: The payment_names of this List.
        :type payment_names: str
        """
        if payment_names is None:
            raise ValueError("Invalid value for `payment_names`, must not be `None`")

        self._payment_names = payment_names

    @property
    def sales_channel(self):
        """Gets the sales_channel of this List.

        Sales channel.

        :return: The sales_channel of this List.
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this List.

        Sales channel.

        :param sales_channel: The sales_channel of this List.
        :type sales_channel: str
        """
        if sales_channel is None:
            raise ValueError("Invalid value for `sales_channel`, must not be `None`")

        self._sales_channel = sales_channel

    @property
    def sequence(self):
        """Gets the sequence of this List.

        Order sequence number.

        :return: The sequence of this List.
        :rtype: str
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this List.

        Order sequence number.

        :param sequence: The sequence of this List.
        :type sequence: str
        """
        if sequence is None:
            raise ValueError("Invalid value for `sequence`, must not be `None`")

        self._sequence = sequence

    @property
    def status(self):
        """Gets the status of this List.

        Order status.

        :return: The status of this List.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this List.

        Order status.

        :param status: The status of this List.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_description(self):
        """Gets the status_description of this List.

        Order status description.

        :return: The status_description of this List.
        :rtype: str
        """
        return self._status_description

    @status_description.setter
    def status_description(self, status_description):
        """Sets the status_description of this List.

        Order status description.

        :param status_description: The status_description of this List.
        :type status_description: str
        """
        if status_description is None:
            raise ValueError("Invalid value for `status_description`, must not be `None`")

        self._status_description = status_description

    @property
    def total_items(self):
        """Gets the total_items of this List.

        Total items.

        :return: The total_items of this List.
        :rtype: int
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items):
        """Sets the total_items of this List.

        Total items.

        :param total_items: The total_items of this List.
        :type total_items: int
        """
        if total_items is None:
            raise ValueError("Invalid value for `total_items`, must not be `None`")

        self._total_items = total_items

    @property
    def total_value(self):
        """Gets the total_value of this List.

        Order total value in cents.

        :return: The total_value of this List.
        :rtype: int
        """
        return self._total_value

    @total_value.setter
    def total_value(self, total_value):
        """Sets the total_value of this List.

        Order total value in cents.

        :param total_value: The total_value of this List.
        :type total_value: int
        """
        if total_value is None:
            raise ValueError("Invalid value for `total_value`, must not be `None`")

        self._total_value = total_value

    @property
    def workflow_in_error_state(self):
        """Gets the workflow_in_error_state of this List.

        Indicates whether order workflow is in error state.

        :return: The workflow_in_error_state of this List.
        :rtype: bool
        """
        return self._workflow_in_error_state

    @workflow_in_error_state.setter
    def workflow_in_error_state(self, workflow_in_error_state):
        """Sets the workflow_in_error_state of this List.

        Indicates whether order workflow is in error state.

        :param workflow_in_error_state: The workflow_in_error_state of this List.
        :type workflow_in_error_state: bool
        """
        if workflow_in_error_state is None:
            raise ValueError("Invalid value for `workflow_in_error_state`, must not be `None`")

        self._workflow_in_error_state = workflow_in_error_state

    @property
    def workflow_in_retry(self):
        """Gets the workflow_in_retry of this List.

        Indicates whether workflow is in retry.

        :return: The workflow_in_retry of this List.
        :rtype: bool
        """
        return self._workflow_in_retry

    @workflow_in_retry.setter
    def workflow_in_retry(self, workflow_in_retry):
        """Sets the workflow_in_retry of this List.

        Indicates whether workflow is in retry.

        :param workflow_in_retry: The workflow_in_retry of this List.
        :type workflow_in_retry: bool
        """
        if workflow_in_retry is None:
            raise ValueError("Invalid value for `workflow_in_retry`, must not be `None`")

        self._workflow_in_retry = workflow_in_retry
