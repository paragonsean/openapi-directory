# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItemsRemoved(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, price: int=None, quantity: int=None, unit_multiplier: str=None):
        """ItemsRemoved - a model defined in OpenAPI

        :param id: The id of this ItemsRemoved.
        :param name: The name of this ItemsRemoved.
        :param price: The price of this ItemsRemoved.
        :param quantity: The quantity of this ItemsRemoved.
        :param unit_multiplier: The unit_multiplier of this ItemsRemoved.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'price': int,
            'quantity': int,
            'unit_multiplier': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'price': 'price',
            'quantity': 'quantity',
            'unit_multiplier': 'unitMultiplier'
        }

        self._id = id
        self._name = name
        self._price = price
        self._quantity = quantity
        self._unit_multiplier = unit_multiplier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemsRemoved':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemsRemoved of this ItemsRemoved.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ItemsRemoved.

        Id of removed item.

        :return: The id of this ItemsRemoved.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItemsRemoved.

        Id of removed item.

        :param id: The id of this ItemsRemoved.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this ItemsRemoved.

        Name of removed item.

        :return: The name of this ItemsRemoved.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ItemsRemoved.

        Name of removed item.

        :param name: The name of this ItemsRemoved.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def price(self):
        """Gets the price of this ItemsRemoved.

        Removed items price in cents.

        :return: The price of this ItemsRemoved.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ItemsRemoved.

        Removed items price in cents.

        :param price: The price of this ItemsRemoved.
        :type price: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this ItemsRemoved.

        Quantity of items removed.

        :return: The quantity of this ItemsRemoved.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ItemsRemoved.

        Quantity of items removed.

        :param quantity: The quantity of this ItemsRemoved.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def unit_multiplier(self):
        """Gets the unit_multiplier of this ItemsRemoved.

        Removed item unit multiplier.

        :return: The unit_multiplier of this ItemsRemoved.
        :rtype: str
        """
        return self._unit_multiplier

    @unit_multiplier.setter
    def unit_multiplier(self, unit_multiplier):
        """Sets the unit_multiplier of this ItemsRemoved.

        Removed item unit multiplier.

        :param unit_multiplier: The unit_multiplier of this ItemsRemoved.
        :type unit_multiplier: str
        """
        if unit_multiplier is None:
            raise ValueError("Invalid value for `unit_multiplier`, must not be `None`")

        self._unit_multiplier = unit_multiplier
