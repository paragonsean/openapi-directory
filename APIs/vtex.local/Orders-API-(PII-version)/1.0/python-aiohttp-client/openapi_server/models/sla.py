# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pickup_store_info import PickupStoreInfo
from openapi_server import util


class Sla(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delivery_channel: str=None, delivery_window: str=None, id: str=None, name: str=None, pickup_store_info: PickupStoreInfo=None, polygon_name: str=None, price: int=None, shipping_estimate: str=None):
        """Sla - a model defined in OpenAPI

        :param delivery_channel: The delivery_channel of this Sla.
        :param delivery_window: The delivery_window of this Sla.
        :param id: The id of this Sla.
        :param name: The name of this Sla.
        :param pickup_store_info: The pickup_store_info of this Sla.
        :param polygon_name: The polygon_name of this Sla.
        :param price: The price of this Sla.
        :param shipping_estimate: The shipping_estimate of this Sla.
        """
        self.openapi_types = {
            'delivery_channel': str,
            'delivery_window': str,
            'id': str,
            'name': str,
            'pickup_store_info': PickupStoreInfo,
            'polygon_name': str,
            'price': int,
            'shipping_estimate': str
        }

        self.attribute_map = {
            'delivery_channel': 'deliveryChannel',
            'delivery_window': 'deliveryWindow',
            'id': 'id',
            'name': 'name',
            'pickup_store_info': 'pickupStoreInfo',
            'polygon_name': 'polygonName',
            'price': 'price',
            'shipping_estimate': 'shippingEstimate'
        }

        self._delivery_channel = delivery_channel
        self._delivery_window = delivery_window
        self._id = id
        self._name = name
        self._pickup_store_info = pickup_store_info
        self._polygon_name = polygon_name
        self._price = price
        self._shipping_estimate = shipping_estimate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sla':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sla of this Sla.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delivery_channel(self):
        """Gets the delivery_channel of this Sla.

        SLA delivery channel.

        :return: The delivery_channel of this Sla.
        :rtype: str
        """
        return self._delivery_channel

    @delivery_channel.setter
    def delivery_channel(self, delivery_channel):
        """Sets the delivery_channel of this Sla.

        SLA delivery channel.

        :param delivery_channel: The delivery_channel of this Sla.
        :type delivery_channel: str
        """
        if delivery_channel is None:
            raise ValueError("Invalid value for `delivery_channel`, must not be `None`")

        self._delivery_channel = delivery_channel

    @property
    def delivery_window(self):
        """Gets the delivery_window of this Sla.

        SLA delivery window.

        :return: The delivery_window of this Sla.
        :rtype: str
        """
        return self._delivery_window

    @delivery_window.setter
    def delivery_window(self, delivery_window):
        """Sets the delivery_window of this Sla.

        SLA delivery window.

        :param delivery_window: The delivery_window of this Sla.
        :type delivery_window: str
        """
        if delivery_window is None:
            raise ValueError("Invalid value for `delivery_window`, must not be `None`")

        self._delivery_window = delivery_window

    @property
    def id(self):
        """Gets the id of this Sla.

        SLA ID.

        :return: The id of this Sla.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Sla.

        SLA ID.

        :param id: The id of this Sla.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Sla.

        SLA name.

        :return: The name of this Sla.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sla.

        SLA name.

        :param name: The name of this Sla.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def pickup_store_info(self):
        """Gets the pickup_store_info of this Sla.


        :return: The pickup_store_info of this Sla.
        :rtype: PickupStoreInfo
        """
        return self._pickup_store_info

    @pickup_store_info.setter
    def pickup_store_info(self, pickup_store_info):
        """Sets the pickup_store_info of this Sla.


        :param pickup_store_info: The pickup_store_info of this Sla.
        :type pickup_store_info: PickupStoreInfo
        """
        if pickup_store_info is None:
            raise ValueError("Invalid value for `pickup_store_info`, must not be `None`")

        self._pickup_store_info = pickup_store_info

    @property
    def polygon_name(self):
        """Gets the polygon_name of this Sla.

        SLA polygon name.

        :return: The polygon_name of this Sla.
        :rtype: str
        """
        return self._polygon_name

    @polygon_name.setter
    def polygon_name(self, polygon_name):
        """Sets the polygon_name of this Sla.

        SLA polygon name.

        :param polygon_name: The polygon_name of this Sla.
        :type polygon_name: str
        """
        if polygon_name is None:
            raise ValueError("Invalid value for `polygon_name`, must not be `None`")

        self._polygon_name = polygon_name

    @property
    def price(self):
        """Gets the price of this Sla.

        SLA price in cents.

        :return: The price of this Sla.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Sla.

        SLA price in cents.

        :param price: The price of this Sla.
        :type price: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def shipping_estimate(self):
        """Gets the shipping_estimate of this Sla.

        SLA shipping estimate.

        :return: The shipping_estimate of this Sla.
        :rtype: str
        """
        return self._shipping_estimate

    @shipping_estimate.setter
    def shipping_estimate(self, shipping_estimate):
        """Sets the shipping_estimate of this Sla.

        SLA shipping estimate.

        :param shipping_estimate: The shipping_estimate of this Sla.
        :type shipping_estimate: str
        """
        if shipping_estimate is None:
            raise ValueError("Invalid value for `shipping_estimate`, must not be `None`")

        self._shipping_estimate = shipping_estimate
