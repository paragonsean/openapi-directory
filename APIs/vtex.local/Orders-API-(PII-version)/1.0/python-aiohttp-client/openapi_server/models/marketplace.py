# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Marketplace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_url: str=None, is_certified: str=None, name: str=None):
        """Marketplace - a model defined in OpenAPI

        :param base_url: The base_url of this Marketplace.
        :param is_certified: The is_certified of this Marketplace.
        :param name: The name of this Marketplace.
        """
        self.openapi_types = {
            'base_url': str,
            'is_certified': str,
            'name': str
        }

        self.attribute_map = {
            'base_url': 'baseURL',
            'is_certified': 'isCertified',
            'name': 'name'
        }

        self._base_url = base_url
        self._is_certified = is_certified
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Marketplace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Marketplace of this Marketplace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_url(self):
        """Gets the base_url of this Marketplace.

        Marketplace base URL.

        :return: The base_url of this Marketplace.
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this Marketplace.

        Marketplace base URL.

        :param base_url: The base_url of this Marketplace.
        :type base_url: str
        """
        if base_url is None:
            raise ValueError("Invalid value for `base_url`, must not be `None`")

        self._base_url = base_url

    @property
    def is_certified(self):
        """Gets the is_certified of this Marketplace.

        Indicates whether marketplace is certified.

        :return: The is_certified of this Marketplace.
        :rtype: str
        """
        return self._is_certified

    @is_certified.setter
    def is_certified(self, is_certified):
        """Sets the is_certified of this Marketplace.

        Indicates whether marketplace is certified.

        :param is_certified: The is_certified of this Marketplace.
        :type is_certified: str
        """
        if is_certified is None:
            raise ValueError("Invalid value for `is_certified`, must not be `None`")

        self._is_certified = is_certified

    @property
    def name(self):
        """Gets the name of this Marketplace.

        Marketplace name.

        :return: The name of this Marketplace.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Marketplace.

        Marketplace name.

        :param name: The name of this Marketplace.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
