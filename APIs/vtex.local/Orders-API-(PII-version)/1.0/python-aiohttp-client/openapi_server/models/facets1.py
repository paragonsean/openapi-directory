# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency_code1 import CurrencyCode1
from openapi_server.models.origin1 import Origin1
from openapi_server import util


class Facets1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: CurrencyCode1=None, origin: Origin1=None):
        """Facets1 - a model defined in OpenAPI

        :param currency_code: The currency_code of this Facets1.
        :param origin: The origin of this Facets1.
        """
        self.openapi_types = {
            'currency_code': CurrencyCode1,
            'origin': Origin1
        }

        self.attribute_map = {
            'currency_code': 'currencyCode',
            'origin': 'origin'
        }

        self._currency_code = currency_code
        self._origin = origin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Facets1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Facets1 of this Facets1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this Facets1.


        :return: The currency_code of this Facets1.
        :rtype: CurrencyCode1
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Facets1.


        :param currency_code: The currency_code of this Facets1.
        :type currency_code: CurrencyCode1
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def origin(self):
        """Gets the origin of this Facets1.


        :return: The origin of this Facets1.
        :rtype: Origin1
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this Facets1.


        :param origin: The origin of this Facets1.
        :type origin: Origin1
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")

        self._origin = origin
