/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketplace1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketplace1::OAIMarketplace1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketplace1::OAIMarketplace1() {
    this->initializeModel();
}

OAIMarketplace1::~OAIMarketplace1() {}

void OAIMarketplace1::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_facets_isSet = false;
    m_facets_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_mean_isSet = false;
    m_mean_isValid = false;

    m_min_isSet = false;
    m_min_isValid = false;

    m_missing_isSet = false;
    m_missing_isValid = false;

    m_std_dev_isSet = false;
    m_std_dev_isValid = false;

    m_sum_isSet = false;
    m_sum_isValid = false;

    m_sum_of_squares_isSet = false;
    m_sum_of_squares_isValid = false;
}

void OAIMarketplace1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketplace1::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("Count")]);
    m_count_isSet = !json[QString("Count")].isNull() && m_count_isValid;

    m_facets_isValid = ::OpenAPI::fromJsonValue(m_facets, json[QString("Facets")]);
    m_facets_isSet = !json[QString("Facets")].isNull() && m_facets_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("Max")]);
    m_max_isSet = !json[QString("Max")].isNull() && m_max_isValid;

    m_mean_isValid = ::OpenAPI::fromJsonValue(m_mean, json[QString("Mean")]);
    m_mean_isSet = !json[QString("Mean")].isNull() && m_mean_isValid;

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("Min")]);
    m_min_isSet = !json[QString("Min")].isNull() && m_min_isValid;

    m_missing_isValid = ::OpenAPI::fromJsonValue(m_missing, json[QString("Missing")]);
    m_missing_isSet = !json[QString("Missing")].isNull() && m_missing_isValid;

    m_std_dev_isValid = ::OpenAPI::fromJsonValue(m_std_dev, json[QString("StdDev")]);
    m_std_dev_isSet = !json[QString("StdDev")].isNull() && m_std_dev_isValid;

    m_sum_isValid = ::OpenAPI::fromJsonValue(m_sum, json[QString("Sum")]);
    m_sum_isSet = !json[QString("Sum")].isNull() && m_sum_isValid;

    m_sum_of_squares_isValid = ::OpenAPI::fromJsonValue(m_sum_of_squares, json[QString("SumOfSquares")]);
    m_sum_of_squares_isSet = !json[QString("SumOfSquares")].isNull() && m_sum_of_squares_isValid;
}

QString OAIMarketplace1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketplace1::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("Count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_facets_isSet) {
        obj.insert(QString("Facets"), ::OpenAPI::toJsonValue(m_facets));
    }
    if (m_max_isSet) {
        obj.insert(QString("Max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_mean_isSet) {
        obj.insert(QString("Mean"), ::OpenAPI::toJsonValue(m_mean));
    }
    if (m_min_isSet) {
        obj.insert(QString("Min"), ::OpenAPI::toJsonValue(m_min));
    }
    if (m_missing_isSet) {
        obj.insert(QString("Missing"), ::OpenAPI::toJsonValue(m_missing));
    }
    if (m_std_dev_isSet) {
        obj.insert(QString("StdDev"), ::OpenAPI::toJsonValue(m_std_dev));
    }
    if (m_sum_isSet) {
        obj.insert(QString("Sum"), ::OpenAPI::toJsonValue(m_sum));
    }
    if (m_sum_of_squares_isSet) {
        obj.insert(QString("SumOfSquares"), ::OpenAPI::toJsonValue(m_sum_of_squares));
    }
    return obj;
}

qint32 OAIMarketplace1::getCount() const {
    return m_count;
}
void OAIMarketplace1::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIMarketplace1::is_count_Set() const{
    return m_count_isSet;
}

bool OAIMarketplace1::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIMarketplace1::getFacets() const {
    return m_facets;
}
void OAIMarketplace1::setFacets(const QString &facets) {
    m_facets = facets;
    m_facets_isSet = true;
}

bool OAIMarketplace1::is_facets_Set() const{
    return m_facets_isSet;
}

bool OAIMarketplace1::is_facets_Valid() const{
    return m_facets_isValid;
}

qint32 OAIMarketplace1::getMax() const {
    return m_max;
}
void OAIMarketplace1::setMax(const qint32 &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAIMarketplace1::is_max_Set() const{
    return m_max_isSet;
}

bool OAIMarketplace1::is_max_Valid() const{
    return m_max_isValid;
}

double OAIMarketplace1::getMean() const {
    return m_mean;
}
void OAIMarketplace1::setMean(const double &mean) {
    m_mean = mean;
    m_mean_isSet = true;
}

bool OAIMarketplace1::is_mean_Set() const{
    return m_mean_isSet;
}

bool OAIMarketplace1::is_mean_Valid() const{
    return m_mean_isValid;
}

qint32 OAIMarketplace1::getMin() const {
    return m_min;
}
void OAIMarketplace1::setMin(const qint32 &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAIMarketplace1::is_min_Set() const{
    return m_min_isSet;
}

bool OAIMarketplace1::is_min_Valid() const{
    return m_min_isValid;
}

qint32 OAIMarketplace1::getMissing() const {
    return m_missing;
}
void OAIMarketplace1::setMissing(const qint32 &missing) {
    m_missing = missing;
    m_missing_isSet = true;
}

bool OAIMarketplace1::is_missing_Set() const{
    return m_missing_isSet;
}

bool OAIMarketplace1::is_missing_Valid() const{
    return m_missing_isValid;
}

double OAIMarketplace1::getStdDev() const {
    return m_std_dev;
}
void OAIMarketplace1::setStdDev(const double &std_dev) {
    m_std_dev = std_dev;
    m_std_dev_isSet = true;
}

bool OAIMarketplace1::is_std_dev_Set() const{
    return m_std_dev_isSet;
}

bool OAIMarketplace1::is_std_dev_Valid() const{
    return m_std_dev_isValid;
}

qint32 OAIMarketplace1::getSum() const {
    return m_sum;
}
void OAIMarketplace1::setSum(const qint32 &sum) {
    m_sum = sum;
    m_sum_isSet = true;
}

bool OAIMarketplace1::is_sum_Set() const{
    return m_sum_isSet;
}

bool OAIMarketplace1::is_sum_Valid() const{
    return m_sum_isValid;
}

qint64 OAIMarketplace1::getSumOfSquares() const {
    return m_sum_of_squares;
}
void OAIMarketplace1::setSumOfSquares(const qint64 &sum_of_squares) {
    m_sum_of_squares = sum_of_squares;
    m_sum_of_squares_isSet = true;
}

bool OAIMarketplace1::is_sum_of_squares_Set() const{
    return m_sum_of_squares_isSet;
}

bool OAIMarketplace1::is_sum_of_squares_Valid() const{
    return m_sum_of_squares_isValid;
}

bool OAIMarketplace1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_std_dev_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_of_squares_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketplace1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_isValid && m_facets_isValid && m_max_isValid && m_mean_isValid && m_min_isValid && m_missing_isValid && m_std_dev_isValid && m_sum_isValid && m_sum_of_squares_isValid && true;
}

} // namespace OpenAPI
