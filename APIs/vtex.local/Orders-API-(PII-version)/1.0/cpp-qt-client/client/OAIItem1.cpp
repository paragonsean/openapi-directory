/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem1::OAIItem1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem1::OAIItem1() {
    this->initializeModel();
}

OAIItem1::~OAIItem1() {}

void OAIItem1::initializeModel() {

    m_item_index_isSet = false;
    m_item_index_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;
}

void OAIItem1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem1::fromJsonObject(QJsonObject json) {

    m_item_index_isValid = ::OpenAPI::fromJsonValue(m_item_index, json[QString("itemIndex")]);
    m_item_index_isSet = !json[QString("itemIndex")].isNull() && m_item_index_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;
}

QString OAIItem1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem1::asJsonObject() const {
    QJsonObject obj;
    if (m_item_index_isSet) {
        obj.insert(QString("itemIndex"), ::OpenAPI::toJsonValue(m_item_index));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    return obj;
}

QString OAIItem1::getItemIndex() const {
    return m_item_index;
}
void OAIItem1::setItemIndex(const QString &item_index) {
    m_item_index = item_index;
    m_item_index_isSet = true;
}

bool OAIItem1::is_item_index_Set() const{
    return m_item_index_isSet;
}

bool OAIItem1::is_item_index_Valid() const{
    return m_item_index_isValid;
}

qint32 OAIItem1::getPrice() const {
    return m_price;
}
void OAIItem1::setPrice(const qint32 &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIItem1::is_price_Set() const{
    return m_price_isSet;
}

bool OAIItem1::is_price_Valid() const{
    return m_price_isValid;
}

qint32 OAIItem1::getQuantity() const {
    return m_quantity;
}
void OAIItem1::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIItem1::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIItem1::is_quantity_Valid() const{
    return m_quantity_isValid;
}

bool OAIItem1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_item_index_isValid && m_price_isValid && m_quantity_isValid && true;
}

} // namespace OpenAPI
