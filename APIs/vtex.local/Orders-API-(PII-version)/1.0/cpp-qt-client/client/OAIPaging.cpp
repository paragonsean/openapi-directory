/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaging.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaging::OAIPaging(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaging::OAIPaging() {
    this->initializeModel();
}

OAIPaging::~OAIPaging() {}

void OAIPaging::initializeModel() {

    m_current_page_isSet = false;
    m_current_page_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;

    m_per_page_isSet = false;
    m_per_page_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIPaging::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaging::fromJsonObject(QJsonObject json) {

    m_current_page_isValid = ::OpenAPI::fromJsonValue(m_current_page, json[QString("currentPage")]);
    m_current_page_isSet = !json[QString("currentPage")].isNull() && m_current_page_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;

    m_per_page_isValid = ::OpenAPI::fromJsonValue(m_per_page, json[QString("perPage")]);
    m_per_page_isSet = !json[QString("perPage")].isNull() && m_per_page_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIPaging::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaging::asJsonObject() const {
    QJsonObject obj;
    if (m_current_page_isSet) {
        obj.insert(QString("currentPage"), ::OpenAPI::toJsonValue(m_current_page));
    }
    if (m_pages_isSet) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    if (m_per_page_isSet) {
        obj.insert(QString("perPage"), ::OpenAPI::toJsonValue(m_per_page));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint32 OAIPaging::getCurrentPage() const {
    return m_current_page;
}
void OAIPaging::setCurrentPage(const qint32 &current_page) {
    m_current_page = current_page;
    m_current_page_isSet = true;
}

bool OAIPaging::is_current_page_Set() const{
    return m_current_page_isSet;
}

bool OAIPaging::is_current_page_Valid() const{
    return m_current_page_isValid;
}

qint32 OAIPaging::getPages() const {
    return m_pages;
}
void OAIPaging::setPages(const qint32 &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIPaging::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIPaging::is_pages_Valid() const{
    return m_pages_isValid;
}

qint32 OAIPaging::getPerPage() const {
    return m_per_page;
}
void OAIPaging::setPerPage(const qint32 &per_page) {
    m_per_page = per_page;
    m_per_page_isSet = true;
}

bool OAIPaging::is_per_page_Set() const{
    return m_per_page_isSet;
}

bool OAIPaging::is_per_page_Valid() const{
    return m_per_page_isValid;
}

qint32 OAIPaging::getTotal() const {
    return m_total;
}
void OAIPaging::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIPaging::is_total_Set() const{
    return m_total_isSet;
}

bool OAIPaging::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIPaging::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaging::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_page_isValid && m_pages_isValid && m_per_page_isValid && m_total_isValid && true;
}

} // namespace OpenAPI
