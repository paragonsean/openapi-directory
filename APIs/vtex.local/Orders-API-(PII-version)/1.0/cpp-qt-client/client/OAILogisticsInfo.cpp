/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogisticsInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogisticsInfo::OAILogisticsInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogisticsInfo::OAILogisticsInfo() {
    this->initializeModel();
}

OAILogisticsInfo::~OAILogisticsInfo() {}

void OAILogisticsInfo::initializeModel() {

    m_address_id_isSet = false;
    m_address_id_isValid = false;

    m_delivery_channel_isSet = false;
    m_delivery_channel_isValid = false;

    m_delivery_company_isSet = false;
    m_delivery_company_isValid = false;

    m_delivery_ids_isSet = false;
    m_delivery_ids_isValid = false;

    m_delivery_window_isSet = false;
    m_delivery_window_isValid = false;

    m_item_index_isSet = false;
    m_item_index_isValid = false;

    m_list_price_isSet = false;
    m_list_price_isValid = false;

    m_lock_ttl_isSet = false;
    m_lock_ttl_isValid = false;

    m_pickup_store_info_isSet = false;
    m_pickup_store_info_isValid = false;

    m_polygon_name_isSet = false;
    m_polygon_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_selected_sla_isSet = false;
    m_selected_sla_isValid = false;

    m_selling_price_isSet = false;
    m_selling_price_isValid = false;

    m_shipping_estimate_isSet = false;
    m_shipping_estimate_isValid = false;

    m_shipping_estimate_date_isSet = false;
    m_shipping_estimate_date_isValid = false;

    m_ships_to_isSet = false;
    m_ships_to_isValid = false;

    m_slas_isSet = false;
    m_slas_isValid = false;
}

void OAILogisticsInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogisticsInfo::fromJsonObject(QJsonObject json) {

    m_address_id_isValid = ::OpenAPI::fromJsonValue(m_address_id, json[QString("addressId")]);
    m_address_id_isSet = !json[QString("addressId")].isNull() && m_address_id_isValid;

    m_delivery_channel_isValid = ::OpenAPI::fromJsonValue(m_delivery_channel, json[QString("deliveryChannel")]);
    m_delivery_channel_isSet = !json[QString("deliveryChannel")].isNull() && m_delivery_channel_isValid;

    m_delivery_company_isValid = ::OpenAPI::fromJsonValue(m_delivery_company, json[QString("deliveryCompany")]);
    m_delivery_company_isSet = !json[QString("deliveryCompany")].isNull() && m_delivery_company_isValid;

    m_delivery_ids_isValid = ::OpenAPI::fromJsonValue(m_delivery_ids, json[QString("deliveryIds")]);
    m_delivery_ids_isSet = !json[QString("deliveryIds")].isNull() && m_delivery_ids_isValid;

    m_delivery_window_isValid = ::OpenAPI::fromJsonValue(m_delivery_window, json[QString("deliveryWindow")]);
    m_delivery_window_isSet = !json[QString("deliveryWindow")].isNull() && m_delivery_window_isValid;

    m_item_index_isValid = ::OpenAPI::fromJsonValue(m_item_index, json[QString("itemIndex")]);
    m_item_index_isSet = !json[QString("itemIndex")].isNull() && m_item_index_isValid;

    m_list_price_isValid = ::OpenAPI::fromJsonValue(m_list_price, json[QString("listPrice")]);
    m_list_price_isSet = !json[QString("listPrice")].isNull() && m_list_price_isValid;

    m_lock_ttl_isValid = ::OpenAPI::fromJsonValue(m_lock_ttl, json[QString("lockTTL")]);
    m_lock_ttl_isSet = !json[QString("lockTTL")].isNull() && m_lock_ttl_isValid;

    m_pickup_store_info_isValid = ::OpenAPI::fromJsonValue(m_pickup_store_info, json[QString("pickupStoreInfo")]);
    m_pickup_store_info_isSet = !json[QString("pickupStoreInfo")].isNull() && m_pickup_store_info_isValid;

    m_polygon_name_isValid = ::OpenAPI::fromJsonValue(m_polygon_name, json[QString("polygonName")]);
    m_polygon_name_isSet = !json[QString("polygonName")].isNull() && m_polygon_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_selected_sla_isValid = ::OpenAPI::fromJsonValue(m_selected_sla, json[QString("selectedSla")]);
    m_selected_sla_isSet = !json[QString("selectedSla")].isNull() && m_selected_sla_isValid;

    m_selling_price_isValid = ::OpenAPI::fromJsonValue(m_selling_price, json[QString("sellingPrice")]);
    m_selling_price_isSet = !json[QString("sellingPrice")].isNull() && m_selling_price_isValid;

    m_shipping_estimate_isValid = ::OpenAPI::fromJsonValue(m_shipping_estimate, json[QString("shippingEstimate")]);
    m_shipping_estimate_isSet = !json[QString("shippingEstimate")].isNull() && m_shipping_estimate_isValid;

    m_shipping_estimate_date_isValid = ::OpenAPI::fromJsonValue(m_shipping_estimate_date, json[QString("shippingEstimateDate")]);
    m_shipping_estimate_date_isSet = !json[QString("shippingEstimateDate")].isNull() && m_shipping_estimate_date_isValid;

    m_ships_to_isValid = ::OpenAPI::fromJsonValue(m_ships_to, json[QString("shipsTo")]);
    m_ships_to_isSet = !json[QString("shipsTo")].isNull() && m_ships_to_isValid;

    m_slas_isValid = ::OpenAPI::fromJsonValue(m_slas, json[QString("slas")]);
    m_slas_isSet = !json[QString("slas")].isNull() && m_slas_isValid;
}

QString OAILogisticsInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogisticsInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_address_id_isSet) {
        obj.insert(QString("addressId"), ::OpenAPI::toJsonValue(m_address_id));
    }
    if (m_delivery_channel_isSet) {
        obj.insert(QString("deliveryChannel"), ::OpenAPI::toJsonValue(m_delivery_channel));
    }
    if (m_delivery_company_isSet) {
        obj.insert(QString("deliveryCompany"), ::OpenAPI::toJsonValue(m_delivery_company));
    }
    if (m_delivery_ids.size() > 0) {
        obj.insert(QString("deliveryIds"), ::OpenAPI::toJsonValue(m_delivery_ids));
    }
    if (m_delivery_window_isSet) {
        obj.insert(QString("deliveryWindow"), ::OpenAPI::toJsonValue(m_delivery_window));
    }
    if (m_item_index_isSet) {
        obj.insert(QString("itemIndex"), ::OpenAPI::toJsonValue(m_item_index));
    }
    if (m_list_price_isSet) {
        obj.insert(QString("listPrice"), ::OpenAPI::toJsonValue(m_list_price));
    }
    if (m_lock_ttl_isSet) {
        obj.insert(QString("lockTTL"), ::OpenAPI::toJsonValue(m_lock_ttl));
    }
    if (m_pickup_store_info.isSet()) {
        obj.insert(QString("pickupStoreInfo"), ::OpenAPI::toJsonValue(m_pickup_store_info));
    }
    if (m_polygon_name_isSet) {
        obj.insert(QString("polygonName"), ::OpenAPI::toJsonValue(m_polygon_name));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_selected_sla_isSet) {
        obj.insert(QString("selectedSla"), ::OpenAPI::toJsonValue(m_selected_sla));
    }
    if (m_selling_price_isSet) {
        obj.insert(QString("sellingPrice"), ::OpenAPI::toJsonValue(m_selling_price));
    }
    if (m_shipping_estimate_isSet) {
        obj.insert(QString("shippingEstimate"), ::OpenAPI::toJsonValue(m_shipping_estimate));
    }
    if (m_shipping_estimate_date_isSet) {
        obj.insert(QString("shippingEstimateDate"), ::OpenAPI::toJsonValue(m_shipping_estimate_date));
    }
    if (m_ships_to.size() > 0) {
        obj.insert(QString("shipsTo"), ::OpenAPI::toJsonValue(m_ships_to));
    }
    if (m_slas.size() > 0) {
        obj.insert(QString("slas"), ::OpenAPI::toJsonValue(m_slas));
    }
    return obj;
}

QString OAILogisticsInfo::getAddressId() const {
    return m_address_id;
}
void OAILogisticsInfo::setAddressId(const QString &address_id) {
    m_address_id = address_id;
    m_address_id_isSet = true;
}

bool OAILogisticsInfo::is_address_id_Set() const{
    return m_address_id_isSet;
}

bool OAILogisticsInfo::is_address_id_Valid() const{
    return m_address_id_isValid;
}

QString OAILogisticsInfo::getDeliveryChannel() const {
    return m_delivery_channel;
}
void OAILogisticsInfo::setDeliveryChannel(const QString &delivery_channel) {
    m_delivery_channel = delivery_channel;
    m_delivery_channel_isSet = true;
}

bool OAILogisticsInfo::is_delivery_channel_Set() const{
    return m_delivery_channel_isSet;
}

bool OAILogisticsInfo::is_delivery_channel_Valid() const{
    return m_delivery_channel_isValid;
}

QString OAILogisticsInfo::getDeliveryCompany() const {
    return m_delivery_company;
}
void OAILogisticsInfo::setDeliveryCompany(const QString &delivery_company) {
    m_delivery_company = delivery_company;
    m_delivery_company_isSet = true;
}

bool OAILogisticsInfo::is_delivery_company_Set() const{
    return m_delivery_company_isSet;
}

bool OAILogisticsInfo::is_delivery_company_Valid() const{
    return m_delivery_company_isValid;
}

QList<OAIDeliveryId> OAILogisticsInfo::getDeliveryIds() const {
    return m_delivery_ids;
}
void OAILogisticsInfo::setDeliveryIds(const QList<OAIDeliveryId> &delivery_ids) {
    m_delivery_ids = delivery_ids;
    m_delivery_ids_isSet = true;
}

bool OAILogisticsInfo::is_delivery_ids_Set() const{
    return m_delivery_ids_isSet;
}

bool OAILogisticsInfo::is_delivery_ids_Valid() const{
    return m_delivery_ids_isValid;
}

QString OAILogisticsInfo::getDeliveryWindow() const {
    return m_delivery_window;
}
void OAILogisticsInfo::setDeliveryWindow(const QString &delivery_window) {
    m_delivery_window = delivery_window;
    m_delivery_window_isSet = true;
}

bool OAILogisticsInfo::is_delivery_window_Set() const{
    return m_delivery_window_isSet;
}

bool OAILogisticsInfo::is_delivery_window_Valid() const{
    return m_delivery_window_isValid;
}

qint32 OAILogisticsInfo::getItemIndex() const {
    return m_item_index;
}
void OAILogisticsInfo::setItemIndex(const qint32 &item_index) {
    m_item_index = item_index;
    m_item_index_isSet = true;
}

bool OAILogisticsInfo::is_item_index_Set() const{
    return m_item_index_isSet;
}

bool OAILogisticsInfo::is_item_index_Valid() const{
    return m_item_index_isValid;
}

qint32 OAILogisticsInfo::getListPrice() const {
    return m_list_price;
}
void OAILogisticsInfo::setListPrice(const qint32 &list_price) {
    m_list_price = list_price;
    m_list_price_isSet = true;
}

bool OAILogisticsInfo::is_list_price_Set() const{
    return m_list_price_isSet;
}

bool OAILogisticsInfo::is_list_price_Valid() const{
    return m_list_price_isValid;
}

QString OAILogisticsInfo::getLockTtl() const {
    return m_lock_ttl;
}
void OAILogisticsInfo::setLockTtl(const QString &lock_ttl) {
    m_lock_ttl = lock_ttl;
    m_lock_ttl_isSet = true;
}

bool OAILogisticsInfo::is_lock_ttl_Set() const{
    return m_lock_ttl_isSet;
}

bool OAILogisticsInfo::is_lock_ttl_Valid() const{
    return m_lock_ttl_isValid;
}

OAIPickupStoreInfo OAILogisticsInfo::getPickupStoreInfo() const {
    return m_pickup_store_info;
}
void OAILogisticsInfo::setPickupStoreInfo(const OAIPickupStoreInfo &pickup_store_info) {
    m_pickup_store_info = pickup_store_info;
    m_pickup_store_info_isSet = true;
}

bool OAILogisticsInfo::is_pickup_store_info_Set() const{
    return m_pickup_store_info_isSet;
}

bool OAILogisticsInfo::is_pickup_store_info_Valid() const{
    return m_pickup_store_info_isValid;
}

QString OAILogisticsInfo::getPolygonName() const {
    return m_polygon_name;
}
void OAILogisticsInfo::setPolygonName(const QString &polygon_name) {
    m_polygon_name = polygon_name;
    m_polygon_name_isSet = true;
}

bool OAILogisticsInfo::is_polygon_name_Set() const{
    return m_polygon_name_isSet;
}

bool OAILogisticsInfo::is_polygon_name_Valid() const{
    return m_polygon_name_isValid;
}

qint32 OAILogisticsInfo::getPrice() const {
    return m_price;
}
void OAILogisticsInfo::setPrice(const qint32 &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAILogisticsInfo::is_price_Set() const{
    return m_price_isSet;
}

bool OAILogisticsInfo::is_price_Valid() const{
    return m_price_isValid;
}

QString OAILogisticsInfo::getSelectedSla() const {
    return m_selected_sla;
}
void OAILogisticsInfo::setSelectedSla(const QString &selected_sla) {
    m_selected_sla = selected_sla;
    m_selected_sla_isSet = true;
}

bool OAILogisticsInfo::is_selected_sla_Set() const{
    return m_selected_sla_isSet;
}

bool OAILogisticsInfo::is_selected_sla_Valid() const{
    return m_selected_sla_isValid;
}

qint32 OAILogisticsInfo::getSellingPrice() const {
    return m_selling_price;
}
void OAILogisticsInfo::setSellingPrice(const qint32 &selling_price) {
    m_selling_price = selling_price;
    m_selling_price_isSet = true;
}

bool OAILogisticsInfo::is_selling_price_Set() const{
    return m_selling_price_isSet;
}

bool OAILogisticsInfo::is_selling_price_Valid() const{
    return m_selling_price_isValid;
}

QString OAILogisticsInfo::getShippingEstimate() const {
    return m_shipping_estimate;
}
void OAILogisticsInfo::setShippingEstimate(const QString &shipping_estimate) {
    m_shipping_estimate = shipping_estimate;
    m_shipping_estimate_isSet = true;
}

bool OAILogisticsInfo::is_shipping_estimate_Set() const{
    return m_shipping_estimate_isSet;
}

bool OAILogisticsInfo::is_shipping_estimate_Valid() const{
    return m_shipping_estimate_isValid;
}

QString OAILogisticsInfo::getShippingEstimateDate() const {
    return m_shipping_estimate_date;
}
void OAILogisticsInfo::setShippingEstimateDate(const QString &shipping_estimate_date) {
    m_shipping_estimate_date = shipping_estimate_date;
    m_shipping_estimate_date_isSet = true;
}

bool OAILogisticsInfo::is_shipping_estimate_date_Set() const{
    return m_shipping_estimate_date_isSet;
}

bool OAILogisticsInfo::is_shipping_estimate_date_Valid() const{
    return m_shipping_estimate_date_isValid;
}

QList<QString> OAILogisticsInfo::getShipsTo() const {
    return m_ships_to;
}
void OAILogisticsInfo::setShipsTo(const QList<QString> &ships_to) {
    m_ships_to = ships_to;
    m_ships_to_isSet = true;
}

bool OAILogisticsInfo::is_ships_to_Set() const{
    return m_ships_to_isSet;
}

bool OAILogisticsInfo::is_ships_to_Valid() const{
    return m_ships_to_isValid;
}

QList<OAISla> OAILogisticsInfo::getSlas() const {
    return m_slas;
}
void OAILogisticsInfo::setSlas(const QList<OAISla> &slas) {
    m_slas = slas;
    m_slas_isSet = true;
}

bool OAILogisticsInfo::is_slas_Set() const{
    return m_slas_isSet;
}

bool OAILogisticsInfo::is_slas_Valid() const{
    return m_slas_isValid;
}

bool OAILogisticsInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_store_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_polygon_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_sla_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selling_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_estimate_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ships_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_slas.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogisticsInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_id_isValid && m_delivery_channel_isValid && m_delivery_company_isValid && m_delivery_ids_isValid && m_delivery_window_isValid && m_item_index_isValid && m_list_price_isValid && m_lock_ttl_isValid && m_pickup_store_info_isValid && m_polygon_name_isValid && m_price_isValid && m_selected_sla_isValid && m_selling_price_isValid && m_shipping_estimate_isValid && m_shipping_estimate_date_isValid && m_ships_to_isValid && m_slas_isValid && true;
}

} // namespace OpenAPI
