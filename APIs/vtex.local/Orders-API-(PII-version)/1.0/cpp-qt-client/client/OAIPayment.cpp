/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayment::OAIPayment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayment::OAIPayment() {
    this->initializeModel();
}

OAIPayment::~OAIPayment() {}

void OAIPayment::initializeModel() {

    m_card_holder_isSet = false;
    m_card_holder_isValid = false;

    m_card_number_isSet = false;
    m_card_number_isValid = false;

    m_connector_responses_isSet = false;
    m_connector_responses_isValid = false;

    m_cvv2_isSet = false;
    m_cvv2_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_expire_month_isSet = false;
    m_expire_month_isValid = false;

    m_expire_year_isSet = false;
    m_expire_year_isValid = false;

    m_first_digits_isSet = false;
    m_first_digits_isValid = false;

    m_gift_card_caption_isSet = false;
    m_gift_card_caption_isValid = false;

    m_gift_card_id_isSet = false;
    m_gift_card_id_isValid = false;

    m_gift_card_name_isSet = false;
    m_gift_card_name_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_installments_isSet = false;
    m_installments_isValid = false;

    m_last_digits_isSet = false;
    m_last_digits_isValid = false;

    m_payment_system_isSet = false;
    m_payment_system_isValid = false;

    m_payment_system_name_isSet = false;
    m_payment_system_name_isValid = false;

    m_redemption_code_isSet = false;
    m_redemption_code_isValid = false;

    m_reference_value_isSet = false;
    m_reference_value_isValid = false;

    m_tid_isSet = false;
    m_tid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPayment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayment::fromJsonObject(QJsonObject json) {

    m_card_holder_isValid = ::OpenAPI::fromJsonValue(m_card_holder, json[QString("cardHolder")]);
    m_card_holder_isSet = !json[QString("cardHolder")].isNull() && m_card_holder_isValid;

    m_card_number_isValid = ::OpenAPI::fromJsonValue(m_card_number, json[QString("cardNumber")]);
    m_card_number_isSet = !json[QString("cardNumber")].isNull() && m_card_number_isValid;

    m_connector_responses_isValid = ::OpenAPI::fromJsonValue(m_connector_responses, json[QString("connectorResponses")]);
    m_connector_responses_isSet = !json[QString("connectorResponses")].isNull() && m_connector_responses_isValid;

    m_cvv2_isValid = ::OpenAPI::fromJsonValue(m_cvv2, json[QString("cvv2")]);
    m_cvv2_isSet = !json[QString("cvv2")].isNull() && m_cvv2_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_expire_month_isValid = ::OpenAPI::fromJsonValue(m_expire_month, json[QString("expireMonth")]);
    m_expire_month_isSet = !json[QString("expireMonth")].isNull() && m_expire_month_isValid;

    m_expire_year_isValid = ::OpenAPI::fromJsonValue(m_expire_year, json[QString("expireYear")]);
    m_expire_year_isSet = !json[QString("expireYear")].isNull() && m_expire_year_isValid;

    m_first_digits_isValid = ::OpenAPI::fromJsonValue(m_first_digits, json[QString("firstDigits")]);
    m_first_digits_isSet = !json[QString("firstDigits")].isNull() && m_first_digits_isValid;

    m_gift_card_caption_isValid = ::OpenAPI::fromJsonValue(m_gift_card_caption, json[QString("giftCardCaption")]);
    m_gift_card_caption_isSet = !json[QString("giftCardCaption")].isNull() && m_gift_card_caption_isValid;

    m_gift_card_id_isValid = ::OpenAPI::fromJsonValue(m_gift_card_id, json[QString("giftCardId")]);
    m_gift_card_id_isSet = !json[QString("giftCardId")].isNull() && m_gift_card_id_isValid;

    m_gift_card_name_isValid = ::OpenAPI::fromJsonValue(m_gift_card_name, json[QString("giftCardName")]);
    m_gift_card_name_isSet = !json[QString("giftCardName")].isNull() && m_gift_card_name_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_installments_isValid = ::OpenAPI::fromJsonValue(m_installments, json[QString("installments")]);
    m_installments_isSet = !json[QString("installments")].isNull() && m_installments_isValid;

    m_last_digits_isValid = ::OpenAPI::fromJsonValue(m_last_digits, json[QString("lastDigits")]);
    m_last_digits_isSet = !json[QString("lastDigits")].isNull() && m_last_digits_isValid;

    m_payment_system_isValid = ::OpenAPI::fromJsonValue(m_payment_system, json[QString("paymentSystem")]);
    m_payment_system_isSet = !json[QString("paymentSystem")].isNull() && m_payment_system_isValid;

    m_payment_system_name_isValid = ::OpenAPI::fromJsonValue(m_payment_system_name, json[QString("paymentSystemName")]);
    m_payment_system_name_isSet = !json[QString("paymentSystemName")].isNull() && m_payment_system_name_isValid;

    m_redemption_code_isValid = ::OpenAPI::fromJsonValue(m_redemption_code, json[QString("redemptionCode")]);
    m_redemption_code_isSet = !json[QString("redemptionCode")].isNull() && m_redemption_code_isValid;

    m_reference_value_isValid = ::OpenAPI::fromJsonValue(m_reference_value, json[QString("referenceValue")]);
    m_reference_value_isSet = !json[QString("referenceValue")].isNull() && m_reference_value_isValid;

    m_tid_isValid = ::OpenAPI::fromJsonValue(m_tid, json[QString("tid")]);
    m_tid_isSet = !json[QString("tid")].isNull() && m_tid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIPayment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayment::asJsonObject() const {
    QJsonObject obj;
    if (m_card_holder_isSet) {
        obj.insert(QString("cardHolder"), ::OpenAPI::toJsonValue(m_card_holder));
    }
    if (m_card_number_isSet) {
        obj.insert(QString("cardNumber"), ::OpenAPI::toJsonValue(m_card_number));
    }
    if (m_connector_responses_isSet) {
        obj.insert(QString("connectorResponses"), ::OpenAPI::toJsonValue(m_connector_responses));
    }
    if (m_cvv2_isSet) {
        obj.insert(QString("cvv2"), ::OpenAPI::toJsonValue(m_cvv2));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_expire_month_isSet) {
        obj.insert(QString("expireMonth"), ::OpenAPI::toJsonValue(m_expire_month));
    }
    if (m_expire_year_isSet) {
        obj.insert(QString("expireYear"), ::OpenAPI::toJsonValue(m_expire_year));
    }
    if (m_first_digits_isSet) {
        obj.insert(QString("firstDigits"), ::OpenAPI::toJsonValue(m_first_digits));
    }
    if (m_gift_card_caption_isSet) {
        obj.insert(QString("giftCardCaption"), ::OpenAPI::toJsonValue(m_gift_card_caption));
    }
    if (m_gift_card_id_isSet) {
        obj.insert(QString("giftCardId"), ::OpenAPI::toJsonValue(m_gift_card_id));
    }
    if (m_gift_card_name_isSet) {
        obj.insert(QString("giftCardName"), ::OpenAPI::toJsonValue(m_gift_card_name));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_installments_isSet) {
        obj.insert(QString("installments"), ::OpenAPI::toJsonValue(m_installments));
    }
    if (m_last_digits_isSet) {
        obj.insert(QString("lastDigits"), ::OpenAPI::toJsonValue(m_last_digits));
    }
    if (m_payment_system_isSet) {
        obj.insert(QString("paymentSystem"), ::OpenAPI::toJsonValue(m_payment_system));
    }
    if (m_payment_system_name_isSet) {
        obj.insert(QString("paymentSystemName"), ::OpenAPI::toJsonValue(m_payment_system_name));
    }
    if (m_redemption_code_isSet) {
        obj.insert(QString("redemptionCode"), ::OpenAPI::toJsonValue(m_redemption_code));
    }
    if (m_reference_value_isSet) {
        obj.insert(QString("referenceValue"), ::OpenAPI::toJsonValue(m_reference_value));
    }
    if (m_tid_isSet) {
        obj.insert(QString("tid"), ::OpenAPI::toJsonValue(m_tid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIPayment::getCardHolder() const {
    return m_card_holder;
}
void OAIPayment::setCardHolder(const QString &card_holder) {
    m_card_holder = card_holder;
    m_card_holder_isSet = true;
}

bool OAIPayment::is_card_holder_Set() const{
    return m_card_holder_isSet;
}

bool OAIPayment::is_card_holder_Valid() const{
    return m_card_holder_isValid;
}

QString OAIPayment::getCardNumber() const {
    return m_card_number;
}
void OAIPayment::setCardNumber(const QString &card_number) {
    m_card_number = card_number;
    m_card_number_isSet = true;
}

bool OAIPayment::is_card_number_Set() const{
    return m_card_number_isSet;
}

bool OAIPayment::is_card_number_Valid() const{
    return m_card_number_isValid;
}

OAIObject OAIPayment::getConnectorResponses() const {
    return m_connector_responses;
}
void OAIPayment::setConnectorResponses(const OAIObject &connector_responses) {
    m_connector_responses = connector_responses;
    m_connector_responses_isSet = true;
}

bool OAIPayment::is_connector_responses_Set() const{
    return m_connector_responses_isSet;
}

bool OAIPayment::is_connector_responses_Valid() const{
    return m_connector_responses_isValid;
}

QString OAIPayment::getCvv2() const {
    return m_cvv2;
}
void OAIPayment::setCvv2(const QString &cvv2) {
    m_cvv2 = cvv2;
    m_cvv2_isSet = true;
}

bool OAIPayment::is_cvv2_Set() const{
    return m_cvv2_isSet;
}

bool OAIPayment::is_cvv2_Valid() const{
    return m_cvv2_isValid;
}

QString OAIPayment::getDueDate() const {
    return m_due_date;
}
void OAIPayment::setDueDate(const QString &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIPayment::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIPayment::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QString OAIPayment::getExpireMonth() const {
    return m_expire_month;
}
void OAIPayment::setExpireMonth(const QString &expire_month) {
    m_expire_month = expire_month;
    m_expire_month_isSet = true;
}

bool OAIPayment::is_expire_month_Set() const{
    return m_expire_month_isSet;
}

bool OAIPayment::is_expire_month_Valid() const{
    return m_expire_month_isValid;
}

QString OAIPayment::getExpireYear() const {
    return m_expire_year;
}
void OAIPayment::setExpireYear(const QString &expire_year) {
    m_expire_year = expire_year;
    m_expire_year_isSet = true;
}

bool OAIPayment::is_expire_year_Set() const{
    return m_expire_year_isSet;
}

bool OAIPayment::is_expire_year_Valid() const{
    return m_expire_year_isValid;
}

QString OAIPayment::getFirstDigits() const {
    return m_first_digits;
}
void OAIPayment::setFirstDigits(const QString &first_digits) {
    m_first_digits = first_digits;
    m_first_digits_isSet = true;
}

bool OAIPayment::is_first_digits_Set() const{
    return m_first_digits_isSet;
}

bool OAIPayment::is_first_digits_Valid() const{
    return m_first_digits_isValid;
}

QString OAIPayment::getGiftCardCaption() const {
    return m_gift_card_caption;
}
void OAIPayment::setGiftCardCaption(const QString &gift_card_caption) {
    m_gift_card_caption = gift_card_caption;
    m_gift_card_caption_isSet = true;
}

bool OAIPayment::is_gift_card_caption_Set() const{
    return m_gift_card_caption_isSet;
}

bool OAIPayment::is_gift_card_caption_Valid() const{
    return m_gift_card_caption_isValid;
}

QString OAIPayment::getGiftCardId() const {
    return m_gift_card_id;
}
void OAIPayment::setGiftCardId(const QString &gift_card_id) {
    m_gift_card_id = gift_card_id;
    m_gift_card_id_isSet = true;
}

bool OAIPayment::is_gift_card_id_Set() const{
    return m_gift_card_id_isSet;
}

bool OAIPayment::is_gift_card_id_Valid() const{
    return m_gift_card_id_isValid;
}

QString OAIPayment::getGiftCardName() const {
    return m_gift_card_name;
}
void OAIPayment::setGiftCardName(const QString &gift_card_name) {
    m_gift_card_name = gift_card_name;
    m_gift_card_name_isSet = true;
}

bool OAIPayment::is_gift_card_name_Set() const{
    return m_gift_card_name_isSet;
}

bool OAIPayment::is_gift_card_name_Valid() const{
    return m_gift_card_name_isValid;
}

QString OAIPayment::getGroup() const {
    return m_group;
}
void OAIPayment::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIPayment::is_group_Set() const{
    return m_group_isSet;
}

bool OAIPayment::is_group_Valid() const{
    return m_group_isValid;
}

QString OAIPayment::getId() const {
    return m_id;
}
void OAIPayment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPayment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPayment::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIPayment::getInstallments() const {
    return m_installments;
}
void OAIPayment::setInstallments(const qint32 &installments) {
    m_installments = installments;
    m_installments_isSet = true;
}

bool OAIPayment::is_installments_Set() const{
    return m_installments_isSet;
}

bool OAIPayment::is_installments_Valid() const{
    return m_installments_isValid;
}

QString OAIPayment::getLastDigits() const {
    return m_last_digits;
}
void OAIPayment::setLastDigits(const QString &last_digits) {
    m_last_digits = last_digits;
    m_last_digits_isSet = true;
}

bool OAIPayment::is_last_digits_Set() const{
    return m_last_digits_isSet;
}

bool OAIPayment::is_last_digits_Valid() const{
    return m_last_digits_isValid;
}

QString OAIPayment::getPaymentSystem() const {
    return m_payment_system;
}
void OAIPayment::setPaymentSystem(const QString &payment_system) {
    m_payment_system = payment_system;
    m_payment_system_isSet = true;
}

bool OAIPayment::is_payment_system_Set() const{
    return m_payment_system_isSet;
}

bool OAIPayment::is_payment_system_Valid() const{
    return m_payment_system_isValid;
}

QString OAIPayment::getPaymentSystemName() const {
    return m_payment_system_name;
}
void OAIPayment::setPaymentSystemName(const QString &payment_system_name) {
    m_payment_system_name = payment_system_name;
    m_payment_system_name_isSet = true;
}

bool OAIPayment::is_payment_system_name_Set() const{
    return m_payment_system_name_isSet;
}

bool OAIPayment::is_payment_system_name_Valid() const{
    return m_payment_system_name_isValid;
}

QString OAIPayment::getRedemptionCode() const {
    return m_redemption_code;
}
void OAIPayment::setRedemptionCode(const QString &redemption_code) {
    m_redemption_code = redemption_code;
    m_redemption_code_isSet = true;
}

bool OAIPayment::is_redemption_code_Set() const{
    return m_redemption_code_isSet;
}

bool OAIPayment::is_redemption_code_Valid() const{
    return m_redemption_code_isValid;
}

qint32 OAIPayment::getReferenceValue() const {
    return m_reference_value;
}
void OAIPayment::setReferenceValue(const qint32 &reference_value) {
    m_reference_value = reference_value;
    m_reference_value_isSet = true;
}

bool OAIPayment::is_reference_value_Set() const{
    return m_reference_value_isSet;
}

bool OAIPayment::is_reference_value_Valid() const{
    return m_reference_value_isValid;
}

QString OAIPayment::getTid() const {
    return m_tid;
}
void OAIPayment::setTid(const QString &tid) {
    m_tid = tid;
    m_tid_isSet = true;
}

bool OAIPayment::is_tid_Set() const{
    return m_tid_isSet;
}

bool OAIPayment::is_tid_Valid() const{
    return m_tid_isValid;
}

QString OAIPayment::getUrl() const {
    return m_url;
}
void OAIPayment::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPayment::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPayment::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIPayment::getValue() const {
    return m_value;
}
void OAIPayment::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPayment::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPayment::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPayment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_holder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_responses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvv2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_digits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_card_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_card_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_card_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_digits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_system_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_card_holder_isValid && m_card_number_isValid && m_connector_responses_isValid && m_cvv2_isValid && m_due_date_isValid && m_expire_month_isValid && m_expire_year_isValid && m_first_digits_isValid && m_gift_card_caption_isValid && m_gift_card_id_isValid && m_gift_card_name_isValid && m_group_isValid && m_id_isValid && m_installments_isValid && m_last_digits_isValid && m_payment_system_isValid && m_payment_system_name_isValid && m_redemption_code_isValid && m_reference_value_isValid && m_tid_isValid && m_url_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
