/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrdersApi_H
#define OAI_OAIOrdersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICancelOrder2_200_response.h"
#include "OAICancelOrder2_request.h"
#include "OAIGetOrder2_200_response.h"
#include "OAIListOrders.h"
#include "OAIListOrders2_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrdersApi : public QObject {
    Q_OBJECT

public:
    OAIOrdersApi(const int timeOut = 0);
    ~OAIOrdersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  oai_cancel_order2_request OAICancelOrder2_request [optional]
    */
    virtual void cancelOrder2(const QString &content_type, const QString &accept, const QString &order_id, const ::OpenAPI::OptionalParam<OAICancelOrder2_request> &oai_cancel_order2_request = ::OpenAPI::OptionalParam<OAICancelOrder2_request>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  reason QString [optional]
    */
    virtual void getOrder2(const QString &content_type, const QString &accept, const QString &order_id, const ::OpenAPI::OptionalParam<QString> &reason = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  f_has_input_invoice bool [optional]
    * @param[in]  oai_list_orders2_request OAIListOrders2_request [optional]
    */
    virtual void listOrders2(const QString &content_type, const QString &accept, const ::OpenAPI::OptionalParam<bool> &f_has_input_invoice = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIListOrders2_request> &oai_list_orders2_request = ::OpenAPI::OptionalParam<OAIListOrders2_request>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void startHandling2(const QString &content_type, const QString &accept, const QString &order_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelOrder2Callback(OAIHttpRequestWorker *worker);
    void getOrder2Callback(OAIHttpRequestWorker *worker);
    void listOrders2Callback(OAIHttpRequestWorker *worker);
    void startHandling2Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelOrder2Signal(OAICancelOrder2_200_response summary);
    void getOrder2Signal(OAIGetOrder2_200_response summary);
    void listOrders2Signal(OAIListOrders summary);
    void startHandling2Signal();


    void cancelOrder2SignalFull(OAIHttpRequestWorker *worker, OAICancelOrder2_200_response summary);
    void getOrder2SignalFull(OAIHttpRequestWorker *worker, OAIGetOrder2_200_response summary);
    void listOrders2SignalFull(OAIHttpRequestWorker *worker, OAIListOrders summary);
    void startHandling2SignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use cancelOrder2SignalError() instead")
    void cancelOrder2SignalE(OAICancelOrder2_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelOrder2SignalError(OAICancelOrder2_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrder2SignalError() instead")
    void getOrder2SignalE(OAIGetOrder2_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrder2SignalError(OAIGetOrder2_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOrders2SignalError() instead")
    void listOrders2SignalE(OAIListOrders summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listOrders2SignalError(OAIListOrders summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startHandling2SignalError() instead")
    void startHandling2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void startHandling2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelOrder2SignalErrorFull() instead")
    void cancelOrder2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelOrder2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrder2SignalErrorFull() instead")
    void getOrder2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrder2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOrders2SignalErrorFull() instead")
    void listOrders2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listOrders2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startHandling2SignalErrorFull() instead")
    void startHandling2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startHandling2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
