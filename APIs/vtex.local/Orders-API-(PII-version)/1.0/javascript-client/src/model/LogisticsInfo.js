/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeliveryId from './DeliveryId';
import PickupStoreInfo from './PickupStoreInfo';
import Sla from './Sla';

/**
 * The LogisticsInfo model module.
 * @module model/LogisticsInfo
 * @version 1.0
 */
class LogisticsInfo {
    /**
     * Constructs a new <code>LogisticsInfo</code>.
     * @alias module:model/LogisticsInfo
     * @param addressId {String} Address ID.
     * @param deliveryChannel {String} Delivery channel.
     * @param deliveryCompany {String} Delivery company.
     * @param deliveryIds {Array.<module:model/DeliveryId>} Array of delivery IDs.
     * @param deliveryWindow {String} Delivery window information.
     * @param itemIndex {Number} Item index, matching the index in the `items` array.
     * @param listPrice {Number} List price in cents.
     * @param lockTTL {String} Reservation lasting period.
     * @param pickupStoreInfo {module:model/PickupStoreInfo} 
     * @param polygonName {String} Polygon name.
     * @param price {Number} Prince in cents.
     * @param selectedSla {String} Selected SLA.
     * @param sellingPrice {Number} Selling price in cents.
     * @param shippingEstimate {String} Shipping estimate.
     * @param shippingEstimateDate {String} Shipping estimate date.
     * @param shipsTo {Array.<String>} List of countries (three letter ISO code) to which shipping is available.
     * @param slas {Array.<module:model/Sla>} Array with information on the SLAs.
     */
    constructor(addressId, deliveryChannel, deliveryCompany, deliveryIds, deliveryWindow, itemIndex, listPrice, lockTTL, pickupStoreInfo, polygonName, price, selectedSla, sellingPrice, shippingEstimate, shippingEstimateDate, shipsTo, slas) { 
        
        LogisticsInfo.initialize(this, addressId, deliveryChannel, deliveryCompany, deliveryIds, deliveryWindow, itemIndex, listPrice, lockTTL, pickupStoreInfo, polygonName, price, selectedSla, sellingPrice, shippingEstimate, shippingEstimateDate, shipsTo, slas);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, addressId, deliveryChannel, deliveryCompany, deliveryIds, deliveryWindow, itemIndex, listPrice, lockTTL, pickupStoreInfo, polygonName, price, selectedSla, sellingPrice, shippingEstimate, shippingEstimateDate, shipsTo, slas) { 
        obj['addressId'] = addressId;
        obj['deliveryChannel'] = deliveryChannel;
        obj['deliveryCompany'] = deliveryCompany;
        obj['deliveryIds'] = deliveryIds;
        obj['deliveryWindow'] = deliveryWindow;
        obj['itemIndex'] = itemIndex;
        obj['listPrice'] = listPrice;
        obj['lockTTL'] = lockTTL;
        obj['pickupStoreInfo'] = pickupStoreInfo;
        obj['polygonName'] = polygonName;
        obj['price'] = price;
        obj['selectedSla'] = selectedSla;
        obj['sellingPrice'] = sellingPrice;
        obj['shippingEstimate'] = shippingEstimate;
        obj['shippingEstimateDate'] = shippingEstimateDate;
        obj['shipsTo'] = shipsTo;
        obj['slas'] = slas;
    }

    /**
     * Constructs a <code>LogisticsInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogisticsInfo} obj Optional instance to populate.
     * @return {module:model/LogisticsInfo} The populated <code>LogisticsInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogisticsInfo();

            if (data.hasOwnProperty('addressId')) {
                obj['addressId'] = ApiClient.convertToType(data['addressId'], 'String');
            }
            if (data.hasOwnProperty('deliveryChannel')) {
                obj['deliveryChannel'] = ApiClient.convertToType(data['deliveryChannel'], 'String');
            }
            if (data.hasOwnProperty('deliveryCompany')) {
                obj['deliveryCompany'] = ApiClient.convertToType(data['deliveryCompany'], 'String');
            }
            if (data.hasOwnProperty('deliveryIds')) {
                obj['deliveryIds'] = ApiClient.convertToType(data['deliveryIds'], [DeliveryId]);
            }
            if (data.hasOwnProperty('deliveryWindow')) {
                obj['deliveryWindow'] = ApiClient.convertToType(data['deliveryWindow'], 'String');
            }
            if (data.hasOwnProperty('itemIndex')) {
                obj['itemIndex'] = ApiClient.convertToType(data['itemIndex'], 'Number');
            }
            if (data.hasOwnProperty('listPrice')) {
                obj['listPrice'] = ApiClient.convertToType(data['listPrice'], 'Number');
            }
            if (data.hasOwnProperty('lockTTL')) {
                obj['lockTTL'] = ApiClient.convertToType(data['lockTTL'], 'String');
            }
            if (data.hasOwnProperty('pickupStoreInfo')) {
                obj['pickupStoreInfo'] = PickupStoreInfo.constructFromObject(data['pickupStoreInfo']);
            }
            if (data.hasOwnProperty('polygonName')) {
                obj['polygonName'] = ApiClient.convertToType(data['polygonName'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('selectedSla')) {
                obj['selectedSla'] = ApiClient.convertToType(data['selectedSla'], 'String');
            }
            if (data.hasOwnProperty('sellingPrice')) {
                obj['sellingPrice'] = ApiClient.convertToType(data['sellingPrice'], 'Number');
            }
            if (data.hasOwnProperty('shippingEstimate')) {
                obj['shippingEstimate'] = ApiClient.convertToType(data['shippingEstimate'], 'String');
            }
            if (data.hasOwnProperty('shippingEstimateDate')) {
                obj['shippingEstimateDate'] = ApiClient.convertToType(data['shippingEstimateDate'], 'String');
            }
            if (data.hasOwnProperty('shipsTo')) {
                obj['shipsTo'] = ApiClient.convertToType(data['shipsTo'], ['String']);
            }
            if (data.hasOwnProperty('slas')) {
                obj['slas'] = ApiClient.convertToType(data['slas'], [Sla]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogisticsInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogisticsInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LogisticsInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['addressId'] && !(typeof data['addressId'] === 'string' || data['addressId'] instanceof String)) {
            throw new Error("Expected the field `addressId` to be a primitive type in the JSON string but got " + data['addressId']);
        }
        // ensure the json data is a string
        if (data['deliveryChannel'] && !(typeof data['deliveryChannel'] === 'string' || data['deliveryChannel'] instanceof String)) {
            throw new Error("Expected the field `deliveryChannel` to be a primitive type in the JSON string but got " + data['deliveryChannel']);
        }
        // ensure the json data is a string
        if (data['deliveryCompany'] && !(typeof data['deliveryCompany'] === 'string' || data['deliveryCompany'] instanceof String)) {
            throw new Error("Expected the field `deliveryCompany` to be a primitive type in the JSON string but got " + data['deliveryCompany']);
        }
        if (data['deliveryIds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['deliveryIds'])) {
                throw new Error("Expected the field `deliveryIds` to be an array in the JSON data but got " + data['deliveryIds']);
            }
            // validate the optional field `deliveryIds` (array)
            for (const item of data['deliveryIds']) {
                DeliveryId.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['deliveryWindow'] && !(typeof data['deliveryWindow'] === 'string' || data['deliveryWindow'] instanceof String)) {
            throw new Error("Expected the field `deliveryWindow` to be a primitive type in the JSON string but got " + data['deliveryWindow']);
        }
        // ensure the json data is a string
        if (data['lockTTL'] && !(typeof data['lockTTL'] === 'string' || data['lockTTL'] instanceof String)) {
            throw new Error("Expected the field `lockTTL` to be a primitive type in the JSON string but got " + data['lockTTL']);
        }
        // validate the optional field `pickupStoreInfo`
        if (data['pickupStoreInfo']) { // data not null
          PickupStoreInfo.validateJSON(data['pickupStoreInfo']);
        }
        // ensure the json data is a string
        if (data['polygonName'] && !(typeof data['polygonName'] === 'string' || data['polygonName'] instanceof String)) {
            throw new Error("Expected the field `polygonName` to be a primitive type in the JSON string but got " + data['polygonName']);
        }
        // ensure the json data is a string
        if (data['selectedSla'] && !(typeof data['selectedSla'] === 'string' || data['selectedSla'] instanceof String)) {
            throw new Error("Expected the field `selectedSla` to be a primitive type in the JSON string but got " + data['selectedSla']);
        }
        // ensure the json data is a string
        if (data['shippingEstimate'] && !(typeof data['shippingEstimate'] === 'string' || data['shippingEstimate'] instanceof String)) {
            throw new Error("Expected the field `shippingEstimate` to be a primitive type in the JSON string but got " + data['shippingEstimate']);
        }
        // ensure the json data is a string
        if (data['shippingEstimateDate'] && !(typeof data['shippingEstimateDate'] === 'string' || data['shippingEstimateDate'] instanceof String)) {
            throw new Error("Expected the field `shippingEstimateDate` to be a primitive type in the JSON string but got " + data['shippingEstimateDate']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['shipsTo'])) {
            throw new Error("Expected the field `shipsTo` to be an array in the JSON data but got " + data['shipsTo']);
        }
        if (data['slas']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['slas'])) {
                throw new Error("Expected the field `slas` to be an array in the JSON data but got " + data['slas']);
            }
            // validate the optional field `slas` (array)
            for (const item of data['slas']) {
                Sla.validateJSON(item);
            };
        }

        return true;
    }


}

LogisticsInfo.RequiredProperties = ["addressId", "deliveryChannel", "deliveryCompany", "deliveryIds", "deliveryWindow", "itemIndex", "listPrice", "lockTTL", "pickupStoreInfo", "polygonName", "price", "selectedSla", "sellingPrice", "shippingEstimate", "shippingEstimateDate", "shipsTo", "slas"];

/**
 * Address ID.
 * @member {String} addressId
 */
LogisticsInfo.prototype['addressId'] = undefined;

/**
 * Delivery channel.
 * @member {String} deliveryChannel
 */
LogisticsInfo.prototype['deliveryChannel'] = undefined;

/**
 * Delivery company.
 * @member {String} deliveryCompany
 */
LogisticsInfo.prototype['deliveryCompany'] = undefined;

/**
 * Array of delivery IDs.
 * @member {Array.<module:model/DeliveryId>} deliveryIds
 */
LogisticsInfo.prototype['deliveryIds'] = undefined;

/**
 * Delivery window information.
 * @member {String} deliveryWindow
 */
LogisticsInfo.prototype['deliveryWindow'] = undefined;

/**
 * Item index, matching the index in the `items` array.
 * @member {Number} itemIndex
 */
LogisticsInfo.prototype['itemIndex'] = undefined;

/**
 * List price in cents.
 * @member {Number} listPrice
 */
LogisticsInfo.prototype['listPrice'] = undefined;

/**
 * Reservation lasting period.
 * @member {String} lockTTL
 */
LogisticsInfo.prototype['lockTTL'] = undefined;

/**
 * @member {module:model/PickupStoreInfo} pickupStoreInfo
 */
LogisticsInfo.prototype['pickupStoreInfo'] = undefined;

/**
 * Polygon name.
 * @member {String} polygonName
 */
LogisticsInfo.prototype['polygonName'] = undefined;

/**
 * Prince in cents.
 * @member {Number} price
 */
LogisticsInfo.prototype['price'] = undefined;

/**
 * Selected SLA.
 * @member {String} selectedSla
 */
LogisticsInfo.prototype['selectedSla'] = undefined;

/**
 * Selling price in cents.
 * @member {Number} sellingPrice
 */
LogisticsInfo.prototype['sellingPrice'] = undefined;

/**
 * Shipping estimate.
 * @member {String} shippingEstimate
 */
LogisticsInfo.prototype['shippingEstimate'] = undefined;

/**
 * Shipping estimate date.
 * @member {String} shippingEstimateDate
 */
LogisticsInfo.prototype['shippingEstimateDate'] = undefined;

/**
 * List of countries (three letter ISO code) to which shipping is available.
 * @member {Array.<String>} shipsTo
 */
LogisticsInfo.prototype['shipsTo'] = undefined;

/**
 * Array with information on the SLAs.
 * @member {Array.<module:model/Sla>} slas
 */
LogisticsInfo.prototype['slas'] = undefined;






export default LogisticsInfo;

