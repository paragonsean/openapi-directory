/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeliveryId model module.
 * @module model/DeliveryId
 * @version 1.0
 */
class DeliveryId {
    /**
     * Constructs a new <code>DeliveryId</code>.
     * @alias module:model/DeliveryId
     * @param courierId {String} Courier ID.
     * @param courierName {String} Courier name.
     * @param dockId {String} Dock ID.
     * @param quantity {Number} Quantity.
     * @param warehouseId {String} Warehouse ID.
     */
    constructor(courierId, courierName, dockId, quantity, warehouseId) { 
        
        DeliveryId.initialize(this, courierId, courierName, dockId, quantity, warehouseId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, courierId, courierName, dockId, quantity, warehouseId) { 
        obj['courierId'] = courierId;
        obj['courierName'] = courierName;
        obj['dockId'] = dockId;
        obj['quantity'] = quantity;
        obj['warehouseId'] = warehouseId;
    }

    /**
     * Constructs a <code>DeliveryId</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeliveryId} obj Optional instance to populate.
     * @return {module:model/DeliveryId} The populated <code>DeliveryId</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeliveryId();

            if (data.hasOwnProperty('courierId')) {
                obj['courierId'] = ApiClient.convertToType(data['courierId'], 'String');
            }
            if (data.hasOwnProperty('courierName')) {
                obj['courierName'] = ApiClient.convertToType(data['courierName'], 'String');
            }
            if (data.hasOwnProperty('dockId')) {
                obj['dockId'] = ApiClient.convertToType(data['dockId'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('warehouseId')) {
                obj['warehouseId'] = ApiClient.convertToType(data['warehouseId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeliveryId</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeliveryId</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeliveryId.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['courierId'] && !(typeof data['courierId'] === 'string' || data['courierId'] instanceof String)) {
            throw new Error("Expected the field `courierId` to be a primitive type in the JSON string but got " + data['courierId']);
        }
        // ensure the json data is a string
        if (data['courierName'] && !(typeof data['courierName'] === 'string' || data['courierName'] instanceof String)) {
            throw new Error("Expected the field `courierName` to be a primitive type in the JSON string but got " + data['courierName']);
        }
        // ensure the json data is a string
        if (data['dockId'] && !(typeof data['dockId'] === 'string' || data['dockId'] instanceof String)) {
            throw new Error("Expected the field `dockId` to be a primitive type in the JSON string but got " + data['dockId']);
        }
        // ensure the json data is a string
        if (data['warehouseId'] && !(typeof data['warehouseId'] === 'string' || data['warehouseId'] instanceof String)) {
            throw new Error("Expected the field `warehouseId` to be a primitive type in the JSON string but got " + data['warehouseId']);
        }

        return true;
    }


}

DeliveryId.RequiredProperties = ["courierId", "courierName", "dockId", "quantity", "warehouseId"];

/**
 * Courier ID.
 * @member {String} courierId
 */
DeliveryId.prototype['courierId'] = undefined;

/**
 * Courier name.
 * @member {String} courierName
 */
DeliveryId.prototype['courierName'] = undefined;

/**
 * Dock ID.
 * @member {String} dockId
 */
DeliveryId.prototype['dockId'] = undefined;

/**
 * Quantity.
 * @member {Number} quantity
 */
DeliveryId.prototype['quantity'] = undefined;

/**
 * Warehouse ID.
 * @member {String} warehouseId
 */
DeliveryId.prototype['warehouseId'] = undefined;






export default DeliveryId;

