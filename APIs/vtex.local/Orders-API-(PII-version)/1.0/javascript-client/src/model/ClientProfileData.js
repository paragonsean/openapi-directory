/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ClientProfileData model module.
 * @module model/ClientProfileData
 * @version 1.0
 */
class ClientProfileData {
    /**
     * Constructs a new <code>ClientProfileData</code>.
     * @alias module:model/ClientProfileData
     * @param corporateDocument {String} Company document, in case client is corporate.
     * @param corporateName {String} Company name, in case client is corporate.
     * @param corporatePhone {String} Company telephone number, in case client is corporate.
     * @param customerClass {String} Customer class.
     * @param document {String} Client document.
     * @param documentType {String} Client document type.
     * @param email {String} Client email address.
     * @param firstName {String} Client first name.
     * @param id {String} Client ID.
     * @param isCorporate {Boolean} Indicates whether client is corporate.
     * @param lastName {String} Client last name.
     * @param phone {String} Client telephone number.
     * @param stateInscription {String} Company state inscription, in case client is corporate.
     * @param tradeName {String} Company trade name, in case client is corporate.
     * @param userProfileId {String} User profile ID.
     */
    constructor(corporateDocument, corporateName, corporatePhone, customerClass, document, documentType, email, firstName, id, isCorporate, lastName, phone, stateInscription, tradeName, userProfileId) { 
        
        ClientProfileData.initialize(this, corporateDocument, corporateName, corporatePhone, customerClass, document, documentType, email, firstName, id, isCorporate, lastName, phone, stateInscription, tradeName, userProfileId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, corporateDocument, corporateName, corporatePhone, customerClass, document, documentType, email, firstName, id, isCorporate, lastName, phone, stateInscription, tradeName, userProfileId) { 
        obj['corporateDocument'] = corporateDocument;
        obj['corporateName'] = corporateName;
        obj['corporatePhone'] = corporatePhone;
        obj['customerClass'] = customerClass;
        obj['document'] = document;
        obj['documentType'] = documentType;
        obj['email'] = email;
        obj['firstName'] = firstName;
        obj['id'] = id;
        obj['isCorporate'] = isCorporate;
        obj['lastName'] = lastName;
        obj['phone'] = phone;
        obj['stateInscription'] = stateInscription;
        obj['tradeName'] = tradeName;
        obj['userProfileId'] = userProfileId;
    }

    /**
     * Constructs a <code>ClientProfileData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClientProfileData} obj Optional instance to populate.
     * @return {module:model/ClientProfileData} The populated <code>ClientProfileData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClientProfileData();

            if (data.hasOwnProperty('corporateDocument')) {
                obj['corporateDocument'] = ApiClient.convertToType(data['corporateDocument'], 'String');
            }
            if (data.hasOwnProperty('corporateName')) {
                obj['corporateName'] = ApiClient.convertToType(data['corporateName'], 'String');
            }
            if (data.hasOwnProperty('corporatePhone')) {
                obj['corporatePhone'] = ApiClient.convertToType(data['corporatePhone'], 'String');
            }
            if (data.hasOwnProperty('customerClass')) {
                obj['customerClass'] = ApiClient.convertToType(data['customerClass'], 'String');
            }
            if (data.hasOwnProperty('document')) {
                obj['document'] = ApiClient.convertToType(data['document'], 'String');
            }
            if (data.hasOwnProperty('documentType')) {
                obj['documentType'] = ApiClient.convertToType(data['documentType'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isCorporate')) {
                obj['isCorporate'] = ApiClient.convertToType(data['isCorporate'], 'Boolean');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('stateInscription')) {
                obj['stateInscription'] = ApiClient.convertToType(data['stateInscription'], 'String');
            }
            if (data.hasOwnProperty('tradeName')) {
                obj['tradeName'] = ApiClient.convertToType(data['tradeName'], 'String');
            }
            if (data.hasOwnProperty('userProfileId')) {
                obj['userProfileId'] = ApiClient.convertToType(data['userProfileId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClientProfileData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClientProfileData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ClientProfileData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['corporateDocument'] && !(typeof data['corporateDocument'] === 'string' || data['corporateDocument'] instanceof String)) {
            throw new Error("Expected the field `corporateDocument` to be a primitive type in the JSON string but got " + data['corporateDocument']);
        }
        // ensure the json data is a string
        if (data['corporateName'] && !(typeof data['corporateName'] === 'string' || data['corporateName'] instanceof String)) {
            throw new Error("Expected the field `corporateName` to be a primitive type in the JSON string but got " + data['corporateName']);
        }
        // ensure the json data is a string
        if (data['corporatePhone'] && !(typeof data['corporatePhone'] === 'string' || data['corporatePhone'] instanceof String)) {
            throw new Error("Expected the field `corporatePhone` to be a primitive type in the JSON string but got " + data['corporatePhone']);
        }
        // ensure the json data is a string
        if (data['customerClass'] && !(typeof data['customerClass'] === 'string' || data['customerClass'] instanceof String)) {
            throw new Error("Expected the field `customerClass` to be a primitive type in the JSON string but got " + data['customerClass']);
        }
        // ensure the json data is a string
        if (data['document'] && !(typeof data['document'] === 'string' || data['document'] instanceof String)) {
            throw new Error("Expected the field `document` to be a primitive type in the JSON string but got " + data['document']);
        }
        // ensure the json data is a string
        if (data['documentType'] && !(typeof data['documentType'] === 'string' || data['documentType'] instanceof String)) {
            throw new Error("Expected the field `documentType` to be a primitive type in the JSON string but got " + data['documentType']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['stateInscription'] && !(typeof data['stateInscription'] === 'string' || data['stateInscription'] instanceof String)) {
            throw new Error("Expected the field `stateInscription` to be a primitive type in the JSON string but got " + data['stateInscription']);
        }
        // ensure the json data is a string
        if (data['tradeName'] && !(typeof data['tradeName'] === 'string' || data['tradeName'] instanceof String)) {
            throw new Error("Expected the field `tradeName` to be a primitive type in the JSON string but got " + data['tradeName']);
        }
        // ensure the json data is a string
        if (data['userProfileId'] && !(typeof data['userProfileId'] === 'string' || data['userProfileId'] instanceof String)) {
            throw new Error("Expected the field `userProfileId` to be a primitive type in the JSON string but got " + data['userProfileId']);
        }

        return true;
    }


}

ClientProfileData.RequiredProperties = ["corporateDocument", "corporateName", "corporatePhone", "customerClass", "document", "documentType", "email", "firstName", "id", "isCorporate", "lastName", "phone", "stateInscription", "tradeName", "userProfileId"];

/**
 * Company document, in case client is corporate.
 * @member {String} corporateDocument
 */
ClientProfileData.prototype['corporateDocument'] = undefined;

/**
 * Company name, in case client is corporate.
 * @member {String} corporateName
 */
ClientProfileData.prototype['corporateName'] = undefined;

/**
 * Company telephone number, in case client is corporate.
 * @member {String} corporatePhone
 */
ClientProfileData.prototype['corporatePhone'] = undefined;

/**
 * Customer class.
 * @member {String} customerClass
 */
ClientProfileData.prototype['customerClass'] = undefined;

/**
 * Client document.
 * @member {String} document
 */
ClientProfileData.prototype['document'] = undefined;

/**
 * Client document type.
 * @member {String} documentType
 */
ClientProfileData.prototype['documentType'] = undefined;

/**
 * Client email address.
 * @member {String} email
 */
ClientProfileData.prototype['email'] = undefined;

/**
 * Client first name.
 * @member {String} firstName
 */
ClientProfileData.prototype['firstName'] = undefined;

/**
 * Client ID.
 * @member {String} id
 */
ClientProfileData.prototype['id'] = undefined;

/**
 * Indicates whether client is corporate.
 * @member {Boolean} isCorporate
 */
ClientProfileData.prototype['isCorporate'] = undefined;

/**
 * Client last name.
 * @member {String} lastName
 */
ClientProfileData.prototype['lastName'] = undefined;

/**
 * Client telephone number.
 * @member {String} phone
 */
ClientProfileData.prototype['phone'] = undefined;

/**
 * Company state inscription, in case client is corporate.
 * @member {String} stateInscription
 */
ClientProfileData.prototype['stateInscription'] = undefined;

/**
 * Company trade name, in case client is corporate.
 * @member {String} tradeName
 */
ClientProfileData.prototype['tradeName'] = undefined;

/**
 * User profile ID.
 * @member {String} userProfileId
 */
ClientProfileData.prototype['userProfileId'] = undefined;






export default ClientProfileData;

