/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Item1 model module.
 * @module model/Item1
 * @version 1.0
 */
class Item1 {
    /**
     * Constructs a new <code>Item1</code>.
     * @alias module:model/Item1
     * @param itemIndex {String} Index of the SKU being invoiced.
     * @param price {Number} Total price of the SKU being invoiced in cents. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.
     * @param quantity {Number} Quantity cof the SKU being invoiced.
     */
    constructor(itemIndex, price, quantity) { 
        
        Item1.initialize(this, itemIndex, price, quantity);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, itemIndex, price, quantity) { 
        obj['itemIndex'] = itemIndex;
        obj['price'] = price;
        obj['quantity'] = quantity;
    }

    /**
     * Constructs a <code>Item1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Item1} obj Optional instance to populate.
     * @return {module:model/Item1} The populated <code>Item1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Item1();

            if (data.hasOwnProperty('itemIndex')) {
                obj['itemIndex'] = ApiClient.convertToType(data['itemIndex'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Item1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Item1</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Item1.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['itemIndex'] && !(typeof data['itemIndex'] === 'string' || data['itemIndex'] instanceof String)) {
            throw new Error("Expected the field `itemIndex` to be a primitive type in the JSON string but got " + data['itemIndex']);
        }

        return true;
    }


}

Item1.RequiredProperties = ["itemIndex", "price", "quantity"];

/**
 * Index of the SKU being invoiced.
 * @member {String} itemIndex
 */
Item1.prototype['itemIndex'] = undefined;

/**
 * Total price of the SKU being invoiced in cents. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.
 * @member {Number} price
 */
Item1.prototype['price'] = undefined;

/**
 * Quantity cof the SKU being invoiced.
 * @member {Number} quantity
 */
Item1.prototype['quantity'] = undefined;






export default Item1;

