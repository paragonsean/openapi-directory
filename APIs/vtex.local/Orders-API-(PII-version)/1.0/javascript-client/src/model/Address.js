/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Address model module.
 * @module model/Address
 * @version 1.0
 */
class Address {
    /**
     * Constructs a new <code>Address</code>.
     * @alias module:model/Address
     * @param addressId {String} Address ID.
     * @param addressType {String} Address type.
     * @param city {String} Address city.
     * @param complement {String} Address complement.
     * @param country {String} Address country.
     * @param geoCoordinates {Array.<String>} Geolocation coordinates.
     * @param neighborhood {String} Address neighborhood.
     * @param number {String} Address number.
     * @param postalCode {String} Address postal code.
     * @param receiverName {String} Address receiver name.
     * @param reference {String} Address reference.
     * @param state {String} Address state.
     * @param street {String} Address street.
     */
    constructor(addressId, addressType, city, complement, country, geoCoordinates, neighborhood, number, postalCode, receiverName, reference, state, street) { 
        
        Address.initialize(this, addressId, addressType, city, complement, country, geoCoordinates, neighborhood, number, postalCode, receiverName, reference, state, street);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, addressId, addressType, city, complement, country, geoCoordinates, neighborhood, number, postalCode, receiverName, reference, state, street) { 
        obj['addressId'] = addressId;
        obj['addressType'] = addressType;
        obj['city'] = city;
        obj['complement'] = complement;
        obj['country'] = country;
        obj['geoCoordinates'] = geoCoordinates;
        obj['neighborhood'] = neighborhood;
        obj['number'] = number;
        obj['postalCode'] = postalCode;
        obj['receiverName'] = receiverName;
        obj['reference'] = reference;
        obj['state'] = state;
        obj['street'] = street;
    }

    /**
     * Constructs a <code>Address</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Address} obj Optional instance to populate.
     * @return {module:model/Address} The populated <code>Address</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Address();

            if (data.hasOwnProperty('addressId')) {
                obj['addressId'] = ApiClient.convertToType(data['addressId'], 'String');
            }
            if (data.hasOwnProperty('addressType')) {
                obj['addressType'] = ApiClient.convertToType(data['addressType'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('complement')) {
                obj['complement'] = ApiClient.convertToType(data['complement'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('geoCoordinates')) {
                obj['geoCoordinates'] = ApiClient.convertToType(data['geoCoordinates'], ['String']);
            }
            if (data.hasOwnProperty('neighborhood')) {
                obj['neighborhood'] = ApiClient.convertToType(data['neighborhood'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('receiverName')) {
                obj['receiverName'] = ApiClient.convertToType(data['receiverName'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Address</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Address</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Address.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['addressId'] && !(typeof data['addressId'] === 'string' || data['addressId'] instanceof String)) {
            throw new Error("Expected the field `addressId` to be a primitive type in the JSON string but got " + data['addressId']);
        }
        // ensure the json data is a string
        if (data['addressType'] && !(typeof data['addressType'] === 'string' || data['addressType'] instanceof String)) {
            throw new Error("Expected the field `addressType` to be a primitive type in the JSON string but got " + data['addressType']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['complement'] && !(typeof data['complement'] === 'string' || data['complement'] instanceof String)) {
            throw new Error("Expected the field `complement` to be a primitive type in the JSON string but got " + data['complement']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['geoCoordinates'])) {
            throw new Error("Expected the field `geoCoordinates` to be an array in the JSON data but got " + data['geoCoordinates']);
        }
        // ensure the json data is a string
        if (data['neighborhood'] && !(typeof data['neighborhood'] === 'string' || data['neighborhood'] instanceof String)) {
            throw new Error("Expected the field `neighborhood` to be a primitive type in the JSON string but got " + data['neighborhood']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['receiverName'] && !(typeof data['receiverName'] === 'string' || data['receiverName'] instanceof String)) {
            throw new Error("Expected the field `receiverName` to be a primitive type in the JSON string but got " + data['receiverName']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }

        return true;
    }


}

Address.RequiredProperties = ["addressId", "addressType", "city", "complement", "country", "geoCoordinates", "neighborhood", "number", "postalCode", "receiverName", "reference", "state", "street"];

/**
 * Address ID.
 * @member {String} addressId
 */
Address.prototype['addressId'] = undefined;

/**
 * Address type.
 * @member {String} addressType
 */
Address.prototype['addressType'] = undefined;

/**
 * Address city.
 * @member {String} city
 */
Address.prototype['city'] = undefined;

/**
 * Address complement.
 * @member {String} complement
 */
Address.prototype['complement'] = undefined;

/**
 * Address country.
 * @member {String} country
 */
Address.prototype['country'] = undefined;

/**
 * Geolocation coordinates.
 * @member {Array.<String>} geoCoordinates
 */
Address.prototype['geoCoordinates'] = undefined;

/**
 * Address neighborhood.
 * @member {String} neighborhood
 */
Address.prototype['neighborhood'] = undefined;

/**
 * Address number.
 * @member {String} number
 */
Address.prototype['number'] = undefined;

/**
 * Address postal code.
 * @member {String} postalCode
 */
Address.prototype['postalCode'] = undefined;

/**
 * Address receiver name.
 * @member {String} receiverName
 */
Address.prototype['receiverName'] = undefined;

/**
 * Address reference.
 * @member {String} reference
 */
Address.prototype['reference'] = undefined;

/**
 * Address state.
 * @member {String} state
 */
Address.prototype['state'] = undefined;

/**
 * Address street.
 * @member {String} street
 */
Address.prototype['street'] = undefined;






export default Address;

