/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Marketplace model module.
 * @module model/Marketplace
 * @version 1.0
 */
class Marketplace {
    /**
     * Constructs a new <code>Marketplace</code>.
     * @alias module:model/Marketplace
     * @param baseURL {String} Marketplace base URL.
     * @param isCertified {String} Indicates whether marketplace is certified.
     * @param name {String} Marketplace name.
     */
    constructor(baseURL, isCertified, name) { 
        
        Marketplace.initialize(this, baseURL, isCertified, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, baseURL, isCertified, name) { 
        obj['baseURL'] = baseURL;
        obj['isCertified'] = isCertified;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Marketplace</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Marketplace} obj Optional instance to populate.
     * @return {module:model/Marketplace} The populated <code>Marketplace</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Marketplace();

            if (data.hasOwnProperty('baseURL')) {
                obj['baseURL'] = ApiClient.convertToType(data['baseURL'], 'String');
            }
            if (data.hasOwnProperty('isCertified')) {
                obj['isCertified'] = ApiClient.convertToType(data['isCertified'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Marketplace</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Marketplace</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Marketplace.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['baseURL'] && !(typeof data['baseURL'] === 'string' || data['baseURL'] instanceof String)) {
            throw new Error("Expected the field `baseURL` to be a primitive type in the JSON string but got " + data['baseURL']);
        }
        // ensure the json data is a string
        if (data['isCertified'] && !(typeof data['isCertified'] === 'string' || data['isCertified'] instanceof String)) {
            throw new Error("Expected the field `isCertified` to be a primitive type in the JSON string but got " + data['isCertified']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

Marketplace.RequiredProperties = ["baseURL", "isCertified", "name"];

/**
 * Marketplace base URL.
 * @member {String} baseURL
 */
Marketplace.prototype['baseURL'] = undefined;

/**
 * Indicates whether marketplace is certified.
 * @member {String} isCertified
 */
Marketplace.prototype['isCertified'] = undefined;

/**
 * Marketplace name.
 * @member {String} name
 */
Marketplace.prototype['name'] = undefined;






export default Marketplace;

