/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CurrencyFormatInfo model module.
 * @module model/CurrencyFormatInfo
 * @version 1.0
 */
class CurrencyFormatInfo {
    /**
     * Constructs a new <code>CurrencyFormatInfo</code>.
     * @alias module:model/CurrencyFormatInfo
     * @param currencyDecimalDigits {Number} Currency decimal digits.
     * @param currencyDecimalSeparator {String} Currency decimal separator.
     * @param currencyGroupSeparator {String} Currency group separator.
     * @param currencyGroupSize {Number} Currency group size.
     * @param startsWithCurrencySymbol {Boolean} Indicates whether value representations start with currency symbol.
     */
    constructor(currencyDecimalDigits, currencyDecimalSeparator, currencyGroupSeparator, currencyGroupSize, startsWithCurrencySymbol) { 
        
        CurrencyFormatInfo.initialize(this, currencyDecimalDigits, currencyDecimalSeparator, currencyGroupSeparator, currencyGroupSize, startsWithCurrencySymbol);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currencyDecimalDigits, currencyDecimalSeparator, currencyGroupSeparator, currencyGroupSize, startsWithCurrencySymbol) { 
        obj['CurrencyDecimalDigits'] = currencyDecimalDigits;
        obj['CurrencyDecimalSeparator'] = currencyDecimalSeparator;
        obj['CurrencyGroupSeparator'] = currencyGroupSeparator;
        obj['CurrencyGroupSize'] = currencyGroupSize;
        obj['StartsWithCurrencySymbol'] = startsWithCurrencySymbol;
    }

    /**
     * Constructs a <code>CurrencyFormatInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CurrencyFormatInfo} obj Optional instance to populate.
     * @return {module:model/CurrencyFormatInfo} The populated <code>CurrencyFormatInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CurrencyFormatInfo();

            if (data.hasOwnProperty('CurrencyDecimalDigits')) {
                obj['CurrencyDecimalDigits'] = ApiClient.convertToType(data['CurrencyDecimalDigits'], 'Number');
            }
            if (data.hasOwnProperty('CurrencyDecimalSeparator')) {
                obj['CurrencyDecimalSeparator'] = ApiClient.convertToType(data['CurrencyDecimalSeparator'], 'String');
            }
            if (data.hasOwnProperty('CurrencyGroupSeparator')) {
                obj['CurrencyGroupSeparator'] = ApiClient.convertToType(data['CurrencyGroupSeparator'], 'String');
            }
            if (data.hasOwnProperty('CurrencyGroupSize')) {
                obj['CurrencyGroupSize'] = ApiClient.convertToType(data['CurrencyGroupSize'], 'Number');
            }
            if (data.hasOwnProperty('StartsWithCurrencySymbol')) {
                obj['StartsWithCurrencySymbol'] = ApiClient.convertToType(data['StartsWithCurrencySymbol'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CurrencyFormatInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CurrencyFormatInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CurrencyFormatInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CurrencyDecimalSeparator'] && !(typeof data['CurrencyDecimalSeparator'] === 'string' || data['CurrencyDecimalSeparator'] instanceof String)) {
            throw new Error("Expected the field `CurrencyDecimalSeparator` to be a primitive type in the JSON string but got " + data['CurrencyDecimalSeparator']);
        }
        // ensure the json data is a string
        if (data['CurrencyGroupSeparator'] && !(typeof data['CurrencyGroupSeparator'] === 'string' || data['CurrencyGroupSeparator'] instanceof String)) {
            throw new Error("Expected the field `CurrencyGroupSeparator` to be a primitive type in the JSON string but got " + data['CurrencyGroupSeparator']);
        }

        return true;
    }


}

CurrencyFormatInfo.RequiredProperties = ["CurrencyDecimalDigits", "CurrencyDecimalSeparator", "CurrencyGroupSeparator", "CurrencyGroupSize", "StartsWithCurrencySymbol"];

/**
 * Currency decimal digits.
 * @member {Number} CurrencyDecimalDigits
 */
CurrencyFormatInfo.prototype['CurrencyDecimalDigits'] = undefined;

/**
 * Currency decimal separator.
 * @member {String} CurrencyDecimalSeparator
 */
CurrencyFormatInfo.prototype['CurrencyDecimalSeparator'] = undefined;

/**
 * Currency group separator.
 * @member {String} CurrencyGroupSeparator
 */
CurrencyFormatInfo.prototype['CurrencyGroupSeparator'] = undefined;

/**
 * Currency group size.
 * @member {Number} CurrencyGroupSize
 */
CurrencyFormatInfo.prototype['CurrencyGroupSize'] = undefined;

/**
 * Indicates whether value representations start with currency symbol.
 * @member {Boolean} StartsWithCurrencySymbol
 */
CurrencyFormatInfo.prototype['StartsWithCurrencySymbol'] = undefined;






export default CurrencyFormatInfo;

