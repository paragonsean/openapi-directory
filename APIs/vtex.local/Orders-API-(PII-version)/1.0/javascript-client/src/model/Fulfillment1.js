/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Fulfillment1 model module.
 * @module model/Fulfillment1
 * @version 1.0
 */
class Fulfillment1 {
    /**
     * Constructs a new <code>Fulfillment1</code>.
     * @alias module:model/Fulfillment1
     * @param count {Number} Count.
     * @param facets {String} Facets.
     * @param max {Number} Maximum.
     * @param mean {Number} Mean.
     * @param min {Number} Minimum.
     * @param missing {Number} Missing.
     * @param stdDev {Number} Standard deviation.
     * @param sum {Number} Sum.
     * @param sumOfSquares {Number} Sum of squares.
     */
    constructor(count, facets, max, mean, min, missing, stdDev, sum, sumOfSquares) { 
        
        Fulfillment1.initialize(this, count, facets, max, mean, min, missing, stdDev, sum, sumOfSquares);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, count, facets, max, mean, min, missing, stdDev, sum, sumOfSquares) { 
        obj['Count'] = count;
        obj['Facets'] = facets;
        obj['Max'] = max;
        obj['Mean'] = mean;
        obj['Min'] = min;
        obj['Missing'] = missing;
        obj['StdDev'] = stdDev;
        obj['Sum'] = sum;
        obj['SumOfSquares'] = sumOfSquares;
    }

    /**
     * Constructs a <code>Fulfillment1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Fulfillment1} obj Optional instance to populate.
     * @return {module:model/Fulfillment1} The populated <code>Fulfillment1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Fulfillment1();

            if (data.hasOwnProperty('Count')) {
                obj['Count'] = ApiClient.convertToType(data['Count'], 'Number');
            }
            if (data.hasOwnProperty('Facets')) {
                obj['Facets'] = ApiClient.convertToType(data['Facets'], 'String');
            }
            if (data.hasOwnProperty('Max')) {
                obj['Max'] = ApiClient.convertToType(data['Max'], 'Number');
            }
            if (data.hasOwnProperty('Mean')) {
                obj['Mean'] = ApiClient.convertToType(data['Mean'], 'Number');
            }
            if (data.hasOwnProperty('Min')) {
                obj['Min'] = ApiClient.convertToType(data['Min'], 'Number');
            }
            if (data.hasOwnProperty('Missing')) {
                obj['Missing'] = ApiClient.convertToType(data['Missing'], 'Number');
            }
            if (data.hasOwnProperty('StdDev')) {
                obj['StdDev'] = ApiClient.convertToType(data['StdDev'], 'Number');
            }
            if (data.hasOwnProperty('Sum')) {
                obj['Sum'] = ApiClient.convertToType(data['Sum'], 'Number');
            }
            if (data.hasOwnProperty('SumOfSquares')) {
                obj['SumOfSquares'] = ApiClient.convertToType(data['SumOfSquares'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Fulfillment1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Fulfillment1</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Fulfillment1.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Facets'] && !(typeof data['Facets'] === 'string' || data['Facets'] instanceof String)) {
            throw new Error("Expected the field `Facets` to be a primitive type in the JSON string but got " + data['Facets']);
        }

        return true;
    }


}

Fulfillment1.RequiredProperties = ["Count", "Facets", "Max", "Mean", "Min", "Missing", "StdDev", "Sum", "SumOfSquares"];

/**
 * Count.
 * @member {Number} Count
 */
Fulfillment1.prototype['Count'] = undefined;

/**
 * Facets.
 * @member {String} Facets
 */
Fulfillment1.prototype['Facets'] = undefined;

/**
 * Maximum.
 * @member {Number} Max
 */
Fulfillment1.prototype['Max'] = undefined;

/**
 * Mean.
 * @member {Number} Mean
 */
Fulfillment1.prototype['Mean'] = undefined;

/**
 * Minimum.
 * @member {Number} Min
 */
Fulfillment1.prototype['Min'] = undefined;

/**
 * Missing.
 * @member {Number} Missing
 */
Fulfillment1.prototype['Missing'] = undefined;

/**
 * Standard deviation.
 * @member {Number} StdDev
 */
Fulfillment1.prototype['StdDev'] = undefined;

/**
 * Sum.
 * @member {Number} Sum
 */
Fulfillment1.prototype['Sum'] = undefined;

/**
 * Sum of squares.
 * @member {Number} SumOfSquares
 */
Fulfillment1.prototype['SumOfSquares'] = undefined;






export default Fulfillment1;

