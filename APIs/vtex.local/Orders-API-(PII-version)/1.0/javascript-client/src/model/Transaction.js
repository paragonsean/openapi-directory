/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Payment from './Payment';

/**
 * The Transaction model module.
 * @module model/Transaction
 * @version 1.0
 */
class Transaction {
    /**
     * Constructs a new <code>Transaction</code>.
     * @alias module:model/Transaction
     * @param isActive {Boolean} Indicates whether transaction is active.
     * @param merchantName {String} Merchant name.
     * @param payments {Array.<module:model/Payment>} Array with information on each payment for the order.
     * @param transactionId {String} Transaction ID.
     */
    constructor(isActive, merchantName, payments, transactionId) { 
        
        Transaction.initialize(this, isActive, merchantName, payments, transactionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, isActive, merchantName, payments, transactionId) { 
        obj['isActive'] = isActive;
        obj['merchantName'] = merchantName;
        obj['payments'] = payments;
        obj['transactionId'] = transactionId;
    }

    /**
     * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transaction} obj Optional instance to populate.
     * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction();

            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('merchantName')) {
                obj['merchantName'] = ApiClient.convertToType(data['merchantName'], 'String');
            }
            if (data.hasOwnProperty('payments')) {
                obj['payments'] = ApiClient.convertToType(data['payments'], [Payment]);
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transaction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Transaction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['merchantName'] && !(typeof data['merchantName'] === 'string' || data['merchantName'] instanceof String)) {
            throw new Error("Expected the field `merchantName` to be a primitive type in the JSON string but got " + data['merchantName']);
        }
        if (data['payments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['payments'])) {
                throw new Error("Expected the field `payments` to be an array in the JSON data but got " + data['payments']);
            }
            // validate the optional field `payments` (array)
            for (const item of data['payments']) {
                Payment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['transactionId'] && !(typeof data['transactionId'] === 'string' || data['transactionId'] instanceof String)) {
            throw new Error("Expected the field `transactionId` to be a primitive type in the JSON string but got " + data['transactionId']);
        }

        return true;
    }


}

Transaction.RequiredProperties = ["isActive", "merchantName", "payments", "transactionId"];

/**
 * Indicates whether transaction is active.
 * @member {Boolean} isActive
 */
Transaction.prototype['isActive'] = undefined;

/**
 * Merchant name.
 * @member {String} merchantName
 */
Transaction.prototype['merchantName'] = undefined;

/**
 * Array with information on each payment for the order.
 * @member {Array.<module:model/Payment>} payments
 */
Transaction.prototype['payments'] = undefined;

/**
 * Transaction ID.
 * @member {String} transactionId
 */
Transaction.prototype['transactionId'] = undefined;






export default Transaction;

