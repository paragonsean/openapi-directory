/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PickupStoreInfo model module.
 * @module model/PickupStoreInfo
 * @version 1.0
 */
class PickupStoreInfo {
    /**
     * Constructs a new <code>PickupStoreInfo</code>.
     * @alias module:model/PickupStoreInfo
     * @param additionalInfo {String} Pickup additional information.
     * @param address {String} Pickup address.
     * @param dockId {String} Pickup dock ID.
     * @param friendlyName {String} Pickup friendly name.
     * @param isPickupStore {Boolean} Indicates whether it is pickup store.
     */
    constructor(additionalInfo, address, dockId, friendlyName, isPickupStore) { 
        
        PickupStoreInfo.initialize(this, additionalInfo, address, dockId, friendlyName, isPickupStore);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, additionalInfo, address, dockId, friendlyName, isPickupStore) { 
        obj['additionalInfo'] = additionalInfo;
        obj['address'] = address;
        obj['dockId'] = dockId;
        obj['friendlyName'] = friendlyName;
        obj['isPickupStore'] = isPickupStore;
    }

    /**
     * Constructs a <code>PickupStoreInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PickupStoreInfo} obj Optional instance to populate.
     * @return {module:model/PickupStoreInfo} The populated <code>PickupStoreInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PickupStoreInfo();

            if (data.hasOwnProperty('additionalInfo')) {
                obj['additionalInfo'] = ApiClient.convertToType(data['additionalInfo'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('dockId')) {
                obj['dockId'] = ApiClient.convertToType(data['dockId'], 'String');
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('isPickupStore')) {
                obj['isPickupStore'] = ApiClient.convertToType(data['isPickupStore'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PickupStoreInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PickupStoreInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PickupStoreInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['additionalInfo'] && !(typeof data['additionalInfo'] === 'string' || data['additionalInfo'] instanceof String)) {
            throw new Error("Expected the field `additionalInfo` to be a primitive type in the JSON string but got " + data['additionalInfo']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['dockId'] && !(typeof data['dockId'] === 'string' || data['dockId'] instanceof String)) {
            throw new Error("Expected the field `dockId` to be a primitive type in the JSON string but got " + data['dockId']);
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }

        return true;
    }


}

PickupStoreInfo.RequiredProperties = ["additionalInfo", "address", "dockId", "friendlyName", "isPickupStore"];

/**
 * Pickup additional information.
 * @member {String} additionalInfo
 */
PickupStoreInfo.prototype['additionalInfo'] = undefined;

/**
 * Pickup address.
 * @member {String} address
 */
PickupStoreInfo.prototype['address'] = undefined;

/**
 * Pickup dock ID.
 * @member {String} dockId
 */
PickupStoreInfo.prototype['dockId'] = undefined;

/**
 * Pickup friendly name.
 * @member {String} friendlyName
 */
PickupStoreInfo.prototype['friendlyName'] = undefined;

/**
 * Indicates whether it is pickup store.
 * @member {Boolean} isPickupStore
 */
PickupStoreInfo.prototype['isPickupStore'] = undefined;






export default PickupStoreInfo;

