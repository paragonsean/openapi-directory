/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItemsRemoved from './ItemsRemoved';
import Receipt from './Receipt';

/**
 * The ChangesDatum model module.
 * @module model/ChangesDatum
 * @version 1.0
 */
class ChangesDatum {
    /**
     * Constructs a new <code>ChangesDatum</code>.
     * @alias module:model/ChangesDatum
     * @param discountValue {Number} Discount value in cents.
     * @param incrementValue {Number} Order value increment in cents.
     * @param itemsAdded {Array.<String>} Array with information on items added to the order.
     * @param itemsRemoved {Array.<module:model/ItemsRemoved>} Array with information on items removed from the order.
     * @param reason {String} Change reason.
     * @param receipt {module:model/Receipt} 
     */
    constructor(discountValue, incrementValue, itemsAdded, itemsRemoved, reason, receipt) { 
        
        ChangesDatum.initialize(this, discountValue, incrementValue, itemsAdded, itemsRemoved, reason, receipt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, discountValue, incrementValue, itemsAdded, itemsRemoved, reason, receipt) { 
        obj['discountValue'] = discountValue;
        obj['incrementValue'] = incrementValue;
        obj['itemsAdded'] = itemsAdded;
        obj['itemsRemoved'] = itemsRemoved;
        obj['reason'] = reason;
        obj['receipt'] = receipt;
    }

    /**
     * Constructs a <code>ChangesDatum</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChangesDatum} obj Optional instance to populate.
     * @return {module:model/ChangesDatum} The populated <code>ChangesDatum</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChangesDatum();

            if (data.hasOwnProperty('discountValue')) {
                obj['discountValue'] = ApiClient.convertToType(data['discountValue'], 'Number');
            }
            if (data.hasOwnProperty('incrementValue')) {
                obj['incrementValue'] = ApiClient.convertToType(data['incrementValue'], 'Number');
            }
            if (data.hasOwnProperty('itemsAdded')) {
                obj['itemsAdded'] = ApiClient.convertToType(data['itemsAdded'], ['String']);
            }
            if (data.hasOwnProperty('itemsRemoved')) {
                obj['itemsRemoved'] = ApiClient.convertToType(data['itemsRemoved'], [ItemsRemoved]);
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('receipt')) {
                obj['receipt'] = Receipt.constructFromObject(data['receipt']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChangesDatum</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChangesDatum</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChangesDatum.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['itemsAdded'])) {
            throw new Error("Expected the field `itemsAdded` to be an array in the JSON data but got " + data['itemsAdded']);
        }
        if (data['itemsRemoved']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['itemsRemoved'])) {
                throw new Error("Expected the field `itemsRemoved` to be an array in the JSON data but got " + data['itemsRemoved']);
            }
            // validate the optional field `itemsRemoved` (array)
            for (const item of data['itemsRemoved']) {
                ItemsRemoved.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // validate the optional field `receipt`
        if (data['receipt']) { // data not null
          Receipt.validateJSON(data['receipt']);
        }

        return true;
    }


}

ChangesDatum.RequiredProperties = ["discountValue", "incrementValue", "itemsAdded", "itemsRemoved", "reason", "receipt"];

/**
 * Discount value in cents.
 * @member {Number} discountValue
 */
ChangesDatum.prototype['discountValue'] = undefined;

/**
 * Order value increment in cents.
 * @member {Number} incrementValue
 */
ChangesDatum.prototype['incrementValue'] = undefined;

/**
 * Array with information on items added to the order.
 * @member {Array.<String>} itemsAdded
 */
ChangesDatum.prototype['itemsAdded'] = undefined;

/**
 * Array with information on items removed from the order.
 * @member {Array.<module:model/ItemsRemoved>} itemsRemoved
 */
ChangesDatum.prototype['itemsRemoved'] = undefined;

/**
 * Change reason.
 * @member {String} reason
 */
ChangesDatum.prototype['reason'] = undefined;

/**
 * @member {module:model/Receipt} receipt
 */
ChangesDatum.prototype['receipt'] = undefined;






export default ChangesDatum;

