/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Paging from './Paging';
import Stats from './Stats';

/**
 * The ListOrders model module.
 * @module model/ListOrders
 * @version 1.0
 */
class ListOrders {
    /**
     * Constructs a new <code>ListOrders</code>.
     * @alias module:model/ListOrders
     * @param facets {Array.<String>} Array of facets.
     * @param list {Array.<Array>} Array containing information on orders listed.
     * @param paging {module:model/Paging} 
     * @param stats {module:model/Stats} 
     */
    constructor(facets, list, paging, stats) { 
        
        ListOrders.initialize(this, facets, list, paging, stats);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, facets, list, paging, stats) { 
        obj['facets'] = facets;
        obj['list'] = list;
        obj['paging'] = paging;
        obj['stats'] = stats;
    }

    /**
     * Constructs a <code>ListOrders</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListOrders} obj Optional instance to populate.
     * @return {module:model/ListOrders} The populated <code>ListOrders</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListOrders();

            if (data.hasOwnProperty('facets')) {
                obj['facets'] = ApiClient.convertToType(data['facets'], ['String']);
            }
            if (data.hasOwnProperty('list')) {
                obj['list'] = ApiClient.convertToType(data['list'], [Array]);
            }
            if (data.hasOwnProperty('paging')) {
                obj['paging'] = Paging.constructFromObject(data['paging']);
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = Stats.constructFromObject(data['stats']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListOrders</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListOrders</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ListOrders.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['facets'])) {
            throw new Error("Expected the field `facets` to be an array in the JSON data but got " + data['facets']);
        }
        if (data['list']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['list'])) {
                throw new Error("Expected the field `list` to be an array in the JSON data but got " + data['list']);
            }
            // validate the optional field `list` (array)
            for (const item of data['list']) {
                Array.validateJSON(item);
            };
        }
        // validate the optional field `paging`
        if (data['paging']) { // data not null
          Paging.validateJSON(data['paging']);
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          Stats.validateJSON(data['stats']);
        }

        return true;
    }


}

ListOrders.RequiredProperties = ["facets", "list", "paging", "stats"];

/**
 * Array of facets.
 * @member {Array.<String>} facets
 */
ListOrders.prototype['facets'] = undefined;

/**
 * Array containing information on orders listed.
 * @member {Array.<Array>} list
 */
ListOrders.prototype['list'] = undefined;

/**
 * @member {module:model/Paging} paging
 */
ListOrders.prototype['paging'] = undefined;

/**
 * @member {module:model/Stats} stats
 */
ListOrders.prototype['stats'] = undefined;






export default ListOrders;

