/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Item1 from './Item1';

/**
 * The InvoiceNotificationRequest model module.
 * @module model/InvoiceNotificationRequest
 * @version 1.0
 */
class InvoiceNotificationRequest {
    /**
     * Constructs a new <code>InvoiceNotificationRequest</code>.
     * @alias module:model/InvoiceNotificationRequest
     * @param invoiceNumber {String} Number that identifies the invoice.
     * @param invoiceValue {String} Total amount being invoiced in cents. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.
     * @param issuedDate {String} Issuance date of the invoice in ISO format.
     * @param items {Array.<module:model/Item1>} Array containing the SKUs that are being invoiced.
     * @param type {String} The type of invoice. There are two possible values: `\"Output\"` and `\"Input\"`. The `\"Output\"` type should be used when the invoice you are sending is a selling invoice. The `\"Input\"` type should be used when you send a return invoice.
     */
    constructor(invoiceNumber, invoiceValue, issuedDate, items, type) { 
        
        InvoiceNotificationRequest.initialize(this, invoiceNumber, invoiceValue, issuedDate, items, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, invoiceNumber, invoiceValue, issuedDate, items, type) { 
        obj['invoiceNumber'] = invoiceNumber;
        obj['invoiceValue'] = invoiceValue;
        obj['issuedDate'] = issuedDate;
        obj['items'] = items;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>InvoiceNotificationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InvoiceNotificationRequest} obj Optional instance to populate.
     * @return {module:model/InvoiceNotificationRequest} The populated <code>InvoiceNotificationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InvoiceNotificationRequest();

            if (data.hasOwnProperty('cfop')) {
                obj['cfop'] = ApiClient.convertToType(data['cfop'], 'String');
            }
            if (data.hasOwnProperty('courier')) {
                obj['courier'] = ApiClient.convertToType(data['courier'], 'String');
            }
            if (data.hasOwnProperty('extraValue')) {
                obj['extraValue'] = ApiClient.convertToType(data['extraValue'], 'Number');
            }
            if (data.hasOwnProperty('invoiceKey')) {
                obj['invoiceKey'] = ApiClient.convertToType(data['invoiceKey'], 'String');
            }
            if (data.hasOwnProperty('invoiceNumber')) {
                obj['invoiceNumber'] = ApiClient.convertToType(data['invoiceNumber'], 'String');
            }
            if (data.hasOwnProperty('invoiceUrl')) {
                obj['invoiceUrl'] = ApiClient.convertToType(data['invoiceUrl'], 'String');
            }
            if (data.hasOwnProperty('invoiceValue')) {
                obj['invoiceValue'] = ApiClient.convertToType(data['invoiceValue'], 'String');
            }
            if (data.hasOwnProperty('issuedDate')) {
                obj['issuedDate'] = ApiClient.convertToType(data['issuedDate'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [Item1]);
            }
            if (data.hasOwnProperty('trackingNumber')) {
                obj['trackingNumber'] = ApiClient.convertToType(data['trackingNumber'], 'String');
            }
            if (data.hasOwnProperty('trackingUrl')) {
                obj['trackingUrl'] = ApiClient.convertToType(data['trackingUrl'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('volumes')) {
                obj['volumes'] = ApiClient.convertToType(data['volumes'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InvoiceNotificationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InvoiceNotificationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InvoiceNotificationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cfop'] && !(typeof data['cfop'] === 'string' || data['cfop'] instanceof String)) {
            throw new Error("Expected the field `cfop` to be a primitive type in the JSON string but got " + data['cfop']);
        }
        // ensure the json data is a string
        if (data['courier'] && !(typeof data['courier'] === 'string' || data['courier'] instanceof String)) {
            throw new Error("Expected the field `courier` to be a primitive type in the JSON string but got " + data['courier']);
        }
        // ensure the json data is a string
        if (data['invoiceKey'] && !(typeof data['invoiceKey'] === 'string' || data['invoiceKey'] instanceof String)) {
            throw new Error("Expected the field `invoiceKey` to be a primitive type in the JSON string but got " + data['invoiceKey']);
        }
        // ensure the json data is a string
        if (data['invoiceNumber'] && !(typeof data['invoiceNumber'] === 'string' || data['invoiceNumber'] instanceof String)) {
            throw new Error("Expected the field `invoiceNumber` to be a primitive type in the JSON string but got " + data['invoiceNumber']);
        }
        // ensure the json data is a string
        if (data['invoiceUrl'] && !(typeof data['invoiceUrl'] === 'string' || data['invoiceUrl'] instanceof String)) {
            throw new Error("Expected the field `invoiceUrl` to be a primitive type in the JSON string but got " + data['invoiceUrl']);
        }
        // ensure the json data is a string
        if (data['invoiceValue'] && !(typeof data['invoiceValue'] === 'string' || data['invoiceValue'] instanceof String)) {
            throw new Error("Expected the field `invoiceValue` to be a primitive type in the JSON string but got " + data['invoiceValue']);
        }
        // ensure the json data is a string
        if (data['issuedDate'] && !(typeof data['issuedDate'] === 'string' || data['issuedDate'] instanceof String)) {
            throw new Error("Expected the field `issuedDate` to be a primitive type in the JSON string but got " + data['issuedDate']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                Item1.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['trackingNumber'] && !(typeof data['trackingNumber'] === 'string' || data['trackingNumber'] instanceof String)) {
            throw new Error("Expected the field `trackingNumber` to be a primitive type in the JSON string but got " + data['trackingNumber']);
        }
        // ensure the json data is a string
        if (data['trackingUrl'] && !(typeof data['trackingUrl'] === 'string' || data['trackingUrl'] instanceof String)) {
            throw new Error("Expected the field `trackingUrl` to be a primitive type in the JSON string but got " + data['trackingUrl']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

InvoiceNotificationRequest.RequiredProperties = ["invoiceNumber", "invoiceValue", "issuedDate", "items", "type"];

/**
 * Fiscal code used in Brazil.
 * @member {String} cfop
 */
InvoiceNotificationRequest.prototype['cfop'] = undefined;

/**
 * The name of the carrier responsible for delivering the order.  > This field should only be used when sending **tracking** information. When the request is used for sending the invoice, this field should be left empty (`\"\"`).
 * @member {String} courier
 */
InvoiceNotificationRequest.prototype['courier'] = undefined;

/**
 * Extra value in the invoice in cents. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.
 * @member {Number} extraValue
 */
InvoiceNotificationRequest.prototype['extraValue'] = undefined;

/**
 * Invoice key.
 * @member {String} invoiceKey
 */
InvoiceNotificationRequest.prototype['invoiceKey'] = undefined;

/**
 * Number that identifies the invoice.
 * @member {String} invoiceNumber
 */
InvoiceNotificationRequest.prototype['invoiceNumber'] = undefined;

/**
 * URL of the invoice. Can be used to send the URL of an XML file, for example, which is useful for some integrations.
 * @member {String} invoiceUrl
 */
InvoiceNotificationRequest.prototype['invoiceUrl'] = undefined;

/**
 * Total amount being invoiced in cents. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.
 * @member {String} invoiceValue
 */
InvoiceNotificationRequest.prototype['invoiceValue'] = undefined;

/**
 * Issuance date of the invoice in ISO format.
 * @member {String} issuedDate
 */
InvoiceNotificationRequest.prototype['issuedDate'] = undefined;

/**
 * Array containing the SKUs that are being invoiced.
 * @member {Array.<module:model/Item1>} items
 */
InvoiceNotificationRequest.prototype['items'] = undefined;

/**
 * Code that identifies the order tracking.  > This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`\"\"`).
 * @member {String} trackingNumber
 */
InvoiceNotificationRequest.prototype['trackingNumber'] = undefined;

/**
 * URL used to track the order.  > This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`\"\"`).
 * @member {String} trackingUrl
 */
InvoiceNotificationRequest.prototype['trackingUrl'] = undefined;

/**
 * The type of invoice. There are two possible values: `\"Output\"` and `\"Input\"`. The `\"Output\"` type should be used when the invoice you are sending is a selling invoice. The `\"Input\"` type should be used when you send a return invoice.
 * @member {String} type
 */
InvoiceNotificationRequest.prototype['type'] = undefined;

/**
 * Number of volumes in the invoice.
 * @member {Number} volumes
 */
InvoiceNotificationRequest.prototype['volumes'] = undefined;






export default InvoiceNotificationRequest;

