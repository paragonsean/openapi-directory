/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ItemsRemoved model module.
 * @module model/ItemsRemoved
 * @version 1.0
 */
class ItemsRemoved {
    /**
     * Constructs a new <code>ItemsRemoved</code>.
     * @alias module:model/ItemsRemoved
     * @param id {String} Id of removed item.
     * @param name {String} Name of removed item.
     * @param price {Number} Removed items price in cents.
     * @param quantity {Number} Quantity of items removed.
     * @param unitMultiplier {String} Removed item unit multiplier.
     */
    constructor(id, name, price, quantity, unitMultiplier) { 
        
        ItemsRemoved.initialize(this, id, name, price, quantity, unitMultiplier);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, price, quantity, unitMultiplier) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['price'] = price;
        obj['quantity'] = quantity;
        obj['unitMultiplier'] = unitMultiplier;
    }

    /**
     * Constructs a <code>ItemsRemoved</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemsRemoved} obj Optional instance to populate.
     * @return {module:model/ItemsRemoved} The populated <code>ItemsRemoved</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemsRemoved();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('unitMultiplier')) {
                obj['unitMultiplier'] = ApiClient.convertToType(data['unitMultiplier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemsRemoved</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemsRemoved</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ItemsRemoved.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['unitMultiplier'] && !(typeof data['unitMultiplier'] === 'string' || data['unitMultiplier'] instanceof String)) {
            throw new Error("Expected the field `unitMultiplier` to be a primitive type in the JSON string but got " + data['unitMultiplier']);
        }

        return true;
    }


}

ItemsRemoved.RequiredProperties = ["id", "name", "price", "quantity", "unitMultiplier"];

/**
 * Id of removed item.
 * @member {String} id
 */
ItemsRemoved.prototype['id'] = undefined;

/**
 * Name of removed item.
 * @member {String} name
 */
ItemsRemoved.prototype['name'] = undefined;

/**
 * Removed items price in cents.
 * @member {Number} price
 */
ItemsRemoved.prototype['price'] = undefined;

/**
 * Quantity of items removed.
 * @member {Number} quantity
 */
ItemsRemoved.prototype['quantity'] = undefined;

/**
 * Removed item unit multiplier.
 * @member {String} unitMultiplier
 */
ItemsRemoved.prototype['unitMultiplier'] = undefined;






export default ItemsRemoved;

