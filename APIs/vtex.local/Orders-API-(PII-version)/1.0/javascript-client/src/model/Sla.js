/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PickupStoreInfo from './PickupStoreInfo';

/**
 * The Sla model module.
 * @module model/Sla
 * @version 1.0
 */
class Sla {
    /**
     * Constructs a new <code>Sla</code>.
     * @alias module:model/Sla
     * @param deliveryChannel {String} SLA delivery channel.
     * @param deliveryWindow {String} SLA delivery window.
     * @param id {String} SLA ID.
     * @param name {String} SLA name.
     * @param pickupStoreInfo {module:model/PickupStoreInfo} 
     * @param polygonName {String} SLA polygon name.
     * @param price {Number} SLA price in cents.
     * @param shippingEstimate {String} SLA shipping estimate.
     */
    constructor(deliveryChannel, deliveryWindow, id, name, pickupStoreInfo, polygonName, price, shippingEstimate) { 
        
        Sla.initialize(this, deliveryChannel, deliveryWindow, id, name, pickupStoreInfo, polygonName, price, shippingEstimate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deliveryChannel, deliveryWindow, id, name, pickupStoreInfo, polygonName, price, shippingEstimate) { 
        obj['deliveryChannel'] = deliveryChannel;
        obj['deliveryWindow'] = deliveryWindow;
        obj['id'] = id;
        obj['name'] = name;
        obj['pickupStoreInfo'] = pickupStoreInfo;
        obj['polygonName'] = polygonName;
        obj['price'] = price;
        obj['shippingEstimate'] = shippingEstimate;
    }

    /**
     * Constructs a <code>Sla</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Sla} obj Optional instance to populate.
     * @return {module:model/Sla} The populated <code>Sla</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Sla();

            if (data.hasOwnProperty('deliveryChannel')) {
                obj['deliveryChannel'] = ApiClient.convertToType(data['deliveryChannel'], 'String');
            }
            if (data.hasOwnProperty('deliveryWindow')) {
                obj['deliveryWindow'] = ApiClient.convertToType(data['deliveryWindow'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pickupStoreInfo')) {
                obj['pickupStoreInfo'] = PickupStoreInfo.constructFromObject(data['pickupStoreInfo']);
            }
            if (data.hasOwnProperty('polygonName')) {
                obj['polygonName'] = ApiClient.convertToType(data['polygonName'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('shippingEstimate')) {
                obj['shippingEstimate'] = ApiClient.convertToType(data['shippingEstimate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Sla</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Sla</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Sla.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['deliveryChannel'] && !(typeof data['deliveryChannel'] === 'string' || data['deliveryChannel'] instanceof String)) {
            throw new Error("Expected the field `deliveryChannel` to be a primitive type in the JSON string but got " + data['deliveryChannel']);
        }
        // ensure the json data is a string
        if (data['deliveryWindow'] && !(typeof data['deliveryWindow'] === 'string' || data['deliveryWindow'] instanceof String)) {
            throw new Error("Expected the field `deliveryWindow` to be a primitive type in the JSON string but got " + data['deliveryWindow']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `pickupStoreInfo`
        if (data['pickupStoreInfo']) { // data not null
          PickupStoreInfo.validateJSON(data['pickupStoreInfo']);
        }
        // ensure the json data is a string
        if (data['polygonName'] && !(typeof data['polygonName'] === 'string' || data['polygonName'] instanceof String)) {
            throw new Error("Expected the field `polygonName` to be a primitive type in the JSON string but got " + data['polygonName']);
        }
        // ensure the json data is a string
        if (data['shippingEstimate'] && !(typeof data['shippingEstimate'] === 'string' || data['shippingEstimate'] instanceof String)) {
            throw new Error("Expected the field `shippingEstimate` to be a primitive type in the JSON string but got " + data['shippingEstimate']);
        }

        return true;
    }


}

Sla.RequiredProperties = ["deliveryChannel", "deliveryWindow", "id", "name", "pickupStoreInfo", "polygonName", "price", "shippingEstimate"];

/**
 * SLA delivery channel.
 * @member {String} deliveryChannel
 */
Sla.prototype['deliveryChannel'] = undefined;

/**
 * SLA delivery window.
 * @member {String} deliveryWindow
 */
Sla.prototype['deliveryWindow'] = undefined;

/**
 * SLA ID.
 * @member {String} id
 */
Sla.prototype['id'] = undefined;

/**
 * SLA name.
 * @member {String} name
 */
Sla.prototype['name'] = undefined;

/**
 * @member {module:model/PickupStoreInfo} pickupStoreInfo
 */
Sla.prototype['pickupStoreInfo'] = undefined;

/**
 * SLA polygon name.
 * @member {String} polygonName
 */
Sla.prototype['polygonName'] = undefined;

/**
 * SLA price in cents.
 * @member {Number} price
 */
Sla.prototype['price'] = undefined;

/**
 * SLA shipping estimate.
 * @member {String} shippingEstimate
 */
Sla.prototype['shippingEstimate'] = undefined;






export default Sla;

