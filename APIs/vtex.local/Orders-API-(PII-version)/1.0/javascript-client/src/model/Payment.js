/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Payment model module.
 * @module model/Payment
 * @version 1.0
 */
class Payment {
    /**
     * Constructs a new <code>Payment</code>.
     * @alias module:model/Payment
     * @param cardHolder {String} Card holder
     * @param cardNumber {String} Card number.
     * @param connectorResponses {Object} Connector responses.
     * @param cvv2 {String} Card verification code.
     * @param dueDate {String} Due date.
     * @param expireMonth {String} Card expiration month.
     * @param expireYear {String} Card expiration year.
     * @param firstDigits {String} Card first digits.
     * @param giftCardCaption {String} Gift card caption.
     * @param giftCardId {String} Gift card ID.
     * @param giftCardName {String} Gift card name.
     * @param group {String} Payment group.
     * @param id {String} Payment ID.
     * @param installments {Number} Payment installments.
     * @param lastDigits {String} Card last digits.
     * @param paymentSystem {String} Payment system.
     * @param paymentSystemName {String} Payment system name.
     * @param redemptionCode {String} Redemption code.
     * @param referenceValue {Number} Reference value for interest calculation in cents.
     * @param tid {String} Payment TID.
     * @param url {String} Payment URL.
     * @param value {Number} Payment value in cents.
     */
    constructor(cardHolder, cardNumber, connectorResponses, cvv2, dueDate, expireMonth, expireYear, firstDigits, giftCardCaption, giftCardId, giftCardName, group, id, installments, lastDigits, paymentSystem, paymentSystemName, redemptionCode, referenceValue, tid, url, value) { 
        
        Payment.initialize(this, cardHolder, cardNumber, connectorResponses, cvv2, dueDate, expireMonth, expireYear, firstDigits, giftCardCaption, giftCardId, giftCardName, group, id, installments, lastDigits, paymentSystem, paymentSystemName, redemptionCode, referenceValue, tid, url, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cardHolder, cardNumber, connectorResponses, cvv2, dueDate, expireMonth, expireYear, firstDigits, giftCardCaption, giftCardId, giftCardName, group, id, installments, lastDigits, paymentSystem, paymentSystemName, redemptionCode, referenceValue, tid, url, value) { 
        obj['cardHolder'] = cardHolder;
        obj['cardNumber'] = cardNumber;
        obj['connectorResponses'] = connectorResponses;
        obj['cvv2'] = cvv2;
        obj['dueDate'] = dueDate;
        obj['expireMonth'] = expireMonth;
        obj['expireYear'] = expireYear;
        obj['firstDigits'] = firstDigits;
        obj['giftCardCaption'] = giftCardCaption;
        obj['giftCardId'] = giftCardId;
        obj['giftCardName'] = giftCardName;
        obj['group'] = group;
        obj['id'] = id;
        obj['installments'] = installments;
        obj['lastDigits'] = lastDigits;
        obj['paymentSystem'] = paymentSystem;
        obj['paymentSystemName'] = paymentSystemName;
        obj['redemptionCode'] = redemptionCode;
        obj['referenceValue'] = referenceValue;
        obj['tid'] = tid;
        obj['url'] = url;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Payment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Payment} obj Optional instance to populate.
     * @return {module:model/Payment} The populated <code>Payment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Payment();

            if (data.hasOwnProperty('cardHolder')) {
                obj['cardHolder'] = ApiClient.convertToType(data['cardHolder'], 'String');
            }
            if (data.hasOwnProperty('cardNumber')) {
                obj['cardNumber'] = ApiClient.convertToType(data['cardNumber'], 'String');
            }
            if (data.hasOwnProperty('connectorResponses')) {
                obj['connectorResponses'] = ApiClient.convertToType(data['connectorResponses'], Object);
            }
            if (data.hasOwnProperty('cvv2')) {
                obj['cvv2'] = ApiClient.convertToType(data['cvv2'], 'String');
            }
            if (data.hasOwnProperty('dueDate')) {
                obj['dueDate'] = ApiClient.convertToType(data['dueDate'], 'String');
            }
            if (data.hasOwnProperty('expireMonth')) {
                obj['expireMonth'] = ApiClient.convertToType(data['expireMonth'], 'String');
            }
            if (data.hasOwnProperty('expireYear')) {
                obj['expireYear'] = ApiClient.convertToType(data['expireYear'], 'String');
            }
            if (data.hasOwnProperty('firstDigits')) {
                obj['firstDigits'] = ApiClient.convertToType(data['firstDigits'], 'String');
            }
            if (data.hasOwnProperty('giftCardCaption')) {
                obj['giftCardCaption'] = ApiClient.convertToType(data['giftCardCaption'], 'String');
            }
            if (data.hasOwnProperty('giftCardId')) {
                obj['giftCardId'] = ApiClient.convertToType(data['giftCardId'], 'String');
            }
            if (data.hasOwnProperty('giftCardName')) {
                obj['giftCardName'] = ApiClient.convertToType(data['giftCardName'], 'String');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('installments')) {
                obj['installments'] = ApiClient.convertToType(data['installments'], 'Number');
            }
            if (data.hasOwnProperty('lastDigits')) {
                obj['lastDigits'] = ApiClient.convertToType(data['lastDigits'], 'String');
            }
            if (data.hasOwnProperty('paymentSystem')) {
                obj['paymentSystem'] = ApiClient.convertToType(data['paymentSystem'], 'String');
            }
            if (data.hasOwnProperty('paymentSystemName')) {
                obj['paymentSystemName'] = ApiClient.convertToType(data['paymentSystemName'], 'String');
            }
            if (data.hasOwnProperty('redemptionCode')) {
                obj['redemptionCode'] = ApiClient.convertToType(data['redemptionCode'], 'String');
            }
            if (data.hasOwnProperty('referenceValue')) {
                obj['referenceValue'] = ApiClient.convertToType(data['referenceValue'], 'Number');
            }
            if (data.hasOwnProperty('tid')) {
                obj['tid'] = ApiClient.convertToType(data['tid'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Payment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Payment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Payment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cardHolder'] && !(typeof data['cardHolder'] === 'string' || data['cardHolder'] instanceof String)) {
            throw new Error("Expected the field `cardHolder` to be a primitive type in the JSON string but got " + data['cardHolder']);
        }
        // ensure the json data is a string
        if (data['cardNumber'] && !(typeof data['cardNumber'] === 'string' || data['cardNumber'] instanceof String)) {
            throw new Error("Expected the field `cardNumber` to be a primitive type in the JSON string but got " + data['cardNumber']);
        }
        // ensure the json data is a string
        if (data['cvv2'] && !(typeof data['cvv2'] === 'string' || data['cvv2'] instanceof String)) {
            throw new Error("Expected the field `cvv2` to be a primitive type in the JSON string but got " + data['cvv2']);
        }
        // ensure the json data is a string
        if (data['dueDate'] && !(typeof data['dueDate'] === 'string' || data['dueDate'] instanceof String)) {
            throw new Error("Expected the field `dueDate` to be a primitive type in the JSON string but got " + data['dueDate']);
        }
        // ensure the json data is a string
        if (data['expireMonth'] && !(typeof data['expireMonth'] === 'string' || data['expireMonth'] instanceof String)) {
            throw new Error("Expected the field `expireMonth` to be a primitive type in the JSON string but got " + data['expireMonth']);
        }
        // ensure the json data is a string
        if (data['expireYear'] && !(typeof data['expireYear'] === 'string' || data['expireYear'] instanceof String)) {
            throw new Error("Expected the field `expireYear` to be a primitive type in the JSON string but got " + data['expireYear']);
        }
        // ensure the json data is a string
        if (data['firstDigits'] && !(typeof data['firstDigits'] === 'string' || data['firstDigits'] instanceof String)) {
            throw new Error("Expected the field `firstDigits` to be a primitive type in the JSON string but got " + data['firstDigits']);
        }
        // ensure the json data is a string
        if (data['giftCardCaption'] && !(typeof data['giftCardCaption'] === 'string' || data['giftCardCaption'] instanceof String)) {
            throw new Error("Expected the field `giftCardCaption` to be a primitive type in the JSON string but got " + data['giftCardCaption']);
        }
        // ensure the json data is a string
        if (data['giftCardId'] && !(typeof data['giftCardId'] === 'string' || data['giftCardId'] instanceof String)) {
            throw new Error("Expected the field `giftCardId` to be a primitive type in the JSON string but got " + data['giftCardId']);
        }
        // ensure the json data is a string
        if (data['giftCardName'] && !(typeof data['giftCardName'] === 'string' || data['giftCardName'] instanceof String)) {
            throw new Error("Expected the field `giftCardName` to be a primitive type in the JSON string but got " + data['giftCardName']);
        }
        // ensure the json data is a string
        if (data['group'] && !(typeof data['group'] === 'string' || data['group'] instanceof String)) {
            throw new Error("Expected the field `group` to be a primitive type in the JSON string but got " + data['group']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lastDigits'] && !(typeof data['lastDigits'] === 'string' || data['lastDigits'] instanceof String)) {
            throw new Error("Expected the field `lastDigits` to be a primitive type in the JSON string but got " + data['lastDigits']);
        }
        // ensure the json data is a string
        if (data['paymentSystem'] && !(typeof data['paymentSystem'] === 'string' || data['paymentSystem'] instanceof String)) {
            throw new Error("Expected the field `paymentSystem` to be a primitive type in the JSON string but got " + data['paymentSystem']);
        }
        // ensure the json data is a string
        if (data['paymentSystemName'] && !(typeof data['paymentSystemName'] === 'string' || data['paymentSystemName'] instanceof String)) {
            throw new Error("Expected the field `paymentSystemName` to be a primitive type in the JSON string but got " + data['paymentSystemName']);
        }
        // ensure the json data is a string
        if (data['redemptionCode'] && !(typeof data['redemptionCode'] === 'string' || data['redemptionCode'] instanceof String)) {
            throw new Error("Expected the field `redemptionCode` to be a primitive type in the JSON string but got " + data['redemptionCode']);
        }
        // ensure the json data is a string
        if (data['tid'] && !(typeof data['tid'] === 'string' || data['tid'] instanceof String)) {
            throw new Error("Expected the field `tid` to be a primitive type in the JSON string but got " + data['tid']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Payment.RequiredProperties = ["cardHolder", "cardNumber", "connectorResponses", "cvv2", "dueDate", "expireMonth", "expireYear", "firstDigits", "giftCardCaption", "giftCardId", "giftCardName", "group", "id", "installments", "lastDigits", "paymentSystem", "paymentSystemName", "redemptionCode", "referenceValue", "tid", "url", "value"];

/**
 * Card holder
 * @member {String} cardHolder
 */
Payment.prototype['cardHolder'] = undefined;

/**
 * Card number.
 * @member {String} cardNumber
 */
Payment.prototype['cardNumber'] = undefined;

/**
 * Connector responses.
 * @member {Object} connectorResponses
 */
Payment.prototype['connectorResponses'] = undefined;

/**
 * Card verification code.
 * @member {String} cvv2
 */
Payment.prototype['cvv2'] = undefined;

/**
 * Due date.
 * @member {String} dueDate
 */
Payment.prototype['dueDate'] = undefined;

/**
 * Card expiration month.
 * @member {String} expireMonth
 */
Payment.prototype['expireMonth'] = undefined;

/**
 * Card expiration year.
 * @member {String} expireYear
 */
Payment.prototype['expireYear'] = undefined;

/**
 * Card first digits.
 * @member {String} firstDigits
 */
Payment.prototype['firstDigits'] = undefined;

/**
 * Gift card caption.
 * @member {String} giftCardCaption
 */
Payment.prototype['giftCardCaption'] = undefined;

/**
 * Gift card ID.
 * @member {String} giftCardId
 */
Payment.prototype['giftCardId'] = undefined;

/**
 * Gift card name.
 * @member {String} giftCardName
 */
Payment.prototype['giftCardName'] = undefined;

/**
 * Payment group.
 * @member {String} group
 */
Payment.prototype['group'] = undefined;

/**
 * Payment ID.
 * @member {String} id
 */
Payment.prototype['id'] = undefined;

/**
 * Payment installments.
 * @member {Number} installments
 */
Payment.prototype['installments'] = undefined;

/**
 * Card last digits.
 * @member {String} lastDigits
 */
Payment.prototype['lastDigits'] = undefined;

/**
 * Payment system.
 * @member {String} paymentSystem
 */
Payment.prototype['paymentSystem'] = undefined;

/**
 * Payment system name.
 * @member {String} paymentSystemName
 */
Payment.prototype['paymentSystemName'] = undefined;

/**
 * Redemption code.
 * @member {String} redemptionCode
 */
Payment.prototype['redemptionCode'] = undefined;

/**
 * Reference value for interest calculation in cents.
 * @member {Number} referenceValue
 */
Payment.prototype['referenceValue'] = undefined;

/**
 * Payment TID.
 * @member {String} tid
 */
Payment.prototype['tid'] = undefined;

/**
 * Payment URL.
 * @member {String} url
 */
Payment.prototype['url'] = undefined;

/**
 * Payment value in cents.
 * @member {Number} value
 */
Payment.prototype['value'] = undefined;






export default Payment;

