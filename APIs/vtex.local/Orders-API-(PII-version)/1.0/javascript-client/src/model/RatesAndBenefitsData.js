/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RatesAndBenefitsData model module.
 * @module model/RatesAndBenefitsData
 * @version 1.0
 */
class RatesAndBenefitsData {
    /**
     * Constructs a new <code>RatesAndBenefitsData</code>.
     * @alias module:model/RatesAndBenefitsData
     * @param id {String} Field ID.
     * @param rateAndBenefitsIdentifiers {Array.<String>} Array with rates and benefits IDs.
     */
    constructor(id, rateAndBenefitsIdentifiers) { 
        
        RatesAndBenefitsData.initialize(this, id, rateAndBenefitsIdentifiers);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, rateAndBenefitsIdentifiers) { 
        obj['id'] = id || 'ratesAndBenefitsData';
        obj['rateAndBenefitsIdentifiers'] = rateAndBenefitsIdentifiers;
    }

    /**
     * Constructs a <code>RatesAndBenefitsData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RatesAndBenefitsData} obj Optional instance to populate.
     * @return {module:model/RatesAndBenefitsData} The populated <code>RatesAndBenefitsData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RatesAndBenefitsData();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('rateAndBenefitsIdentifiers')) {
                obj['rateAndBenefitsIdentifiers'] = ApiClient.convertToType(data['rateAndBenefitsIdentifiers'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RatesAndBenefitsData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RatesAndBenefitsData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RatesAndBenefitsData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['rateAndBenefitsIdentifiers'])) {
            throw new Error("Expected the field `rateAndBenefitsIdentifiers` to be an array in the JSON data but got " + data['rateAndBenefitsIdentifiers']);
        }

        return true;
    }


}

RatesAndBenefitsData.RequiredProperties = ["id", "rateAndBenefitsIdentifiers"];

/**
 * Field ID.
 * @member {String} id
 * @default 'ratesAndBenefitsData'
 */
RatesAndBenefitsData.prototype['id'] = 'ratesAndBenefitsData';

/**
 * Array with rates and benefits IDs.
 * @member {Array.<String>} rateAndBenefitsIdentifiers
 */
RatesAndBenefitsData.prototype['rateAndBenefitsIdentifiers'] = undefined;






export default RatesAndBenefitsData;

