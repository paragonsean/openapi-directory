/**
 * Orders API (PII version)
 * Endpoints that deal with order management. New version of the orders API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancelOrder2200Response from '../model/CancelOrder2200Response';
import InvoiceNotificationRequest from '../model/InvoiceNotificationRequest';

/**
* Invoice service.
* @module api/InvoiceApi
* @version 1.0
*/
export default class InvoiceApi {

    /**
    * Constructs a new InvoiceApi. 
    * @alias module:api/InvoiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the invoiceNotification2 operation.
     * @callback module:api/InvoiceApi~invoiceNotification2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelOrder2200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Order invoice notification
     * Once the order is invoiced, the seller should use this request to send the invoice information to the marketplace.  We strongly recommend that you always send the object of the invoiced items. With this practice, rounding errors will be avoided.  It is not allowed to use the same `invoiceNumber` in more than one request to the Order Invoice Notification endpoint.  Be aware that this endpoint is also used by the seller to send the order tracking information. This, however, should be done in a separate moment, once the seller has the tracking information.    > The `Notify invoice` resource is needed to use this API request. This is included in `OMS - Full access` and `IntegrationProfile - Fulfillment Oms`, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} orderId ID of the order.
     * @param {module:model/InvoiceNotificationRequest} invoiceNotificationRequest 
     * @param {module:api/InvoiceApi~invoiceNotification2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelOrder2200Response}
     */
    invoiceNotification2(contentType, accept, orderId, invoiceNotificationRequest, callback) {
      let postBody = invoiceNotificationRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling invoiceNotification2");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling invoiceNotification2");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling invoiceNotification2");
      }
      // verify the required parameter 'invoiceNotificationRequest' is set
      if (invoiceNotificationRequest === undefined || invoiceNotificationRequest === null) {
        throw new Error("Missing the required parameter 'invoiceNotificationRequest' when calling invoiceNotification2");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CancelOrder2200Response;
      return this.apiClient.callApi(
        '/api/orders/pvt/document/{orderId}/invoices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
