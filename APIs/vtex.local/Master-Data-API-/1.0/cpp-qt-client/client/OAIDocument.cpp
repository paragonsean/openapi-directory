/**
 * Master Data API - v2
 * # ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**      ## Welcome!    VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.    There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.    There are two ways to use Master Data:    1. Directly from the storefront  2. External integration    ### Directly from the storefront    If your scenario is to be used inside the storefront, be aware of the following observations:    1. Use the storefront host to query or store information to avoid **CORS**;  2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;  3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);  4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);    **It's important to avoid CORS using the relative path**    ### External Integration    If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:    1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;  2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);    ### Most used attributes listed here    | Name | Description |  | -------- | -------- |  | accountName | Account name in VTEX License Manager |  | name | Data Entity name |  | schema | JSON Schema of a Data Entity |  | id | Identifier of a document |  | x-vtex-api-appKey | User key |  | x-vtex-api-appToken | User token |
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocument::OAIDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocument::OAIDocument() {
    this->initializeModel();
}

OAIDocument::~OAIDocument() {}

void OAIDocument::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_carttag_isSet = false;
    m_carttag_isValid = false;

    m_checkouttag_isSet = false;
    m_checkouttag_isValid = false;

    m_data_entity_id_isSet = false;
    m_data_entity_id_isValid = false;

    m_department_visited_tag_isSet = false;
    m_department_visited_tag_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_followers_isSet = false;
    m_followers_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_rclastsession_isSet = false;
    m_rclastsession_isValid = false;

    m_rclastsessiondate_isSet = false;
    m_rclastsessiondate_isValid = false;
}

void OAIDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocument::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_carttag_isValid = ::OpenAPI::fromJsonValue(m_carttag, json[QString("carttag")]);
    m_carttag_isSet = !json[QString("carttag")].isNull() && m_carttag_isValid;

    m_checkouttag_isValid = ::OpenAPI::fromJsonValue(m_checkouttag, json[QString("checkouttag")]);
    m_checkouttag_isSet = !json[QString("checkouttag")].isNull() && m_checkouttag_isValid;

    m_data_entity_id_isValid = ::OpenAPI::fromJsonValue(m_data_entity_id, json[QString("dataEntityId")]);
    m_data_entity_id_isSet = !json[QString("dataEntityId")].isNull() && m_data_entity_id_isValid;

    m_department_visited_tag_isValid = ::OpenAPI::fromJsonValue(m_department_visited_tag, json[QString("departmentVisitedTag")]);
    m_department_visited_tag_isSet = !json[QString("departmentVisitedTag")].isNull() && m_department_visited_tag_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_followers_isValid = ::OpenAPI::fromJsonValue(m_followers, json[QString("followers")]);
    m_followers_isSet = !json[QString("followers")].isNull() && m_followers_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_rclastsession_isValid = ::OpenAPI::fromJsonValue(m_rclastsession, json[QString("rclastsession")]);
    m_rclastsession_isSet = !json[QString("rclastsession")].isNull() && m_rclastsession_isValid;

    m_rclastsessiondate_isValid = ::OpenAPI::fromJsonValue(m_rclastsessiondate, json[QString("rclastsessiondate")]);
    m_rclastsessiondate_isSet = !json[QString("rclastsessiondate")].isNull() && m_rclastsessiondate_isValid;
}

QString OAIDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_carttag_isSet) {
        obj.insert(QString("carttag"), ::OpenAPI::toJsonValue(m_carttag));
    }
    if (m_checkouttag_isSet) {
        obj.insert(QString("checkouttag"), ::OpenAPI::toJsonValue(m_checkouttag));
    }
    if (m_data_entity_id_isSet) {
        obj.insert(QString("dataEntityId"), ::OpenAPI::toJsonValue(m_data_entity_id));
    }
    if (m_department_visited_tag.isSet()) {
        obj.insert(QString("departmentVisitedTag"), ::OpenAPI::toJsonValue(m_department_visited_tag));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_followers.size() > 0) {
        obj.insert(QString("followers"), ::OpenAPI::toJsonValue(m_followers));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_rclastsession_isSet) {
        obj.insert(QString("rclastsession"), ::OpenAPI::toJsonValue(m_rclastsession));
    }
    if (m_rclastsessiondate_isSet) {
        obj.insert(QString("rclastsessiondate"), ::OpenAPI::toJsonValue(m_rclastsessiondate));
    }
    return obj;
}

QString OAIDocument::getAccountId() const {
    return m_account_id;
}
void OAIDocument::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIDocument::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIDocument::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIDocument::getAccountName() const {
    return m_account_name;
}
void OAIDocument::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIDocument::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIDocument::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIDocument::getCarttag() const {
    return m_carttag;
}
void OAIDocument::setCarttag(const QString &carttag) {
    m_carttag = carttag;
    m_carttag_isSet = true;
}

bool OAIDocument::is_carttag_Set() const{
    return m_carttag_isSet;
}

bool OAIDocument::is_carttag_Valid() const{
    return m_carttag_isValid;
}

QString OAIDocument::getCheckouttag() const {
    return m_checkouttag;
}
void OAIDocument::setCheckouttag(const QString &checkouttag) {
    m_checkouttag = checkouttag;
    m_checkouttag_isSet = true;
}

bool OAIDocument::is_checkouttag_Set() const{
    return m_checkouttag_isSet;
}

bool OAIDocument::is_checkouttag_Valid() const{
    return m_checkouttag_isValid;
}

QString OAIDocument::getDataEntityId() const {
    return m_data_entity_id;
}
void OAIDocument::setDataEntityId(const QString &data_entity_id) {
    m_data_entity_id = data_entity_id;
    m_data_entity_id_isSet = true;
}

bool OAIDocument::is_data_entity_id_Set() const{
    return m_data_entity_id_isSet;
}

bool OAIDocument::is_data_entity_id_Valid() const{
    return m_data_entity_id_isValid;
}

OAIDepartmentVisitedTag OAIDocument::getDepartmentVisitedTag() const {
    return m_department_visited_tag;
}
void OAIDocument::setDepartmentVisitedTag(const OAIDepartmentVisitedTag &department_visited_tag) {
    m_department_visited_tag = department_visited_tag;
    m_department_visited_tag_isSet = true;
}

bool OAIDocument::is_department_visited_tag_Set() const{
    return m_department_visited_tag_isSet;
}

bool OAIDocument::is_department_visited_tag_Valid() const{
    return m_department_visited_tag_isValid;
}

QString OAIDocument::getEmail() const {
    return m_email;
}
void OAIDocument::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIDocument::is_email_Set() const{
    return m_email_isSet;
}

bool OAIDocument::is_email_Valid() const{
    return m_email_isValid;
}

QList<QString> OAIDocument::getFollowers() const {
    return m_followers;
}
void OAIDocument::setFollowers(const QList<QString> &followers) {
    m_followers = followers;
    m_followers_isSet = true;
}

bool OAIDocument::is_followers_Set() const{
    return m_followers_isSet;
}

bool OAIDocument::is_followers_Valid() const{
    return m_followers_isValid;
}

QString OAIDocument::getId() const {
    return m_id;
}
void OAIDocument::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocument::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocument::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDocument::getRclastsession() const {
    return m_rclastsession;
}
void OAIDocument::setRclastsession(const QString &rclastsession) {
    m_rclastsession = rclastsession;
    m_rclastsession_isSet = true;
}

bool OAIDocument::is_rclastsession_Set() const{
    return m_rclastsession_isSet;
}

bool OAIDocument::is_rclastsession_Valid() const{
    return m_rclastsession_isValid;
}

QString OAIDocument::getRclastsessiondate() const {
    return m_rclastsessiondate;
}
void OAIDocument::setRclastsessiondate(const QString &rclastsessiondate) {
    m_rclastsessiondate = rclastsessiondate;
    m_rclastsessiondate_isSet = true;
}

bool OAIDocument::is_rclastsessiondate_Set() const{
    return m_rclastsessiondate_isSet;
}

bool OAIDocument::is_rclastsessiondate_Valid() const{
    return m_rclastsessiondate_isValid;
}

bool OAIDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carttag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkouttag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_department_visited_tag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_followers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rclastsession_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rclastsessiondate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_account_name_isValid && m_carttag_isValid && m_checkouttag_isValid && m_data_entity_id_isValid && m_department_visited_tag_isValid && m_email_isValid && m_followers_isValid && m_id_isValid && m_rclastsession_isValid && m_rclastsessiondate_isValid && true;
}

} // namespace OpenAPI
