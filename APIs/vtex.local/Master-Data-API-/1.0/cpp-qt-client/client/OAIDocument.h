/**
 * Master Data API - v2
 * # ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**      ## Welcome!    VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.    There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.    There are two ways to use Master Data:    1. Directly from the storefront  2. External integration    ### Directly from the storefront    If your scenario is to be used inside the storefront, be aware of the following observations:    1. Use the storefront host to query or store information to avoid **CORS**;  2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;  3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);  4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);    **It's important to avoid CORS using the relative path**    ### External Integration    If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:    1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;  2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);    ### Most used attributes listed here    | Name | Description |  | -------- | -------- |  | accountName | Account name in VTEX License Manager |  | name | Data Entity name |  | schema | JSON Schema of a Data Entity |  | id | Identifier of a document |  | x-vtex-api-appKey | User key |  | x-vtex-api-appToken | User token |
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDocument.h
 *
 * 
 */

#ifndef OAIDocument_H
#define OAIDocument_H

#include <QJsonObject>

#include "OAIDepartmentVisitedTag.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDepartmentVisitedTag;

class OAIDocument : public OAIObject {
public:
    OAIDocument();
    OAIDocument(QString json);
    ~OAIDocument() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountId() const;
    void setAccountId(const QString &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    QString getAccountName() const;
    void setAccountName(const QString &account_name);
    bool is_account_name_Set() const;
    bool is_account_name_Valid() const;

    QString getCarttag() const;
    void setCarttag(const QString &carttag);
    bool is_carttag_Set() const;
    bool is_carttag_Valid() const;

    QString getCheckouttag() const;
    void setCheckouttag(const QString &checkouttag);
    bool is_checkouttag_Set() const;
    bool is_checkouttag_Valid() const;

    QString getDataEntityId() const;
    void setDataEntityId(const QString &data_entity_id);
    bool is_data_entity_id_Set() const;
    bool is_data_entity_id_Valid() const;

    OAIDepartmentVisitedTag getDepartmentVisitedTag() const;
    void setDepartmentVisitedTag(const OAIDepartmentVisitedTag &department_visited_tag);
    bool is_department_visited_tag_Set() const;
    bool is_department_visited_tag_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    QList<QString> getFollowers() const;
    void setFollowers(const QList<QString> &followers);
    bool is_followers_Set() const;
    bool is_followers_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getRclastsession() const;
    void setRclastsession(const QString &rclastsession);
    bool is_rclastsession_Set() const;
    bool is_rclastsession_Valid() const;

    QString getRclastsessiondate() const;
    void setRclastsessiondate(const QString &rclastsessiondate);
    bool is_rclastsessiondate_Set() const;
    bool is_rclastsessiondate_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    QString m_account_name;
    bool m_account_name_isSet;
    bool m_account_name_isValid;

    QString m_carttag;
    bool m_carttag_isSet;
    bool m_carttag_isValid;

    QString m_checkouttag;
    bool m_checkouttag_isSet;
    bool m_checkouttag_isValid;

    QString m_data_entity_id;
    bool m_data_entity_id_isSet;
    bool m_data_entity_id_isValid;

    OAIDepartmentVisitedTag m_department_visited_tag;
    bool m_department_visited_tag_isSet;
    bool m_department_visited_tag_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    QList<QString> m_followers;
    bool m_followers_isSet;
    bool m_followers_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_rclastsession;
    bool m_rclastsession_isSet;
    bool m_rclastsession_isValid;

    QString m_rclastsessiondate;
    bool m_rclastsessiondate_isSet;
    bool m_rclastsessiondate_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDocument)

#endif // OAIDocument_H
