/**
 * Master Data API - v2
 * # ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**      ## Welcome!    VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.    There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.    There are two ways to use Master Data:    1. Directly from the storefront  2. External integration    ### Directly from the storefront    If your scenario is to be used inside the storefront, be aware of the following observations:    1. Use the storefront host to query or store information to avoid **CORS**;  2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;  3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);  4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);    **It's important to avoid CORS using the relative path**    ### External Integration    If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:    1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;  2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);    ### Most used attributes listed here    | Name | Description |  | -------- | -------- |  | accountName | Account name in VTEX License Manager |  | name | Data Entity name |  | schema | JSON Schema of a Data Entity |  | id | Identifier of a document |  | x-vtex-api-appKey | User key |  | x-vtex-api-appToken | User token |
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDocumentsApi_H
#define OAI_OAIDocumentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDocumentResponse.h"
#include "OAIUsing_fields_all.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDocumentsApi : public QObject {
    Q_OBJECT

public:
    OAIDocumentsApi(const int timeOut = 0);
    ~OAIDocumentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  data_entity_name QString [required]
    * @param[in]  request_body QMap<QString, QString> [required]
    * @param[in]  _schema QString [optional]
    */
    virtual void createnewdocument(const QString &content_type, const QString &accept, const QString &data_entity_name, const QMap<QString, QString> &request_body, const ::OpenAPI::OptionalParam<QString> &_schema = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data_entity_name QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  request_body QMap<QString, QString> [required]
    * @param[in]  _schema QString [optional]
    */
    virtual void createorupdatepartialdocument(const QString &data_entity_name, const QString &content_type, const QString &accept, const QMap<QString, QString> &request_body, const ::OpenAPI::OptionalParam<QString> &_schema = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data_entity_name QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deletedocument(const QString &data_entity_name, const QString &content_type, const QString &accept, const QString &id);

    /**
    * @param[in]  data_entity_name QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getdocument(const QString &data_entity_name, const QString &content_type, const QString &accept, const QString &id);

    /**
    * @param[in]  data_entity_name QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  id QString [required]
    * @param[in]  request_body QMap<QString, QString> [required]
    * @param[in]  _where QString [optional]
    * @param[in]  _schema QString [optional]
    */
    virtual void updateentiredocument(const QString &data_entity_name, const QString &accept, const QString &id, const QMap<QString, QString> &request_body, const ::OpenAPI::OptionalParam<QString> &_where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_schema = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data_entity_name QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  id QString [required]
    * @param[in]  request_body QMap<QString, QString> [required]
    * @param[in]  _where QString [optional]
    * @param[in]  _schema QString [optional]
    */
    virtual void updatepartialdocument(const QString &data_entity_name, const QString &accept, const QString &id, const QMap<QString, QString> &request_body, const ::OpenAPI::OptionalParam<QString> &_where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_schema = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createnewdocumentCallback(OAIHttpRequestWorker *worker);
    void createorupdatepartialdocumentCallback(OAIHttpRequestWorker *worker);
    void deletedocumentCallback(OAIHttpRequestWorker *worker);
    void getdocumentCallback(OAIHttpRequestWorker *worker);
    void updateentiredocumentCallback(OAIHttpRequestWorker *worker);
    void updatepartialdocumentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createnewdocumentSignal(OAIDocumentResponse summary);
    void createorupdatepartialdocumentSignal(OAIDocumentResponse summary);
    void deletedocumentSignal();
    void getdocumentSignal(OAIUsing_fields_all summary);
    void updateentiredocumentSignal(OAIDocumentResponse summary);
    void updatepartialdocumentSignal(OAIDocumentResponse summary);


    void createnewdocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocumentResponse summary);
    void createorupdatepartialdocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocumentResponse summary);
    void deletedocumentSignalFull(OAIHttpRequestWorker *worker);
    void getdocumentSignalFull(OAIHttpRequestWorker *worker, OAIUsing_fields_all summary);
    void updateentiredocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocumentResponse summary);
    void updatepartialdocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocumentResponse summary);

    Q_DECL_DEPRECATED_X("Use createnewdocumentSignalError() instead")
    void createnewdocumentSignalE(OAIDocumentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createnewdocumentSignalError(OAIDocumentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createorupdatepartialdocumentSignalError() instead")
    void createorupdatepartialdocumentSignalE(OAIDocumentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createorupdatepartialdocumentSignalError(OAIDocumentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletedocumentSignalError() instead")
    void deletedocumentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletedocumentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getdocumentSignalError() instead")
    void getdocumentSignalE(OAIUsing_fields_all summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getdocumentSignalError(OAIUsing_fields_all summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateentiredocumentSignalError() instead")
    void updateentiredocumentSignalE(OAIDocumentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateentiredocumentSignalError(OAIDocumentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatepartialdocumentSignalError() instead")
    void updatepartialdocumentSignalE(OAIDocumentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatepartialdocumentSignalError(OAIDocumentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createnewdocumentSignalErrorFull() instead")
    void createnewdocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createnewdocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createorupdatepartialdocumentSignalErrorFull() instead")
    void createorupdatepartialdocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createorupdatepartialdocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletedocumentSignalErrorFull() instead")
    void deletedocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletedocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getdocumentSignalErrorFull() instead")
    void getdocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getdocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateentiredocumentSignalErrorFull() instead")
    void updateentiredocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateentiredocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatepartialdocumentSignalErrorFull() instead")
    void updatepartialdocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatepartialdocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
