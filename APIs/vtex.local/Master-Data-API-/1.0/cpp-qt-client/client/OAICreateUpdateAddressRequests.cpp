/**
 * Master Data API - v2
 * # ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**      ## Welcome!    VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.    There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.    There are two ways to use Master Data:    1. Directly from the storefront  2. External integration    ### Directly from the storefront    If your scenario is to be used inside the storefront, be aware of the following observations:    1. Use the storefront host to query or store information to avoid **CORS**;  2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;  3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);  4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);    **It's important to avoid CORS using the relative path**    ### External Integration    If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:    1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;  2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);    ### Most used attributes listed here    | Name | Description |  | -------- | -------- |  | accountName | Account name in VTEX License Manager |  | name | Data Entity name |  | schema | JSON Schema of a Data Entity |  | id | Identifier of a document |  | x-vtex-api-appKey | User key |  | x-vtex-api-appToken | User token |
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUpdateAddressRequests.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUpdateAddressRequests::OAICreateUpdateAddressRequests(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUpdateAddressRequests::OAICreateUpdateAddressRequests() {
    this->initializeModel();
}

OAICreateUpdateAddressRequests::~OAICreateUpdateAddressRequests() {}

void OAICreateUpdateAddressRequests::initializeModel() {

    m_address_name_isSet = false;
    m_address_name_isValid = false;

    m_address_type_isSet = false;
    m_address_type_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_complement_isSet = false;
    m_complement_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_neighborhood_isSet = false;
    m_neighborhood_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_receiver_name_isSet = false;
    m_receiver_name_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAICreateUpdateAddressRequests::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUpdateAddressRequests::fromJsonObject(QJsonObject json) {

    m_address_name_isValid = ::OpenAPI::fromJsonValue(m_address_name, json[QString("addressName")]);
    m_address_name_isSet = !json[QString("addressName")].isNull() && m_address_name_isValid;

    m_address_type_isValid = ::OpenAPI::fromJsonValue(m_address_type, json[QString("addressType")]);
    m_address_type_isSet = !json[QString("addressType")].isNull() && m_address_type_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_complement_isValid = ::OpenAPI::fromJsonValue(m_complement, json[QString("complement")]);
    m_complement_isSet = !json[QString("complement")].isNull() && m_complement_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_neighborhood_isValid = ::OpenAPI::fromJsonValue(m_neighborhood, json[QString("neighborhood")]);
    m_neighborhood_isSet = !json[QString("neighborhood")].isNull() && m_neighborhood_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_receiver_name_isValid = ::OpenAPI::fromJsonValue(m_receiver_name, json[QString("receiverName")]);
    m_receiver_name_isSet = !json[QString("receiverName")].isNull() && m_receiver_name_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAICreateUpdateAddressRequests::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUpdateAddressRequests::asJsonObject() const {
    QJsonObject obj;
    if (m_address_name_isSet) {
        obj.insert(QString("addressName"), ::OpenAPI::toJsonValue(m_address_name));
    }
    if (m_address_type_isSet) {
        obj.insert(QString("addressType"), ::OpenAPI::toJsonValue(m_address_type));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_complement_isSet) {
        obj.insert(QString("complement"), ::OpenAPI::toJsonValue(m_complement));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_neighborhood_isSet) {
        obj.insert(QString("neighborhood"), ::OpenAPI::toJsonValue(m_neighborhood));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_receiver_name_isSet) {
        obj.insert(QString("receiverName"), ::OpenAPI::toJsonValue(m_receiver_name));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAICreateUpdateAddressRequests::getAddressName() const {
    return m_address_name;
}
void OAICreateUpdateAddressRequests::setAddressName(const QString &address_name) {
    m_address_name = address_name;
    m_address_name_isSet = true;
}

bool OAICreateUpdateAddressRequests::is_address_name_Set() const{
    return m_address_name_isSet;
}

bool OAICreateUpdateAddressRequests::is_address_name_Valid() const{
    return m_address_name_isValid;
}

QString OAICreateUpdateAddressRequests::getAddressType() const {
    return m_address_type;
}
void OAICreateUpdateAddressRequests::setAddressType(const QString &address_type) {
    m_address_type = address_type;
    m_address_type_isSet = true;
}

bool OAICreateUpdateAddressRequests::is_address_type_Set() const{
    return m_address_type_isSet;
}

bool OAICreateUpdateAddressRequests::is_address_type_Valid() const{
    return m_address_type_isValid;
}

QString OAICreateUpdateAddressRequests::getCity() const {
    return m_city;
}
void OAICreateUpdateAddressRequests::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAICreateUpdateAddressRequests::is_city_Set() const{
    return m_city_isSet;
}

bool OAICreateUpdateAddressRequests::is_city_Valid() const{
    return m_city_isValid;
}

QString OAICreateUpdateAddressRequests::getComplement() const {
    return m_complement;
}
void OAICreateUpdateAddressRequests::setComplement(const QString &complement) {
    m_complement = complement;
    m_complement_isSet = true;
}

bool OAICreateUpdateAddressRequests::is_complement_Set() const{
    return m_complement_isSet;
}

bool OAICreateUpdateAddressRequests::is_complement_Valid() const{
    return m_complement_isValid;
}

QString OAICreateUpdateAddressRequests::getCountry() const {
    return m_country;
}
void OAICreateUpdateAddressRequests::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAICreateUpdateAddressRequests::is_country_Set() const{
    return m_country_isSet;
}

bool OAICreateUpdateAddressRequests::is_country_Valid() const{
    return m_country_isValid;
}

QString OAICreateUpdateAddressRequests::getNeighborhood() const {
    return m_neighborhood;
}
void OAICreateUpdateAddressRequests::setNeighborhood(const QString &neighborhood) {
    m_neighborhood = neighborhood;
    m_neighborhood_isSet = true;
}

bool OAICreateUpdateAddressRequests::is_neighborhood_Set() const{
    return m_neighborhood_isSet;
}

bool OAICreateUpdateAddressRequests::is_neighborhood_Valid() const{
    return m_neighborhood_isValid;
}

QString OAICreateUpdateAddressRequests::getNumber() const {
    return m_number;
}
void OAICreateUpdateAddressRequests::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAICreateUpdateAddressRequests::is_number_Set() const{
    return m_number_isSet;
}

bool OAICreateUpdateAddressRequests::is_number_Valid() const{
    return m_number_isValid;
}

QString OAICreateUpdateAddressRequests::getPostalCode() const {
    return m_postal_code;
}
void OAICreateUpdateAddressRequests::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAICreateUpdateAddressRequests::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAICreateUpdateAddressRequests::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAICreateUpdateAddressRequests::getReceiverName() const {
    return m_receiver_name;
}
void OAICreateUpdateAddressRequests::setReceiverName(const QString &receiver_name) {
    m_receiver_name = receiver_name;
    m_receiver_name_isSet = true;
}

bool OAICreateUpdateAddressRequests::is_receiver_name_Set() const{
    return m_receiver_name_isSet;
}

bool OAICreateUpdateAddressRequests::is_receiver_name_Valid() const{
    return m_receiver_name_isValid;
}

QString OAICreateUpdateAddressRequests::getReference() const {
    return m_reference;
}
void OAICreateUpdateAddressRequests::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAICreateUpdateAddressRequests::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAICreateUpdateAddressRequests::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAICreateUpdateAddressRequests::getState() const {
    return m_state;
}
void OAICreateUpdateAddressRequests::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICreateUpdateAddressRequests::is_state_Set() const{
    return m_state_isSet;
}

bool OAICreateUpdateAddressRequests::is_state_Valid() const{
    return m_state_isValid;
}

QString OAICreateUpdateAddressRequests::getStreet() const {
    return m_street;
}
void OAICreateUpdateAddressRequests::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAICreateUpdateAddressRequests::is_street_Set() const{
    return m_street_isSet;
}

bool OAICreateUpdateAddressRequests::is_street_Valid() const{
    return m_street_isValid;
}

QString OAICreateUpdateAddressRequests::getUserId() const {
    return m_user_id;
}
void OAICreateUpdateAddressRequests::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAICreateUpdateAddressRequests::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAICreateUpdateAddressRequests::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAICreateUpdateAddressRequests::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neighborhood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUpdateAddressRequests::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
