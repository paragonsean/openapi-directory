/**
 * Master Data API - v2
 * # ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**      ## Welcome!    VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.    There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.    There are two ways to use Master Data:    1. Directly from the storefront  2. External integration    ### Directly from the storefront    If your scenario is to be used inside the storefront, be aware of the following observations:    1. Use the storefront host to query or store information to avoid **CORS**;  2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;  3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);  4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);    **It's important to avoid CORS using the relative path**    ### External Integration    If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:    1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;  2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);    ### Most used attributes listed here    | Name | Description |  | -------- | -------- |  | accountName | Account name in VTEX License Manager |  | name | Data Entity name |  | schema | JSON Schema of a Data Entity |  | id | Identifier of a document |  | x-vtex-api-appKey | User key |  | x-vtex-api-appToken | User token |
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUpdateProfileRequests.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUpdateProfileRequests::OAICreateUpdateProfileRequests(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUpdateProfileRequests::OAICreateUpdateProfileRequests() {
    this->initializeModel();
}

OAICreateUpdateProfileRequests::~OAICreateUpdateProfileRequests() {}

void OAICreateUpdateProfileRequests::initializeModel() {

    m_document_isSet = false;
    m_document_isValid = false;

    m_document_type_isSet = false;
    m_document_type_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_is_corporate_isSet = false;
    m_is_corporate_isValid = false;

    m_is_newsletter_opt_in_isSet = false;
    m_is_newsletter_opt_in_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_locale_default_isSet = false;
    m_locale_default_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;
}

void OAICreateUpdateProfileRequests::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUpdateProfileRequests::fromJsonObject(QJsonObject json) {

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_document_type_isValid = ::OpenAPI::fromJsonValue(m_document_type, json[QString("documentType")]);
    m_document_type_isSet = !json[QString("documentType")].isNull() && m_document_type_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_is_corporate_isValid = ::OpenAPI::fromJsonValue(m_is_corporate, json[QString("isCorporate")]);
    m_is_corporate_isSet = !json[QString("isCorporate")].isNull() && m_is_corporate_isValid;

    m_is_newsletter_opt_in_isValid = ::OpenAPI::fromJsonValue(m_is_newsletter_opt_in, json[QString("isNewsletterOptIn")]);
    m_is_newsletter_opt_in_isSet = !json[QString("isNewsletterOptIn")].isNull() && m_is_newsletter_opt_in_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_locale_default_isValid = ::OpenAPI::fromJsonValue(m_locale_default, json[QString("localeDefault")]);
    m_locale_default_isSet = !json[QString("localeDefault")].isNull() && m_locale_default_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;
}

QString OAICreateUpdateProfileRequests::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUpdateProfileRequests::asJsonObject() const {
    QJsonObject obj;
    if (m_document_isSet) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_document_type_isSet) {
        obj.insert(QString("documentType"), ::OpenAPI::toJsonValue(m_document_type));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_is_corporate_isSet) {
        obj.insert(QString("isCorporate"), ::OpenAPI::toJsonValue(m_is_corporate));
    }
    if (m_is_newsletter_opt_in_isSet) {
        obj.insert(QString("isNewsletterOptIn"), ::OpenAPI::toJsonValue(m_is_newsletter_opt_in));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_locale_default_isSet) {
        obj.insert(QString("localeDefault"), ::OpenAPI::toJsonValue(m_locale_default));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    return obj;
}

QString OAICreateUpdateProfileRequests::getDocument() const {
    return m_document;
}
void OAICreateUpdateProfileRequests::setDocument(const QString &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAICreateUpdateProfileRequests::is_document_Set() const{
    return m_document_isSet;
}

bool OAICreateUpdateProfileRequests::is_document_Valid() const{
    return m_document_isValid;
}

QString OAICreateUpdateProfileRequests::getDocumentType() const {
    return m_document_type;
}
void OAICreateUpdateProfileRequests::setDocumentType(const QString &document_type) {
    m_document_type = document_type;
    m_document_type_isSet = true;
}

bool OAICreateUpdateProfileRequests::is_document_type_Set() const{
    return m_document_type_isSet;
}

bool OAICreateUpdateProfileRequests::is_document_type_Valid() const{
    return m_document_type_isValid;
}

QString OAICreateUpdateProfileRequests::getEmail() const {
    return m_email;
}
void OAICreateUpdateProfileRequests::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICreateUpdateProfileRequests::is_email_Set() const{
    return m_email_isSet;
}

bool OAICreateUpdateProfileRequests::is_email_Valid() const{
    return m_email_isValid;
}

QString OAICreateUpdateProfileRequests::getFirstName() const {
    return m_first_name;
}
void OAICreateUpdateProfileRequests::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAICreateUpdateProfileRequests::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAICreateUpdateProfileRequests::is_first_name_Valid() const{
    return m_first_name_isValid;
}

bool OAICreateUpdateProfileRequests::isIsCorporate() const {
    return m_is_corporate;
}
void OAICreateUpdateProfileRequests::setIsCorporate(const bool &is_corporate) {
    m_is_corporate = is_corporate;
    m_is_corporate_isSet = true;
}

bool OAICreateUpdateProfileRequests::is_is_corporate_Set() const{
    return m_is_corporate_isSet;
}

bool OAICreateUpdateProfileRequests::is_is_corporate_Valid() const{
    return m_is_corporate_isValid;
}

bool OAICreateUpdateProfileRequests::isIsNewsletterOptIn() const {
    return m_is_newsletter_opt_in;
}
void OAICreateUpdateProfileRequests::setIsNewsletterOptIn(const bool &is_newsletter_opt_in) {
    m_is_newsletter_opt_in = is_newsletter_opt_in;
    m_is_newsletter_opt_in_isSet = true;
}

bool OAICreateUpdateProfileRequests::is_is_newsletter_opt_in_Set() const{
    return m_is_newsletter_opt_in_isSet;
}

bool OAICreateUpdateProfileRequests::is_is_newsletter_opt_in_Valid() const{
    return m_is_newsletter_opt_in_isValid;
}

QString OAICreateUpdateProfileRequests::getLastName() const {
    return m_last_name;
}
void OAICreateUpdateProfileRequests::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAICreateUpdateProfileRequests::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAICreateUpdateProfileRequests::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAICreateUpdateProfileRequests::getLocaleDefault() const {
    return m_locale_default;
}
void OAICreateUpdateProfileRequests::setLocaleDefault(const QString &locale_default) {
    m_locale_default = locale_default;
    m_locale_default_isSet = true;
}

bool OAICreateUpdateProfileRequests::is_locale_default_Set() const{
    return m_locale_default_isSet;
}

bool OAICreateUpdateProfileRequests::is_locale_default_Valid() const{
    return m_locale_default_isValid;
}

QString OAICreateUpdateProfileRequests::getPhone() const {
    return m_phone;
}
void OAICreateUpdateProfileRequests::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAICreateUpdateProfileRequests::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAICreateUpdateProfileRequests::is_phone_Valid() const{
    return m_phone_isValid;
}

bool OAICreateUpdateProfileRequests::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_corporate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_newsletter_opt_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUpdateProfileRequests::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
