/**
 * Master Data API - v2
 * # ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**      ## Welcome!    VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.    There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.    There are two ways to use Master Data:    1. Directly from the storefront  2. External integration    ### Directly from the storefront    If your scenario is to be used inside the storefront, be aware of the following observations:    1. Use the storefront host to query or store information to avoid **CORS**;  2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;  3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);  4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);    **It's important to avoid CORS using the relative path**    ### External Integration    If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:    1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;  2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);    ### Most used attributes listed here    | Name | Description |  | -------- | -------- |  | accountName | Account name in VTEX License Manager |  | name | Data Entity name |  | schema | JSON Schema of a Data Entity |  | id | Identifier of a document |  | x-vtex-api-appKey | User key |  | x-vtex-api-appToken | User token |
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomerProfilesApi_H
#define OAI_OAICustomerProfilesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateUpdateProfileRequests.h"
#include "OAIDocumentResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomerProfilesApi : public QObject {
    Q_OBJECT

public:
    OAICustomerProfilesApi(const int timeOut = 0);
    ~OAICustomerProfilesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_create_update_profile_requests OAICreateUpdateProfileRequests [required]
    * @param[in]  _schema QString [optional]
    */
    virtual void createNewCustomerProfilev2(const QString &content_type, const QString &accept, const OAICreateUpdateProfileRequests &oai_create_update_profile_requests, const ::OpenAPI::OptionalParam<QString> &_schema = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteCustomerProfile(const QString &content_type, const QString &accept, const QString &id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_create_update_profile_requests OAICreateUpdateProfileRequests [required]
    * @param[in]  _schema QString [optional]
    */
    virtual void updateCustomerProfile(const QString &content_type, const QString &accept, const QString &id, const OAICreateUpdateProfileRequests &oai_create_update_profile_requests, const ::OpenAPI::OptionalParam<QString> &_schema = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNewCustomerProfilev2Callback(OAIHttpRequestWorker *worker);
    void deleteCustomerProfileCallback(OAIHttpRequestWorker *worker);
    void updateCustomerProfileCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNewCustomerProfilev2Signal(OAIDocumentResponse summary);
    void deleteCustomerProfileSignal(OAIDocumentResponse summary);
    void updateCustomerProfileSignal(OAIDocumentResponse summary);


    void createNewCustomerProfilev2SignalFull(OAIHttpRequestWorker *worker, OAIDocumentResponse summary);
    void deleteCustomerProfileSignalFull(OAIHttpRequestWorker *worker, OAIDocumentResponse summary);
    void updateCustomerProfileSignalFull(OAIHttpRequestWorker *worker, OAIDocumentResponse summary);

    Q_DECL_DEPRECATED_X("Use createNewCustomerProfilev2SignalError() instead")
    void createNewCustomerProfilev2SignalE(OAIDocumentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNewCustomerProfilev2SignalError(OAIDocumentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomerProfileSignalError() instead")
    void deleteCustomerProfileSignalE(OAIDocumentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomerProfileSignalError(OAIDocumentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomerProfileSignalError() instead")
    void updateCustomerProfileSignalE(OAIDocumentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomerProfileSignalError(OAIDocumentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNewCustomerProfilev2SignalErrorFull() instead")
    void createNewCustomerProfilev2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNewCustomerProfilev2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCustomerProfileSignalErrorFull() instead")
    void deleteCustomerProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCustomerProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomerProfileSignalErrorFull() instead")
    void updateCustomerProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomerProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
