/**
 * Master Data API - v2
 * # ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**      ## Welcome!    VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.    There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.    There are two ways to use Master Data:    1. Directly from the storefront  2. External integration    ### Directly from the storefront    If your scenario is to be used inside the storefront, be aware of the following observations:    1. Use the storefront host to query or store information to avoid **CORS**;  2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;  3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);  4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);    **It's important to avoid CORS using the relative path**    ### External Integration    If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:    1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;  2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);    ### Most used attributes listed here    | Name | Description |  | -------- | -------- |  | accountName | Account name in VTEX License Manager |  | name | Data Entity name |  | schema | JSON Schema of a Data Entity |  | id | Identifier of a document |  | x-vtex-api-appKey | User key |  | x-vtex-api-appToken | User token |
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidatedocumentbyclustersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidatedocumentbyclustersRequest::OAIValidatedocumentbyclustersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidatedocumentbyclustersRequest::OAIValidatedocumentbyclustersRequest() {
    this->initializeModel();
}

OAIValidatedocumentbyclustersRequest::~OAIValidatedocumentbyclustersRequest() {}

void OAIValidatedocumentbyclustersRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_rule_isSet = false;
    m_rule_isValid = false;
}

void OAIValidatedocumentbyclustersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidatedocumentbyclustersRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rule_isValid = ::OpenAPI::fromJsonValue(m_rule, json[QString("rule")]);
    m_rule_isSet = !json[QString("rule")].isNull() && m_rule_isValid;
}

QString OAIValidatedocumentbyclustersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidatedocumentbyclustersRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rule_isSet) {
        obj.insert(QString("rule"), ::OpenAPI::toJsonValue(m_rule));
    }
    return obj;
}

QString OAIValidatedocumentbyclustersRequest::getName() const {
    return m_name;
}
void OAIValidatedocumentbyclustersRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIValidatedocumentbyclustersRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIValidatedocumentbyclustersRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIValidatedocumentbyclustersRequest::getRule() const {
    return m_rule;
}
void OAIValidatedocumentbyclustersRequest::setRule(const QString &rule) {
    m_rule = rule;
    m_rule_isSet = true;
}

bool OAIValidatedocumentbyclustersRequest::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAIValidatedocumentbyclustersRequest::is_rule_Valid() const{
    return m_rule_isValid;
}

bool OAIValidatedocumentbyclustersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidatedocumentbyclustersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_rule_isValid && true;
}

} // namespace OpenAPI
