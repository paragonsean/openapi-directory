/*
 * Master Data API - v2
 * # ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**      ## Welcome!    VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.    There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.    There are two ways to use Master Data:    1. Directly from the storefront  2. External integration    ### Directly from the storefront    If your scenario is to be used inside the storefront, be aware of the following observations:    1. Use the storefront host to query or store information to avoid **CORS**;  2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;  3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);  4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);    **It's important to avoid CORS using the relative path**    ### External Integration    If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:    1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;  2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);    ### Most used attributes listed here    | Name | Description |  | -------- | -------- |  | accountName | Account name in VTEX License Manager |  | name | Data Entity name |  | schema | JSON Schema of a Data Entity |  | id | Identifier of a document |  | x-vtex-api-appKey | User key |  | x-vtex-api-appToken | User token |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.SaveschemabynameRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SchemasApi
 */
@Disabled
public class SchemasApiTest {

    private final SchemasApi api = new SchemasApi();

    /**
     * Delete schema by name
     *
     * Deletes an existing schema for a given data entity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteschemabynameTest() throws ApiException {
        String contentType = null;
        String dataEntityName = null;
        String schemaName = null;
        api.deleteschemabyname(contentType, dataEntityName, schemaName);
        // TODO: test validations
    }

    /**
     * Get schema by name
     *
     * Returns an existing schema for a given data entity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getschemabynameTest() throws ApiException {
        String dataEntityName = null;
        String contentType = null;
        String schemaName = null;
        api.getschemabyname(dataEntityName, contentType, schemaName);
        // TODO: test validations
    }

    /**
     * Get schemas
     *
     * Return the schemas saved.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getschemasTest() throws ApiException {
        String dataEntityName = null;
        String contentType = null;
        api.getschemas(dataEntityName, contentType);
        // TODO: test validations
    }

    /**
     * Save schema by name
     *
     * Creates or edits a data entity schema. Learn more about [Master Data schemas](https://developers.vtex.com/vtex-rest-api/docs/master-data-schema-lifecycle)    &gt; Note that if you send a &#x60;schemaName&#x60; that does not exist for that data entity, this request will create it.    This request can also be used to [create or edit Master Data v2 triggers](https://developers.vtex.com/vtex-rest-api/docs/setting-up-triggers-in-master-data-v2).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveschemabynameTest() throws ApiException {
        String dataEntityName = null;
        String schemaName = null;
        SaveschemabynameRequest saveschemabynameRequest = null;
        api.saveschemabyname(dataEntityName, schemaName, saveschemabynameRequest);
        // TODO: test validations
    }

}
