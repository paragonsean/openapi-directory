/*
 * Master Data API - v2
 * # ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**      ## Welcome!    VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.    There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.    There are two ways to use Master Data:    1. Directly from the storefront  2. External integration    ### Directly from the storefront    If your scenario is to be used inside the storefront, be aware of the following observations:    1. Use the storefront host to query or store information to avoid **CORS**;  2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;  3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);  4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);    **It's important to avoid CORS using the relative path**    ### External Integration    If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:    1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;  2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);    ### Most used attributes listed here    | Name | Description |  | -------- | -------- |  | accountName | Account name in VTEX License Manager |  | name | Data Entity name |  | schema | JSON Schema of a Data Entity |  | id | Identifier of a document |  | x-vtex-api-appKey | User key |  | x-vtex-api-appToken | User token |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DocumentResponse;
import org.openapitools.client.model.UsingFieldsAll;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DocumentsApi
 */
@Disabled
public class DocumentsApiTest {

    private final DocumentsApi api = new DocumentsApi();

    /**
     * Create new document
     *
     * This request allows you to create a new document corresponding to a given data entity. For example, you can create a new customer profile or address.    &gt; You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to create.    ## Example use cases    ### Client profile    In order to create a new customer profile, choose the &#x60;CL&#x60; data entity and send a request similar to this:    POST  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;email\&quot;: \&quot;clark.kent@examplemail.com\&quot;,      \&quot;firstName\&quot;: \&quot;Clark\&quot;,      \&quot;lastName\&quot;: \&quot;Kent\&quot;,      \&quot;phone\&quot;: \&quot;+12025550195\&quot;,      \&quot;documentType\&quot;: \&quot;CPF\&quot;,      \&quot;document\&quot;: \&quot;12345678900\&quot;      \&quot;isCorporate\&quot;: false,      \&quot;isNewsletterOptIn\&quot;: false,      \&quot;localeDefault\&quot;: \&quot;en-US\&quot;   }  &#x60;&#x60;&#x60;    ### Client address    For a new address, the data entity is &#x60;AD&#x60; and the request would look like this:    POST  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;addressName\&quot;: \&quot;My House\&quot;,      \&quot;addressType\&quot;: \&quot;residential\&quot;,      \&quot;city\&quot;: \&quot;Metropolis\&quot;,      \&quot;complement\&quot;: \&quot;\&quot;,      \&quot;country\&quot;: \&quot;USA\&quot;,      \&quot;postalCode\&quot;: \&quot;11375\&quot;,      \&quot;receiverName\&quot;: \&quot;Clark Kent\&quot;,      \&quot;reference\&quot;: null,      \&quot;state\&quot;: \&quot;MP\&quot;,      \&quot;street\&quot;: \&quot;Baker Street\&quot;,      \&quot;neighborhood\&quot;: \&quot;Upper east side\&quot;,      \&quot;number\&quot;: \&quot;21\&quot;,      \&quot;userId\&quot;: \&quot;7e03m794-a33a-11e9-84rt6-0adfa64s5a8e\&quot;  }  &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createnewdocumentTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String dataEntityName = null;
        Map<String, String> requestBody = null;
        String schema = null;
        DocumentResponse response = api.createnewdocument(contentType, accept, dataEntityName, requestBody, schema);
        // TODO: test validations
    }

    /**
     * Create partial document
     *
     * This request allows you to partially update a document corresponding to a given data entity.    &gt; You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to create a customer profile&#39;s &#x60;phone&#x60; and &#x60;isNewsletterOptIn&#x60; fields, choose the &#x60;CL&#x60; data entity and send a request similar to this:    PATCH  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;phone\&quot;: \&quot;+12025550195\&quot;,      \&quot;isNewsletterOptIn\&quot;: false   }  &#x60;&#x60;&#x60;    ### Client address    In order to update the &#x60;receiverName&#x60; of an existing address, the data entity is &#x60;AD&#x60; and the request would look like this:    PATCH  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;receiverName\&quot;: \&quot;Lois Lane\&quot;  }  &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createorupdatepartialdocumentTest() throws ApiException {
        String dataEntityName = null;
        String contentType = null;
        String accept = null;
        Map<String, String> requestBody = null;
        String schema = null;
        DocumentResponse response = api.createorupdatepartialdocument(dataEntityName, contentType, accept, requestBody, schema);
        // TODO: test validations
    }

    /**
     * Delete document
     *
     * It allows to delete a document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletedocumentTest() throws ApiException {
        String dataEntityName = null;
        String contentType = null;
        String accept = null;
        String id = null;
        api.deletedocument(dataEntityName, contentType, accept, id);
        // TODO: test validations
    }

    /**
     * Get document
     *
     * Gets document by ID.    &gt; Assign the &#x60;_fields&#x60; parameter in the query string to retrieve the desired fields. If you want to return all the fields use &#x60;_fields&#x3D;_all&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getdocumentTest() throws ApiException {
        String dataEntityName = null;
        String contentType = null;
        String accept = null;
        String id = null;
        UsingFieldsAll response = api.getdocument(dataEntityName, contentType, accept, id);
        // TODO: test validations
    }

    /**
     * Update entire document
     *
     * Update an existing document corresponding to a given data entity. For example, you can update a customer profile or address.    &gt; You can use this request to update documents in any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to update an existing customer profile, choose the &#x60;CL&#x60; data entity and send a request similar to this:    PUT  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;email\&quot;: \&quot;clark.kent@examplemail.com\&quot;,      \&quot;firstName\&quot;: \&quot;Clark\&quot;,      \&quot;lastName\&quot;: \&quot;Kent\&quot;,      \&quot;phone\&quot;: \&quot;+12025550195\&quot;,      \&quot;documentType\&quot;: \&quot;CPF\&quot;,      \&quot;document\&quot;: \&quot;12345678900\&quot;      \&quot;isCorporate\&quot;: false,      \&quot;isNewsletterOptIn\&quot;: false,      \&quot;localeDefault\&quot;: \&quot;en-US\&quot;   }  &#x60;&#x60;&#x60;    ### Client address    To update an address, the data entity is &#x60;AD&#x60; and the request would look like this:    PUT  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;addressName\&quot;: \&quot;My House\&quot;,      \&quot;addressType\&quot;: \&quot;residential\&quot;,      \&quot;city\&quot;: \&quot;Metropolis\&quot;,      \&quot;complement\&quot;: \&quot;\&quot;,      \&quot;country\&quot;: \&quot;USA\&quot;,      \&quot;postalCode\&quot;: \&quot;11375\&quot;,      \&quot;receiverName\&quot;: \&quot;Clark Kent\&quot;,      \&quot;reference\&quot;: null,      \&quot;state\&quot;: \&quot;MP\&quot;,      \&quot;street\&quot;: \&quot;Baker Street\&quot;,      \&quot;neighborhood\&quot;: \&quot;Upper east side\&quot;,      \&quot;number\&quot;: \&quot;21\&quot;,      \&quot;userId\&quot;: \&quot;7e03m794-a33a-11e9-84rt6-0adfa64s5a8e\&quot;  }  &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateentiredocumentTest() throws ApiException {
        String dataEntityName = null;
        String accept = null;
        String id = null;
        Map<String, String> requestBody = null;
        String where = null;
        String schema = null;
        DocumentResponse response = api.updateentiredocument(dataEntityName, accept, id, requestBody, where, schema);
        // TODO: test validations
    }

    /**
     * Update partial document
     *
     * This request allows you to partially update a document corresponding to a given data entity. For example, you can update some fields of a customer profile or address.    &gt; You can use this request to update documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to update a customer profile&#39;s &#x60;phone&#x60; and &#x60;isNewsletterOptIn&#x60; fields, choose the &#x60;CL&#x60; data entity and send a request similar to this:    PATCH  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;phone\&quot;: \&quot;+12025550195\&quot;,      \&quot;isNewsletterOptIn\&quot;: false   }  &#x60;&#x60;&#x60;    ### Client address    In order to update the &#x60;receiverName&#x60; of an existing address, the data entity is &#x60;AD&#x60; and the request would look like this:    PATCH  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;receiverName\&quot;: \&quot;Lois Lane\&quot;  }  &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatepartialdocumentTest() throws ApiException {
        String dataEntityName = null;
        String accept = null;
        String id = null;
        Map<String, String> requestBody = null;
        String where = null;
        String schema = null;
        DocumentResponse response = api.updatepartialdocument(dataEntityName, accept, id, requestBody, where, schema);
        // TODO: test validations
    }

}
