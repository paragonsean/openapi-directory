/*
 * Master Data API - v2
 * # ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**      ## Welcome!    VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.    There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.    There are two ways to use Master Data:    1. Directly from the storefront  2. External integration    ### Directly from the storefront    If your scenario is to be used inside the storefront, be aware of the following observations:    1. Use the storefront host to query or store information to avoid **CORS**;  2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;  3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);  4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);    **It's important to avoid CORS using the relative path**    ### External Integration    If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:    1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;  2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);    ### Most used attributes listed here    | Name | Description |  | -------- | -------- |  | accountName | Account name in VTEX License Manager |  | name | Data Entity name |  | schema | JSON Schema of a Data Entity |  | id | Identifier of a document |  | x-vtex-api-appKey | User key |  | x-vtex-api-appToken | User token |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateUpdateProfileRequests;
import org.openapitools.client.model.DocumentResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomerProfilesApi
 */
@Disabled
public class CustomerProfilesApiTest {

    private final CustomerProfilesApi api = new CustomerProfilesApi();

    /**
     * Create new customer profile
     *
     * Creates new customer profile.    &gt; You can use this request to create customer profiles according to any &#x60;CL&#x60; schema. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for the schemas you are using. Learn more about how to use [Master Data v2 schemas](https://developers.vtex.com/vtex-rest-api/docs/master-data-schema-lifecycle).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewCustomerProfilev2Test() throws ApiException {
        String contentType = null;
        String accept = null;
        CreateUpdateProfileRequests createUpdateProfileRequests = null;
        String schema = null;
        DocumentResponse response = api.createNewCustomerProfilev2(contentType, accept, createUpdateProfileRequests, schema);
        // TODO: test validations
    }

    /**
     * Delete customer profile
     *
     * Deletes a customer profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCustomerProfileTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String id = null;
        DocumentResponse response = api.deleteCustomerProfile(contentType, accept, id);
        // TODO: test validations
    }

    /**
     * Update customer profile
     *
     * Partially updates a customer profile.    &gt; You can use this request to update customer profiles according to any &#x60;CL&#x60; schema. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for the schemas you are using. Learn more about how to use [Master Data v2 schemas](https://developers.vtex.com/vtex-rest-api/docs/master-data-schema-lifecycle).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomerProfileTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String id = null;
        CreateUpdateProfileRequests createUpdateProfileRequests = null;
        String schema = null;
        DocumentResponse response = api.updateCustomerProfile(contentType, accept, id, createUpdateProfileRequests, schema);
        // TODO: test validations
    }

}
