/*
 * Master Data API - v2
 * # ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**      ## Welcome!    VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.    There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.    There are two ways to use Master Data:    1. Directly from the storefront  2. External integration    ### Directly from the storefront    If your scenario is to be used inside the storefront, be aware of the following observations:    1. Use the storefront host to query or store information to avoid **CORS**;  2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;  3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);  4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);    **It's important to avoid CORS using the relative path**    ### External Integration    If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:    1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;  2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);    ### Most used attributes listed here    | Name | Description |  | -------- | -------- |  | accountName | Account name in VTEX License Manager |  | name | Data Entity name |  | schema | JSON Schema of a Data Entity |  | id | Identifier of a document |  | x-vtex-api-appKey | User key |  | x-vtex-api-appToken | User token |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DocumentResponse;
import org.openapitools.client.model.UsingFieldsAll;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DocumentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createnewdocument
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param requestBody  (required)
     * @param schema Name of the schema the document to be created needs to be compliant with. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createnewdocumentCall(String contentType, String accept, String dataEntityName, Map<String, String> requestBody, String schema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/dataentities/{dataEntityName}/documents"
            .replace("{" + "dataEntityName" + "}", localVarApiClient.escapeString(dataEntityName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (schema != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_schema", schema));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createnewdocumentValidateBeforeCall(String contentType, String accept, String dataEntityName, Map<String, String> requestBody, String schema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createnewdocument(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createnewdocument(Async)");
        }

        // verify the required parameter 'dataEntityName' is set
        if (dataEntityName == null) {
            throw new ApiException("Missing the required parameter 'dataEntityName' when calling createnewdocument(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling createnewdocument(Async)");
        }

        return createnewdocumentCall(contentType, accept, dataEntityName, requestBody, schema, _callback);

    }

    /**
     * Create new document
     * This request allows you to create a new document corresponding to a given data entity. For example, you can create a new customer profile or address.    &gt; You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to create.    ## Example use cases    ### Client profile    In order to create a new customer profile, choose the &#x60;CL&#x60; data entity and send a request similar to this:    POST  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;email\&quot;: \&quot;clark.kent@examplemail.com\&quot;,      \&quot;firstName\&quot;: \&quot;Clark\&quot;,      \&quot;lastName\&quot;: \&quot;Kent\&quot;,      \&quot;phone\&quot;: \&quot;+12025550195\&quot;,      \&quot;documentType\&quot;: \&quot;CPF\&quot;,      \&quot;document\&quot;: \&quot;12345678900\&quot;      \&quot;isCorporate\&quot;: false,      \&quot;isNewsletterOptIn\&quot;: false,      \&quot;localeDefault\&quot;: \&quot;en-US\&quot;   }  &#x60;&#x60;&#x60;    ### Client address    For a new address, the data entity is &#x60;AD&#x60; and the request would look like this:    POST  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;addressName\&quot;: \&quot;My House\&quot;,      \&quot;addressType\&quot;: \&quot;residential\&quot;,      \&quot;city\&quot;: \&quot;Metropolis\&quot;,      \&quot;complement\&quot;: \&quot;\&quot;,      \&quot;country\&quot;: \&quot;USA\&quot;,      \&quot;postalCode\&quot;: \&quot;11375\&quot;,      \&quot;receiverName\&quot;: \&quot;Clark Kent\&quot;,      \&quot;reference\&quot;: null,      \&quot;state\&quot;: \&quot;MP\&quot;,      \&quot;street\&quot;: \&quot;Baker Street\&quot;,      \&quot;neighborhood\&quot;: \&quot;Upper east side\&quot;,      \&quot;number\&quot;: \&quot;21\&quot;,      \&quot;userId\&quot;: \&quot;7e03m794-a33a-11e9-84rt6-0adfa64s5a8e\&quot;  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param requestBody  (required)
     * @param schema Name of the schema the document to be created needs to be compliant with. (optional)
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DocumentResponse createnewdocument(String contentType, String accept, String dataEntityName, Map<String, String> requestBody, String schema) throws ApiException {
        ApiResponse<DocumentResponse> localVarResp = createnewdocumentWithHttpInfo(contentType, accept, dataEntityName, requestBody, schema);
        return localVarResp.getData();
    }

    /**
     * Create new document
     * This request allows you to create a new document corresponding to a given data entity. For example, you can create a new customer profile or address.    &gt; You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to create.    ## Example use cases    ### Client profile    In order to create a new customer profile, choose the &#x60;CL&#x60; data entity and send a request similar to this:    POST  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;email\&quot;: \&quot;clark.kent@examplemail.com\&quot;,      \&quot;firstName\&quot;: \&quot;Clark\&quot;,      \&quot;lastName\&quot;: \&quot;Kent\&quot;,      \&quot;phone\&quot;: \&quot;+12025550195\&quot;,      \&quot;documentType\&quot;: \&quot;CPF\&quot;,      \&quot;document\&quot;: \&quot;12345678900\&quot;      \&quot;isCorporate\&quot;: false,      \&quot;isNewsletterOptIn\&quot;: false,      \&quot;localeDefault\&quot;: \&quot;en-US\&quot;   }  &#x60;&#x60;&#x60;    ### Client address    For a new address, the data entity is &#x60;AD&#x60; and the request would look like this:    POST  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;addressName\&quot;: \&quot;My House\&quot;,      \&quot;addressType\&quot;: \&quot;residential\&quot;,      \&quot;city\&quot;: \&quot;Metropolis\&quot;,      \&quot;complement\&quot;: \&quot;\&quot;,      \&quot;country\&quot;: \&quot;USA\&quot;,      \&quot;postalCode\&quot;: \&quot;11375\&quot;,      \&quot;receiverName\&quot;: \&quot;Clark Kent\&quot;,      \&quot;reference\&quot;: null,      \&quot;state\&quot;: \&quot;MP\&quot;,      \&quot;street\&quot;: \&quot;Baker Street\&quot;,      \&quot;neighborhood\&quot;: \&quot;Upper east side\&quot;,      \&quot;number\&quot;: \&quot;21\&quot;,      \&quot;userId\&quot;: \&quot;7e03m794-a33a-11e9-84rt6-0adfa64s5a8e\&quot;  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param requestBody  (required)
     * @param schema Name of the schema the document to be created needs to be compliant with. (optional)
     * @return ApiResponse&lt;DocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentResponse> createnewdocumentWithHttpInfo(String contentType, String accept, String dataEntityName, Map<String, String> requestBody, String schema) throws ApiException {
        okhttp3.Call localVarCall = createnewdocumentValidateBeforeCall(contentType, accept, dataEntityName, requestBody, schema, null);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new document (asynchronously)
     * This request allows you to create a new document corresponding to a given data entity. For example, you can create a new customer profile or address.    &gt; You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to create.    ## Example use cases    ### Client profile    In order to create a new customer profile, choose the &#x60;CL&#x60; data entity and send a request similar to this:    POST  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;email\&quot;: \&quot;clark.kent@examplemail.com\&quot;,      \&quot;firstName\&quot;: \&quot;Clark\&quot;,      \&quot;lastName\&quot;: \&quot;Kent\&quot;,      \&quot;phone\&quot;: \&quot;+12025550195\&quot;,      \&quot;documentType\&quot;: \&quot;CPF\&quot;,      \&quot;document\&quot;: \&quot;12345678900\&quot;      \&quot;isCorporate\&quot;: false,      \&quot;isNewsletterOptIn\&quot;: false,      \&quot;localeDefault\&quot;: \&quot;en-US\&quot;   }  &#x60;&#x60;&#x60;    ### Client address    For a new address, the data entity is &#x60;AD&#x60; and the request would look like this:    POST  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;addressName\&quot;: \&quot;My House\&quot;,      \&quot;addressType\&quot;: \&quot;residential\&quot;,      \&quot;city\&quot;: \&quot;Metropolis\&quot;,      \&quot;complement\&quot;: \&quot;\&quot;,      \&quot;country\&quot;: \&quot;USA\&quot;,      \&quot;postalCode\&quot;: \&quot;11375\&quot;,      \&quot;receiverName\&quot;: \&quot;Clark Kent\&quot;,      \&quot;reference\&quot;: null,      \&quot;state\&quot;: \&quot;MP\&quot;,      \&quot;street\&quot;: \&quot;Baker Street\&quot;,      \&quot;neighborhood\&quot;: \&quot;Upper east side\&quot;,      \&quot;number\&quot;: \&quot;21\&quot;,      \&quot;userId\&quot;: \&quot;7e03m794-a33a-11e9-84rt6-0adfa64s5a8e\&quot;  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param requestBody  (required)
     * @param schema Name of the schema the document to be created needs to be compliant with. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createnewdocumentAsync(String contentType, String accept, String dataEntityName, Map<String, String> requestBody, String schema, final ApiCallback<DocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createnewdocumentValidateBeforeCall(contentType, accept, dataEntityName, requestBody, schema, _callback);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createorupdatepartialdocument
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param requestBody JSON with the fields to be updated. (required)
     * @param schema Name of the schema the document to be created needs to be compliant with. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createorupdatepartialdocumentCall(String dataEntityName, String contentType, String accept, Map<String, String> requestBody, String schema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/dataentities/{dataEntityName}/documents"
            .replace("{" + "dataEntityName" + "}", localVarApiClient.escapeString(dataEntityName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (schema != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_schema", schema));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createorupdatepartialdocumentValidateBeforeCall(String dataEntityName, String contentType, String accept, Map<String, String> requestBody, String schema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataEntityName' is set
        if (dataEntityName == null) {
            throw new ApiException("Missing the required parameter 'dataEntityName' when calling createorupdatepartialdocument(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createorupdatepartialdocument(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createorupdatepartialdocument(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling createorupdatepartialdocument(Async)");
        }

        return createorupdatepartialdocumentCall(dataEntityName, contentType, accept, requestBody, schema, _callback);

    }

    /**
     * Create partial document
     * This request allows you to partially update a document corresponding to a given data entity.    &gt; You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to create a customer profile&#39;s &#x60;phone&#x60; and &#x60;isNewsletterOptIn&#x60; fields, choose the &#x60;CL&#x60; data entity and send a request similar to this:    PATCH  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;phone\&quot;: \&quot;+12025550195\&quot;,      \&quot;isNewsletterOptIn\&quot;: false   }  &#x60;&#x60;&#x60;    ### Client address    In order to update the &#x60;receiverName&#x60; of an existing address, the data entity is &#x60;AD&#x60; and the request would look like this:    PATCH  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;receiverName\&quot;: \&quot;Lois Lane\&quot;  }  &#x60;&#x60;&#x60;
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param requestBody JSON with the fields to be updated. (required)
     * @param schema Name of the schema the document to be created needs to be compliant with. (optional)
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DocumentResponse createorupdatepartialdocument(String dataEntityName, String contentType, String accept, Map<String, String> requestBody, String schema) throws ApiException {
        ApiResponse<DocumentResponse> localVarResp = createorupdatepartialdocumentWithHttpInfo(dataEntityName, contentType, accept, requestBody, schema);
        return localVarResp.getData();
    }

    /**
     * Create partial document
     * This request allows you to partially update a document corresponding to a given data entity.    &gt; You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to create a customer profile&#39;s &#x60;phone&#x60; and &#x60;isNewsletterOptIn&#x60; fields, choose the &#x60;CL&#x60; data entity and send a request similar to this:    PATCH  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;phone\&quot;: \&quot;+12025550195\&quot;,      \&quot;isNewsletterOptIn\&quot;: false   }  &#x60;&#x60;&#x60;    ### Client address    In order to update the &#x60;receiverName&#x60; of an existing address, the data entity is &#x60;AD&#x60; and the request would look like this:    PATCH  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;receiverName\&quot;: \&quot;Lois Lane\&quot;  }  &#x60;&#x60;&#x60;
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param requestBody JSON with the fields to be updated. (required)
     * @param schema Name of the schema the document to be created needs to be compliant with. (optional)
     * @return ApiResponse&lt;DocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentResponse> createorupdatepartialdocumentWithHttpInfo(String dataEntityName, String contentType, String accept, Map<String, String> requestBody, String schema) throws ApiException {
        okhttp3.Call localVarCall = createorupdatepartialdocumentValidateBeforeCall(dataEntityName, contentType, accept, requestBody, schema, null);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create partial document (asynchronously)
     * This request allows you to partially update a document corresponding to a given data entity.    &gt; You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to create a customer profile&#39;s &#x60;phone&#x60; and &#x60;isNewsletterOptIn&#x60; fields, choose the &#x60;CL&#x60; data entity and send a request similar to this:    PATCH  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;phone\&quot;: \&quot;+12025550195\&quot;,      \&quot;isNewsletterOptIn\&quot;: false   }  &#x60;&#x60;&#x60;    ### Client address    In order to update the &#x60;receiverName&#x60; of an existing address, the data entity is &#x60;AD&#x60; and the request would look like this:    PATCH  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;receiverName\&quot;: \&quot;Lois Lane\&quot;  }  &#x60;&#x60;&#x60;
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param requestBody JSON with the fields to be updated. (required)
     * @param schema Name of the schema the document to be created needs to be compliant with. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createorupdatepartialdocumentAsync(String dataEntityName, String contentType, String accept, Map<String, String> requestBody, String schema, final ApiCallback<DocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createorupdatepartialdocumentValidateBeforeCall(dataEntityName, contentType, accept, requestBody, schema, _callback);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletedocument
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param id ID of the Document. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletedocumentCall(String dataEntityName, String contentType, String accept, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataentities/{dataEntityName}/documents/{id}"
            .replace("{" + "dataEntityName" + "}", localVarApiClient.escapeString(dataEntityName.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletedocumentValidateBeforeCall(String dataEntityName, String contentType, String accept, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataEntityName' is set
        if (dataEntityName == null) {
            throw new ApiException("Missing the required parameter 'dataEntityName' when calling deletedocument(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deletedocument(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling deletedocument(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletedocument(Async)");
        }

        return deletedocumentCall(dataEntityName, contentType, accept, id, _callback);

    }

    /**
     * Delete document
     * It allows to delete a document.
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param id ID of the Document. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deletedocument(String dataEntityName, String contentType, String accept, String id) throws ApiException {
        deletedocumentWithHttpInfo(dataEntityName, contentType, accept, id);
    }

    /**
     * Delete document
     * It allows to delete a document.
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param id ID of the Document. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletedocumentWithHttpInfo(String dataEntityName, String contentType, String accept, String id) throws ApiException {
        okhttp3.Call localVarCall = deletedocumentValidateBeforeCall(dataEntityName, contentType, accept, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete document (asynchronously)
     * It allows to delete a document.
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param id ID of the Document. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletedocumentAsync(String dataEntityName, String contentType, String accept, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletedocumentValidateBeforeCall(dataEntityName, contentType, accept, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getdocument
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param id ID of the Document. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getdocumentCall(String dataEntityName, String contentType, String accept, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataentities/{dataEntityName}/documents/{id}"
            .replace("{" + "dataEntityName" + "}", localVarApiClient.escapeString(dataEntityName.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getdocumentValidateBeforeCall(String dataEntityName, String contentType, String accept, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataEntityName' is set
        if (dataEntityName == null) {
            throw new ApiException("Missing the required parameter 'dataEntityName' when calling getdocument(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getdocument(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getdocument(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getdocument(Async)");
        }

        return getdocumentCall(dataEntityName, contentType, accept, id, _callback);

    }

    /**
     * Get document
     * Gets document by ID.    &gt; Assign the &#x60;_fields&#x60; parameter in the query string to retrieve the desired fields. If you want to return all the fields use &#x60;_fields&#x3D;_all&#x60;.
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param id ID of the Document. (required)
     * @return UsingFieldsAll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful response </td><td>  -  </td></tr>
     </table>
     */
    public UsingFieldsAll getdocument(String dataEntityName, String contentType, String accept, String id) throws ApiException {
        ApiResponse<UsingFieldsAll> localVarResp = getdocumentWithHttpInfo(dataEntityName, contentType, accept, id);
        return localVarResp.getData();
    }

    /**
     * Get document
     * Gets document by ID.    &gt; Assign the &#x60;_fields&#x60; parameter in the query string to retrieve the desired fields. If you want to return all the fields use &#x60;_fields&#x3D;_all&#x60;.
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param id ID of the Document. (required)
     * @return ApiResponse&lt;UsingFieldsAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsingFieldsAll> getdocumentWithHttpInfo(String dataEntityName, String contentType, String accept, String id) throws ApiException {
        okhttp3.Call localVarCall = getdocumentValidateBeforeCall(dataEntityName, contentType, accept, id, null);
        Type localVarReturnType = new TypeToken<UsingFieldsAll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get document (asynchronously)
     * Gets document by ID.    &gt; Assign the &#x60;_fields&#x60; parameter in the query string to retrieve the desired fields. If you want to return all the fields use &#x60;_fields&#x3D;_all&#x60;.
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param id ID of the Document. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getdocumentAsync(String dataEntityName, String contentType, String accept, String id, final ApiCallback<UsingFieldsAll> _callback) throws ApiException {

        okhttp3.Call localVarCall = getdocumentValidateBeforeCall(dataEntityName, contentType, accept, id, _callback);
        Type localVarReturnType = new TypeToken<UsingFieldsAll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateentiredocument
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param id ID of the Document. (required)
     * @param requestBody  (required)
     * @param where Filter specification. (optional)
     * @param schema Name of the schema the document to be created needs to be compliant with. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateentiredocumentCall(String dataEntityName, String accept, String id, Map<String, String> requestBody, String where, String schema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/dataentities/{dataEntityName}/documents/{id}"
            .replace("{" + "dataEntityName" + "}", localVarApiClient.escapeString(dataEntityName.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_where", where));
        }

        if (schema != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_schema", schema));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateentiredocumentValidateBeforeCall(String dataEntityName, String accept, String id, Map<String, String> requestBody, String where, String schema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataEntityName' is set
        if (dataEntityName == null) {
            throw new ApiException("Missing the required parameter 'dataEntityName' when calling updateentiredocument(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updateentiredocument(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateentiredocument(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateentiredocument(Async)");
        }

        return updateentiredocumentCall(dataEntityName, accept, id, requestBody, where, schema, _callback);

    }

    /**
     * Update entire document
     * Update an existing document corresponding to a given data entity. For example, you can update a customer profile or address.    &gt; You can use this request to update documents in any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to update an existing customer profile, choose the &#x60;CL&#x60; data entity and send a request similar to this:    PUT  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;email\&quot;: \&quot;clark.kent@examplemail.com\&quot;,      \&quot;firstName\&quot;: \&quot;Clark\&quot;,      \&quot;lastName\&quot;: \&quot;Kent\&quot;,      \&quot;phone\&quot;: \&quot;+12025550195\&quot;,      \&quot;documentType\&quot;: \&quot;CPF\&quot;,      \&quot;document\&quot;: \&quot;12345678900\&quot;      \&quot;isCorporate\&quot;: false,      \&quot;isNewsletterOptIn\&quot;: false,      \&quot;localeDefault\&quot;: \&quot;en-US\&quot;   }  &#x60;&#x60;&#x60;    ### Client address    To update an address, the data entity is &#x60;AD&#x60; and the request would look like this:    PUT  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;addressName\&quot;: \&quot;My House\&quot;,      \&quot;addressType\&quot;: \&quot;residential\&quot;,      \&quot;city\&quot;: \&quot;Metropolis\&quot;,      \&quot;complement\&quot;: \&quot;\&quot;,      \&quot;country\&quot;: \&quot;USA\&quot;,      \&quot;postalCode\&quot;: \&quot;11375\&quot;,      \&quot;receiverName\&quot;: \&quot;Clark Kent\&quot;,      \&quot;reference\&quot;: null,      \&quot;state\&quot;: \&quot;MP\&quot;,      \&quot;street\&quot;: \&quot;Baker Street\&quot;,      \&quot;neighborhood\&quot;: \&quot;Upper east side\&quot;,      \&quot;number\&quot;: \&quot;21\&quot;,      \&quot;userId\&quot;: \&quot;7e03m794-a33a-11e9-84rt6-0adfa64s5a8e\&quot;  }  &#x60;&#x60;&#x60;
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param id ID of the Document. (required)
     * @param requestBody  (required)
     * @param where Filter specification. (optional)
     * @param schema Name of the schema the document to be created needs to be compliant with. (optional)
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DocumentResponse updateentiredocument(String dataEntityName, String accept, String id, Map<String, String> requestBody, String where, String schema) throws ApiException {
        ApiResponse<DocumentResponse> localVarResp = updateentiredocumentWithHttpInfo(dataEntityName, accept, id, requestBody, where, schema);
        return localVarResp.getData();
    }

    /**
     * Update entire document
     * Update an existing document corresponding to a given data entity. For example, you can update a customer profile or address.    &gt; You can use this request to update documents in any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to update an existing customer profile, choose the &#x60;CL&#x60; data entity and send a request similar to this:    PUT  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;email\&quot;: \&quot;clark.kent@examplemail.com\&quot;,      \&quot;firstName\&quot;: \&quot;Clark\&quot;,      \&quot;lastName\&quot;: \&quot;Kent\&quot;,      \&quot;phone\&quot;: \&quot;+12025550195\&quot;,      \&quot;documentType\&quot;: \&quot;CPF\&quot;,      \&quot;document\&quot;: \&quot;12345678900\&quot;      \&quot;isCorporate\&quot;: false,      \&quot;isNewsletterOptIn\&quot;: false,      \&quot;localeDefault\&quot;: \&quot;en-US\&quot;   }  &#x60;&#x60;&#x60;    ### Client address    To update an address, the data entity is &#x60;AD&#x60; and the request would look like this:    PUT  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;addressName\&quot;: \&quot;My House\&quot;,      \&quot;addressType\&quot;: \&quot;residential\&quot;,      \&quot;city\&quot;: \&quot;Metropolis\&quot;,      \&quot;complement\&quot;: \&quot;\&quot;,      \&quot;country\&quot;: \&quot;USA\&quot;,      \&quot;postalCode\&quot;: \&quot;11375\&quot;,      \&quot;receiverName\&quot;: \&quot;Clark Kent\&quot;,      \&quot;reference\&quot;: null,      \&quot;state\&quot;: \&quot;MP\&quot;,      \&quot;street\&quot;: \&quot;Baker Street\&quot;,      \&quot;neighborhood\&quot;: \&quot;Upper east side\&quot;,      \&quot;number\&quot;: \&quot;21\&quot;,      \&quot;userId\&quot;: \&quot;7e03m794-a33a-11e9-84rt6-0adfa64s5a8e\&quot;  }  &#x60;&#x60;&#x60;
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param id ID of the Document. (required)
     * @param requestBody  (required)
     * @param where Filter specification. (optional)
     * @param schema Name of the schema the document to be created needs to be compliant with. (optional)
     * @return ApiResponse&lt;DocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentResponse> updateentiredocumentWithHttpInfo(String dataEntityName, String accept, String id, Map<String, String> requestBody, String where, String schema) throws ApiException {
        okhttp3.Call localVarCall = updateentiredocumentValidateBeforeCall(dataEntityName, accept, id, requestBody, where, schema, null);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update entire document (asynchronously)
     * Update an existing document corresponding to a given data entity. For example, you can update a customer profile or address.    &gt; You can use this request to update documents in any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to update an existing customer profile, choose the &#x60;CL&#x60; data entity and send a request similar to this:    PUT  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;email\&quot;: \&quot;clark.kent@examplemail.com\&quot;,      \&quot;firstName\&quot;: \&quot;Clark\&quot;,      \&quot;lastName\&quot;: \&quot;Kent\&quot;,      \&quot;phone\&quot;: \&quot;+12025550195\&quot;,      \&quot;documentType\&quot;: \&quot;CPF\&quot;,      \&quot;document\&quot;: \&quot;12345678900\&quot;      \&quot;isCorporate\&quot;: false,      \&quot;isNewsletterOptIn\&quot;: false,      \&quot;localeDefault\&quot;: \&quot;en-US\&quot;   }  &#x60;&#x60;&#x60;    ### Client address    To update an address, the data entity is &#x60;AD&#x60; and the request would look like this:    PUT  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;addressName\&quot;: \&quot;My House\&quot;,      \&quot;addressType\&quot;: \&quot;residential\&quot;,      \&quot;city\&quot;: \&quot;Metropolis\&quot;,      \&quot;complement\&quot;: \&quot;\&quot;,      \&quot;country\&quot;: \&quot;USA\&quot;,      \&quot;postalCode\&quot;: \&quot;11375\&quot;,      \&quot;receiverName\&quot;: \&quot;Clark Kent\&quot;,      \&quot;reference\&quot;: null,      \&quot;state\&quot;: \&quot;MP\&quot;,      \&quot;street\&quot;: \&quot;Baker Street\&quot;,      \&quot;neighborhood\&quot;: \&quot;Upper east side\&quot;,      \&quot;number\&quot;: \&quot;21\&quot;,      \&quot;userId\&quot;: \&quot;7e03m794-a33a-11e9-84rt6-0adfa64s5a8e\&quot;  }  &#x60;&#x60;&#x60;
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param id ID of the Document. (required)
     * @param requestBody  (required)
     * @param where Filter specification. (optional)
     * @param schema Name of the schema the document to be created needs to be compliant with. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateentiredocumentAsync(String dataEntityName, String accept, String id, Map<String, String> requestBody, String where, String schema, final ApiCallback<DocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateentiredocumentValidateBeforeCall(dataEntityName, accept, id, requestBody, where, schema, _callback);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatepartialdocument
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param id ID of the Document. (required)
     * @param requestBody  (required)
     * @param where Filter specification. (optional)
     * @param schema Name of the schema the document to be created needs to be compliant with. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatepartialdocumentCall(String dataEntityName, String accept, String id, Map<String, String> requestBody, String where, String schema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/dataentities/{dataEntityName}/documents/{id}"
            .replace("{" + "dataEntityName" + "}", localVarApiClient.escapeString(dataEntityName.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_where", where));
        }

        if (schema != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_schema", schema));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatepartialdocumentValidateBeforeCall(String dataEntityName, String accept, String id, Map<String, String> requestBody, String where, String schema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataEntityName' is set
        if (dataEntityName == null) {
            throw new ApiException("Missing the required parameter 'dataEntityName' when calling updatepartialdocument(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updatepartialdocument(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatepartialdocument(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updatepartialdocument(Async)");
        }

        return updatepartialdocumentCall(dataEntityName, accept, id, requestBody, where, schema, _callback);

    }

    /**
     * Update partial document
     * This request allows you to partially update a document corresponding to a given data entity. For example, you can update some fields of a customer profile or address.    &gt; You can use this request to update documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to update a customer profile&#39;s &#x60;phone&#x60; and &#x60;isNewsletterOptIn&#x60; fields, choose the &#x60;CL&#x60; data entity and send a request similar to this:    PATCH  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;phone\&quot;: \&quot;+12025550195\&quot;,      \&quot;isNewsletterOptIn\&quot;: false   }  &#x60;&#x60;&#x60;    ### Client address    In order to update the &#x60;receiverName&#x60; of an existing address, the data entity is &#x60;AD&#x60; and the request would look like this:    PATCH  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;receiverName\&quot;: \&quot;Lois Lane\&quot;  }  &#x60;&#x60;&#x60;
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param id ID of the Document. (required)
     * @param requestBody  (required)
     * @param where Filter specification. (optional)
     * @param schema Name of the schema the document to be created needs to be compliant with. (optional)
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DocumentResponse updatepartialdocument(String dataEntityName, String accept, String id, Map<String, String> requestBody, String where, String schema) throws ApiException {
        ApiResponse<DocumentResponse> localVarResp = updatepartialdocumentWithHttpInfo(dataEntityName, accept, id, requestBody, where, schema);
        return localVarResp.getData();
    }

    /**
     * Update partial document
     * This request allows you to partially update a document corresponding to a given data entity. For example, you can update some fields of a customer profile or address.    &gt; You can use this request to update documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to update a customer profile&#39;s &#x60;phone&#x60; and &#x60;isNewsletterOptIn&#x60; fields, choose the &#x60;CL&#x60; data entity and send a request similar to this:    PATCH  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;phone\&quot;: \&quot;+12025550195\&quot;,      \&quot;isNewsletterOptIn\&quot;: false   }  &#x60;&#x60;&#x60;    ### Client address    In order to update the &#x60;receiverName&#x60; of an existing address, the data entity is &#x60;AD&#x60; and the request would look like this:    PATCH  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;receiverName\&quot;: \&quot;Lois Lane\&quot;  }  &#x60;&#x60;&#x60;
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param id ID of the Document. (required)
     * @param requestBody  (required)
     * @param where Filter specification. (optional)
     * @param schema Name of the schema the document to be created needs to be compliant with. (optional)
     * @return ApiResponse&lt;DocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentResponse> updatepartialdocumentWithHttpInfo(String dataEntityName, String accept, String id, Map<String, String> requestBody, String where, String schema) throws ApiException {
        okhttp3.Call localVarCall = updatepartialdocumentValidateBeforeCall(dataEntityName, accept, id, requestBody, where, schema, null);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update partial document (asynchronously)
     * This request allows you to partially update a document corresponding to a given data entity. For example, you can update some fields of a customer profile or address.    &gt; You can use this request to update documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to update a customer profile&#39;s &#x60;phone&#x60; and &#x60;isNewsletterOptIn&#x60; fields, choose the &#x60;CL&#x60; data entity and send a request similar to this:    PATCH  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;phone\&quot;: \&quot;+12025550195\&quot;,      \&quot;isNewsletterOptIn\&quot;: false   }  &#x60;&#x60;&#x60;    ### Client address    In order to update the &#x60;receiverName&#x60; of an existing address, the data entity is &#x60;AD&#x60; and the request would look like this:    PATCH  &#x60;&#x60;&#x60;  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc  &#x60;&#x60;&#x60;    Request body  &#x60;&#x60;&#x60;json  {      \&quot;receiverName\&quot;: \&quot;Lois Lane\&quot;  }  &#x60;&#x60;&#x60;
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param id ID of the Document. (required)
     * @param requestBody  (required)
     * @param where Filter specification. (optional)
     * @param schema Name of the schema the document to be created needs to be compliant with. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatepartialdocumentAsync(String dataEntityName, String accept, String id, Map<String, String> requestBody, String where, String schema, final ApiCallback<DocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatepartialdocumentValidateBeforeCall(dataEntityName, accept, id, requestBody, where, schema, _callback);
        Type localVarReturnType = new TypeToken<DocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
