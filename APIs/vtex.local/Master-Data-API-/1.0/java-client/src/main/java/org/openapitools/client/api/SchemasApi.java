/*
 * Master Data API - v2
 * # ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**      ## Welcome!    VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.    There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.    There are two ways to use Master Data:    1. Directly from the storefront  2. External integration    ### Directly from the storefront    If your scenario is to be used inside the storefront, be aware of the following observations:    1. Use the storefront host to query or store information to avoid **CORS**;  2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;  3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);  4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);    **It's important to avoid CORS using the relative path**    ### External Integration    If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:    1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;  2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);    ### Most used attributes listed here    | Name | Description |  | -------- | -------- |  | accountName | Account name in VTEX License Manager |  | name | Data Entity name |  | schema | JSON Schema of a Data Entity |  | id | Identifier of a document |  | x-vtex-api-appKey | User key |  | x-vtex-api-appToken | User token |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SaveschemabynameRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SchemasApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SchemasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SchemasApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteschemabyname
     * @param contentType Type of the content being sent. (required)
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param schemaName Name of the schema. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteschemabynameCall(String contentType, String dataEntityName, String schemaName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataentities/{dataEntityName}/schemas/{schemaName}"
            .replace("{" + "dataEntityName" + "}", localVarApiClient.escapeString(dataEntityName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteschemabynameValidateBeforeCall(String contentType, String dataEntityName, String schemaName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deleteschemabyname(Async)");
        }

        // verify the required parameter 'dataEntityName' is set
        if (dataEntityName == null) {
            throw new ApiException("Missing the required parameter 'dataEntityName' when calling deleteschemabyname(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling deleteschemabyname(Async)");
        }

        return deleteschemabynameCall(contentType, dataEntityName, schemaName, _callback);

    }

    /**
     * Delete schema by name
     * Deletes an existing schema for a given data entity.
     * @param contentType Type of the content being sent. (required)
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param schemaName Name of the schema. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteschemabyname(String contentType, String dataEntityName, String schemaName) throws ApiException {
        deleteschemabynameWithHttpInfo(contentType, dataEntityName, schemaName);
    }

    /**
     * Delete schema by name
     * Deletes an existing schema for a given data entity.
     * @param contentType Type of the content being sent. (required)
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param schemaName Name of the schema. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteschemabynameWithHttpInfo(String contentType, String dataEntityName, String schemaName) throws ApiException {
        okhttp3.Call localVarCall = deleteschemabynameValidateBeforeCall(contentType, dataEntityName, schemaName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete schema by name (asynchronously)
     * Deletes an existing schema for a given data entity.
     * @param contentType Type of the content being sent. (required)
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param schemaName Name of the schema. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteschemabynameAsync(String contentType, String dataEntityName, String schemaName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteschemabynameValidateBeforeCall(contentType, dataEntityName, schemaName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getschemabyname
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param contentType Type of the content being sent. (required)
     * @param schemaName Name of the schema. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getschemabynameCall(String dataEntityName, String contentType, String schemaName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataentities/{dataEntityName}/schemas/{schemaName}"
            .replace("{" + "dataEntityName" + "}", localVarApiClient.escapeString(dataEntityName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getschemabynameValidateBeforeCall(String dataEntityName, String contentType, String schemaName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataEntityName' is set
        if (dataEntityName == null) {
            throw new ApiException("Missing the required parameter 'dataEntityName' when calling getschemabyname(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getschemabyname(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling getschemabyname(Async)");
        }

        return getschemabynameCall(dataEntityName, contentType, schemaName, _callback);

    }

    /**
     * Get schema by name
     * Returns an existing schema for a given data entity.
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param contentType Type of the content being sent. (required)
     * @param schemaName Name of the schema. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getschemabyname(String dataEntityName, String contentType, String schemaName) throws ApiException {
        getschemabynameWithHttpInfo(dataEntityName, contentType, schemaName);
    }

    /**
     * Get schema by name
     * Returns an existing schema for a given data entity.
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param contentType Type of the content being sent. (required)
     * @param schemaName Name of the schema. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getschemabynameWithHttpInfo(String dataEntityName, String contentType, String schemaName) throws ApiException {
        okhttp3.Call localVarCall = getschemabynameValidateBeforeCall(dataEntityName, contentType, schemaName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get schema by name (asynchronously)
     * Returns an existing schema for a given data entity.
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param contentType Type of the content being sent. (required)
     * @param schemaName Name of the schema. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getschemabynameAsync(String dataEntityName, String contentType, String schemaName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getschemabynameValidateBeforeCall(dataEntityName, contentType, schemaName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getschemas
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param contentType Type of the content being sent. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getschemasCall(String dataEntityName, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataentities/{dataEntityName}/schemas"
            .replace("{" + "dataEntityName" + "}", localVarApiClient.escapeString(dataEntityName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getschemasValidateBeforeCall(String dataEntityName, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataEntityName' is set
        if (dataEntityName == null) {
            throw new ApiException("Missing the required parameter 'dataEntityName' when calling getschemas(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getschemas(Async)");
        }

        return getschemasCall(dataEntityName, contentType, _callback);

    }

    /**
     * Get schemas
     * Return the schemas saved.
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param contentType Type of the content being sent. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getschemas(String dataEntityName, String contentType) throws ApiException {
        getschemasWithHttpInfo(dataEntityName, contentType);
    }

    /**
     * Get schemas
     * Return the schemas saved.
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param contentType Type of the content being sent. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getschemasWithHttpInfo(String dataEntityName, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getschemasValidateBeforeCall(dataEntityName, contentType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get schemas (asynchronously)
     * Return the schemas saved.
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param contentType Type of the content being sent. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getschemasAsync(String dataEntityName, String contentType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getschemasValidateBeforeCall(dataEntityName, contentType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveschemabyname
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param schemaName Name of the schema. (required)
     * @param saveschemabynameRequest Request body for saving schema (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveschemabynameCall(String dataEntityName, String schemaName, SaveschemabynameRequest saveschemabynameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saveschemabynameRequest;

        // create path and map variables
        String localVarPath = "/api/dataentities/{dataEntityName}/schemas/{schemaName}"
            .replace("{" + "dataEntityName" + "}", localVarApiClient.escapeString(dataEntityName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveschemabynameValidateBeforeCall(String dataEntityName, String schemaName, SaveschemabynameRequest saveschemabynameRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataEntityName' is set
        if (dataEntityName == null) {
            throw new ApiException("Missing the required parameter 'dataEntityName' when calling saveschemabyname(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling saveschemabyname(Async)");
        }

        // verify the required parameter 'saveschemabynameRequest' is set
        if (saveschemabynameRequest == null) {
            throw new ApiException("Missing the required parameter 'saveschemabynameRequest' when calling saveschemabyname(Async)");
        }

        return saveschemabynameCall(dataEntityName, schemaName, saveschemabynameRequest, _callback);

    }

    /**
     * Save schema by name
     * Creates or edits a data entity schema. Learn more about [Master Data schemas](https://developers.vtex.com/vtex-rest-api/docs/master-data-schema-lifecycle)    &gt; Note that if you send a &#x60;schemaName&#x60; that does not exist for that data entity, this request will create it.    This request can also be used to [create or edit Master Data v2 triggers](https://developers.vtex.com/vtex-rest-api/docs/setting-up-triggers-in-master-data-v2).
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param schemaName Name of the schema. (required)
     * @param saveschemabynameRequest Request body for saving schema (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void saveschemabyname(String dataEntityName, String schemaName, SaveschemabynameRequest saveschemabynameRequest) throws ApiException {
        saveschemabynameWithHttpInfo(dataEntityName, schemaName, saveschemabynameRequest);
    }

    /**
     * Save schema by name
     * Creates or edits a data entity schema. Learn more about [Master Data schemas](https://developers.vtex.com/vtex-rest-api/docs/master-data-schema-lifecycle)    &gt; Note that if you send a &#x60;schemaName&#x60; that does not exist for that data entity, this request will create it.    This request can also be used to [create or edit Master Data v2 triggers](https://developers.vtex.com/vtex-rest-api/docs/setting-up-triggers-in-master-data-v2).
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param schemaName Name of the schema. (required)
     * @param saveschemabynameRequest Request body for saving schema (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveschemabynameWithHttpInfo(String dataEntityName, String schemaName, SaveschemabynameRequest saveschemabynameRequest) throws ApiException {
        okhttp3.Call localVarCall = saveschemabynameValidateBeforeCall(dataEntityName, schemaName, saveschemabynameRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save schema by name (asynchronously)
     * Creates or edits a data entity schema. Learn more about [Master Data schemas](https://developers.vtex.com/vtex-rest-api/docs/master-data-schema-lifecycle)    &gt; Note that if you send a &#x60;schemaName&#x60; that does not exist for that data entity, this request will create it.    This request can also be used to [create or edit Master Data v2 triggers](https://developers.vtex.com/vtex-rest-api/docs/setting-up-triggers-in-master-data-v2).
     * @param dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are &#x60;CL&#x60; for client profiles and &#x60;AD&#x60; for client addresses. (required)
     * @param schemaName Name of the schema. (required)
     * @param saveschemabynameRequest Request body for saving schema (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveschemabynameAsync(String dataEntityName, String schemaName, SaveschemabynameRequest saveschemabynameRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveschemabynameValidateBeforeCall(dataEntityName, schemaName, saveschemabynameRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
