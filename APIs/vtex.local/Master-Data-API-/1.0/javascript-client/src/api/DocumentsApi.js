/**
 * Master Data API - v2
 * # ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**      ## Welcome!    VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.    There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.    There are two ways to use Master Data:    1. Directly from the storefront  2. External integration    ### Directly from the storefront    If your scenario is to be used inside the storefront, be aware of the following observations:    1. Use the storefront host to query or store information to avoid **CORS**;  2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;  3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);  4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);    **It's important to avoid CORS using the relative path**    ### External Integration    If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:    1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;  2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);    ### Most used attributes listed here    | Name | Description |  | -------- | -------- |  | accountName | Account name in VTEX License Manager |  | name | Data Entity name |  | schema | JSON Schema of a Data Entity |  | id | Identifier of a document |  | x-vtex-api-appKey | User key |  | x-vtex-api-appToken | User token |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DocumentResponse from '../model/DocumentResponse';
import UsingFieldsAll from '../model/UsingFieldsAll';

/**
* Documents service.
* @module api/DocumentsApi
* @version 1.0
*/
export default class DocumentsApi {

    /**
    * Constructs a new DocumentsApi. 
    * @alias module:api/DocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createnewdocument operation.
     * @callback module:api/DocumentsApi~createnewdocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new document
     * This request allows you to create a new document corresponding to a given data entity. For example, you can create a new customer profile or address.    > You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to create.    ## Example use cases    ### Client profile    In order to create a new customer profile, choose the `CL` data entity and send a request similar to this:    POST  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents  ```    Request body  ```json  {      \"email\": \"clark.kent@examplemail.com\",      \"firstName\": \"Clark\",      \"lastName\": \"Kent\",      \"phone\": \"+12025550195\",      \"documentType\": \"CPF\",      \"document\": \"12345678900\"      \"isCorporate\": false,      \"isNewsletterOptIn\": false,      \"localeDefault\": \"en-US\"   }  ```    ### Client address    For a new address, the data entity is `AD` and the request would look like this:    POST  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents  ```    Request body  ```json  {      \"addressName\": \"My House\",      \"addressType\": \"residential\",      \"city\": \"Metropolis\",      \"complement\": \"\",      \"country\": \"USA\",      \"postalCode\": \"11375\",      \"receiverName\": \"Clark Kent\",      \"reference\": null,      \"state\": \"MP\",      \"street\": \"Baker Street\",      \"neighborhood\": \"Upper east side\",      \"number\": \"21\",      \"userId\": \"7e03m794-a33a-11e9-84rt6-0adfa64s5a8e\"  }  ```
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.
     * @param {Object.<String, {String: String}>} requestBody 
     * @param {Object} opts Optional parameters
     * @param {String} [schema] Name of the schema the document to be created needs to be compliant with.
     * @param {module:api/DocumentsApi~createnewdocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentResponse}
     */
    createnewdocument(contentType, accept, dataEntityName, requestBody, opts, callback) {
      opts = opts || {};
      let postBody = requestBody;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createnewdocument");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createnewdocument");
      }
      // verify the required parameter 'dataEntityName' is set
      if (dataEntityName === undefined || dataEntityName === null) {
        throw new Error("Missing the required parameter 'dataEntityName' when calling createnewdocument");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling createnewdocument");
      }

      let pathParams = {
        'dataEntityName': dataEntityName
      };
      let queryParams = {
        '_schema': opts['schema']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentResponse;
      return this.apiClient.callApi(
        '/api/dataentities/{dataEntityName}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createorupdatepartialdocument operation.
     * @callback module:api/DocumentsApi~createorupdatepartialdocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create partial document
     * This request allows you to partially update a document corresponding to a given data entity.    > You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to create a customer profile's `phone` and `isNewsletterOptIn` fields, choose the `CL` data entity and send a request similar to this:    PATCH  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents  ```    Request body  ```json  {      \"phone\": \"+12025550195\",      \"isNewsletterOptIn\": false   }  ```    ### Client address    In order to update the `receiverName` of an existing address, the data entity is `AD` and the request would look like this:    PATCH  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents  ```    Request body  ```json  {      \"receiverName\": \"Lois Lane\"  }  ```
     * @param {String} dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {Object.<String, {String: String}>} requestBody JSON with the fields to be updated.
     * @param {Object} opts Optional parameters
     * @param {String} [schema] Name of the schema the document to be created needs to be compliant with.
     * @param {module:api/DocumentsApi~createorupdatepartialdocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentResponse}
     */
    createorupdatepartialdocument(dataEntityName, contentType, accept, requestBody, opts, callback) {
      opts = opts || {};
      let postBody = requestBody;
      // verify the required parameter 'dataEntityName' is set
      if (dataEntityName === undefined || dataEntityName === null) {
        throw new Error("Missing the required parameter 'dataEntityName' when calling createorupdatepartialdocument");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createorupdatepartialdocument");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createorupdatepartialdocument");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling createorupdatepartialdocument");
      }

      let pathParams = {
        'dataEntityName': dataEntityName
      };
      let queryParams = {
        '_schema': opts['schema']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentResponse;
      return this.apiClient.callApi(
        '/api/dataentities/{dataEntityName}/documents', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletedocument operation.
     * @callback module:api/DocumentsApi~deletedocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete document
     * It allows to delete a document.
     * @param {String} dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} id ID of the Document.
     * @param {module:api/DocumentsApi~deletedocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletedocument(dataEntityName, contentType, accept, id, callback) {
      let postBody = null;
      // verify the required parameter 'dataEntityName' is set
      if (dataEntityName === undefined || dataEntityName === null) {
        throw new Error("Missing the required parameter 'dataEntityName' when calling deletedocument");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deletedocument");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deletedocument");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletedocument");
      }

      let pathParams = {
        'dataEntityName': dataEntityName,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dataentities/{dataEntityName}/documents/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getdocument operation.
     * @callback module:api/DocumentsApi~getdocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsingFieldsAll} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get document
     * Gets document by ID.    > Assign the `_fields` parameter in the query string to retrieve the desired fields. If you want to return all the fields use `_fields=_all`.
     * @param {String} dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} id ID of the Document.
     * @param {module:api/DocumentsApi~getdocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsingFieldsAll}
     */
    getdocument(dataEntityName, contentType, accept, id, callback) {
      let postBody = null;
      // verify the required parameter 'dataEntityName' is set
      if (dataEntityName === undefined || dataEntityName === null) {
        throw new Error("Missing the required parameter 'dataEntityName' when calling getdocument");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getdocument");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getdocument");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getdocument");
      }

      let pathParams = {
        'dataEntityName': dataEntityName,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsingFieldsAll;
      return this.apiClient.callApi(
        '/api/dataentities/{dataEntityName}/documents/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateentiredocument operation.
     * @callback module:api/DocumentsApi~updateentiredocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update entire document
     * Update an existing document corresponding to a given data entity. For example, you can update a customer profile or address.    > You can use this request to update documents in any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to update an existing customer profile, choose the `CL` data entity and send a request similar to this:    PUT  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc  ```    Request body  ```json  {      \"email\": \"clark.kent@examplemail.com\",      \"firstName\": \"Clark\",      \"lastName\": \"Kent\",      \"phone\": \"+12025550195\",      \"documentType\": \"CPF\",      \"document\": \"12345678900\"      \"isCorporate\": false,      \"isNewsletterOptIn\": false,      \"localeDefault\": \"en-US\"   }  ```    ### Client address    To update an address, the data entity is `AD` and the request would look like this:    PUT  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc  ```    Request body  ```json  {      \"addressName\": \"My House\",      \"addressType\": \"residential\",      \"city\": \"Metropolis\",      \"complement\": \"\",      \"country\": \"USA\",      \"postalCode\": \"11375\",      \"receiverName\": \"Clark Kent\",      \"reference\": null,      \"state\": \"MP\",      \"street\": \"Baker Street\",      \"neighborhood\": \"Upper east side\",      \"number\": \"21\",      \"userId\": \"7e03m794-a33a-11e9-84rt6-0adfa64s5a8e\"  }  ```
     * @param {String} dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} id ID of the Document.
     * @param {Object.<String, {String: String}>} requestBody 
     * @param {Object} opts Optional parameters
     * @param {String} [where] Filter specification.
     * @param {String} [schema] Name of the schema the document to be created needs to be compliant with.
     * @param {module:api/DocumentsApi~updateentiredocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentResponse}
     */
    updateentiredocument(dataEntityName, accept, id, requestBody, opts, callback) {
      opts = opts || {};
      let postBody = requestBody;
      // verify the required parameter 'dataEntityName' is set
      if (dataEntityName === undefined || dataEntityName === null) {
        throw new Error("Missing the required parameter 'dataEntityName' when calling updateentiredocument");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling updateentiredocument");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateentiredocument");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling updateentiredocument");
      }

      let pathParams = {
        'dataEntityName': dataEntityName,
        'id': id
      };
      let queryParams = {
        '_where': opts['where'],
        '_schema': opts['schema']
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentResponse;
      return this.apiClient.callApi(
        '/api/dataentities/{dataEntityName}/documents/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatepartialdocument operation.
     * @callback module:api/DocumentsApi~updatepartialdocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update partial document
     * This request allows you to partially update a document corresponding to a given data entity. For example, you can update some fields of a customer profile or address.    > You can use this request to update documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to update a customer profile's `phone` and `isNewsletterOptIn` fields, choose the `CL` data entity and send a request similar to this:    PATCH  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc  ```    Request body  ```json  {      \"phone\": \"+12025550195\",      \"isNewsletterOptIn\": false   }  ```    ### Client address    In order to update the `receiverName` of an existing address, the data entity is `AD` and the request would look like this:    PATCH  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc  ```    Request body  ```json  {      \"receiverName\": \"Lois Lane\"  }  ```
     * @param {String} dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} id ID of the Document.
     * @param {Object.<String, {String: String}>} requestBody 
     * @param {Object} opts Optional parameters
     * @param {String} [where] Filter specification.
     * @param {String} [schema] Name of the schema the document to be created needs to be compliant with.
     * @param {module:api/DocumentsApi~updatepartialdocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentResponse}
     */
    updatepartialdocument(dataEntityName, accept, id, requestBody, opts, callback) {
      opts = opts || {};
      let postBody = requestBody;
      // verify the required parameter 'dataEntityName' is set
      if (dataEntityName === undefined || dataEntityName === null) {
        throw new Error("Missing the required parameter 'dataEntityName' when calling updatepartialdocument");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling updatepartialdocument");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatepartialdocument");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling updatepartialdocument");
      }

      let pathParams = {
        'dataEntityName': dataEntityName,
        'id': id
      };
      let queryParams = {
        '_where': opts['where'],
        '_schema': opts['schema']
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentResponse;
      return this.apiClient.callApi(
        '/api/dataentities/{dataEntityName}/documents/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
