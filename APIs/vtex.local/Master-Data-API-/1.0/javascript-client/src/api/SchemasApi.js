/**
 * Master Data API - v2
 * # ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**      ## Welcome!    VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.    There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.    There are two ways to use Master Data:    1. Directly from the storefront  2. External integration    ### Directly from the storefront    If your scenario is to be used inside the storefront, be aware of the following observations:    1. Use the storefront host to query or store information to avoid **CORS**;  2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;  3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);  4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);    **It's important to avoid CORS using the relative path**    ### External Integration    If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:    1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;  2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);    ### Most used attributes listed here    | Name | Description |  | -------- | -------- |  | accountName | Account name in VTEX License Manager |  | name | Data Entity name |  | schema | JSON Schema of a Data Entity |  | id | Identifier of a document |  | x-vtex-api-appKey | User key |  | x-vtex-api-appToken | User token |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SaveschemabynameRequest from '../model/SaveschemabynameRequest';

/**
* Schemas service.
* @module api/SchemasApi
* @version 1.0
*/
export default class SchemasApi {

    /**
    * Constructs a new SchemasApi. 
    * @alias module:api/SchemasApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteschemabyname operation.
     * @callback module:api/SchemasApi~deleteschemabynameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete schema by name
     * Deletes an existing schema for a given data entity.
     * @param {String} contentType Type of the content being sent.
     * @param {String} dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.
     * @param {String} schemaName Name of the schema.
     * @param {module:api/SchemasApi~deleteschemabynameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteschemabyname(contentType, dataEntityName, schemaName, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deleteschemabyname");
      }
      // verify the required parameter 'dataEntityName' is set
      if (dataEntityName === undefined || dataEntityName === null) {
        throw new Error("Missing the required parameter 'dataEntityName' when calling deleteschemabyname");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling deleteschemabyname");
      }

      let pathParams = {
        'dataEntityName': dataEntityName,
        'schemaName': schemaName
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dataentities/{dataEntityName}/schemas/{schemaName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getschemabyname operation.
     * @callback module:api/SchemasApi~getschemabynameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get schema by name
     * Returns an existing schema for a given data entity.
     * @param {String} dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.
     * @param {String} contentType Type of the content being sent.
     * @param {String} schemaName Name of the schema.
     * @param {module:api/SchemasApi~getschemabynameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getschemabyname(dataEntityName, contentType, schemaName, callback) {
      let postBody = null;
      // verify the required parameter 'dataEntityName' is set
      if (dataEntityName === undefined || dataEntityName === null) {
        throw new Error("Missing the required parameter 'dataEntityName' when calling getschemabyname");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getschemabyname");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling getschemabyname");
      }

      let pathParams = {
        'dataEntityName': dataEntityName,
        'schemaName': schemaName
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dataentities/{dataEntityName}/schemas/{schemaName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getschemas operation.
     * @callback module:api/SchemasApi~getschemasCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get schemas
     * Return the schemas saved.
     * @param {String} dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.
     * @param {String} contentType Type of the content being sent.
     * @param {module:api/SchemasApi~getschemasCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getschemas(dataEntityName, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'dataEntityName' is set
      if (dataEntityName === undefined || dataEntityName === null) {
        throw new Error("Missing the required parameter 'dataEntityName' when calling getschemas");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getschemas");
      }

      let pathParams = {
        'dataEntityName': dataEntityName
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dataentities/{dataEntityName}/schemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveschemabyname operation.
     * @callback module:api/SchemasApi~saveschemabynameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save schema by name
     * Creates or edits a data entity schema. Learn more about [Master Data schemas](https://developers.vtex.com/vtex-rest-api/docs/master-data-schema-lifecycle)    > Note that if you send a `schemaName` that does not exist for that data entity, this request will create it.    This request can also be used to [create or edit Master Data v2 triggers](https://developers.vtex.com/vtex-rest-api/docs/setting-up-triggers-in-master-data-v2).
     * @param {String} dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.
     * @param {String} schemaName Name of the schema.
     * @param {module:model/SaveschemabynameRequest} saveschemabynameRequest Request body for saving schema
     * @param {module:api/SchemasApi~saveschemabynameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveschemabyname(dataEntityName, schemaName, saveschemabynameRequest, callback) {
      let postBody = saveschemabynameRequest;
      // verify the required parameter 'dataEntityName' is set
      if (dataEntityName === undefined || dataEntityName === null) {
        throw new Error("Missing the required parameter 'dataEntityName' when calling saveschemabyname");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling saveschemabyname");
      }
      // verify the required parameter 'saveschemabynameRequest' is set
      if (saveschemabynameRequest === undefined || saveschemabynameRequest === null) {
        throw new Error("Missing the required parameter 'saveschemabynameRequest' when calling saveschemabyname");
      }

      let pathParams = {
        'dataEntityName': dataEntityName,
        'schemaName': schemaName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dataentities/{dataEntityName}/schemas/{schemaName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
