/**
 * Master Data API - v2
 * # ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**      ## Welcome!    VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.    There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.    There are two ways to use Master Data:    1. Directly from the storefront  2. External integration    ### Directly from the storefront    If your scenario is to be used inside the storefront, be aware of the following observations:    1. Use the storefront host to query or store information to avoid **CORS**;  2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;  3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);  4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);    **It's important to avoid CORS using the relative path**    ### External Integration    If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:    1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;  2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);    ### Most used attributes listed here    | Name | Description |  | -------- | -------- |  | accountName | Account name in VTEX License Manager |  | name | Data Entity name |  | schema | JSON Schema of a Data Entity |  | id | Identifier of a document |  | x-vtex-api-appKey | User key |  | x-vtex-api-appToken | User token |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateUpdateProfileRequests from '../model/CreateUpdateProfileRequests';
import DocumentResponse from '../model/DocumentResponse';

/**
* CustomerProfiles service.
* @module api/CustomerProfilesApi
* @version 1.0
*/
export default class CustomerProfilesApi {

    /**
    * Constructs a new CustomerProfilesApi. 
    * @alias module:api/CustomerProfilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNewCustomerProfilev2 operation.
     * @callback module:api/CustomerProfilesApi~createNewCustomerProfilev2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new customer profile
     * Creates new customer profile.    > You can use this request to create customer profiles according to any `CL` schema. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for the schemas you are using. Learn more about how to use [Master Data v2 schemas](https://developers.vtex.com/vtex-rest-api/docs/master-data-schema-lifecycle).
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {module:model/CreateUpdateProfileRequests} createUpdateProfileRequests 
     * @param {Object} opts Optional parameters
     * @param {String} [schema] Name of the schema the document to be created needs to be compliant with.
     * @param {module:api/CustomerProfilesApi~createNewCustomerProfilev2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentResponse}
     */
    createNewCustomerProfilev2(contentType, accept, createUpdateProfileRequests, opts, callback) {
      opts = opts || {};
      let postBody = createUpdateProfileRequests;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createNewCustomerProfilev2");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createNewCustomerProfilev2");
      }
      // verify the required parameter 'createUpdateProfileRequests' is set
      if (createUpdateProfileRequests === undefined || createUpdateProfileRequests === null) {
        throw new Error("Missing the required parameter 'createUpdateProfileRequests' when calling createNewCustomerProfilev2");
      }

      let pathParams = {
      };
      let queryParams = {
        '_schema': opts['schema']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentResponse;
      return this.apiClient.callApi(
        '/api/dataentities/Client/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomerProfile operation.
     * @callback module:api/CustomerProfilesApi~deleteCustomerProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete customer profile
     * Deletes a customer profile.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} id ID of the Document.
     * @param {module:api/CustomerProfilesApi~deleteCustomerProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentResponse}
     */
    deleteCustomerProfile(contentType, accept, id, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deleteCustomerProfile");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteCustomerProfile");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCustomerProfile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentResponse;
      return this.apiClient.callApi(
        '/api/dataentities/Client/documents/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomerProfile operation.
     * @callback module:api/CustomerProfilesApi~updateCustomerProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update customer profile
     * Partially updates a customer profile.    > You can use this request to update customer profiles according to any `CL` schema. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for the schemas you are using. Learn more about how to use [Master Data v2 schemas](https://developers.vtex.com/vtex-rest-api/docs/master-data-schema-lifecycle).
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} id ID of the Document.
     * @param {module:model/CreateUpdateProfileRequests} createUpdateProfileRequests 
     * @param {Object} opts Optional parameters
     * @param {String} [schema] Name of the schema the document to be created needs to be compliant with.
     * @param {module:api/CustomerProfilesApi~updateCustomerProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentResponse}
     */
    updateCustomerProfile(contentType, accept, id, createUpdateProfileRequests, opts, callback) {
      opts = opts || {};
      let postBody = createUpdateProfileRequests;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updateCustomerProfile");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling updateCustomerProfile");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCustomerProfile");
      }
      // verify the required parameter 'createUpdateProfileRequests' is set
      if (createUpdateProfileRequests === undefined || createUpdateProfileRequests === null) {
        throw new Error("Missing the required parameter 'createUpdateProfileRequests' when calling updateCustomerProfile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        '_schema': opts['schema']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentResponse;
      return this.apiClient.callApi(
        '/api/dataentities/Client/documents/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
