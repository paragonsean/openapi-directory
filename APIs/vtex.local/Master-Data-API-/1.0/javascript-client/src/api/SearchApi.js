/**
 * Master Data API - v2
 * # ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**      ## Welcome!    VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.    There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.    There are two ways to use Master Data:    1. Directly from the storefront  2. External integration    ### Directly from the storefront    If your scenario is to be used inside the storefront, be aware of the following observations:    1. Use the storefront host to query or store information to avoid **CORS**;  2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;  3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);  4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);    **It's important to avoid CORS using the relative path**    ### External Integration    If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:    1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;  2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);    ### Most used attributes listed here    | Name | Description |  | -------- | -------- |  | accountName | Account name in VTEX License Manager |  | name | Data Entity name |  | schema | JSON Schema of a Data Entity |  | id | Identifier of a document |  | x-vtex-api-appKey | User key |  | x-vtex-api-appToken | User token |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Search service.
* @module api/SearchApi
* @version 1.0
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the searchdocuments operation.
     * @callback module:api/SearchApi~searchdocumentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search documents
     * Retrieves documents' information, while choosing which fields will be returned and filtering documents by specific fields.    > The response header `REST-Content-Range` indicates the total amount of results for that specific search. For example, it may return `resources 0-100/136108`, which indicates it has returned results from 0 to 100 of a total 136108.    Below you can see some query examples and learn more about each query parameter.    > Avoid sending too many requests with wildcards (`*`) in the search parameters or that use the `keyword` parameter. This may lead to this endpoint being temporarily blocked for your account. If this happens you will receive an error with status code `503`.    ## Query examples    ### Simple filter    ```  /dataentities/Client/search?email=my@email.com  ```    ### Complex filter    ```  /dataentities/Client/search?_where=(firstName=Jon OR lastName=Smith) OR (createdIn between 2001-01-01 AND 2016-01-01)  ```    ### Date Range    ```  /dataentities/Client/search?_where=createdIn between 2001-01-01 AND 2016-01-01  ```    ### Range numeric fields    ```  /dataentities/Client/search?_where=age between 18 AND 25  ```    ### Partial filter    ```  /dataentities/Client/search?firstName=*Maria*  ```    ### Filter for null values    ```  /dataentities/Client/search?_where=firstName is null  ```    ### Filter for non-null values    ```  /dataentities/Client/search?_where=firstName is not null  ```    ### Filter for difference  ```  /dataentities/Client/search?_where=firstName<>maria  ```    ### Filter greater than or less than  ```  /dataentities/Client/search?_where=number>5  /dataentities/Client/search?_where=date<2001-01-01  ```
     * @param {String} dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} rESTRange Defines the collection of documents to be returned. A range within the collection limited by 100 documents per query.
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'email,firstName,document')] Fields that should be returned by document. Separate fields' names with commas. For example `_fields=email,firstName,document`. You can also use `_all` to fetch all fields.
     * @param {String} [where] Filter specification.
     * @param {String} [schema] Name of the schema the document to be created needs to be compliant with.
     * @param {String} [keyword] String to search. Use quotes for a partial query. For example, `_keyword=Maria` or `_keyword=\"Maria\"`.
     * @param {String} [sort = 'firstName ASC')] Sets sorting mode in two parts. The first part is the name of the field you want to sort by. In the second part, use `ASC` for ascending or `DESC` for descending.
     * @param {module:api/SearchApi~searchdocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchdocuments(dataEntityName, contentType, accept, rESTRange, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataEntityName' is set
      if (dataEntityName === undefined || dataEntityName === null) {
        throw new Error("Missing the required parameter 'dataEntityName' when calling searchdocuments");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling searchdocuments");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling searchdocuments");
      }
      // verify the required parameter 'rESTRange' is set
      if (rESTRange === undefined || rESTRange === null) {
        throw new Error("Missing the required parameter 'rESTRange' when calling searchdocuments");
      }

      let pathParams = {
        'dataEntityName': dataEntityName
      };
      let queryParams = {
        '_fields': opts['fields'],
        '_where': opts['where'],
        '_schema': opts['schema'],
        '_keyword': opts['keyword'],
        '_sort': opts['sort']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept,
        'REST-Range': rESTRange
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dataentities/{dataEntityName}/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
