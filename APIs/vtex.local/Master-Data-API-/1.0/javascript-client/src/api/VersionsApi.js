/**
 * Master Data API - v2
 * # ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**      ## Welcome!    VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.    There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.    There are two ways to use Master Data:    1. Directly from the storefront  2. External integration    ### Directly from the storefront    If your scenario is to be used inside the storefront, be aware of the following observations:    1. Use the storefront host to query or store information to avoid **CORS**;  2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;  3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);  4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);    **It's important to avoid CORS using the relative path**    ### External Integration    If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:    1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;  2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);    ### Most used attributes listed here    | Name | Description |  | -------- | -------- |  | accountName | Account name in VTEX License Manager |  | name | Data Entity name |  | schema | JSON Schema of a Data Entity |  | id | Identifier of a document |  | x-vtex-api-appKey | User key |  | x-vtex-api-appToken | User token |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DocumentResponse from '../model/DocumentResponse';
import Getversion from '../model/Getversion';
import Listversion from '../model/Listversion';

/**
* Versions service.
* @module api/VersionsApi
* @version 1.0
*/
export default class VersionsApi {

    /**
    * Constructs a new VersionsApi. 
    * @alias module:api/VersionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getversion operation.
     * @callback module:api/VersionsApi~getversionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Getversion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get version
     * Returns the version of a document.
     * @param {String} dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} id ID of the Document.
     * @param {String} versionId ID of the version to update.
     * @param {module:api/VersionsApi~getversionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Getversion}
     */
    getversion(dataEntityName, contentType, accept, id, versionId, callback) {
      let postBody = null;
      // verify the required parameter 'dataEntityName' is set
      if (dataEntityName === undefined || dataEntityName === null) {
        throw new Error("Missing the required parameter 'dataEntityName' when calling getversion");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getversion");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getversion");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getversion");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getversion");
      }

      let pathParams = {
        'dataEntityName': dataEntityName,
        'id': id,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Getversion;
      return this.apiClient.callApi(
        '/api/dataentities/{dataEntityName}/documents/{id}/versions/{versionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listversions operation.
     * @callback module:api/VersionsApi~listversionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Listversion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List versions
     * Allows to list the versions of a document.
     * @param {String} dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} id ID of the Document.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [load = true)] If true, return all the fields in each version of the document
     * @param {String} [fields = 'id,dataEntityId,isNewsletterOptIn,createdBy')] If `load` is true, the response will return only these specific fields
     * @param {module:api/VersionsApi~listversionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Listversion>}
     */
    listversions(dataEntityName, contentType, accept, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataEntityName' is set
      if (dataEntityName === undefined || dataEntityName === null) {
        throw new Error("Missing the required parameter 'dataEntityName' when calling listversions");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling listversions");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling listversions");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listversions");
      }

      let pathParams = {
        'dataEntityName': dataEntityName,
        'id': id
      };
      let queryParams = {
        'load': opts['load'],
        'fields': opts['fields']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Listversion];
      return this.apiClient.callApi(
        '/api/dataentities/{dataEntityName}/documents/{id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putversion operation.
     * @callback module:api/VersionsApi~putversionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put version
     * Updates document with version values.
     * @param {String} dataEntityName Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} id ID of the Document.
     * @param {String} versionId ID of the version to update
     * @param {module:api/VersionsApi~putversionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentResponse}
     */
    putversion(dataEntityName, contentType, accept, id, versionId, callback) {
      let postBody = null;
      // verify the required parameter 'dataEntityName' is set
      if (dataEntityName === undefined || dataEntityName === null) {
        throw new Error("Missing the required parameter 'dataEntityName' when calling putversion");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling putversion");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling putversion");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putversion");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling putversion");
      }

      let pathParams = {
        'dataEntityName': dataEntityName,
        'id': id,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentResponse;
      return this.apiClient.callApi(
        '/api/dataentities/{dataEntityName}/documents/{id}/versions/{versionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
