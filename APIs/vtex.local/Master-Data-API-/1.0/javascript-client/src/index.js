/**
 * Master Data API - v2
 * # ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**      ## Welcome!    VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.    There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.    There are two ways to use Master Data:    1. Directly from the storefront  2. External integration    ### Directly from the storefront    If your scenario is to be used inside the storefront, be aware of the following observations:    1. Use the storefront host to query or store information to avoid **CORS**;  2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;  3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);  4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);    **It's important to avoid CORS using the relative path**    ### External Integration    If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:    1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;  2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);    ### Most used attributes listed here    | Name | Description |  | -------- | -------- |  | accountName | Account name in VTEX License Manager |  | name | Data Entity name |  | schema | JSON Schema of a Data Entity |  | id | Identifier of a document |  | x-vtex-api-appKey | User key |  | x-vtex-api-appToken | User token |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ArEVentilaO from './model/ArEVentilaO';
import CreateUpdateAddressRequests from './model/CreateUpdateAddressRequests';
import CreateUpdateProfileRequests from './model/CreateUpdateProfileRequests';
import DEPRECATEDDocumentRequest from './model/DEPRECATEDDocumentRequest';
import DepartmentVisitedTag from './model/DepartmentVisitedTag';
import Document from './model/Document';
import DocumentResponse from './model/DocumentResponse';
import Getversion from './model/Getversion';
import Listversion from './model/Listversion';
import Name from './model/Name';
import Properties from './model/Properties';
import PutindicesRequest from './model/PutindicesRequest';
import SaveschemabynameRequest from './model/SaveschemabynameRequest';
import Scores from './model/Scores';
import UsingFieldsAll from './model/UsingFieldsAll';
import ValidatedocumentbyclustersRequest from './model/ValidatedocumentbyclustersRequest';
import AddressesApi from './api/AddressesApi';
import ClustersApi from './api/ClustersApi';
import CustomerProfilesApi from './api/CustomerProfilesApi';
import DocumentsApi from './api/DocumentsApi';
import IndicesApi from './api/IndicesApi';
import SchemasApi from './api/SchemasApi';
import ScrollApi from './api/ScrollApi';
import SearchApi from './api/SearchApi';
import VersionsApi from './api/VersionsApi';


/**
* # ATTENTION: **This version isn&#39;t compliant with data entities of old version (e.g. CL and AD). It&#39;s possible to use this configuration only to new data entities.**      ## Welcome!    VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.    There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.    There are two ways to use Master Data:    1. Directly from the storefront  2. External integration    ### Directly from the storefront    If your scenario is to be used inside the storefront, be aware of the following observations:    1. Use the storefront host to query or store information to avoid **CORS**;  2. Configure which information should be public and which shouldn&#39;t, inside the JSON Schema of the Data Entity;  3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);  4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);    **It&#39;s important to avoid CORS using the relative path**    ### External Integration    If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:    1. Use the host &#x60;&#x60;&#x60;{{accountName}}.vtexcommercestable.com.br&#x60;&#x60;&#x60;;  2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);    ### Most used attributes listed here    | Name | Description |  | -------- | -------- |  | accountName | Account name in VTEX License Manager |  | name | Data Entity name |  | schema | JSON Schema of a Data Entity |  | id | Identifier of a document |  | x-vtex-api-appKey | User key |  | x-vtex-api-appToken | User token |.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var MasterDataApiV2 = require('index'); // See note below*.
* var xxxSvc = new MasterDataApiV2.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new MasterDataApiV2.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new MasterDataApiV2.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new MasterDataApiV2.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ArEVentilaO model constructor.
     * @property {module:model/ArEVentilaO}
     */
    ArEVentilaO,

    /**
     * The CreateUpdateAddressRequests model constructor.
     * @property {module:model/CreateUpdateAddressRequests}
     */
    CreateUpdateAddressRequests,

    /**
     * The CreateUpdateProfileRequests model constructor.
     * @property {module:model/CreateUpdateProfileRequests}
     */
    CreateUpdateProfileRequests,

    /**
     * The DEPRECATEDDocumentRequest model constructor.
     * @property {module:model/DEPRECATEDDocumentRequest}
     */
    DEPRECATEDDocumentRequest,

    /**
     * The DepartmentVisitedTag model constructor.
     * @property {module:model/DepartmentVisitedTag}
     */
    DepartmentVisitedTag,

    /**
     * The Document model constructor.
     * @property {module:model/Document}
     */
    Document,

    /**
     * The DocumentResponse model constructor.
     * @property {module:model/DocumentResponse}
     */
    DocumentResponse,

    /**
     * The Getversion model constructor.
     * @property {module:model/Getversion}
     */
    Getversion,

    /**
     * The Listversion model constructor.
     * @property {module:model/Listversion}
     */
    Listversion,

    /**
     * The Name model constructor.
     * @property {module:model/Name}
     */
    Name,

    /**
     * The Properties model constructor.
     * @property {module:model/Properties}
     */
    Properties,

    /**
     * The PutindicesRequest model constructor.
     * @property {module:model/PutindicesRequest}
     */
    PutindicesRequest,

    /**
     * The SaveschemabynameRequest model constructor.
     * @property {module:model/SaveschemabynameRequest}
     */
    SaveschemabynameRequest,

    /**
     * The Scores model constructor.
     * @property {module:model/Scores}
     */
    Scores,

    /**
     * The UsingFieldsAll model constructor.
     * @property {module:model/UsingFieldsAll}
     */
    UsingFieldsAll,

    /**
     * The ValidatedocumentbyclustersRequest model constructor.
     * @property {module:model/ValidatedocumentbyclustersRequest}
     */
    ValidatedocumentbyclustersRequest,

    /**
    * The AddressesApi service constructor.
    * @property {module:api/AddressesApi}
    */
    AddressesApi,

    /**
    * The ClustersApi service constructor.
    * @property {module:api/ClustersApi}
    */
    ClustersApi,

    /**
    * The CustomerProfilesApi service constructor.
    * @property {module:api/CustomerProfilesApi}
    */
    CustomerProfilesApi,

    /**
    * The DocumentsApi service constructor.
    * @property {module:api/DocumentsApi}
    */
    DocumentsApi,

    /**
    * The IndicesApi service constructor.
    * @property {module:api/IndicesApi}
    */
    IndicesApi,

    /**
    * The SchemasApi service constructor.
    * @property {module:api/SchemasApi}
    */
    SchemasApi,

    /**
    * The ScrollApi service constructor.
    * @property {module:api/ScrollApi}
    */
    ScrollApi,

    /**
    * The SearchApi service constructor.
    * @property {module:api/SearchApi}
    */
    SearchApi,

    /**
    * The VersionsApi service constructor.
    * @property {module:api/VersionsApi}
    */
    VersionsApi
};
