# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UsingFieldsAll(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, account_name: str=None, data_entity_id: str=None, id: str=None):
        """UsingFieldsAll - a model defined in OpenAPI

        :param account_id: The account_id of this UsingFieldsAll.
        :param account_name: The account_name of this UsingFieldsAll.
        :param data_entity_id: The data_entity_id of this UsingFieldsAll.
        :param id: The id of this UsingFieldsAll.
        """
        self.openapi_types = {
            'account_id': str,
            'account_name': str,
            'data_entity_id': str,
            'id': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'account_name': 'accountName',
            'data_entity_id': 'dataEntityId',
            'id': 'id'
        }

        self._account_id = account_id
        self._account_name = account_name
        self._data_entity_id = data_entity_id
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsingFieldsAll':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Using_fields_all of this UsingFieldsAll.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this UsingFieldsAll.


        :return: The account_id of this UsingFieldsAll.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this UsingFieldsAll.


        :param account_id: The account_id of this UsingFieldsAll.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this UsingFieldsAll.


        :return: The account_name of this UsingFieldsAll.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this UsingFieldsAll.


        :param account_name: The account_name of this UsingFieldsAll.
        :type account_name: str
        """
        if account_name is None:
            raise ValueError("Invalid value for `account_name`, must not be `None`")

        self._account_name = account_name

    @property
    def data_entity_id(self):
        """Gets the data_entity_id of this UsingFieldsAll.


        :return: The data_entity_id of this UsingFieldsAll.
        :rtype: str
        """
        return self._data_entity_id

    @data_entity_id.setter
    def data_entity_id(self, data_entity_id):
        """Sets the data_entity_id of this UsingFieldsAll.


        :param data_entity_id: The data_entity_id of this UsingFieldsAll.
        :type data_entity_id: str
        """
        if data_entity_id is None:
            raise ValueError("Invalid value for `data_entity_id`, must not be `None`")

        self._data_entity_id = data_entity_id

    @property
    def id(self):
        """Gets the id of this UsingFieldsAll.


        :return: The id of this UsingFieldsAll.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UsingFieldsAll.


        :param id: The id of this UsingFieldsAll.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id
