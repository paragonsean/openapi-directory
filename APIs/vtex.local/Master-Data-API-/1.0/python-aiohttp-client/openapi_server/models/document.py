# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.department_visited_tag import DepartmentVisitedTag
from openapi_server import util


class Document(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, account_name: str=None, carttag: str=None, checkouttag: str=None, data_entity_id: str=None, department_visited_tag: DepartmentVisitedTag=None, email: str=None, followers: List[str]=None, id: str=None, rclastsession: str=None, rclastsessiondate: str=None):
        """Document - a model defined in OpenAPI

        :param account_id: The account_id of this Document.
        :param account_name: The account_name of this Document.
        :param carttag: The carttag of this Document.
        :param checkouttag: The checkouttag of this Document.
        :param data_entity_id: The data_entity_id of this Document.
        :param department_visited_tag: The department_visited_tag of this Document.
        :param email: The email of this Document.
        :param followers: The followers of this Document.
        :param id: The id of this Document.
        :param rclastsession: The rclastsession of this Document.
        :param rclastsessiondate: The rclastsessiondate of this Document.
        """
        self.openapi_types = {
            'account_id': str,
            'account_name': str,
            'carttag': str,
            'checkouttag': str,
            'data_entity_id': str,
            'department_visited_tag': DepartmentVisitedTag,
            'email': str,
            'followers': List[str],
            'id': str,
            'rclastsession': str,
            'rclastsessiondate': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'account_name': 'accountName',
            'carttag': 'carttag',
            'checkouttag': 'checkouttag',
            'data_entity_id': 'dataEntityId',
            'department_visited_tag': 'departmentVisitedTag',
            'email': 'email',
            'followers': 'followers',
            'id': 'id',
            'rclastsession': 'rclastsession',
            'rclastsessiondate': 'rclastsessiondate'
        }

        self._account_id = account_id
        self._account_name = account_name
        self._carttag = carttag
        self._checkouttag = checkouttag
        self._data_entity_id = data_entity_id
        self._department_visited_tag = department_visited_tag
        self._email = email
        self._followers = followers
        self._id = id
        self._rclastsession = rclastsession
        self._rclastsessiondate = rclastsessiondate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Document':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Document of this Document.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Document.


        :return: The account_id of this Document.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Document.


        :param account_id: The account_id of this Document.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this Document.


        :return: The account_name of this Document.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this Document.


        :param account_name: The account_name of this Document.
        :type account_name: str
        """
        if account_name is None:
            raise ValueError("Invalid value for `account_name`, must not be `None`")

        self._account_name = account_name

    @property
    def carttag(self):
        """Gets the carttag of this Document.


        :return: The carttag of this Document.
        :rtype: str
        """
        return self._carttag

    @carttag.setter
    def carttag(self, carttag):
        """Sets the carttag of this Document.


        :param carttag: The carttag of this Document.
        :type carttag: str
        """
        if carttag is None:
            raise ValueError("Invalid value for `carttag`, must not be `None`")

        self._carttag = carttag

    @property
    def checkouttag(self):
        """Gets the checkouttag of this Document.


        :return: The checkouttag of this Document.
        :rtype: str
        """
        return self._checkouttag

    @checkouttag.setter
    def checkouttag(self, checkouttag):
        """Sets the checkouttag of this Document.


        :param checkouttag: The checkouttag of this Document.
        :type checkouttag: str
        """
        if checkouttag is None:
            raise ValueError("Invalid value for `checkouttag`, must not be `None`")

        self._checkouttag = checkouttag

    @property
    def data_entity_id(self):
        """Gets the data_entity_id of this Document.


        :return: The data_entity_id of this Document.
        :rtype: str
        """
        return self._data_entity_id

    @data_entity_id.setter
    def data_entity_id(self, data_entity_id):
        """Sets the data_entity_id of this Document.


        :param data_entity_id: The data_entity_id of this Document.
        :type data_entity_id: str
        """
        if data_entity_id is None:
            raise ValueError("Invalid value for `data_entity_id`, must not be `None`")

        self._data_entity_id = data_entity_id

    @property
    def department_visited_tag(self):
        """Gets the department_visited_tag of this Document.


        :return: The department_visited_tag of this Document.
        :rtype: DepartmentVisitedTag
        """
        return self._department_visited_tag

    @department_visited_tag.setter
    def department_visited_tag(self, department_visited_tag):
        """Sets the department_visited_tag of this Document.


        :param department_visited_tag: The department_visited_tag of this Document.
        :type department_visited_tag: DepartmentVisitedTag
        """
        if department_visited_tag is None:
            raise ValueError("Invalid value for `department_visited_tag`, must not be `None`")

        self._department_visited_tag = department_visited_tag

    @property
    def email(self):
        """Gets the email of this Document.


        :return: The email of this Document.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Document.


        :param email: The email of this Document.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def followers(self):
        """Gets the followers of this Document.

        

        :return: The followers of this Document.
        :rtype: List[str]
        """
        return self._followers

    @followers.setter
    def followers(self, followers):
        """Sets the followers of this Document.

        

        :param followers: The followers of this Document.
        :type followers: List[str]
        """
        if followers is None:
            raise ValueError("Invalid value for `followers`, must not be `None`")

        self._followers = followers

    @property
    def id(self):
        """Gets the id of this Document.


        :return: The id of this Document.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Document.


        :param id: The id of this Document.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def rclastsession(self):
        """Gets the rclastsession of this Document.


        :return: The rclastsession of this Document.
        :rtype: str
        """
        return self._rclastsession

    @rclastsession.setter
    def rclastsession(self, rclastsession):
        """Sets the rclastsession of this Document.


        :param rclastsession: The rclastsession of this Document.
        :type rclastsession: str
        """
        if rclastsession is None:
            raise ValueError("Invalid value for `rclastsession`, must not be `None`")

        self._rclastsession = rclastsession

    @property
    def rclastsessiondate(self):
        """Gets the rclastsessiondate of this Document.


        :return: The rclastsessiondate of this Document.
        :rtype: str
        """
        return self._rclastsessiondate

    @rclastsessiondate.setter
    def rclastsessiondate(self, rclastsessiondate):
        """Sets the rclastsessiondate of this Document.


        :param rclastsessiondate: The rclastsessiondate of this Document.
        :type rclastsessiondate: str
        """
        if rclastsessiondate is None:
            raise ValueError("Invalid value for `rclastsessiondate`, must not be `None`")

        self._rclastsessiondate = rclastsessiondate
