# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutindicesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: str=None, multiple: bool=None, name: str=None):
        """PutindicesRequest - a model defined in OpenAPI

        :param fields: The fields of this PutindicesRequest.
        :param multiple: The multiple of this PutindicesRequest.
        :param name: The name of this PutindicesRequest.
        """
        self.openapi_types = {
            'fields': str,
            'multiple': bool,
            'name': str
        }

        self.attribute_map = {
            'fields': 'fields',
            'multiple': 'multiple',
            'name': 'name'
        }

        self._fields = fields
        self._multiple = multiple
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutindicesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutindicesRequest of this PutindicesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this PutindicesRequest.

        Comma-separted fields of the index

        :return: The fields of this PutindicesRequest.
        :rtype: str
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this PutindicesRequest.

        Comma-separted fields of the index

        :param fields: The fields of this PutindicesRequest.
        :type fields: str
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def multiple(self):
        """Gets the multiple of this PutindicesRequest.

        Determines whether the values need to be unique. If false, values must be unique.

        :return: The multiple of this PutindicesRequest.
        :rtype: bool
        """
        return self._multiple

    @multiple.setter
    def multiple(self, multiple):
        """Sets the multiple of this PutindicesRequest.

        Determines whether the values need to be unique. If false, values must be unique.

        :param multiple: The multiple of this PutindicesRequest.
        :type multiple: bool
        """
        if multiple is None:
            raise ValueError("Invalid value for `multiple`, must not be `None`")

        self._multiple = multiple

    @property
    def name(self):
        """Gets the name of this PutindicesRequest.

        Name to identify the index

        :return: The name of this PutindicesRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PutindicesRequest.

        Name to identify the index

        :param name: The name of this PutindicesRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
