/**
 * Intelligent Search API
 * >ℹ️ Onboarding guide  >  > Check the new [Search onboarding guide](https://developers.vtex.com/docs/guides/search-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API is from the [VTEX Intelligent Search](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/3qgT47zY08biLP3d5os3DG) solution, an alternative to the platform’s native search, as it assists the customer in their purchase journey, and it presents results since the first interaction with the search bar.    ## Index  - [Get list of the 10 most searched terms](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/top_searches)  - [Get list of suggested terms and attributes similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/autocomplete_suggestions)  - [Get attempt of correction of a misspelled term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/correction_search)  - [Get list of banners registered for query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/banners/-facets-)  - [Get list of suggested terms similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/search_suggestions)  - [Get list of products for a query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/product_search/-facets-)  - [Get list of the possible facets for a given query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/facets/-facets-)
 *
 * The version of the OpenAPI document: 0.1.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Banners from '../model/Banners';
import Correction from '../model/Correction';
import Error from '../model/Error';
import Facets from '../model/Facets';
import ProductSearch from '../model/ProductSearch';
import SearchSuggestions from '../model/SearchSuggestions';

/**
* ProductListPage service.
* @module api/ProductListPageApi
* @version 0.1.12
*/
export default class ProductListPageApi {

    /**
    * Constructs a new ProductListPageApi. 
    * @alias module:api/ProductListPageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bannersFacetsGet operation.
     * @callback module:api/ProductListPageApi~bannersFacetsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Banners} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of banners registered for query
     * Lists the banners registered for a given query. Check the [configuring banners documentation](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/4ViKEivLJtJsvpaW0aqIQ5) for a full explanation of the banner feature.
     * @param {String} facets # Format  The `facets` parameter follows the format : `/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}`.  The order in which the terms appear is not relevant to the search.  You can also repeat the same `facetKey` several times for different values. For example: `category-1/shoes/color/blue/color/red/color/yellow`  # General filters  The `facets` parameter also allows the following general filters.  | `facetKey`      | Description                                                                                      | Example                                                                  | | --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ | | `price`         | Filter the search by a price range. The facet value follows the format `${minPrice}:${maxPrice}` | `/color/blue/price/100:500?query=shirt`                                  | | `category-${n}` | Filter the search by category, where `n` represents the category tree level (1 = department, 2 = category, 3 = subcategory, and so on) | `category-1/clothing/category-2/shirts`                                  | | `region-id`     | Filter the search by a region id (aka regionalization). The value is the region id               | `/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query=shirt`. | 
     * @param {Object} opts Optional parameters
     * @param {String} [query] Search term. It can contain any character.
     * @param {String} [locale] Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language.
     * @param {module:api/ProductListPageApi~bannersFacetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Banners}
     */
    bannersFacetsGet(facets, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'facets' is set
      if (facets === undefined || facets === null) {
        throw new Error("Missing the required parameter 'facets' when calling bannersFacetsGet");
      }

      let pathParams = {
        'facets': facets
      };
      let queryParams = {
        'query': opts['query'],
        'locale': opts['locale']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Banners;
      return this.apiClient.callApi(
        '/banners/{facets}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the correctionSearchGet operation.
     * @callback module:api/ProductListPageApi~correctionSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Correction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attempt of correction of a misspelled term
     * Tries to correct a misspelled term from the search.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Search term. It can contain any character.
     * @param {String} [locale] Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language.
     * @param {module:api/ProductListPageApi~correctionSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Correction}
     */
    correctionSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'locale': opts['locale']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Correction;
      return this.apiClient.callApi(
        '/correction_search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the facetsFacetsGet operation.
     * @callback module:api/ProductListPageApi~facetsFacetsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Facets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of the possible facets for a given query
     * Lists the possible facets for a given query
     * @param {String} facets # Format  The `facets` parameter follows the format : `/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}`.  The order in which the terms appear is not relevant to the search.  You can also repeat the same `facetKey` several times for different values. For example: `category-1/shoes/color/blue/color/red/color/yellow`  # General filters  The `facets` parameter also allows the following general filters.  | `facetKey`      | Description                                                                                      | Example                                                                  | | --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ | | `price`         | Filter the search by a price range. The facet value follows the format `${minPrice}:${maxPrice}` | `/color/blue/price/100:500?query=shirt`                                  | | `category-${n}` | Filter the search by category, where `n` represents the category tree level (1 = department, 2 = category, 3 = subcategory, and so on) | `category-1/clothing/category-2/shirts`                                  | | `region-id`     | Filter the search by a region id (aka regionalization). The value is the region id               | `/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query=shirt`. | 
     * @param {Object} opts Optional parameters
     * @param {String} [query] Search term. It can contain any character.
     * @param {String} [locale] Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language.
     * @param {Boolean} [hideUnavailableItems = false)] Whether the result should hide unavailable items (`true`), or not (`false`)
     * @param {module:api/ProductListPageApi~facetsFacetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Facets}
     */
    facetsFacetsGet(facets, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'facets' is set
      if (facets === undefined || facets === null) {
        throw new Error("Missing the required parameter 'facets' when calling facetsFacetsGet");
      }

      let pathParams = {
        'facets': facets
      };
      let queryParams = {
        'query': opts['query'],
        'locale': opts['locale'],
        'hideUnavailableItems': opts['hideUnavailableItems']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Facets;
      return this.apiClient.callApi(
        '/facets/{facets}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productSearchFacetsGet operation.
     * @callback module:api/ProductListPageApi~productSearchFacetsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductSearch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of products for a query
     * Lists the products for a given query.
     * @param {String} facets # Format  The `facets` parameter follows the format : `/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}`.  The order in which the terms appear is not relevant to the search.  You can also repeat the same `facetKey` several times for different values. For example: `category-1/shoes/color/blue/color/red/color/yellow`  # General filters  The `facets` parameter also allows the following general filters.  | `facetKey`      | Description                                                                                      | Example                                                                  | | --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ | | `price`         | Filter the search by a price range. The facet value follows the format `${minPrice}:${maxPrice}` | `/color/blue/price/100:500?query=shirt`                                  | | `category-${n}` | Filter the search by category, where `n` represents the category tree level (1 = department, 2 = category, 3 = subcategory, and so on) | `category-1/clothing/category-2/shirts`                                  | | `region-id`     | Filter the search by a region id (aka regionalization). The value is the region id               | `/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query=shirt`. | 
     * @param {Object} opts Optional parameters
     * @param {String} [query] Search term. It can contain any character.
     * @param {module:model/String} [simulationBehavior = 'default')] Defines the simulation behavior.   * `default` - Calls the simulation for every single seller.  * `skip` - Never calls the simulation.  * `only1P` - Only calls the simulation for first party sellers.
     * @param {Number} [count = 24)] Number of products per page.
     * @param {Number} [page = 1)] Current search page.
     * @param {module:model/String} [sort] Defines the sort type. If null, the products will be sorted by relevance.
     * @param {String} [locale] Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language.
     * @param {Boolean} [hideUnavailableItems = false)] Whether the result should hide unavailable items (`true`), or not (`false`)
     * @param {module:api/ProductListPageApi~productSearchFacetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductSearch}
     */
    productSearchFacetsGet(facets, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'facets' is set
      if (facets === undefined || facets === null) {
        throw new Error("Missing the required parameter 'facets' when calling productSearchFacetsGet");
      }

      let pathParams = {
        'facets': facets
      };
      let queryParams = {
        'query': opts['query'],
        'simulationBehavior': opts['simulationBehavior'],
        'count': opts['count'],
        'page': opts['page'],
        'sort': opts['sort'],
        'locale': opts['locale'],
        'hideUnavailableItems': opts['hideUnavailableItems']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductSearch;
      return this.apiClient.callApi(
        '/product_search/{facets}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSuggestionsGet operation.
     * @callback module:api/ProductListPageApi~searchSuggestionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchSuggestions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of suggested terms similar to the search term
     * Lists suggested terms similar to the search term.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Search term. It can contain any character.
     * @param {String} [locale] Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language.
     * @param {module:api/ProductListPageApi~searchSuggestionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchSuggestions}
     */
    searchSuggestionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'locale': opts['locale']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchSuggestions;
      return this.apiClient.callApi(
        '/search_suggestions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
