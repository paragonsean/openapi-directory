/**
 * Intelligent Search API
 * >ℹ️ Onboarding guide  >  > Check the new [Search onboarding guide](https://developers.vtex.com/docs/guides/search-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API is from the [VTEX Intelligent Search](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/3qgT47zY08biLP3d5os3DG) solution, an alternative to the platform’s native search, as it assists the customer in their purchase journey, and it presents results since the first interaction with the search bar.    ## Index  - [Get list of the 10 most searched terms](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/top_searches)  - [Get list of suggested terms and attributes similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/autocomplete_suggestions)  - [Get attempt of correction of a misspelled term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/correction_search)  - [Get list of banners registered for query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/banners/-facets-)  - [Get list of suggested terms similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/search_suggestions)  - [Get list of products for a query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/product_search/-facets-)  - [Get list of the possible facets for a given query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/facets/-facets-)
 *
 * The version of the OpenAPI document: 0.1.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AutocompleteSearchSuggestions from '../model/AutocompleteSearchSuggestions';
import Error from '../model/Error';
import TopSearches from '../model/TopSearches';

/**
* Autocomplete service.
* @module api/AutocompleteApi
* @version 0.1.12
*/
export default class AutocompleteApi {

    /**
    * Constructs a new AutocompleteApi. 
    * @alias module:api/AutocompleteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the autocompleteSuggestionsGet operation.
     * @callback module:api/AutocompleteApi~autocompleteSuggestionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutocompleteSearchSuggestions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of suggested terms and attributes similar to the search term
     * Lists the suggested terms and attributes similar to the search term.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Search term. It can contain any character.
     * @param {String} [locale] Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language.
     * @param {module:api/AutocompleteApi~autocompleteSuggestionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutocompleteSearchSuggestions}
     */
    autocompleteSuggestionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'locale': opts['locale']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AutocompleteSearchSuggestions;
      return this.apiClient.callApi(
        '/autocomplete_suggestions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topSearchesGet operation.
     * @callback module:api/AutocompleteApi~topSearchesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopSearches} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of the 10 most searched terms
     * Lists the 10 most searched terms.
     * @param {Object} opts Optional parameters
     * @param {String} [locale] Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language.
     * @param {module:api/AutocompleteApi~topSearchesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopSearches}
     */
    topSearchesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'locale': opts['locale']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TopSearches;
      return this.apiClient.callApi(
        '/top_searches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
