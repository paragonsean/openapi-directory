/**
 * Intelligent Search API
 * >ℹ️ Onboarding guide  >  > Check the new [Search onboarding guide](https://developers.vtex.com/docs/guides/search-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API is from the [VTEX Intelligent Search](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/3qgT47zY08biLP3d5os3DG) solution, an alternative to the platform’s native search, as it assists the customer in their purchase journey, and it presents results since the first interaction with the search bar.    ## Index  - [Get list of the 10 most searched terms](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/top_searches)  - [Get list of suggested terms and attributes similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/autocomplete_suggestions)  - [Get attempt of correction of a misspelled term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/correction_search)  - [Get list of banners registered for query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/banners/-facets-)  - [Get list of suggested terms similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/search_suggestions)  - [Get list of products for a query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/product_search/-facets-)  - [Get list of the possible facets for a given query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/facets/-facets-)
 *
 * The version of the OpenAPI document: 0.1.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FacetsQueryArgsSelectedFacetsInner from './FacetsQueryArgsSelectedFacetsInner';

/**
 * The FacetsQueryArgs model module.
 * @module model/FacetsQueryArgs
 * @version 0.1.12
 */
class FacetsQueryArgs {
    /**
     * Constructs a new <code>FacetsQueryArgs</code>.
     * Term and facets used in the query
     * @alias module:model/FacetsQueryArgs
     */
    constructor() { 
        
        FacetsQueryArgs.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FacetsQueryArgs</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FacetsQueryArgs} obj Optional instance to populate.
     * @return {module:model/FacetsQueryArgs} The populated <code>FacetsQueryArgs</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FacetsQueryArgs();

            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('selectedFacets')) {
                obj['selectedFacets'] = ApiClient.convertToType(data['selectedFacets'], [FacetsQueryArgsSelectedFacetsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FacetsQueryArgs</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FacetsQueryArgs</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        if (data['selectedFacets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['selectedFacets'])) {
                throw new Error("Expected the field `selectedFacets` to be an array in the JSON data but got " + data['selectedFacets']);
            }
            // validate the optional field `selectedFacets` (array)
            for (const item of data['selectedFacets']) {
                FacetsQueryArgsSelectedFacetsInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Search term used in the query.
 * @member {String} query
 */
FacetsQueryArgs.prototype['query'] = undefined;

/**
 * Facets used in the query.
 * @member {Array.<module:model/FacetsQueryArgsSelectedFacetsInner>} selectedFacets
 */
FacetsQueryArgs.prototype['selectedFacets'] = undefined;






export default FacetsQueryArgs;

