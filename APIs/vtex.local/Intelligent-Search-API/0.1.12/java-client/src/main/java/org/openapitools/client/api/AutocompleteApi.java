/*
 * Intelligent Search API
 * >ℹ️ Onboarding guide  >  > Check the new [Search onboarding guide](https://developers.vtex.com/docs/guides/search-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API is from the [VTEX Intelligent Search](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/3qgT47zY08biLP3d5os3DG) solution, an alternative to the platform’s native search, as it assists the customer in their purchase journey, and it presents results since the first interaction with the search bar.    ## Index  - [Get list of the 10 most searched terms](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/top_searches)  - [Get list of suggested terms and attributes similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/autocomplete_suggestions)  - [Get attempt of correction of a misspelled term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/correction_search)  - [Get list of banners registered for query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/banners/-facets-)  - [Get list of suggested terms similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/search_suggestions)  - [Get list of products for a query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/product_search/-facets-)  - [Get list of the possible facets for a given query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/facets/-facets-)
 *
 * The version of the OpenAPI document: 0.1.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AutocompleteSearchSuggestions;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.TopSearches;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AutocompleteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AutocompleteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AutocompleteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for autocompleteSuggestionsGet
     * @param query Search term. It can contain any character. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autocompleteSuggestionsGetCall(String query, String locale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/autocomplete_suggestions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autocompleteSuggestionsGetValidateBeforeCall(String query, String locale, final ApiCallback _callback) throws ApiException {
        return autocompleteSuggestionsGetCall(query, locale, _callback);

    }

    /**
     * Get list of suggested terms and attributes similar to the search term
     * Lists the suggested terms and attributes similar to the search term.
     * @param query Search term. It can contain any character. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @return AutocompleteSearchSuggestions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public AutocompleteSearchSuggestions autocompleteSuggestionsGet(String query, String locale) throws ApiException {
        ApiResponse<AutocompleteSearchSuggestions> localVarResp = autocompleteSuggestionsGetWithHttpInfo(query, locale);
        return localVarResp.getData();
    }

    /**
     * Get list of suggested terms and attributes similar to the search term
     * Lists the suggested terms and attributes similar to the search term.
     * @param query Search term. It can contain any character. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @return ApiResponse&lt;AutocompleteSearchSuggestions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutocompleteSearchSuggestions> autocompleteSuggestionsGetWithHttpInfo(String query, String locale) throws ApiException {
        okhttp3.Call localVarCall = autocompleteSuggestionsGetValidateBeforeCall(query, locale, null);
        Type localVarReturnType = new TypeToken<AutocompleteSearchSuggestions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of suggested terms and attributes similar to the search term (asynchronously)
     * Lists the suggested terms and attributes similar to the search term.
     * @param query Search term. It can contain any character. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autocompleteSuggestionsGetAsync(String query, String locale, final ApiCallback<AutocompleteSearchSuggestions> _callback) throws ApiException {

        okhttp3.Call localVarCall = autocompleteSuggestionsGetValidateBeforeCall(query, locale, _callback);
        Type localVarReturnType = new TypeToken<AutocompleteSearchSuggestions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topSearchesGet
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topSearchesGetCall(String locale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/top_searches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topSearchesGetValidateBeforeCall(String locale, final ApiCallback _callback) throws ApiException {
        return topSearchesGetCall(locale, _callback);

    }

    /**
     * Get list of the 10 most searched terms
     * Lists the 10 most searched terms.
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @return TopSearches
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public TopSearches topSearchesGet(String locale) throws ApiException {
        ApiResponse<TopSearches> localVarResp = topSearchesGetWithHttpInfo(locale);
        return localVarResp.getData();
    }

    /**
     * Get list of the 10 most searched terms
     * Lists the 10 most searched terms.
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @return ApiResponse&lt;TopSearches&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TopSearches> topSearchesGetWithHttpInfo(String locale) throws ApiException {
        okhttp3.Call localVarCall = topSearchesGetValidateBeforeCall(locale, null);
        Type localVarReturnType = new TypeToken<TopSearches>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of the 10 most searched terms (asynchronously)
     * Lists the 10 most searched terms.
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topSearchesGetAsync(String locale, final ApiCallback<TopSearches> _callback) throws ApiException {

        okhttp3.Call localVarCall = topSearchesGetValidateBeforeCall(locale, _callback);
        Type localVarReturnType = new TypeToken<TopSearches>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
