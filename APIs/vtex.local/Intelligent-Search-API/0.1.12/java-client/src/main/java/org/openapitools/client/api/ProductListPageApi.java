/*
 * Intelligent Search API
 * >ℹ️ Onboarding guide  >  > Check the new [Search onboarding guide](https://developers.vtex.com/docs/guides/search-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API is from the [VTEX Intelligent Search](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/3qgT47zY08biLP3d5os3DG) solution, an alternative to the platform’s native search, as it assists the customer in their purchase journey, and it presents results since the first interaction with the search bar.    ## Index  - [Get list of the 10 most searched terms](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/top_searches)  - [Get list of suggested terms and attributes similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/autocomplete_suggestions)  - [Get attempt of correction of a misspelled term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/correction_search)  - [Get list of banners registered for query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/banners/-facets-)  - [Get list of suggested terms similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/search_suggestions)  - [Get list of products for a query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/product_search/-facets-)  - [Get list of the possible facets for a given query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/facets/-facets-)
 *
 * The version of the OpenAPI document: 0.1.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Banners;
import java.math.BigDecimal;
import org.openapitools.client.model.Correction;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Facets;
import org.openapitools.client.model.ProductSearch;
import org.openapitools.client.model.SearchSuggestions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductListPageApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductListPageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductListPageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bannersFacetsGet
     * @param facets # Format  The &#x60;facets&#x60; parameter follows the format : &#x60;/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}&#x60;.  The order in which the terms appear is not relevant to the search.  You can also repeat the same &#x60;facetKey&#x60; several times for different values. For example: &#x60;category-1/shoes/color/blue/color/red/color/yellow&#x60;  # General filters  The &#x60;facets&#x60; parameter also allows the following general filters.  | &#x60;facetKey&#x60;      | Description                                                                                      | Example                                                                  | | --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ | | &#x60;price&#x60;         | Filter the search by a price range. The facet value follows the format &#x60;${minPrice}:${maxPrice}&#x60; | &#x60;/color/blue/price/100:500?query&#x3D;shirt&#x60;                                  | | &#x60;category-${n}&#x60; | Filter the search by category, where &#x60;n&#x60; represents the category tree level (1 &#x3D; department, 2 &#x3D; category, 3 &#x3D; subcategory, and so on) | &#x60;category-1/clothing/category-2/shirts&#x60;                                  | | &#x60;region-id&#x60;     | Filter the search by a region id (aka regionalization). The value is the region id               | &#x60;/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query&#x3D;shirt&#x60;. |  (required)
     * @param query Search term. It can contain any character. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bannersFacetsGetCall(String facets, String query, String locale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/banners/{facets}"
            .replace("{" + "facets" + "}", localVarApiClient.escapeString(facets.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bannersFacetsGetValidateBeforeCall(String facets, String query, String locale, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'facets' is set
        if (facets == null) {
            throw new ApiException("Missing the required parameter 'facets' when calling bannersFacetsGet(Async)");
        }

        return bannersFacetsGetCall(facets, query, locale, _callback);

    }

    /**
     * Get list of banners registered for query
     * Lists the banners registered for a given query. Check the [configuring banners documentation](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/4ViKEivLJtJsvpaW0aqIQ5) for a full explanation of the banner feature.
     * @param facets # Format  The &#x60;facets&#x60; parameter follows the format : &#x60;/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}&#x60;.  The order in which the terms appear is not relevant to the search.  You can also repeat the same &#x60;facetKey&#x60; several times for different values. For example: &#x60;category-1/shoes/color/blue/color/red/color/yellow&#x60;  # General filters  The &#x60;facets&#x60; parameter also allows the following general filters.  | &#x60;facetKey&#x60;      | Description                                                                                      | Example                                                                  | | --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ | | &#x60;price&#x60;         | Filter the search by a price range. The facet value follows the format &#x60;${minPrice}:${maxPrice}&#x60; | &#x60;/color/blue/price/100:500?query&#x3D;shirt&#x60;                                  | | &#x60;category-${n}&#x60; | Filter the search by category, where &#x60;n&#x60; represents the category tree level (1 &#x3D; department, 2 &#x3D; category, 3 &#x3D; subcategory, and so on) | &#x60;category-1/clothing/category-2/shirts&#x60;                                  | | &#x60;region-id&#x60;     | Filter the search by a region id (aka regionalization). The value is the region id               | &#x60;/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query&#x3D;shirt&#x60;. |  (required)
     * @param query Search term. It can contain any character. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @return Banners
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Banners bannersFacetsGet(String facets, String query, String locale) throws ApiException {
        ApiResponse<Banners> localVarResp = bannersFacetsGetWithHttpInfo(facets, query, locale);
        return localVarResp.getData();
    }

    /**
     * Get list of banners registered for query
     * Lists the banners registered for a given query. Check the [configuring banners documentation](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/4ViKEivLJtJsvpaW0aqIQ5) for a full explanation of the banner feature.
     * @param facets # Format  The &#x60;facets&#x60; parameter follows the format : &#x60;/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}&#x60;.  The order in which the terms appear is not relevant to the search.  You can also repeat the same &#x60;facetKey&#x60; several times for different values. For example: &#x60;category-1/shoes/color/blue/color/red/color/yellow&#x60;  # General filters  The &#x60;facets&#x60; parameter also allows the following general filters.  | &#x60;facetKey&#x60;      | Description                                                                                      | Example                                                                  | | --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ | | &#x60;price&#x60;         | Filter the search by a price range. The facet value follows the format &#x60;${minPrice}:${maxPrice}&#x60; | &#x60;/color/blue/price/100:500?query&#x3D;shirt&#x60;                                  | | &#x60;category-${n}&#x60; | Filter the search by category, where &#x60;n&#x60; represents the category tree level (1 &#x3D; department, 2 &#x3D; category, 3 &#x3D; subcategory, and so on) | &#x60;category-1/clothing/category-2/shirts&#x60;                                  | | &#x60;region-id&#x60;     | Filter the search by a region id (aka regionalization). The value is the region id               | &#x60;/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query&#x3D;shirt&#x60;. |  (required)
     * @param query Search term. It can contain any character. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @return ApiResponse&lt;Banners&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Banners> bannersFacetsGetWithHttpInfo(String facets, String query, String locale) throws ApiException {
        okhttp3.Call localVarCall = bannersFacetsGetValidateBeforeCall(facets, query, locale, null);
        Type localVarReturnType = new TypeToken<Banners>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of banners registered for query (asynchronously)
     * Lists the banners registered for a given query. Check the [configuring banners documentation](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/4ViKEivLJtJsvpaW0aqIQ5) for a full explanation of the banner feature.
     * @param facets # Format  The &#x60;facets&#x60; parameter follows the format : &#x60;/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}&#x60;.  The order in which the terms appear is not relevant to the search.  You can also repeat the same &#x60;facetKey&#x60; several times for different values. For example: &#x60;category-1/shoes/color/blue/color/red/color/yellow&#x60;  # General filters  The &#x60;facets&#x60; parameter also allows the following general filters.  | &#x60;facetKey&#x60;      | Description                                                                                      | Example                                                                  | | --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ | | &#x60;price&#x60;         | Filter the search by a price range. The facet value follows the format &#x60;${minPrice}:${maxPrice}&#x60; | &#x60;/color/blue/price/100:500?query&#x3D;shirt&#x60;                                  | | &#x60;category-${n}&#x60; | Filter the search by category, where &#x60;n&#x60; represents the category tree level (1 &#x3D; department, 2 &#x3D; category, 3 &#x3D; subcategory, and so on) | &#x60;category-1/clothing/category-2/shirts&#x60;                                  | | &#x60;region-id&#x60;     | Filter the search by a region id (aka regionalization). The value is the region id               | &#x60;/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query&#x3D;shirt&#x60;. |  (required)
     * @param query Search term. It can contain any character. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bannersFacetsGetAsync(String facets, String query, String locale, final ApiCallback<Banners> _callback) throws ApiException {

        okhttp3.Call localVarCall = bannersFacetsGetValidateBeforeCall(facets, query, locale, _callback);
        Type localVarReturnType = new TypeToken<Banners>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for correctionSearchGet
     * @param query Search term. It can contain any character. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call correctionSearchGetCall(String query, String locale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/correction_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call correctionSearchGetValidateBeforeCall(String query, String locale, final ApiCallback _callback) throws ApiException {
        return correctionSearchGetCall(query, locale, _callback);

    }

    /**
     * Get attempt of correction of a misspelled term
     * Tries to correct a misspelled term from the search.
     * @param query Search term. It can contain any character. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @return Correction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Correction correctionSearchGet(String query, String locale) throws ApiException {
        ApiResponse<Correction> localVarResp = correctionSearchGetWithHttpInfo(query, locale);
        return localVarResp.getData();
    }

    /**
     * Get attempt of correction of a misspelled term
     * Tries to correct a misspelled term from the search.
     * @param query Search term. It can contain any character. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @return ApiResponse&lt;Correction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Correction> correctionSearchGetWithHttpInfo(String query, String locale) throws ApiException {
        okhttp3.Call localVarCall = correctionSearchGetValidateBeforeCall(query, locale, null);
        Type localVarReturnType = new TypeToken<Correction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get attempt of correction of a misspelled term (asynchronously)
     * Tries to correct a misspelled term from the search.
     * @param query Search term. It can contain any character. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call correctionSearchGetAsync(String query, String locale, final ApiCallback<Correction> _callback) throws ApiException {

        okhttp3.Call localVarCall = correctionSearchGetValidateBeforeCall(query, locale, _callback);
        Type localVarReturnType = new TypeToken<Correction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for facetsFacetsGet
     * @param facets # Format  The &#x60;facets&#x60; parameter follows the format : &#x60;/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}&#x60;.  The order in which the terms appear is not relevant to the search.  You can also repeat the same &#x60;facetKey&#x60; several times for different values. For example: &#x60;category-1/shoes/color/blue/color/red/color/yellow&#x60;  # General filters  The &#x60;facets&#x60; parameter also allows the following general filters.  | &#x60;facetKey&#x60;      | Description                                                                                      | Example                                                                  | | --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ | | &#x60;price&#x60;         | Filter the search by a price range. The facet value follows the format &#x60;${minPrice}:${maxPrice}&#x60; | &#x60;/color/blue/price/100:500?query&#x3D;shirt&#x60;                                  | | &#x60;category-${n}&#x60; | Filter the search by category, where &#x60;n&#x60; represents the category tree level (1 &#x3D; department, 2 &#x3D; category, 3 &#x3D; subcategory, and so on) | &#x60;category-1/clothing/category-2/shirts&#x60;                                  | | &#x60;region-id&#x60;     | Filter the search by a region id (aka regionalization). The value is the region id               | &#x60;/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query&#x3D;shirt&#x60;. |  (required)
     * @param query Search term. It can contain any character. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @param hideUnavailableItems Whether the result should hide unavailable items (&#x60;true&#x60;), or not (&#x60;false&#x60;) (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of facets for the given query. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call facetsFacetsGetCall(String facets, String query, String locale, Boolean hideUnavailableItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/facets/{facets}"
            .replace("{" + "facets" + "}", localVarApiClient.escapeString(facets.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (hideUnavailableItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hideUnavailableItems", hideUnavailableItems));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call facetsFacetsGetValidateBeforeCall(String facets, String query, String locale, Boolean hideUnavailableItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'facets' is set
        if (facets == null) {
            throw new ApiException("Missing the required parameter 'facets' when calling facetsFacetsGet(Async)");
        }

        return facetsFacetsGetCall(facets, query, locale, hideUnavailableItems, _callback);

    }

    /**
     * Get list of the possible facets for a given query
     * Lists the possible facets for a given query
     * @param facets # Format  The &#x60;facets&#x60; parameter follows the format : &#x60;/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}&#x60;.  The order in which the terms appear is not relevant to the search.  You can also repeat the same &#x60;facetKey&#x60; several times for different values. For example: &#x60;category-1/shoes/color/blue/color/red/color/yellow&#x60;  # General filters  The &#x60;facets&#x60; parameter also allows the following general filters.  | &#x60;facetKey&#x60;      | Description                                                                                      | Example                                                                  | | --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ | | &#x60;price&#x60;         | Filter the search by a price range. The facet value follows the format &#x60;${minPrice}:${maxPrice}&#x60; | &#x60;/color/blue/price/100:500?query&#x3D;shirt&#x60;                                  | | &#x60;category-${n}&#x60; | Filter the search by category, where &#x60;n&#x60; represents the category tree level (1 &#x3D; department, 2 &#x3D; category, 3 &#x3D; subcategory, and so on) | &#x60;category-1/clothing/category-2/shirts&#x60;                                  | | &#x60;region-id&#x60;     | Filter the search by a region id (aka regionalization). The value is the region id               | &#x60;/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query&#x3D;shirt&#x60;. |  (required)
     * @param query Search term. It can contain any character. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @param hideUnavailableItems Whether the result should hide unavailable items (&#x60;true&#x60;), or not (&#x60;false&#x60;) (optional, default to false)
     * @return Facets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of facets for the given query. </td><td>  -  </td></tr>
     </table>
     */
    public Facets facetsFacetsGet(String facets, String query, String locale, Boolean hideUnavailableItems) throws ApiException {
        ApiResponse<Facets> localVarResp = facetsFacetsGetWithHttpInfo(facets, query, locale, hideUnavailableItems);
        return localVarResp.getData();
    }

    /**
     * Get list of the possible facets for a given query
     * Lists the possible facets for a given query
     * @param facets # Format  The &#x60;facets&#x60; parameter follows the format : &#x60;/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}&#x60;.  The order in which the terms appear is not relevant to the search.  You can also repeat the same &#x60;facetKey&#x60; several times for different values. For example: &#x60;category-1/shoes/color/blue/color/red/color/yellow&#x60;  # General filters  The &#x60;facets&#x60; parameter also allows the following general filters.  | &#x60;facetKey&#x60;      | Description                                                                                      | Example                                                                  | | --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ | | &#x60;price&#x60;         | Filter the search by a price range. The facet value follows the format &#x60;${minPrice}:${maxPrice}&#x60; | &#x60;/color/blue/price/100:500?query&#x3D;shirt&#x60;                                  | | &#x60;category-${n}&#x60; | Filter the search by category, where &#x60;n&#x60; represents the category tree level (1 &#x3D; department, 2 &#x3D; category, 3 &#x3D; subcategory, and so on) | &#x60;category-1/clothing/category-2/shirts&#x60;                                  | | &#x60;region-id&#x60;     | Filter the search by a region id (aka regionalization). The value is the region id               | &#x60;/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query&#x3D;shirt&#x60;. |  (required)
     * @param query Search term. It can contain any character. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @param hideUnavailableItems Whether the result should hide unavailable items (&#x60;true&#x60;), or not (&#x60;false&#x60;) (optional, default to false)
     * @return ApiResponse&lt;Facets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of facets for the given query. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Facets> facetsFacetsGetWithHttpInfo(String facets, String query, String locale, Boolean hideUnavailableItems) throws ApiException {
        okhttp3.Call localVarCall = facetsFacetsGetValidateBeforeCall(facets, query, locale, hideUnavailableItems, null);
        Type localVarReturnType = new TypeToken<Facets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of the possible facets for a given query (asynchronously)
     * Lists the possible facets for a given query
     * @param facets # Format  The &#x60;facets&#x60; parameter follows the format : &#x60;/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}&#x60;.  The order in which the terms appear is not relevant to the search.  You can also repeat the same &#x60;facetKey&#x60; several times for different values. For example: &#x60;category-1/shoes/color/blue/color/red/color/yellow&#x60;  # General filters  The &#x60;facets&#x60; parameter also allows the following general filters.  | &#x60;facetKey&#x60;      | Description                                                                                      | Example                                                                  | | --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ | | &#x60;price&#x60;         | Filter the search by a price range. The facet value follows the format &#x60;${minPrice}:${maxPrice}&#x60; | &#x60;/color/blue/price/100:500?query&#x3D;shirt&#x60;                                  | | &#x60;category-${n}&#x60; | Filter the search by category, where &#x60;n&#x60; represents the category tree level (1 &#x3D; department, 2 &#x3D; category, 3 &#x3D; subcategory, and so on) | &#x60;category-1/clothing/category-2/shirts&#x60;                                  | | &#x60;region-id&#x60;     | Filter the search by a region id (aka regionalization). The value is the region id               | &#x60;/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query&#x3D;shirt&#x60;. |  (required)
     * @param query Search term. It can contain any character. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @param hideUnavailableItems Whether the result should hide unavailable items (&#x60;true&#x60;), or not (&#x60;false&#x60;) (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of facets for the given query. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call facetsFacetsGetAsync(String facets, String query, String locale, Boolean hideUnavailableItems, final ApiCallback<Facets> _callback) throws ApiException {

        okhttp3.Call localVarCall = facetsFacetsGetValidateBeforeCall(facets, query, locale, hideUnavailableItems, _callback);
        Type localVarReturnType = new TypeToken<Facets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productSearchFacetsGet
     * @param facets # Format  The &#x60;facets&#x60; parameter follows the format : &#x60;/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}&#x60;.  The order in which the terms appear is not relevant to the search.  You can also repeat the same &#x60;facetKey&#x60; several times for different values. For example: &#x60;category-1/shoes/color/blue/color/red/color/yellow&#x60;  # General filters  The &#x60;facets&#x60; parameter also allows the following general filters.  | &#x60;facetKey&#x60;      | Description                                                                                      | Example                                                                  | | --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ | | &#x60;price&#x60;         | Filter the search by a price range. The facet value follows the format &#x60;${minPrice}:${maxPrice}&#x60; | &#x60;/color/blue/price/100:500?query&#x3D;shirt&#x60;                                  | | &#x60;category-${n}&#x60; | Filter the search by category, where &#x60;n&#x60; represents the category tree level (1 &#x3D; department, 2 &#x3D; category, 3 &#x3D; subcategory, and so on) | &#x60;category-1/clothing/category-2/shirts&#x60;                                  | | &#x60;region-id&#x60;     | Filter the search by a region id (aka regionalization). The value is the region id               | &#x60;/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query&#x3D;shirt&#x60;. |  (required)
     * @param query Search term. It can contain any character. (optional)
     * @param simulationBehavior Defines the simulation behavior.   * &#x60;default&#x60; - Calls the simulation for every single seller.  * &#x60;skip&#x60; - Never calls the simulation.  * &#x60;only1P&#x60; - Only calls the simulation for first party sellers. (optional, default to default)
     * @param count Number of products per page. (optional, default to 24)
     * @param page Current search page. (optional, default to 1)
     * @param sort Defines the sort type. If null, the products will be sorted by relevance. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @param hideUnavailableItems Whether the result should hide unavailable items (&#x60;true&#x60;), or not (&#x60;false&#x60;) (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of products for the given query. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productSearchFacetsGetCall(String facets, String query, String simulationBehavior, BigDecimal count, BigDecimal page, String sort, String locale, Boolean hideUnavailableItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product_search/{facets}"
            .replace("{" + "facets" + "}", localVarApiClient.escapeString(facets.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (simulationBehavior != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("simulationBehavior", simulationBehavior));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (hideUnavailableItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hideUnavailableItems", hideUnavailableItems));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productSearchFacetsGetValidateBeforeCall(String facets, String query, String simulationBehavior, BigDecimal count, BigDecimal page, String sort, String locale, Boolean hideUnavailableItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'facets' is set
        if (facets == null) {
            throw new ApiException("Missing the required parameter 'facets' when calling productSearchFacetsGet(Async)");
        }

        return productSearchFacetsGetCall(facets, query, simulationBehavior, count, page, sort, locale, hideUnavailableItems, _callback);

    }

    /**
     * Get list of products for a query
     * Lists the products for a given query.
     * @param facets # Format  The &#x60;facets&#x60; parameter follows the format : &#x60;/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}&#x60;.  The order in which the terms appear is not relevant to the search.  You can also repeat the same &#x60;facetKey&#x60; several times for different values. For example: &#x60;category-1/shoes/color/blue/color/red/color/yellow&#x60;  # General filters  The &#x60;facets&#x60; parameter also allows the following general filters.  | &#x60;facetKey&#x60;      | Description                                                                                      | Example                                                                  | | --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ | | &#x60;price&#x60;         | Filter the search by a price range. The facet value follows the format &#x60;${minPrice}:${maxPrice}&#x60; | &#x60;/color/blue/price/100:500?query&#x3D;shirt&#x60;                                  | | &#x60;category-${n}&#x60; | Filter the search by category, where &#x60;n&#x60; represents the category tree level (1 &#x3D; department, 2 &#x3D; category, 3 &#x3D; subcategory, and so on) | &#x60;category-1/clothing/category-2/shirts&#x60;                                  | | &#x60;region-id&#x60;     | Filter the search by a region id (aka regionalization). The value is the region id               | &#x60;/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query&#x3D;shirt&#x60;. |  (required)
     * @param query Search term. It can contain any character. (optional)
     * @param simulationBehavior Defines the simulation behavior.   * &#x60;default&#x60; - Calls the simulation for every single seller.  * &#x60;skip&#x60; - Never calls the simulation.  * &#x60;only1P&#x60; - Only calls the simulation for first party sellers. (optional, default to default)
     * @param count Number of products per page. (optional, default to 24)
     * @param page Current search page. (optional, default to 1)
     * @param sort Defines the sort type. If null, the products will be sorted by relevance. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @param hideUnavailableItems Whether the result should hide unavailable items (&#x60;true&#x60;), or not (&#x60;false&#x60;) (optional, default to false)
     * @return ProductSearch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of products for the given query. </td><td>  -  </td></tr>
     </table>
     */
    public ProductSearch productSearchFacetsGet(String facets, String query, String simulationBehavior, BigDecimal count, BigDecimal page, String sort, String locale, Boolean hideUnavailableItems) throws ApiException {
        ApiResponse<ProductSearch> localVarResp = productSearchFacetsGetWithHttpInfo(facets, query, simulationBehavior, count, page, sort, locale, hideUnavailableItems);
        return localVarResp.getData();
    }

    /**
     * Get list of products for a query
     * Lists the products for a given query.
     * @param facets # Format  The &#x60;facets&#x60; parameter follows the format : &#x60;/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}&#x60;.  The order in which the terms appear is not relevant to the search.  You can also repeat the same &#x60;facetKey&#x60; several times for different values. For example: &#x60;category-1/shoes/color/blue/color/red/color/yellow&#x60;  # General filters  The &#x60;facets&#x60; parameter also allows the following general filters.  | &#x60;facetKey&#x60;      | Description                                                                                      | Example                                                                  | | --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ | | &#x60;price&#x60;         | Filter the search by a price range. The facet value follows the format &#x60;${minPrice}:${maxPrice}&#x60; | &#x60;/color/blue/price/100:500?query&#x3D;shirt&#x60;                                  | | &#x60;category-${n}&#x60; | Filter the search by category, where &#x60;n&#x60; represents the category tree level (1 &#x3D; department, 2 &#x3D; category, 3 &#x3D; subcategory, and so on) | &#x60;category-1/clothing/category-2/shirts&#x60;                                  | | &#x60;region-id&#x60;     | Filter the search by a region id (aka regionalization). The value is the region id               | &#x60;/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query&#x3D;shirt&#x60;. |  (required)
     * @param query Search term. It can contain any character. (optional)
     * @param simulationBehavior Defines the simulation behavior.   * &#x60;default&#x60; - Calls the simulation for every single seller.  * &#x60;skip&#x60; - Never calls the simulation.  * &#x60;only1P&#x60; - Only calls the simulation for first party sellers. (optional, default to default)
     * @param count Number of products per page. (optional, default to 24)
     * @param page Current search page. (optional, default to 1)
     * @param sort Defines the sort type. If null, the products will be sorted by relevance. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @param hideUnavailableItems Whether the result should hide unavailable items (&#x60;true&#x60;), or not (&#x60;false&#x60;) (optional, default to false)
     * @return ApiResponse&lt;ProductSearch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of products for the given query. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductSearch> productSearchFacetsGetWithHttpInfo(String facets, String query, String simulationBehavior, BigDecimal count, BigDecimal page, String sort, String locale, Boolean hideUnavailableItems) throws ApiException {
        okhttp3.Call localVarCall = productSearchFacetsGetValidateBeforeCall(facets, query, simulationBehavior, count, page, sort, locale, hideUnavailableItems, null);
        Type localVarReturnType = new TypeToken<ProductSearch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of products for a query (asynchronously)
     * Lists the products for a given query.
     * @param facets # Format  The &#x60;facets&#x60; parameter follows the format : &#x60;/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}&#x60;.  The order in which the terms appear is not relevant to the search.  You can also repeat the same &#x60;facetKey&#x60; several times for different values. For example: &#x60;category-1/shoes/color/blue/color/red/color/yellow&#x60;  # General filters  The &#x60;facets&#x60; parameter also allows the following general filters.  | &#x60;facetKey&#x60;      | Description                                                                                      | Example                                                                  | | --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ | | &#x60;price&#x60;         | Filter the search by a price range. The facet value follows the format &#x60;${minPrice}:${maxPrice}&#x60; | &#x60;/color/blue/price/100:500?query&#x3D;shirt&#x60;                                  | | &#x60;category-${n}&#x60; | Filter the search by category, where &#x60;n&#x60; represents the category tree level (1 &#x3D; department, 2 &#x3D; category, 3 &#x3D; subcategory, and so on) | &#x60;category-1/clothing/category-2/shirts&#x60;                                  | | &#x60;region-id&#x60;     | Filter the search by a region id (aka regionalization). The value is the region id               | &#x60;/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query&#x3D;shirt&#x60;. |  (required)
     * @param query Search term. It can contain any character. (optional)
     * @param simulationBehavior Defines the simulation behavior.   * &#x60;default&#x60; - Calls the simulation for every single seller.  * &#x60;skip&#x60; - Never calls the simulation.  * &#x60;only1P&#x60; - Only calls the simulation for first party sellers. (optional, default to default)
     * @param count Number of products per page. (optional, default to 24)
     * @param page Current search page. (optional, default to 1)
     * @param sort Defines the sort type. If null, the products will be sorted by relevance. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @param hideUnavailableItems Whether the result should hide unavailable items (&#x60;true&#x60;), or not (&#x60;false&#x60;) (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of products for the given query. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productSearchFacetsGetAsync(String facets, String query, String simulationBehavior, BigDecimal count, BigDecimal page, String sort, String locale, Boolean hideUnavailableItems, final ApiCallback<ProductSearch> _callback) throws ApiException {

        okhttp3.Call localVarCall = productSearchFacetsGetValidateBeforeCall(facets, query, simulationBehavior, count, page, sort, locale, hideUnavailableItems, _callback);
        Type localVarReturnType = new TypeToken<ProductSearch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchSuggestionsGet
     * @param query Search term. It can contain any character. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchSuggestionsGetCall(String query, String locale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search_suggestions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchSuggestionsGetValidateBeforeCall(String query, String locale, final ApiCallback _callback) throws ApiException {
        return searchSuggestionsGetCall(query, locale, _callback);

    }

    /**
     * Get list of suggested terms similar to the search term
     * Lists suggested terms similar to the search term.
     * @param query Search term. It can contain any character. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @return SearchSuggestions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public SearchSuggestions searchSuggestionsGet(String query, String locale) throws ApiException {
        ApiResponse<SearchSuggestions> localVarResp = searchSuggestionsGetWithHttpInfo(query, locale);
        return localVarResp.getData();
    }

    /**
     * Get list of suggested terms similar to the search term
     * Lists suggested terms similar to the search term.
     * @param query Search term. It can contain any character. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @return ApiResponse&lt;SearchSuggestions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchSuggestions> searchSuggestionsGetWithHttpInfo(String query, String locale) throws ApiException {
        okhttp3.Call localVarCall = searchSuggestionsGetValidateBeforeCall(query, locale, null);
        Type localVarReturnType = new TypeToken<SearchSuggestions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of suggested terms similar to the search term (asynchronously)
     * Lists suggested terms similar to the search term.
     * @param query Search term. It can contain any character. (optional)
     * @param locale Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> Server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchSuggestionsGetAsync(String query, String locale, final ApiCallback<SearchSuggestions> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchSuggestionsGetValidateBeforeCall(query, locale, _callback);
        Type localVarReturnType = new TypeToken<SearchSuggestions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
