/*
 * Intelligent Search API
 * >ℹ️ Onboarding guide  >  > Check the new [Search onboarding guide](https://developers.vtex.com/docs/guides/search-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API is from the [VTEX Intelligent Search](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/3qgT47zY08biLP3d5os3DG) solution, an alternative to the platform’s native search, as it assists the customer in their purchase journey, and it presents results since the first interaction with the search bar.    ## Index  - [Get list of the 10 most searched terms](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/top_searches)  - [Get list of suggested terms and attributes similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/autocomplete_suggestions)  - [Get attempt of correction of a misspelled term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/correction_search)  - [Get list of banners registered for query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/banners/-facets-)  - [Get list of suggested terms similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/search_suggestions)  - [Get list of products for a query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/product_search/-facets-)  - [Get list of the possible facets for a given query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/facets/-facets-)
 *
 * The version of the OpenAPI document: 0.1.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProductSearchCorrection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProductSearch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:36.196045-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductSearch {
  public static final String SERIALIZED_NAME_CORRECTION = "correction";
  @SerializedName(SERIALIZED_NAME_CORRECTION)
  private ProductSearchCorrection correction;

  public static final String SERIALIZED_NAME_FUZZY = "fuzzy";
  @SerializedName(SERIALIZED_NAME_FUZZY)
  private String fuzzy;

  /**
   * Indicates how the search-engine dealt with the fullText when there is more than one word.  * &#x60;and&#x60; - It means that the products contains all the words in the query.  * &#x60;or&#x60; - It means that the results will contain at least one word from the original search query. If &#x60;and&#x60; was not possible, &#x60;or&#x60; will be the fallback.
   */
  @JsonAdapter(OperatorEnum.Adapter.class)
  public enum OperatorEnum {
    AND("and"),
    
    OR("or");

    private String value;

    OperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperatorEnum fromValue(String value) {
      for (OperatorEnum b : OperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperatorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperatorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private OperatorEnum operator;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<Object> products = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECORDS_FILTERED = "recordsFiltered";
  @SerializedName(SERIALIZED_NAME_RECORDS_FILTERED)
  private BigDecimal recordsFiltered;

  public static final String SERIALIZED_NAME_TRANSLATED = "translated";
  @SerializedName(SERIALIZED_NAME_TRANSLATED)
  private Boolean translated;

  public ProductSearch() {
  }

  public ProductSearch correction(ProductSearchCorrection correction) {
    this.correction = correction;
    return this;
  }

  /**
   * Get correction
   * @return correction
   */
  @javax.annotation.Nullable
  public ProductSearchCorrection getCorrection() {
    return correction;
  }

  public void setCorrection(ProductSearchCorrection correction) {
    this.correction = correction;
  }


  public ProductSearch fuzzy(String fuzzy) {
    this.fuzzy = fuzzy;
    return this;
  }

  /**
   * Indicates how the search engine corrected the misspelled word by using fuzzy logic. It can be a number representing the max number of misspelled letters, or the string &#x60;auto&#x60; suggesting that the search-engine should set this value by itself.
   * @return fuzzy
   */
  @javax.annotation.Nullable
  public String getFuzzy() {
    return fuzzy;
  }

  public void setFuzzy(String fuzzy) {
    this.fuzzy = fuzzy;
  }


  public ProductSearch operator(OperatorEnum operator) {
    this.operator = operator;
    return this;
  }

  /**
   * Indicates how the search-engine dealt with the fullText when there is more than one word.  * &#x60;and&#x60; - It means that the products contains all the words in the query.  * &#x60;or&#x60; - It means that the results will contain at least one word from the original search query. If &#x60;and&#x60; was not possible, &#x60;or&#x60; will be the fallback.
   * @return operator
   */
  @javax.annotation.Nullable
  public OperatorEnum getOperator() {
    return operator;
  }

  public void setOperator(OperatorEnum operator) {
    this.operator = operator;
  }


  public ProductSearch products(List<Object> products) {
    this.products = products;
    return this;
  }

  public ProductSearch addProductsItem(Object productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

  /**
   * List of products
   * @return products
   */
  @javax.annotation.Nullable
  public List<Object> getProducts() {
    return products;
  }

  public void setProducts(List<Object> products) {
    this.products = products;
  }


  public ProductSearch recordsFiltered(BigDecimal recordsFiltered) {
    this.recordsFiltered = recordsFiltered;
    return this;
  }

  /**
   * Total number of products.
   * @return recordsFiltered
   */
  @javax.annotation.Nullable
  public BigDecimal getRecordsFiltered() {
    return recordsFiltered;
  }

  public void setRecordsFiltered(BigDecimal recordsFiltered) {
    this.recordsFiltered = recordsFiltered;
  }


  public ProductSearch translated(Boolean translated) {
    this.translated = translated;
    return this;
  }

  /**
   * Whether the list of products was translated by the IS (&#x60;true&#x60;) or not (&#x60;false&#x60;).
   * @return translated
   */
  @javax.annotation.Nullable
  public Boolean getTranslated() {
    return translated;
  }

  public void setTranslated(Boolean translated) {
    this.translated = translated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductSearch productSearch = (ProductSearch) o;
    return Objects.equals(this.correction, productSearch.correction) &&
        Objects.equals(this.fuzzy, productSearch.fuzzy) &&
        Objects.equals(this.operator, productSearch.operator) &&
        Objects.equals(this.products, productSearch.products) &&
        Objects.equals(this.recordsFiltered, productSearch.recordsFiltered) &&
        Objects.equals(this.translated, productSearch.translated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(correction, fuzzy, operator, products, recordsFiltered, translated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductSearch {\n");
    sb.append("    correction: ").append(toIndentedString(correction)).append("\n");
    sb.append("    fuzzy: ").append(toIndentedString(fuzzy)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    recordsFiltered: ").append(toIndentedString(recordsFiltered)).append("\n");
    sb.append("    translated: ").append(toIndentedString(translated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("correction");
    openapiFields.add("fuzzy");
    openapiFields.add("operator");
    openapiFields.add("products");
    openapiFields.add("recordsFiltered");
    openapiFields.add("translated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductSearch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductSearch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductSearch is not found in the empty JSON string", ProductSearch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductSearch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductSearch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `correction`
      if (jsonObj.get("correction") != null && !jsonObj.get("correction").isJsonNull()) {
        ProductSearchCorrection.validateJsonElement(jsonObj.get("correction"));
      }
      if ((jsonObj.get("fuzzy") != null && !jsonObj.get("fuzzy").isJsonNull()) && !jsonObj.get("fuzzy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fuzzy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fuzzy").toString()));
      }
      if ((jsonObj.get("operator") != null && !jsonObj.get("operator").isJsonNull()) && !jsonObj.get("operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator").toString()));
      }
      // validate the optional field `operator`
      if (jsonObj.get("operator") != null && !jsonObj.get("operator").isJsonNull()) {
        OperatorEnum.validateJsonElement(jsonObj.get("operator"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull() && !jsonObj.get("products").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductSearch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductSearch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductSearch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductSearch.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductSearch>() {
           @Override
           public void write(JsonWriter out, ProductSearch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductSearch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductSearch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductSearch
   * @throws IOException if the JSON string is invalid with respect to ProductSearch
   */
  public static ProductSearch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductSearch.class);
  }

  /**
   * Convert an instance of ProductSearch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

