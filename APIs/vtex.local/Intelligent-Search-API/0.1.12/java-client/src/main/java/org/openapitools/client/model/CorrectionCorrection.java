/*
 * Intelligent Search API
 * >ℹ️ Onboarding guide  >  > Check the new [Search onboarding guide](https://developers.vtex.com/docs/guides/search-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API is from the [VTEX Intelligent Search](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/3qgT47zY08biLP3d5os3DG) solution, an alternative to the platform’s native search, as it assists the customer in their purchase journey, and it presents results since the first interaction with the search bar.    ## Index  - [Get list of the 10 most searched terms](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/top_searches)  - [Get list of suggested terms and attributes similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/autocomplete_suggestions)  - [Get attempt of correction of a misspelled term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/correction_search)  - [Get list of banners registered for query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/banners/-facets-)  - [Get list of suggested terms similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/search_suggestions)  - [Get list of products for a query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/product_search/-facets-)  - [Get list of the possible facets for a given query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/facets/-facets-)
 *
 * The version of the OpenAPI document: 0.1.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object that indicates if the term was misspelled and suggests a possible correction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:36.196045-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CorrectionCorrection {
  public static final String SERIALIZED_NAME_CORRECTION = "correction";
  @SerializedName(SERIALIZED_NAME_CORRECTION)
  private Boolean correction;

  public static final String SERIALIZED_NAME_HIGHLIGHTED = "highlighted";
  @SerializedName(SERIALIZED_NAME_HIGHLIGHTED)
  private String highlighted;

  public static final String SERIALIZED_NAME_MISSPELLED = "misspelled";
  @SerializedName(SERIALIZED_NAME_MISSPELLED)
  private Boolean misspelled;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public CorrectionCorrection() {
  }

  public CorrectionCorrection correction(Boolean correction) {
    this.correction = correction;
    return this;
  }

  /**
   * Whether the API was able to suggest a correction (&#x60;true&#x60;) or not (&#x60;false&#x60;).
   * @return correction
   */
  @javax.annotation.Nullable
  public Boolean getCorrection() {
    return correction;
  }

  public void setCorrection(Boolean correction) {
    this.correction = correction;
  }


  public CorrectionCorrection highlighted(String highlighted) {
    this.highlighted = highlighted;
    return this;
  }

  /**
   * The same as &#x60;text&#x60;, but it highlights the corrected word. Useful when there is more than one word.
   * @return highlighted
   */
  @javax.annotation.Nullable
  public String getHighlighted() {
    return highlighted;
  }

  public void setHighlighted(String highlighted) {
    this.highlighted = highlighted;
  }


  public CorrectionCorrection misspelled(Boolean misspelled) {
    this.misspelled = misspelled;
    return this;
  }

  /**
   * Whether the term was misspelled (&#x60;true&#x60;) or not (&#x60;false&#x60;).
   * @return misspelled
   */
  @javax.annotation.Nullable
  public Boolean getMisspelled() {
    return misspelled;
  }

  public void setMisspelled(Boolean misspelled) {
    this.misspelled = misspelled;
  }


  public CorrectionCorrection text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The corrected term. If the API was not able to correct the term, it will show the original search term.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CorrectionCorrection correctionCorrection = (CorrectionCorrection) o;
    return Objects.equals(this.correction, correctionCorrection.correction) &&
        Objects.equals(this.highlighted, correctionCorrection.highlighted) &&
        Objects.equals(this.misspelled, correctionCorrection.misspelled) &&
        Objects.equals(this.text, correctionCorrection.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(correction, highlighted, misspelled, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CorrectionCorrection {\n");
    sb.append("    correction: ").append(toIndentedString(correction)).append("\n");
    sb.append("    highlighted: ").append(toIndentedString(highlighted)).append("\n");
    sb.append("    misspelled: ").append(toIndentedString(misspelled)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("correction");
    openapiFields.add("highlighted");
    openapiFields.add("misspelled");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CorrectionCorrection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CorrectionCorrection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CorrectionCorrection is not found in the empty JSON string", CorrectionCorrection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CorrectionCorrection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CorrectionCorrection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("highlighted") != null && !jsonObj.get("highlighted").isJsonNull()) && !jsonObj.get("highlighted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highlighted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highlighted").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CorrectionCorrection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CorrectionCorrection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CorrectionCorrection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CorrectionCorrection.class));

       return (TypeAdapter<T>) new TypeAdapter<CorrectionCorrection>() {
           @Override
           public void write(JsonWriter out, CorrectionCorrection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CorrectionCorrection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CorrectionCorrection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CorrectionCorrection
   * @throws IOException if the JSON string is invalid with respect to CorrectionCorrection
   */
  public static CorrectionCorrection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CorrectionCorrection.class);
  }

  /**
   * Convert an instance of CorrectionCorrection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

