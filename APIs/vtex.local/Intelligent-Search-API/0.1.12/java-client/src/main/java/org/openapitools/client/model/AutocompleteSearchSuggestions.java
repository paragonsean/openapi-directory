/*
 * Intelligent Search API
 * >ℹ️ Onboarding guide  >  > Check the new [Search onboarding guide](https://developers.vtex.com/docs/guides/search-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API is from the [VTEX Intelligent Search](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/3qgT47zY08biLP3d5os3DG) solution, an alternative to the platform’s native search, as it assists the customer in their purchase journey, and it presents results since the first interaction with the search bar.    ## Index  - [Get list of the 10 most searched terms](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/top_searches)  - [Get list of suggested terms and attributes similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/autocomplete_suggestions)  - [Get attempt of correction of a misspelled term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/correction_search)  - [Get list of banners registered for query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/banners/-facets-)  - [Get list of suggested terms similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/search_suggestions)  - [Get list of products for a query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/product_search/-facets-)  - [Get list of the possible facets for a given query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/facets/-facets-)
 *
 * The version of the OpenAPI document: 0.1.12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AutocompleteSearchSuggestionsSearchesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AutocompleteSearchSuggestions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:36.196045-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutocompleteSearchSuggestions {
  public static final String SERIALIZED_NAME_SEARCHES = "searches";
  @SerializedName(SERIALIZED_NAME_SEARCHES)
  private List<AutocompleteSearchSuggestionsSearchesInner> searches = new ArrayList<>();

  public AutocompleteSearchSuggestions() {
  }

  public AutocompleteSearchSuggestions searches(List<AutocompleteSearchSuggestionsSearchesInner> searches) {
    this.searches = searches;
    return this;
  }

  public AutocompleteSearchSuggestions addSearchesItem(AutocompleteSearchSuggestionsSearchesInner searchesItem) {
    if (this.searches == null) {
      this.searches = new ArrayList<>();
    }
    this.searches.add(searchesItem);
    return this;
  }

  /**
   * List of suggested facets and terms.
   * @return searches
   */
  @javax.annotation.Nullable
  public List<AutocompleteSearchSuggestionsSearchesInner> getSearches() {
    return searches;
  }

  public void setSearches(List<AutocompleteSearchSuggestionsSearchesInner> searches) {
    this.searches = searches;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutocompleteSearchSuggestions autocompleteSearchSuggestions = (AutocompleteSearchSuggestions) o;
    return Objects.equals(this.searches, autocompleteSearchSuggestions.searches);
  }

  @Override
  public int hashCode() {
    return Objects.hash(searches);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutocompleteSearchSuggestions {\n");
    sb.append("    searches: ").append(toIndentedString(searches)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("searches");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutocompleteSearchSuggestions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutocompleteSearchSuggestions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutocompleteSearchSuggestions is not found in the empty JSON string", AutocompleteSearchSuggestions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutocompleteSearchSuggestions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutocompleteSearchSuggestions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("searches") != null && !jsonObj.get("searches").isJsonNull()) {
        JsonArray jsonArraysearches = jsonObj.getAsJsonArray("searches");
        if (jsonArraysearches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("searches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `searches` to be an array in the JSON string but got `%s`", jsonObj.get("searches").toString()));
          }

          // validate the optional field `searches` (array)
          for (int i = 0; i < jsonArraysearches.size(); i++) {
            AutocompleteSearchSuggestionsSearchesInner.validateJsonElement(jsonArraysearches.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutocompleteSearchSuggestions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutocompleteSearchSuggestions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutocompleteSearchSuggestions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutocompleteSearchSuggestions.class));

       return (TypeAdapter<T>) new TypeAdapter<AutocompleteSearchSuggestions>() {
           @Override
           public void write(JsonWriter out, AutocompleteSearchSuggestions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutocompleteSearchSuggestions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutocompleteSearchSuggestions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutocompleteSearchSuggestions
   * @throws IOException if the JSON string is invalid with respect to AutocompleteSearchSuggestions
   */
  public static AutocompleteSearchSuggestions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutocompleteSearchSuggestions.class);
  }

  /**
   * Convert an instance of AutocompleteSearchSuggestions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

