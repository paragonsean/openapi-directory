# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_search_correction import ProductSearchCorrection
from openapi_server import util


class ProductSearch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, correction: ProductSearchCorrection=None, fuzzy: str=None, operator: str=None, products: List[object]=None, records_filtered: float=None, translated: bool=None):
        """ProductSearch - a model defined in OpenAPI

        :param correction: The correction of this ProductSearch.
        :param fuzzy: The fuzzy of this ProductSearch.
        :param operator: The operator of this ProductSearch.
        :param products: The products of this ProductSearch.
        :param records_filtered: The records_filtered of this ProductSearch.
        :param translated: The translated of this ProductSearch.
        """
        self.openapi_types = {
            'correction': ProductSearchCorrection,
            'fuzzy': str,
            'operator': str,
            'products': List[object],
            'records_filtered': float,
            'translated': bool
        }

        self.attribute_map = {
            'correction': 'correction',
            'fuzzy': 'fuzzy',
            'operator': 'operator',
            'products': 'products',
            'records_filtered': 'recordsFiltered',
            'translated': 'translated'
        }

        self._correction = correction
        self._fuzzy = fuzzy
        self._operator = operator
        self._products = products
        self._records_filtered = records_filtered
        self._translated = translated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductSearch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductSearch of this ProductSearch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def correction(self):
        """Gets the correction of this ProductSearch.


        :return: The correction of this ProductSearch.
        :rtype: ProductSearchCorrection
        """
        return self._correction

    @correction.setter
    def correction(self, correction):
        """Sets the correction of this ProductSearch.


        :param correction: The correction of this ProductSearch.
        :type correction: ProductSearchCorrection
        """

        self._correction = correction

    @property
    def fuzzy(self):
        """Gets the fuzzy of this ProductSearch.

        Indicates how the search engine corrected the misspelled word by using fuzzy logic. It can be a number representing the max number of misspelled letters, or the string `auto` suggesting that the search-engine should set this value by itself.

        :return: The fuzzy of this ProductSearch.
        :rtype: str
        """
        return self._fuzzy

    @fuzzy.setter
    def fuzzy(self, fuzzy):
        """Sets the fuzzy of this ProductSearch.

        Indicates how the search engine corrected the misspelled word by using fuzzy logic. It can be a number representing the max number of misspelled letters, or the string `auto` suggesting that the search-engine should set this value by itself.

        :param fuzzy: The fuzzy of this ProductSearch.
        :type fuzzy: str
        """

        self._fuzzy = fuzzy

    @property
    def operator(self):
        """Gets the operator of this ProductSearch.

        Indicates how the search-engine dealt with the fullText when there is more than one word.  * `and` - It means that the products contains all the words in the query.  * `or` - It means that the results will contain at least one word from the original search query. If `and` was not possible, `or` will be the fallback.

        :return: The operator of this ProductSearch.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this ProductSearch.

        Indicates how the search-engine dealt with the fullText when there is more than one word.  * `and` - It means that the products contains all the words in the query.  * `or` - It means that the results will contain at least one word from the original search query. If `and` was not possible, `or` will be the fallback.

        :param operator: The operator of this ProductSearch.
        :type operator: str
        """
        allowed_values = ["and", "or"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def products(self):
        """Gets the products of this ProductSearch.

        List of products

        :return: The products of this ProductSearch.
        :rtype: List[object]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this ProductSearch.

        List of products

        :param products: The products of this ProductSearch.
        :type products: List[object]
        """

        self._products = products

    @property
    def records_filtered(self):
        """Gets the records_filtered of this ProductSearch.

        Total number of products.

        :return: The records_filtered of this ProductSearch.
        :rtype: float
        """
        return self._records_filtered

    @records_filtered.setter
    def records_filtered(self, records_filtered):
        """Sets the records_filtered of this ProductSearch.

        Total number of products.

        :param records_filtered: The records_filtered of this ProductSearch.
        :type records_filtered: float
        """

        self._records_filtered = records_filtered

    @property
    def translated(self):
        """Gets the translated of this ProductSearch.

        Whether the list of products was translated by the IS (`true`) or not (`false`).

        :return: The translated of this ProductSearch.
        :rtype: bool
        """
        return self._translated

    @translated.setter
    def translated(self, translated):
        """Sets the translated of this ProductSearch.

        Whether the list of products was translated by the IS (`true`) or not (`false`).

        :param translated: The translated of this ProductSearch.
        :type translated: bool
        """

        self._translated = translated
