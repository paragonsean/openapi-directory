# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FacetsFacetsInnerValuesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, key: str=None, name: str=None, quantity: float=None, selected: bool=None, value: str=None):
        """FacetsFacetsInnerValuesInner - a model defined in OpenAPI

        :param id: The id of this FacetsFacetsInnerValuesInner.
        :param key: The key of this FacetsFacetsInnerValuesInner.
        :param name: The name of this FacetsFacetsInnerValuesInner.
        :param quantity: The quantity of this FacetsFacetsInnerValuesInner.
        :param selected: The selected of this FacetsFacetsInnerValuesInner.
        :param value: The value of this FacetsFacetsInnerValuesInner.
        """
        self.openapi_types = {
            'id': str,
            'key': str,
            'name': str,
            'quantity': float,
            'selected': bool,
            'value': str
        }

        self.attribute_map = {
            'id': 'id',
            'key': 'key',
            'name': 'name',
            'quantity': 'quantity',
            'selected': 'selected',
            'value': 'value'
        }

        self._id = id
        self._key = key
        self._name = name
        self._quantity = quantity
        self._selected = selected
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FacetsFacetsInnerValuesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Facets_facets_inner_values_inner of this FacetsFacetsInnerValuesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this FacetsFacetsInnerValuesInner.

        Value id

        :return: The id of this FacetsFacetsInnerValuesInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FacetsFacetsInnerValuesInner.

        Value id

        :param id: The id of this FacetsFacetsInnerValuesInner.
        :type id: str
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this FacetsFacetsInnerValuesInner.

        Facet key.

        :return: The key of this FacetsFacetsInnerValuesInner.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this FacetsFacetsInnerValuesInner.

        Facet key.

        :param key: The key of this FacetsFacetsInnerValuesInner.
        :type key: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this FacetsFacetsInnerValuesInner.

        Human-readable format of the facet value

        :return: The name of this FacetsFacetsInnerValuesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FacetsFacetsInnerValuesInner.

        Human-readable format of the facet value

        :param name: The name of this FacetsFacetsInnerValuesInner.
        :type name: str
        """

        self._name = name

    @property
    def quantity(self):
        """Gets the quantity of this FacetsFacetsInnerValuesInner.

        Number of resulting products.

        :return: The quantity of this FacetsFacetsInnerValuesInner.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this FacetsFacetsInnerValuesInner.

        Number of resulting products.

        :param quantity: The quantity of this FacetsFacetsInnerValuesInner.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def selected(self):
        """Gets the selected of this FacetsFacetsInnerValuesInner.

        Whether the value is selected (`true`) or not (`false`).

        :return: The selected of this FacetsFacetsInnerValuesInner.
        :rtype: bool
        """
        return self._selected

    @selected.setter
    def selected(self, selected):
        """Sets the selected of this FacetsFacetsInnerValuesInner.

        Whether the value is selected (`true`) or not (`false`).

        :param selected: The selected of this FacetsFacetsInnerValuesInner.
        :type selected: bool
        """

        self._selected = selected

    @property
    def value(self):
        """Gets the value of this FacetsFacetsInnerValuesInner.

        Facet value.

        :return: The value of this FacetsFacetsInnerValuesInner.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FacetsFacetsInnerValuesInner.

        Facet value.

        :param value: The value of this FacetsFacetsInnerValuesInner.
        :type value: str
        """

        self._value = value
