# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CorrectionCorrection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, correction: bool=None, highlighted: str=None, misspelled: bool=None, text: str=None):
        """CorrectionCorrection - a model defined in OpenAPI

        :param correction: The correction of this CorrectionCorrection.
        :param highlighted: The highlighted of this CorrectionCorrection.
        :param misspelled: The misspelled of this CorrectionCorrection.
        :param text: The text of this CorrectionCorrection.
        """
        self.openapi_types = {
            'correction': bool,
            'highlighted': str,
            'misspelled': bool,
            'text': str
        }

        self.attribute_map = {
            'correction': 'correction',
            'highlighted': 'highlighted',
            'misspelled': 'misspelled',
            'text': 'text'
        }

        self._correction = correction
        self._highlighted = highlighted
        self._misspelled = misspelled
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CorrectionCorrection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Correction_correction of this CorrectionCorrection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def correction(self):
        """Gets the correction of this CorrectionCorrection.

        Whether the API was able to suggest a correction (`true`) or not (`false`).

        :return: The correction of this CorrectionCorrection.
        :rtype: bool
        """
        return self._correction

    @correction.setter
    def correction(self, correction):
        """Sets the correction of this CorrectionCorrection.

        Whether the API was able to suggest a correction (`true`) or not (`false`).

        :param correction: The correction of this CorrectionCorrection.
        :type correction: bool
        """

        self._correction = correction

    @property
    def highlighted(self):
        """Gets the highlighted of this CorrectionCorrection.

        The same as `text`, but it highlights the corrected word. Useful when there is more than one word.

        :return: The highlighted of this CorrectionCorrection.
        :rtype: str
        """
        return self._highlighted

    @highlighted.setter
    def highlighted(self, highlighted):
        """Sets the highlighted of this CorrectionCorrection.

        The same as `text`, but it highlights the corrected word. Useful when there is more than one word.

        :param highlighted: The highlighted of this CorrectionCorrection.
        :type highlighted: str
        """

        self._highlighted = highlighted

    @property
    def misspelled(self):
        """Gets the misspelled of this CorrectionCorrection.

        Whether the term was misspelled (`true`) or not (`false`).

        :return: The misspelled of this CorrectionCorrection.
        :rtype: bool
        """
        return self._misspelled

    @misspelled.setter
    def misspelled(self, misspelled):
        """Sets the misspelled of this CorrectionCorrection.

        Whether the term was misspelled (`true`) or not (`false`).

        :param misspelled: The misspelled of this CorrectionCorrection.
        :type misspelled: bool
        """

        self._misspelled = misspelled

    @property
    def text(self):
        """Gets the text of this CorrectionCorrection.

        The corrected term. If the API was not able to correct the term, it will show the original search term.

        :return: The text of this CorrectionCorrection.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this CorrectionCorrection.

        The corrected term. If the API was not able to correct the term, it will show the original search term.

        :param text: The text of this CorrectionCorrection.
        :type text: str
        """

        self._text = text
