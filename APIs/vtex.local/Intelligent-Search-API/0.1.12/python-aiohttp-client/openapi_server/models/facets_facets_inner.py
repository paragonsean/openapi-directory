# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.facets_facets_inner_values_inner import FacetsFacetsInnerValuesInner
from openapi_server import util


class FacetsFacetsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hidden: bool=None, name: str=None, quantity: float=None, type: str=None, values: List[FacetsFacetsInnerValuesInner]=None):
        """FacetsFacetsInner - a model defined in OpenAPI

        :param hidden: The hidden of this FacetsFacetsInner.
        :param name: The name of this FacetsFacetsInner.
        :param quantity: The quantity of this FacetsFacetsInner.
        :param type: The type of this FacetsFacetsInner.
        :param values: The values of this FacetsFacetsInner.
        """
        self.openapi_types = {
            'hidden': bool,
            'name': str,
            'quantity': float,
            'type': str,
            'values': List[FacetsFacetsInnerValuesInner]
        }

        self.attribute_map = {
            'hidden': 'hidden',
            'name': 'name',
            'quantity': 'quantity',
            'type': 'type',
            'values': 'values'
        }

        self._hidden = hidden
        self._name = name
        self._quantity = quantity
        self._type = type
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FacetsFacetsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Facets_facets_inner of this FacetsFacetsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hidden(self):
        """Gets the hidden of this FacetsFacetsInner.

        Whether the client-side should hide the facet (`true`) or not (`false`)

        :return: The hidden of this FacetsFacetsInner.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this FacetsFacetsInner.

        Whether the client-side should hide the facet (`true`) or not (`false`)

        :param hidden: The hidden of this FacetsFacetsInner.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def name(self):
        """Gets the name of this FacetsFacetsInner.

        Human-readable format of the facet key.

        :return: The name of this FacetsFacetsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FacetsFacetsInner.

        Human-readable format of the facet key.

        :param name: The name of this FacetsFacetsInner.
        :type name: str
        """

        self._name = name

    @property
    def quantity(self):
        """Gets the quantity of this FacetsFacetsInner.

        Number of possible values.

        :return: The quantity of this FacetsFacetsInner.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this FacetsFacetsInner.

        Number of possible values.

        :param quantity: The quantity of this FacetsFacetsInner.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def type(self):
        """Gets the type of this FacetsFacetsInner.

        Facet type  - `TEXT` - The value is a simple text.  - `PRICERANGE` - The value contains the property `range` representing the minimum and the maximum price for the query. 

        :return: The type of this FacetsFacetsInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FacetsFacetsInner.

        Facet type  - `TEXT` - The value is a simple text.  - `PRICERANGE` - The value contains the property `range` representing the minimum and the maximum price for the query. 

        :param type: The type of this FacetsFacetsInner.
        :type type: str
        """
        allowed_values = ["TEXT", "PRICERANGE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def values(self):
        """Gets the values of this FacetsFacetsInner.

        Possible values.

        :return: The values of this FacetsFacetsInner.
        :rtype: List[FacetsFacetsInnerValuesInner]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this FacetsFacetsInner.

        Possible values.

        :param values: The values of this FacetsFacetsInner.
        :type values: List[FacetsFacetsInnerValuesInner]
        """

        self._values = values
