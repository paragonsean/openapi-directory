# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.facets_breadcrumb_inner import FacetsBreadcrumbInner
from openapi_server.models.facets_facets_inner import FacetsFacetsInner
from openapi_server.models.facets_query_args import FacetsQueryArgs
from openapi_server import util


class Facets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, breadcrumb: List[FacetsBreadcrumbInner]=None, facets: List[FacetsFacetsInner]=None, query_args: FacetsQueryArgs=None, sampling: bool=None):
        """Facets - a model defined in OpenAPI

        :param breadcrumb: The breadcrumb of this Facets.
        :param facets: The facets of this Facets.
        :param query_args: The query_args of this Facets.
        :param sampling: The sampling of this Facets.
        """
        self.openapi_types = {
            'breadcrumb': List[FacetsBreadcrumbInner],
            'facets': List[FacetsFacetsInner],
            'query_args': FacetsQueryArgs,
            'sampling': bool
        }

        self.attribute_map = {
            'breadcrumb': 'breadcrumb',
            'facets': 'facets',
            'query_args': 'queryArgs',
            'sampling': 'sampling'
        }

        self._breadcrumb = breadcrumb
        self._facets = facets
        self._query_args = query_args
        self._sampling = sampling

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Facets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Facets of this Facets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def breadcrumb(self):
        """Gets the breadcrumb of this Facets.

        Generated breadcrumb for the given query.

        :return: The breadcrumb of this Facets.
        :rtype: List[FacetsBreadcrumbInner]
        """
        return self._breadcrumb

    @breadcrumb.setter
    def breadcrumb(self, breadcrumb):
        """Sets the breadcrumb of this Facets.

        Generated breadcrumb for the given query.

        :param breadcrumb: The breadcrumb of this Facets.
        :type breadcrumb: List[FacetsBreadcrumbInner]
        """

        self._breadcrumb = breadcrumb

    @property
    def facets(self):
        """Gets the facets of this Facets.

        List of facets

        :return: The facets of this Facets.
        :rtype: List[FacetsFacetsInner]
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this Facets.

        List of facets

        :param facets: The facets of this Facets.
        :type facets: List[FacetsFacetsInner]
        """

        self._facets = facets

    @property
    def query_args(self):
        """Gets the query_args of this Facets.


        :return: The query_args of this Facets.
        :rtype: FacetsQueryArgs
        """
        return self._query_args

    @query_args.setter
    def query_args(self, query_args):
        """Sets the query_args of this Facets.


        :param query_args: The query_args of this Facets.
        :type query_args: FacetsQueryArgs
        """

        self._query_args = query_args

    @property
    def sampling(self):
        """Gets the sampling of this Facets.

        Indicates whether there was sampling in the aggregation of facets or not. In search results that have many products, only the first 30000 will be aggregated to avoid performance issues.

        :return: The sampling of this Facets.
        :rtype: bool
        """
        return self._sampling

    @sampling.setter
    def sampling(self, sampling):
        """Sets the sampling of this Facets.

        Indicates whether there was sampling in the aggregation of facets or not. In search results that have many products, only the first 30000 will be aggregated to avoid performance issues.

        :param sampling: The sampling of this Facets.
        :type sampling: bool
        """

        self._sampling = sampling
