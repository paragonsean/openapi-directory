/**
 * Intelligent Search API
 * >ℹ️ Onboarding guide  >  > Check the new [Search onboarding guide](https://developers.vtex.com/docs/guides/search-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API is from the [VTEX Intelligent Search](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/3qgT47zY08biLP3d5os3DG) solution, an alternative to the platform’s native search, as it assists the customer in their purchase journey, and it presents results since the first interaction with the search bar.    ## Index  - [Get list of the 10 most searched terms](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/top_searches)  - [Get list of suggested terms and attributes similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/autocomplete_suggestions)  - [Get attempt of correction of a misspelled term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/correction_search)  - [Get list of banners registered for query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/banners/-facets-)  - [Get list of suggested terms similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/search_suggestions)  - [Get list of products for a query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/product_search/-facets-)  - [Get list of the possible facets for a given query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/facets/-facets-)
 *
 * The version of the OpenAPI document: 0.1.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacets_queryArgs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFacets_queryArgs::OAIFacets_queryArgs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFacets_queryArgs::OAIFacets_queryArgs() {
    this->initializeModel();
}

OAIFacets_queryArgs::~OAIFacets_queryArgs() {}

void OAIFacets_queryArgs::initializeModel() {

    m_query_isSet = false;
    m_query_isValid = false;

    m_selected_facets_isSet = false;
    m_selected_facets_isValid = false;
}

void OAIFacets_queryArgs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFacets_queryArgs::fromJsonObject(QJsonObject json) {

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_selected_facets_isValid = ::OpenAPI::fromJsonValue(m_selected_facets, json[QString("selectedFacets")]);
    m_selected_facets_isSet = !json[QString("selectedFacets")].isNull() && m_selected_facets_isValid;
}

QString OAIFacets_queryArgs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFacets_queryArgs::asJsonObject() const {
    QJsonObject obj;
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_selected_facets.size() > 0) {
        obj.insert(QString("selectedFacets"), ::OpenAPI::toJsonValue(m_selected_facets));
    }
    return obj;
}

QString OAIFacets_queryArgs::getQuery() const {
    return m_query;
}
void OAIFacets_queryArgs::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIFacets_queryArgs::is_query_Set() const{
    return m_query_isSet;
}

bool OAIFacets_queryArgs::is_query_Valid() const{
    return m_query_isValid;
}

QList<OAIFacets_queryArgs_selectedFacets_inner> OAIFacets_queryArgs::getSelectedFacets() const {
    return m_selected_facets;
}
void OAIFacets_queryArgs::setSelectedFacets(const QList<OAIFacets_queryArgs_selectedFacets_inner> &selected_facets) {
    m_selected_facets = selected_facets;
    m_selected_facets_isSet = true;
}

bool OAIFacets_queryArgs::is_selected_facets_Set() const{
    return m_selected_facets_isSet;
}

bool OAIFacets_queryArgs::is_selected_facets_Valid() const{
    return m_selected_facets_isValid;
}

bool OAIFacets_queryArgs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_facets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFacets_queryArgs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
