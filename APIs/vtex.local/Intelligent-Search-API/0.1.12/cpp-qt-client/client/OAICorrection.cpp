/**
 * Intelligent Search API
 * >ℹ️ Onboarding guide  >  > Check the new [Search onboarding guide](https://developers.vtex.com/docs/guides/search-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API is from the [VTEX Intelligent Search](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/3qgT47zY08biLP3d5os3DG) solution, an alternative to the platform’s native search, as it assists the customer in their purchase journey, and it presents results since the first interaction with the search bar.    ## Index  - [Get list of the 10 most searched terms](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/top_searches)  - [Get list of suggested terms and attributes similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/autocomplete_suggestions)  - [Get attempt of correction of a misspelled term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/correction_search)  - [Get list of banners registered for query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/banners/-facets-)  - [Get list of suggested terms similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/search_suggestions)  - [Get list of products for a query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/product_search/-facets-)  - [Get list of the possible facets for a given query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/facets/-facets-)
 *
 * The version of the OpenAPI document: 0.1.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICorrection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICorrection::OAICorrection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICorrection::OAICorrection() {
    this->initializeModel();
}

OAICorrection::~OAICorrection() {}

void OAICorrection::initializeModel() {

    m_correction_isSet = false;
    m_correction_isValid = false;
}

void OAICorrection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICorrection::fromJsonObject(QJsonObject json) {

    m_correction_isValid = ::OpenAPI::fromJsonValue(m_correction, json[QString("correction")]);
    m_correction_isSet = !json[QString("correction")].isNull() && m_correction_isValid;
}

QString OAICorrection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICorrection::asJsonObject() const {
    QJsonObject obj;
    if (m_correction.isSet()) {
        obj.insert(QString("correction"), ::OpenAPI::toJsonValue(m_correction));
    }
    return obj;
}

OAICorrection_correction OAICorrection::getCorrection() const {
    return m_correction;
}
void OAICorrection::setCorrection(const OAICorrection_correction &correction) {
    m_correction = correction;
    m_correction_isSet = true;
}

bool OAICorrection::is_correction_Set() const{
    return m_correction_isSet;
}

bool OAICorrection::is_correction_Valid() const{
    return m_correction_isValid;
}

bool OAICorrection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_correction.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICorrection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
