/**
 * Intelligent Search API
 * >ℹ️ Onboarding guide  >  > Check the new [Search onboarding guide](https://developers.vtex.com/docs/guides/search-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API is from the [VTEX Intelligent Search](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/3qgT47zY08biLP3d5os3DG) solution, an alternative to the platform’s native search, as it assists the customer in their purchase journey, and it presents results since the first interaction with the search bar.    ## Index  - [Get list of the 10 most searched terms](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/top_searches)  - [Get list of suggested terms and attributes similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/autocomplete_suggestions)  - [Get attempt of correction of a misspelled term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/correction_search)  - [Get list of banners registered for query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/banners/-facets-)  - [Get list of suggested terms similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/search_suggestions)  - [Get list of products for a query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/product_search/-facets-)  - [Get list of the possible facets for a given query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/facets/-facets-)
 *
 * The version of the OpenAPI document: 0.1.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacets_facets_inner_values_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFacets_facets_inner_values_inner::OAIFacets_facets_inner_values_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFacets_facets_inner_values_inner::OAIFacets_facets_inner_values_inner() {
    this->initializeModel();
}

OAIFacets_facets_inner_values_inner::~OAIFacets_facets_inner_values_inner() {}

void OAIFacets_facets_inner_values_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_selected_isSet = false;
    m_selected_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIFacets_facets_inner_values_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFacets_facets_inner_values_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_selected_isValid = ::OpenAPI::fromJsonValue(m_selected, json[QString("selected")]);
    m_selected_isSet = !json[QString("selected")].isNull() && m_selected_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIFacets_facets_inner_values_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFacets_facets_inner_values_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_selected_isSet) {
        obj.insert(QString("selected"), ::OpenAPI::toJsonValue(m_selected));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIFacets_facets_inner_values_inner::getId() const {
    return m_id;
}
void OAIFacets_facets_inner_values_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFacets_facets_inner_values_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFacets_facets_inner_values_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFacets_facets_inner_values_inner::getKey() const {
    return m_key;
}
void OAIFacets_facets_inner_values_inner::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIFacets_facets_inner_values_inner::is_key_Set() const{
    return m_key_isSet;
}

bool OAIFacets_facets_inner_values_inner::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIFacets_facets_inner_values_inner::getName() const {
    return m_name;
}
void OAIFacets_facets_inner_values_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFacets_facets_inner_values_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFacets_facets_inner_values_inner::is_name_Valid() const{
    return m_name_isValid;
}

double OAIFacets_facets_inner_values_inner::getQuantity() const {
    return m_quantity;
}
void OAIFacets_facets_inner_values_inner::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIFacets_facets_inner_values_inner::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIFacets_facets_inner_values_inner::is_quantity_Valid() const{
    return m_quantity_isValid;
}

bool OAIFacets_facets_inner_values_inner::isSelected() const {
    return m_selected;
}
void OAIFacets_facets_inner_values_inner::setSelected(const bool &selected) {
    m_selected = selected;
    m_selected_isSet = true;
}

bool OAIFacets_facets_inner_values_inner::is_selected_Set() const{
    return m_selected_isSet;
}

bool OAIFacets_facets_inner_values_inner::is_selected_Valid() const{
    return m_selected_isValid;
}

QString OAIFacets_facets_inner_values_inner::getValue() const {
    return m_value;
}
void OAIFacets_facets_inner_values_inner::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIFacets_facets_inner_values_inner::is_value_Set() const{
    return m_value_isSet;
}

bool OAIFacets_facets_inner_values_inner::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIFacets_facets_inner_values_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFacets_facets_inner_values_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
