/**
 * Intelligent Search API
 * >ℹ️ Onboarding guide  >  > Check the new [Search onboarding guide](https://developers.vtex.com/docs/guides/search-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API is from the [VTEX Intelligent Search](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/3qgT47zY08biLP3d5os3DG) solution, an alternative to the platform’s native search, as it assists the customer in their purchase journey, and it presents results since the first interaction with the search bar.    ## Index  - [Get list of the 10 most searched terms](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/top_searches)  - [Get list of suggested terms and attributes similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/autocomplete_suggestions)  - [Get attempt of correction of a misspelled term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/correction_search)  - [Get list of banners registered for query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/banners/-facets-)  - [Get list of suggested terms similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/search_suggestions)  - [Get list of products for a query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/product_search/-facets-)  - [Get list of the possible facets for a given query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/facets/-facets-)
 *
 * The version of the OpenAPI document: 0.1.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBanners_banners_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBanners_banners_inner::OAIBanners_banners_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBanners_banners_inner::OAIBanners_banners_inner() {
    this->initializeModel();
}

OAIBanners_banners_inner::~OAIBanners_banners_inner() {}

void OAIBanners_banners_inner::initializeModel() {

    m_area_isSet = false;
    m_area_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIBanners_banners_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBanners_banners_inner::fromJsonObject(QJsonObject json) {

    m_area_isValid = ::OpenAPI::fromJsonValue(m_area, json[QString("area")]);
    m_area_isSet = !json[QString("area")].isNull() && m_area_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIBanners_banners_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBanners_banners_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_area_isSet) {
        obj.insert(QString("area"), ::OpenAPI::toJsonValue(m_area));
    }
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIBanners_banners_inner::getArea() const {
    return m_area;
}
void OAIBanners_banners_inner::setArea(const QString &area) {
    m_area = area;
    m_area_isSet = true;
}

bool OAIBanners_banners_inner::is_area_Set() const{
    return m_area_isSet;
}

bool OAIBanners_banners_inner::is_area_Valid() const{
    return m_area_isValid;
}

QString OAIBanners_banners_inner::getHtml() const {
    return m_html;
}
void OAIBanners_banners_inner::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIBanners_banners_inner::is_html_Set() const{
    return m_html_isSet;
}

bool OAIBanners_banners_inner::is_html_Valid() const{
    return m_html_isValid;
}

QString OAIBanners_banners_inner::getId() const {
    return m_id;
}
void OAIBanners_banners_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBanners_banners_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBanners_banners_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBanners_banners_inner::getName() const {
    return m_name;
}
void OAIBanners_banners_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBanners_banners_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBanners_banners_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIBanners_banners_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBanners_banners_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
