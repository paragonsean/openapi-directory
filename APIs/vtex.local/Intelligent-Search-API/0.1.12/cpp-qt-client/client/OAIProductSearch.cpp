/**
 * Intelligent Search API
 * >ℹ️ Onboarding guide  >  > Check the new [Search onboarding guide](https://developers.vtex.com/docs/guides/search-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API is from the [VTEX Intelligent Search](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/3qgT47zY08biLP3d5os3DG) solution, an alternative to the platform’s native search, as it assists the customer in their purchase journey, and it presents results since the first interaction with the search bar.    ## Index  - [Get list of the 10 most searched terms](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/top_searches)  - [Get list of suggested terms and attributes similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/autocomplete_suggestions)  - [Get attempt of correction of a misspelled term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/correction_search)  - [Get list of banners registered for query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/banners/-facets-)  - [Get list of suggested terms similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/search_suggestions)  - [Get list of products for a query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/product_search/-facets-)  - [Get list of the possible facets for a given query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/facets/-facets-)
 *
 * The version of the OpenAPI document: 0.1.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductSearch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductSearch::OAIProductSearch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductSearch::OAIProductSearch() {
    this->initializeModel();
}

OAIProductSearch::~OAIProductSearch() {}

void OAIProductSearch::initializeModel() {

    m_correction_isSet = false;
    m_correction_isValid = false;

    m_fuzzy_isSet = false;
    m_fuzzy_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_records_filtered_isSet = false;
    m_records_filtered_isValid = false;

    m_translated_isSet = false;
    m_translated_isValid = false;
}

void OAIProductSearch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductSearch::fromJsonObject(QJsonObject json) {

    m_correction_isValid = ::OpenAPI::fromJsonValue(m_correction, json[QString("correction")]);
    m_correction_isSet = !json[QString("correction")].isNull() && m_correction_isValid;

    m_fuzzy_isValid = ::OpenAPI::fromJsonValue(m_fuzzy, json[QString("fuzzy")]);
    m_fuzzy_isSet = !json[QString("fuzzy")].isNull() && m_fuzzy_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_records_filtered_isValid = ::OpenAPI::fromJsonValue(m_records_filtered, json[QString("recordsFiltered")]);
    m_records_filtered_isSet = !json[QString("recordsFiltered")].isNull() && m_records_filtered_isValid;

    m_translated_isValid = ::OpenAPI::fromJsonValue(m_translated, json[QString("translated")]);
    m_translated_isSet = !json[QString("translated")].isNull() && m_translated_isValid;
}

QString OAIProductSearch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductSearch::asJsonObject() const {
    QJsonObject obj;
    if (m_correction.isSet()) {
        obj.insert(QString("correction"), ::OpenAPI::toJsonValue(m_correction));
    }
    if (m_fuzzy_isSet) {
        obj.insert(QString("fuzzy"), ::OpenAPI::toJsonValue(m_fuzzy));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_records_filtered_isSet) {
        obj.insert(QString("recordsFiltered"), ::OpenAPI::toJsonValue(m_records_filtered));
    }
    if (m_translated_isSet) {
        obj.insert(QString("translated"), ::OpenAPI::toJsonValue(m_translated));
    }
    return obj;
}

OAIProductSearch_correction OAIProductSearch::getCorrection() const {
    return m_correction;
}
void OAIProductSearch::setCorrection(const OAIProductSearch_correction &correction) {
    m_correction = correction;
    m_correction_isSet = true;
}

bool OAIProductSearch::is_correction_Set() const{
    return m_correction_isSet;
}

bool OAIProductSearch::is_correction_Valid() const{
    return m_correction_isValid;
}

QString OAIProductSearch::getFuzzy() const {
    return m_fuzzy;
}
void OAIProductSearch::setFuzzy(const QString &fuzzy) {
    m_fuzzy = fuzzy;
    m_fuzzy_isSet = true;
}

bool OAIProductSearch::is_fuzzy_Set() const{
    return m_fuzzy_isSet;
}

bool OAIProductSearch::is_fuzzy_Valid() const{
    return m_fuzzy_isValid;
}

QString OAIProductSearch::getROperator() const {
    return m_r_operator;
}
void OAIProductSearch::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIProductSearch::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIProductSearch::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QList<OAIObject> OAIProductSearch::getProducts() const {
    return m_products;
}
void OAIProductSearch::setProducts(const QList<OAIObject> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAIProductSearch::is_products_Set() const{
    return m_products_isSet;
}

bool OAIProductSearch::is_products_Valid() const{
    return m_products_isValid;
}

double OAIProductSearch::getRecordsFiltered() const {
    return m_records_filtered;
}
void OAIProductSearch::setRecordsFiltered(const double &records_filtered) {
    m_records_filtered = records_filtered;
    m_records_filtered_isSet = true;
}

bool OAIProductSearch::is_records_filtered_Set() const{
    return m_records_filtered_isSet;
}

bool OAIProductSearch::is_records_filtered_Valid() const{
    return m_records_filtered_isValid;
}

bool OAIProductSearch::isTranslated() const {
    return m_translated;
}
void OAIProductSearch::setTranslated(const bool &translated) {
    m_translated = translated;
    m_translated_isSet = true;
}

bool OAIProductSearch::is_translated_Set() const{
    return m_translated_isSet;
}

bool OAIProductSearch::is_translated_Valid() const{
    return m_translated_isValid;
}

bool OAIProductSearch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_correction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuzzy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_records_filtered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductSearch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
