/**
 * Intelligent Search API
 * >ℹ️ Onboarding guide  >  > Check the new [Search onboarding guide](https://developers.vtex.com/docs/guides/search-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API is from the [VTEX Intelligent Search](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/3qgT47zY08biLP3d5os3DG) solution, an alternative to the platform’s native search, as it assists the customer in their purchase journey, and it presents results since the first interaction with the search bar.    ## Index  - [Get list of the 10 most searched terms](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/top_searches)  - [Get list of suggested terms and attributes similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/autocomplete_suggestions)  - [Get attempt of correction of a misspelled term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/correction_search)  - [Get list of banners registered for query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/banners/-facets-)  - [Get list of suggested terms similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/search_suggestions)  - [Get list of products for a query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/product_search/-facets-)  - [Get list of the possible facets for a given query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/facets/-facets-)
 *
 * The version of the OpenAPI document: 0.1.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutocompleteSearchSuggestions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutocompleteSearchSuggestions::OAIAutocompleteSearchSuggestions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutocompleteSearchSuggestions::OAIAutocompleteSearchSuggestions() {
    this->initializeModel();
}

OAIAutocompleteSearchSuggestions::~OAIAutocompleteSearchSuggestions() {}

void OAIAutocompleteSearchSuggestions::initializeModel() {

    m_searches_isSet = false;
    m_searches_isValid = false;
}

void OAIAutocompleteSearchSuggestions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutocompleteSearchSuggestions::fromJsonObject(QJsonObject json) {

    m_searches_isValid = ::OpenAPI::fromJsonValue(m_searches, json[QString("searches")]);
    m_searches_isSet = !json[QString("searches")].isNull() && m_searches_isValid;
}

QString OAIAutocompleteSearchSuggestions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutocompleteSearchSuggestions::asJsonObject() const {
    QJsonObject obj;
    if (m_searches.size() > 0) {
        obj.insert(QString("searches"), ::OpenAPI::toJsonValue(m_searches));
    }
    return obj;
}

QList<OAIAutocompleteSearchSuggestions_searches_inner> OAIAutocompleteSearchSuggestions::getSearches() const {
    return m_searches;
}
void OAIAutocompleteSearchSuggestions::setSearches(const QList<OAIAutocompleteSearchSuggestions_searches_inner> &searches) {
    m_searches = searches;
    m_searches_isSet = true;
}

bool OAIAutocompleteSearchSuggestions::is_searches_Set() const{
    return m_searches_isSet;
}

bool OAIAutocompleteSearchSuggestions::is_searches_Valid() const{
    return m_searches_isValid;
}

bool OAIAutocompleteSearchSuggestions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_searches.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutocompleteSearchSuggestions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
