/**
 * Intelligent Search API
 * >ℹ️ Onboarding guide  >  > Check the new [Search onboarding guide](https://developers.vtex.com/docs/guides/search-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API is from the [VTEX Intelligent Search](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/3qgT47zY08biLP3d5os3DG) solution, an alternative to the platform’s native search, as it assists the customer in their purchase journey, and it presents results since the first interaction with the search bar.    ## Index  - [Get list of the 10 most searched terms](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/top_searches)  - [Get list of suggested terms and attributes similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/autocomplete_suggestions)  - [Get attempt of correction of a misspelled term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/correction_search)  - [Get list of banners registered for query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/banners/-facets-)  - [Get list of suggested terms similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/search_suggestions)  - [Get list of products for a query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/product_search/-facets-)  - [Get list of the possible facets for a given query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/facets/-facets-)
 *
 * The version of the OpenAPI document: 0.1.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFacets::OAIFacets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFacets::OAIFacets() {
    this->initializeModel();
}

OAIFacets::~OAIFacets() {}

void OAIFacets::initializeModel() {

    m_breadcrumb_isSet = false;
    m_breadcrumb_isValid = false;

    m_facets_isSet = false;
    m_facets_isValid = false;

    m_query_args_isSet = false;
    m_query_args_isValid = false;

    m_sampling_isSet = false;
    m_sampling_isValid = false;
}

void OAIFacets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFacets::fromJsonObject(QJsonObject json) {

    m_breadcrumb_isValid = ::OpenAPI::fromJsonValue(m_breadcrumb, json[QString("breadcrumb")]);
    m_breadcrumb_isSet = !json[QString("breadcrumb")].isNull() && m_breadcrumb_isValid;

    m_facets_isValid = ::OpenAPI::fromJsonValue(m_facets, json[QString("facets")]);
    m_facets_isSet = !json[QString("facets")].isNull() && m_facets_isValid;

    m_query_args_isValid = ::OpenAPI::fromJsonValue(m_query_args, json[QString("queryArgs")]);
    m_query_args_isSet = !json[QString("queryArgs")].isNull() && m_query_args_isValid;

    m_sampling_isValid = ::OpenAPI::fromJsonValue(m_sampling, json[QString("sampling")]);
    m_sampling_isSet = !json[QString("sampling")].isNull() && m_sampling_isValid;
}

QString OAIFacets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFacets::asJsonObject() const {
    QJsonObject obj;
    if (m_breadcrumb.size() > 0) {
        obj.insert(QString("breadcrumb"), ::OpenAPI::toJsonValue(m_breadcrumb));
    }
    if (m_facets.size() > 0) {
        obj.insert(QString("facets"), ::OpenAPI::toJsonValue(m_facets));
    }
    if (m_query_args.isSet()) {
        obj.insert(QString("queryArgs"), ::OpenAPI::toJsonValue(m_query_args));
    }
    if (m_sampling_isSet) {
        obj.insert(QString("sampling"), ::OpenAPI::toJsonValue(m_sampling));
    }
    return obj;
}

QList<OAIFacets_breadcrumb_inner> OAIFacets::getBreadcrumb() const {
    return m_breadcrumb;
}
void OAIFacets::setBreadcrumb(const QList<OAIFacets_breadcrumb_inner> &breadcrumb) {
    m_breadcrumb = breadcrumb;
    m_breadcrumb_isSet = true;
}

bool OAIFacets::is_breadcrumb_Set() const{
    return m_breadcrumb_isSet;
}

bool OAIFacets::is_breadcrumb_Valid() const{
    return m_breadcrumb_isValid;
}

QList<OAIFacets_facets_inner> OAIFacets::getFacets() const {
    return m_facets;
}
void OAIFacets::setFacets(const QList<OAIFacets_facets_inner> &facets) {
    m_facets = facets;
    m_facets_isSet = true;
}

bool OAIFacets::is_facets_Set() const{
    return m_facets_isSet;
}

bool OAIFacets::is_facets_Valid() const{
    return m_facets_isValid;
}

OAIFacets_queryArgs OAIFacets::getQueryArgs() const {
    return m_query_args;
}
void OAIFacets::setQueryArgs(const OAIFacets_queryArgs &query_args) {
    m_query_args = query_args;
    m_query_args_isSet = true;
}

bool OAIFacets::is_query_args_Set() const{
    return m_query_args_isSet;
}

bool OAIFacets::is_query_args_Valid() const{
    return m_query_args_isValid;
}

bool OAIFacets::isSampling() const {
    return m_sampling;
}
void OAIFacets::setSampling(const bool &sampling) {
    m_sampling = sampling;
    m_sampling_isSet = true;
}

bool OAIFacets::is_sampling_Set() const{
    return m_sampling_isSet;
}

bool OAIFacets::is_sampling_Valid() const{
    return m_sampling_isValid;
}

bool OAIFacets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_breadcrumb.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_facets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_args.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFacets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
