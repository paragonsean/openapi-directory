/**
 * Intelligent Search API
 * >ℹ️ Onboarding guide  >  > Check the new [Search onboarding guide](https://developers.vtex.com/docs/guides/search-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API is from the [VTEX Intelligent Search](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/3qgT47zY08biLP3d5os3DG) solution, an alternative to the platform’s native search, as it assists the customer in their purchase journey, and it presents results since the first interaction with the search bar.    ## Index  - [Get list of the 10 most searched terms](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/top_searches)  - [Get list of suggested terms and attributes similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/autocomplete_suggestions)  - [Get attempt of correction of a misspelled term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/correction_search)  - [Get list of banners registered for query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/banners/-facets-)  - [Get list of suggested terms similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/search_suggestions)  - [Get list of products for a query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/product_search/-facets-)  - [Get list of the possible facets for a given query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/facets/-facets-)
 *
 * The version of the OpenAPI document: 0.1.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductListPageApi_H
#define OAI_OAIProductListPageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBanners.h"
#include "OAICorrection.h"
#include "OAIError.h"
#include "OAIFacets.h"
#include "OAIProductSearch.h"
#include "OAISearchSuggestions.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductListPageApi : public QObject {
    Q_OBJECT

public:
    OAIProductListPageApi(const int timeOut = 0);
    ~OAIProductListPageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  facets QString [required]
    * @param[in]  query QString [optional]
    * @param[in]  locale QString [optional]
    */
    virtual void bannersFacetsGet(const QString &facets, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  locale QString [optional]
    */
    virtual void correctionSearchGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  facets QString [required]
    * @param[in]  query QString [optional]
    * @param[in]  locale QString [optional]
    * @param[in]  hide_unavailable_items bool [optional]
    */
    virtual void facetsFacetsGet(const QString &facets, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &hide_unavailable_items = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  facets QString [required]
    * @param[in]  query QString [optional]
    * @param[in]  simulation_behavior QString [optional]
    * @param[in]  count double [optional]
    * @param[in]  page double [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  locale QString [optional]
    * @param[in]  hide_unavailable_items bool [optional]
    */
    virtual void productSearchFacetsGet(const QString &facets, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &simulation_behavior = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &count = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &hide_unavailable_items = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  locale QString [optional]
    */
    virtual void searchSuggestionsGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void bannersFacetsGetCallback(OAIHttpRequestWorker *worker);
    void correctionSearchGetCallback(OAIHttpRequestWorker *worker);
    void facetsFacetsGetCallback(OAIHttpRequestWorker *worker);
    void productSearchFacetsGetCallback(OAIHttpRequestWorker *worker);
    void searchSuggestionsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void bannersFacetsGetSignal(OAIBanners summary);
    void correctionSearchGetSignal(OAICorrection summary);
    void facetsFacetsGetSignal(OAIFacets summary);
    void productSearchFacetsGetSignal(OAIProductSearch summary);
    void searchSuggestionsGetSignal(OAISearchSuggestions summary);


    void bannersFacetsGetSignalFull(OAIHttpRequestWorker *worker, OAIBanners summary);
    void correctionSearchGetSignalFull(OAIHttpRequestWorker *worker, OAICorrection summary);
    void facetsFacetsGetSignalFull(OAIHttpRequestWorker *worker, OAIFacets summary);
    void productSearchFacetsGetSignalFull(OAIHttpRequestWorker *worker, OAIProductSearch summary);
    void searchSuggestionsGetSignalFull(OAIHttpRequestWorker *worker, OAISearchSuggestions summary);

    Q_DECL_DEPRECATED_X("Use bannersFacetsGetSignalError() instead")
    void bannersFacetsGetSignalE(OAIBanners summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bannersFacetsGetSignalError(OAIBanners summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use correctionSearchGetSignalError() instead")
    void correctionSearchGetSignalE(OAICorrection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void correctionSearchGetSignalError(OAICorrection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use facetsFacetsGetSignalError() instead")
    void facetsFacetsGetSignalE(OAIFacets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void facetsFacetsGetSignalError(OAIFacets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSearchFacetsGetSignalError() instead")
    void productSearchFacetsGetSignalE(OAIProductSearch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productSearchFacetsGetSignalError(OAIProductSearch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSuggestionsGetSignalError() instead")
    void searchSuggestionsGetSignalE(OAISearchSuggestions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSuggestionsGetSignalError(OAISearchSuggestions summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use bannersFacetsGetSignalErrorFull() instead")
    void bannersFacetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bannersFacetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use correctionSearchGetSignalErrorFull() instead")
    void correctionSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void correctionSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use facetsFacetsGetSignalErrorFull() instead")
    void facetsFacetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void facetsFacetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSearchFacetsGetSignalErrorFull() instead")
    void productSearchFacetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productSearchFacetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSuggestionsGetSignalErrorFull() instead")
    void searchSuggestionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSuggestionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
