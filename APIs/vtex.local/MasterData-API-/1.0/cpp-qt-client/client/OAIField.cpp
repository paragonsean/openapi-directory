/**
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIField::OAIField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIField::OAIField() {
    this->initializeModel();
}

OAIField::~OAIField() {}

void OAIField::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_is_filter_isSet = false;
    m_is_filter_isValid = false;

    m_is_internal_isSet = false;
    m_is_internal_isValid = false;

    m_is_nullable_isSet = false;
    m_is_nullable_isValid = false;

    m_is_searchable_isSet = false;
    m_is_searchable_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIField::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_is_filter_isValid = ::OpenAPI::fromJsonValue(m_is_filter, json[QString("isFilter")]);
    m_is_filter_isSet = !json[QString("isFilter")].isNull() && m_is_filter_isValid;

    m_is_internal_isValid = ::OpenAPI::fromJsonValue(m_is_internal, json[QString("isInternal")]);
    m_is_internal_isSet = !json[QString("isInternal")].isNull() && m_is_internal_isValid;

    m_is_nullable_isValid = ::OpenAPI::fromJsonValue(m_is_nullable, json[QString("isNullable")]);
    m_is_nullable_isSet = !json[QString("isNullable")].isNull() && m_is_nullable_isValid;

    m_is_searchable_isValid = ::OpenAPI::fromJsonValue(m_is_searchable, json[QString("isSearchable")]);
    m_is_searchable_isSet = !json[QString("isSearchable")].isNull() && m_is_searchable_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIField::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_is_filter_isSet) {
        obj.insert(QString("isFilter"), ::OpenAPI::toJsonValue(m_is_filter));
    }
    if (m_is_internal_isSet) {
        obj.insert(QString("isInternal"), ::OpenAPI::toJsonValue(m_is_internal));
    }
    if (m_is_nullable_isSet) {
        obj.insert(QString("isNullable"), ::OpenAPI::toJsonValue(m_is_nullable));
    }
    if (m_is_searchable_isSet) {
        obj.insert(QString("isSearchable"), ::OpenAPI::toJsonValue(m_is_searchable));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIField::getDisplayName() const {
    return m_display_name;
}
void OAIField::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIField::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIField::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIField::isIsFilter() const {
    return m_is_filter;
}
void OAIField::setIsFilter(const bool &is_filter) {
    m_is_filter = is_filter;
    m_is_filter_isSet = true;
}

bool OAIField::is_is_filter_Set() const{
    return m_is_filter_isSet;
}

bool OAIField::is_is_filter_Valid() const{
    return m_is_filter_isValid;
}

bool OAIField::isIsInternal() const {
    return m_is_internal;
}
void OAIField::setIsInternal(const bool &is_internal) {
    m_is_internal = is_internal;
    m_is_internal_isSet = true;
}

bool OAIField::is_is_internal_Set() const{
    return m_is_internal_isSet;
}

bool OAIField::is_is_internal_Valid() const{
    return m_is_internal_isValid;
}

bool OAIField::isIsNullable() const {
    return m_is_nullable;
}
void OAIField::setIsNullable(const bool &is_nullable) {
    m_is_nullable = is_nullable;
    m_is_nullable_isSet = true;
}

bool OAIField::is_is_nullable_Set() const{
    return m_is_nullable_isSet;
}

bool OAIField::is_is_nullable_Valid() const{
    return m_is_nullable_isValid;
}

bool OAIField::isIsSearchable() const {
    return m_is_searchable;
}
void OAIField::setIsSearchable(const bool &is_searchable) {
    m_is_searchable = is_searchable;
    m_is_searchable_isSet = true;
}

bool OAIField::is_is_searchable_Set() const{
    return m_is_searchable_isSet;
}

bool OAIField::is_is_searchable_Valid() const{
    return m_is_searchable_isValid;
}

QString OAIField::getName() const {
    return m_name;
}
void OAIField::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIField::is_name_Set() const{
    return m_name_isSet;
}

bool OAIField::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIField::getType() const {
    return m_type;
}
void OAIField::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIField::is_type_Set() const{
    return m_type_isSet;
}

bool OAIField::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_internal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_nullable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_searchable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_display_name_isValid && m_is_filter_isValid && m_is_internal_isValid && m_is_nullable_isValid && m_is_searchable_isValid && m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
