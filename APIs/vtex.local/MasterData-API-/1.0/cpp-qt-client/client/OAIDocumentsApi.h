/**
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDocumentsApi_H
#define OAI_OAIDocumentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreatenewdocument.h"
#include "OAIObject.h"
#include "OAIUsingfilters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDocumentsApi : public QObject {
    Q_OBJECT

public:
    OAIDocumentsApi(const int timeOut = 0);
    ~OAIDocumentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  acronym QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void createnewdocument(const QString &accept, const QString &acronym, const OAIObject &body);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  acronym QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void createorupdateentiredocument(const QString &accept, const QString &acronym, const OAIObject &body);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  acronym QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void createorupdatepartialdocument(const QString &accept, const QString &acronym, const OAIObject &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  acronym QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deletedocument(const QString &content_type, const QString &accept, const QString &acronym, const QString &id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  acronym QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getdocument(const QString &content_type, const QString &accept, const QString &acronym, const QString &id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  acronym QString [required]
    * @param[in]  id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void updateentiredocument(const QString &accept, const QString &acronym, const QString &id, const OAIObject &body);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  acronym QString [required]
    * @param[in]  id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void updatepartialdocument(const QString &accept, const QString &acronym, const QString &id, const OAIObject &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createnewdocumentCallback(OAIHttpRequestWorker *worker);
    void createorupdateentiredocumentCallback(OAIHttpRequestWorker *worker);
    void createorupdatepartialdocumentCallback(OAIHttpRequestWorker *worker);
    void deletedocumentCallback(OAIHttpRequestWorker *worker);
    void getdocumentCallback(OAIHttpRequestWorker *worker);
    void updateentiredocumentCallback(OAIHttpRequestWorker *worker);
    void updatepartialdocumentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createnewdocumentSignal(OAICreatenewdocument summary);
    void createorupdateentiredocumentSignal();
    void createorupdatepartialdocumentSignal();
    void deletedocumentSignal();
    void getdocumentSignal(OAIUsingfilters summary);
    void updateentiredocumentSignal();
    void updatepartialdocumentSignal();


    void createnewdocumentSignalFull(OAIHttpRequestWorker *worker, OAICreatenewdocument summary);
    void createorupdateentiredocumentSignalFull(OAIHttpRequestWorker *worker);
    void createorupdatepartialdocumentSignalFull(OAIHttpRequestWorker *worker);
    void deletedocumentSignalFull(OAIHttpRequestWorker *worker);
    void getdocumentSignalFull(OAIHttpRequestWorker *worker, OAIUsingfilters summary);
    void updateentiredocumentSignalFull(OAIHttpRequestWorker *worker);
    void updatepartialdocumentSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createnewdocumentSignalError() instead")
    void createnewdocumentSignalE(OAICreatenewdocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createnewdocumentSignalError(OAICreatenewdocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createorupdateentiredocumentSignalError() instead")
    void createorupdateentiredocumentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createorupdateentiredocumentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createorupdatepartialdocumentSignalError() instead")
    void createorupdatepartialdocumentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createorupdatepartialdocumentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletedocumentSignalError() instead")
    void deletedocumentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletedocumentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getdocumentSignalError() instead")
    void getdocumentSignalE(OAIUsingfilters summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getdocumentSignalError(OAIUsingfilters summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateentiredocumentSignalError() instead")
    void updateentiredocumentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateentiredocumentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatepartialdocumentSignalError() instead")
    void updatepartialdocumentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updatepartialdocumentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createnewdocumentSignalErrorFull() instead")
    void createnewdocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createnewdocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createorupdateentiredocumentSignalErrorFull() instead")
    void createorupdateentiredocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createorupdateentiredocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createorupdatepartialdocumentSignalErrorFull() instead")
    void createorupdatepartialdocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createorupdatepartialdocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletedocumentSignalErrorFull() instead")
    void deletedocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletedocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getdocumentSignalErrorFull() instead")
    void getdocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getdocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateentiredocumentSignalErrorFull() instead")
    void updateentiredocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateentiredocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatepartialdocumentSignalErrorFull() instead")
    void updatepartialdocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatepartialdocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
