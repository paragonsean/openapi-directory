/**
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutscoresRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutscoresRequest::OAIPutscoresRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutscoresRequest::OAIPutscoresRequest() {
    this->initializeModel();
}

OAIPutscoresRequest::~OAIPutscoresRequest() {}

void OAIPutscoresRequest::initializeModel() {

    m_field_isSet = false;
    m_field_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_point_isSet = false;
    m_point_isValid = false;

    m_until_isSet = false;
    m_until_isValid = false;
}

void OAIPutscoresRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutscoresRequest::fromJsonObject(QJsonObject json) {

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_point_isValid = ::OpenAPI::fromJsonValue(m_point, json[QString("point")]);
    m_point_isSet = !json[QString("point")].isNull() && m_point_isValid;

    m_until_isValid = ::OpenAPI::fromJsonValue(m_until, json[QString("until")]);
    m_until_isSet = !json[QString("until")].isNull() && m_until_isValid;
}

QString OAIPutscoresRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutscoresRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_point_isSet) {
        obj.insert(QString("point"), ::OpenAPI::toJsonValue(m_point));
    }
    if (m_until_isSet) {
        obj.insert(QString("until"), ::OpenAPI::toJsonValue(m_until));
    }
    return obj;
}

QString OAIPutscoresRequest::getField() const {
    return m_field;
}
void OAIPutscoresRequest::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIPutscoresRequest::is_field_Set() const{
    return m_field_isSet;
}

bool OAIPutscoresRequest::is_field_Valid() const{
    return m_field_isValid;
}

QString OAIPutscoresRequest::getKey() const {
    return m_key;
}
void OAIPutscoresRequest::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIPutscoresRequest::is_key_Set() const{
    return m_key_isSet;
}

bool OAIPutscoresRequest::is_key_Valid() const{
    return m_key_isValid;
}

qint32 OAIPutscoresRequest::getPoint() const {
    return m_point;
}
void OAIPutscoresRequest::setPoint(const qint32 &point) {
    m_point = point;
    m_point_isSet = true;
}

bool OAIPutscoresRequest::is_point_Set() const{
    return m_point_isSet;
}

bool OAIPutscoresRequest::is_point_Valid() const{
    return m_point_isValid;
}

QString OAIPutscoresRequest::getUntil() const {
    return m_until;
}
void OAIPutscoresRequest::setUntil(const QString &until) {
    m_until = until;
    m_until_isSet = true;
}

bool OAIPutscoresRequest::is_until_Set() const{
    return m_until_isSet;
}

bool OAIPutscoresRequest::is_until_Valid() const{
    return m_until_isValid;
}

bool OAIPutscoresRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_until_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutscoresRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_isValid && m_key_isValid && m_point_isValid && m_until_isValid && true;
}

} // namespace OpenAPI
