/**
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateorupdateentiredocumentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateorupdateentiredocumentRequest::OAICreateorupdateentiredocumentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateorupdateentiredocumentRequest::OAICreateorupdateentiredocumentRequest() {
    this->initializeModel();
}

OAICreateorupdateentiredocumentRequest::~OAICreateorupdateentiredocumentRequest() {}

void OAICreateorupdateentiredocumentRequest::initializeModel() {

    m_boolean_isSet = false;
    m_boolean_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_decimal_isSet = false;
    m_decimal_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_integer_isSet = false;
    m_integer_isValid = false;

    m_r_long_isSet = false;
    m_r_long_isValid = false;

    m_percent_isSet = false;
    m_percent_isValid = false;

    m_relationship_isSet = false;
    m_relationship_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_varchar10_isSet = false;
    m_varchar10_isValid = false;

    m_varchar100_isSet = false;
    m_varchar100_isValid = false;

    m_varchar50_isSet = false;
    m_varchar50_isValid = false;

    m_varchar750_isSet = false;
    m_varchar750_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAICreateorupdateentiredocumentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateorupdateentiredocumentRequest::fromJsonObject(QJsonObject json) {

    m_boolean_isValid = ::OpenAPI::fromJsonValue(m_boolean, json[QString("Boolean")]);
    m_boolean_isSet = !json[QString("Boolean")].isNull() && m_boolean_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("Currency")]);
    m_currency_isSet = !json[QString("Currency")].isNull() && m_currency_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("Date_Time")]);
    m_date_time_isSet = !json[QString("Date_Time")].isNull() && m_date_time_isValid;

    m_decimal_isValid = ::OpenAPI::fromJsonValue(m_decimal, json[QString("Decimal")]);
    m_decimal_isSet = !json[QString("Decimal")].isNull() && m_decimal_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_integer_isValid = ::OpenAPI::fromJsonValue(m_integer, json[QString("Integer")]);
    m_integer_isSet = !json[QString("Integer")].isNull() && m_integer_isValid;

    m_r_long_isValid = ::OpenAPI::fromJsonValue(m_r_long, json[QString("Long")]);
    m_r_long_isSet = !json[QString("Long")].isNull() && m_r_long_isValid;

    m_percent_isValid = ::OpenAPI::fromJsonValue(m_percent, json[QString("Percent")]);
    m_percent_isSet = !json[QString("Percent")].isNull() && m_percent_isValid;

    m_relationship_isValid = ::OpenAPI::fromJsonValue(m_relationship, json[QString("Relationship")]);
    m_relationship_isSet = !json[QString("Relationship")].isNull() && m_relationship_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("Time")]);
    m_time_isSet = !json[QString("Time")].isNull() && m_time_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("URL")]);
    m_url_isSet = !json[QString("URL")].isNull() && m_url_isValid;

    m_varchar10_isValid = ::OpenAPI::fromJsonValue(m_varchar10, json[QString("Varchar10")]);
    m_varchar10_isSet = !json[QString("Varchar10")].isNull() && m_varchar10_isValid;

    m_varchar100_isValid = ::OpenAPI::fromJsonValue(m_varchar100, json[QString("Varchar100")]);
    m_varchar100_isSet = !json[QString("Varchar100")].isNull() && m_varchar100_isValid;

    m_varchar50_isValid = ::OpenAPI::fromJsonValue(m_varchar50, json[QString("Varchar50")]);
    m_varchar50_isSet = !json[QString("Varchar50")].isNull() && m_varchar50_isValid;

    m_varchar750_isValid = ::OpenAPI::fromJsonValue(m_varchar750, json[QString("Varchar750")]);
    m_varchar750_isSet = !json[QString("Varchar750")].isNull() && m_varchar750_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAICreateorupdateentiredocumentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateorupdateentiredocumentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_boolean_isSet) {
        obj.insert(QString("Boolean"), ::OpenAPI::toJsonValue(m_boolean));
    }
    if (m_currency_isSet) {
        obj.insert(QString("Currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("Date_Time"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_decimal_isSet) {
        obj.insert(QString("Decimal"), ::OpenAPI::toJsonValue(m_decimal));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_integer_isSet) {
        obj.insert(QString("Integer"), ::OpenAPI::toJsonValue(m_integer));
    }
    if (m_r_long_isSet) {
        obj.insert(QString("Long"), ::OpenAPI::toJsonValue(m_r_long));
    }
    if (m_percent_isSet) {
        obj.insert(QString("Percent"), ::OpenAPI::toJsonValue(m_percent));
    }
    if (m_relationship_isSet) {
        obj.insert(QString("Relationship"), ::OpenAPI::toJsonValue(m_relationship));
    }
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_time_isSet) {
        obj.insert(QString("Time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_url_isSet) {
        obj.insert(QString("URL"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_varchar10_isSet) {
        obj.insert(QString("Varchar10"), ::OpenAPI::toJsonValue(m_varchar10));
    }
    if (m_varchar100_isSet) {
        obj.insert(QString("Varchar100"), ::OpenAPI::toJsonValue(m_varchar100));
    }
    if (m_varchar50_isSet) {
        obj.insert(QString("Varchar50"), ::OpenAPI::toJsonValue(m_varchar50));
    }
    if (m_varchar750_isSet) {
        obj.insert(QString("Varchar750"), ::OpenAPI::toJsonValue(m_varchar750));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

bool OAICreateorupdateentiredocumentRequest::isBoolean() const {
    return m_boolean;
}
void OAICreateorupdateentiredocumentRequest::setBoolean(const bool &boolean) {
    m_boolean = boolean;
    m_boolean_isSet = true;
}

bool OAICreateorupdateentiredocumentRequest::is_boolean_Set() const{
    return m_boolean_isSet;
}

bool OAICreateorupdateentiredocumentRequest::is_boolean_Valid() const{
    return m_boolean_isValid;
}

double OAICreateorupdateentiredocumentRequest::getCurrency() const {
    return m_currency;
}
void OAICreateorupdateentiredocumentRequest::setCurrency(const double &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICreateorupdateentiredocumentRequest::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICreateorupdateentiredocumentRequest::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAICreateorupdateentiredocumentRequest::getDate() const {
    return m_date;
}
void OAICreateorupdateentiredocumentRequest::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAICreateorupdateentiredocumentRequest::is_date_Set() const{
    return m_date_isSet;
}

bool OAICreateorupdateentiredocumentRequest::is_date_Valid() const{
    return m_date_isValid;
}

QString OAICreateorupdateentiredocumentRequest::getDateTime() const {
    return m_date_time;
}
void OAICreateorupdateentiredocumentRequest::setDateTime(const QString &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAICreateorupdateentiredocumentRequest::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAICreateorupdateentiredocumentRequest::is_date_time_Valid() const{
    return m_date_time_isValid;
}

double OAICreateorupdateentiredocumentRequest::getDecimal() const {
    return m_decimal;
}
void OAICreateorupdateentiredocumentRequest::setDecimal(const double &decimal) {
    m_decimal = decimal;
    m_decimal_isSet = true;
}

bool OAICreateorupdateentiredocumentRequest::is_decimal_Set() const{
    return m_decimal_isSet;
}

bool OAICreateorupdateentiredocumentRequest::is_decimal_Valid() const{
    return m_decimal_isValid;
}

QString OAICreateorupdateentiredocumentRequest::getEmail() const {
    return m_email;
}
void OAICreateorupdateentiredocumentRequest::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICreateorupdateentiredocumentRequest::is_email_Set() const{
    return m_email_isSet;
}

bool OAICreateorupdateentiredocumentRequest::is_email_Valid() const{
    return m_email_isValid;
}

qint32 OAICreateorupdateentiredocumentRequest::getInteger() const {
    return m_integer;
}
void OAICreateorupdateentiredocumentRequest::setInteger(const qint32 &integer) {
    m_integer = integer;
    m_integer_isSet = true;
}

bool OAICreateorupdateentiredocumentRequest::is_integer_Set() const{
    return m_integer_isSet;
}

bool OAICreateorupdateentiredocumentRequest::is_integer_Valid() const{
    return m_integer_isValid;
}

qint32 OAICreateorupdateentiredocumentRequest::getRLong() const {
    return m_r_long;
}
void OAICreateorupdateentiredocumentRequest::setRLong(const qint32 &r_long) {
    m_r_long = r_long;
    m_r_long_isSet = true;
}

bool OAICreateorupdateentiredocumentRequest::is_r_long_Set() const{
    return m_r_long_isSet;
}

bool OAICreateorupdateentiredocumentRequest::is_r_long_Valid() const{
    return m_r_long_isValid;
}

double OAICreateorupdateentiredocumentRequest::getPercent() const {
    return m_percent;
}
void OAICreateorupdateentiredocumentRequest::setPercent(const double &percent) {
    m_percent = percent;
    m_percent_isSet = true;
}

bool OAICreateorupdateentiredocumentRequest::is_percent_Set() const{
    return m_percent_isSet;
}

bool OAICreateorupdateentiredocumentRequest::is_percent_Valid() const{
    return m_percent_isValid;
}

QString OAICreateorupdateentiredocumentRequest::getRelationship() const {
    return m_relationship;
}
void OAICreateorupdateentiredocumentRequest::setRelationship(const QString &relationship) {
    m_relationship = relationship;
    m_relationship_isSet = true;
}

bool OAICreateorupdateentiredocumentRequest::is_relationship_Set() const{
    return m_relationship_isSet;
}

bool OAICreateorupdateentiredocumentRequest::is_relationship_Valid() const{
    return m_relationship_isValid;
}

QString OAICreateorupdateentiredocumentRequest::getText() const {
    return m_text;
}
void OAICreateorupdateentiredocumentRequest::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAICreateorupdateentiredocumentRequest::is_text_Set() const{
    return m_text_isSet;
}

bool OAICreateorupdateentiredocumentRequest::is_text_Valid() const{
    return m_text_isValid;
}

QString OAICreateorupdateentiredocumentRequest::getTime() const {
    return m_time;
}
void OAICreateorupdateentiredocumentRequest::setTime(const QString &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAICreateorupdateentiredocumentRequest::is_time_Set() const{
    return m_time_isSet;
}

bool OAICreateorupdateentiredocumentRequest::is_time_Valid() const{
    return m_time_isValid;
}

QString OAICreateorupdateentiredocumentRequest::getUrl() const {
    return m_url;
}
void OAICreateorupdateentiredocumentRequest::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICreateorupdateentiredocumentRequest::is_url_Set() const{
    return m_url_isSet;
}

bool OAICreateorupdateentiredocumentRequest::is_url_Valid() const{
    return m_url_isValid;
}

QString OAICreateorupdateentiredocumentRequest::getVarchar10() const {
    return m_varchar10;
}
void OAICreateorupdateentiredocumentRequest::setVarchar10(const QString &varchar10) {
    m_varchar10 = varchar10;
    m_varchar10_isSet = true;
}

bool OAICreateorupdateentiredocumentRequest::is_varchar10_Set() const{
    return m_varchar10_isSet;
}

bool OAICreateorupdateentiredocumentRequest::is_varchar10_Valid() const{
    return m_varchar10_isValid;
}

QString OAICreateorupdateentiredocumentRequest::getVarchar100() const {
    return m_varchar100;
}
void OAICreateorupdateentiredocumentRequest::setVarchar100(const QString &varchar100) {
    m_varchar100 = varchar100;
    m_varchar100_isSet = true;
}

bool OAICreateorupdateentiredocumentRequest::is_varchar100_Set() const{
    return m_varchar100_isSet;
}

bool OAICreateorupdateentiredocumentRequest::is_varchar100_Valid() const{
    return m_varchar100_isValid;
}

QString OAICreateorupdateentiredocumentRequest::getVarchar50() const {
    return m_varchar50;
}
void OAICreateorupdateentiredocumentRequest::setVarchar50(const QString &varchar50) {
    m_varchar50 = varchar50;
    m_varchar50_isSet = true;
}

bool OAICreateorupdateentiredocumentRequest::is_varchar50_Set() const{
    return m_varchar50_isSet;
}

bool OAICreateorupdateentiredocumentRequest::is_varchar50_Valid() const{
    return m_varchar50_isValid;
}

QString OAICreateorupdateentiredocumentRequest::getVarchar750() const {
    return m_varchar750;
}
void OAICreateorupdateentiredocumentRequest::setVarchar750(const QString &varchar750) {
    m_varchar750 = varchar750;
    m_varchar750_isSet = true;
}

bool OAICreateorupdateentiredocumentRequest::is_varchar750_Set() const{
    return m_varchar750_isSet;
}

bool OAICreateorupdateentiredocumentRequest::is_varchar750_Valid() const{
    return m_varchar750_isValid;
}

QString OAICreateorupdateentiredocumentRequest::getId() const {
    return m_id;
}
void OAICreateorupdateentiredocumentRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateorupdateentiredocumentRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateorupdateentiredocumentRequest::is_id_Valid() const{
    return m_id_isValid;
}

bool OAICreateorupdateentiredocumentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boolean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_varchar10_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_varchar100_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_varchar50_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_varchar750_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateorupdateentiredocumentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_boolean_isValid && m_currency_isValid && m_date_isValid && m_date_time_isValid && m_decimal_isValid && m_email_isValid && m_integer_isValid && m_r_long_isValid && m_percent_isValid && m_relationship_isValid && m_text_isValid && m_time_isValid && m_url_isValid && m_varchar10_isValid && m_varchar100_isValid && m_varchar50_isValid && m_varchar750_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
