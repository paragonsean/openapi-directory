/**
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetdataentityfields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetdataentityfields::OAIGetdataentityfields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetdataentityfields::OAIGetdataentityfields() {
    this->initializeModel();
}

OAIGetdataentityfields::~OAIGetdataentityfields() {}

void OAIGetdataentityfields::initializeModel() {

    m_acronym_isSet = false;
    m_acronym_isValid = false;

    m_allow_get_all_isSet = false;
    m_allow_get_all_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_primary_key_type_isSet = false;
    m_primary_key_type_isValid = false;
}

void OAIGetdataentityfields::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetdataentityfields::fromJsonObject(QJsonObject json) {

    m_acronym_isValid = ::OpenAPI::fromJsonValue(m_acronym, json[QString("acronym")]);
    m_acronym_isSet = !json[QString("acronym")].isNull() && m_acronym_isValid;

    m_allow_get_all_isValid = ::OpenAPI::fromJsonValue(m_allow_get_all, json[QString("allowGetAll")]);
    m_allow_get_all_isSet = !json[QString("allowGetAll")].isNull() && m_allow_get_all_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_primary_key_type_isValid = ::OpenAPI::fromJsonValue(m_primary_key_type, json[QString("primaryKeyType")]);
    m_primary_key_type_isSet = !json[QString("primaryKeyType")].isNull() && m_primary_key_type_isValid;
}

QString OAIGetdataentityfields::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetdataentityfields::asJsonObject() const {
    QJsonObject obj;
    if (m_acronym_isSet) {
        obj.insert(QString("acronym"), ::OpenAPI::toJsonValue(m_acronym));
    }
    if (m_allow_get_all_isSet) {
        obj.insert(QString("allowGetAll"), ::OpenAPI::toJsonValue(m_allow_get_all));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_primary_key_type_isSet) {
        obj.insert(QString("primaryKeyType"), ::OpenAPI::toJsonValue(m_primary_key_type));
    }
    return obj;
}

QString OAIGetdataentityfields::getAcronym() const {
    return m_acronym;
}
void OAIGetdataentityfields::setAcronym(const QString &acronym) {
    m_acronym = acronym;
    m_acronym_isSet = true;
}

bool OAIGetdataentityfields::is_acronym_Set() const{
    return m_acronym_isSet;
}

bool OAIGetdataentityfields::is_acronym_Valid() const{
    return m_acronym_isValid;
}

bool OAIGetdataentityfields::isAllowGetAll() const {
    return m_allow_get_all;
}
void OAIGetdataentityfields::setAllowGetAll(const bool &allow_get_all) {
    m_allow_get_all = allow_get_all;
    m_allow_get_all_isSet = true;
}

bool OAIGetdataentityfields::is_allow_get_all_Set() const{
    return m_allow_get_all_isSet;
}

bool OAIGetdataentityfields::is_allow_get_all_Valid() const{
    return m_allow_get_all_isValid;
}

QList<OAIField> OAIGetdataentityfields::getFields() const {
    return m_fields;
}
void OAIGetdataentityfields::setFields(const QList<OAIField> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIGetdataentityfields::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIGetdataentityfields::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAIGetdataentityfields::getName() const {
    return m_name;
}
void OAIGetdataentityfields::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetdataentityfields::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetdataentityfields::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetdataentityfields::getPrimaryKeyType() const {
    return m_primary_key_type;
}
void OAIGetdataentityfields::setPrimaryKeyType(const QString &primary_key_type) {
    m_primary_key_type = primary_key_type;
    m_primary_key_type_isSet = true;
}

bool OAIGetdataentityfields::is_primary_key_type_Set() const{
    return m_primary_key_type_isSet;
}

bool OAIGetdataentityfields::is_primary_key_type_Valid() const{
    return m_primary_key_type_isValid;
}

bool OAIGetdataentityfields::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acronym_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_get_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_key_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetdataentityfields::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_acronym_isValid && m_allow_get_all_isValid && m_fields_isValid && m_name_isValid && m_primary_key_type_isValid && true;
}

} // namespace OpenAPI
