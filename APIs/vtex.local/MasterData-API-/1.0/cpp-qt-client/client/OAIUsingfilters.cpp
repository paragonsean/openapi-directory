/**
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsingfilters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsingfilters::OAIUsingfilters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsingfilters::OAIUsingfilters() {
    this->initializeModel();
}

OAIUsingfilters::~OAIUsingfilters() {}

void OAIUsingfilters::initializeModel() {

    m_campo1_isSet = false;
    m_campo1_isValid = false;

    m_campo2_isSet = false;
    m_campo2_isValid = false;

    m_campo3_isSet = false;
    m_campo3_isValid = false;
}

void OAIUsingfilters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsingfilters::fromJsonObject(QJsonObject json) {

    m_campo1_isValid = ::OpenAPI::fromJsonValue(m_campo1, json[QString("campo1")]);
    m_campo1_isSet = !json[QString("campo1")].isNull() && m_campo1_isValid;

    m_campo2_isValid = ::OpenAPI::fromJsonValue(m_campo2, json[QString("campo2")]);
    m_campo2_isSet = !json[QString("campo2")].isNull() && m_campo2_isValid;

    m_campo3_isValid = ::OpenAPI::fromJsonValue(m_campo3, json[QString("campo3")]);
    m_campo3_isSet = !json[QString("campo3")].isNull() && m_campo3_isValid;
}

QString OAIUsingfilters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsingfilters::asJsonObject() const {
    QJsonObject obj;
    if (m_campo1_isSet) {
        obj.insert(QString("campo1"), ::OpenAPI::toJsonValue(m_campo1));
    }
    if (m_campo2_isSet) {
        obj.insert(QString("campo2"), ::OpenAPI::toJsonValue(m_campo2));
    }
    if (m_campo3_isSet) {
        obj.insert(QString("campo3"), ::OpenAPI::toJsonValue(m_campo3));
    }
    return obj;
}

QString OAIUsingfilters::getCampo1() const {
    return m_campo1;
}
void OAIUsingfilters::setCampo1(const QString &campo1) {
    m_campo1 = campo1;
    m_campo1_isSet = true;
}

bool OAIUsingfilters::is_campo1_Set() const{
    return m_campo1_isSet;
}

bool OAIUsingfilters::is_campo1_Valid() const{
    return m_campo1_isValid;
}

QString OAIUsingfilters::getCampo2() const {
    return m_campo2;
}
void OAIUsingfilters::setCampo2(const QString &campo2) {
    m_campo2 = campo2;
    m_campo2_isSet = true;
}

bool OAIUsingfilters::is_campo2_Set() const{
    return m_campo2_isSet;
}

bool OAIUsingfilters::is_campo2_Valid() const{
    return m_campo2_isValid;
}

qint32 OAIUsingfilters::getCampo3() const {
    return m_campo3;
}
void OAIUsingfilters::setCampo3(const qint32 &campo3) {
    m_campo3 = campo3;
    m_campo3_isSet = true;
}

bool OAIUsingfilters::is_campo3_Set() const{
    return m_campo3_isSet;
}

bool OAIUsingfilters::is_campo3_Valid() const{
    return m_campo3_isValid;
}

bool OAIUsingfilters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campo1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campo2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campo3_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsingfilters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_campo1_isValid && m_campo2_isValid && m_campo3_isValid && true;
}

} // namespace OpenAPI
