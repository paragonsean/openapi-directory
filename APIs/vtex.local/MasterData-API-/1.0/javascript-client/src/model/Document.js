/**
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DepartmentVisitedTag from './DepartmentVisitedTag';

/**
 * The Document model module.
 * @module model/Document
 * @version 1.0
 */
class Document {
    /**
     * Constructs a new <code>Document</code>.
     * @alias module:model/Document
     * @param accountId {String} 
     * @param accountName {String} 
     * @param carttag {String} 
     * @param checkouttag {String} 
     * @param dataEntityId {String} 
     * @param departmentVisitedTag {module:model/DepartmentVisitedTag} 
     * @param email {String} 
     * @param followers {Array.<String>} 
     * @param id {String} 
     * @param rclastsession {String} 
     * @param rclastsessiondate {String} 
     */
    constructor(accountId, accountName, carttag, checkouttag, dataEntityId, departmentVisitedTag, email, followers, id, rclastsession, rclastsessiondate) { 
        
        Document.initialize(this, accountId, accountName, carttag, checkouttag, dataEntityId, departmentVisitedTag, email, followers, id, rclastsession, rclastsessiondate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, accountName, carttag, checkouttag, dataEntityId, departmentVisitedTag, email, followers, id, rclastsession, rclastsessiondate) { 
        obj['accountId'] = accountId;
        obj['accountName'] = accountName;
        obj['carttag'] = carttag;
        obj['checkouttag'] = checkouttag;
        obj['dataEntityId'] = dataEntityId;
        obj['departmentVisitedTag'] = departmentVisitedTag;
        obj['email'] = email;
        obj['followers'] = followers;
        obj['id'] = id;
        obj['rclastsession'] = rclastsession;
        obj['rclastsessiondate'] = rclastsessiondate;
    }

    /**
     * Constructs a <code>Document</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Document} obj Optional instance to populate.
     * @return {module:model/Document} The populated <code>Document</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Document();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('accountName')) {
                obj['accountName'] = ApiClient.convertToType(data['accountName'], 'String');
            }
            if (data.hasOwnProperty('carttag')) {
                obj['carttag'] = ApiClient.convertToType(data['carttag'], 'String');
            }
            if (data.hasOwnProperty('checkouttag')) {
                obj['checkouttag'] = ApiClient.convertToType(data['checkouttag'], 'String');
            }
            if (data.hasOwnProperty('dataEntityId')) {
                obj['dataEntityId'] = ApiClient.convertToType(data['dataEntityId'], 'String');
            }
            if (data.hasOwnProperty('departmentVisitedTag')) {
                obj['departmentVisitedTag'] = DepartmentVisitedTag.constructFromObject(data['departmentVisitedTag']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('followers')) {
                obj['followers'] = ApiClient.convertToType(data['followers'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('rclastsession')) {
                obj['rclastsession'] = ApiClient.convertToType(data['rclastsession'], 'String');
            }
            if (data.hasOwnProperty('rclastsessiondate')) {
                obj['rclastsessiondate'] = ApiClient.convertToType(data['rclastsessiondate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Document</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Document</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Document.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['accountName'] && !(typeof data['accountName'] === 'string' || data['accountName'] instanceof String)) {
            throw new Error("Expected the field `accountName` to be a primitive type in the JSON string but got " + data['accountName']);
        }
        // ensure the json data is a string
        if (data['carttag'] && !(typeof data['carttag'] === 'string' || data['carttag'] instanceof String)) {
            throw new Error("Expected the field `carttag` to be a primitive type in the JSON string but got " + data['carttag']);
        }
        // ensure the json data is a string
        if (data['checkouttag'] && !(typeof data['checkouttag'] === 'string' || data['checkouttag'] instanceof String)) {
            throw new Error("Expected the field `checkouttag` to be a primitive type in the JSON string but got " + data['checkouttag']);
        }
        // ensure the json data is a string
        if (data['dataEntityId'] && !(typeof data['dataEntityId'] === 'string' || data['dataEntityId'] instanceof String)) {
            throw new Error("Expected the field `dataEntityId` to be a primitive type in the JSON string but got " + data['dataEntityId']);
        }
        // validate the optional field `departmentVisitedTag`
        if (data['departmentVisitedTag']) { // data not null
          DepartmentVisitedTag.validateJSON(data['departmentVisitedTag']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['followers'])) {
            throw new Error("Expected the field `followers` to be an array in the JSON data but got " + data['followers']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['rclastsession'] && !(typeof data['rclastsession'] === 'string' || data['rclastsession'] instanceof String)) {
            throw new Error("Expected the field `rclastsession` to be a primitive type in the JSON string but got " + data['rclastsession']);
        }
        // ensure the json data is a string
        if (data['rclastsessiondate'] && !(typeof data['rclastsessiondate'] === 'string' || data['rclastsessiondate'] instanceof String)) {
            throw new Error("Expected the field `rclastsessiondate` to be a primitive type in the JSON string but got " + data['rclastsessiondate']);
        }

        return true;
    }


}

Document.RequiredProperties = ["accountId", "accountName", "carttag", "checkouttag", "dataEntityId", "departmentVisitedTag", "email", "followers", "id", "rclastsession", "rclastsessiondate"];

/**
 * @member {String} accountId
 */
Document.prototype['accountId'] = undefined;

/**
 * @member {String} accountName
 */
Document.prototype['accountName'] = undefined;

/**
 * @member {String} carttag
 */
Document.prototype['carttag'] = undefined;

/**
 * @member {String} checkouttag
 */
Document.prototype['checkouttag'] = undefined;

/**
 * @member {String} dataEntityId
 */
Document.prototype['dataEntityId'] = undefined;

/**
 * @member {module:model/DepartmentVisitedTag} departmentVisitedTag
 */
Document.prototype['departmentVisitedTag'] = undefined;

/**
 * @member {String} email
 */
Document.prototype['email'] = undefined;

/**
 * 
 * @member {Array.<String>} followers
 */
Document.prototype['followers'] = undefined;

/**
 * @member {String} id
 */
Document.prototype['id'] = undefined;

/**
 * @member {String} rclastsession
 */
Document.prototype['rclastsession'] = undefined;

/**
 * @member {String} rclastsessiondate
 */
Document.prototype['rclastsessiondate'] = undefined;






export default Document;

