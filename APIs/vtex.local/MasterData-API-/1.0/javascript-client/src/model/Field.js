/**
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Field model module.
 * @module model/Field
 * @version 1.0
 */
class Field {
    /**
     * Constructs a new <code>Field</code>.
     * @alias module:model/Field
     * @param displayName {String} 
     * @param isFilter {Boolean} 
     * @param isInternal {Boolean} 
     * @param isNullable {Boolean} 
     * @param isSearchable {Boolean} 
     * @param name {String} 
     * @param type {String} 
     */
    constructor(displayName, isFilter, isInternal, isNullable, isSearchable, name, type) { 
        
        Field.initialize(this, displayName, isFilter, isInternal, isNullable, isSearchable, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, displayName, isFilter, isInternal, isNullable, isSearchable, name, type) { 
        obj['displayName'] = displayName;
        obj['isFilter'] = isFilter;
        obj['isInternal'] = isInternal;
        obj['isNullable'] = isNullable;
        obj['isSearchable'] = isSearchable;
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Field</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Field} obj Optional instance to populate.
     * @return {module:model/Field} The populated <code>Field</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Field();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('isFilter')) {
                obj['isFilter'] = ApiClient.convertToType(data['isFilter'], 'Boolean');
            }
            if (data.hasOwnProperty('isInternal')) {
                obj['isInternal'] = ApiClient.convertToType(data['isInternal'], 'Boolean');
            }
            if (data.hasOwnProperty('isNullable')) {
                obj['isNullable'] = ApiClient.convertToType(data['isNullable'], 'Boolean');
            }
            if (data.hasOwnProperty('isSearchable')) {
                obj['isSearchable'] = ApiClient.convertToType(data['isSearchable'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Field</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Field</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Field.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Field.RequiredProperties = ["displayName", "isFilter", "isInternal", "isNullable", "isSearchable", "name", "type"];

/**
 * @member {String} displayName
 */
Field.prototype['displayName'] = undefined;

/**
 * @member {Boolean} isFilter
 */
Field.prototype['isFilter'] = undefined;

/**
 * @member {Boolean} isInternal
 */
Field.prototype['isInternal'] = undefined;

/**
 * @member {Boolean} isNullable
 */
Field.prototype['isNullable'] = undefined;

/**
 * @member {Boolean} isSearchable
 */
Field.prototype['isSearchable'] = undefined;

/**
 * @member {String} name
 */
Field.prototype['name'] = undefined;

/**
 * @member {String} type
 */
Field.prototype['type'] = undefined;






export default Field;

