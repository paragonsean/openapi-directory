/**
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Document from './Document';

/**
 * The Getversion model module.
 * @module model/Getversion
 * @version 1.0
 */
class Getversion {
    /**
     * Constructs a new <code>Getversion</code>.
     * @alias module:model/Getversion
     * @param author {String} 
     * @param document {module:model/Document} 
     * @param id {String} 
     */
    constructor(author, document, id) { 
        
        Getversion.initialize(this, author, document, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, author, document, id) { 
        obj['author'] = author;
        obj['document'] = document;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>Getversion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Getversion} obj Optional instance to populate.
     * @return {module:model/Getversion} The populated <code>Getversion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Getversion();

            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('document')) {
                obj['document'] = Document.constructFromObject(data['document']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Getversion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Getversion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Getversion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['author'] && !(typeof data['author'] === 'string' || data['author'] instanceof String)) {
            throw new Error("Expected the field `author` to be a primitive type in the JSON string but got " + data['author']);
        }
        // validate the optional field `document`
        if (data['document']) { // data not null
          Document.validateJSON(data['document']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}

Getversion.RequiredProperties = ["author", "document", "id"];

/**
 * @member {String} author
 */
Getversion.prototype['author'] = undefined;

/**
 * @member {module:model/Document} document
 */
Getversion.prototype['document'] = undefined;

/**
 * @member {String} id
 */
Getversion.prototype['id'] = undefined;






export default Getversion;

