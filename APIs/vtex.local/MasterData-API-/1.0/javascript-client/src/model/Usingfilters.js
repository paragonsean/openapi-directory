/**
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Usingfilters model module.
 * @module model/Usingfilters
 * @version 1.0
 */
class Usingfilters {
    /**
     * Constructs a new <code>Usingfilters</code>.
     * @alias module:model/Usingfilters
     * @param campo1 {String} 
     * @param campo2 {String} 
     * @param campo3 {Number} 
     */
    constructor(campo1, campo2, campo3) { 
        
        Usingfilters.initialize(this, campo1, campo2, campo3);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, campo1, campo2, campo3) { 
        obj['campo1'] = campo1;
        obj['campo2'] = campo2;
        obj['campo3'] = campo3;
    }

    /**
     * Constructs a <code>Usingfilters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Usingfilters} obj Optional instance to populate.
     * @return {module:model/Usingfilters} The populated <code>Usingfilters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Usingfilters();

            if (data.hasOwnProperty('campo1')) {
                obj['campo1'] = ApiClient.convertToType(data['campo1'], 'String');
            }
            if (data.hasOwnProperty('campo2')) {
                obj['campo2'] = ApiClient.convertToType(data['campo2'], 'String');
            }
            if (data.hasOwnProperty('campo3')) {
                obj['campo3'] = ApiClient.convertToType(data['campo3'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Usingfilters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Usingfilters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Usingfilters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['campo1'] && !(typeof data['campo1'] === 'string' || data['campo1'] instanceof String)) {
            throw new Error("Expected the field `campo1` to be a primitive type in the JSON string but got " + data['campo1']);
        }
        // ensure the json data is a string
        if (data['campo2'] && !(typeof data['campo2'] === 'string' || data['campo2'] instanceof String)) {
            throw new Error("Expected the field `campo2` to be a primitive type in the JSON string but got " + data['campo2']);
        }

        return true;
    }


}

Usingfilters.RequiredProperties = ["campo1", "campo2", "campo3"];

/**
 * @member {String} campo1
 */
Usingfilters.prototype['campo1'] = undefined;

/**
 * @member {String} campo2
 */
Usingfilters.prototype['campo2'] = undefined;

/**
 * @member {Number} campo3
 */
Usingfilters.prototype['campo3'] = undefined;






export default Usingfilters;

