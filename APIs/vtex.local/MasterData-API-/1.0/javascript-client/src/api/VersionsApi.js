/**
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Getversion from '../model/Getversion';
import Listversion from '../model/Listversion';
import Putversion from '../model/Putversion';

/**
* Versions service.
* @module api/VersionsApi
* @version 1.0
*/
export default class VersionsApi {

    /**
    * Constructs a new VersionsApi. 
    * @alias module:api/VersionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getversion operation.
     * @callback module:api/VersionsApi~getversionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Getversion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get version
     * Returns the version of a document.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand 
     * @param {String} acronym Two letter word that identifies the data structure
     * @param {String} id Id of the document
     * @param {String} versionId Id of the version to get
     * @param {module:api/VersionsApi~getversionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Getversion}
     */
    getversion(contentType, accept, acronym, id, versionId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getversion");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getversion");
      }
      // verify the required parameter 'acronym' is set
      if (acronym === undefined || acronym === null) {
        throw new Error("Missing the required parameter 'acronym' when calling getversion");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getversion");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getversion");
      }

      let pathParams = {
        'acronym': acronym,
        'id': id,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Getversion;
      return this.apiClient.callApi(
        '/api/dataentities/{acronym}/documents/{id}/versions/{versionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listversions operation.
     * @callback module:api/VersionsApi~listversionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Listversion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List versions
     * Allows to list the versions of a document.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand 
     * @param {String} acronym Two letter word that identifies the data structure
     * @param {String} id Id of the document
     * @param {module:api/VersionsApi~listversionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Listversion>}
     */
    listversions(contentType, accept, acronym, id, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling listversions");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling listversions");
      }
      // verify the required parameter 'acronym' is set
      if (acronym === undefined || acronym === null) {
        throw new Error("Missing the required parameter 'acronym' when calling listversions");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listversions");
      }

      let pathParams = {
        'acronym': acronym,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Listversion];
      return this.apiClient.callApi(
        '/api/dataentities/{acronym}/documents/{id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putversion operation.
     * @callback module:api/VersionsApi~putversionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Putversion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put version
     * Updates document with version values.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand 
     * @param {String} acronym Two letter word that identifies the data structure
     * @param {String} id Id of the document
     * @param {String} versionId Id of the version to update
     * @param {module:api/VersionsApi~putversionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Putversion}
     */
    putversion(contentType, accept, acronym, id, versionId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling putversion");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling putversion");
      }
      // verify the required parameter 'acronym' is set
      if (acronym === undefined || acronym === null) {
        throw new Error("Missing the required parameter 'acronym' when calling putversion");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putversion");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling putversion");
      }

      let pathParams = {
        'acronym': acronym,
        'id': id,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Putversion;
      return this.apiClient.callApi(
        '/api/dataentities/{acronym}/documents/{id}/versions/{versionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
