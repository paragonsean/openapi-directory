/**
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Createnewdocument from '../model/Createnewdocument';
import Usingfilters from '../model/Usingfilters';

/**
* Documents service.
* @module api/DocumentsApi
* @version 1.0
*/
export default class DocumentsApi {

    /**
    * Constructs a new DocumentsApi. 
    * @alias module:api/DocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createnewdocument operation.
     * @callback module:api/DocumentsApi~createnewdocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Createnewdocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new document
     * Creates documents through a JSON object where the key is the name of the field.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand 
     * @param {String} acronym Identifies the kind of data
     * @param {Object.<String, Object>} body 
     * @param {module:api/DocumentsApi~createnewdocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Createnewdocument}
     */
    createnewdocument(accept, acronym, body, callback) {
      let postBody = body;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createnewdocument");
      }
      // verify the required parameter 'acronym' is set
      if (acronym === undefined || acronym === null) {
        throw new Error("Missing the required parameter 'acronym' when calling createnewdocument");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createnewdocument");
      }

      let pathParams = {
        'acronym': acronym
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Createnewdocument;
      return this.apiClient.callApi(
        '/api/dataentities/{acronym}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createorupdateentiredocument operation.
     * @callback module:api/DocumentsApi~createorupdateentiredocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update entire document
     * 
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand 
     * @param {String} acronym Identifies the kind of data
     * @param {Object.<String, Object>} body 
     * @param {module:api/DocumentsApi~createorupdateentiredocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createorupdateentiredocument(accept, acronym, body, callback) {
      let postBody = body;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createorupdateentiredocument");
      }
      // verify the required parameter 'acronym' is set
      if (acronym === undefined || acronym === null) {
        throw new Error("Missing the required parameter 'acronym' when calling createorupdateentiredocument");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createorupdateentiredocument");
      }

      let pathParams = {
        'acronym': acronym
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dataentities/{acronym}/documents', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createorupdatepartialdocument operation.
     * @callback module:api/DocumentsApi~createorupdatepartialdocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update partial document
     * 
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand 
     * @param {String} acronym Identifies the kind of data
     * @param {Object.<String, Object>} body 
     * @param {module:api/DocumentsApi~createorupdatepartialdocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createorupdatepartialdocument(accept, acronym, body, callback) {
      let postBody = body;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createorupdatepartialdocument");
      }
      // verify the required parameter 'acronym' is set
      if (acronym === undefined || acronym === null) {
        throw new Error("Missing the required parameter 'acronym' when calling createorupdatepartialdocument");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createorupdatepartialdocument");
      }

      let pathParams = {
        'acronym': acronym
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dataentities/{acronym}/documents', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletedocument operation.
     * @callback module:api/DocumentsApi~deletedocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete document
     * It allows to delete a document.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand 
     * @param {String} acronym Two letter word that identifies the data structure
     * @param {String} id Id of the document
     * @param {module:api/DocumentsApi~deletedocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletedocument(contentType, accept, acronym, id, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deletedocument");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deletedocument");
      }
      // verify the required parameter 'acronym' is set
      if (acronym === undefined || acronym === null) {
        throw new Error("Missing the required parameter 'acronym' when calling deletedocument");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletedocument");
      }

      let pathParams = {
        'acronym': acronym,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dataentities/{acronym}/documents/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getdocument operation.
     * @callback module:api/DocumentsApi~getdocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Usingfilters} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get document
     * Retrieves a document.    Assign the `_fields` parameter in the query string to retrieve the desired fields. If you want to return all the fields use `_fields=_all`.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand 
     * @param {String} acronym Two letter word that identifies the data structure
     * @param {String} id Id of the document
     * @param {module:api/DocumentsApi~getdocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Usingfilters}
     */
    getdocument(contentType, accept, acronym, id, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getdocument");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getdocument");
      }
      // verify the required parameter 'acronym' is set
      if (acronym === undefined || acronym === null) {
        throw new Error("Missing the required parameter 'acronym' when calling getdocument");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getdocument");
      }

      let pathParams = {
        'acronym': acronym,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Usingfilters;
      return this.apiClient.callApi(
        '/api/dataentities/{acronym}/documents/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateentiredocument operation.
     * @callback module:api/DocumentsApi~updateentiredocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update entire document
     * 
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand 
     * @param {String} acronym Two letter word that identifies the data structure
     * @param {String} id Id of the document
     * @param {Object.<String, Object>} body 
     * @param {module:api/DocumentsApi~updateentiredocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateentiredocument(accept, acronym, id, body, callback) {
      let postBody = body;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling updateentiredocument");
      }
      // verify the required parameter 'acronym' is set
      if (acronym === undefined || acronym === null) {
        throw new Error("Missing the required parameter 'acronym' when calling updateentiredocument");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateentiredocument");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateentiredocument");
      }

      let pathParams = {
        'acronym': acronym,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dataentities/{acronym}/documents/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatepartialdocument operation.
     * @callback module:api/DocumentsApi~updatepartialdocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update partial document
     * 
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand 
     * @param {String} acronym Two letter word that identifies the data structure
     * @param {String} id Id of the document
     * @param {Object.<String, Object>} body 
     * @param {module:api/DocumentsApi~updatepartialdocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updatepartialdocument(accept, acronym, id, body, callback) {
      let postBody = body;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling updatepartialdocument");
      }
      // verify the required parameter 'acronym' is set
      if (acronym === undefined || acronym === null) {
        throw new Error("Missing the required parameter 'acronym' when calling updatepartialdocument");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatepartialdocument");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatepartialdocument");
      }

      let pathParams = {
        'acronym': acronym,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dataentities/{acronym}/documents/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
