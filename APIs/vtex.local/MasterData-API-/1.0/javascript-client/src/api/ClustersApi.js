/**
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Clusters service.
* @module api/ClustersApi
* @version 1.0
*/
export default class ClustersApi {

    /**
    * Constructs a new ClustersApi. 
    * @alias module:api/ClustersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the validateDocumentbyClusters operation.
     * @callback module:api/ClustersApi~validateDocumentbyClustersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate Document by Clusters
     * 
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand 
     * @param {String} acronym Two letter word that identifies the data structure
     * @param {String} id Id of the document
     * @param {Array.<Object>} requestBody 
     * @param {module:api/ClustersApi~validateDocumentbyClustersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    validateDocumentbyClusters(accept, acronym, id, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling validateDocumentbyClusters");
      }
      // verify the required parameter 'acronym' is set
      if (acronym === undefined || acronym === null) {
        throw new Error("Missing the required parameter 'acronym' when calling validateDocumentbyClusters");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateDocumentbyClusters");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling validateDocumentbyClusters");
      }

      let pathParams = {
        'acronym': acronym,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dataentities/{acronym}/documents/{id}/clusters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
