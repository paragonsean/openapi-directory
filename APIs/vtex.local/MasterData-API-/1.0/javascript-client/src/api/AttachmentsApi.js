/**
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Attachments service.
* @module api/AttachmentsApi
* @version 1.0
*/
export default class AttachmentsApi {

    /**
    * Constructs a new AttachmentsApi. 
    * @alias module:api/AttachmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the retrieveattachment operation.
     * @callback module:api/AttachmentsApi~retrieveattachmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve attachment
     * Use this API to retrieve a file.    Be sure to include the file extension in the name. Like in this example:  ```  /dataentities/CL/documents/123/file/attachments/image.png  ```
     * @param {String} acronym Two letter word that identifies the data structure
     * @param {String} id Id of the document
     * @param {String} field Field to attach the file to, as described in admin
     * @param {String} fileName 
     * @param {module:api/AttachmentsApi~retrieveattachmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    retrieveattachment(acronym, id, field, fileName, callback) {
      let postBody = null;
      // verify the required parameter 'acronym' is set
      if (acronym === undefined || acronym === null) {
        throw new Error("Missing the required parameter 'acronym' when calling retrieveattachment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retrieveattachment");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling retrieveattachment");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling retrieveattachment");
      }

      let pathParams = {
        'acronym': acronym,
        'id': id,
        'field': field,
        'file-name': fileName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dataentities/{acronym}/documents/{id}/{field}/attachments/{file-name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveattachment operation.
     * @callback module:api/AttachmentsApi~saveattachmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save attachment
     * This API allows you to save a file in a field of type `File`.    When using in javascript, you must add the header `content-type` with value `multipart/form-data;`    You can upload more than one file. Just add a new field in the `form-data` with type `File`.
     * @param {String} acronym Two letter word that identifies the data structure
     * @param {String} id Id of the document
     * @param {String} field Field to attach the file to, as described in admin
     * @param {Array.<File>} file 
     * @param {module:api/AttachmentsApi~saveattachmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveattachment(acronym, id, field, file, callback) {
      let postBody = null;
      // verify the required parameter 'acronym' is set
      if (acronym === undefined || acronym === null) {
        throw new Error("Missing the required parameter 'acronym' when calling saveattachment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveattachment");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling saveattachment");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling saveattachment");
      }

      let pathParams = {
        'acronym': acronym,
        'id': id,
        'field': field
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': this.apiClient.buildCollectionParam(file, 'passthrough')
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dataentities/{acronym}/documents/{id}/{field}/attachments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
