/**
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Search service.
* @module api/SearchApi
* @version 1.0
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the searchdocuments operation.
     * @callback module:api/SearchApi~searchdocumentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search documents
     * Search documents by the query parameters described below.    > Avoid sending too many requests with wildcards (`*`) in the search parameters or that use the `keyword` parameter. This may lead to this endpoint being temporarily blocked for your account. If this happens you will receive an error with status code `503`.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand 
     * @param {String} rESTRange Range of documents to show
     * @param {String} acronym Identifies the kind of data
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'email,firstName,document')] Fields that will be returned by document
     * @param {String} [where = 'firstName is not null')] Specification of filters. As seen below
     * @param {String} [schema = '{{schema}}')] Enter with the name of the schema to filter documents by compatibility of the schema.
     * @param {String} [keyword = 'String to search')] String to search
     * @param {String} [sort = 'firstName ASC')] Use ASC value to sort ascending or DESC value to sort descending. 
     * @param {module:api/SearchApi~searchdocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchdocuments(contentType, accept, rESTRange, acronym, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling searchdocuments");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling searchdocuments");
      }
      // verify the required parameter 'rESTRange' is set
      if (rESTRange === undefined || rESTRange === null) {
        throw new Error("Missing the required parameter 'rESTRange' when calling searchdocuments");
      }
      // verify the required parameter 'acronym' is set
      if (acronym === undefined || acronym === null) {
        throw new Error("Missing the required parameter 'acronym' when calling searchdocuments");
      }

      let pathParams = {
        'acronym': acronym
      };
      let queryParams = {
        '_fields': opts['fields'],
        '_where': opts['where'],
        '_schema': opts['schema'],
        '_keyword': opts['keyword'],
        '_sort': opts['sort']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept,
        'REST-Range': rESTRange
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dataentities/{acronym}/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
