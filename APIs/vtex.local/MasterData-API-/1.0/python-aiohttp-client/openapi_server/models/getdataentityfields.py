# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_field import ModelField
from openapi_server import util


class Getdataentityfields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acronym: str=None, allow_get_all: bool=None, fields: List[ModelField]=None, name: str=None, primary_key_type: str=None):
        """Getdataentityfields - a model defined in OpenAPI

        :param acronym: The acronym of this Getdataentityfields.
        :param allow_get_all: The allow_get_all of this Getdataentityfields.
        :param fields: The fields of this Getdataentityfields.
        :param name: The name of this Getdataentityfields.
        :param primary_key_type: The primary_key_type of this Getdataentityfields.
        """
        self.openapi_types = {
            'acronym': str,
            'allow_get_all': bool,
            'fields': List[ModelField],
            'name': str,
            'primary_key_type': str
        }

        self.attribute_map = {
            'acronym': 'acronym',
            'allow_get_all': 'allowGetAll',
            'fields': 'fields',
            'name': 'name',
            'primary_key_type': 'primaryKeyType'
        }

        self._acronym = acronym
        self._allow_get_all = allow_get_all
        self._fields = fields
        self._name = name
        self._primary_key_type = primary_key_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Getdataentityfields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Getdataentityfields of this Getdataentityfields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acronym(self):
        """Gets the acronym of this Getdataentityfields.


        :return: The acronym of this Getdataentityfields.
        :rtype: str
        """
        return self._acronym

    @acronym.setter
    def acronym(self, acronym):
        """Sets the acronym of this Getdataentityfields.


        :param acronym: The acronym of this Getdataentityfields.
        :type acronym: str
        """
        if acronym is None:
            raise ValueError("Invalid value for `acronym`, must not be `None`")

        self._acronym = acronym

    @property
    def allow_get_all(self):
        """Gets the allow_get_all of this Getdataentityfields.


        :return: The allow_get_all of this Getdataentityfields.
        :rtype: bool
        """
        return self._allow_get_all

    @allow_get_all.setter
    def allow_get_all(self, allow_get_all):
        """Sets the allow_get_all of this Getdataentityfields.


        :param allow_get_all: The allow_get_all of this Getdataentityfields.
        :type allow_get_all: bool
        """
        if allow_get_all is None:
            raise ValueError("Invalid value for `allow_get_all`, must not be `None`")

        self._allow_get_all = allow_get_all

    @property
    def fields(self):
        """Gets the fields of this Getdataentityfields.

        

        :return: The fields of this Getdataentityfields.
        :rtype: List[ModelField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Getdataentityfields.

        

        :param fields: The fields of this Getdataentityfields.
        :type fields: List[ModelField]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def name(self):
        """Gets the name of this Getdataentityfields.


        :return: The name of this Getdataentityfields.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Getdataentityfields.


        :param name: The name of this Getdataentityfields.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def primary_key_type(self):
        """Gets the primary_key_type of this Getdataentityfields.


        :return: The primary_key_type of this Getdataentityfields.
        :rtype: str
        """
        return self._primary_key_type

    @primary_key_type.setter
    def primary_key_type(self, primary_key_type):
        """Sets the primary_key_type of this Getdataentityfields.


        :param primary_key_type: The primary_key_type of this Getdataentityfields.
        :type primary_key_type: str
        """
        if primary_key_type is None:
            raise ValueError("Invalid value for `primary_key_type`, must not be `None`")

        self._primary_key_type = primary_key_type
