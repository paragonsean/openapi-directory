# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scores import Scores
from openapi_server import util


class DepartmentVisitedTag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_value: str=None, scores: Scores=None):
        """DepartmentVisitedTag - a model defined in OpenAPI

        :param display_value: The display_value of this DepartmentVisitedTag.
        :param scores: The scores of this DepartmentVisitedTag.
        """
        self.openapi_types = {
            'display_value': str,
            'scores': Scores
        }

        self.attribute_map = {
            'display_value': 'DisplayValue',
            'scores': 'Scores'
        }

        self._display_value = display_value
        self._scores = scores

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DepartmentVisitedTag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DepartmentVisitedTag of this DepartmentVisitedTag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_value(self):
        """Gets the display_value of this DepartmentVisitedTag.


        :return: The display_value of this DepartmentVisitedTag.
        :rtype: str
        """
        return self._display_value

    @display_value.setter
    def display_value(self, display_value):
        """Sets the display_value of this DepartmentVisitedTag.


        :param display_value: The display_value of this DepartmentVisitedTag.
        :type display_value: str
        """
        if display_value is None:
            raise ValueError("Invalid value for `display_value`, must not be `None`")

        self._display_value = display_value

    @property
    def scores(self):
        """Gets the scores of this DepartmentVisitedTag.


        :return: The scores of this DepartmentVisitedTag.
        :rtype: Scores
        """
        return self._scores

    @scores.setter
    def scores(self, scores):
        """Sets the scores of this DepartmentVisitedTag.


        :param scores: The scores of this DepartmentVisitedTag.
        :type scores: Scores
        """
        if scores is None:
            raise ValueError("Invalid value for `scores`, must not be `None`")

        self._scores = scores
