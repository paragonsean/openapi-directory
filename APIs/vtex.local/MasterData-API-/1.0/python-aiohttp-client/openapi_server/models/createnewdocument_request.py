# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreatenewdocumentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boolean: bool=None, currency: float=None, _date: str=None, date_time: str=None, decimal: float=None, email: str=None, integer: int=None, long: int=None, percent: float=None, relationship: str=None, text: str=None, time: str=None, url: str=None, varchar10: str=None, varchar100: str=None, varchar50: str=None, varchar750: str=None):
        """CreatenewdocumentRequest - a model defined in OpenAPI

        :param boolean: The boolean of this CreatenewdocumentRequest.
        :param currency: The currency of this CreatenewdocumentRequest.
        :param _date: The _date of this CreatenewdocumentRequest.
        :param date_time: The date_time of this CreatenewdocumentRequest.
        :param decimal: The decimal of this CreatenewdocumentRequest.
        :param email: The email of this CreatenewdocumentRequest.
        :param integer: The integer of this CreatenewdocumentRequest.
        :param long: The long of this CreatenewdocumentRequest.
        :param percent: The percent of this CreatenewdocumentRequest.
        :param relationship: The relationship of this CreatenewdocumentRequest.
        :param text: The text of this CreatenewdocumentRequest.
        :param time: The time of this CreatenewdocumentRequest.
        :param url: The url of this CreatenewdocumentRequest.
        :param varchar10: The varchar10 of this CreatenewdocumentRequest.
        :param varchar100: The varchar100 of this CreatenewdocumentRequest.
        :param varchar50: The varchar50 of this CreatenewdocumentRequest.
        :param varchar750: The varchar750 of this CreatenewdocumentRequest.
        """
        self.openapi_types = {
            'boolean': bool,
            'currency': float,
            '_date': str,
            'date_time': str,
            'decimal': float,
            'email': str,
            'integer': int,
            'long': int,
            'percent': float,
            'relationship': str,
            'text': str,
            'time': str,
            'url': str,
            'varchar10': str,
            'varchar100': str,
            'varchar50': str,
            'varchar750': str
        }

        self.attribute_map = {
            'boolean': 'Boolean',
            'currency': 'Currency',
            '_date': 'Date',
            'date_time': 'Date_Time',
            'decimal': 'Decimal',
            'email': 'Email',
            'integer': 'Integer',
            'long': 'Long',
            'percent': 'Percent',
            'relationship': 'Relationship',
            'text': 'Text',
            'time': 'Time',
            'url': 'URL',
            'varchar10': 'Varchar10',
            'varchar100': 'Varchar100',
            'varchar50': 'Varchar50',
            'varchar750': 'Varchar750'
        }

        self._boolean = boolean
        self._currency = currency
        self.__date = _date
        self._date_time = date_time
        self._decimal = decimal
        self._email = email
        self._integer = integer
        self._long = long
        self._percent = percent
        self._relationship = relationship
        self._text = text
        self._time = time
        self._url = url
        self._varchar10 = varchar10
        self._varchar100 = varchar100
        self._varchar50 = varchar50
        self._varchar750 = varchar750

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatenewdocumentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatenewdocumentRequest of this CreatenewdocumentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boolean(self):
        """Gets the boolean of this CreatenewdocumentRequest.


        :return: The boolean of this CreatenewdocumentRequest.
        :rtype: bool
        """
        return self._boolean

    @boolean.setter
    def boolean(self, boolean):
        """Sets the boolean of this CreatenewdocumentRequest.


        :param boolean: The boolean of this CreatenewdocumentRequest.
        :type boolean: bool
        """
        if boolean is None:
            raise ValueError("Invalid value for `boolean`, must not be `None`")

        self._boolean = boolean

    @property
    def currency(self):
        """Gets the currency of this CreatenewdocumentRequest.


        :return: The currency of this CreatenewdocumentRequest.
        :rtype: float
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreatenewdocumentRequest.


        :param currency: The currency of this CreatenewdocumentRequest.
        :type currency: float
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def _date(self):
        """Gets the _date of this CreatenewdocumentRequest.


        :return: The _date of this CreatenewdocumentRequest.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this CreatenewdocumentRequest.


        :param _date: The _date of this CreatenewdocumentRequest.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def date_time(self):
        """Gets the date_time of this CreatenewdocumentRequest.


        :return: The date_time of this CreatenewdocumentRequest.
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this CreatenewdocumentRequest.


        :param date_time: The date_time of this CreatenewdocumentRequest.
        :type date_time: str
        """
        if date_time is None:
            raise ValueError("Invalid value for `date_time`, must not be `None`")

        self._date_time = date_time

    @property
    def decimal(self):
        """Gets the decimal of this CreatenewdocumentRequest.


        :return: The decimal of this CreatenewdocumentRequest.
        :rtype: float
        """
        return self._decimal

    @decimal.setter
    def decimal(self, decimal):
        """Sets the decimal of this CreatenewdocumentRequest.


        :param decimal: The decimal of this CreatenewdocumentRequest.
        :type decimal: float
        """
        if decimal is None:
            raise ValueError("Invalid value for `decimal`, must not be `None`")

        self._decimal = decimal

    @property
    def email(self):
        """Gets the email of this CreatenewdocumentRequest.


        :return: The email of this CreatenewdocumentRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreatenewdocumentRequest.


        :param email: The email of this CreatenewdocumentRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def integer(self):
        """Gets the integer of this CreatenewdocumentRequest.


        :return: The integer of this CreatenewdocumentRequest.
        :rtype: int
        """
        return self._integer

    @integer.setter
    def integer(self, integer):
        """Sets the integer of this CreatenewdocumentRequest.


        :param integer: The integer of this CreatenewdocumentRequest.
        :type integer: int
        """
        if integer is None:
            raise ValueError("Invalid value for `integer`, must not be `None`")

        self._integer = integer

    @property
    def long(self):
        """Gets the long of this CreatenewdocumentRequest.


        :return: The long of this CreatenewdocumentRequest.
        :rtype: int
        """
        return self._long

    @long.setter
    def long(self, long):
        """Sets the long of this CreatenewdocumentRequest.


        :param long: The long of this CreatenewdocumentRequest.
        :type long: int
        """
        if long is None:
            raise ValueError("Invalid value for `long`, must not be `None`")

        self._long = long

    @property
    def percent(self):
        """Gets the percent of this CreatenewdocumentRequest.


        :return: The percent of this CreatenewdocumentRequest.
        :rtype: float
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """Sets the percent of this CreatenewdocumentRequest.


        :param percent: The percent of this CreatenewdocumentRequest.
        :type percent: float
        """
        if percent is None:
            raise ValueError("Invalid value for `percent`, must not be `None`")

        self._percent = percent

    @property
    def relationship(self):
        """Gets the relationship of this CreatenewdocumentRequest.


        :return: The relationship of this CreatenewdocumentRequest.
        :rtype: str
        """
        return self._relationship

    @relationship.setter
    def relationship(self, relationship):
        """Sets the relationship of this CreatenewdocumentRequest.


        :param relationship: The relationship of this CreatenewdocumentRequest.
        :type relationship: str
        """
        if relationship is None:
            raise ValueError("Invalid value for `relationship`, must not be `None`")

        self._relationship = relationship

    @property
    def text(self):
        """Gets the text of this CreatenewdocumentRequest.


        :return: The text of this CreatenewdocumentRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this CreatenewdocumentRequest.


        :param text: The text of this CreatenewdocumentRequest.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def time(self):
        """Gets the time of this CreatenewdocumentRequest.


        :return: The time of this CreatenewdocumentRequest.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this CreatenewdocumentRequest.


        :param time: The time of this CreatenewdocumentRequest.
        :type time: str
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time

    @property
    def url(self):
        """Gets the url of this CreatenewdocumentRequest.


        :return: The url of this CreatenewdocumentRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CreatenewdocumentRequest.


        :param url: The url of this CreatenewdocumentRequest.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def varchar10(self):
        """Gets the varchar10 of this CreatenewdocumentRequest.


        :return: The varchar10 of this CreatenewdocumentRequest.
        :rtype: str
        """
        return self._varchar10

    @varchar10.setter
    def varchar10(self, varchar10):
        """Sets the varchar10 of this CreatenewdocumentRequest.


        :param varchar10: The varchar10 of this CreatenewdocumentRequest.
        :type varchar10: str
        """
        if varchar10 is None:
            raise ValueError("Invalid value for `varchar10`, must not be `None`")

        self._varchar10 = varchar10

    @property
    def varchar100(self):
        """Gets the varchar100 of this CreatenewdocumentRequest.


        :return: The varchar100 of this CreatenewdocumentRequest.
        :rtype: str
        """
        return self._varchar100

    @varchar100.setter
    def varchar100(self, varchar100):
        """Sets the varchar100 of this CreatenewdocumentRequest.


        :param varchar100: The varchar100 of this CreatenewdocumentRequest.
        :type varchar100: str
        """
        if varchar100 is None:
            raise ValueError("Invalid value for `varchar100`, must not be `None`")

        self._varchar100 = varchar100

    @property
    def varchar50(self):
        """Gets the varchar50 of this CreatenewdocumentRequest.


        :return: The varchar50 of this CreatenewdocumentRequest.
        :rtype: str
        """
        return self._varchar50

    @varchar50.setter
    def varchar50(self, varchar50):
        """Sets the varchar50 of this CreatenewdocumentRequest.


        :param varchar50: The varchar50 of this CreatenewdocumentRequest.
        :type varchar50: str
        """
        if varchar50 is None:
            raise ValueError("Invalid value for `varchar50`, must not be `None`")

        self._varchar50 = varchar50

    @property
    def varchar750(self):
        """Gets the varchar750 of this CreatenewdocumentRequest.


        :return: The varchar750 of this CreatenewdocumentRequest.
        :rtype: str
        """
        return self._varchar750

    @varchar750.setter
    def varchar750(self, varchar750):
        """Sets the varchar750 of this CreatenewdocumentRequest.


        :param varchar750: The varchar750 of this CreatenewdocumentRequest.
        :type varchar750: str
        """
        if varchar750 is None:
            raise ValueError("Invalid value for `varchar750`, must not be `None`")

        self._varchar750 = varchar750
