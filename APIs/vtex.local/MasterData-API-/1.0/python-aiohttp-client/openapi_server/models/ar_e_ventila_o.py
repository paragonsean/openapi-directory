# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArEVentilaO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: str=None, point: int=None, until: str=None):
        """ArEVentilaO - a model defined in OpenAPI

        :param _date: The _date of this ArEVentilaO.
        :param point: The point of this ArEVentilaO.
        :param until: The until of this ArEVentilaO.
        """
        self.openapi_types = {
            '_date': str,
            'point': int,
            'until': str
        }

        self.attribute_map = {
            '_date': 'Date',
            'point': 'Point',
            'until': 'Until'
        }

        self.__date = _date
        self._point = point
        self._until = until

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArEVentilaO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArEVentilaO of this ArEVentilaO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this ArEVentilaO.


        :return: The _date of this ArEVentilaO.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ArEVentilaO.


        :param _date: The _date of this ArEVentilaO.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def point(self):
        """Gets the point of this ArEVentilaO.


        :return: The point of this ArEVentilaO.
        :rtype: int
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this ArEVentilaO.


        :param point: The point of this ArEVentilaO.
        :type point: int
        """
        if point is None:
            raise ValueError("Invalid value for `point`, must not be `None`")

        self._point = point

    @property
    def until(self):
        """Gets the until of this ArEVentilaO.


        :return: The until of this ArEVentilaO.
        :rtype: str
        """
        return self._until

    @until.setter
    def until(self, until):
        """Sets the until of this ArEVentilaO.


        :param until: The until of this ArEVentilaO.
        :type until: str
        """
        if until is None:
            raise ValueError("Invalid value for `until`, must not be `None`")

        self._until = until
