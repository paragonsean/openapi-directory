# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document import Document
from openapi_server import util


class Getversion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, document: Document=None, id: str=None):
        """Getversion - a model defined in OpenAPI

        :param author: The author of this Getversion.
        :param document: The document of this Getversion.
        :param id: The id of this Getversion.
        """
        self.openapi_types = {
            'author': str,
            'document': Document,
            'id': str
        }

        self.attribute_map = {
            'author': 'author',
            'document': 'document',
            'id': 'id'
        }

        self._author = author
        self._document = document
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Getversion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Getversion of this Getversion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this Getversion.


        :return: The author of this Getversion.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Getversion.


        :param author: The author of this Getversion.
        :type author: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")

        self._author = author

    @property
    def document(self):
        """Gets the document of this Getversion.


        :return: The document of this Getversion.
        :rtype: Document
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this Getversion.


        :param document: The document of this Getversion.
        :type document: Document
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")

        self._document = document

    @property
    def id(self):
        """Gets the id of this Getversion.


        :return: The id of this Getversion.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Getversion.


        :param id: The id of this Getversion.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id
