# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Usingfilters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, campo1: str=None, campo2: str=None, campo3: int=None):
        """Usingfilters - a model defined in OpenAPI

        :param campo1: The campo1 of this Usingfilters.
        :param campo2: The campo2 of this Usingfilters.
        :param campo3: The campo3 of this Usingfilters.
        """
        self.openapi_types = {
            'campo1': str,
            'campo2': str,
            'campo3': int
        }

        self.attribute_map = {
            'campo1': 'campo1',
            'campo2': 'campo2',
            'campo3': 'campo3'
        }

        self._campo1 = campo1
        self._campo2 = campo2
        self._campo3 = campo3

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Usingfilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Usingfilters of this Usingfilters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def campo1(self):
        """Gets the campo1 of this Usingfilters.


        :return: The campo1 of this Usingfilters.
        :rtype: str
        """
        return self._campo1

    @campo1.setter
    def campo1(self, campo1):
        """Sets the campo1 of this Usingfilters.


        :param campo1: The campo1 of this Usingfilters.
        :type campo1: str
        """
        if campo1 is None:
            raise ValueError("Invalid value for `campo1`, must not be `None`")

        self._campo1 = campo1

    @property
    def campo2(self):
        """Gets the campo2 of this Usingfilters.


        :return: The campo2 of this Usingfilters.
        :rtype: str
        """
        return self._campo2

    @campo2.setter
    def campo2(self, campo2):
        """Sets the campo2 of this Usingfilters.


        :param campo2: The campo2 of this Usingfilters.
        :type campo2: str
        """
        if campo2 is None:
            raise ValueError("Invalid value for `campo2`, must not be `None`")

        self._campo2 = campo2

    @property
    def campo3(self):
        """Gets the campo3 of this Usingfilters.


        :return: The campo3 of this Usingfilters.
        :rtype: int
        """
        return self._campo3

    @campo3.setter
    def campo3(self, campo3):
        """Sets the campo3 of this Usingfilters.


        :param campo3: The campo3 of this Usingfilters.
        :type campo3: int
        """
        if campo3 is None:
            raise ValueError("Invalid value for `campo3`, must not be `None`")

        self._campo3 = campo3
