# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutscoresRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field: str=None, key: str=None, point: int=None, until: str=None):
        """PutscoresRequest - a model defined in OpenAPI

        :param _field: The _field of this PutscoresRequest.
        :param key: The key of this PutscoresRequest.
        :param point: The point of this PutscoresRequest.
        :param until: The until of this PutscoresRequest.
        """
        self.openapi_types = {
            '_field': str,
            'key': str,
            'point': int,
            'until': str
        }

        self.attribute_map = {
            '_field': 'field',
            'key': 'key',
            'point': 'point',
            'until': 'until'
        }

        self.__field = _field
        self._key = key
        self._point = point
        self._until = until

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutscoresRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutscoresRequest of this PutscoresRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self):
        """Gets the _field of this PutscoresRequest.


        :return: The _field of this PutscoresRequest.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this PutscoresRequest.


        :param _field: The _field of this PutscoresRequest.
        :type _field: str
        """
        if _field is None:
            raise ValueError("Invalid value for `_field`, must not be `None`")

        self.__field = _field

    @property
    def key(self):
        """Gets the key of this PutscoresRequest.


        :return: The key of this PutscoresRequest.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this PutscoresRequest.


        :param key: The key of this PutscoresRequest.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def point(self):
        """Gets the point of this PutscoresRequest.


        :return: The point of this PutscoresRequest.
        :rtype: int
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this PutscoresRequest.


        :param point: The point of this PutscoresRequest.
        :type point: int
        """
        if point is None:
            raise ValueError("Invalid value for `point`, must not be `None`")

        self._point = point

    @property
    def until(self):
        """Gets the until of this PutscoresRequest.


        :return: The until of this PutscoresRequest.
        :rtype: str
        """
        return self._until

    @until.setter
    def until(self, until):
        """Sets the until of this PutscoresRequest.


        :param until: The until of this PutscoresRequest.
        :type until: str
        """
        if until is None:
            raise ValueError("Invalid value for `until`, must not be `None`")

        self._until = until
