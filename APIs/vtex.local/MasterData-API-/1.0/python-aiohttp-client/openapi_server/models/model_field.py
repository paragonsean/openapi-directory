# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModelField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, is_filter: bool=None, is_internal: bool=None, is_nullable: bool=None, is_searchable: bool=None, name: str=None, type: str=None):
        """ModelField - a model defined in OpenAPI

        :param display_name: The display_name of this ModelField.
        :param is_filter: The is_filter of this ModelField.
        :param is_internal: The is_internal of this ModelField.
        :param is_nullable: The is_nullable of this ModelField.
        :param is_searchable: The is_searchable of this ModelField.
        :param name: The name of this ModelField.
        :param type: The type of this ModelField.
        """
        self.openapi_types = {
            'display_name': str,
            'is_filter': bool,
            'is_internal': bool,
            'is_nullable': bool,
            'is_searchable': bool,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'is_filter': 'isFilter',
            'is_internal': 'isInternal',
            'is_nullable': 'isNullable',
            'is_searchable': 'isSearchable',
            'name': 'name',
            'type': 'type'
        }

        self._display_name = display_name
        self._is_filter = is_filter
        self._is_internal = is_internal
        self._is_nullable = is_nullable
        self._is_searchable = is_searchable
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Field of this ModelField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this ModelField.


        :return: The display_name of this ModelField.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ModelField.


        :param display_name: The display_name of this ModelField.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def is_filter(self):
        """Gets the is_filter of this ModelField.


        :return: The is_filter of this ModelField.
        :rtype: bool
        """
        return self._is_filter

    @is_filter.setter
    def is_filter(self, is_filter):
        """Sets the is_filter of this ModelField.


        :param is_filter: The is_filter of this ModelField.
        :type is_filter: bool
        """
        if is_filter is None:
            raise ValueError("Invalid value for `is_filter`, must not be `None`")

        self._is_filter = is_filter

    @property
    def is_internal(self):
        """Gets the is_internal of this ModelField.


        :return: The is_internal of this ModelField.
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this ModelField.


        :param is_internal: The is_internal of this ModelField.
        :type is_internal: bool
        """
        if is_internal is None:
            raise ValueError("Invalid value for `is_internal`, must not be `None`")

        self._is_internal = is_internal

    @property
    def is_nullable(self):
        """Gets the is_nullable of this ModelField.


        :return: The is_nullable of this ModelField.
        :rtype: bool
        """
        return self._is_nullable

    @is_nullable.setter
    def is_nullable(self, is_nullable):
        """Sets the is_nullable of this ModelField.


        :param is_nullable: The is_nullable of this ModelField.
        :type is_nullable: bool
        """
        if is_nullable is None:
            raise ValueError("Invalid value for `is_nullable`, must not be `None`")

        self._is_nullable = is_nullable

    @property
    def is_searchable(self):
        """Gets the is_searchable of this ModelField.


        :return: The is_searchable of this ModelField.
        :rtype: bool
        """
        return self._is_searchable

    @is_searchable.setter
    def is_searchable(self, is_searchable):
        """Sets the is_searchable of this ModelField.


        :param is_searchable: The is_searchable of this ModelField.
        :type is_searchable: bool
        """
        if is_searchable is None:
            raise ValueError("Invalid value for `is_searchable`, must not be `None`")

        self._is_searchable = is_searchable

    @property
    def name(self):
        """Gets the name of this ModelField.


        :return: The name of this ModelField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelField.


        :param name: The name of this ModelField.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this ModelField.


        :return: The type of this ModelField.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelField.


        :param type: The type of this ModelField.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
