/*
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Createnewdocument;
import org.openapitools.client.model.Usingfilters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DocumentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createnewdocument
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Identifies the kind of data (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createnewdocumentCall(String accept, String acronym, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/dataentities/{acronym}/documents"
            .replace("{" + "acronym" + "}", localVarApiClient.escapeString(acronym.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createnewdocumentValidateBeforeCall(String accept, String acronym, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createnewdocument(Async)");
        }

        // verify the required parameter 'acronym' is set
        if (acronym == null) {
            throw new ApiException("Missing the required parameter 'acronym' when calling createnewdocument(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createnewdocument(Async)");
        }

        return createnewdocumentCall(accept, acronym, body, _callback);

    }

    /**
     * Create new document
     * Creates documents through a JSON object where the key is the name of the field.
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Identifies the kind of data (required)
     * @param body  (required)
     * @return Createnewdocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Createnewdocument createnewdocument(String accept, String acronym, Object body) throws ApiException {
        ApiResponse<Createnewdocument> localVarResp = createnewdocumentWithHttpInfo(accept, acronym, body);
        return localVarResp.getData();
    }

    /**
     * Create new document
     * Creates documents through a JSON object where the key is the name of the field.
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Identifies the kind of data (required)
     * @param body  (required)
     * @return ApiResponse&lt;Createnewdocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Createnewdocument> createnewdocumentWithHttpInfo(String accept, String acronym, Object body) throws ApiException {
        okhttp3.Call localVarCall = createnewdocumentValidateBeforeCall(accept, acronym, body, null);
        Type localVarReturnType = new TypeToken<Createnewdocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new document (asynchronously)
     * Creates documents through a JSON object where the key is the name of the field.
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Identifies the kind of data (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createnewdocumentAsync(String accept, String acronym, Object body, final ApiCallback<Createnewdocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = createnewdocumentValidateBeforeCall(accept, acronym, body, _callback);
        Type localVarReturnType = new TypeToken<Createnewdocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createorupdateentiredocument
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Identifies the kind of data (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createorupdateentiredocumentCall(String accept, String acronym, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/dataentities/{acronym}/documents"
            .replace("{" + "acronym" + "}", localVarApiClient.escapeString(acronym.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createorupdateentiredocumentValidateBeforeCall(String accept, String acronym, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createorupdateentiredocument(Async)");
        }

        // verify the required parameter 'acronym' is set
        if (acronym == null) {
            throw new ApiException("Missing the required parameter 'acronym' when calling createorupdateentiredocument(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createorupdateentiredocument(Async)");
        }

        return createorupdateentiredocumentCall(accept, acronym, body, _callback);

    }

    /**
     * Create or update entire document
     * 
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Identifies the kind of data (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void createorupdateentiredocument(String accept, String acronym, Object body) throws ApiException {
        createorupdateentiredocumentWithHttpInfo(accept, acronym, body);
    }

    /**
     * Create or update entire document
     * 
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Identifies the kind of data (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createorupdateentiredocumentWithHttpInfo(String accept, String acronym, Object body) throws ApiException {
        okhttp3.Call localVarCall = createorupdateentiredocumentValidateBeforeCall(accept, acronym, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or update entire document (asynchronously)
     * 
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Identifies the kind of data (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createorupdateentiredocumentAsync(String accept, String acronym, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createorupdateentiredocumentValidateBeforeCall(accept, acronym, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createorupdatepartialdocument
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Identifies the kind of data (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createorupdatepartialdocumentCall(String accept, String acronym, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/dataentities/{acronym}/documents"
            .replace("{" + "acronym" + "}", localVarApiClient.escapeString(acronym.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createorupdatepartialdocumentValidateBeforeCall(String accept, String acronym, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createorupdatepartialdocument(Async)");
        }

        // verify the required parameter 'acronym' is set
        if (acronym == null) {
            throw new ApiException("Missing the required parameter 'acronym' when calling createorupdatepartialdocument(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createorupdatepartialdocument(Async)");
        }

        return createorupdatepartialdocumentCall(accept, acronym, body, _callback);

    }

    /**
     * Create or update partial document
     * 
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Identifies the kind of data (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void createorupdatepartialdocument(String accept, String acronym, Object body) throws ApiException {
        createorupdatepartialdocumentWithHttpInfo(accept, acronym, body);
    }

    /**
     * Create or update partial document
     * 
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Identifies the kind of data (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createorupdatepartialdocumentWithHttpInfo(String accept, String acronym, Object body) throws ApiException {
        okhttp3.Call localVarCall = createorupdatepartialdocumentValidateBeforeCall(accept, acronym, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or update partial document (asynchronously)
     * 
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Identifies the kind of data (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createorupdatepartialdocumentAsync(String accept, String acronym, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createorupdatepartialdocumentValidateBeforeCall(accept, acronym, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletedocument
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletedocumentCall(String contentType, String accept, String acronym, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataentities/{acronym}/documents/{id}"
            .replace("{" + "acronym" + "}", localVarApiClient.escapeString(acronym.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletedocumentValidateBeforeCall(String contentType, String accept, String acronym, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deletedocument(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling deletedocument(Async)");
        }

        // verify the required parameter 'acronym' is set
        if (acronym == null) {
            throw new ApiException("Missing the required parameter 'acronym' when calling deletedocument(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletedocument(Async)");
        }

        return deletedocumentCall(contentType, accept, acronym, id, _callback);

    }

    /**
     * Delete document
     * It allows to delete a document.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void deletedocument(String contentType, String accept, String acronym, String id) throws ApiException {
        deletedocumentWithHttpInfo(contentType, accept, acronym, id);
    }

    /**
     * Delete document
     * It allows to delete a document.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletedocumentWithHttpInfo(String contentType, String accept, String acronym, String id) throws ApiException {
        okhttp3.Call localVarCall = deletedocumentValidateBeforeCall(contentType, accept, acronym, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete document (asynchronously)
     * It allows to delete a document.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletedocumentAsync(String contentType, String accept, String acronym, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletedocumentValidateBeforeCall(contentType, accept, acronym, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getdocument
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getdocumentCall(String contentType, String accept, String acronym, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataentities/{acronym}/documents/{id}"
            .replace("{" + "acronym" + "}", localVarApiClient.escapeString(acronym.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getdocumentValidateBeforeCall(String contentType, String accept, String acronym, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getdocument(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getdocument(Async)");
        }

        // verify the required parameter 'acronym' is set
        if (acronym == null) {
            throw new ApiException("Missing the required parameter 'acronym' when calling getdocument(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getdocument(Async)");
        }

        return getdocumentCall(contentType, accept, acronym, id, _callback);

    }

    /**
     * Get document
     * Retrieves a document.    Assign the &#x60;_fields&#x60; parameter in the query string to retrieve the desired fields. If you want to return all the fields use &#x60;_fields&#x3D;_all&#x60;.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @return Usingfilters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Usingfilters getdocument(String contentType, String accept, String acronym, String id) throws ApiException {
        ApiResponse<Usingfilters> localVarResp = getdocumentWithHttpInfo(contentType, accept, acronym, id);
        return localVarResp.getData();
    }

    /**
     * Get document
     * Retrieves a document.    Assign the &#x60;_fields&#x60; parameter in the query string to retrieve the desired fields. If you want to return all the fields use &#x60;_fields&#x3D;_all&#x60;.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @return ApiResponse&lt;Usingfilters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Usingfilters> getdocumentWithHttpInfo(String contentType, String accept, String acronym, String id) throws ApiException {
        okhttp3.Call localVarCall = getdocumentValidateBeforeCall(contentType, accept, acronym, id, null);
        Type localVarReturnType = new TypeToken<Usingfilters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get document (asynchronously)
     * Retrieves a document.    Assign the &#x60;_fields&#x60; parameter in the query string to retrieve the desired fields. If you want to return all the fields use &#x60;_fields&#x3D;_all&#x60;.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getdocumentAsync(String contentType, String accept, String acronym, String id, final ApiCallback<Usingfilters> _callback) throws ApiException {

        okhttp3.Call localVarCall = getdocumentValidateBeforeCall(contentType, accept, acronym, id, _callback);
        Type localVarReturnType = new TypeToken<Usingfilters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateentiredocument
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateentiredocumentCall(String accept, String acronym, String id, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/dataentities/{acronym}/documents/{id}"
            .replace("{" + "acronym" + "}", localVarApiClient.escapeString(acronym.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateentiredocumentValidateBeforeCall(String accept, String acronym, String id, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updateentiredocument(Async)");
        }

        // verify the required parameter 'acronym' is set
        if (acronym == null) {
            throw new ApiException("Missing the required parameter 'acronym' when calling updateentiredocument(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateentiredocument(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateentiredocument(Async)");
        }

        return updateentiredocumentCall(accept, acronym, id, body, _callback);

    }

    /**
     * Update entire document
     * 
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void updateentiredocument(String accept, String acronym, String id, Object body) throws ApiException {
        updateentiredocumentWithHttpInfo(accept, acronym, id, body);
    }

    /**
     * Update entire document
     * 
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateentiredocumentWithHttpInfo(String accept, String acronym, String id, Object body) throws ApiException {
        okhttp3.Call localVarCall = updateentiredocumentValidateBeforeCall(accept, acronym, id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update entire document (asynchronously)
     * 
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateentiredocumentAsync(String accept, String acronym, String id, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateentiredocumentValidateBeforeCall(accept, acronym, id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatepartialdocument
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatepartialdocumentCall(String accept, String acronym, String id, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/dataentities/{acronym}/documents/{id}"
            .replace("{" + "acronym" + "}", localVarApiClient.escapeString(acronym.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatepartialdocumentValidateBeforeCall(String accept, String acronym, String id, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updatepartialdocument(Async)");
        }

        // verify the required parameter 'acronym' is set
        if (acronym == null) {
            throw new ApiException("Missing the required parameter 'acronym' when calling updatepartialdocument(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatepartialdocument(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatepartialdocument(Async)");
        }

        return updatepartialdocumentCall(accept, acronym, id, body, _callback);

    }

    /**
     * Update partial document
     * 
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void updatepartialdocument(String accept, String acronym, String id, Object body) throws ApiException {
        updatepartialdocumentWithHttpInfo(accept, acronym, id, body);
    }

    /**
     * Update partial document
     * 
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updatepartialdocumentWithHttpInfo(String accept, String acronym, String id, Object body) throws ApiException {
        okhttp3.Call localVarCall = updatepartialdocumentValidateBeforeCall(accept, acronym, id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update partial document (asynchronously)
     * 
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatepartialdocumentAsync(String accept, String acronym, String id, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatepartialdocumentValidateBeforeCall(accept, acronym, id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
