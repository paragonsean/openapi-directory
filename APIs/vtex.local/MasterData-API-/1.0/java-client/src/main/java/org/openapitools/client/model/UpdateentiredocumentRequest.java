/*
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateentiredocumentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:05.915988-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateentiredocumentRequest {
  public static final String SERIALIZED_NAME_BOOLEAN = "Boolean";
  @SerializedName(SERIALIZED_NAME_BOOLEAN)
  private Boolean _boolean;

  public static final String SERIALIZED_NAME_CURRENCY = "Currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private BigDecimal currency;

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DATE_TIME = "Date_Time";
  @SerializedName(SERIALIZED_NAME_DATE_TIME)
  private String dateTime;

  public static final String SERIALIZED_NAME_DECIMAL = "Decimal";
  @SerializedName(SERIALIZED_NAME_DECIMAL)
  private BigDecimal decimal;

  public static final String SERIALIZED_NAME_EMAIL = "Email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_INTEGER = "Integer";
  @SerializedName(SERIALIZED_NAME_INTEGER)
  private Integer integer;

  public static final String SERIALIZED_NAME_LONG = "Long";
  @SerializedName(SERIALIZED_NAME_LONG)
  private Integer _long;

  public static final String SERIALIZED_NAME_PERCENT = "Percent";
  @SerializedName(SERIALIZED_NAME_PERCENT)
  private BigDecimal percent;

  public static final String SERIALIZED_NAME_RELATIONSHIP = "Relationship";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP)
  private String relationship;

  public static final String SERIALIZED_NAME_TEXT = "Text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TIME = "Time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private String time;

  public static final String SERIALIZED_NAME_U_R_L = "URL";
  @SerializedName(SERIALIZED_NAME_U_R_L)
  private String URL;

  public static final String SERIALIZED_NAME_VARCHAR10 = "Varchar10";
  @SerializedName(SERIALIZED_NAME_VARCHAR10)
  private String varchar10;

  public static final String SERIALIZED_NAME_VARCHAR100 = "Varchar100";
  @SerializedName(SERIALIZED_NAME_VARCHAR100)
  private String varchar100;

  public static final String SERIALIZED_NAME_VARCHAR50 = "Varchar50";
  @SerializedName(SERIALIZED_NAME_VARCHAR50)
  private String varchar50;

  public static final String SERIALIZED_NAME_VARCHAR750 = "Varchar750";
  @SerializedName(SERIALIZED_NAME_VARCHAR750)
  private String varchar750;

  public UpdateentiredocumentRequest() {
  }

  public UpdateentiredocumentRequest _boolean(Boolean _boolean) {
    this._boolean = _boolean;
    return this;
  }

  /**
   * Get _boolean
   * @return _boolean
   */
  @javax.annotation.Nonnull
  public Boolean getBoolean() {
    return _boolean;
  }

  public void setBoolean(Boolean _boolean) {
    this._boolean = _boolean;
  }


  public UpdateentiredocumentRequest currency(BigDecimal currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nonnull
  public BigDecimal getCurrency() {
    return currency;
  }

  public void setCurrency(BigDecimal currency) {
    this.currency = currency;
  }


  public UpdateentiredocumentRequest date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nonnull
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public UpdateentiredocumentRequest dateTime(String dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  /**
   * Get dateTime
   * @return dateTime
   */
  @javax.annotation.Nonnull
  public String getDateTime() {
    return dateTime;
  }

  public void setDateTime(String dateTime) {
    this.dateTime = dateTime;
  }


  public UpdateentiredocumentRequest decimal(BigDecimal decimal) {
    this.decimal = decimal;
    return this;
  }

  /**
   * Get decimal
   * @return decimal
   */
  @javax.annotation.Nonnull
  public BigDecimal getDecimal() {
    return decimal;
  }

  public void setDecimal(BigDecimal decimal) {
    this.decimal = decimal;
  }


  public UpdateentiredocumentRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public UpdateentiredocumentRequest integer(Integer integer) {
    this.integer = integer;
    return this;
  }

  /**
   * Get integer
   * @return integer
   */
  @javax.annotation.Nonnull
  public Integer getInteger() {
    return integer;
  }

  public void setInteger(Integer integer) {
    this.integer = integer;
  }


  public UpdateentiredocumentRequest _long(Integer _long) {
    this._long = _long;
    return this;
  }

  /**
   * Get _long
   * @return _long
   */
  @javax.annotation.Nonnull
  public Integer getLong() {
    return _long;
  }

  public void setLong(Integer _long) {
    this._long = _long;
  }


  public UpdateentiredocumentRequest percent(BigDecimal percent) {
    this.percent = percent;
    return this;
  }

  /**
   * Get percent
   * @return percent
   */
  @javax.annotation.Nonnull
  public BigDecimal getPercent() {
    return percent;
  }

  public void setPercent(BigDecimal percent) {
    this.percent = percent;
  }


  public UpdateentiredocumentRequest relationship(String relationship) {
    this.relationship = relationship;
    return this;
  }

  /**
   * Get relationship
   * @return relationship
   */
  @javax.annotation.Nonnull
  public String getRelationship() {
    return relationship;
  }

  public void setRelationship(String relationship) {
    this.relationship = relationship;
  }


  public UpdateentiredocumentRequest text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public UpdateentiredocumentRequest time(String time) {
    this.time = time;
    return this;
  }

  /**
   * Get time
   * @return time
   */
  @javax.annotation.Nonnull
  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }


  public UpdateentiredocumentRequest URL(String URL) {
    this.URL = URL;
    return this;
  }

  /**
   * Get URL
   * @return URL
   */
  @javax.annotation.Nonnull
  public String getURL() {
    return URL;
  }

  public void setURL(String URL) {
    this.URL = URL;
  }


  public UpdateentiredocumentRequest varchar10(String varchar10) {
    this.varchar10 = varchar10;
    return this;
  }

  /**
   * Get varchar10
   * @return varchar10
   */
  @javax.annotation.Nonnull
  public String getVarchar10() {
    return varchar10;
  }

  public void setVarchar10(String varchar10) {
    this.varchar10 = varchar10;
  }


  public UpdateentiredocumentRequest varchar100(String varchar100) {
    this.varchar100 = varchar100;
    return this;
  }

  /**
   * Get varchar100
   * @return varchar100
   */
  @javax.annotation.Nonnull
  public String getVarchar100() {
    return varchar100;
  }

  public void setVarchar100(String varchar100) {
    this.varchar100 = varchar100;
  }


  public UpdateentiredocumentRequest varchar50(String varchar50) {
    this.varchar50 = varchar50;
    return this;
  }

  /**
   * Get varchar50
   * @return varchar50
   */
  @javax.annotation.Nonnull
  public String getVarchar50() {
    return varchar50;
  }

  public void setVarchar50(String varchar50) {
    this.varchar50 = varchar50;
  }


  public UpdateentiredocumentRequest varchar750(String varchar750) {
    this.varchar750 = varchar750;
    return this;
  }

  /**
   * Get varchar750
   * @return varchar750
   */
  @javax.annotation.Nonnull
  public String getVarchar750() {
    return varchar750;
  }

  public void setVarchar750(String varchar750) {
    this.varchar750 = varchar750;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateentiredocumentRequest updateentiredocumentRequest = (UpdateentiredocumentRequest) o;
    return Objects.equals(this._boolean, updateentiredocumentRequest._boolean) &&
        Objects.equals(this.currency, updateentiredocumentRequest.currency) &&
        Objects.equals(this.date, updateentiredocumentRequest.date) &&
        Objects.equals(this.dateTime, updateentiredocumentRequest.dateTime) &&
        Objects.equals(this.decimal, updateentiredocumentRequest.decimal) &&
        Objects.equals(this.email, updateentiredocumentRequest.email) &&
        Objects.equals(this.integer, updateentiredocumentRequest.integer) &&
        Objects.equals(this._long, updateentiredocumentRequest._long) &&
        Objects.equals(this.percent, updateentiredocumentRequest.percent) &&
        Objects.equals(this.relationship, updateentiredocumentRequest.relationship) &&
        Objects.equals(this.text, updateentiredocumentRequest.text) &&
        Objects.equals(this.time, updateentiredocumentRequest.time) &&
        Objects.equals(this.URL, updateentiredocumentRequest.URL) &&
        Objects.equals(this.varchar10, updateentiredocumentRequest.varchar10) &&
        Objects.equals(this.varchar100, updateentiredocumentRequest.varchar100) &&
        Objects.equals(this.varchar50, updateentiredocumentRequest.varchar50) &&
        Objects.equals(this.varchar750, updateentiredocumentRequest.varchar750);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_boolean, currency, date, dateTime, decimal, email, integer, _long, percent, relationship, text, time, URL, varchar10, varchar100, varchar50, varchar750);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateentiredocumentRequest {\n");
    sb.append("    _boolean: ").append(toIndentedString(_boolean)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    decimal: ").append(toIndentedString(decimal)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    integer: ").append(toIndentedString(integer)).append("\n");
    sb.append("    _long: ").append(toIndentedString(_long)).append("\n");
    sb.append("    percent: ").append(toIndentedString(percent)).append("\n");
    sb.append("    relationship: ").append(toIndentedString(relationship)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    URL: ").append(toIndentedString(URL)).append("\n");
    sb.append("    varchar10: ").append(toIndentedString(varchar10)).append("\n");
    sb.append("    varchar100: ").append(toIndentedString(varchar100)).append("\n");
    sb.append("    varchar50: ").append(toIndentedString(varchar50)).append("\n");
    sb.append("    varchar750: ").append(toIndentedString(varchar750)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Boolean");
    openapiFields.add("Currency");
    openapiFields.add("Date");
    openapiFields.add("Date_Time");
    openapiFields.add("Decimal");
    openapiFields.add("Email");
    openapiFields.add("Integer");
    openapiFields.add("Long");
    openapiFields.add("Percent");
    openapiFields.add("Relationship");
    openapiFields.add("Text");
    openapiFields.add("Time");
    openapiFields.add("URL");
    openapiFields.add("Varchar10");
    openapiFields.add("Varchar100");
    openapiFields.add("Varchar50");
    openapiFields.add("Varchar750");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Boolean");
    openapiRequiredFields.add("Currency");
    openapiRequiredFields.add("Date");
    openapiRequiredFields.add("Date_Time");
    openapiRequiredFields.add("Decimal");
    openapiRequiredFields.add("Email");
    openapiRequiredFields.add("Integer");
    openapiRequiredFields.add("Long");
    openapiRequiredFields.add("Percent");
    openapiRequiredFields.add("Relationship");
    openapiRequiredFields.add("Text");
    openapiRequiredFields.add("Time");
    openapiRequiredFields.add("URL");
    openapiRequiredFields.add("Varchar10");
    openapiRequiredFields.add("Varchar100");
    openapiRequiredFields.add("Varchar50");
    openapiRequiredFields.add("Varchar750");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateentiredocumentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateentiredocumentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateentiredocumentRequest is not found in the empty JSON string", UpdateentiredocumentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateentiredocumentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateentiredocumentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateentiredocumentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Date").toString()));
      }
      if (!jsonObj.get("Date_Time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Date_Time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Date_Time").toString()));
      }
      if (!jsonObj.get("Email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Email").toString()));
      }
      if (!jsonObj.get("Relationship").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Relationship` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Relationship").toString()));
      }
      if (!jsonObj.get("Text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Text").toString()));
      }
      if (!jsonObj.get("Time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Time").toString()));
      }
      if (!jsonObj.get("URL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `URL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("URL").toString()));
      }
      if (!jsonObj.get("Varchar10").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Varchar10` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Varchar10").toString()));
      }
      if (!jsonObj.get("Varchar100").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Varchar100` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Varchar100").toString()));
      }
      if (!jsonObj.get("Varchar50").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Varchar50` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Varchar50").toString()));
      }
      if (!jsonObj.get("Varchar750").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Varchar750` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Varchar750").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateentiredocumentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateentiredocumentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateentiredocumentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateentiredocumentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateentiredocumentRequest>() {
           @Override
           public void write(JsonWriter out, UpdateentiredocumentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateentiredocumentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateentiredocumentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateentiredocumentRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateentiredocumentRequest
   */
  public static UpdateentiredocumentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateentiredocumentRequest.class);
  }

  /**
   * Convert an instance of UpdateentiredocumentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

