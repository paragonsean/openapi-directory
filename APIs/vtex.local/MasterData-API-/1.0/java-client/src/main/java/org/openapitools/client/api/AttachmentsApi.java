/*
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AttachmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AttachmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AttachmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for retrieveattachment
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param field Field to attach the file to, as described in admin (required)
     * @param fileName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveattachmentCall(String acronym, String id, String field, String fileName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataentities/{acronym}/documents/{id}/{field}/attachments/{file-name}"
            .replace("{" + "acronym" + "}", localVarApiClient.escapeString(acronym.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()))
            .replace("{" + "file-name" + "}", localVarApiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveattachmentValidateBeforeCall(String acronym, String id, String field, String fileName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'acronym' is set
        if (acronym == null) {
            throw new ApiException("Missing the required parameter 'acronym' when calling retrieveattachment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retrieveattachment(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling retrieveattachment(Async)");
        }

        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling retrieveattachment(Async)");
        }

        return retrieveattachmentCall(acronym, id, field, fileName, _callback);

    }

    /**
     * Retrieve attachment
     * Use this API to retrieve a file.    Be sure to include the file extension in the name. Like in this example:  &#x60;&#x60;&#x60;  /dataentities/CL/documents/123/file/attachments/image.png  &#x60;&#x60;&#x60;
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param field Field to attach the file to, as described in admin (required)
     * @param fileName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void retrieveattachment(String acronym, String id, String field, String fileName) throws ApiException {
        retrieveattachmentWithHttpInfo(acronym, id, field, fileName);
    }

    /**
     * Retrieve attachment
     * Use this API to retrieve a file.    Be sure to include the file extension in the name. Like in this example:  &#x60;&#x60;&#x60;  /dataentities/CL/documents/123/file/attachments/image.png  &#x60;&#x60;&#x60;
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param field Field to attach the file to, as described in admin (required)
     * @param fileName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> retrieveattachmentWithHttpInfo(String acronym, String id, String field, String fileName) throws ApiException {
        okhttp3.Call localVarCall = retrieveattachmentValidateBeforeCall(acronym, id, field, fileName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve attachment (asynchronously)
     * Use this API to retrieve a file.    Be sure to include the file extension in the name. Like in this example:  &#x60;&#x60;&#x60;  /dataentities/CL/documents/123/file/attachments/image.png  &#x60;&#x60;&#x60;
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param field Field to attach the file to, as described in admin (required)
     * @param fileName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveattachmentAsync(String acronym, String id, String field, String fileName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveattachmentValidateBeforeCall(acronym, id, field, fileName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveattachment
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param field Field to attach the file to, as described in admin (required)
     * @param _file  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveattachmentCall(String acronym, String id, String field, List<File> _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataentities/{acronym}/documents/{id}/{field}/attachments"
            .replace("{" + "acronym" + "}", localVarApiClient.escapeString(acronym.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveattachmentValidateBeforeCall(String acronym, String id, String field, List<File> _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'acronym' is set
        if (acronym == null) {
            throw new ApiException("Missing the required parameter 'acronym' when calling saveattachment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling saveattachment(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling saveattachment(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling saveattachment(Async)");
        }

        return saveattachmentCall(acronym, id, field, _file, _callback);

    }

    /**
     * Save attachment
     * This API allows you to save a file in a field of type &#x60;File&#x60;.    When using in javascript, you must add the header &#x60;content-type&#x60; with value &#x60;multipart/form-data;&#x60;    You can upload more than one file. Just add a new field in the &#x60;form-data&#x60; with type &#x60;File&#x60;.
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param field Field to attach the file to, as described in admin (required)
     * @param _file  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void saveattachment(String acronym, String id, String field, List<File> _file) throws ApiException {
        saveattachmentWithHttpInfo(acronym, id, field, _file);
    }

    /**
     * Save attachment
     * This API allows you to save a file in a field of type &#x60;File&#x60;.    When using in javascript, you must add the header &#x60;content-type&#x60; with value &#x60;multipart/form-data;&#x60;    You can upload more than one file. Just add a new field in the &#x60;form-data&#x60; with type &#x60;File&#x60;.
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param field Field to attach the file to, as described in admin (required)
     * @param _file  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveattachmentWithHttpInfo(String acronym, String id, String field, List<File> _file) throws ApiException {
        okhttp3.Call localVarCall = saveattachmentValidateBeforeCall(acronym, id, field, _file, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save attachment (asynchronously)
     * This API allows you to save a file in a field of type &#x60;File&#x60;.    When using in javascript, you must add the header &#x60;content-type&#x60; with value &#x60;multipart/form-data;&#x60;    You can upload more than one file. Just add a new field in the &#x60;form-data&#x60; with type &#x60;File&#x60;.
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param field Field to attach the file to, as described in admin (required)
     * @param _file  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveattachmentAsync(String acronym, String id, String field, List<File> _file, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveattachmentValidateBeforeCall(acronym, id, field, _file, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
