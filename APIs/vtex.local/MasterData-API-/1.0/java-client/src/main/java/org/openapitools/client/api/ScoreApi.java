/*
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeletescorebyfieldRequest;
import org.openapitools.client.model.PutscorebyfieldRequest;
import org.openapitools.client.model.PutscoresRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScoreApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScoreApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScoreApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deletescorebyfield
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param fieldName Name of the field to remove score from (required)
     * @param deletescorebyfieldRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletescorebyfieldCall(String accept, String acronym, String id, String fieldName, DeletescorebyfieldRequest deletescorebyfieldRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deletescorebyfieldRequest;

        // create path and map variables
        String localVarPath = "/api/dataentities/{acronym}/documents/{id}/score/{field-name}"
            .replace("{" + "acronym" + "}", localVarApiClient.escapeString(acronym.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "field-name" + "}", localVarApiClient.escapeString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletescorebyfieldValidateBeforeCall(String accept, String acronym, String id, String fieldName, DeletescorebyfieldRequest deletescorebyfieldRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling deletescorebyfield(Async)");
        }

        // verify the required parameter 'acronym' is set
        if (acronym == null) {
            throw new ApiException("Missing the required parameter 'acronym' when calling deletescorebyfield(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletescorebyfield(Async)");
        }

        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling deletescorebyfield(Async)");
        }

        // verify the required parameter 'deletescorebyfieldRequest' is set
        if (deletescorebyfieldRequest == null) {
            throw new ApiException("Missing the required parameter 'deletescorebyfieldRequest' when calling deletescorebyfield(Async)");
        }

        return deletescorebyfieldCall(accept, acronym, id, fieldName, deletescorebyfieldRequest, _callback);

    }

    /**
     * Delete score by field
     * Allows you to remove a key from a specific field.
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param fieldName Name of the field to remove score from (required)
     * @param deletescorebyfieldRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void deletescorebyfield(String accept, String acronym, String id, String fieldName, DeletescorebyfieldRequest deletescorebyfieldRequest) throws ApiException {
        deletescorebyfieldWithHttpInfo(accept, acronym, id, fieldName, deletescorebyfieldRequest);
    }

    /**
     * Delete score by field
     * Allows you to remove a key from a specific field.
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param fieldName Name of the field to remove score from (required)
     * @param deletescorebyfieldRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletescorebyfieldWithHttpInfo(String accept, String acronym, String id, String fieldName, DeletescorebyfieldRequest deletescorebyfieldRequest) throws ApiException {
        okhttp3.Call localVarCall = deletescorebyfieldValidateBeforeCall(accept, acronym, id, fieldName, deletescorebyfieldRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete score by field (asynchronously)
     * Allows you to remove a key from a specific field.
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param fieldName Name of the field to remove score from (required)
     * @param deletescorebyfieldRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletescorebyfieldAsync(String accept, String acronym, String id, String fieldName, DeletescorebyfieldRequest deletescorebyfieldRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletescorebyfieldValidateBeforeCall(accept, acronym, id, fieldName, deletescorebyfieldRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putscorebyfield
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param fieldName Name of the field to score (required)
     * @param putscorebyfieldRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putscorebyfieldCall(String accept, String acronym, String id, String fieldName, PutscorebyfieldRequest putscorebyfieldRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putscorebyfieldRequest;

        // create path and map variables
        String localVarPath = "/api/dataentities/{acronym}/documents/{id}/score/{field-name}"
            .replace("{" + "acronym" + "}", localVarApiClient.escapeString(acronym.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "field-name" + "}", localVarApiClient.escapeString(fieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putscorebyfieldValidateBeforeCall(String accept, String acronym, String id, String fieldName, PutscorebyfieldRequest putscorebyfieldRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling putscorebyfield(Async)");
        }

        // verify the required parameter 'acronym' is set
        if (acronym == null) {
            throw new ApiException("Missing the required parameter 'acronym' when calling putscorebyfield(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putscorebyfield(Async)");
        }

        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling putscorebyfield(Async)");
        }

        // verify the required parameter 'putscorebyfieldRequest' is set
        if (putscorebyfieldRequest == null) {
            throw new ApiException("Missing the required parameter 'putscorebyfieldRequest' when calling putscorebyfield(Async)");
        }

        return putscorebyfieldCall(accept, acronym, id, fieldName, putscorebyfieldRequest, _callback);

    }

    /**
     * Put score by field
     * It allows to punctuate in a specific field.
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param fieldName Name of the field to score (required)
     * @param putscorebyfieldRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void putscorebyfield(String accept, String acronym, String id, String fieldName, PutscorebyfieldRequest putscorebyfieldRequest) throws ApiException {
        putscorebyfieldWithHttpInfo(accept, acronym, id, fieldName, putscorebyfieldRequest);
    }

    /**
     * Put score by field
     * It allows to punctuate in a specific field.
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param fieldName Name of the field to score (required)
     * @param putscorebyfieldRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putscorebyfieldWithHttpInfo(String accept, String acronym, String id, String fieldName, PutscorebyfieldRequest putscorebyfieldRequest) throws ApiException {
        okhttp3.Call localVarCall = putscorebyfieldValidateBeforeCall(accept, acronym, id, fieldName, putscorebyfieldRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Put score by field (asynchronously)
     * It allows to punctuate in a specific field.
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param fieldName Name of the field to score (required)
     * @param putscorebyfieldRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putscorebyfieldAsync(String accept, String acronym, String id, String fieldName, PutscorebyfieldRequest putscorebyfieldRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putscorebyfieldValidateBeforeCall(accept, acronym, id, fieldName, putscorebyfieldRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putscores
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param putscoresRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putscoresCall(String accept, String acronym, String id, List<PutscoresRequest> putscoresRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putscoresRequest;

        // create path and map variables
        String localVarPath = "/api/dataentities/{acronym}/documents/{id}/score"
            .replace("{" + "acronym" + "}", localVarApiClient.escapeString(acronym.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putscoresValidateBeforeCall(String accept, String acronym, String id, List<PutscoresRequest> putscoresRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling putscores(Async)");
        }

        // verify the required parameter 'acronym' is set
        if (acronym == null) {
            throw new ApiException("Missing the required parameter 'acronym' when calling putscores(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putscores(Async)");
        }

        // verify the required parameter 'putscoresRequest' is set
        if (putscoresRequest == null) {
            throw new ApiException("Missing the required parameter 'putscoresRequest' when calling putscores(Async)");
        }

        return putscoresCall(accept, acronym, id, putscoresRequest, _callback);

    }

    /**
     * Put scores
     * It allows punctuate in more than one field and more than one key.
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param putscoresRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void putscores(String accept, String acronym, String id, List<PutscoresRequest> putscoresRequest) throws ApiException {
        putscoresWithHttpInfo(accept, acronym, id, putscoresRequest);
    }

    /**
     * Put scores
     * It allows punctuate in more than one field and more than one key.
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param putscoresRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putscoresWithHttpInfo(String accept, String acronym, String id, List<PutscoresRequest> putscoresRequest) throws ApiException {
        okhttp3.Call localVarCall = putscoresValidateBeforeCall(accept, acronym, id, putscoresRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Put scores (asynchronously)
     * It allows punctuate in more than one field and more than one key.
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param acronym Two letter word that identifies the data structure (required)
     * @param id Id of the document (required)
     * @param putscoresRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putscoresAsync(String accept, String acronym, String id, List<PutscoresRequest> putscoresRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putscoresValidateBeforeCall(accept, acronym, id, putscoresRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
