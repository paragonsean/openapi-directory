/*
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DepartmentVisitedTag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Document
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:05.915988-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Document {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_CARTTAG = "carttag";
  @SerializedName(SERIALIZED_NAME_CARTTAG)
  private String carttag;

  public static final String SERIALIZED_NAME_CHECKOUTTAG = "checkouttag";
  @SerializedName(SERIALIZED_NAME_CHECKOUTTAG)
  private String checkouttag;

  public static final String SERIALIZED_NAME_DATA_ENTITY_ID = "dataEntityId";
  @SerializedName(SERIALIZED_NAME_DATA_ENTITY_ID)
  private String dataEntityId;

  public static final String SERIALIZED_NAME_DEPARTMENT_VISITED_TAG = "departmentVisitedTag";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_VISITED_TAG)
  private DepartmentVisitedTag departmentVisitedTag;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FOLLOWERS = "followers";
  @SerializedName(SERIALIZED_NAME_FOLLOWERS)
  private List<String> followers = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_RCLASTSESSION = "rclastsession";
  @SerializedName(SERIALIZED_NAME_RCLASTSESSION)
  private String rclastsession;

  public static final String SERIALIZED_NAME_RCLASTSESSIONDATE = "rclastsessiondate";
  @SerializedName(SERIALIZED_NAME_RCLASTSESSIONDATE)
  private String rclastsessiondate;

  public Document() {
  }

  public Document accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Document accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

  /**
   * Get accountName
   * @return accountName
   */
  @javax.annotation.Nonnull
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public Document carttag(String carttag) {
    this.carttag = carttag;
    return this;
  }

  /**
   * Get carttag
   * @return carttag
   */
  @javax.annotation.Nullable
  public String getCarttag() {
    return carttag;
  }

  public void setCarttag(String carttag) {
    this.carttag = carttag;
  }


  public Document checkouttag(String checkouttag) {
    this.checkouttag = checkouttag;
    return this;
  }

  /**
   * Get checkouttag
   * @return checkouttag
   */
  @javax.annotation.Nullable
  public String getCheckouttag() {
    return checkouttag;
  }

  public void setCheckouttag(String checkouttag) {
    this.checkouttag = checkouttag;
  }


  public Document dataEntityId(String dataEntityId) {
    this.dataEntityId = dataEntityId;
    return this;
  }

  /**
   * Get dataEntityId
   * @return dataEntityId
   */
  @javax.annotation.Nonnull
  public String getDataEntityId() {
    return dataEntityId;
  }

  public void setDataEntityId(String dataEntityId) {
    this.dataEntityId = dataEntityId;
  }


  public Document departmentVisitedTag(DepartmentVisitedTag departmentVisitedTag) {
    this.departmentVisitedTag = departmentVisitedTag;
    return this;
  }

  /**
   * Get departmentVisitedTag
   * @return departmentVisitedTag
   */
  @javax.annotation.Nonnull
  public DepartmentVisitedTag getDepartmentVisitedTag() {
    return departmentVisitedTag;
  }

  public void setDepartmentVisitedTag(DepartmentVisitedTag departmentVisitedTag) {
    this.departmentVisitedTag = departmentVisitedTag;
  }


  public Document email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Document followers(List<String> followers) {
    this.followers = followers;
    return this;
  }

  public Document addFollowersItem(String followersItem) {
    if (this.followers == null) {
      this.followers = new ArrayList<>();
    }
    this.followers.add(followersItem);
    return this;
  }

  /**
   * 
   * @return followers
   */
  @javax.annotation.Nonnull
  public List<String> getFollowers() {
    return followers;
  }

  public void setFollowers(List<String> followers) {
    this.followers = followers;
  }


  public Document id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Document rclastsession(String rclastsession) {
    this.rclastsession = rclastsession;
    return this;
  }

  /**
   * Get rclastsession
   * @return rclastsession
   */
  @javax.annotation.Nonnull
  public String getRclastsession() {
    return rclastsession;
  }

  public void setRclastsession(String rclastsession) {
    this.rclastsession = rclastsession;
  }


  public Document rclastsessiondate(String rclastsessiondate) {
    this.rclastsessiondate = rclastsessiondate;
    return this;
  }

  /**
   * Get rclastsessiondate
   * @return rclastsessiondate
   */
  @javax.annotation.Nonnull
  public String getRclastsessiondate() {
    return rclastsessiondate;
  }

  public void setRclastsessiondate(String rclastsessiondate) {
    this.rclastsessiondate = rclastsessiondate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Document document = (Document) o;
    return Objects.equals(this.accountId, document.accountId) &&
        Objects.equals(this.accountName, document.accountName) &&
        Objects.equals(this.carttag, document.carttag) &&
        Objects.equals(this.checkouttag, document.checkouttag) &&
        Objects.equals(this.dataEntityId, document.dataEntityId) &&
        Objects.equals(this.departmentVisitedTag, document.departmentVisitedTag) &&
        Objects.equals(this.email, document.email) &&
        Objects.equals(this.followers, document.followers) &&
        Objects.equals(this.id, document.id) &&
        Objects.equals(this.rclastsession, document.rclastsession) &&
        Objects.equals(this.rclastsessiondate, document.rclastsessiondate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, accountName, carttag, checkouttag, dataEntityId, departmentVisitedTag, email, followers, id, rclastsession, rclastsessiondate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Document {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    carttag: ").append(toIndentedString(carttag)).append("\n");
    sb.append("    checkouttag: ").append(toIndentedString(checkouttag)).append("\n");
    sb.append("    dataEntityId: ").append(toIndentedString(dataEntityId)).append("\n");
    sb.append("    departmentVisitedTag: ").append(toIndentedString(departmentVisitedTag)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    followers: ").append(toIndentedString(followers)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    rclastsession: ").append(toIndentedString(rclastsession)).append("\n");
    sb.append("    rclastsessiondate: ").append(toIndentedString(rclastsessiondate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("accountName");
    openapiFields.add("carttag");
    openapiFields.add("checkouttag");
    openapiFields.add("dataEntityId");
    openapiFields.add("departmentVisitedTag");
    openapiFields.add("email");
    openapiFields.add("followers");
    openapiFields.add("id");
    openapiFields.add("rclastsession");
    openapiFields.add("rclastsessiondate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("accountName");
    openapiRequiredFields.add("carttag");
    openapiRequiredFields.add("checkouttag");
    openapiRequiredFields.add("dataEntityId");
    openapiRequiredFields.add("departmentVisitedTag");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("followers");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("rclastsession");
    openapiRequiredFields.add("rclastsessiondate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Document
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Document.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Document is not found in the empty JSON string", Document.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Document.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Document` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Document.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (!jsonObj.get("accountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountName").toString()));
      }
      if ((jsonObj.get("carttag") != null && !jsonObj.get("carttag").isJsonNull()) && !jsonObj.get("carttag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carttag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carttag").toString()));
      }
      if ((jsonObj.get("checkouttag") != null && !jsonObj.get("checkouttag").isJsonNull()) && !jsonObj.get("checkouttag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkouttag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkouttag").toString()));
      }
      if (!jsonObj.get("dataEntityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataEntityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataEntityId").toString()));
      }
      // validate the required field `departmentVisitedTag`
      DepartmentVisitedTag.validateJsonElement(jsonObj.get("departmentVisitedTag"));
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("followers") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("followers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `followers` to be an array in the JSON string but got `%s`", jsonObj.get("followers").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("rclastsession").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rclastsession` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rclastsession").toString()));
      }
      if (!jsonObj.get("rclastsessiondate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rclastsessiondate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rclastsessiondate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Document.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Document' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Document> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Document.class));

       return (TypeAdapter<T>) new TypeAdapter<Document>() {
           @Override
           public void write(JsonWriter out, Document value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Document read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Document given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Document
   * @throws IOException if the JSON string is invalid with respect to Document
   */
  public static Document fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Document.class);
  }

  /**
   * Convert an instance of Document to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

