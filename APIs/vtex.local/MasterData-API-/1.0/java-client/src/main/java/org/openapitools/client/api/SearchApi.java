/*
 * MasterData API - v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for searchdocuments
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param reSTRange Range of documents to show (required)
     * @param acronym Identifies the kind of data (required)
     * @param fields Fields that will be returned by document (optional, default to email,firstName,document)
     * @param where Specification of filters. As seen below (optional, default to firstName is not null)
     * @param schema Enter with the name of the schema to filter documents by compatibility of the schema. (optional, default to {{schema}})
     * @param keyword String to search (optional, default to String to search)
     * @param sort Use ASC value to sort ascending or DESC value to sort descending.  (optional, default to firstName ASC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Use this endpoint to search Master Data v1 documents with highly customizable filters.    ## Headers    | Name |  |  | -------- | -------- |  | Content-Type | application/json |  | Accept | application/vnd.vtex.ds.v10+json |  | x-vtex-api-appKey | App Key |  | x-vtex-api-appToken | App Token |  | REST-Range | Defines the collection of documents to be returned. A range within the collection limited by 100 documents per query. |      ## Querystring    &gt; Learn more about [Master Data v1 search queries](https://developers.vtex.com/vtex-rest-api/docs/how-the-queries-in-master-data-v1-work).    | Attribute | What it does |  | -------- | -------- |  | _fields | Fields that will be returned by document |  | _where | Specification of filters |  | _keyword | Search in all fields marked as searchable |  | _sort | Sort order |    ## How to fill the querystring attributes    1. _fields: Use the field names separated by commas. Ex. &#x60;_fields&#x3D;email,firstName,document&#x60;.  2. _where: See the query examples below to learn how to use filters.  3. _keyword: Enter the value you want to query. Use quotes for a partial query. Ex. &#x60;_keyword&#x3D;Maria&#x60; or &#x60;_keyword&#x3D;*Maria*&#x60;  4. _sort: Use &#x60;ASC&#x60; value to sort ascending or &#x60;DESC&#x60; value to sort descending. Ex. &#x60;_sort&#x3D;firstName ASC&#x60;.  5. If you want to fetch all fields use the &#x60;_all&#x60; parameter in the list of response fields. Ex: &#x60;_fields&#x3D;_all&#x60;      ## Query Examples:      ### Simple filter    &#x60;&#x60;&#x60;  /dataentities/CL/search?email&#x3D;my@email.com  &#x60;&#x60;&#x60;    ### Complex filter    &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;(firstName&#x3D;Jon OR lastName&#x3D;Smith) OR (createdIn between 2001-01-01 AND 2016-01-01)  &#x60;&#x60;&#x60;    ### Filter by range    #### Date Range    &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;createdIn between 2001-01-01 AND 2016-01-01  &#x60;&#x60;&#x60;    #### Range numeric fields    &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;age between 18 AND 25  &#x60;&#x60;&#x60;    ### Partial filter    &#x60;&#x60;&#x60;  /dataentities/CL/search?firstName&#x3D;*Maria*  &#x60;&#x60;&#x60;    ### Filter for null values    &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;firstName is null  &#x60;&#x60;&#x60;    ### Filter for non-null values    &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;firstName is not null  &#x60;&#x60;&#x60;    ### Filter for difference  &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;firstName&lt;&gt;maria  &#x60;&#x60;&#x60;    ### Filter greater than or less than  &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;number&gt;5  /dataentities/CL/search?_where&#x3D;date&lt;2001-01-01  &#x60;&#x60;&#x60; </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchdocumentsCall(String contentType, String accept, String reSTRange, String acronym, String fields, String where, String schema, String keyword, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/dataentities/{acronym}/search"
            .replace("{" + "acronym" + "}", localVarApiClient.escapeString(acronym.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_fields", fields));
        }

        if (where != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_where", where));
        }

        if (schema != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_schema", schema));
        }

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_keyword", keyword));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_sort", sort));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (reSTRange != null) {
            localVarHeaderParams.put("REST-Range", localVarApiClient.parameterToString(reSTRange));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchdocumentsValidateBeforeCall(String contentType, String accept, String reSTRange, String acronym, String fields, String where, String schema, String keyword, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling searchdocuments(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling searchdocuments(Async)");
        }

        // verify the required parameter 'reSTRange' is set
        if (reSTRange == null) {
            throw new ApiException("Missing the required parameter 'reSTRange' when calling searchdocuments(Async)");
        }

        // verify the required parameter 'acronym' is set
        if (acronym == null) {
            throw new ApiException("Missing the required parameter 'acronym' when calling searchdocuments(Async)");
        }

        return searchdocumentsCall(contentType, accept, reSTRange, acronym, fields, where, schema, keyword, sort, _callback);

    }

    /**
     * Search documents
     * Search documents by the query parameters described below.    &gt; Avoid sending too many requests with wildcards (&#x60;*&#x60;) in the search parameters or that use the &#x60;keyword&#x60; parameter. This may lead to this endpoint being temporarily blocked for your account. If this happens you will receive an error with status code &#x60;503&#x60;.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param reSTRange Range of documents to show (required)
     * @param acronym Identifies the kind of data (required)
     * @param fields Fields that will be returned by document (optional, default to email,firstName,document)
     * @param where Specification of filters. As seen below (optional, default to firstName is not null)
     * @param schema Enter with the name of the schema to filter documents by compatibility of the schema. (optional, default to {{schema}})
     * @param keyword String to search (optional, default to String to search)
     * @param sort Use ASC value to sort ascending or DESC value to sort descending.  (optional, default to firstName ASC)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Use this endpoint to search Master Data v1 documents with highly customizable filters.    ## Headers    | Name |  |  | -------- | -------- |  | Content-Type | application/json |  | Accept | application/vnd.vtex.ds.v10+json |  | x-vtex-api-appKey | App Key |  | x-vtex-api-appToken | App Token |  | REST-Range | Defines the collection of documents to be returned. A range within the collection limited by 100 documents per query. |      ## Querystring    &gt; Learn more about [Master Data v1 search queries](https://developers.vtex.com/vtex-rest-api/docs/how-the-queries-in-master-data-v1-work).    | Attribute | What it does |  | -------- | -------- |  | _fields | Fields that will be returned by document |  | _where | Specification of filters |  | _keyword | Search in all fields marked as searchable |  | _sort | Sort order |    ## How to fill the querystring attributes    1. _fields: Use the field names separated by commas. Ex. &#x60;_fields&#x3D;email,firstName,document&#x60;.  2. _where: See the query examples below to learn how to use filters.  3. _keyword: Enter the value you want to query. Use quotes for a partial query. Ex. &#x60;_keyword&#x3D;Maria&#x60; or &#x60;_keyword&#x3D;*Maria*&#x60;  4. _sort: Use &#x60;ASC&#x60; value to sort ascending or &#x60;DESC&#x60; value to sort descending. Ex. &#x60;_sort&#x3D;firstName ASC&#x60;.  5. If you want to fetch all fields use the &#x60;_all&#x60; parameter in the list of response fields. Ex: &#x60;_fields&#x3D;_all&#x60;      ## Query Examples:      ### Simple filter    &#x60;&#x60;&#x60;  /dataentities/CL/search?email&#x3D;my@email.com  &#x60;&#x60;&#x60;    ### Complex filter    &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;(firstName&#x3D;Jon OR lastName&#x3D;Smith) OR (createdIn between 2001-01-01 AND 2016-01-01)  &#x60;&#x60;&#x60;    ### Filter by range    #### Date Range    &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;createdIn between 2001-01-01 AND 2016-01-01  &#x60;&#x60;&#x60;    #### Range numeric fields    &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;age between 18 AND 25  &#x60;&#x60;&#x60;    ### Partial filter    &#x60;&#x60;&#x60;  /dataentities/CL/search?firstName&#x3D;*Maria*  &#x60;&#x60;&#x60;    ### Filter for null values    &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;firstName is null  &#x60;&#x60;&#x60;    ### Filter for non-null values    &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;firstName is not null  &#x60;&#x60;&#x60;    ### Filter for difference  &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;firstName&lt;&gt;maria  &#x60;&#x60;&#x60;    ### Filter greater than or less than  &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;number&gt;5  /dataentities/CL/search?_where&#x3D;date&lt;2001-01-01  &#x60;&#x60;&#x60; </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public void searchdocuments(String contentType, String accept, String reSTRange, String acronym, String fields, String where, String schema, String keyword, String sort) throws ApiException {
        searchdocumentsWithHttpInfo(contentType, accept, reSTRange, acronym, fields, where, schema, keyword, sort);
    }

    /**
     * Search documents
     * Search documents by the query parameters described below.    &gt; Avoid sending too many requests with wildcards (&#x60;*&#x60;) in the search parameters or that use the &#x60;keyword&#x60; parameter. This may lead to this endpoint being temporarily blocked for your account. If this happens you will receive an error with status code &#x60;503&#x60;.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param reSTRange Range of documents to show (required)
     * @param acronym Identifies the kind of data (required)
     * @param fields Fields that will be returned by document (optional, default to email,firstName,document)
     * @param where Specification of filters. As seen below (optional, default to firstName is not null)
     * @param schema Enter with the name of the schema to filter documents by compatibility of the schema. (optional, default to {{schema}})
     * @param keyword String to search (optional, default to String to search)
     * @param sort Use ASC value to sort ascending or DESC value to sort descending.  (optional, default to firstName ASC)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Use this endpoint to search Master Data v1 documents with highly customizable filters.    ## Headers    | Name |  |  | -------- | -------- |  | Content-Type | application/json |  | Accept | application/vnd.vtex.ds.v10+json |  | x-vtex-api-appKey | App Key |  | x-vtex-api-appToken | App Token |  | REST-Range | Defines the collection of documents to be returned. A range within the collection limited by 100 documents per query. |      ## Querystring    &gt; Learn more about [Master Data v1 search queries](https://developers.vtex.com/vtex-rest-api/docs/how-the-queries-in-master-data-v1-work).    | Attribute | What it does |  | -------- | -------- |  | _fields | Fields that will be returned by document |  | _where | Specification of filters |  | _keyword | Search in all fields marked as searchable |  | _sort | Sort order |    ## How to fill the querystring attributes    1. _fields: Use the field names separated by commas. Ex. &#x60;_fields&#x3D;email,firstName,document&#x60;.  2. _where: See the query examples below to learn how to use filters.  3. _keyword: Enter the value you want to query. Use quotes for a partial query. Ex. &#x60;_keyword&#x3D;Maria&#x60; or &#x60;_keyword&#x3D;*Maria*&#x60;  4. _sort: Use &#x60;ASC&#x60; value to sort ascending or &#x60;DESC&#x60; value to sort descending. Ex. &#x60;_sort&#x3D;firstName ASC&#x60;.  5. If you want to fetch all fields use the &#x60;_all&#x60; parameter in the list of response fields. Ex: &#x60;_fields&#x3D;_all&#x60;      ## Query Examples:      ### Simple filter    &#x60;&#x60;&#x60;  /dataentities/CL/search?email&#x3D;my@email.com  &#x60;&#x60;&#x60;    ### Complex filter    &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;(firstName&#x3D;Jon OR lastName&#x3D;Smith) OR (createdIn between 2001-01-01 AND 2016-01-01)  &#x60;&#x60;&#x60;    ### Filter by range    #### Date Range    &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;createdIn between 2001-01-01 AND 2016-01-01  &#x60;&#x60;&#x60;    #### Range numeric fields    &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;age between 18 AND 25  &#x60;&#x60;&#x60;    ### Partial filter    &#x60;&#x60;&#x60;  /dataentities/CL/search?firstName&#x3D;*Maria*  &#x60;&#x60;&#x60;    ### Filter for null values    &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;firstName is null  &#x60;&#x60;&#x60;    ### Filter for non-null values    &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;firstName is not null  &#x60;&#x60;&#x60;    ### Filter for difference  &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;firstName&lt;&gt;maria  &#x60;&#x60;&#x60;    ### Filter greater than or less than  &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;number&gt;5  /dataentities/CL/search?_where&#x3D;date&lt;2001-01-01  &#x60;&#x60;&#x60; </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchdocumentsWithHttpInfo(String contentType, String accept, String reSTRange, String acronym, String fields, String where, String schema, String keyword, String sort) throws ApiException {
        okhttp3.Call localVarCall = searchdocumentsValidateBeforeCall(contentType, accept, reSTRange, acronym, fields, where, schema, keyword, sort, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search documents (asynchronously)
     * Search documents by the query parameters described below.    &gt; Avoid sending too many requests with wildcards (&#x60;*&#x60;) in the search parameters or that use the &#x60;keyword&#x60; parameter. This may lead to this endpoint being temporarily blocked for your account. If this happens you will receive an error with status code &#x60;503&#x60;.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param reSTRange Range of documents to show (required)
     * @param acronym Identifies the kind of data (required)
     * @param fields Fields that will be returned by document (optional, default to email,firstName,document)
     * @param where Specification of filters. As seen below (optional, default to firstName is not null)
     * @param schema Enter with the name of the schema to filter documents by compatibility of the schema. (optional, default to {{schema}})
     * @param keyword String to search (optional, default to String to search)
     * @param sort Use ASC value to sort ascending or DESC value to sort descending.  (optional, default to firstName ASC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Use this endpoint to search Master Data v1 documents with highly customizable filters.    ## Headers    | Name |  |  | -------- | -------- |  | Content-Type | application/json |  | Accept | application/vnd.vtex.ds.v10+json |  | x-vtex-api-appKey | App Key |  | x-vtex-api-appToken | App Token |  | REST-Range | Defines the collection of documents to be returned. A range within the collection limited by 100 documents per query. |      ## Querystring    &gt; Learn more about [Master Data v1 search queries](https://developers.vtex.com/vtex-rest-api/docs/how-the-queries-in-master-data-v1-work).    | Attribute | What it does |  | -------- | -------- |  | _fields | Fields that will be returned by document |  | _where | Specification of filters |  | _keyword | Search in all fields marked as searchable |  | _sort | Sort order |    ## How to fill the querystring attributes    1. _fields: Use the field names separated by commas. Ex. &#x60;_fields&#x3D;email,firstName,document&#x60;.  2. _where: See the query examples below to learn how to use filters.  3. _keyword: Enter the value you want to query. Use quotes for a partial query. Ex. &#x60;_keyword&#x3D;Maria&#x60; or &#x60;_keyword&#x3D;*Maria*&#x60;  4. _sort: Use &#x60;ASC&#x60; value to sort ascending or &#x60;DESC&#x60; value to sort descending. Ex. &#x60;_sort&#x3D;firstName ASC&#x60;.  5. If you want to fetch all fields use the &#x60;_all&#x60; parameter in the list of response fields. Ex: &#x60;_fields&#x3D;_all&#x60;      ## Query Examples:      ### Simple filter    &#x60;&#x60;&#x60;  /dataentities/CL/search?email&#x3D;my@email.com  &#x60;&#x60;&#x60;    ### Complex filter    &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;(firstName&#x3D;Jon OR lastName&#x3D;Smith) OR (createdIn between 2001-01-01 AND 2016-01-01)  &#x60;&#x60;&#x60;    ### Filter by range    #### Date Range    &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;createdIn between 2001-01-01 AND 2016-01-01  &#x60;&#x60;&#x60;    #### Range numeric fields    &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;age between 18 AND 25  &#x60;&#x60;&#x60;    ### Partial filter    &#x60;&#x60;&#x60;  /dataentities/CL/search?firstName&#x3D;*Maria*  &#x60;&#x60;&#x60;    ### Filter for null values    &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;firstName is null  &#x60;&#x60;&#x60;    ### Filter for non-null values    &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;firstName is not null  &#x60;&#x60;&#x60;    ### Filter for difference  &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;firstName&lt;&gt;maria  &#x60;&#x60;&#x60;    ### Filter greater than or less than  &#x60;&#x60;&#x60;  /dataentities/CL/search?_where&#x3D;number&gt;5  /dataentities/CL/search?_where&#x3D;date&lt;2001-01-01  &#x60;&#x60;&#x60; </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchdocumentsAsync(String contentType, String accept, String reSTRange, String acronym, String fields, String where, String schema, String keyword, String sort, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchdocumentsValidateBeforeCall(contentType, accept, reSTRange, acronym, fields, where, schema, keyword, sort, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
