/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KitItemsInner model module.
 * @module model/KitItemsInner
 * @version 1.0
 */
class KitItemsInner {
    /**
     * Constructs a new <code>KitItemsInner</code>.
     * @alias module:model/KitItemsInner
     * @param amount {Number} Amount of the SKU component in the kit.
     * @param itemId {String} SKU kit component ID.
     */
    constructor(amount, itemId) { 
        
        KitItemsInner.initialize(this, amount, itemId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, itemId) { 
        obj['amount'] = amount;
        obj['itemId'] = itemId;
    }

    /**
     * Constructs a <code>KitItemsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KitItemsInner} obj Optional instance to populate.
     * @return {module:model/KitItemsInner} The populated <code>KitItemsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KitItemsInner();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('itemId')) {
                obj['itemId'] = ApiClient.convertToType(data['itemId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KitItemsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KitItemsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of KitItemsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['itemId'] && !(typeof data['itemId'] === 'string' || data['itemId'] instanceof String)) {
            throw new Error("Expected the field `itemId` to be a primitive type in the JSON string but got " + data['itemId']);
        }

        return true;
    }


}

KitItemsInner.RequiredProperties = ["amount", "itemId"];

/**
 * Amount of the SKU component in the kit.
 * @member {Number} amount
 */
KitItemsInner.prototype['amount'] = undefined;

/**
 * SKU kit component ID.
 * @member {String} itemId
 */
KitItemsInner.prototype['itemId'] = undefined;






export default KitItemsInner;

