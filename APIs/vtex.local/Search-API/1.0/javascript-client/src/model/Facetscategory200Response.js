/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BrandsInner from './BrandsInner';
import CategoriesTreesInner from './CategoriesTreesInner';
import DepartmentsInner from './DepartmentsInner';
import Summary from './Summary';

/**
 * The Facetscategory200Response model module.
 * @module model/Facetscategory200Response
 * @version 1.0
 */
class Facetscategory200Response {
    /**
     * Constructs a new <code>Facetscategory200Response</code>.
     * @alias module:model/Facetscategory200Response
     * @param brands {Array.<module:model/BrandsInner>} Array of general information about the brands.
     * @param categoriesTrees {Array.<module:model/CategoriesTreesInner>} Array of the category tree.
     * @param departments {Array.<module:model/DepartmentsInner>} Array of general information about the categories.
     * @param priceRanges {Array.<Object>} Array with general information of the price ranges.
     * @param specificationFilters {Object} Object with general information of specifications.
     * @param summary {module:model/Summary} 
     */
    constructor(brands, categoriesTrees, departments, priceRanges, specificationFilters, summary) { 
        
        Facetscategory200Response.initialize(this, brands, categoriesTrees, departments, priceRanges, specificationFilters, summary);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, brands, categoriesTrees, departments, priceRanges, specificationFilters, summary) { 
        obj['Brands'] = brands;
        obj['CategoriesTrees'] = categoriesTrees;
        obj['Departments'] = departments;
        obj['PriceRanges'] = priceRanges;
        obj['SpecificationFilters'] = specificationFilters;
        obj['Summary'] = summary;
    }

    /**
     * Constructs a <code>Facetscategory200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Facetscategory200Response} obj Optional instance to populate.
     * @return {module:model/Facetscategory200Response} The populated <code>Facetscategory200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Facetscategory200Response();

            if (data.hasOwnProperty('Brands')) {
                obj['Brands'] = ApiClient.convertToType(data['Brands'], [BrandsInner]);
            }
            if (data.hasOwnProperty('CategoriesTrees')) {
                obj['CategoriesTrees'] = ApiClient.convertToType(data['CategoriesTrees'], [CategoriesTreesInner]);
            }
            if (data.hasOwnProperty('Departments')) {
                obj['Departments'] = ApiClient.convertToType(data['Departments'], [DepartmentsInner]);
            }
            if (data.hasOwnProperty('PriceRanges')) {
                obj['PriceRanges'] = ApiClient.convertToType(data['PriceRanges'], [Object]);
            }
            if (data.hasOwnProperty('SpecificationFilters')) {
                obj['SpecificationFilters'] = ApiClient.convertToType(data['SpecificationFilters'], Object);
            }
            if (data.hasOwnProperty('Summary')) {
                obj['Summary'] = Summary.constructFromObject(data['Summary']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Facetscategory200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Facetscategory200Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Facetscategory200Response.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['Brands']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Brands'])) {
                throw new Error("Expected the field `Brands` to be an array in the JSON data but got " + data['Brands']);
            }
            // validate the optional field `Brands` (array)
            for (const item of data['Brands']) {
                BrandsInner.validateJSON(item);
            };
        }
        if (data['CategoriesTrees']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['CategoriesTrees'])) {
                throw new Error("Expected the field `CategoriesTrees` to be an array in the JSON data but got " + data['CategoriesTrees']);
            }
            // validate the optional field `CategoriesTrees` (array)
            for (const item of data['CategoriesTrees']) {
                CategoriesTreesInner.validateJSON(item);
            };
        }
        if (data['Departments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Departments'])) {
                throw new Error("Expected the field `Departments` to be an array in the JSON data but got " + data['Departments']);
            }
            // validate the optional field `Departments` (array)
            for (const item of data['Departments']) {
                DepartmentsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['PriceRanges'])) {
            throw new Error("Expected the field `PriceRanges` to be an array in the JSON data but got " + data['PriceRanges']);
        }
        // validate the optional field `Summary`
        if (data['Summary']) { // data not null
          Summary.validateJSON(data['Summary']);
        }

        return true;
    }


}

Facetscategory200Response.RequiredProperties = ["Brands", "CategoriesTrees", "Departments", "PriceRanges", "SpecificationFilters", "Summary"];

/**
 * Array of general information about the brands.
 * @member {Array.<module:model/BrandsInner>} Brands
 */
Facetscategory200Response.prototype['Brands'] = undefined;

/**
 * Array of the category tree.
 * @member {Array.<module:model/CategoriesTreesInner>} CategoriesTrees
 */
Facetscategory200Response.prototype['CategoriesTrees'] = undefined;

/**
 * Array of general information about the categories.
 * @member {Array.<module:model/DepartmentsInner>} Departments
 */
Facetscategory200Response.prototype['Departments'] = undefined;

/**
 * Array with general information of the price ranges.
 * @member {Array.<Object>} PriceRanges
 */
Facetscategory200Response.prototype['PriceRanges'] = undefined;

/**
 * Object with general information of specifications.
 * @member {Object} SpecificationFilters
 */
Facetscategory200Response.prototype['SpecificationFilters'] = undefined;

/**
 * @member {module:model/Summary} Summary
 */
Facetscategory200Response.prototype['Summary'] = undefined;






export default Facetscategory200Response;

