/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItemsInner from './ItemsInner';

/**
 * The ProductSearchWhoBoughtAlsoBought200ResponseInner model module.
 * @module model/ProductSearchWhoBoughtAlsoBought200ResponseInner
 * @version 1.0
 */
class ProductSearchWhoBoughtAlsoBought200ResponseInner {
    /**
     * Constructs a new <code>ProductSearchWhoBoughtAlsoBought200ResponseInner</code>.
     * @alias module:model/ProductSearchWhoBoughtAlsoBought200ResponseInner
     * @param allSpecifications {Array.<String>} Array of the product's specifications.
     * @param allSpecificationsGroups {Array.<String>} Array of the product's specifications groups.
     * @param brand {String} Brand name.
     * @param brandId {Number} Product brand ID.
     * @param brandImageUrl {String} Product's brand image URL.
     * @param categories {Array.<Object>} Array of the product's categories URLs.
     * @param categoriesIds {Array.<Object>} Array of the product's categories IDs.
     * @param categoryId {String} Product category ID.
     * @param clusterHighlights {Object} Cluster highlight ID and name.
     * @param description {String} Description of the main information related to the product. A simple and easy to understand summary for the customer.
     * @param items {Array.<module:model/ItemsInner>} Array containing the product SKU general information.
     * @param link {String} Product URL.
     * @param linkText {String} Product URL.
     * @param metaTagDescription {String} Brief description of the category. It's recommended that you don't exceed 150 characters so that the search engines can display it correctly in the results page.
     * @param productClusters {Object} Product clusters' IDs and names.
     * @param productId {String} Product unique identifier.
     * @param productName {String} Product name.
     * @param productReference {String} Product reference.
     * @param productReferenceCode {Number} Product reference ID.
     * @param productTitle {String} Text that is in the browser tab and corresponds to the title of the product page. This field is important for SEO.
     * @param releaseDate {String} Product release date.
     * @param searchableClusters {Object} Searchable clusters IDs and names
     */
    constructor(allSpecifications, allSpecificationsGroups, brand, brandId, brandImageUrl, categories, categoriesIds, categoryId, clusterHighlights, description, items, link, linkText, metaTagDescription, productClusters, productId, productName, productReference, productReferenceCode, productTitle, releaseDate, searchableClusters) { 
        
        ProductSearchWhoBoughtAlsoBought200ResponseInner.initialize(this, allSpecifications, allSpecificationsGroups, brand, brandId, brandImageUrl, categories, categoriesIds, categoryId, clusterHighlights, description, items, link, linkText, metaTagDescription, productClusters, productId, productName, productReference, productReferenceCode, productTitle, releaseDate, searchableClusters);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, allSpecifications, allSpecificationsGroups, brand, brandId, brandImageUrl, categories, categoriesIds, categoryId, clusterHighlights, description, items, link, linkText, metaTagDescription, productClusters, productId, productName, productReference, productReferenceCode, productTitle, releaseDate, searchableClusters) { 
        obj['allSpecifications'] = allSpecifications;
        obj['allSpecificationsGroups'] = allSpecificationsGroups;
        obj['brand'] = brand;
        obj['brandId'] = brandId;
        obj['brandImageUrl'] = brandImageUrl;
        obj['categories'] = categories;
        obj['categoriesIds'] = categoriesIds;
        obj['categoryId'] = categoryId;
        obj['clusterHighlights'] = clusterHighlights;
        obj['description'] = description;
        obj['items'] = items;
        obj['link'] = link;
        obj['linkText'] = linkText;
        obj['metaTagDescription'] = metaTagDescription;
        obj['productClusters'] = productClusters;
        obj['productId'] = productId;
        obj['productName'] = productName;
        obj['productReference'] = productReference;
        obj['productReferenceCode'] = productReferenceCode;
        obj['productTitle'] = productTitle;
        obj['releaseDate'] = releaseDate;
        obj['searchableClusters'] = searchableClusters;
    }

    /**
     * Constructs a <code>ProductSearchWhoBoughtAlsoBought200ResponseInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductSearchWhoBoughtAlsoBought200ResponseInner} obj Optional instance to populate.
     * @return {module:model/ProductSearchWhoBoughtAlsoBought200ResponseInner} The populated <code>ProductSearchWhoBoughtAlsoBought200ResponseInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductSearchWhoBoughtAlsoBought200ResponseInner();

            if (data.hasOwnProperty('allSpecifications')) {
                obj['allSpecifications'] = ApiClient.convertToType(data['allSpecifications'], ['String']);
            }
            if (data.hasOwnProperty('allSpecificationsGroups')) {
                obj['allSpecificationsGroups'] = ApiClient.convertToType(data['allSpecificationsGroups'], ['String']);
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('brandId')) {
                obj['brandId'] = ApiClient.convertToType(data['brandId'], 'Number');
            }
            if (data.hasOwnProperty('brandImageUrl')) {
                obj['brandImageUrl'] = ApiClient.convertToType(data['brandImageUrl'], 'String');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [Object]);
            }
            if (data.hasOwnProperty('categoriesIds')) {
                obj['categoriesIds'] = ApiClient.convertToType(data['categoriesIds'], [Object]);
            }
            if (data.hasOwnProperty('categoryId')) {
                obj['categoryId'] = ApiClient.convertToType(data['categoryId'], 'String');
            }
            if (data.hasOwnProperty('clusterHighlights')) {
                obj['clusterHighlights'] = ApiClient.convertToType(data['clusterHighlights'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [ItemsInner]);
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('linkText')) {
                obj['linkText'] = ApiClient.convertToType(data['linkText'], 'String');
            }
            if (data.hasOwnProperty('metaTagDescription')) {
                obj['metaTagDescription'] = ApiClient.convertToType(data['metaTagDescription'], 'String');
            }
            if (data.hasOwnProperty('productClusters')) {
                obj['productClusters'] = ApiClient.convertToType(data['productClusters'], Object);
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
            if (data.hasOwnProperty('productName')) {
                obj['productName'] = ApiClient.convertToType(data['productName'], 'String');
            }
            if (data.hasOwnProperty('productReference')) {
                obj['productReference'] = ApiClient.convertToType(data['productReference'], 'String');
            }
            if (data.hasOwnProperty('productReferenceCode')) {
                obj['productReferenceCode'] = ApiClient.convertToType(data['productReferenceCode'], 'Number');
            }
            if (data.hasOwnProperty('productTitle')) {
                obj['productTitle'] = ApiClient.convertToType(data['productTitle'], 'String');
            }
            if (data.hasOwnProperty('releaseDate')) {
                obj['releaseDate'] = ApiClient.convertToType(data['releaseDate'], 'String');
            }
            if (data.hasOwnProperty('searchableClusters')) {
                obj['searchableClusters'] = ApiClient.convertToType(data['searchableClusters'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductSearchWhoBoughtAlsoBought200ResponseInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductSearchWhoBoughtAlsoBought200ResponseInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProductSearchWhoBoughtAlsoBought200ResponseInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allSpecifications'])) {
            throw new Error("Expected the field `allSpecifications` to be an array in the JSON data but got " + data['allSpecifications']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allSpecificationsGroups'])) {
            throw new Error("Expected the field `allSpecificationsGroups` to be an array in the JSON data but got " + data['allSpecificationsGroups']);
        }
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['brandImageUrl'] && !(typeof data['brandImageUrl'] === 'string' || data['brandImageUrl'] instanceof String)) {
            throw new Error("Expected the field `brandImageUrl` to be a primitive type in the JSON string but got " + data['brandImageUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categoriesIds'])) {
            throw new Error("Expected the field `categoriesIds` to be an array in the JSON data but got " + data['categoriesIds']);
        }
        // ensure the json data is a string
        if (data['categoryId'] && !(typeof data['categoryId'] === 'string' || data['categoryId'] instanceof String)) {
            throw new Error("Expected the field `categoryId` to be a primitive type in the JSON string but got " + data['categoryId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                ItemsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['linkText'] && !(typeof data['linkText'] === 'string' || data['linkText'] instanceof String)) {
            throw new Error("Expected the field `linkText` to be a primitive type in the JSON string but got " + data['linkText']);
        }
        // ensure the json data is a string
        if (data['metaTagDescription'] && !(typeof data['metaTagDescription'] === 'string' || data['metaTagDescription'] instanceof String)) {
            throw new Error("Expected the field `metaTagDescription` to be a primitive type in the JSON string but got " + data['metaTagDescription']);
        }
        // ensure the json data is a string
        if (data['productId'] && !(typeof data['productId'] === 'string' || data['productId'] instanceof String)) {
            throw new Error("Expected the field `productId` to be a primitive type in the JSON string but got " + data['productId']);
        }
        // ensure the json data is a string
        if (data['productName'] && !(typeof data['productName'] === 'string' || data['productName'] instanceof String)) {
            throw new Error("Expected the field `productName` to be a primitive type in the JSON string but got " + data['productName']);
        }
        // ensure the json data is a string
        if (data['productReference'] && !(typeof data['productReference'] === 'string' || data['productReference'] instanceof String)) {
            throw new Error("Expected the field `productReference` to be a primitive type in the JSON string but got " + data['productReference']);
        }
        // ensure the json data is a string
        if (data['productTitle'] && !(typeof data['productTitle'] === 'string' || data['productTitle'] instanceof String)) {
            throw new Error("Expected the field `productTitle` to be a primitive type in the JSON string but got " + data['productTitle']);
        }
        // ensure the json data is a string
        if (data['releaseDate'] && !(typeof data['releaseDate'] === 'string' || data['releaseDate'] instanceof String)) {
            throw new Error("Expected the field `releaseDate` to be a primitive type in the JSON string but got " + data['releaseDate']);
        }

        return true;
    }


}

ProductSearchWhoBoughtAlsoBought200ResponseInner.RequiredProperties = ["allSpecifications", "allSpecificationsGroups", "brand", "brandId", "brandImageUrl", "categories", "categoriesIds", "categoryId", "clusterHighlights", "description", "items", "link", "linkText", "metaTagDescription", "productClusters", "productId", "productName", "productReference", "productReferenceCode", "productTitle", "releaseDate", "searchableClusters"];

/**
 * Array of the product's specifications.
 * @member {Array.<String>} allSpecifications
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['allSpecifications'] = undefined;

/**
 * Array of the product's specifications groups.
 * @member {Array.<String>} allSpecificationsGroups
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['allSpecificationsGroups'] = undefined;

/**
 * Brand name.
 * @member {String} brand
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['brand'] = undefined;

/**
 * Product brand ID.
 * @member {Number} brandId
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['brandId'] = undefined;

/**
 * Product's brand image URL.
 * @member {String} brandImageUrl
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['brandImageUrl'] = undefined;

/**
 * Array of the product's categories URLs.
 * @member {Array.<Object>} categories
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['categories'] = undefined;

/**
 * Array of the product's categories IDs.
 * @member {Array.<Object>} categoriesIds
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['categoriesIds'] = undefined;

/**
 * Product category ID.
 * @member {String} categoryId
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['categoryId'] = undefined;

/**
 * Cluster highlight ID and name.
 * @member {Object} clusterHighlights
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['clusterHighlights'] = undefined;

/**
 * Description of the main information related to the product. A simple and easy to understand summary for the customer.
 * @member {String} description
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['description'] = undefined;

/**
 * Array containing the product SKU general information.
 * @member {Array.<module:model/ItemsInner>} items
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['items'] = undefined;

/**
 * Product URL.
 * @member {String} link
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['link'] = undefined;

/**
 * Product URL.
 * @member {String} linkText
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['linkText'] = undefined;

/**
 * Brief description of the category. It's recommended that you don't exceed 150 characters so that the search engines can display it correctly in the results page.
 * @member {String} metaTagDescription
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['metaTagDescription'] = undefined;

/**
 * Product clusters' IDs and names.
 * @member {Object} productClusters
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['productClusters'] = undefined;

/**
 * Product unique identifier.
 * @member {String} productId
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['productId'] = undefined;

/**
 * Product name.
 * @member {String} productName
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['productName'] = undefined;

/**
 * Product reference.
 * @member {String} productReference
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['productReference'] = undefined;

/**
 * Product reference ID.
 * @member {Number} productReferenceCode
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['productReferenceCode'] = undefined;

/**
 * Text that is in the browser tab and corresponds to the title of the product page. This field is important for SEO.
 * @member {String} productTitle
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['productTitle'] = undefined;

/**
 * Product release date.
 * @member {String} releaseDate
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['releaseDate'] = undefined;

/**
 * Searchable clusters IDs and names
 * @member {Object} searchableClusters
 */
ProductSearchWhoBoughtAlsoBought200ResponseInner.prototype['searchableClusters'] = undefined;






export default ProductSearchWhoBoughtAlsoBought200ResponseInner;

