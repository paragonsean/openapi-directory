/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeliverySlaSamplesInner from './DeliverySlaSamplesInner';
import DeliverySlaSamplesPerRegion from './DeliverySlaSamplesPerRegion';
import InstallmentsInner from './InstallmentsInner';
import PaymentOptions from './PaymentOptions';

/**
 * The CommertialOffer model module.
 * @module model/CommertialOffer
 * @version 1.0
 */
class CommertialOffer {
    /**
     * Constructs a new <code>CommertialOffer</code>.
     * AKA Commertial Condition.
     * @alias module:model/CommertialOffer
     * @param availableQuantity {Number} Use the `IsAvailable` field instead.
     * @param buyTogether {Array.<Object>} Array of other products that can be bought together with the product in question.
     * @param cacheVersionUsedToCallCheckout {String} Cache version used to call checkout.
     * @param deliverySlaSamples {Array.<module:model/DeliverySlaSamplesInner>} Delivery SLA samples.
     * @param deliverySlaSamplesPerRegion {module:model/DeliverySlaSamplesPerRegion} 
     * @param discountHighLight {Array.<Object>} Discount hightlight.
     * @param getInfoErrorMessage {String} Get info error message.
     * @param giftSkuIds {Array.<Object>} Array of SKU gifts IDs.
     * @param installments {Array.<module:model/InstallmentsInner>} Installments options.
     * @param isAvailable {Boolean} If the product is available or not.
     * @param itemMetadataAttachment {Array.<Object>} Item metadata attachment.
     * @param listPrice {Number} List price of the product.
     * @param paymentOptions {module:model/PaymentOptions} 
     * @param price {Number} Price of the product.
     * @param priceValidUntil {String} Price of the product valid until a certain date.
     * @param priceWithoutDiscount {Number} Price of the product without discount.
     * @param rewardValue {Number} Reward value of the product.
     * @param saleChannel {Number} Trade policy which the product is contained.
     * @param tax {Number} Tax of the product.
     * @param teasers {Array.<Object>} Teasers.
     */
    constructor(availableQuantity, buyTogether, cacheVersionUsedToCallCheckout, deliverySlaSamples, deliverySlaSamplesPerRegion, discountHighLight, getInfoErrorMessage, giftSkuIds, installments, isAvailable, itemMetadataAttachment, listPrice, paymentOptions, price, priceValidUntil, priceWithoutDiscount, rewardValue, saleChannel, tax, teasers) { 
        
        CommertialOffer.initialize(this, availableQuantity, buyTogether, cacheVersionUsedToCallCheckout, deliverySlaSamples, deliverySlaSamplesPerRegion, discountHighLight, getInfoErrorMessage, giftSkuIds, installments, isAvailable, itemMetadataAttachment, listPrice, paymentOptions, price, priceValidUntil, priceWithoutDiscount, rewardValue, saleChannel, tax, teasers);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, availableQuantity, buyTogether, cacheVersionUsedToCallCheckout, deliverySlaSamples, deliverySlaSamplesPerRegion, discountHighLight, getInfoErrorMessage, giftSkuIds, installments, isAvailable, itemMetadataAttachment, listPrice, paymentOptions, price, priceValidUntil, priceWithoutDiscount, rewardValue, saleChannel, tax, teasers) { 
        obj['AvailableQuantity'] = availableQuantity;
        obj['BuyTogether'] = buyTogether;
        obj['CacheVersionUsedToCallCheckout'] = cacheVersionUsedToCallCheckout;
        obj['DeliverySlaSamples'] = deliverySlaSamples;
        obj['DeliverySlaSamplesPerRegion'] = deliverySlaSamplesPerRegion;
        obj['DiscountHighLight'] = discountHighLight;
        obj['GetInfoErrorMessage'] = getInfoErrorMessage;
        obj['GiftSkuIds'] = giftSkuIds;
        obj['Installments'] = installments;
        obj['IsAvailable'] = isAvailable;
        obj['ItemMetadataAttachment'] = itemMetadataAttachment;
        obj['ListPrice'] = listPrice;
        obj['PaymentOptions'] = paymentOptions;
        obj['Price'] = price;
        obj['PriceValidUntil'] = priceValidUntil;
        obj['PriceWithoutDiscount'] = priceWithoutDiscount;
        obj['RewardValue'] = rewardValue;
        obj['SaleChannel'] = saleChannel;
        obj['Tax'] = tax;
        obj['Teasers'] = teasers;
    }

    /**
     * Constructs a <code>CommertialOffer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommertialOffer} obj Optional instance to populate.
     * @return {module:model/CommertialOffer} The populated <code>CommertialOffer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommertialOffer();

            if (data.hasOwnProperty('AvailableQuantity')) {
                obj['AvailableQuantity'] = ApiClient.convertToType(data['AvailableQuantity'], 'Number');
            }
            if (data.hasOwnProperty('BuyTogether')) {
                obj['BuyTogether'] = ApiClient.convertToType(data['BuyTogether'], [Object]);
            }
            if (data.hasOwnProperty('CacheVersionUsedToCallCheckout')) {
                obj['CacheVersionUsedToCallCheckout'] = ApiClient.convertToType(data['CacheVersionUsedToCallCheckout'], 'String');
            }
            if (data.hasOwnProperty('DeliverySlaSamples')) {
                obj['DeliverySlaSamples'] = ApiClient.convertToType(data['DeliverySlaSamples'], [DeliverySlaSamplesInner]);
            }
            if (data.hasOwnProperty('DeliverySlaSamplesPerRegion')) {
                obj['DeliverySlaSamplesPerRegion'] = DeliverySlaSamplesPerRegion.constructFromObject(data['DeliverySlaSamplesPerRegion']);
            }
            if (data.hasOwnProperty('DiscountHighLight')) {
                obj['DiscountHighLight'] = ApiClient.convertToType(data['DiscountHighLight'], [Object]);
            }
            if (data.hasOwnProperty('GetInfoErrorMessage')) {
                obj['GetInfoErrorMessage'] = ApiClient.convertToType(data['GetInfoErrorMessage'], 'String');
            }
            if (data.hasOwnProperty('GiftSkuIds')) {
                obj['GiftSkuIds'] = ApiClient.convertToType(data['GiftSkuIds'], [Object]);
            }
            if (data.hasOwnProperty('Installments')) {
                obj['Installments'] = ApiClient.convertToType(data['Installments'], [InstallmentsInner]);
            }
            if (data.hasOwnProperty('IsAvailable')) {
                obj['IsAvailable'] = ApiClient.convertToType(data['IsAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('ItemMetadataAttachment')) {
                obj['ItemMetadataAttachment'] = ApiClient.convertToType(data['ItemMetadataAttachment'], [Object]);
            }
            if (data.hasOwnProperty('ListPrice')) {
                obj['ListPrice'] = ApiClient.convertToType(data['ListPrice'], 'Number');
            }
            if (data.hasOwnProperty('PaymentOptions')) {
                obj['PaymentOptions'] = PaymentOptions.constructFromObject(data['PaymentOptions']);
            }
            if (data.hasOwnProperty('Price')) {
                obj['Price'] = ApiClient.convertToType(data['Price'], 'Number');
            }
            if (data.hasOwnProperty('PriceValidUntil')) {
                obj['PriceValidUntil'] = ApiClient.convertToType(data['PriceValidUntil'], 'String');
            }
            if (data.hasOwnProperty('PriceWithoutDiscount')) {
                obj['PriceWithoutDiscount'] = ApiClient.convertToType(data['PriceWithoutDiscount'], 'Number');
            }
            if (data.hasOwnProperty('RewardValue')) {
                obj['RewardValue'] = ApiClient.convertToType(data['RewardValue'], 'Number');
            }
            if (data.hasOwnProperty('SaleChannel')) {
                obj['SaleChannel'] = ApiClient.convertToType(data['SaleChannel'], 'Number');
            }
            if (data.hasOwnProperty('Tax')) {
                obj['Tax'] = ApiClient.convertToType(data['Tax'], 'Number');
            }
            if (data.hasOwnProperty('Teasers')) {
                obj['Teasers'] = ApiClient.convertToType(data['Teasers'], [Object]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommertialOffer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommertialOffer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CommertialOffer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['BuyTogether'])) {
            throw new Error("Expected the field `BuyTogether` to be an array in the JSON data but got " + data['BuyTogether']);
        }
        // ensure the json data is a string
        if (data['CacheVersionUsedToCallCheckout'] && !(typeof data['CacheVersionUsedToCallCheckout'] === 'string' || data['CacheVersionUsedToCallCheckout'] instanceof String)) {
            throw new Error("Expected the field `CacheVersionUsedToCallCheckout` to be a primitive type in the JSON string but got " + data['CacheVersionUsedToCallCheckout']);
        }
        if (data['DeliverySlaSamples']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['DeliverySlaSamples'])) {
                throw new Error("Expected the field `DeliverySlaSamples` to be an array in the JSON data but got " + data['DeliverySlaSamples']);
            }
            // validate the optional field `DeliverySlaSamples` (array)
            for (const item of data['DeliverySlaSamples']) {
                DeliverySlaSamplesInner.validateJSON(item);
            };
        }
        // validate the optional field `DeliverySlaSamplesPerRegion`
        if (data['DeliverySlaSamplesPerRegion']) { // data not null
          DeliverySlaSamplesPerRegion.validateJSON(data['DeliverySlaSamplesPerRegion']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['DiscountHighLight'])) {
            throw new Error("Expected the field `DiscountHighLight` to be an array in the JSON data but got " + data['DiscountHighLight']);
        }
        // ensure the json data is a string
        if (data['GetInfoErrorMessage'] && !(typeof data['GetInfoErrorMessage'] === 'string' || data['GetInfoErrorMessage'] instanceof String)) {
            throw new Error("Expected the field `GetInfoErrorMessage` to be a primitive type in the JSON string but got " + data['GetInfoErrorMessage']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['GiftSkuIds'])) {
            throw new Error("Expected the field `GiftSkuIds` to be an array in the JSON data but got " + data['GiftSkuIds']);
        }
        if (data['Installments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Installments'])) {
                throw new Error("Expected the field `Installments` to be an array in the JSON data but got " + data['Installments']);
            }
            // validate the optional field `Installments` (array)
            for (const item of data['Installments']) {
                InstallmentsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ItemMetadataAttachment'])) {
            throw new Error("Expected the field `ItemMetadataAttachment` to be an array in the JSON data but got " + data['ItemMetadataAttachment']);
        }
        // validate the optional field `PaymentOptions`
        if (data['PaymentOptions']) { // data not null
          PaymentOptions.validateJSON(data['PaymentOptions']);
        }
        // ensure the json data is a string
        if (data['PriceValidUntil'] && !(typeof data['PriceValidUntil'] === 'string' || data['PriceValidUntil'] instanceof String)) {
            throw new Error("Expected the field `PriceValidUntil` to be a primitive type in the JSON string but got " + data['PriceValidUntil']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Teasers'])) {
            throw new Error("Expected the field `Teasers` to be an array in the JSON data but got " + data['Teasers']);
        }

        return true;
    }


}

CommertialOffer.RequiredProperties = ["AvailableQuantity", "BuyTogether", "CacheVersionUsedToCallCheckout", "DeliverySlaSamples", "DeliverySlaSamplesPerRegion", "DiscountHighLight", "GetInfoErrorMessage", "GiftSkuIds", "Installments", "IsAvailable", "ItemMetadataAttachment", "ListPrice", "PaymentOptions", "Price", "PriceValidUntil", "PriceWithoutDiscount", "RewardValue", "SaleChannel", "Tax", "Teasers"];

/**
 * Use the `IsAvailable` field instead.
 * @member {Number} AvailableQuantity
 */
CommertialOffer.prototype['AvailableQuantity'] = undefined;

/**
 * Array of other products that can be bought together with the product in question.
 * @member {Array.<Object>} BuyTogether
 */
CommertialOffer.prototype['BuyTogether'] = undefined;

/**
 * Cache version used to call checkout.
 * @member {String} CacheVersionUsedToCallCheckout
 */
CommertialOffer.prototype['CacheVersionUsedToCallCheckout'] = undefined;

/**
 * Delivery SLA samples.
 * @member {Array.<module:model/DeliverySlaSamplesInner>} DeliverySlaSamples
 */
CommertialOffer.prototype['DeliverySlaSamples'] = undefined;

/**
 * @member {module:model/DeliverySlaSamplesPerRegion} DeliverySlaSamplesPerRegion
 */
CommertialOffer.prototype['DeliverySlaSamplesPerRegion'] = undefined;

/**
 * Discount hightlight.
 * @member {Array.<Object>} DiscountHighLight
 */
CommertialOffer.prototype['DiscountHighLight'] = undefined;

/**
 * Get info error message.
 * @member {String} GetInfoErrorMessage
 */
CommertialOffer.prototype['GetInfoErrorMessage'] = undefined;

/**
 * Array of SKU gifts IDs.
 * @member {Array.<Object>} GiftSkuIds
 */
CommertialOffer.prototype['GiftSkuIds'] = undefined;

/**
 * Installments options.
 * @member {Array.<module:model/InstallmentsInner>} Installments
 */
CommertialOffer.prototype['Installments'] = undefined;

/**
 * If the product is available or not.
 * @member {Boolean} IsAvailable
 */
CommertialOffer.prototype['IsAvailable'] = undefined;

/**
 * Item metadata attachment.
 * @member {Array.<Object>} ItemMetadataAttachment
 */
CommertialOffer.prototype['ItemMetadataAttachment'] = undefined;

/**
 * List price of the product.
 * @member {Number} ListPrice
 */
CommertialOffer.prototype['ListPrice'] = undefined;

/**
 * @member {module:model/PaymentOptions} PaymentOptions
 */
CommertialOffer.prototype['PaymentOptions'] = undefined;

/**
 * Price of the product.
 * @member {Number} Price
 */
CommertialOffer.prototype['Price'] = undefined;

/**
 * Price of the product valid until a certain date.
 * @member {String} PriceValidUntil
 */
CommertialOffer.prototype['PriceValidUntil'] = undefined;

/**
 * Price of the product without discount.
 * @member {Number} PriceWithoutDiscount
 */
CommertialOffer.prototype['PriceWithoutDiscount'] = undefined;

/**
 * Reward value of the product.
 * @member {Number} RewardValue
 */
CommertialOffer.prototype['RewardValue'] = undefined;

/**
 * Trade policy which the product is contained.
 * @member {Number} SaleChannel
 */
CommertialOffer.prototype['SaleChannel'] = undefined;

/**
 * Tax of the product.
 * @member {Number} Tax
 */
CommertialOffer.prototype['Tax'] = undefined;

/**
 * Teasers.
 * @member {Array.<Object>} Teasers
 */
CommertialOffer.prototype['Teasers'] = undefined;






export default CommertialOffer;

