/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AplicativosDeTV from './AplicativosDeTV';
import ResoluO from './ResoluO';
import TamanhoDaTela from './TamanhoDaTela';

/**
 * The SpecificationFilters model module.
 * @module model/SpecificationFilters
 * @version 1.0
 */
class SpecificationFilters {
    /**
     * Constructs a new <code>SpecificationFilters</code>.
     * @alias module:model/SpecificationFilters
     * @param aplicativosDeTV {Array.<module:model/AplicativosDeTV>} 
     * @param resoluo {Array.<module:model/ResoluO>} 
     * @param tamanhoDaTela {Array.<module:model/TamanhoDaTela>} 
     */
    constructor(aplicativosDeTV, resoluo, tamanhoDaTela) { 
        
        SpecificationFilters.initialize(this, aplicativosDeTV, resoluo, tamanhoDaTela);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, aplicativosDeTV, resoluo, tamanhoDaTela) { 
        obj['Aplicativos de TV'] = aplicativosDeTV;
        obj['Resolução'] = resoluo;
        obj['Tamanho da Tela'] = tamanhoDaTela;
    }

    /**
     * Constructs a <code>SpecificationFilters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SpecificationFilters} obj Optional instance to populate.
     * @return {module:model/SpecificationFilters} The populated <code>SpecificationFilters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SpecificationFilters();

            if (data.hasOwnProperty('Aplicativos de TV')) {
                obj['Aplicativos de TV'] = ApiClient.convertToType(data['Aplicativos de TV'], [AplicativosDeTV]);
            }
            if (data.hasOwnProperty('Resolução')) {
                obj['Resolução'] = ApiClient.convertToType(data['Resolução'], [ResoluO]);
            }
            if (data.hasOwnProperty('Tamanho da Tela')) {
                obj['Tamanho da Tela'] = ApiClient.convertToType(data['Tamanho da Tela'], [TamanhoDaTela]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SpecificationFilters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SpecificationFilters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SpecificationFilters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['Aplicativos de TV']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Aplicativos de TV'])) {
                throw new Error("Expected the field `Aplicativos de TV` to be an array in the JSON data but got " + data['Aplicativos de TV']);
            }
            // validate the optional field `Aplicativos de TV` (array)
            for (const item of data['Aplicativos de TV']) {
                AplicativosDeTV.validateJSON(item);
            };
        }
        if (data['Resolução']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Resolução'])) {
                throw new Error("Expected the field `Resolução` to be an array in the JSON data but got " + data['Resolução']);
            }
            // validate the optional field `Resolução` (array)
            for (const item of data['Resolução']) {
                ResoluO.validateJSON(item);
            };
        }
        if (data['Tamanho da Tela']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Tamanho da Tela'])) {
                throw new Error("Expected the field `Tamanho da Tela` to be an array in the JSON data but got " + data['Tamanho da Tela']);
            }
            // validate the optional field `Tamanho da Tela` (array)
            for (const item of data['Tamanho da Tela']) {
                TamanhoDaTela.validateJSON(item);
            };
        }

        return true;
    }


}

SpecificationFilters.RequiredProperties = ["Aplicativos de TV", "Resolução", "Tamanho da Tela"];

/**
 * 
 * @member {Array.<module:model/AplicativosDeTV>} Aplicativos de TV
 */
SpecificationFilters.prototype['Aplicativos de TV'] = undefined;

/**
 * 
 * @member {Array.<module:model/ResoluO>} Resolução
 */
SpecificationFilters.prototype['Resolução'] = undefined;

/**
 * 
 * @member {Array.<module:model/TamanhoDaTela>} Tamanho da Tela
 */
SpecificationFilters.prototype['Tamanho da Tela'] = undefined;






export default SpecificationFilters;

