/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TheRootSchema from '../model/TheRootSchema';

/**
* Autocomplete service.
* @module api/AutocompleteApi
* @version 1.0
*/
export default class AutocompleteApi {

    /**
    * Constructs a new AutocompleteApi. 
    * @alias module:api/AutocompleteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the autoComplete operation.
     * @callback module:api/AutocompleteApi~autoCompleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TheRootSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Product Search Autocomplete
     * Retrieves product's information related to the searched string.  `{{searchString}} is the part of string the user is looking for.  E.g.: `ref` | `refrig` | `refrigerator`
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand 
     * @param {String} productNameContains Part of the string that will be searched.
     * @param {module:api/AutocompleteApi~autoCompleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TheRootSchema}
     */
    autoComplete(contentType, accept, productNameContains, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling autoComplete");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling autoComplete");
      }
      // verify the required parameter 'productNameContains' is set
      if (productNameContains === undefined || productNameContains === null) {
        throw new Error("Missing the required parameter 'productNameContains' when calling autoComplete");
      }

      let pathParams = {
      };
      let queryParams = {
        'productNameContains': productNameContains
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TheRootSchema;
      let basePaths = ['http://example.com/.{environment}.com.br'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/buscaautocomplete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
