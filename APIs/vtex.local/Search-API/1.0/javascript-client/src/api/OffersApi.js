/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiCatalogSystemPubProductsOffersProductIdGet200ResponseInner from '../model/ApiCatalogSystemPubProductsOffersProductIdGet200ResponseInner';

/**
* Offers service.
* @module api/OffersApi
* @version 1.0
*/
export default class OffersApi {

    /**
    * Constructs a new OffersApi. 
    * @alias module:api/OffersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiCatalogSystemPubProductsOffersProductIdGet operation.
     * @callback module:api/OffersApi~apiCatalogSystemPubProductsOffersProductIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiCatalogSystemPubProductsOffersProductIdGet200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Product offers
     * Retrieves existing offers of a specific product.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} productId Product unique number identifier.
     * @param {module:api/OffersApi~apiCatalogSystemPubProductsOffersProductIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiCatalogSystemPubProductsOffersProductIdGet200ResponseInner>}
     */
    apiCatalogSystemPubProductsOffersProductIdGet(accept, contentType, productId, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiCatalogSystemPubProductsOffersProductIdGet");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiCatalogSystemPubProductsOffersProductIdGet");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling apiCatalogSystemPubProductsOffersProductIdGet");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApiCatalogSystemPubProductsOffersProductIdGet200ResponseInner];
      return this.apiClient.callApi(
        '/api/catalog_system/pub/products/offers/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCatalogSystemPubProductsOffersProductIdSkuSkuIdGet operation.
     * @callback module:api/OffersApi~apiCatalogSystemPubProductsOffersProductIdSkuSkuIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiCatalogSystemPubProductsOffersProductIdGet200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search SKU offers
     * Retrieves existing offers of a specific SKU.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} productId Product unique number identifier.
     * @param {String} skuId Product unique number identifier.
     * @param {module:api/OffersApi~apiCatalogSystemPubProductsOffersProductIdSkuSkuIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiCatalogSystemPubProductsOffersProductIdGet200ResponseInner>}
     */
    apiCatalogSystemPubProductsOffersProductIdSkuSkuIdGet(accept, contentType, productId, skuId, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiCatalogSystemPubProductsOffersProductIdSkuSkuIdGet");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiCatalogSystemPubProductsOffersProductIdSkuSkuIdGet");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling apiCatalogSystemPubProductsOffersProductIdSkuSkuIdGet");
      }
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling apiCatalogSystemPubProductsOffersProductIdSkuSkuIdGet");
      }

      let pathParams = {
        'productId': productId,
        'skuId': skuId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApiCatalogSystemPubProductsOffersProductIdGet200ResponseInner];
      return this.apiClient.callApi(
        '/api/catalog_system/pub/products/offers/{productId}/sku/{skuId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
