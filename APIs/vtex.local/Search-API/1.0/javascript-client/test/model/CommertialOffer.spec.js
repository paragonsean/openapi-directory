/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LegacySearchApi);
  }
}(this, function(expect, LegacySearchApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LegacySearchApi.CommertialOffer();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CommertialOffer', function() {
    it('should create an instance of CommertialOffer', function() {
      // uncomment below and update the code to test CommertialOffer
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be.a(LegacySearchApi.CommertialOffer);
    });

    it('should have the property availableQuantity (base name: "AvailableQuantity")', function() {
      // uncomment below and update the code to test the property availableQuantity
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be();
    });

    it('should have the property buyTogether (base name: "BuyTogether")', function() {
      // uncomment below and update the code to test the property buyTogether
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be();
    });

    it('should have the property cacheVersionUsedToCallCheckout (base name: "CacheVersionUsedToCallCheckout")', function() {
      // uncomment below and update the code to test the property cacheVersionUsedToCallCheckout
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be();
    });

    it('should have the property deliverySlaSamples (base name: "DeliverySlaSamples")', function() {
      // uncomment below and update the code to test the property deliverySlaSamples
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be();
    });

    it('should have the property deliverySlaSamplesPerRegion (base name: "DeliverySlaSamplesPerRegion")', function() {
      // uncomment below and update the code to test the property deliverySlaSamplesPerRegion
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be();
    });

    it('should have the property discountHighLight (base name: "DiscountHighLight")', function() {
      // uncomment below and update the code to test the property discountHighLight
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be();
    });

    it('should have the property getInfoErrorMessage (base name: "GetInfoErrorMessage")', function() {
      // uncomment below and update the code to test the property getInfoErrorMessage
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be();
    });

    it('should have the property giftSkuIds (base name: "GiftSkuIds")', function() {
      // uncomment below and update the code to test the property giftSkuIds
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be();
    });

    it('should have the property installments (base name: "Installments")', function() {
      // uncomment below and update the code to test the property installments
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be();
    });

    it('should have the property isAvailable (base name: "IsAvailable")', function() {
      // uncomment below and update the code to test the property isAvailable
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be();
    });

    it('should have the property itemMetadataAttachment (base name: "ItemMetadataAttachment")', function() {
      // uncomment below and update the code to test the property itemMetadataAttachment
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be();
    });

    it('should have the property listPrice (base name: "ListPrice")', function() {
      // uncomment below and update the code to test the property listPrice
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be();
    });

    it('should have the property paymentOptions (base name: "PaymentOptions")', function() {
      // uncomment below and update the code to test the property paymentOptions
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be();
    });

    it('should have the property price (base name: "Price")', function() {
      // uncomment below and update the code to test the property price
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be();
    });

    it('should have the property priceValidUntil (base name: "PriceValidUntil")', function() {
      // uncomment below and update the code to test the property priceValidUntil
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be();
    });

    it('should have the property priceWithoutDiscount (base name: "PriceWithoutDiscount")', function() {
      // uncomment below and update the code to test the property priceWithoutDiscount
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be();
    });

    it('should have the property rewardValue (base name: "RewardValue")', function() {
      // uncomment below and update the code to test the property rewardValue
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be();
    });

    it('should have the property saleChannel (base name: "SaleChannel")', function() {
      // uncomment below and update the code to test the property saleChannel
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be();
    });

    it('should have the property tax (base name: "Tax")', function() {
      // uncomment below and update the code to test the property tax
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be();
    });

    it('should have the property teasers (base name: "Teasers")', function() {
      // uncomment below and update the code to test the property teasers
      //var instance = new LegacySearchApi.CommertialOffer();
      //expect(instance).to.be();
    });

  });

}));
