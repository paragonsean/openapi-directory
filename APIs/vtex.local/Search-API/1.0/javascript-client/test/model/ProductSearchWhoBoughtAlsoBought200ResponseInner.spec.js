/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LegacySearchApi);
  }
}(this, function(expect, LegacySearchApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProductSearchWhoBoughtAlsoBought200ResponseInner', function() {
    it('should create an instance of ProductSearchWhoBoughtAlsoBought200ResponseInner', function() {
      // uncomment below and update the code to test ProductSearchWhoBoughtAlsoBought200ResponseInner
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be.a(LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner);
    });

    it('should have the property allSpecifications (base name: "allSpecifications")', function() {
      // uncomment below and update the code to test the property allSpecifications
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property allSpecificationsGroups (base name: "allSpecificationsGroups")', function() {
      // uncomment below and update the code to test the property allSpecificationsGroups
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property brand (base name: "brand")', function() {
      // uncomment below and update the code to test the property brand
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property brandId (base name: "brandId")', function() {
      // uncomment below and update the code to test the property brandId
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property brandImageUrl (base name: "brandImageUrl")', function() {
      // uncomment below and update the code to test the property brandImageUrl
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property categories (base name: "categories")', function() {
      // uncomment below and update the code to test the property categories
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property categoriesIds (base name: "categoriesIds")', function() {
      // uncomment below and update the code to test the property categoriesIds
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property categoryId (base name: "categoryId")', function() {
      // uncomment below and update the code to test the property categoryId
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property clusterHighlights (base name: "clusterHighlights")', function() {
      // uncomment below and update the code to test the property clusterHighlights
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property items (base name: "items")', function() {
      // uncomment below and update the code to test the property items
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property link (base name: "link")', function() {
      // uncomment below and update the code to test the property link
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property linkText (base name: "linkText")', function() {
      // uncomment below and update the code to test the property linkText
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property metaTagDescription (base name: "metaTagDescription")', function() {
      // uncomment below and update the code to test the property metaTagDescription
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property productClusters (base name: "productClusters")', function() {
      // uncomment below and update the code to test the property productClusters
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property productId (base name: "productId")', function() {
      // uncomment below and update the code to test the property productId
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property productName (base name: "productName")', function() {
      // uncomment below and update the code to test the property productName
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property productReference (base name: "productReference")', function() {
      // uncomment below and update the code to test the property productReference
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property productReferenceCode (base name: "productReferenceCode")', function() {
      // uncomment below and update the code to test the property productReferenceCode
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property productTitle (base name: "productTitle")', function() {
      // uncomment below and update the code to test the property productTitle
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property releaseDate (base name: "releaseDate")', function() {
      // uncomment below and update the code to test the property releaseDate
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property searchableClusters (base name: "searchableClusters")', function() {
      // uncomment below and update the code to test the property searchableClusters
      //var instance = new LegacySearchApi.ProductSearchWhoBoughtAlsoBought200ResponseInner();
      //expect(instance).to.be();
    });

  });

}));
