/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LegacySearchApi);
  }
}(this, function(expect, LegacySearchApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LegacySearchApi.PaymentOptions();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PaymentOptions', function() {
    it('should create an instance of PaymentOptions', function() {
      // uncomment below and update the code to test PaymentOptions
      //var instance = new LegacySearchApi.PaymentOptions();
      //expect(instance).to.be.a(LegacySearchApi.PaymentOptions);
    });

    it('should have the property availableAccounts (base name: "availableAccounts")', function() {
      // uncomment below and update the code to test the property availableAccounts
      //var instance = new LegacySearchApi.PaymentOptions();
      //expect(instance).to.be();
    });

    it('should have the property availableTokens (base name: "availableTokens")', function() {
      // uncomment below and update the code to test the property availableTokens
      //var instance = new LegacySearchApi.PaymentOptions();
      //expect(instance).to.be();
    });

    it('should have the property giftCardMessages (base name: "giftCardMessages")', function() {
      // uncomment below and update the code to test the property giftCardMessages
      //var instance = new LegacySearchApi.PaymentOptions();
      //expect(instance).to.be();
    });

    it('should have the property giftCards (base name: "giftCards")', function() {
      // uncomment below and update the code to test the property giftCards
      //var instance = new LegacySearchApi.PaymentOptions();
      //expect(instance).to.be();
    });

    it('should have the property installmentOptions (base name: "installmentOptions")', function() {
      // uncomment below and update the code to test the property installmentOptions
      //var instance = new LegacySearchApi.PaymentOptions();
      //expect(instance).to.be();
    });

    it('should have the property paymentSystems (base name: "paymentSystems")', function() {
      // uncomment below and update the code to test the property paymentSystems
      //var instance = new LegacySearchApi.PaymentOptions();
      //expect(instance).to.be();
    });

    it('should have the property payments (base name: "payments")', function() {
      // uncomment below and update the code to test the property payments
      //var instance = new LegacySearchApi.PaymentOptions();
      //expect(instance).to.be();
    });

  });

}));
