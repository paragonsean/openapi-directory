/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LegacySearchApi);
  }
}(this, function(expect, LegacySearchApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LegacySearchApi.MainImage();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MainImage', function() {
    it('should create an instance of MainImage', function() {
      // uncomment below and update the code to test MainImage
      //var instance = new LegacySearchApi.MainImage();
      //expect(instance).to.be.a(LegacySearchApi.MainImage);
    });

    it('should have the property imageId (base name: "ImageId")', function() {
      // uncomment below and update the code to test the property imageId
      //var instance = new LegacySearchApi.MainImage();
      //expect(instance).to.be();
    });

    it('should have the property imageLabel (base name: "ImageLabel")', function() {
      // uncomment below and update the code to test the property imageLabel
      //var instance = new LegacySearchApi.MainImage();
      //expect(instance).to.be();
    });

    it('should have the property imagePath (base name: "ImagePath")', function() {
      // uncomment below and update the code to test the property imagePath
      //var instance = new LegacySearchApi.MainImage();
      //expect(instance).to.be();
    });

    it('should have the property imageTag (base name: "ImageTag")', function() {
      // uncomment below and update the code to test the property imageTag
      //var instance = new LegacySearchApi.MainImage();
      //expect(instance).to.be();
    });

    it('should have the property imageText (base name: "ImageText")', function() {
      // uncomment below and update the code to test the property imageText
      //var instance = new LegacySearchApi.MainImage();
      //expect(instance).to.be();
    });

    it('should have the property isMain (base name: "IsMain")', function() {
      // uncomment below and update the code to test the property isMain
      //var instance = new LegacySearchApi.MainImage();
      //expect(instance).to.be();
    });

    it('should have the property isZoomSize (base name: "IsZoomSize")', function() {
      // uncomment below and update the code to test the property isZoomSize
      //var instance = new LegacySearchApi.MainImage();
      //expect(instance).to.be();
    });

    it('should have the property lastModified (base name: "LastModified")', function() {
      // uncomment below and update the code to test the property lastModified
      //var instance = new LegacySearchApi.MainImage();
      //expect(instance).to.be();
    });

  });

}));
