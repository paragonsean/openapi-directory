/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LegacySearchApi);
  }
}(this, function(expect, LegacySearchApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LegacySearchApi.ItemsInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ItemsInner', function() {
    it('should create an instance of ItemsInner', function() {
      // uncomment below and update the code to test ItemsInner
      //var instance = new LegacySearchApi.ItemsInner();
      //expect(instance).to.be.a(LegacySearchApi.ItemsInner);
    });

    it('should have the property videos (base name: "Videos")', function() {
      // uncomment below and update the code to test the property videos
      //var instance = new LegacySearchApi.ItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property complementName (base name: "complementName")', function() {
      // uncomment below and update the code to test the property complementName
      //var instance = new LegacySearchApi.ItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property ean (base name: "ean")', function() {
      // uncomment below and update the code to test the property ean
      //var instance = new LegacySearchApi.ItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property estimatedDateArrival (base name: "estimatedDateArrival")', function() {
      // uncomment below and update the code to test the property estimatedDateArrival
      //var instance = new LegacySearchApi.ItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property images (base name: "images")', function() {
      // uncomment below and update the code to test the property images
      //var instance = new LegacySearchApi.ItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property isKit (base name: "isKit")', function() {
      // uncomment below and update the code to test the property isKit
      //var instance = new LegacySearchApi.ItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property itemId (base name: "itemId")', function() {
      // uncomment below and update the code to test the property itemId
      //var instance = new LegacySearchApi.ItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property kitItems (base name: "kitItems")', function() {
      // uncomment below and update the code to test the property kitItems
      //var instance = new LegacySearchApi.ItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property measurementUnit (base name: "measurementUnit")', function() {
      // uncomment below and update the code to test the property measurementUnit
      //var instance = new LegacySearchApi.ItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property modalType (base name: "modalType")', function() {
      // uncomment below and update the code to test the property modalType
      //var instance = new LegacySearchApi.ItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new LegacySearchApi.ItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property nameComplete (base name: "nameComplete")', function() {
      // uncomment below and update the code to test the property nameComplete
      //var instance = new LegacySearchApi.ItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property referenceId (base name: "referenceId")', function() {
      // uncomment below and update the code to test the property referenceId
      //var instance = new LegacySearchApi.ItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property sellers (base name: "sellers")', function() {
      // uncomment below and update the code to test the property sellers
      //var instance = new LegacySearchApi.ItemsInner();
      //expect(instance).to.be();
    });

    it('should have the property unitMultiplier (base name: "unitMultiplier")', function() {
      // uncomment below and update the code to test the property unitMultiplier
      //var instance = new LegacySearchApi.ItemsInner();
      //expect(instance).to.be();
    });

  });

}));
