/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LegacySearchApi);
  }
}(this, function(expect, LegacySearchApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LegacySearchApi.CrossSellingApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CrossSellingApi', function() {
    describe('productSearchAccessories', function() {
      it('should call productSearchAccessories successfully', function(done) {
        //uncomment below and update the code to test productSearchAccessories
        //instance.productSearchAccessories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productSearchShowTogether', function() {
      it('should call productSearchShowTogether successfully', function(done) {
        //uncomment below and update the code to test productSearchShowTogether
        //instance.productSearchShowTogether(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productSearchSimilars', function() {
      it('should call productSearchSimilars successfully', function(done) {
        //uncomment below and update the code to test productSearchSimilars
        //instance.productSearchSimilars(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productSearchSuggestions', function() {
      it('should call productSearchSuggestions successfully', function(done) {
        //uncomment below and update the code to test productSearchSuggestions
        //instance.productSearchSuggestions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productSearchWhoBoughtAlsoBought', function() {
      it('should call productSearchWhoBoughtAlsoBought successfully', function(done) {
        //uncomment below and update the code to test productSearchWhoBoughtAlsoBought
        //instance.productSearchWhoBoughtAlsoBought(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productSearchWhoSawAlsoBought', function() {
      it('should call productSearchWhoSawAlsoBought successfully', function(done) {
        //uncomment below and update the code to test productSearchWhoSawAlsoBought
        //instance.productSearchWhoSawAlsoBought(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('productSearchWhoSawAlsoSaw', function() {
      it('should call productSearchWhoSawAlsoSaw successfully', function(done) {
        //uncomment below and update the code to test productSearchWhoSawAlsoSaw
        //instance.productSearchWhoSawAlsoSaw(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
