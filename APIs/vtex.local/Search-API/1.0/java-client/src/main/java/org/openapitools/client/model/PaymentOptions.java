/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InstallmentOptionsInner;
import org.openapitools.client.model.PaymentSystemsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Payment options.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:46.427507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentOptions {
  public static final String SERIALIZED_NAME_AVAILABLE_ACCOUNTS = "availableAccounts";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_ACCOUNTS)
  private List<Object> availableAccounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABLE_TOKENS = "availableTokens";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_TOKENS)
  private List<Object> availableTokens = new ArrayList<>();

  public static final String SERIALIZED_NAME_GIFT_CARD_MESSAGES = "giftCardMessages";
  @SerializedName(SERIALIZED_NAME_GIFT_CARD_MESSAGES)
  private List<Object> giftCardMessages = new ArrayList<>();

  public static final String SERIALIZED_NAME_GIFT_CARDS = "giftCards";
  @SerializedName(SERIALIZED_NAME_GIFT_CARDS)
  private List<Object> giftCards = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTALLMENT_OPTIONS = "installmentOptions";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_OPTIONS)
  private List<InstallmentOptionsInner> installmentOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_SYSTEMS = "paymentSystems";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SYSTEMS)
  private List<PaymentSystemsInner> paymentSystems = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENTS = "payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  private List<Object> payments = new ArrayList<>();

  public PaymentOptions() {
  }

  public PaymentOptions availableAccounts(List<Object> availableAccounts) {
    this.availableAccounts = availableAccounts;
    return this;
  }

  public PaymentOptions addAvailableAccountsItem(Object availableAccountsItem) {
    if (this.availableAccounts == null) {
      this.availableAccounts = new ArrayList<>();
    }
    this.availableAccounts.add(availableAccountsItem);
    return this;
  }

  /**
   * Available accounts.
   * @return availableAccounts
   */
  @javax.annotation.Nonnull
  public List<Object> getAvailableAccounts() {
    return availableAccounts;
  }

  public void setAvailableAccounts(List<Object> availableAccounts) {
    this.availableAccounts = availableAccounts;
  }


  public PaymentOptions availableTokens(List<Object> availableTokens) {
    this.availableTokens = availableTokens;
    return this;
  }

  public PaymentOptions addAvailableTokensItem(Object availableTokensItem) {
    if (this.availableTokens == null) {
      this.availableTokens = new ArrayList<>();
    }
    this.availableTokens.add(availableTokensItem);
    return this;
  }

  /**
   * Available tokens.
   * @return availableTokens
   */
  @javax.annotation.Nonnull
  public List<Object> getAvailableTokens() {
    return availableTokens;
  }

  public void setAvailableTokens(List<Object> availableTokens) {
    this.availableTokens = availableTokens;
  }


  public PaymentOptions giftCardMessages(List<Object> giftCardMessages) {
    this.giftCardMessages = giftCardMessages;
    return this;
  }

  public PaymentOptions addGiftCardMessagesItem(Object giftCardMessagesItem) {
    if (this.giftCardMessages == null) {
      this.giftCardMessages = new ArrayList<>();
    }
    this.giftCardMessages.add(giftCardMessagesItem);
    return this;
  }

  /**
   * GiftCardMessages.
   * @return giftCardMessages
   */
  @javax.annotation.Nonnull
  public List<Object> getGiftCardMessages() {
    return giftCardMessages;
  }

  public void setGiftCardMessages(List<Object> giftCardMessages) {
    this.giftCardMessages = giftCardMessages;
  }


  public PaymentOptions giftCards(List<Object> giftCards) {
    this.giftCards = giftCards;
    return this;
  }

  public PaymentOptions addGiftCardsItem(Object giftCardsItem) {
    if (this.giftCards == null) {
      this.giftCards = new ArrayList<>();
    }
    this.giftCards.add(giftCardsItem);
    return this;
  }

  /**
   * GiftCards.
   * @return giftCards
   */
  @javax.annotation.Nonnull
  public List<Object> getGiftCards() {
    return giftCards;
  }

  public void setGiftCards(List<Object> giftCards) {
    this.giftCards = giftCards;
  }


  public PaymentOptions installmentOptions(List<InstallmentOptionsInner> installmentOptions) {
    this.installmentOptions = installmentOptions;
    return this;
  }

  public PaymentOptions addInstallmentOptionsItem(InstallmentOptionsInner installmentOptionsItem) {
    if (this.installmentOptions == null) {
      this.installmentOptions = new ArrayList<>();
    }
    this.installmentOptions.add(installmentOptionsItem);
    return this;
  }

  /**
   * installment options.
   * @return installmentOptions
   */
  @javax.annotation.Nonnull
  public List<InstallmentOptionsInner> getInstallmentOptions() {
    return installmentOptions;
  }

  public void setInstallmentOptions(List<InstallmentOptionsInner> installmentOptions) {
    this.installmentOptions = installmentOptions;
  }


  public PaymentOptions paymentSystems(List<PaymentSystemsInner> paymentSystems) {
    this.paymentSystems = paymentSystems;
    return this;
  }

  public PaymentOptions addPaymentSystemsItem(PaymentSystemsInner paymentSystemsItem) {
    if (this.paymentSystems == null) {
      this.paymentSystems = new ArrayList<>();
    }
    this.paymentSystems.add(paymentSystemsItem);
    return this;
  }

  /**
   * Payment systems.
   * @return paymentSystems
   */
  @javax.annotation.Nonnull
  public List<PaymentSystemsInner> getPaymentSystems() {
    return paymentSystems;
  }

  public void setPaymentSystems(List<PaymentSystemsInner> paymentSystems) {
    this.paymentSystems = paymentSystems;
  }


  public PaymentOptions payments(List<Object> payments) {
    this.payments = payments;
    return this;
  }

  public PaymentOptions addPaymentsItem(Object paymentsItem) {
    if (this.payments == null) {
      this.payments = new ArrayList<>();
    }
    this.payments.add(paymentsItem);
    return this;
  }

  /**
   * Payments.
   * @return payments
   */
  @javax.annotation.Nonnull
  public List<Object> getPayments() {
    return payments;
  }

  public void setPayments(List<Object> payments) {
    this.payments = payments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentOptions paymentOptions = (PaymentOptions) o;
    return Objects.equals(this.availableAccounts, paymentOptions.availableAccounts) &&
        Objects.equals(this.availableTokens, paymentOptions.availableTokens) &&
        Objects.equals(this.giftCardMessages, paymentOptions.giftCardMessages) &&
        Objects.equals(this.giftCards, paymentOptions.giftCards) &&
        Objects.equals(this.installmentOptions, paymentOptions.installmentOptions) &&
        Objects.equals(this.paymentSystems, paymentOptions.paymentSystems) &&
        Objects.equals(this.payments, paymentOptions.payments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableAccounts, availableTokens, giftCardMessages, giftCards, installmentOptions, paymentSystems, payments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentOptions {\n");
    sb.append("    availableAccounts: ").append(toIndentedString(availableAccounts)).append("\n");
    sb.append("    availableTokens: ").append(toIndentedString(availableTokens)).append("\n");
    sb.append("    giftCardMessages: ").append(toIndentedString(giftCardMessages)).append("\n");
    sb.append("    giftCards: ").append(toIndentedString(giftCards)).append("\n");
    sb.append("    installmentOptions: ").append(toIndentedString(installmentOptions)).append("\n");
    sb.append("    paymentSystems: ").append(toIndentedString(paymentSystems)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableAccounts");
    openapiFields.add("availableTokens");
    openapiFields.add("giftCardMessages");
    openapiFields.add("giftCards");
    openapiFields.add("installmentOptions");
    openapiFields.add("paymentSystems");
    openapiFields.add("payments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("availableAccounts");
    openapiRequiredFields.add("availableTokens");
    openapiRequiredFields.add("giftCardMessages");
    openapiRequiredFields.add("giftCards");
    openapiRequiredFields.add("installmentOptions");
    openapiRequiredFields.add("paymentSystems");
    openapiRequiredFields.add("payments");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentOptions is not found in the empty JSON string", PaymentOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("availableAccounts") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("availableAccounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableAccounts` to be an array in the JSON string but got `%s`", jsonObj.get("availableAccounts").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("availableTokens") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("availableTokens").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableTokens` to be an array in the JSON string but got `%s`", jsonObj.get("availableTokens").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("giftCardMessages") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("giftCardMessages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `giftCardMessages` to be an array in the JSON string but got `%s`", jsonObj.get("giftCardMessages").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("giftCards") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("giftCards").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `giftCards` to be an array in the JSON string but got `%s`", jsonObj.get("giftCards").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("installmentOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `installmentOptions` to be an array in the JSON string but got `%s`", jsonObj.get("installmentOptions").toString()));
      }

      JsonArray jsonArrayinstallmentOptions = jsonObj.getAsJsonArray("installmentOptions");
      // validate the required field `installmentOptions` (array)
      for (int i = 0; i < jsonArrayinstallmentOptions.size(); i++) {
        InstallmentOptionsInner.validateJsonElement(jsonArrayinstallmentOptions.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("paymentSystems").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentSystems` to be an array in the JSON string but got `%s`", jsonObj.get("paymentSystems").toString()));
      }

      JsonArray jsonArraypaymentSystems = jsonObj.getAsJsonArray("paymentSystems");
      // validate the required field `paymentSystems` (array)
      for (int i = 0; i < jsonArraypaymentSystems.size(); i++) {
        PaymentSystemsInner.validateJsonElement(jsonArraypaymentSystems.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("payments") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("payments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `payments` to be an array in the JSON string but got `%s`", jsonObj.get("payments").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentOptions>() {
           @Override
           public void write(JsonWriter out, PaymentOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentOptions
   * @throws IOException if the JSON string is invalid with respect to PaymentOptions
   */
  public static PaymentOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentOptions.class);
  }

  /**
   * Convert an instance of PaymentOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

