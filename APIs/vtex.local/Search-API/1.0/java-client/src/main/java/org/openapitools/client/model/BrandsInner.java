/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BrandsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:46.427507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BrandsInner {
  public static final String SERIALIZED_NAME_LINK = "Link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LINK_ENCODED = "LinkEncoded";
  @SerializedName(SERIALIZED_NAME_LINK_ENCODED)
  private String linkEncoded;

  public static final String SERIALIZED_NAME_MAP = "Map";
  @SerializedName(SERIALIZED_NAME_MAP)
  private String map;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POSITION = "Position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_QUANTITY = "Quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public BrandsInner() {
  }

  public BrandsInner link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Link of the facet.
   * @return link
   */
  @javax.annotation.Nonnull
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public BrandsInner linkEncoded(String linkEncoded) {
    this.linkEncoded = linkEncoded;
    return this;
  }

  /**
   * Enconded link of the facet.
   * @return linkEncoded
   */
  @javax.annotation.Nonnull
  public String getLinkEncoded() {
    return linkEncoded;
  }

  public void setLinkEncoded(String linkEncoded) {
    this.linkEncoded = linkEncoded;
  }


  public BrandsInner map(String map) {
    this.map = map;
    return this;
  }

  /**
   * Mapping of the facet.
   * @return map
   */
  @javax.annotation.Nonnull
  public String getMap() {
    return map;
  }

  public void setMap(String map) {
    this.map = map;
  }


  public BrandsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Brand name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BrandsInner position(Integer position) {
    this.position = position;
    return this;
  }

  /**
   * Position of the facet.
   * @return position
   */
  @javax.annotation.Nullable
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public BrandsInner quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Quantity of facets.
   * @return quantity
   */
  @javax.annotation.Nonnull
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public BrandsInner value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Value of the facet.
   * @return value
   */
  @javax.annotation.Nonnull
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrandsInner brandsInner = (BrandsInner) o;
    return Objects.equals(this.link, brandsInner.link) &&
        Objects.equals(this.linkEncoded, brandsInner.linkEncoded) &&
        Objects.equals(this.map, brandsInner.map) &&
        Objects.equals(this.name, brandsInner.name) &&
        Objects.equals(this.position, brandsInner.position) &&
        Objects.equals(this.quantity, brandsInner.quantity) &&
        Objects.equals(this.value, brandsInner.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(link, linkEncoded, map, name, position, quantity, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrandsInner {\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    linkEncoded: ").append(toIndentedString(linkEncoded)).append("\n");
    sb.append("    map: ").append(toIndentedString(map)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Link");
    openapiFields.add("LinkEncoded");
    openapiFields.add("Map");
    openapiFields.add("Name");
    openapiFields.add("Position");
    openapiFields.add("Quantity");
    openapiFields.add("Value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Link");
    openapiRequiredFields.add("LinkEncoded");
    openapiRequiredFields.add("Map");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Position");
    openapiRequiredFields.add("Quantity");
    openapiRequiredFields.add("Value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BrandsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BrandsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BrandsInner is not found in the empty JSON string", BrandsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BrandsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BrandsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BrandsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Link").toString()));
      }
      if (!jsonObj.get("LinkEncoded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LinkEncoded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LinkEncoded").toString()));
      }
      if (!jsonObj.get("Map").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Map` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Map").toString()));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (!jsonObj.get("Value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BrandsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BrandsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BrandsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BrandsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<BrandsInner>() {
           @Override
           public void write(JsonWriter out, BrandsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BrandsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BrandsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BrandsInner
   * @throws IOException if the JSON string is invalid with respect to BrandsInner
   */
  public static BrandsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BrandsInner.class);
  }

  /**
   * Convert an instance of BrandsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

