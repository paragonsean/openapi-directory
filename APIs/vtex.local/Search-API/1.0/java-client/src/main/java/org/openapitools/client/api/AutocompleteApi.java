/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.TheRootSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AutocompleteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AutocompleteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AutocompleteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for autoComplete
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param productNameContains Part of the string that will be searched. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoCompleteCall(String contentType, String accept, String productNameContains, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "http://example.com/.{environment}.com.br" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buscaautocomplete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productNameContains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productNameContains", productNameContains));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autoCompleteValidateBeforeCall(String contentType, String accept, String productNameContains, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling autoComplete(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling autoComplete(Async)");
        }

        // verify the required parameter 'productNameContains' is set
        if (productNameContains == null) {
            throw new ApiException("Missing the required parameter 'productNameContains' when calling autoComplete(Async)");
        }

        return autoCompleteCall(contentType, accept, productNameContains, _callback);

    }

    /**
     * Product Search Autocomplete
     * Retrieves product&#39;s information related to the searched string.  &#x60;{{searchString}} is the part of string the user is looking for.  E.g.: &#x60;ref&#x60; | &#x60;refrig&#x60; | &#x60;refrigerator&#x60;
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param productNameContains Part of the string that will be searched. (required)
     * @return TheRootSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TheRootSchema autoComplete(String contentType, String accept, String productNameContains) throws ApiException {
        ApiResponse<TheRootSchema> localVarResp = autoCompleteWithHttpInfo(contentType, accept, productNameContains);
        return localVarResp.getData();
    }

    /**
     * Product Search Autocomplete
     * Retrieves product&#39;s information related to the searched string.  &#x60;{{searchString}} is the part of string the user is looking for.  E.g.: &#x60;ref&#x60; | &#x60;refrig&#x60; | &#x60;refrigerator&#x60;
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param productNameContains Part of the string that will be searched. (required)
     * @return ApiResponse&lt;TheRootSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TheRootSchema> autoCompleteWithHttpInfo(String contentType, String accept, String productNameContains) throws ApiException {
        okhttp3.Call localVarCall = autoCompleteValidateBeforeCall(contentType, accept, productNameContains, null);
        Type localVarReturnType = new TypeToken<TheRootSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Product Search Autocomplete (asynchronously)
     * Retrieves product&#39;s information related to the searched string.  &#x60;{{searchString}} is the part of string the user is looking for.  E.g.: &#x60;ref&#x60; | &#x60;refrig&#x60; | &#x60;refrigerator&#x60;
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param productNameContains Part of the string that will be searched. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoCompleteAsync(String contentType, String accept, String productNameContains, final ApiCallback<TheRootSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = autoCompleteValidateBeforeCall(contentType, accept, productNameContains, _callback);
        Type localVarReturnType = new TypeToken<TheRootSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
