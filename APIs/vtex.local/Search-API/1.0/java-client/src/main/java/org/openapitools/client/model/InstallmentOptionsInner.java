/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InstallmentsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InstallmentOptionsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:46.427507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstallmentOptionsInner {
  public static final String SERIALIZED_NAME_BIN = "bin";
  @SerializedName(SERIALIZED_NAME_BIN)
  private String bin;

  public static final String SERIALIZED_NAME_INSTALLMENTS = "installments";
  @SerializedName(SERIALIZED_NAME_INSTALLMENTS)
  private List<InstallmentsInner> installments = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_GROUP_NAME = "paymentGroupName";
  @SerializedName(SERIALIZED_NAME_PAYMENT_GROUP_NAME)
  private String paymentGroupName;

  public static final String SERIALIZED_NAME_PAYMENT_NAME = "paymentName";
  @SerializedName(SERIALIZED_NAME_PAYMENT_NAME)
  private String paymentName;

  public static final String SERIALIZED_NAME_PAYMENT_SYSTEM = "paymentSystem";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SYSTEM)
  private String paymentSystem;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Integer value;

  public InstallmentOptionsInner() {
  }

  public InstallmentOptionsInner bin(String bin) {
    this.bin = bin;
    return this;
  }

  /**
   * Bin.
   * @return bin
   */
  @javax.annotation.Nullable
  public String getBin() {
    return bin;
  }

  public void setBin(String bin) {
    this.bin = bin;
  }


  public InstallmentOptionsInner installments(List<InstallmentsInner> installments) {
    this.installments = installments;
    return this;
  }

  public InstallmentOptionsInner addInstallmentsItem(InstallmentsInner installmentsItem) {
    if (this.installments == null) {
      this.installments = new ArrayList<>();
    }
    this.installments.add(installmentsItem);
    return this;
  }

  /**
   * Installments.
   * @return installments
   */
  @javax.annotation.Nonnull
  public List<InstallmentsInner> getInstallments() {
    return installments;
  }

  public void setInstallments(List<InstallmentsInner> installments) {
    this.installments = installments;
  }


  public InstallmentOptionsInner paymentGroupName(String paymentGroupName) {
    this.paymentGroupName = paymentGroupName;
    return this;
  }

  /**
   * Payment group name.
   * @return paymentGroupName
   */
  @javax.annotation.Nonnull
  public String getPaymentGroupName() {
    return paymentGroupName;
  }

  public void setPaymentGroupName(String paymentGroupName) {
    this.paymentGroupName = paymentGroupName;
  }


  public InstallmentOptionsInner paymentName(String paymentName) {
    this.paymentName = paymentName;
    return this;
  }

  /**
   * Payment name.
   * @return paymentName
   */
  @javax.annotation.Nonnull
  public String getPaymentName() {
    return paymentName;
  }

  public void setPaymentName(String paymentName) {
    this.paymentName = paymentName;
  }


  public InstallmentOptionsInner paymentSystem(String paymentSystem) {
    this.paymentSystem = paymentSystem;
    return this;
  }

  /**
   * Payment system.
   * @return paymentSystem
   */
  @javax.annotation.Nonnull
  public String getPaymentSystem() {
    return paymentSystem;
  }

  public void setPaymentSystem(String paymentSystem) {
    this.paymentSystem = paymentSystem;
  }


  public InstallmentOptionsInner value(Integer value) {
    this.value = value;
    return this;
  }

  /**
   * Value.
   * @return value
   */
  @javax.annotation.Nonnull
  public Integer getValue() {
    return value;
  }

  public void setValue(Integer value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstallmentOptionsInner installmentOptionsInner = (InstallmentOptionsInner) o;
    return Objects.equals(this.bin, installmentOptionsInner.bin) &&
        Objects.equals(this.installments, installmentOptionsInner.installments) &&
        Objects.equals(this.paymentGroupName, installmentOptionsInner.paymentGroupName) &&
        Objects.equals(this.paymentName, installmentOptionsInner.paymentName) &&
        Objects.equals(this.paymentSystem, installmentOptionsInner.paymentSystem) &&
        Objects.equals(this.value, installmentOptionsInner.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bin, installments, paymentGroupName, paymentName, paymentSystem, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstallmentOptionsInner {\n");
    sb.append("    bin: ").append(toIndentedString(bin)).append("\n");
    sb.append("    installments: ").append(toIndentedString(installments)).append("\n");
    sb.append("    paymentGroupName: ").append(toIndentedString(paymentGroupName)).append("\n");
    sb.append("    paymentName: ").append(toIndentedString(paymentName)).append("\n");
    sb.append("    paymentSystem: ").append(toIndentedString(paymentSystem)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bin");
    openapiFields.add("installments");
    openapiFields.add("paymentGroupName");
    openapiFields.add("paymentName");
    openapiFields.add("paymentSystem");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bin");
    openapiRequiredFields.add("installments");
    openapiRequiredFields.add("paymentGroupName");
    openapiRequiredFields.add("paymentName");
    openapiRequiredFields.add("paymentSystem");
    openapiRequiredFields.add("value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstallmentOptionsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstallmentOptionsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstallmentOptionsInner is not found in the empty JSON string", InstallmentOptionsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstallmentOptionsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstallmentOptionsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InstallmentOptionsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bin") != null && !jsonObj.get("bin").isJsonNull()) && !jsonObj.get("bin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bin").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("installments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `installments` to be an array in the JSON string but got `%s`", jsonObj.get("installments").toString()));
      }

      JsonArray jsonArrayinstallments = jsonObj.getAsJsonArray("installments");
      // validate the required field `installments` (array)
      for (int i = 0; i < jsonArrayinstallments.size(); i++) {
        InstallmentsInner.validateJsonElement(jsonArrayinstallments.get(i));
      };
      if (!jsonObj.get("paymentGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentGroupName").toString()));
      }
      if (!jsonObj.get("paymentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentName").toString()));
      }
      if (!jsonObj.get("paymentSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentSystem").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstallmentOptionsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstallmentOptionsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstallmentOptionsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstallmentOptionsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<InstallmentOptionsInner>() {
           @Override
           public void write(JsonWriter out, InstallmentOptionsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstallmentOptionsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstallmentOptionsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstallmentOptionsInner
   * @throws IOException if the JSON string is invalid with respect to InstallmentOptionsInner
   */
  public static InstallmentOptionsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstallmentOptionsInner.class);
  }

  /**
   * Convert an instance of InstallmentOptionsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

