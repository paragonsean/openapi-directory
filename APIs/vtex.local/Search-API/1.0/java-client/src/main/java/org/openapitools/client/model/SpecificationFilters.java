/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AplicativosDeTV;
import org.openapitools.client.model.ResoluO;
import org.openapitools.client.model.TamanhoDaTela;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SpecificationFilters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:46.427507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SpecificationFilters {
  public static final String SERIALIZED_NAME_APLICATIVOS_DE_T_V = "Aplicativos de TV";
  @SerializedName(SERIALIZED_NAME_APLICATIVOS_DE_T_V)
  private List<AplicativosDeTV> aplicativosDeTV = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOLUçãO = "Resolução";
  @SerializedName(SERIALIZED_NAME_RESOLUçãO)
  private List<ResoluO> resolução = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAMANHO_DA_TELA = "Tamanho da Tela";
  @SerializedName(SERIALIZED_NAME_TAMANHO_DA_TELA)
  private List<TamanhoDaTela> tamanhoDaTela = new ArrayList<>();

  public SpecificationFilters() {
  }

  public SpecificationFilters aplicativosDeTV(List<AplicativosDeTV> aplicativosDeTV) {
    this.aplicativosDeTV = aplicativosDeTV;
    return this;
  }

  public SpecificationFilters addAplicativosDeTVItem(AplicativosDeTV aplicativosDeTVItem) {
    if (this.aplicativosDeTV == null) {
      this.aplicativosDeTV = new ArrayList<>();
    }
    this.aplicativosDeTV.add(aplicativosDeTVItem);
    return this;
  }

  /**
   * 
   * @return aplicativosDeTV
   */
  @javax.annotation.Nonnull
  public List<AplicativosDeTV> getAplicativosDeTV() {
    return aplicativosDeTV;
  }

  public void setAplicativosDeTV(List<AplicativosDeTV> aplicativosDeTV) {
    this.aplicativosDeTV = aplicativosDeTV;
  }


  public SpecificationFilters resolução(List<ResoluO> resolução) {
    this.resolução = resolução;
    return this;
  }

  public SpecificationFilters addResoluçãoItem(ResoluO resoluçãoItem) {
    if (this.resolução == null) {
      this.resolução = new ArrayList<>();
    }
    this.resolução.add(resoluçãoItem);
    return this;
  }

  /**
   * 
   * @return resolução
   */
  @javax.annotation.Nonnull
  public List<ResoluO> getResolução() {
    return resolução;
  }

  public void setResolução(List<ResoluO> resolução) {
    this.resolução = resolução;
  }


  public SpecificationFilters tamanhoDaTela(List<TamanhoDaTela> tamanhoDaTela) {
    this.tamanhoDaTela = tamanhoDaTela;
    return this;
  }

  public SpecificationFilters addTamanhoDaTelaItem(TamanhoDaTela tamanhoDaTelaItem) {
    if (this.tamanhoDaTela == null) {
      this.tamanhoDaTela = new ArrayList<>();
    }
    this.tamanhoDaTela.add(tamanhoDaTelaItem);
    return this;
  }

  /**
   * 
   * @return tamanhoDaTela
   */
  @javax.annotation.Nonnull
  public List<TamanhoDaTela> getTamanhoDaTela() {
    return tamanhoDaTela;
  }

  public void setTamanhoDaTela(List<TamanhoDaTela> tamanhoDaTela) {
    this.tamanhoDaTela = tamanhoDaTela;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpecificationFilters specificationFilters = (SpecificationFilters) o;
    return Objects.equals(this.aplicativosDeTV, specificationFilters.aplicativosDeTV) &&
        Objects.equals(this.resolução, specificationFilters.resolução) &&
        Objects.equals(this.tamanhoDaTela, specificationFilters.tamanhoDaTela);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aplicativosDeTV, resolução, tamanhoDaTela);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpecificationFilters {\n");
    sb.append("    aplicativosDeTV: ").append(toIndentedString(aplicativosDeTV)).append("\n");
    sb.append("    resolução: ").append(toIndentedString(resolução)).append("\n");
    sb.append("    tamanhoDaTela: ").append(toIndentedString(tamanhoDaTela)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Aplicativos de TV");
    openapiFields.add("Resolução");
    openapiFields.add("Tamanho da Tela");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Aplicativos de TV");
    openapiRequiredFields.add("Resolução");
    openapiRequiredFields.add("Tamanho da Tela");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SpecificationFilters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SpecificationFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpecificationFilters is not found in the empty JSON string", SpecificationFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SpecificationFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SpecificationFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SpecificationFilters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("Aplicativos de TV").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Aplicativos de TV` to be an array in the JSON string but got `%s`", jsonObj.get("Aplicativos de TV").toString()));
      }

      JsonArray jsonArrayaplicativosDeTV = jsonObj.getAsJsonArray("Aplicativos de TV");
      // validate the required field `Aplicativos de TV` (array)
      for (int i = 0; i < jsonArrayaplicativosDeTV.size(); i++) {
        AplicativosDeTV.validateJsonElement(jsonArrayaplicativosDeTV.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("Resolução").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Resolução` to be an array in the JSON string but got `%s`", jsonObj.get("Resolução").toString()));
      }

      JsonArray jsonArrayresolução = jsonObj.getAsJsonArray("Resolução");
      // validate the required field `Resolução` (array)
      for (int i = 0; i < jsonArrayresolução.size(); i++) {
        ResoluO.validateJsonElement(jsonArrayresolução.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("Tamanho da Tela").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Tamanho da Tela` to be an array in the JSON string but got `%s`", jsonObj.get("Tamanho da Tela").toString()));
      }

      JsonArray jsonArraytamanhoDaTela = jsonObj.getAsJsonArray("Tamanho da Tela");
      // validate the required field `Tamanho da Tela` (array)
      for (int i = 0; i < jsonArraytamanhoDaTela.size(); i++) {
        TamanhoDaTela.validateJsonElement(jsonArraytamanhoDaTela.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpecificationFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpecificationFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpecificationFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpecificationFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<SpecificationFilters>() {
           @Override
           public void write(JsonWriter out, SpecificationFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SpecificationFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SpecificationFilters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SpecificationFilters
   * @throws IOException if the JSON string is invalid with respect to SpecificationFilters
   */
  public static SpecificationFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpecificationFilters.class);
  }

  /**
   * Convert an instance of SpecificationFilters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

