/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Delivery SLA ID.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:46.427507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeliverySlaSamplesPerRegion0 {
  public static final String SERIALIZED_NAME_DELIVERY_SLA_PER_TYPES = "DeliverySlaPerTypes";
  @SerializedName(SERIALIZED_NAME_DELIVERY_SLA_PER_TYPES)
  private List<Object> deliverySlaPerTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public DeliverySlaSamplesPerRegion0() {
  }

  public DeliverySlaSamplesPerRegion0 deliverySlaPerTypes(List<Object> deliverySlaPerTypes) {
    this.deliverySlaPerTypes = deliverySlaPerTypes;
    return this;
  }

  public DeliverySlaSamplesPerRegion0 addDeliverySlaPerTypesItem(Object deliverySlaPerTypesItem) {
    if (this.deliverySlaPerTypes == null) {
      this.deliverySlaPerTypes = new ArrayList<>();
    }
    this.deliverySlaPerTypes.add(deliverySlaPerTypesItem);
    return this;
  }

  /**
   * Delivery SLA per types.
   * @return deliverySlaPerTypes
   */
  @javax.annotation.Nonnull
  public List<Object> getDeliverySlaPerTypes() {
    return deliverySlaPerTypes;
  }

  public void setDeliverySlaPerTypes(List<Object> deliverySlaPerTypes) {
    this.deliverySlaPerTypes = deliverySlaPerTypes;
  }


  public DeliverySlaSamplesPerRegion0 region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Region.
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeliverySlaSamplesPerRegion0 deliverySlaSamplesPerRegion0 = (DeliverySlaSamplesPerRegion0) o;
    return Objects.equals(this.deliverySlaPerTypes, deliverySlaSamplesPerRegion0.deliverySlaPerTypes) &&
        Objects.equals(this.region, deliverySlaSamplesPerRegion0.region);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deliverySlaPerTypes, region);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeliverySlaSamplesPerRegion0 {\n");
    sb.append("    deliverySlaPerTypes: ").append(toIndentedString(deliverySlaPerTypes)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeliverySlaPerTypes");
    openapiFields.add("Region");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DeliverySlaPerTypes");
    openapiRequiredFields.add("Region");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeliverySlaSamplesPerRegion0
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeliverySlaSamplesPerRegion0.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeliverySlaSamplesPerRegion0 is not found in the empty JSON string", DeliverySlaSamplesPerRegion0.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeliverySlaSamplesPerRegion0.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeliverySlaSamplesPerRegion0` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeliverySlaSamplesPerRegion0.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("DeliverySlaPerTypes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("DeliverySlaPerTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeliverySlaPerTypes` to be an array in the JSON string but got `%s`", jsonObj.get("DeliverySlaPerTypes").toString()));
      }
      if ((jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) && !jsonObj.get("Region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Region").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeliverySlaSamplesPerRegion0.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeliverySlaSamplesPerRegion0' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeliverySlaSamplesPerRegion0> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeliverySlaSamplesPerRegion0.class));

       return (TypeAdapter<T>) new TypeAdapter<DeliverySlaSamplesPerRegion0>() {
           @Override
           public void write(JsonWriter out, DeliverySlaSamplesPerRegion0 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeliverySlaSamplesPerRegion0 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeliverySlaSamplesPerRegion0 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeliverySlaSamplesPerRegion0
   * @throws IOException if the JSON string is invalid with respect to DeliverySlaSamplesPerRegion0
   */
  public static DeliverySlaSamplesPerRegion0 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeliverySlaSamplesPerRegion0.class);
  }

  /**
   * Convert an instance of DeliverySlaSamplesPerRegion0 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

