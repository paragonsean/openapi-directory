/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BrandsInner;
import org.openapitools.client.model.CategoriesTreesInner;
import org.openapitools.client.model.DepartmentsInner;
import org.openapitools.client.model.Summary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Facetscategory200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:46.427507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Facetscategory200Response {
  public static final String SERIALIZED_NAME_BRANDS = "Brands";
  @SerializedName(SERIALIZED_NAME_BRANDS)
  private List<BrandsInner> brands = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORIES_TREES = "CategoriesTrees";
  @SerializedName(SERIALIZED_NAME_CATEGORIES_TREES)
  private List<CategoriesTreesInner> categoriesTrees = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPARTMENTS = "Departments";
  @SerializedName(SERIALIZED_NAME_DEPARTMENTS)
  private List<DepartmentsInner> departments = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE_RANGES = "PriceRanges";
  @SerializedName(SERIALIZED_NAME_PRICE_RANGES)
  private List<Object> priceRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPECIFICATION_FILTERS = "SpecificationFilters";
  @SerializedName(SERIALIZED_NAME_SPECIFICATION_FILTERS)
  private Object specificationFilters;

  public static final String SERIALIZED_NAME_SUMMARY = "Summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private Summary summary;

  public Facetscategory200Response() {
  }

  public Facetscategory200Response brands(List<BrandsInner> brands) {
    this.brands = brands;
    return this;
  }

  public Facetscategory200Response addBrandsItem(BrandsInner brandsItem) {
    if (this.brands == null) {
      this.brands = new ArrayList<>();
    }
    this.brands.add(brandsItem);
    return this;
  }

  /**
   * Array of general information about the brands.
   * @return brands
   */
  @javax.annotation.Nonnull
  public List<BrandsInner> getBrands() {
    return brands;
  }

  public void setBrands(List<BrandsInner> brands) {
    this.brands = brands;
  }


  public Facetscategory200Response categoriesTrees(List<CategoriesTreesInner> categoriesTrees) {
    this.categoriesTrees = categoriesTrees;
    return this;
  }

  public Facetscategory200Response addCategoriesTreesItem(CategoriesTreesInner categoriesTreesItem) {
    if (this.categoriesTrees == null) {
      this.categoriesTrees = new ArrayList<>();
    }
    this.categoriesTrees.add(categoriesTreesItem);
    return this;
  }

  /**
   * Array of the category tree.
   * @return categoriesTrees
   */
  @javax.annotation.Nonnull
  public List<CategoriesTreesInner> getCategoriesTrees() {
    return categoriesTrees;
  }

  public void setCategoriesTrees(List<CategoriesTreesInner> categoriesTrees) {
    this.categoriesTrees = categoriesTrees;
  }


  public Facetscategory200Response departments(List<DepartmentsInner> departments) {
    this.departments = departments;
    return this;
  }

  public Facetscategory200Response addDepartmentsItem(DepartmentsInner departmentsItem) {
    if (this.departments == null) {
      this.departments = new ArrayList<>();
    }
    this.departments.add(departmentsItem);
    return this;
  }

  /**
   * Array of general information about the categories.
   * @return departments
   */
  @javax.annotation.Nonnull
  public List<DepartmentsInner> getDepartments() {
    return departments;
  }

  public void setDepartments(List<DepartmentsInner> departments) {
    this.departments = departments;
  }


  public Facetscategory200Response priceRanges(List<Object> priceRanges) {
    this.priceRanges = priceRanges;
    return this;
  }

  public Facetscategory200Response addPriceRangesItem(Object priceRangesItem) {
    if (this.priceRanges == null) {
      this.priceRanges = new ArrayList<>();
    }
    this.priceRanges.add(priceRangesItem);
    return this;
  }

  /**
   * Array with general information of the price ranges.
   * @return priceRanges
   */
  @javax.annotation.Nonnull
  public List<Object> getPriceRanges() {
    return priceRanges;
  }

  public void setPriceRanges(List<Object> priceRanges) {
    this.priceRanges = priceRanges;
  }


  public Facetscategory200Response specificationFilters(Object specificationFilters) {
    this.specificationFilters = specificationFilters;
    return this;
  }

  /**
   * Object with general information of specifications.
   * @return specificationFilters
   */
  @javax.annotation.Nonnull
  public Object getSpecificationFilters() {
    return specificationFilters;
  }

  public void setSpecificationFilters(Object specificationFilters) {
    this.specificationFilters = specificationFilters;
  }


  public Facetscategory200Response summary(Summary summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Get summary
   * @return summary
   */
  @javax.annotation.Nonnull
  public Summary getSummary() {
    return summary;
  }

  public void setSummary(Summary summary) {
    this.summary = summary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Facetscategory200Response facetscategory200Response = (Facetscategory200Response) o;
    return Objects.equals(this.brands, facetscategory200Response.brands) &&
        Objects.equals(this.categoriesTrees, facetscategory200Response.categoriesTrees) &&
        Objects.equals(this.departments, facetscategory200Response.departments) &&
        Objects.equals(this.priceRanges, facetscategory200Response.priceRanges) &&
        Objects.equals(this.specificationFilters, facetscategory200Response.specificationFilters) &&
        Objects.equals(this.summary, facetscategory200Response.summary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brands, categoriesTrees, departments, priceRanges, specificationFilters, summary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Facetscategory200Response {\n");
    sb.append("    brands: ").append(toIndentedString(brands)).append("\n");
    sb.append("    categoriesTrees: ").append(toIndentedString(categoriesTrees)).append("\n");
    sb.append("    departments: ").append(toIndentedString(departments)).append("\n");
    sb.append("    priceRanges: ").append(toIndentedString(priceRanges)).append("\n");
    sb.append("    specificationFilters: ").append(toIndentedString(specificationFilters)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Brands");
    openapiFields.add("CategoriesTrees");
    openapiFields.add("Departments");
    openapiFields.add("PriceRanges");
    openapiFields.add("SpecificationFilters");
    openapiFields.add("Summary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Brands");
    openapiRequiredFields.add("CategoriesTrees");
    openapiRequiredFields.add("Departments");
    openapiRequiredFields.add("PriceRanges");
    openapiRequiredFields.add("SpecificationFilters");
    openapiRequiredFields.add("Summary");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Facetscategory200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Facetscategory200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Facetscategory200Response is not found in the empty JSON string", Facetscategory200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Facetscategory200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Facetscategory200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Facetscategory200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("Brands").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Brands` to be an array in the JSON string but got `%s`", jsonObj.get("Brands").toString()));
      }

      JsonArray jsonArraybrands = jsonObj.getAsJsonArray("Brands");
      // validate the required field `Brands` (array)
      for (int i = 0; i < jsonArraybrands.size(); i++) {
        BrandsInner.validateJsonElement(jsonArraybrands.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("CategoriesTrees").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CategoriesTrees` to be an array in the JSON string but got `%s`", jsonObj.get("CategoriesTrees").toString()));
      }

      JsonArray jsonArraycategoriesTrees = jsonObj.getAsJsonArray("CategoriesTrees");
      // validate the required field `CategoriesTrees` (array)
      for (int i = 0; i < jsonArraycategoriesTrees.size(); i++) {
        CategoriesTreesInner.validateJsonElement(jsonArraycategoriesTrees.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("Departments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Departments` to be an array in the JSON string but got `%s`", jsonObj.get("Departments").toString()));
      }

      JsonArray jsonArraydepartments = jsonObj.getAsJsonArray("Departments");
      // validate the required field `Departments` (array)
      for (int i = 0; i < jsonArraydepartments.size(); i++) {
        DepartmentsInner.validateJsonElement(jsonArraydepartments.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("PriceRanges") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("PriceRanges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `PriceRanges` to be an array in the JSON string but got `%s`", jsonObj.get("PriceRanges").toString()));
      }
      // validate the required field `Summary`
      Summary.validateJsonElement(jsonObj.get("Summary"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Facetscategory200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Facetscategory200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Facetscategory200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Facetscategory200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<Facetscategory200Response>() {
           @Override
           public void write(JsonWriter out, Facetscategory200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Facetscategory200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Facetscategory200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Facetscategory200Response
   * @throws IOException if the JSON string is invalid with respect to Facetscategory200Response
   */
  public static Facetscategory200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Facetscategory200Response.class);
  }

  /**
   * Convert an instance of Facetscategory200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

