/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SellerMerchantInstallmentsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InstallmentsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:46.427507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstallmentsInner {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_HAS_INTEREST_RATE = "hasInterestRate";
  @SerializedName(SERIALIZED_NAME_HAS_INTEREST_RATE)
  private Boolean hasInterestRate;

  public static final String SERIALIZED_NAME_INTEREST_RATE = "interestRate";
  @SerializedName(SERIALIZED_NAME_INTEREST_RATE)
  private Integer interestRate;

  public static final String SERIALIZED_NAME_SELLER_MERCHANT_INSTALLMENTS = "sellerMerchantInstallments";
  @SerializedName(SERIALIZED_NAME_SELLER_MERCHANT_INSTALLMENTS)
  private List<SellerMerchantInstallmentsInner> sellerMerchantInstallments = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Integer value;

  public InstallmentsInner() {
  }

  public InstallmentsInner count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Count.
   * @return count
   */
  @javax.annotation.Nonnull
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public InstallmentsInner hasInterestRate(Boolean hasInterestRate) {
    this.hasInterestRate = hasInterestRate;
    return this;
  }

  /**
   * Has interest rate.
   * @return hasInterestRate
   */
  @javax.annotation.Nonnull
  public Boolean getHasInterestRate() {
    return hasInterestRate;
  }

  public void setHasInterestRate(Boolean hasInterestRate) {
    this.hasInterestRate = hasInterestRate;
  }


  public InstallmentsInner interestRate(Integer interestRate) {
    this.interestRate = interestRate;
    return this;
  }

  /**
   * Interest rate.
   * @return interestRate
   */
  @javax.annotation.Nonnull
  public Integer getInterestRate() {
    return interestRate;
  }

  public void setInterestRate(Integer interestRate) {
    this.interestRate = interestRate;
  }


  public InstallmentsInner sellerMerchantInstallments(List<SellerMerchantInstallmentsInner> sellerMerchantInstallments) {
    this.sellerMerchantInstallments = sellerMerchantInstallments;
    return this;
  }

  public InstallmentsInner addSellerMerchantInstallmentsItem(SellerMerchantInstallmentsInner sellerMerchantInstallmentsItem) {
    if (this.sellerMerchantInstallments == null) {
      this.sellerMerchantInstallments = new ArrayList<>();
    }
    this.sellerMerchantInstallments.add(sellerMerchantInstallmentsItem);
    return this;
  }

  /**
   * Seller merchant installments.
   * @return sellerMerchantInstallments
   */
  @javax.annotation.Nonnull
  public List<SellerMerchantInstallmentsInner> getSellerMerchantInstallments() {
    return sellerMerchantInstallments;
  }

  public void setSellerMerchantInstallments(List<SellerMerchantInstallmentsInner> sellerMerchantInstallments) {
    this.sellerMerchantInstallments = sellerMerchantInstallments;
  }


  public InstallmentsInner total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Total.
   * @return total
   */
  @javax.annotation.Nonnull
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }


  public InstallmentsInner value(Integer value) {
    this.value = value;
    return this;
  }

  /**
   * Value.
   * @return value
   */
  @javax.annotation.Nonnull
  public Integer getValue() {
    return value;
  }

  public void setValue(Integer value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstallmentsInner installmentsInner = (InstallmentsInner) o;
    return Objects.equals(this.count, installmentsInner.count) &&
        Objects.equals(this.hasInterestRate, installmentsInner.hasInterestRate) &&
        Objects.equals(this.interestRate, installmentsInner.interestRate) &&
        Objects.equals(this.sellerMerchantInstallments, installmentsInner.sellerMerchantInstallments) &&
        Objects.equals(this.total, installmentsInner.total) &&
        Objects.equals(this.value, installmentsInner.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, hasInterestRate, interestRate, sellerMerchantInstallments, total, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstallmentsInner {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    hasInterestRate: ").append(toIndentedString(hasInterestRate)).append("\n");
    sb.append("    interestRate: ").append(toIndentedString(interestRate)).append("\n");
    sb.append("    sellerMerchantInstallments: ").append(toIndentedString(sellerMerchantInstallments)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("hasInterestRate");
    openapiFields.add("interestRate");
    openapiFields.add("sellerMerchantInstallments");
    openapiFields.add("total");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("count");
    openapiRequiredFields.add("hasInterestRate");
    openapiRequiredFields.add("interestRate");
    openapiRequiredFields.add("sellerMerchantInstallments");
    openapiRequiredFields.add("total");
    openapiRequiredFields.add("value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstallmentsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstallmentsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstallmentsInner is not found in the empty JSON string", InstallmentsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstallmentsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstallmentsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InstallmentsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("sellerMerchantInstallments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerMerchantInstallments` to be an array in the JSON string but got `%s`", jsonObj.get("sellerMerchantInstallments").toString()));
      }

      JsonArray jsonArraysellerMerchantInstallments = jsonObj.getAsJsonArray("sellerMerchantInstallments");
      // validate the required field `sellerMerchantInstallments` (array)
      for (int i = 0; i < jsonArraysellerMerchantInstallments.size(); i++) {
        SellerMerchantInstallmentsInner.validateJsonElement(jsonArraysellerMerchantInstallments.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstallmentsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstallmentsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstallmentsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstallmentsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<InstallmentsInner>() {
           @Override
           public void write(JsonWriter out, InstallmentsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstallmentsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstallmentsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstallmentsInner
   * @throws IOException if the JSON string is invalid with respect to InstallmentsInner
   */
  public static InstallmentsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstallmentsInner.class);
  }

  /**
   * Convert an instance of InstallmentsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

