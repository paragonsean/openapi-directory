/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChildrenInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CategoriesTreesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:46.427507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CategoriesTreesInner {
  public static final String SERIALIZED_NAME_CHILDREN = "Children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private List<ChildrenInner> children = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LINK = "Link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LINK_ENCODED = "LinkEncoded";
  @SerializedName(SERIALIZED_NAME_LINK_ENCODED)
  private String linkEncoded;

  public static final String SERIALIZED_NAME_MAP = "Map";
  @SerializedName(SERIALIZED_NAME_MAP)
  private String map;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POSITION = "Position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_QUANTITY = "Quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public CategoriesTreesInner() {
  }

  public CategoriesTreesInner children(List<ChildrenInner> children) {
    this.children = children;
    return this;
  }

  public CategoriesTreesInner addChildrenItem(ChildrenInner childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<>();
    }
    this.children.add(childrenItem);
    return this;
  }

  /**
   * Category children.
   * @return children
   */
  @javax.annotation.Nonnull
  public List<ChildrenInner> getChildren() {
    return children;
  }

  public void setChildren(List<ChildrenInner> children) {
    this.children = children;
  }


  public CategoriesTreesInner id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Category ID.
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CategoriesTreesInner link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Link of the facet.
   * @return link
   */
  @javax.annotation.Nonnull
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public CategoriesTreesInner linkEncoded(String linkEncoded) {
    this.linkEncoded = linkEncoded;
    return this;
  }

  /**
   * Encoded link of the facet.
   * @return linkEncoded
   */
  @javax.annotation.Nonnull
  public String getLinkEncoded() {
    return linkEncoded;
  }

  public void setLinkEncoded(String linkEncoded) {
    this.linkEncoded = linkEncoded;
  }


  public CategoriesTreesInner map(String map) {
    this.map = map;
    return this;
  }

  /**
   * Mapping of the facet.
   * @return map
   */
  @javax.annotation.Nonnull
  public String getMap() {
    return map;
  }

  public void setMap(String map) {
    this.map = map;
  }


  public CategoriesTreesInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Category name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CategoriesTreesInner position(Integer position) {
    this.position = position;
    return this;
  }

  /**
   * Position of the facet.
   * @return position
   */
  @javax.annotation.Nullable
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public CategoriesTreesInner quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Quantity of the facets.
   * @return quantity
   */
  @javax.annotation.Nonnull
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public CategoriesTreesInner value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Value of the facet.
   * @return value
   */
  @javax.annotation.Nonnull
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CategoriesTreesInner categoriesTreesInner = (CategoriesTreesInner) o;
    return Objects.equals(this.children, categoriesTreesInner.children) &&
        Objects.equals(this.id, categoriesTreesInner.id) &&
        Objects.equals(this.link, categoriesTreesInner.link) &&
        Objects.equals(this.linkEncoded, categoriesTreesInner.linkEncoded) &&
        Objects.equals(this.map, categoriesTreesInner.map) &&
        Objects.equals(this.name, categoriesTreesInner.name) &&
        Objects.equals(this.position, categoriesTreesInner.position) &&
        Objects.equals(this.quantity, categoriesTreesInner.quantity) &&
        Objects.equals(this.value, categoriesTreesInner.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(children, id, link, linkEncoded, map, name, position, quantity, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CategoriesTreesInner {\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    linkEncoded: ").append(toIndentedString(linkEncoded)).append("\n");
    sb.append("    map: ").append(toIndentedString(map)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Children");
    openapiFields.add("Id");
    openapiFields.add("Link");
    openapiFields.add("LinkEncoded");
    openapiFields.add("Map");
    openapiFields.add("Name");
    openapiFields.add("Position");
    openapiFields.add("Quantity");
    openapiFields.add("Value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Children");
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("Link");
    openapiRequiredFields.add("LinkEncoded");
    openapiRequiredFields.add("Map");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Position");
    openapiRequiredFields.add("Quantity");
    openapiRequiredFields.add("Value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CategoriesTreesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CategoriesTreesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CategoriesTreesInner is not found in the empty JSON string", CategoriesTreesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CategoriesTreesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CategoriesTreesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CategoriesTreesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("Children").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Children` to be an array in the JSON string but got `%s`", jsonObj.get("Children").toString()));
      }

      JsonArray jsonArraychildren = jsonObj.getAsJsonArray("Children");
      // validate the required field `Children` (array)
      for (int i = 0; i < jsonArraychildren.size(); i++) {
        ChildrenInner.validateJsonElement(jsonArraychildren.get(i));
      };
      if (!jsonObj.get("Link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Link").toString()));
      }
      if (!jsonObj.get("LinkEncoded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LinkEncoded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LinkEncoded").toString()));
      }
      if (!jsonObj.get("Map").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Map` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Map").toString()));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (!jsonObj.get("Value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CategoriesTreesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CategoriesTreesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CategoriesTreesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CategoriesTreesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CategoriesTreesInner>() {
           @Override
           public void write(JsonWriter out, CategoriesTreesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CategoriesTreesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CategoriesTreesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CategoriesTreesInner
   * @throws IOException if the JSON string is invalid with respect to CategoriesTreesInner
   */
  public static CategoriesTreesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CategoriesTreesInner.class);
  }

  /**
   * Convert an instance of CategoriesTreesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

