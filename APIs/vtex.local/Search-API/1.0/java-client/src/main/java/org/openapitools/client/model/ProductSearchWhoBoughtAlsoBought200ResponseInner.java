/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ItemsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProductSearchWhoBoughtAlsoBought200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:46.427507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductSearchWhoBoughtAlsoBought200ResponseInner {
  public static final String SERIALIZED_NAME_ALL_SPECIFICATIONS = "allSpecifications";
  @SerializedName(SERIALIZED_NAME_ALL_SPECIFICATIONS)
  private List<String> allSpecifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALL_SPECIFICATIONS_GROUPS = "allSpecificationsGroups";
  @SerializedName(SERIALIZED_NAME_ALL_SPECIFICATIONS_GROUPS)
  private List<String> allSpecificationsGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  public static final String SERIALIZED_NAME_BRAND_ID = "brandId";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private Integer brandId;

  public static final String SERIALIZED_NAME_BRAND_IMAGE_URL = "brandImageUrl";
  @SerializedName(SERIALIZED_NAME_BRAND_IMAGE_URL)
  private String brandImageUrl;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<Object> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORIES_IDS = "categoriesIds";
  @SerializedName(SERIALIZED_NAME_CATEGORIES_IDS)
  private List<Object> categoriesIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_CLUSTER_HIGHLIGHTS = "clusterHighlights";
  @SerializedName(SERIALIZED_NAME_CLUSTER_HIGHLIGHTS)
  private Object clusterHighlights;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<ItemsInner> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LINK_TEXT = "linkText";
  @SerializedName(SERIALIZED_NAME_LINK_TEXT)
  private String linkText;

  public static final String SERIALIZED_NAME_META_TAG_DESCRIPTION = "metaTagDescription";
  @SerializedName(SERIALIZED_NAME_META_TAG_DESCRIPTION)
  private String metaTagDescription;

  public static final String SERIALIZED_NAME_PRODUCT_CLUSTERS = "productClusters";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CLUSTERS)
  private Object productClusters;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "productName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  private String productName;

  public static final String SERIALIZED_NAME_PRODUCT_REFERENCE = "productReference";
  @SerializedName(SERIALIZED_NAME_PRODUCT_REFERENCE)
  private String productReference;

  public static final String SERIALIZED_NAME_PRODUCT_REFERENCE_CODE = "productReferenceCode";
  @SerializedName(SERIALIZED_NAME_PRODUCT_REFERENCE_CODE)
  private Integer productReferenceCode;

  public static final String SERIALIZED_NAME_PRODUCT_TITLE = "productTitle";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TITLE)
  private String productTitle;

  public static final String SERIALIZED_NAME_RELEASE_DATE = "releaseDate";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private String releaseDate;

  public static final String SERIALIZED_NAME_SEARCHABLE_CLUSTERS = "searchableClusters";
  @SerializedName(SERIALIZED_NAME_SEARCHABLE_CLUSTERS)
  private Object searchableClusters;

  public ProductSearchWhoBoughtAlsoBought200ResponseInner() {
  }

  public ProductSearchWhoBoughtAlsoBought200ResponseInner allSpecifications(List<String> allSpecifications) {
    this.allSpecifications = allSpecifications;
    return this;
  }

  public ProductSearchWhoBoughtAlsoBought200ResponseInner addAllSpecificationsItem(String allSpecificationsItem) {
    if (this.allSpecifications == null) {
      this.allSpecifications = new ArrayList<>();
    }
    this.allSpecifications.add(allSpecificationsItem);
    return this;
  }

  /**
   * Array of the product&#39;s specifications.
   * @return allSpecifications
   */
  @javax.annotation.Nonnull
  public List<String> getAllSpecifications() {
    return allSpecifications;
  }

  public void setAllSpecifications(List<String> allSpecifications) {
    this.allSpecifications = allSpecifications;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner allSpecificationsGroups(List<String> allSpecificationsGroups) {
    this.allSpecificationsGroups = allSpecificationsGroups;
    return this;
  }

  public ProductSearchWhoBoughtAlsoBought200ResponseInner addAllSpecificationsGroupsItem(String allSpecificationsGroupsItem) {
    if (this.allSpecificationsGroups == null) {
      this.allSpecificationsGroups = new ArrayList<>();
    }
    this.allSpecificationsGroups.add(allSpecificationsGroupsItem);
    return this;
  }

  /**
   * Array of the product&#39;s specifications groups.
   * @return allSpecificationsGroups
   */
  @javax.annotation.Nonnull
  public List<String> getAllSpecificationsGroups() {
    return allSpecificationsGroups;
  }

  public void setAllSpecificationsGroups(List<String> allSpecificationsGroups) {
    this.allSpecificationsGroups = allSpecificationsGroups;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner brand(String brand) {
    this.brand = brand;
    return this;
  }

  /**
   * Brand name.
   * @return brand
   */
  @javax.annotation.Nonnull
  public String getBrand() {
    return brand;
  }

  public void setBrand(String brand) {
    this.brand = brand;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner brandId(Integer brandId) {
    this.brandId = brandId;
    return this;
  }

  /**
   * Product brand ID.
   * @return brandId
   */
  @javax.annotation.Nonnull
  public Integer getBrandId() {
    return brandId;
  }

  public void setBrandId(Integer brandId) {
    this.brandId = brandId;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner brandImageUrl(String brandImageUrl) {
    this.brandImageUrl = brandImageUrl;
    return this;
  }

  /**
   * Product&#39;s brand image URL.
   * @return brandImageUrl
   */
  @javax.annotation.Nonnull
  public String getBrandImageUrl() {
    return brandImageUrl;
  }

  public void setBrandImageUrl(String brandImageUrl) {
    this.brandImageUrl = brandImageUrl;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner categories(List<Object> categories) {
    this.categories = categories;
    return this;
  }

  public ProductSearchWhoBoughtAlsoBought200ResponseInner addCategoriesItem(Object categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Array of the product&#39;s categories URLs.
   * @return categories
   */
  @javax.annotation.Nonnull
  public List<Object> getCategories() {
    return categories;
  }

  public void setCategories(List<Object> categories) {
    this.categories = categories;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner categoriesIds(List<Object> categoriesIds) {
    this.categoriesIds = categoriesIds;
    return this;
  }

  public ProductSearchWhoBoughtAlsoBought200ResponseInner addCategoriesIdsItem(Object categoriesIdsItem) {
    if (this.categoriesIds == null) {
      this.categoriesIds = new ArrayList<>();
    }
    this.categoriesIds.add(categoriesIdsItem);
    return this;
  }

  /**
   * Array of the product&#39;s categories IDs.
   * @return categoriesIds
   */
  @javax.annotation.Nonnull
  public List<Object> getCategoriesIds() {
    return categoriesIds;
  }

  public void setCategoriesIds(List<Object> categoriesIds) {
    this.categoriesIds = categoriesIds;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * Product category ID.
   * @return categoryId
   */
  @javax.annotation.Nonnull
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner clusterHighlights(Object clusterHighlights) {
    this.clusterHighlights = clusterHighlights;
    return this;
  }

  /**
   * Cluster highlight ID and name.
   * @return clusterHighlights
   */
  @javax.annotation.Nonnull
  public Object getClusterHighlights() {
    return clusterHighlights;
  }

  public void setClusterHighlights(Object clusterHighlights) {
    this.clusterHighlights = clusterHighlights;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the main information related to the product. A simple and easy to understand summary for the customer.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner items(List<ItemsInner> items) {
    this.items = items;
    return this;
  }

  public ProductSearchWhoBoughtAlsoBought200ResponseInner addItemsItem(ItemsInner itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Array containing the product SKU general information.
   * @return items
   */
  @javax.annotation.Nonnull
  public List<ItemsInner> getItems() {
    return items;
  }

  public void setItems(List<ItemsInner> items) {
    this.items = items;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Product URL.
   * @return link
   */
  @javax.annotation.Nonnull
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner linkText(String linkText) {
    this.linkText = linkText;
    return this;
  }

  /**
   * Product URL.
   * @return linkText
   */
  @javax.annotation.Nonnull
  public String getLinkText() {
    return linkText;
  }

  public void setLinkText(String linkText) {
    this.linkText = linkText;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner metaTagDescription(String metaTagDescription) {
    this.metaTagDescription = metaTagDescription;
    return this;
  }

  /**
   * Brief description of the category. It&#39;s recommended that you don&#39;t exceed 150 characters so that the search engines can display it correctly in the results page.
   * @return metaTagDescription
   */
  @javax.annotation.Nonnull
  public String getMetaTagDescription() {
    return metaTagDescription;
  }

  public void setMetaTagDescription(String metaTagDescription) {
    this.metaTagDescription = metaTagDescription;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner productClusters(Object productClusters) {
    this.productClusters = productClusters;
    return this;
  }

  /**
   * Product clusters&#39; IDs and names.
   * @return productClusters
   */
  @javax.annotation.Nonnull
  public Object getProductClusters() {
    return productClusters;
  }

  public void setProductClusters(Object productClusters) {
    this.productClusters = productClusters;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Product unique identifier.
   * @return productId
   */
  @javax.annotation.Nonnull
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner productName(String productName) {
    this.productName = productName;
    return this;
  }

  /**
   * Product name.
   * @return productName
   */
  @javax.annotation.Nonnull
  public String getProductName() {
    return productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner productReference(String productReference) {
    this.productReference = productReference;
    return this;
  }

  /**
   * Product reference.
   * @return productReference
   */
  @javax.annotation.Nonnull
  public String getProductReference() {
    return productReference;
  }

  public void setProductReference(String productReference) {
    this.productReference = productReference;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner productReferenceCode(Integer productReferenceCode) {
    this.productReferenceCode = productReferenceCode;
    return this;
  }

  /**
   * Product reference ID.
   * @return productReferenceCode
   */
  @javax.annotation.Nullable
  public Integer getProductReferenceCode() {
    return productReferenceCode;
  }

  public void setProductReferenceCode(Integer productReferenceCode) {
    this.productReferenceCode = productReferenceCode;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner productTitle(String productTitle) {
    this.productTitle = productTitle;
    return this;
  }

  /**
   * Text that is in the browser tab and corresponds to the title of the product page. This field is important for SEO.
   * @return productTitle
   */
  @javax.annotation.Nonnull
  public String getProductTitle() {
    return productTitle;
  }

  public void setProductTitle(String productTitle) {
    this.productTitle = productTitle;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner releaseDate(String releaseDate) {
    this.releaseDate = releaseDate;
    return this;
  }

  /**
   * Product release date.
   * @return releaseDate
   */
  @javax.annotation.Nonnull
  public String getReleaseDate() {
    return releaseDate;
  }

  public void setReleaseDate(String releaseDate) {
    this.releaseDate = releaseDate;
  }


  public ProductSearchWhoBoughtAlsoBought200ResponseInner searchableClusters(Object searchableClusters) {
    this.searchableClusters = searchableClusters;
    return this;
  }

  /**
   * Searchable clusters IDs and names
   * @return searchableClusters
   */
  @javax.annotation.Nonnull
  public Object getSearchableClusters() {
    return searchableClusters;
  }

  public void setSearchableClusters(Object searchableClusters) {
    this.searchableClusters = searchableClusters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductSearchWhoBoughtAlsoBought200ResponseInner productSearchWhoBoughtAlsoBought200ResponseInner = (ProductSearchWhoBoughtAlsoBought200ResponseInner) o;
    return Objects.equals(this.allSpecifications, productSearchWhoBoughtAlsoBought200ResponseInner.allSpecifications) &&
        Objects.equals(this.allSpecificationsGroups, productSearchWhoBoughtAlsoBought200ResponseInner.allSpecificationsGroups) &&
        Objects.equals(this.brand, productSearchWhoBoughtAlsoBought200ResponseInner.brand) &&
        Objects.equals(this.brandId, productSearchWhoBoughtAlsoBought200ResponseInner.brandId) &&
        Objects.equals(this.brandImageUrl, productSearchWhoBoughtAlsoBought200ResponseInner.brandImageUrl) &&
        Objects.equals(this.categories, productSearchWhoBoughtAlsoBought200ResponseInner.categories) &&
        Objects.equals(this.categoriesIds, productSearchWhoBoughtAlsoBought200ResponseInner.categoriesIds) &&
        Objects.equals(this.categoryId, productSearchWhoBoughtAlsoBought200ResponseInner.categoryId) &&
        Objects.equals(this.clusterHighlights, productSearchWhoBoughtAlsoBought200ResponseInner.clusterHighlights) &&
        Objects.equals(this.description, productSearchWhoBoughtAlsoBought200ResponseInner.description) &&
        Objects.equals(this.items, productSearchWhoBoughtAlsoBought200ResponseInner.items) &&
        Objects.equals(this.link, productSearchWhoBoughtAlsoBought200ResponseInner.link) &&
        Objects.equals(this.linkText, productSearchWhoBoughtAlsoBought200ResponseInner.linkText) &&
        Objects.equals(this.metaTagDescription, productSearchWhoBoughtAlsoBought200ResponseInner.metaTagDescription) &&
        Objects.equals(this.productClusters, productSearchWhoBoughtAlsoBought200ResponseInner.productClusters) &&
        Objects.equals(this.productId, productSearchWhoBoughtAlsoBought200ResponseInner.productId) &&
        Objects.equals(this.productName, productSearchWhoBoughtAlsoBought200ResponseInner.productName) &&
        Objects.equals(this.productReference, productSearchWhoBoughtAlsoBought200ResponseInner.productReference) &&
        Objects.equals(this.productReferenceCode, productSearchWhoBoughtAlsoBought200ResponseInner.productReferenceCode) &&
        Objects.equals(this.productTitle, productSearchWhoBoughtAlsoBought200ResponseInner.productTitle) &&
        Objects.equals(this.releaseDate, productSearchWhoBoughtAlsoBought200ResponseInner.releaseDate) &&
        Objects.equals(this.searchableClusters, productSearchWhoBoughtAlsoBought200ResponseInner.searchableClusters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allSpecifications, allSpecificationsGroups, brand, brandId, brandImageUrl, categories, categoriesIds, categoryId, clusterHighlights, description, items, link, linkText, metaTagDescription, productClusters, productId, productName, productReference, productReferenceCode, productTitle, releaseDate, searchableClusters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductSearchWhoBoughtAlsoBought200ResponseInner {\n");
    sb.append("    allSpecifications: ").append(toIndentedString(allSpecifications)).append("\n");
    sb.append("    allSpecificationsGroups: ").append(toIndentedString(allSpecificationsGroups)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("    brandImageUrl: ").append(toIndentedString(brandImageUrl)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    categoriesIds: ").append(toIndentedString(categoriesIds)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    clusterHighlights: ").append(toIndentedString(clusterHighlights)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    linkText: ").append(toIndentedString(linkText)).append("\n");
    sb.append("    metaTagDescription: ").append(toIndentedString(metaTagDescription)).append("\n");
    sb.append("    productClusters: ").append(toIndentedString(productClusters)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    productReference: ").append(toIndentedString(productReference)).append("\n");
    sb.append("    productReferenceCode: ").append(toIndentedString(productReferenceCode)).append("\n");
    sb.append("    productTitle: ").append(toIndentedString(productTitle)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    searchableClusters: ").append(toIndentedString(searchableClusters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allSpecifications");
    openapiFields.add("allSpecificationsGroups");
    openapiFields.add("brand");
    openapiFields.add("brandId");
    openapiFields.add("brandImageUrl");
    openapiFields.add("categories");
    openapiFields.add("categoriesIds");
    openapiFields.add("categoryId");
    openapiFields.add("clusterHighlights");
    openapiFields.add("description");
    openapiFields.add("items");
    openapiFields.add("link");
    openapiFields.add("linkText");
    openapiFields.add("metaTagDescription");
    openapiFields.add("productClusters");
    openapiFields.add("productId");
    openapiFields.add("productName");
    openapiFields.add("productReference");
    openapiFields.add("productReferenceCode");
    openapiFields.add("productTitle");
    openapiFields.add("releaseDate");
    openapiFields.add("searchableClusters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allSpecifications");
    openapiRequiredFields.add("allSpecificationsGroups");
    openapiRequiredFields.add("brand");
    openapiRequiredFields.add("brandId");
    openapiRequiredFields.add("brandImageUrl");
    openapiRequiredFields.add("categories");
    openapiRequiredFields.add("categoriesIds");
    openapiRequiredFields.add("categoryId");
    openapiRequiredFields.add("clusterHighlights");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("items");
    openapiRequiredFields.add("link");
    openapiRequiredFields.add("linkText");
    openapiRequiredFields.add("metaTagDescription");
    openapiRequiredFields.add("productClusters");
    openapiRequiredFields.add("productId");
    openapiRequiredFields.add("productName");
    openapiRequiredFields.add("productReference");
    openapiRequiredFields.add("productReferenceCode");
    openapiRequiredFields.add("productTitle");
    openapiRequiredFields.add("releaseDate");
    openapiRequiredFields.add("searchableClusters");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductSearchWhoBoughtAlsoBought200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductSearchWhoBoughtAlsoBought200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductSearchWhoBoughtAlsoBought200ResponseInner is not found in the empty JSON string", ProductSearchWhoBoughtAlsoBought200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductSearchWhoBoughtAlsoBought200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductSearchWhoBoughtAlsoBought200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProductSearchWhoBoughtAlsoBought200ResponseInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("allSpecifications") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("allSpecifications").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allSpecifications` to be an array in the JSON string but got `%s`", jsonObj.get("allSpecifications").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("allSpecificationsGroups") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("allSpecificationsGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allSpecificationsGroups` to be an array in the JSON string but got `%s`", jsonObj.get("allSpecificationsGroups").toString()));
      }
      if (!jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      if (!jsonObj.get("brandImageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandImageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandImageUrl").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("categories") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("categoriesIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("categoriesIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoriesIds` to be an array in the JSON string but got `%s`", jsonObj.get("categoriesIds").toString()));
      }
      if (!jsonObj.get("categoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }

      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      // validate the required field `items` (array)
      for (int i = 0; i < jsonArrayitems.size(); i++) {
        ItemsInner.validateJsonElement(jsonArrayitems.get(i));
      };
      if (!jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if (!jsonObj.get("linkText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkText").toString()));
      }
      if (!jsonObj.get("metaTagDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metaTagDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metaTagDescription").toString()));
      }
      if (!jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if (!jsonObj.get("productName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productName").toString()));
      }
      if (!jsonObj.get("productReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productReference").toString()));
      }
      if (!jsonObj.get("productTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productTitle").toString()));
      }
      if (!jsonObj.get("releaseDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releaseDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releaseDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductSearchWhoBoughtAlsoBought200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductSearchWhoBoughtAlsoBought200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductSearchWhoBoughtAlsoBought200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductSearchWhoBoughtAlsoBought200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductSearchWhoBoughtAlsoBought200ResponseInner>() {
           @Override
           public void write(JsonWriter out, ProductSearchWhoBoughtAlsoBought200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductSearchWhoBoughtAlsoBought200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductSearchWhoBoughtAlsoBought200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductSearchWhoBoughtAlsoBought200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to ProductSearchWhoBoughtAlsoBought200ResponseInner
   */
  public static ProductSearchWhoBoughtAlsoBought200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductSearchWhoBoughtAlsoBought200ResponseInner.class);
  }

  /**
   * Convert an instance of ProductSearchWhoBoughtAlsoBought200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

