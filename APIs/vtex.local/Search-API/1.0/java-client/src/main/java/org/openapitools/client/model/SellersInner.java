/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CommertialOffer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SellersInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:46.427507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SellersInner {
  public static final String SERIALIZED_NAME_ADD_TO_CART_LINK = "addToCartLink";
  @SerializedName(SERIALIZED_NAME_ADD_TO_CART_LINK)
  private String addToCartLink;

  public static final String SERIALIZED_NAME_COMMERTIAL_OFFER = "commertialOffer";
  @SerializedName(SERIALIZED_NAME_COMMERTIAL_OFFER)
  private CommertialOffer commertialOffer;

  public static final String SERIALIZED_NAME_SELLER_DEFAULT = "sellerDefault";
  @SerializedName(SERIALIZED_NAME_SELLER_DEFAULT)
  private Boolean sellerDefault;

  public static final String SERIALIZED_NAME_SELLER_ID = "sellerId";
  @SerializedName(SERIALIZED_NAME_SELLER_ID)
  private String sellerId;

  public static final String SERIALIZED_NAME_SELLER_NAME = "sellerName";
  @SerializedName(SERIALIZED_NAME_SELLER_NAME)
  private String sellerName;

  public SellersInner() {
  }

  public SellersInner addToCartLink(String addToCartLink) {
    this.addToCartLink = addToCartLink;
    return this;
  }

  /**
   * URL to add the product to the cart.
   * @return addToCartLink
   */
  @javax.annotation.Nonnull
  public String getAddToCartLink() {
    return addToCartLink;
  }

  public void setAddToCartLink(String addToCartLink) {
    this.addToCartLink = addToCartLink;
  }


  public SellersInner commertialOffer(CommertialOffer commertialOffer) {
    this.commertialOffer = commertialOffer;
    return this;
  }

  /**
   * Get commertialOffer
   * @return commertialOffer
   */
  @javax.annotation.Nonnull
  public CommertialOffer getCommertialOffer() {
    return commertialOffer;
  }

  public void setCommertialOffer(CommertialOffer commertialOffer) {
    this.commertialOffer = commertialOffer;
  }


  public SellersInner sellerDefault(Boolean sellerDefault) {
    this.sellerDefault = sellerDefault;
    return this;
  }

  /**
   * If the seller is default or not.
   * @return sellerDefault
   */
  @javax.annotation.Nonnull
  public Boolean getSellerDefault() {
    return sellerDefault;
  }

  public void setSellerDefault(Boolean sellerDefault) {
    this.sellerDefault = sellerDefault;
  }


  public SellersInner sellerId(String sellerId) {
    this.sellerId = sellerId;
    return this;
  }

  /**
   * SKU seller ID.
   * @return sellerId
   */
  @javax.annotation.Nonnull
  public String getSellerId() {
    return sellerId;
  }

  public void setSellerId(String sellerId) {
    this.sellerId = sellerId;
  }


  public SellersInner sellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  /**
   * SKU seller name.
   * @return sellerName
   */
  @javax.annotation.Nonnull
  public String getSellerName() {
    return sellerName;
  }

  public void setSellerName(String sellerName) {
    this.sellerName = sellerName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SellersInner sellersInner = (SellersInner) o;
    return Objects.equals(this.addToCartLink, sellersInner.addToCartLink) &&
        Objects.equals(this.commertialOffer, sellersInner.commertialOffer) &&
        Objects.equals(this.sellerDefault, sellersInner.sellerDefault) &&
        Objects.equals(this.sellerId, sellersInner.sellerId) &&
        Objects.equals(this.sellerName, sellersInner.sellerName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addToCartLink, commertialOffer, sellerDefault, sellerId, sellerName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SellersInner {\n");
    sb.append("    addToCartLink: ").append(toIndentedString(addToCartLink)).append("\n");
    sb.append("    commertialOffer: ").append(toIndentedString(commertialOffer)).append("\n");
    sb.append("    sellerDefault: ").append(toIndentedString(sellerDefault)).append("\n");
    sb.append("    sellerId: ").append(toIndentedString(sellerId)).append("\n");
    sb.append("    sellerName: ").append(toIndentedString(sellerName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addToCartLink");
    openapiFields.add("commertialOffer");
    openapiFields.add("sellerDefault");
    openapiFields.add("sellerId");
    openapiFields.add("sellerName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("addToCartLink");
    openapiRequiredFields.add("commertialOffer");
    openapiRequiredFields.add("sellerDefault");
    openapiRequiredFields.add("sellerId");
    openapiRequiredFields.add("sellerName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SellersInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SellersInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SellersInner is not found in the empty JSON string", SellersInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SellersInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SellersInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SellersInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("addToCartLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addToCartLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addToCartLink").toString()));
      }
      // validate the required field `commertialOffer`
      CommertialOffer.validateJsonElement(jsonObj.get("commertialOffer"));
      if (!jsonObj.get("sellerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerId").toString()));
      }
      if (!jsonObj.get("sellerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SellersInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SellersInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SellersInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SellersInner.class));

       return (TypeAdapter<T>) new TypeAdapter<SellersInner>() {
           @Override
           public void write(JsonWriter out, SellersInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SellersInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SellersInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SellersInner
   * @throws IOException if the JSON string is invalid with respect to SellersInner
   */
  public static SellersInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SellersInner.class);
  }

  /**
   * Convert an instance of SellersInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

