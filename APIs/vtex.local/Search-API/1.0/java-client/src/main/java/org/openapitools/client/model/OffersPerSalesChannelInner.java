/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OffersPerSalesChannelInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:46.427507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OffersPerSalesChannelInner {
  public static final String SERIALIZED_NAME_AVAILABLE_QUANTITY = "AvailableQuantity";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_QUANTITY)
  private Integer availableQuantity;

  public static final String SERIALIZED_NAME_IS_AVAILABLE = "IsAvailable";
  @SerializedName(SERIALIZED_NAME_IS_AVAILABLE)
  private Boolean isAvailable;

  public static final String SERIALIZED_NAME_LIST_PRICE = "ListPrice";
  @SerializedName(SERIALIZED_NAME_LIST_PRICE)
  private BigDecimal listPrice;

  public static final String SERIALIZED_NAME_PRICE = "Price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_PRICE_WITHOUT_DISCOUNT = "PriceWithoutDiscount";
  @SerializedName(SERIALIZED_NAME_PRICE_WITHOUT_DISCOUNT)
  private BigDecimal priceWithoutDiscount;

  public static final String SERIALIZED_NAME_SALE_CHANNEL = "SaleChannel";
  @SerializedName(SERIALIZED_NAME_SALE_CHANNEL)
  private Integer saleChannel;

  public OffersPerSalesChannelInner() {
  }

  public OffersPerSalesChannelInner availableQuantity(Integer availableQuantity) {
    this.availableQuantity = availableQuantity;
    return this;
  }

  /**
   * SKU available quantity.
   * @return availableQuantity
   */
  @javax.annotation.Nonnull
  public Integer getAvailableQuantity() {
    return availableQuantity;
  }

  public void setAvailableQuantity(Integer availableQuantity) {
    this.availableQuantity = availableQuantity;
  }


  public OffersPerSalesChannelInner isAvailable(Boolean isAvailable) {
    this.isAvailable = isAvailable;
    return this;
  }

  /**
   * If the SKU is available or not.
   * @return isAvailable
   */
  @javax.annotation.Nonnull
  public Boolean getIsAvailable() {
    return isAvailable;
  }

  public void setIsAvailable(Boolean isAvailable) {
    this.isAvailable = isAvailable;
  }


  public OffersPerSalesChannelInner listPrice(BigDecimal listPrice) {
    this.listPrice = listPrice;
    return this;
  }

  /**
   * SKU list price.
   * @return listPrice
   */
  @javax.annotation.Nonnull
  public BigDecimal getListPrice() {
    return listPrice;
  }

  public void setListPrice(BigDecimal listPrice) {
    this.listPrice = listPrice;
  }


  public OffersPerSalesChannelInner price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * SKU price.
   * @return price
   */
  @javax.annotation.Nonnull
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public OffersPerSalesChannelInner priceWithoutDiscount(BigDecimal priceWithoutDiscount) {
    this.priceWithoutDiscount = priceWithoutDiscount;
    return this;
  }

  /**
   * SKU precie without discount.
   * @return priceWithoutDiscount
   */
  @javax.annotation.Nonnull
  public BigDecimal getPriceWithoutDiscount() {
    return priceWithoutDiscount;
  }

  public void setPriceWithoutDiscount(BigDecimal priceWithoutDiscount) {
    this.priceWithoutDiscount = priceWithoutDiscount;
  }


  public OffersPerSalesChannelInner saleChannel(Integer saleChannel) {
    this.saleChannel = saleChannel;
    return this;
  }

  /**
   * SKU trade policy.
   * @return saleChannel
   */
  @javax.annotation.Nonnull
  public Integer getSaleChannel() {
    return saleChannel;
  }

  public void setSaleChannel(Integer saleChannel) {
    this.saleChannel = saleChannel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OffersPerSalesChannelInner offersPerSalesChannelInner = (OffersPerSalesChannelInner) o;
    return Objects.equals(this.availableQuantity, offersPerSalesChannelInner.availableQuantity) &&
        Objects.equals(this.isAvailable, offersPerSalesChannelInner.isAvailable) &&
        Objects.equals(this.listPrice, offersPerSalesChannelInner.listPrice) &&
        Objects.equals(this.price, offersPerSalesChannelInner.price) &&
        Objects.equals(this.priceWithoutDiscount, offersPerSalesChannelInner.priceWithoutDiscount) &&
        Objects.equals(this.saleChannel, offersPerSalesChannelInner.saleChannel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableQuantity, isAvailable, listPrice, price, priceWithoutDiscount, saleChannel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OffersPerSalesChannelInner {\n");
    sb.append("    availableQuantity: ").append(toIndentedString(availableQuantity)).append("\n");
    sb.append("    isAvailable: ").append(toIndentedString(isAvailable)).append("\n");
    sb.append("    listPrice: ").append(toIndentedString(listPrice)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceWithoutDiscount: ").append(toIndentedString(priceWithoutDiscount)).append("\n");
    sb.append("    saleChannel: ").append(toIndentedString(saleChannel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AvailableQuantity");
    openapiFields.add("IsAvailable");
    openapiFields.add("ListPrice");
    openapiFields.add("Price");
    openapiFields.add("PriceWithoutDiscount");
    openapiFields.add("SaleChannel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AvailableQuantity");
    openapiRequiredFields.add("IsAvailable");
    openapiRequiredFields.add("ListPrice");
    openapiRequiredFields.add("Price");
    openapiRequiredFields.add("PriceWithoutDiscount");
    openapiRequiredFields.add("SaleChannel");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OffersPerSalesChannelInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OffersPerSalesChannelInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OffersPerSalesChannelInner is not found in the empty JSON string", OffersPerSalesChannelInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OffersPerSalesChannelInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OffersPerSalesChannelInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OffersPerSalesChannelInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OffersPerSalesChannelInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OffersPerSalesChannelInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OffersPerSalesChannelInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OffersPerSalesChannelInner.class));

       return (TypeAdapter<T>) new TypeAdapter<OffersPerSalesChannelInner>() {
           @Override
           public void write(JsonWriter out, OffersPerSalesChannelInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OffersPerSalesChannelInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OffersPerSalesChannelInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OffersPerSalesChannelInner
   * @throws IOException if the JSON string is invalid with respect to OffersPerSalesChannelInner
   */
  public static OffersPerSalesChannelInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OffersPerSalesChannelInner.class);
  }

  /**
   * Convert an instance of OffersPerSalesChannelInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

