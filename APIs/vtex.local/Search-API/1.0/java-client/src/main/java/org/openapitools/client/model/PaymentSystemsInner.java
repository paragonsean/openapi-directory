/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentSystemsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:46.427507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentSystemsInner {
  public static final String SERIALIZED_NAME_AVAILABLE_PAYMENTS = "availablePayments";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_PAYMENTS)
  private String availablePayments;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private String dueDate;

  public static final String SERIALIZED_NAME_GROUP_NAME = "groupName";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_CUSTOM = "isCustom";
  @SerializedName(SERIALIZED_NAME_IS_CUSTOM)
  private Boolean isCustom;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REQUIRES_AUTHENTICATION = "requiresAuthentication";
  @SerializedName(SERIALIZED_NAME_REQUIRES_AUTHENTICATION)
  private Boolean requiresAuthentication;

  public static final String SERIALIZED_NAME_REQUIRES_DOCUMENT = "requiresDocument";
  @SerializedName(SERIALIZED_NAME_REQUIRES_DOCUMENT)
  private Boolean requiresDocument;

  public static final String SERIALIZED_NAME_STRING_ID = "stringId";
  @SerializedName(SERIALIZED_NAME_STRING_ID)
  private String stringId;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private String template;

  public static final String SERIALIZED_NAME_VALIDATOR = "validator";
  @SerializedName(SERIALIZED_NAME_VALIDATOR)
  private String validator;

  public PaymentSystemsInner() {
  }

  public PaymentSystemsInner availablePayments(String availablePayments) {
    this.availablePayments = availablePayments;
    return this;
  }

  /**
   * Available payments.
   * @return availablePayments
   */
  @javax.annotation.Nullable
  public String getAvailablePayments() {
    return availablePayments;
  }

  public void setAvailablePayments(String availablePayments) {
    this.availablePayments = availablePayments;
  }


  public PaymentSystemsInner description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PaymentSystemsInner dueDate(String dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * Due date.
   * @return dueDate
   */
  @javax.annotation.Nonnull
  public String getDueDate() {
    return dueDate;
  }

  public void setDueDate(String dueDate) {
    this.dueDate = dueDate;
  }


  public PaymentSystemsInner groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  /**
   * Group name.
   * @return groupName
   */
  @javax.annotation.Nonnull
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public PaymentSystemsInner id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID.
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public PaymentSystemsInner isCustom(Boolean isCustom) {
    this.isCustom = isCustom;
    return this;
  }

  /**
   * If is custom or not.
   * @return isCustom
   */
  @javax.annotation.Nonnull
  public Boolean getIsCustom() {
    return isCustom;
  }

  public void setIsCustom(Boolean isCustom) {
    this.isCustom = isCustom;
  }


  public PaymentSystemsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PaymentSystemsInner requiresAuthentication(Boolean requiresAuthentication) {
    this.requiresAuthentication = requiresAuthentication;
    return this;
  }

  /**
   * If requires authentication.
   * @return requiresAuthentication
   */
  @javax.annotation.Nonnull
  public Boolean getRequiresAuthentication() {
    return requiresAuthentication;
  }

  public void setRequiresAuthentication(Boolean requiresAuthentication) {
    this.requiresAuthentication = requiresAuthentication;
  }


  public PaymentSystemsInner requiresDocument(Boolean requiresDocument) {
    this.requiresDocument = requiresDocument;
    return this;
  }

  /**
   * If requires document or not.
   * @return requiresDocument
   */
  @javax.annotation.Nonnull
  public Boolean getRequiresDocument() {
    return requiresDocument;
  }

  public void setRequiresDocument(Boolean requiresDocument) {
    this.requiresDocument = requiresDocument;
  }


  public PaymentSystemsInner stringId(String stringId) {
    this.stringId = stringId;
    return this;
  }

  /**
   * String ID.
   * @return stringId
   */
  @javax.annotation.Nonnull
  public String getStringId() {
    return stringId;
  }

  public void setStringId(String stringId) {
    this.stringId = stringId;
  }


  public PaymentSystemsInner template(String template) {
    this.template = template;
    return this;
  }

  /**
   * Template.
   * @return template
   */
  @javax.annotation.Nonnull
  public String getTemplate() {
    return template;
  }

  public void setTemplate(String template) {
    this.template = template;
  }


  public PaymentSystemsInner validator(String validator) {
    this.validator = validator;
    return this;
  }

  /**
   * Validator.
   * @return validator
   */
  @javax.annotation.Nullable
  public String getValidator() {
    return validator;
  }

  public void setValidator(String validator) {
    this.validator = validator;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentSystemsInner paymentSystemsInner = (PaymentSystemsInner) o;
    return Objects.equals(this.availablePayments, paymentSystemsInner.availablePayments) &&
        Objects.equals(this.description, paymentSystemsInner.description) &&
        Objects.equals(this.dueDate, paymentSystemsInner.dueDate) &&
        Objects.equals(this.groupName, paymentSystemsInner.groupName) &&
        Objects.equals(this.id, paymentSystemsInner.id) &&
        Objects.equals(this.isCustom, paymentSystemsInner.isCustom) &&
        Objects.equals(this.name, paymentSystemsInner.name) &&
        Objects.equals(this.requiresAuthentication, paymentSystemsInner.requiresAuthentication) &&
        Objects.equals(this.requiresDocument, paymentSystemsInner.requiresDocument) &&
        Objects.equals(this.stringId, paymentSystemsInner.stringId) &&
        Objects.equals(this.template, paymentSystemsInner.template) &&
        Objects.equals(this.validator, paymentSystemsInner.validator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availablePayments, description, dueDate, groupName, id, isCustom, name, requiresAuthentication, requiresDocument, stringId, template, validator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentSystemsInner {\n");
    sb.append("    availablePayments: ").append(toIndentedString(availablePayments)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isCustom: ").append(toIndentedString(isCustom)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    requiresAuthentication: ").append(toIndentedString(requiresAuthentication)).append("\n");
    sb.append("    requiresDocument: ").append(toIndentedString(requiresDocument)).append("\n");
    sb.append("    stringId: ").append(toIndentedString(stringId)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    validator: ").append(toIndentedString(validator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availablePayments");
    openapiFields.add("description");
    openapiFields.add("dueDate");
    openapiFields.add("groupName");
    openapiFields.add("id");
    openapiFields.add("isCustom");
    openapiFields.add("name");
    openapiFields.add("requiresAuthentication");
    openapiFields.add("requiresDocument");
    openapiFields.add("stringId");
    openapiFields.add("template");
    openapiFields.add("validator");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("availablePayments");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("dueDate");
    openapiRequiredFields.add("groupName");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isCustom");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("requiresAuthentication");
    openapiRequiredFields.add("requiresDocument");
    openapiRequiredFields.add("stringId");
    openapiRequiredFields.add("template");
    openapiRequiredFields.add("validator");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentSystemsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentSystemsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentSystemsInner is not found in the empty JSON string", PaymentSystemsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentSystemsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentSystemsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentSystemsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("availablePayments") != null && !jsonObj.get("availablePayments").isJsonNull()) && !jsonObj.get("availablePayments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availablePayments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availablePayments").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("dueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dueDate").toString()));
      }
      if (!jsonObj.get("groupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupName").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("stringId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stringId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stringId").toString()));
      }
      if (!jsonObj.get("template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template").toString()));
      }
      if ((jsonObj.get("validator") != null && !jsonObj.get("validator").isJsonNull()) && !jsonObj.get("validator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validator").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentSystemsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentSystemsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentSystemsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentSystemsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentSystemsInner>() {
           @Override
           public void write(JsonWriter out, PaymentSystemsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentSystemsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentSystemsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentSystemsInner
   * @throws IOException if the JSON string is invalid with respect to PaymentSystemsInner
   */
  public static PaymentSystemsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentSystemsInner.class);
  }

  /**
   * Convert an instance of PaymentSystemsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

