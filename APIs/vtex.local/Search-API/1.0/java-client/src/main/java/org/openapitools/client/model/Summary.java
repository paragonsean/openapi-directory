/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Brands;
import org.openapitools.client.model.CategoriesTrees;
import org.openapitools.client.model.Departments;
import org.openapitools.client.model.PriceRanges;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary of the facets.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:46.427507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Summary {
  public static final String SERIALIZED_NAME_BRANDS = "Brands";
  @SerializedName(SERIALIZED_NAME_BRANDS)
  private Brands brands;

  public static final String SERIALIZED_NAME_CATEGORIES_TREES = "CategoriesTrees";
  @SerializedName(SERIALIZED_NAME_CATEGORIES_TREES)
  private CategoriesTrees categoriesTrees;

  public static final String SERIALIZED_NAME_DEPARTMENTS = "Departments";
  @SerializedName(SERIALIZED_NAME_DEPARTMENTS)
  private Departments departments;

  public static final String SERIALIZED_NAME_PRICE_RANGES = "PriceRanges";
  @SerializedName(SERIALIZED_NAME_PRICE_RANGES)
  private PriceRanges priceRanges;

  public static final String SERIALIZED_NAME_SPECIFICATION_FILTERS = "SpecificationFilters";
  @SerializedName(SERIALIZED_NAME_SPECIFICATION_FILTERS)
  private Object specificationFilters;

  public Summary() {
  }

  public Summary brands(Brands brands) {
    this.brands = brands;
    return this;
  }

  /**
   * Get brands
   * @return brands
   */
  @javax.annotation.Nonnull
  public Brands getBrands() {
    return brands;
  }

  public void setBrands(Brands brands) {
    this.brands = brands;
  }


  public Summary categoriesTrees(CategoriesTrees categoriesTrees) {
    this.categoriesTrees = categoriesTrees;
    return this;
  }

  /**
   * Get categoriesTrees
   * @return categoriesTrees
   */
  @javax.annotation.Nonnull
  public CategoriesTrees getCategoriesTrees() {
    return categoriesTrees;
  }

  public void setCategoriesTrees(CategoriesTrees categoriesTrees) {
    this.categoriesTrees = categoriesTrees;
  }


  public Summary departments(Departments departments) {
    this.departments = departments;
    return this;
  }

  /**
   * Get departments
   * @return departments
   */
  @javax.annotation.Nonnull
  public Departments getDepartments() {
    return departments;
  }

  public void setDepartments(Departments departments) {
    this.departments = departments;
  }


  public Summary priceRanges(PriceRanges priceRanges) {
    this.priceRanges = priceRanges;
    return this;
  }

  /**
   * Get priceRanges
   * @return priceRanges
   */
  @javax.annotation.Nonnull
  public PriceRanges getPriceRanges() {
    return priceRanges;
  }

  public void setPriceRanges(PriceRanges priceRanges) {
    this.priceRanges = priceRanges;
  }


  public Summary specificationFilters(Object specificationFilters) {
    this.specificationFilters = specificationFilters;
    return this;
  }

  /**
   * Specification filters&#39; quantity of displayed and total items.
   * @return specificationFilters
   */
  @javax.annotation.Nonnull
  public Object getSpecificationFilters() {
    return specificationFilters;
  }

  public void setSpecificationFilters(Object specificationFilters) {
    this.specificationFilters = specificationFilters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Summary summary = (Summary) o;
    return Objects.equals(this.brands, summary.brands) &&
        Objects.equals(this.categoriesTrees, summary.categoriesTrees) &&
        Objects.equals(this.departments, summary.departments) &&
        Objects.equals(this.priceRanges, summary.priceRanges) &&
        Objects.equals(this.specificationFilters, summary.specificationFilters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brands, categoriesTrees, departments, priceRanges, specificationFilters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Summary {\n");
    sb.append("    brands: ").append(toIndentedString(brands)).append("\n");
    sb.append("    categoriesTrees: ").append(toIndentedString(categoriesTrees)).append("\n");
    sb.append("    departments: ").append(toIndentedString(departments)).append("\n");
    sb.append("    priceRanges: ").append(toIndentedString(priceRanges)).append("\n");
    sb.append("    specificationFilters: ").append(toIndentedString(specificationFilters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Brands");
    openapiFields.add("CategoriesTrees");
    openapiFields.add("Departments");
    openapiFields.add("PriceRanges");
    openapiFields.add("SpecificationFilters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Brands");
    openapiRequiredFields.add("CategoriesTrees");
    openapiRequiredFields.add("Departments");
    openapiRequiredFields.add("PriceRanges");
    openapiRequiredFields.add("SpecificationFilters");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Summary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Summary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Summary is not found in the empty JSON string", Summary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Summary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Summary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Summary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Brands`
      Brands.validateJsonElement(jsonObj.get("Brands"));
      // validate the required field `CategoriesTrees`
      CategoriesTrees.validateJsonElement(jsonObj.get("CategoriesTrees"));
      // validate the required field `Departments`
      Departments.validateJsonElement(jsonObj.get("Departments"));
      // validate the required field `PriceRanges`
      PriceRanges.validateJsonElement(jsonObj.get("PriceRanges"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Summary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Summary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Summary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Summary.class));

       return (TypeAdapter<T>) new TypeAdapter<Summary>() {
           @Override
           public void write(JsonWriter out, Summary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Summary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Summary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Summary
   * @throws IOException if the JSON string is invalid with respect to Summary
   */
  public static Summary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Summary.class);
  }

  /**
   * Convert an instance of Summary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

