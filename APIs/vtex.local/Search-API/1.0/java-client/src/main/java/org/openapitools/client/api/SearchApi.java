/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ProductSearchWhoBoughtAlsoBought200ResponseInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for productSearch
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param search Term used to search products (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productSearchCall(String accept, String contentType, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "http://example.com/.{environment}.com.br" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/catalog_system/pub/products/search/{search}"
            .replace("{" + "search" + "}", localVarApiClient.escapeString(search.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productSearchValidateBeforeCall(String accept, String contentType, String search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling productSearch(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling productSearch(Async)");
        }

        // verify the required parameter 'search' is set
        if (search == null) {
            throw new ApiException("Missing the required parameter 'search' when calling productSearch(Async)");
        }

        return productSearchCall(accept, contentType, search, _callback);

    }

    /**
     * Search for Products
     * Retrieves general information about the products related to the term searched.   This is the main search used by the store. The user can type anything to be searched.      For example, if they search for a \&quot;decanter\&quot;, this is the URL: &#x60;https://{{accountName}}.{{environment}}.com.br/api/catalog_system/pub/products/search/decanter&#x60;.     Note that maybe the response can be HTTP 200 or 206, 206 means that it&#39;s a partial content response.    If it is a 206 take a look at the Headers, will be an entry called resources. E.g.: resources → 0-9/19. This means that the response is showing items from 0 to 9, 10 items, but there were 19 items found. See more information at the paging route example.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param search Term used to search products (required)
     * @return List&lt;ProductSearchWhoBoughtAlsoBought200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductSearchWhoBoughtAlsoBought200ResponseInner> productSearch(String accept, String contentType, String search) throws ApiException {
        ApiResponse<List<ProductSearchWhoBoughtAlsoBought200ResponseInner>> localVarResp = productSearchWithHttpInfo(accept, contentType, search);
        return localVarResp.getData();
    }

    /**
     * Search for Products
     * Retrieves general information about the products related to the term searched.   This is the main search used by the store. The user can type anything to be searched.      For example, if they search for a \&quot;decanter\&quot;, this is the URL: &#x60;https://{{accountName}}.{{environment}}.com.br/api/catalog_system/pub/products/search/decanter&#x60;.     Note that maybe the response can be HTTP 200 or 206, 206 means that it&#39;s a partial content response.    If it is a 206 take a look at the Headers, will be an entry called resources. E.g.: resources → 0-9/19. This means that the response is showing items from 0 to 9, 10 items, but there were 19 items found. See more information at the paging route example.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param search Term used to search products (required)
     * @return ApiResponse&lt;List&lt;ProductSearchWhoBoughtAlsoBought200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductSearchWhoBoughtAlsoBought200ResponseInner>> productSearchWithHttpInfo(String accept, String contentType, String search) throws ApiException {
        okhttp3.Call localVarCall = productSearchValidateBeforeCall(accept, contentType, search, null);
        Type localVarReturnType = new TypeToken<List<ProductSearchWhoBoughtAlsoBought200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for Products (asynchronously)
     * Retrieves general information about the products related to the term searched.   This is the main search used by the store. The user can type anything to be searched.      For example, if they search for a \&quot;decanter\&quot;, this is the URL: &#x60;https://{{accountName}}.{{environment}}.com.br/api/catalog_system/pub/products/search/decanter&#x60;.     Note that maybe the response can be HTTP 200 or 206, 206 means that it&#39;s a partial content response.    If it is a 206 take a look at the Headers, will be an entry called resources. E.g.: resources → 0-9/19. This means that the response is showing items from 0 to 9, 10 items, but there were 19 items found. See more information at the paging route example.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param search Term used to search products (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productSearchAsync(String accept, String contentType, String search, final ApiCallback<List<ProductSearchWhoBoughtAlsoBought200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productSearchValidateBeforeCall(accept, contentType, search, _callback);
        Type localVarReturnType = new TypeToken<List<ProductSearchWhoBoughtAlsoBought200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productSearchFilteredandOrdered
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param from Starter page range. These parameters allow the API to be paginated. Take into account that the initial and final pages cannot have a separation superior to 50 pages. Thus, it will be displayed 50 items per page. (optional)
     * @param to Finisher page range. These parameters allow the API to be paginated. Take into account that the initial and final pages cannot have a separation superior to 50 pages. Thus, it will be displayed 50 items per page. (optional)
     * @param ft Filter by full text. The form is&#x60;ft&#x3D;{searchWord}&#x60; (optional)
     * @param fq General filter. It can be by category (&#x60;fq&#x3D;C:/{a}/{b}&#x60;), by specification (&#x60;fq&#x3D;specificationFilter_{a}:{b}&#x60;),  by price range (&#x60;fq&#x3D;P:[{a} TO {b}]&#x60;), by collection (&#x60;fq&#x3D;productClusterIds:{{productClusterId}}&#x60;), by product ID (&#x60;fq&#x3D;productId:{{productId}}&#x60;),  by SKU ID (&#x60;fq&#x3D;skuId:{{skuId}}&#x60;), by Reference ID (&#x60;fq&#x3D;alternateIds_RefId:{{referenceId}}&#x60;), by EAN13 (&#x60;fq&#x3D;alternateIds_Ean:{{ean13}}&#x60;), by availability at a specific sales channel (&#x60;fq&#x3D;isAvailablePerSalesChannel_{{sc}}:{{bool}}&#x60;), by available at a specific seller (&#x60;fq&#x3D;sellerId:{{sellerId}}&#x60;) (optional)
     * @param O Sorting method. It can be by Price (&#x60;O&#x3D;OrderByPriceDESC&#x60; or &#x60;O&#x3D;OrderByPriceASC&#x60;), by Top Selling Products (&#x60;O&#x3D;OrderByTopSaleDESC&#x60;), by Best Reviews (&#x60;O&#x3D;OrderByReviewRateDESC&#x60;), by Name (&#x60;O&#x3D;OrderByNameASC&#x60; or &#x60;O&#x3D;OrderByNameDESC&#x60;), by Release Date (&#x60;O&#x3D;OrderByReleaseDateDESC&#x60;), by Best Discounts (&#x60;O&#x3D;OrderByBestDiscountDESC&#x60;), by Score (&#x60;O&#x3D;OrderByScoreDESC&#x60;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productSearchFilteredandOrderedCall(String accept, String contentType, String from, String to, String ft, String fq, String O, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "http://example.com/.{environment}.com.br" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/catalog_system/pub/products/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_to", to));
        }

        if (ft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ft", ft));
        }

        if (fq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fq", fq));
        }

        if (O != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("O", O));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productSearchFilteredandOrderedValidateBeforeCall(String accept, String contentType, String from, String to, String ft, String fq, String O, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling productSearchFilteredandOrdered(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling productSearchFilteredandOrdered(Async)");
        }

        return productSearchFilteredandOrderedCall(accept, contentType, from, to, ft, fq, O, _callback);

    }

    /**
     * Search for Products with Filter, Order and Pagination
     * Retrieves general information about the store products. This information can be filtered and ordered by a number of options. It also can be paginated, filtered and ordered.     ## Filters      - **Filter by full text** - &#x60;ft&#x3D;{searchWord}&#x60;    E.g.: &#x60;ft&#x3D;television&#x60;    - **Filter by category** - &#x60;fq&#x3D;C:/{a}/{b}&#x60;    &#x60;{a}&#x60; and &#x60;{b}&#x60; are Category IDs     E.g.: &#x60;fq&#x3D;C:/1000041/1000049/&#x60;    - **Filter by brand** - &#x60;fq&#x3D;B:/{a}/{b}&#x60;    &#x60;{a}&#x60; and &#x60;{b}&#x60; are Brand IDs  E.g.: &#x60;fq&#x3D;B:/189385/189387/&#x60;    - **Filter by specification** - &#x60;fq&#x3D;specificationFilter_{a}:{b}&#x60;    &#x60;{a}&#x60; is the specification ID  &#x60;{b}&#x60; is the specification value  E.g.: To filter products where the color is Blue, find the specification ID for color. Suppose it is 123, then the query will be: &#x60;fq&#x3D;specificationFilter_123:Blue&#x60;    - **Filter by price range** - &#x60;fq&#x3D;P:[{a} TO {b}]&#x60;    &#x60;{a}&#x60;  is the minimum price \&quot;from\&quot;  &#x60;{b}&#x60; is the highest price \&quot;to\&quot;    E.g.: &#x60;fq&#x3D;P:[0 TO 20]&#x60; will search products between 0.00 and 20.00.      - **Filter by collection** - &#x60;fq&#x3D;productClusterIds:{{productClusterId}}&#x60;   &#x60;productClusterId&#x60; is the same as &#x60;collectionId&#x60;    For more information about collections, read [Creating a product collection](https://help.vtex.com/en/tutorial/creating-a-product-collection).    - **Filter by product ID** - &#x60;fq&#x3D;productId:{{productId}}&#x60;    - **Filter by SKU ID** - &#x60;fq&#x3D;skuId:{{skuId}}&#x60;    - **Filter by referenceId** - &#x60;fq&#x3D;alternateIds_RefId:{{referenceId}}&#x60;    - **Filter by EAN13** - &#x60;fq&#x3D;alternateIds_Ean:{{ean13}}&#x60;    - **Filter by availability at a specific sales channel** - &#x60;fq&#x3D;isAvailablePerSalesChannel_{{sc}}:{{bool}}&#x60;    &#x60;{{sc}}&#x60; is the desired sales channel    &#x60;{{bool}}&#x60; is true ou false, 1 or 0.    E.g.: seaching available products for the sales channel 4 would be &#x60;fq&#x3D;isAvailablePerSalesChannel_4:1&#x60;    - **Filter by available at a specific seller** - &#x60;fq&#x3D;sellerId:{{sellerId}}&#x60;  The search does not include White Label Sellers.    ## Pagination    - **Initial item number** - &#x60;_from&#x3D;{{first}}&#x60;  - **Final item number** - &#x60;_to&#x3D;{{last}}&#x60;    &gt;⚠️ This endpoint returns a maximum of 50 items per response, so the difference between &#x60;_from&#x60; and &#x60;_to&#x60; should not exceed this number. The result order is descending, from the highest product ID to the lowest.    ## Sorting    - **Price**    &#x60;O&#x3D;OrderByPriceDESC&#x60;    &#x60;O&#x3D;OrderByPriceASC&#x60;    - **Top Selling Products**    &#x60;O&#x3D;OrderByTopSaleDESC&#x60;    - **Best Reviews**    &#x60;O&#x3D;OrderByReviewRateDESC&#x60;    - **Name**    &#x60;O&#x3D;OrderByNameASC&#x60;    &#x60;O&#x3D;OrderByNameDESC&#x60;    - **Release Date**    &#x60;O&#x3D;OrderByReleaseDateDESC&#x60;    - **Best Discounts**    &#x60;O&#x3D;OrderByBestDiscountDESC&#x60;    - **Score**    &#x60;O&#x3D;OrderByScoreDESC&#x60;
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param from Starter page range. These parameters allow the API to be paginated. Take into account that the initial and final pages cannot have a separation superior to 50 pages. Thus, it will be displayed 50 items per page. (optional)
     * @param to Finisher page range. These parameters allow the API to be paginated. Take into account that the initial and final pages cannot have a separation superior to 50 pages. Thus, it will be displayed 50 items per page. (optional)
     * @param ft Filter by full text. The form is&#x60;ft&#x3D;{searchWord}&#x60; (optional)
     * @param fq General filter. It can be by category (&#x60;fq&#x3D;C:/{a}/{b}&#x60;), by specification (&#x60;fq&#x3D;specificationFilter_{a}:{b}&#x60;),  by price range (&#x60;fq&#x3D;P:[{a} TO {b}]&#x60;), by collection (&#x60;fq&#x3D;productClusterIds:{{productClusterId}}&#x60;), by product ID (&#x60;fq&#x3D;productId:{{productId}}&#x60;),  by SKU ID (&#x60;fq&#x3D;skuId:{{skuId}}&#x60;), by Reference ID (&#x60;fq&#x3D;alternateIds_RefId:{{referenceId}}&#x60;), by EAN13 (&#x60;fq&#x3D;alternateIds_Ean:{{ean13}}&#x60;), by availability at a specific sales channel (&#x60;fq&#x3D;isAvailablePerSalesChannel_{{sc}}:{{bool}}&#x60;), by available at a specific seller (&#x60;fq&#x3D;sellerId:{{sellerId}}&#x60;) (optional)
     * @param O Sorting method. It can be by Price (&#x60;O&#x3D;OrderByPriceDESC&#x60; or &#x60;O&#x3D;OrderByPriceASC&#x60;), by Top Selling Products (&#x60;O&#x3D;OrderByTopSaleDESC&#x60;), by Best Reviews (&#x60;O&#x3D;OrderByReviewRateDESC&#x60;), by Name (&#x60;O&#x3D;OrderByNameASC&#x60; or &#x60;O&#x3D;OrderByNameDESC&#x60;), by Release Date (&#x60;O&#x3D;OrderByReleaseDateDESC&#x60;), by Best Discounts (&#x60;O&#x3D;OrderByBestDiscountDESC&#x60;), by Score (&#x60;O&#x3D;OrderByScoreDESC&#x60;) (optional)
     * @return List&lt;ProductSearchWhoBoughtAlsoBought200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductSearchWhoBoughtAlsoBought200ResponseInner> productSearchFilteredandOrdered(String accept, String contentType, String from, String to, String ft, String fq, String O) throws ApiException {
        ApiResponse<List<ProductSearchWhoBoughtAlsoBought200ResponseInner>> localVarResp = productSearchFilteredandOrderedWithHttpInfo(accept, contentType, from, to, ft, fq, O);
        return localVarResp.getData();
    }

    /**
     * Search for Products with Filter, Order and Pagination
     * Retrieves general information about the store products. This information can be filtered and ordered by a number of options. It also can be paginated, filtered and ordered.     ## Filters      - **Filter by full text** - &#x60;ft&#x3D;{searchWord}&#x60;    E.g.: &#x60;ft&#x3D;television&#x60;    - **Filter by category** - &#x60;fq&#x3D;C:/{a}/{b}&#x60;    &#x60;{a}&#x60; and &#x60;{b}&#x60; are Category IDs     E.g.: &#x60;fq&#x3D;C:/1000041/1000049/&#x60;    - **Filter by brand** - &#x60;fq&#x3D;B:/{a}/{b}&#x60;    &#x60;{a}&#x60; and &#x60;{b}&#x60; are Brand IDs  E.g.: &#x60;fq&#x3D;B:/189385/189387/&#x60;    - **Filter by specification** - &#x60;fq&#x3D;specificationFilter_{a}:{b}&#x60;    &#x60;{a}&#x60; is the specification ID  &#x60;{b}&#x60; is the specification value  E.g.: To filter products where the color is Blue, find the specification ID for color. Suppose it is 123, then the query will be: &#x60;fq&#x3D;specificationFilter_123:Blue&#x60;    - **Filter by price range** - &#x60;fq&#x3D;P:[{a} TO {b}]&#x60;    &#x60;{a}&#x60;  is the minimum price \&quot;from\&quot;  &#x60;{b}&#x60; is the highest price \&quot;to\&quot;    E.g.: &#x60;fq&#x3D;P:[0 TO 20]&#x60; will search products between 0.00 and 20.00.      - **Filter by collection** - &#x60;fq&#x3D;productClusterIds:{{productClusterId}}&#x60;   &#x60;productClusterId&#x60; is the same as &#x60;collectionId&#x60;    For more information about collections, read [Creating a product collection](https://help.vtex.com/en/tutorial/creating-a-product-collection).    - **Filter by product ID** - &#x60;fq&#x3D;productId:{{productId}}&#x60;    - **Filter by SKU ID** - &#x60;fq&#x3D;skuId:{{skuId}}&#x60;    - **Filter by referenceId** - &#x60;fq&#x3D;alternateIds_RefId:{{referenceId}}&#x60;    - **Filter by EAN13** - &#x60;fq&#x3D;alternateIds_Ean:{{ean13}}&#x60;    - **Filter by availability at a specific sales channel** - &#x60;fq&#x3D;isAvailablePerSalesChannel_{{sc}}:{{bool}}&#x60;    &#x60;{{sc}}&#x60; is the desired sales channel    &#x60;{{bool}}&#x60; is true ou false, 1 or 0.    E.g.: seaching available products for the sales channel 4 would be &#x60;fq&#x3D;isAvailablePerSalesChannel_4:1&#x60;    - **Filter by available at a specific seller** - &#x60;fq&#x3D;sellerId:{{sellerId}}&#x60;  The search does not include White Label Sellers.    ## Pagination    - **Initial item number** - &#x60;_from&#x3D;{{first}}&#x60;  - **Final item number** - &#x60;_to&#x3D;{{last}}&#x60;    &gt;⚠️ This endpoint returns a maximum of 50 items per response, so the difference between &#x60;_from&#x60; and &#x60;_to&#x60; should not exceed this number. The result order is descending, from the highest product ID to the lowest.    ## Sorting    - **Price**    &#x60;O&#x3D;OrderByPriceDESC&#x60;    &#x60;O&#x3D;OrderByPriceASC&#x60;    - **Top Selling Products**    &#x60;O&#x3D;OrderByTopSaleDESC&#x60;    - **Best Reviews**    &#x60;O&#x3D;OrderByReviewRateDESC&#x60;    - **Name**    &#x60;O&#x3D;OrderByNameASC&#x60;    &#x60;O&#x3D;OrderByNameDESC&#x60;    - **Release Date**    &#x60;O&#x3D;OrderByReleaseDateDESC&#x60;    - **Best Discounts**    &#x60;O&#x3D;OrderByBestDiscountDESC&#x60;    - **Score**    &#x60;O&#x3D;OrderByScoreDESC&#x60;
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param from Starter page range. These parameters allow the API to be paginated. Take into account that the initial and final pages cannot have a separation superior to 50 pages. Thus, it will be displayed 50 items per page. (optional)
     * @param to Finisher page range. These parameters allow the API to be paginated. Take into account that the initial and final pages cannot have a separation superior to 50 pages. Thus, it will be displayed 50 items per page. (optional)
     * @param ft Filter by full text. The form is&#x60;ft&#x3D;{searchWord}&#x60; (optional)
     * @param fq General filter. It can be by category (&#x60;fq&#x3D;C:/{a}/{b}&#x60;), by specification (&#x60;fq&#x3D;specificationFilter_{a}:{b}&#x60;),  by price range (&#x60;fq&#x3D;P:[{a} TO {b}]&#x60;), by collection (&#x60;fq&#x3D;productClusterIds:{{productClusterId}}&#x60;), by product ID (&#x60;fq&#x3D;productId:{{productId}}&#x60;),  by SKU ID (&#x60;fq&#x3D;skuId:{{skuId}}&#x60;), by Reference ID (&#x60;fq&#x3D;alternateIds_RefId:{{referenceId}}&#x60;), by EAN13 (&#x60;fq&#x3D;alternateIds_Ean:{{ean13}}&#x60;), by availability at a specific sales channel (&#x60;fq&#x3D;isAvailablePerSalesChannel_{{sc}}:{{bool}}&#x60;), by available at a specific seller (&#x60;fq&#x3D;sellerId:{{sellerId}}&#x60;) (optional)
     * @param O Sorting method. It can be by Price (&#x60;O&#x3D;OrderByPriceDESC&#x60; or &#x60;O&#x3D;OrderByPriceASC&#x60;), by Top Selling Products (&#x60;O&#x3D;OrderByTopSaleDESC&#x60;), by Best Reviews (&#x60;O&#x3D;OrderByReviewRateDESC&#x60;), by Name (&#x60;O&#x3D;OrderByNameASC&#x60; or &#x60;O&#x3D;OrderByNameDESC&#x60;), by Release Date (&#x60;O&#x3D;OrderByReleaseDateDESC&#x60;), by Best Discounts (&#x60;O&#x3D;OrderByBestDiscountDESC&#x60;), by Score (&#x60;O&#x3D;OrderByScoreDESC&#x60;) (optional)
     * @return ApiResponse&lt;List&lt;ProductSearchWhoBoughtAlsoBought200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductSearchWhoBoughtAlsoBought200ResponseInner>> productSearchFilteredandOrderedWithHttpInfo(String accept, String contentType, String from, String to, String ft, String fq, String O) throws ApiException {
        okhttp3.Call localVarCall = productSearchFilteredandOrderedValidateBeforeCall(accept, contentType, from, to, ft, fq, O, null);
        Type localVarReturnType = new TypeToken<List<ProductSearchWhoBoughtAlsoBought200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for Products with Filter, Order and Pagination (asynchronously)
     * Retrieves general information about the store products. This information can be filtered and ordered by a number of options. It also can be paginated, filtered and ordered.     ## Filters      - **Filter by full text** - &#x60;ft&#x3D;{searchWord}&#x60;    E.g.: &#x60;ft&#x3D;television&#x60;    - **Filter by category** - &#x60;fq&#x3D;C:/{a}/{b}&#x60;    &#x60;{a}&#x60; and &#x60;{b}&#x60; are Category IDs     E.g.: &#x60;fq&#x3D;C:/1000041/1000049/&#x60;    - **Filter by brand** - &#x60;fq&#x3D;B:/{a}/{b}&#x60;    &#x60;{a}&#x60; and &#x60;{b}&#x60; are Brand IDs  E.g.: &#x60;fq&#x3D;B:/189385/189387/&#x60;    - **Filter by specification** - &#x60;fq&#x3D;specificationFilter_{a}:{b}&#x60;    &#x60;{a}&#x60; is the specification ID  &#x60;{b}&#x60; is the specification value  E.g.: To filter products where the color is Blue, find the specification ID for color. Suppose it is 123, then the query will be: &#x60;fq&#x3D;specificationFilter_123:Blue&#x60;    - **Filter by price range** - &#x60;fq&#x3D;P:[{a} TO {b}]&#x60;    &#x60;{a}&#x60;  is the minimum price \&quot;from\&quot;  &#x60;{b}&#x60; is the highest price \&quot;to\&quot;    E.g.: &#x60;fq&#x3D;P:[0 TO 20]&#x60; will search products between 0.00 and 20.00.      - **Filter by collection** - &#x60;fq&#x3D;productClusterIds:{{productClusterId}}&#x60;   &#x60;productClusterId&#x60; is the same as &#x60;collectionId&#x60;    For more information about collections, read [Creating a product collection](https://help.vtex.com/en/tutorial/creating-a-product-collection).    - **Filter by product ID** - &#x60;fq&#x3D;productId:{{productId}}&#x60;    - **Filter by SKU ID** - &#x60;fq&#x3D;skuId:{{skuId}}&#x60;    - **Filter by referenceId** - &#x60;fq&#x3D;alternateIds_RefId:{{referenceId}}&#x60;    - **Filter by EAN13** - &#x60;fq&#x3D;alternateIds_Ean:{{ean13}}&#x60;    - **Filter by availability at a specific sales channel** - &#x60;fq&#x3D;isAvailablePerSalesChannel_{{sc}}:{{bool}}&#x60;    &#x60;{{sc}}&#x60; is the desired sales channel    &#x60;{{bool}}&#x60; is true ou false, 1 or 0.    E.g.: seaching available products for the sales channel 4 would be &#x60;fq&#x3D;isAvailablePerSalesChannel_4:1&#x60;    - **Filter by available at a specific seller** - &#x60;fq&#x3D;sellerId:{{sellerId}}&#x60;  The search does not include White Label Sellers.    ## Pagination    - **Initial item number** - &#x60;_from&#x3D;{{first}}&#x60;  - **Final item number** - &#x60;_to&#x3D;{{last}}&#x60;    &gt;⚠️ This endpoint returns a maximum of 50 items per response, so the difference between &#x60;_from&#x60; and &#x60;_to&#x60; should not exceed this number. The result order is descending, from the highest product ID to the lowest.    ## Sorting    - **Price**    &#x60;O&#x3D;OrderByPriceDESC&#x60;    &#x60;O&#x3D;OrderByPriceASC&#x60;    - **Top Selling Products**    &#x60;O&#x3D;OrderByTopSaleDESC&#x60;    - **Best Reviews**    &#x60;O&#x3D;OrderByReviewRateDESC&#x60;    - **Name**    &#x60;O&#x3D;OrderByNameASC&#x60;    &#x60;O&#x3D;OrderByNameDESC&#x60;    - **Release Date**    &#x60;O&#x3D;OrderByReleaseDateDESC&#x60;    - **Best Discounts**    &#x60;O&#x3D;OrderByBestDiscountDESC&#x60;    - **Score**    &#x60;O&#x3D;OrderByScoreDESC&#x60;
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param from Starter page range. These parameters allow the API to be paginated. Take into account that the initial and final pages cannot have a separation superior to 50 pages. Thus, it will be displayed 50 items per page. (optional)
     * @param to Finisher page range. These parameters allow the API to be paginated. Take into account that the initial and final pages cannot have a separation superior to 50 pages. Thus, it will be displayed 50 items per page. (optional)
     * @param ft Filter by full text. The form is&#x60;ft&#x3D;{searchWord}&#x60; (optional)
     * @param fq General filter. It can be by category (&#x60;fq&#x3D;C:/{a}/{b}&#x60;), by specification (&#x60;fq&#x3D;specificationFilter_{a}:{b}&#x60;),  by price range (&#x60;fq&#x3D;P:[{a} TO {b}]&#x60;), by collection (&#x60;fq&#x3D;productClusterIds:{{productClusterId}}&#x60;), by product ID (&#x60;fq&#x3D;productId:{{productId}}&#x60;),  by SKU ID (&#x60;fq&#x3D;skuId:{{skuId}}&#x60;), by Reference ID (&#x60;fq&#x3D;alternateIds_RefId:{{referenceId}}&#x60;), by EAN13 (&#x60;fq&#x3D;alternateIds_Ean:{{ean13}}&#x60;), by availability at a specific sales channel (&#x60;fq&#x3D;isAvailablePerSalesChannel_{{sc}}:{{bool}}&#x60;), by available at a specific seller (&#x60;fq&#x3D;sellerId:{{sellerId}}&#x60;) (optional)
     * @param O Sorting method. It can be by Price (&#x60;O&#x3D;OrderByPriceDESC&#x60; or &#x60;O&#x3D;OrderByPriceASC&#x60;), by Top Selling Products (&#x60;O&#x3D;OrderByTopSaleDESC&#x60;), by Best Reviews (&#x60;O&#x3D;OrderByReviewRateDESC&#x60;), by Name (&#x60;O&#x3D;OrderByNameASC&#x60; or &#x60;O&#x3D;OrderByNameDESC&#x60;), by Release Date (&#x60;O&#x3D;OrderByReleaseDateDESC&#x60;), by Best Discounts (&#x60;O&#x3D;OrderByBestDiscountDESC&#x60;), by Score (&#x60;O&#x3D;OrderByScoreDESC&#x60;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productSearchFilteredandOrderedAsync(String accept, String contentType, String from, String to, String ft, String fq, String O, final ApiCallback<List<ProductSearchWhoBoughtAlsoBought200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productSearchFilteredandOrderedValidateBeforeCall(accept, contentType, from, to, ft, fq, O, _callback);
        Type localVarReturnType = new TypeToken<List<ProductSearchWhoBoughtAlsoBought200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchbyproducturl
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param productTextLink Product URL (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchbyproducturlCall(String accept, String contentType, String productTextLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "http://example.com/.{environment}.com.br" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/catalog_system/pub/products/search/{product-text-link}/p"
            .replace("{" + "product-text-link" + "}", localVarApiClient.escapeString(productTextLink.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchbyproducturlValidateBeforeCall(String accept, String contentType, String productTextLink, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling searchbyproducturl(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling searchbyproducturl(Async)");
        }

        // verify the required parameter 'productTextLink' is set
        if (productTextLink == null) {
            throw new ApiException("Missing the required parameter 'productTextLink' when calling searchbyproducturl(Async)");
        }

        return searchbyproducturlCall(accept, contentType, productTextLink, _callback);

    }

    /**
     * Search Product by Product URL
     * Retrieves general information about the product of the URL you searched for.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param productTextLink Product URL (required)
     * @return List&lt;ProductSearchWhoBoughtAlsoBought200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductSearchWhoBoughtAlsoBought200ResponseInner> searchbyproducturl(String accept, String contentType, String productTextLink) throws ApiException {
        ApiResponse<List<ProductSearchWhoBoughtAlsoBought200ResponseInner>> localVarResp = searchbyproducturlWithHttpInfo(accept, contentType, productTextLink);
        return localVarResp.getData();
    }

    /**
     * Search Product by Product URL
     * Retrieves general information about the product of the URL you searched for.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param productTextLink Product URL (required)
     * @return ApiResponse&lt;List&lt;ProductSearchWhoBoughtAlsoBought200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductSearchWhoBoughtAlsoBought200ResponseInner>> searchbyproducturlWithHttpInfo(String accept, String contentType, String productTextLink) throws ApiException {
        okhttp3.Call localVarCall = searchbyproducturlValidateBeforeCall(accept, contentType, productTextLink, null);
        Type localVarReturnType = new TypeToken<List<ProductSearchWhoBoughtAlsoBought200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Product by Product URL (asynchronously)
     * Retrieves general information about the product of the URL you searched for.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param productTextLink Product URL (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchbyproducturlAsync(String accept, String contentType, String productTextLink, final ApiCallback<List<ProductSearchWhoBoughtAlsoBought200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchbyproducturlValidateBeforeCall(accept, contentType, productTextLink, _callback);
        Type localVarReturnType = new TypeToken<List<ProductSearchWhoBoughtAlsoBought200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
