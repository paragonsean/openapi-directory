/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.ReferenceId;
import org.openapitools.client.model.Seller;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Item
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:46.427507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Item {
  public static final String SERIALIZED_NAME_C_O_R = "COR";
  @SerializedName(SERIALIZED_NAME_C_O_R)
  private List<String> COR = new ArrayList<>();

  public static final String SERIALIZED_NAME_T_A_M_A_N_H_O = "TAMANHO";
  @SerializedName(SERIALIZED_NAME_T_A_M_A_N_H_O)
  private List<String> TAMANHO = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPLEMENT_NAME = "complementName";
  @SerializedName(SERIALIZED_NAME_COMPLEMENT_NAME)
  private String complementName;

  public static final String SERIALIZED_NAME_EAN = "ean";
  @SerializedName(SERIALIZED_NAME_EAN)
  private String ean;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<Image> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_MEASUREMENT_UNIT = "measurementUnit";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_UNIT)
  private String measurementUnit;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_COMPLETE = "nameComplete";
  @SerializedName(SERIALIZED_NAME_NAME_COMPLETE)
  private String nameComplete;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "referenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private List<ReferenceId> referenceId = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELLERS = "sellers";
  @SerializedName(SERIALIZED_NAME_SELLERS)
  private List<Seller> sellers = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIT_MULTIPLIER = "unitMultiplier";
  @SerializedName(SERIALIZED_NAME_UNIT_MULTIPLIER)
  private BigDecimal unitMultiplier;

  public static final String SERIALIZED_NAME_VARIATIONS = "variations";
  @SerializedName(SERIALIZED_NAME_VARIATIONS)
  private List<String> variations = new ArrayList<>();

  public Item() {
  }

  public Item COR(List<String> COR) {
    this.COR = COR;
    return this;
  }

  public Item addCORItem(String CORItem) {
    if (this.COR == null) {
      this.COR = new ArrayList<>();
    }
    this.COR.add(CORItem);
    return this;
  }

  /**
   * 
   * @return COR
   */
  @javax.annotation.Nullable
  public List<String> getCOR() {
    return COR;
  }

  public void setCOR(List<String> COR) {
    this.COR = COR;
  }


  public Item TAMANHO(List<String> TAMANHO) {
    this.TAMANHO = TAMANHO;
    return this;
  }

  public Item addTAMANHOItem(String TAMANHOItem) {
    if (this.TAMANHO == null) {
      this.TAMANHO = new ArrayList<>();
    }
    this.TAMANHO.add(TAMANHOItem);
    return this;
  }

  /**
   * 
   * @return TAMANHO
   */
  @javax.annotation.Nullable
  public List<String> getTAMANHO() {
    return TAMANHO;
  }

  public void setTAMANHO(List<String> TAMANHO) {
    this.TAMANHO = TAMANHO;
  }


  public Item complementName(String complementName) {
    this.complementName = complementName;
    return this;
  }

  /**
   * Get complementName
   * @return complementName
   */
  @javax.annotation.Nonnull
  public String getComplementName() {
    return complementName;
  }

  public void setComplementName(String complementName) {
    this.complementName = complementName;
  }


  public Item ean(String ean) {
    this.ean = ean;
    return this;
  }

  /**
   * Get ean
   * @return ean
   */
  @javax.annotation.Nonnull
  public String getEan() {
    return ean;
  }

  public void setEan(String ean) {
    this.ean = ean;
  }


  public Item images(List<Image> images) {
    this.images = images;
    return this;
  }

  public Item addImagesItem(Image imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * 
   * @return images
   */
  @javax.annotation.Nonnull
  public List<Image> getImages() {
    return images;
  }

  public void setImages(List<Image> images) {
    this.images = images;
  }


  public Item itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * Get itemId
   * @return itemId
   */
  @javax.annotation.Nonnull
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public Item measurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
    return this;
  }

  /**
   * Get measurementUnit
   * @return measurementUnit
   */
  @javax.annotation.Nonnull
  public String getMeasurementUnit() {
    return measurementUnit;
  }

  public void setMeasurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
  }


  public Item name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Item nameComplete(String nameComplete) {
    this.nameComplete = nameComplete;
    return this;
  }

  /**
   * Get nameComplete
   * @return nameComplete
   */
  @javax.annotation.Nonnull
  public String getNameComplete() {
    return nameComplete;
  }

  public void setNameComplete(String nameComplete) {
    this.nameComplete = nameComplete;
  }


  public Item referenceId(List<ReferenceId> referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  public Item addReferenceIdItem(ReferenceId referenceIdItem) {
    if (this.referenceId == null) {
      this.referenceId = new ArrayList<>();
    }
    this.referenceId.add(referenceIdItem);
    return this;
  }

  /**
   * 
   * @return referenceId
   */
  @javax.annotation.Nullable
  public List<ReferenceId> getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(List<ReferenceId> referenceId) {
    this.referenceId = referenceId;
  }


  public Item sellers(List<Seller> sellers) {
    this.sellers = sellers;
    return this;
  }

  public Item addSellersItem(Seller sellersItem) {
    if (this.sellers == null) {
      this.sellers = new ArrayList<>();
    }
    this.sellers.add(sellersItem);
    return this;
  }

  /**
   * 
   * @return sellers
   */
  @javax.annotation.Nonnull
  public List<Seller> getSellers() {
    return sellers;
  }

  public void setSellers(List<Seller> sellers) {
    this.sellers = sellers;
  }


  public Item unitMultiplier(BigDecimal unitMultiplier) {
    this.unitMultiplier = unitMultiplier;
    return this;
  }

  /**
   * Get unitMultiplier
   * @return unitMultiplier
   */
  @javax.annotation.Nonnull
  public BigDecimal getUnitMultiplier() {
    return unitMultiplier;
  }

  public void setUnitMultiplier(BigDecimal unitMultiplier) {
    this.unitMultiplier = unitMultiplier;
  }


  public Item variations(List<String> variations) {
    this.variations = variations;
    return this;
  }

  public Item addVariationsItem(String variationsItem) {
    if (this.variations == null) {
      this.variations = new ArrayList<>();
    }
    this.variations.add(variationsItem);
    return this;
  }

  /**
   * 
   * @return variations
   */
  @javax.annotation.Nullable
  public List<String> getVariations() {
    return variations;
  }

  public void setVariations(List<String> variations) {
    this.variations = variations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Item item = (Item) o;
    return Objects.equals(this.COR, item.COR) &&
        Objects.equals(this.TAMANHO, item.TAMANHO) &&
        Objects.equals(this.complementName, item.complementName) &&
        Objects.equals(this.ean, item.ean) &&
        Objects.equals(this.images, item.images) &&
        Objects.equals(this.itemId, item.itemId) &&
        Objects.equals(this.measurementUnit, item.measurementUnit) &&
        Objects.equals(this.name, item.name) &&
        Objects.equals(this.nameComplete, item.nameComplete) &&
        Objects.equals(this.referenceId, item.referenceId) &&
        Objects.equals(this.sellers, item.sellers) &&
        Objects.equals(this.unitMultiplier, item.unitMultiplier) &&
        Objects.equals(this.variations, item.variations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(COR, TAMANHO, complementName, ean, images, itemId, measurementUnit, name, nameComplete, referenceId, sellers, unitMultiplier, variations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Item {\n");
    sb.append("    COR: ").append(toIndentedString(COR)).append("\n");
    sb.append("    TAMANHO: ").append(toIndentedString(TAMANHO)).append("\n");
    sb.append("    complementName: ").append(toIndentedString(complementName)).append("\n");
    sb.append("    ean: ").append(toIndentedString(ean)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    measurementUnit: ").append(toIndentedString(measurementUnit)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameComplete: ").append(toIndentedString(nameComplete)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    sellers: ").append(toIndentedString(sellers)).append("\n");
    sb.append("    unitMultiplier: ").append(toIndentedString(unitMultiplier)).append("\n");
    sb.append("    variations: ").append(toIndentedString(variations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("COR");
    openapiFields.add("TAMANHO");
    openapiFields.add("complementName");
    openapiFields.add("ean");
    openapiFields.add("images");
    openapiFields.add("itemId");
    openapiFields.add("measurementUnit");
    openapiFields.add("name");
    openapiFields.add("nameComplete");
    openapiFields.add("referenceId");
    openapiFields.add("sellers");
    openapiFields.add("unitMultiplier");
    openapiFields.add("variations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("complementName");
    openapiRequiredFields.add("ean");
    openapiRequiredFields.add("images");
    openapiRequiredFields.add("itemId");
    openapiRequiredFields.add("measurementUnit");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("nameComplete");
    openapiRequiredFields.add("sellers");
    openapiRequiredFields.add("unitMultiplier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Item
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Item.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Item is not found in the empty JSON string", Item.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Item.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Item` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Item.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("COR") != null && !jsonObj.get("COR").isJsonNull() && !jsonObj.get("COR").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `COR` to be an array in the JSON string but got `%s`", jsonObj.get("COR").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("TAMANHO") != null && !jsonObj.get("TAMANHO").isJsonNull() && !jsonObj.get("TAMANHO").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `TAMANHO` to be an array in the JSON string but got `%s`", jsonObj.get("TAMANHO").toString()));
      }
      if (!jsonObj.get("complementName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complementName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complementName").toString()));
      }
      if (!jsonObj.get("ean").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ean` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ean").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
      }

      JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
      // validate the required field `images` (array)
      for (int i = 0; i < jsonArrayimages.size(); i++) {
        Image.validateJsonElement(jsonArrayimages.get(i));
      };
      if (!jsonObj.get("itemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemId").toString()));
      }
      if (!jsonObj.get("measurementUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurementUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurementUnit").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("nameComplete").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameComplete` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameComplete").toString()));
      }
      if (jsonObj.get("referenceId") != null && !jsonObj.get("referenceId").isJsonNull()) {
        JsonArray jsonArrayreferenceId = jsonObj.getAsJsonArray("referenceId");
        if (jsonArrayreferenceId != null) {
          // ensure the json data is an array
          if (!jsonObj.get("referenceId").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `referenceId` to be an array in the JSON string but got `%s`", jsonObj.get("referenceId").toString()));
          }

          // validate the optional field `referenceId` (array)
          for (int i = 0; i < jsonArrayreferenceId.size(); i++) {
            ReferenceId.validateJsonElement(jsonArrayreferenceId.get(i));
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("sellers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellers` to be an array in the JSON string but got `%s`", jsonObj.get("sellers").toString()));
      }

      JsonArray jsonArraysellers = jsonObj.getAsJsonArray("sellers");
      // validate the required field `sellers` (array)
      for (int i = 0; i < jsonArraysellers.size(); i++) {
        Seller.validateJsonElement(jsonArraysellers.get(i));
      };
      // ensure the optional json data is an array if present
      if (jsonObj.get("variations") != null && !jsonObj.get("variations").isJsonNull() && !jsonObj.get("variations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `variations` to be an array in the JSON string but got `%s`", jsonObj.get("variations").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Item.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Item' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Item> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Item.class));

       return (TypeAdapter<T>) new TypeAdapter<Item>() {
           @Override
           public void write(JsonWriter out, Item value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Item read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Item given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Item
   * @throws IOException if the JSON string is invalid with respect to Item
   */
  public static Item fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Item.class);
  }

  /**
   * Convert an instance of Item to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

