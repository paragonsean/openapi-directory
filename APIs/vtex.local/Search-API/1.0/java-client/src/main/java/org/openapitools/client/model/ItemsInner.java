/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImagesInner;
import org.openapitools.client.model.KitItemsInner;
import org.openapitools.client.model.ReferenceIdInner;
import org.openapitools.client.model.SellersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ItemsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:46.427507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ItemsInner {
  public static final String SERIALIZED_NAME_VIDEOS = "Videos";
  @SerializedName(SERIALIZED_NAME_VIDEOS)
  private List<Object> videos = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPLEMENT_NAME = "complementName";
  @SerializedName(SERIALIZED_NAME_COMPLEMENT_NAME)
  private String complementName;

  public static final String SERIALIZED_NAME_EAN = "ean";
  @SerializedName(SERIALIZED_NAME_EAN)
  private String ean;

  public static final String SERIALIZED_NAME_ESTIMATED_DATE_ARRIVAL = "estimatedDateArrival";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_DATE_ARRIVAL)
  private String estimatedDateArrival;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<ImagesInner> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_KIT = "isKit";
  @SerializedName(SERIALIZED_NAME_IS_KIT)
  private Boolean isKit;

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_KIT_ITEMS = "kitItems";
  @SerializedName(SERIALIZED_NAME_KIT_ITEMS)
  private List<KitItemsInner> kitItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEASUREMENT_UNIT = "measurementUnit";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_UNIT)
  private String measurementUnit;

  public static final String SERIALIZED_NAME_MODAL_TYPE = "modalType";
  @SerializedName(SERIALIZED_NAME_MODAL_TYPE)
  private String modalType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_COMPLETE = "nameComplete";
  @SerializedName(SERIALIZED_NAME_NAME_COMPLETE)
  private String nameComplete;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "referenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private List<ReferenceIdInner> referenceId = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELLERS = "sellers";
  @SerializedName(SERIALIZED_NAME_SELLERS)
  private List<SellersInner> sellers = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIT_MULTIPLIER = "unitMultiplier";
  @SerializedName(SERIALIZED_NAME_UNIT_MULTIPLIER)
  private BigDecimal unitMultiplier;

  public ItemsInner() {
  }

  public ItemsInner videos(List<Object> videos) {
    this.videos = videos;
    return this;
  }

  public ItemsInner addVideosItem(Object videosItem) {
    if (this.videos == null) {
      this.videos = new ArrayList<>();
    }
    this.videos.add(videosItem);
    return this;
  }

  /**
   * Videos.
   * @return videos
   */
  @javax.annotation.Nonnull
  public List<Object> getVideos() {
    return videos;
  }

  public void setVideos(List<Object> videos) {
    this.videos = videos;
  }


  public ItemsInner complementName(String complementName) {
    this.complementName = complementName;
    return this;
  }

  /**
   * SKU complement name.
   * @return complementName
   */
  @javax.annotation.Nonnull
  public String getComplementName() {
    return complementName;
  }

  public void setComplementName(String complementName) {
    this.complementName = complementName;
  }


  public ItemsInner ean(String ean) {
    this.ean = ean;
    return this;
  }

  /**
   * SKU unique identification code (barcode), accepts up to 13 numerical characters.
   * @return ean
   */
  @javax.annotation.Nonnull
  public String getEan() {
    return ean;
  }

  public void setEan(String ean) {
    this.ean = ean;
  }


  public ItemsInner estimatedDateArrival(String estimatedDateArrival) {
    this.estimatedDateArrival = estimatedDateArrival;
    return this;
  }

  /**
   * Estimated date arrival.
   * @return estimatedDateArrival
   */
  @javax.annotation.Nullable
  public String getEstimatedDateArrival() {
    return estimatedDateArrival;
  }

  public void setEstimatedDateArrival(String estimatedDateArrival) {
    this.estimatedDateArrival = estimatedDateArrival;
  }


  public ItemsInner images(List<ImagesInner> images) {
    this.images = images;
    return this;
  }

  public ItemsInner addImagesItem(ImagesInner imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * Array of information about the SKU image.
   * @return images
   */
  @javax.annotation.Nonnull
  public List<ImagesInner> getImages() {
    return images;
  }

  public void setImages(List<ImagesInner> images) {
    this.images = images;
  }


  public ItemsInner isKit(Boolean isKit) {
    this.isKit = isKit;
    return this;
  }

  /**
   * If the SKU is part of a kit.
   * @return isKit
   */
  @javax.annotation.Nonnull
  public Boolean getIsKit() {
    return isKit;
  }

  public void setIsKit(Boolean isKit) {
    this.isKit = isKit;
  }


  public ItemsInner itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * SKU ID.
   * @return itemId
   */
  @javax.annotation.Nonnull
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public ItemsInner kitItems(List<KitItemsInner> kitItems) {
    this.kitItems = kitItems;
    return this;
  }

  public ItemsInner addKitItemsItem(KitItemsInner kitItemsItem) {
    if (this.kitItems == null) {
      this.kitItems = new ArrayList<>();
    }
    this.kitItems.add(kitItemsItem);
    return this;
  }

  /**
   * Array with information of SKUs components from a Kit.
   * @return kitItems
   */
  @javax.annotation.Nonnull
  public List<KitItemsInner> getKitItems() {
    return kitItems;
  }

  public void setKitItems(List<KitItemsInner> kitItems) {
    this.kitItems = kitItems;
  }


  public ItemsInner measurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
    return this;
  }

  /**
   * Used only in cases when you need to convert the unit of measure for sale. In common cases, use &#39;un&#39;.
   * @return measurementUnit
   */
  @javax.annotation.Nonnull
  public String getMeasurementUnit() {
    return measurementUnit;
  }

  public void setMeasurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
  }


  public ItemsInner modalType(String modalType) {
    this.modalType = modalType;
    return this;
  }

  /**
   * Modal Type.
   * @return modalType
   */
  @javax.annotation.Nullable
  public String getModalType() {
    return modalType;
  }

  public void setModalType(String modalType) {
    this.modalType = modalType;
  }


  public ItemsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * SKU name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ItemsInner nameComplete(String nameComplete) {
    this.nameComplete = nameComplete;
    return this;
  }

  /**
   * SKU complete name.
   * @return nameComplete
   */
  @javax.annotation.Nonnull
  public String getNameComplete() {
    return nameComplete;
  }

  public void setNameComplete(String nameComplete) {
    this.nameComplete = nameComplete;
  }


  public ItemsInner referenceId(List<ReferenceIdInner> referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  public ItemsInner addReferenceIdItem(ReferenceIdInner referenceIdItem) {
    if (this.referenceId == null) {
      this.referenceId = new ArrayList<>();
    }
    this.referenceId.add(referenceIdItem);
    return this;
  }

  /**
   * Reference code ID.
   * @return referenceId
   */
  @javax.annotation.Nonnull
  public List<ReferenceIdInner> getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(List<ReferenceIdInner> referenceId) {
    this.referenceId = referenceId;
  }


  public ItemsInner sellers(List<SellersInner> sellers) {
    this.sellers = sellers;
    return this;
  }

  public ItemsInner addSellersItem(SellersInner sellersItem) {
    if (this.sellers == null) {
      this.sellers = new ArrayList<>();
    }
    this.sellers.add(sellersItem);
    return this;
  }

  /**
   * Array of SKU sellers.
   * @return sellers
   */
  @javax.annotation.Nonnull
  public List<SellersInner> getSellers() {
    return sellers;
  }

  public void setSellers(List<SellersInner> sellers) {
    this.sellers = sellers;
  }


  public ItemsInner unitMultiplier(BigDecimal unitMultiplier) {
    this.unitMultiplier = unitMultiplier;
    return this;
  }

  /**
   * numerical unit that multiplies the selected quantity of the product when it is inserted in the cart.
   * @return unitMultiplier
   */
  @javax.annotation.Nonnull
  public BigDecimal getUnitMultiplier() {
    return unitMultiplier;
  }

  public void setUnitMultiplier(BigDecimal unitMultiplier) {
    this.unitMultiplier = unitMultiplier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemsInner itemsInner = (ItemsInner) o;
    return Objects.equals(this.videos, itemsInner.videos) &&
        Objects.equals(this.complementName, itemsInner.complementName) &&
        Objects.equals(this.ean, itemsInner.ean) &&
        Objects.equals(this.estimatedDateArrival, itemsInner.estimatedDateArrival) &&
        Objects.equals(this.images, itemsInner.images) &&
        Objects.equals(this.isKit, itemsInner.isKit) &&
        Objects.equals(this.itemId, itemsInner.itemId) &&
        Objects.equals(this.kitItems, itemsInner.kitItems) &&
        Objects.equals(this.measurementUnit, itemsInner.measurementUnit) &&
        Objects.equals(this.modalType, itemsInner.modalType) &&
        Objects.equals(this.name, itemsInner.name) &&
        Objects.equals(this.nameComplete, itemsInner.nameComplete) &&
        Objects.equals(this.referenceId, itemsInner.referenceId) &&
        Objects.equals(this.sellers, itemsInner.sellers) &&
        Objects.equals(this.unitMultiplier, itemsInner.unitMultiplier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(videos, complementName, ean, estimatedDateArrival, images, isKit, itemId, kitItems, measurementUnit, modalType, name, nameComplete, referenceId, sellers, unitMultiplier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemsInner {\n");
    sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
    sb.append("    complementName: ").append(toIndentedString(complementName)).append("\n");
    sb.append("    ean: ").append(toIndentedString(ean)).append("\n");
    sb.append("    estimatedDateArrival: ").append(toIndentedString(estimatedDateArrival)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    isKit: ").append(toIndentedString(isKit)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    kitItems: ").append(toIndentedString(kitItems)).append("\n");
    sb.append("    measurementUnit: ").append(toIndentedString(measurementUnit)).append("\n");
    sb.append("    modalType: ").append(toIndentedString(modalType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameComplete: ").append(toIndentedString(nameComplete)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    sellers: ").append(toIndentedString(sellers)).append("\n");
    sb.append("    unitMultiplier: ").append(toIndentedString(unitMultiplier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Videos");
    openapiFields.add("complementName");
    openapiFields.add("ean");
    openapiFields.add("estimatedDateArrival");
    openapiFields.add("images");
    openapiFields.add("isKit");
    openapiFields.add("itemId");
    openapiFields.add("kitItems");
    openapiFields.add("measurementUnit");
    openapiFields.add("modalType");
    openapiFields.add("name");
    openapiFields.add("nameComplete");
    openapiFields.add("referenceId");
    openapiFields.add("sellers");
    openapiFields.add("unitMultiplier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Videos");
    openapiRequiredFields.add("complementName");
    openapiRequiredFields.add("ean");
    openapiRequiredFields.add("estimatedDateArrival");
    openapiRequiredFields.add("images");
    openapiRequiredFields.add("isKit");
    openapiRequiredFields.add("itemId");
    openapiRequiredFields.add("kitItems");
    openapiRequiredFields.add("measurementUnit");
    openapiRequiredFields.add("modalType");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("nameComplete");
    openapiRequiredFields.add("referenceId");
    openapiRequiredFields.add("sellers");
    openapiRequiredFields.add("unitMultiplier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItemsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItemsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemsInner is not found in the empty JSON string", ItemsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItemsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ItemsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("Videos") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("Videos").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Videos` to be an array in the JSON string but got `%s`", jsonObj.get("Videos").toString()));
      }
      if (!jsonObj.get("complementName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complementName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complementName").toString()));
      }
      if (!jsonObj.get("ean").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ean` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ean").toString()));
      }
      if ((jsonObj.get("estimatedDateArrival") != null && !jsonObj.get("estimatedDateArrival").isJsonNull()) && !jsonObj.get("estimatedDateArrival").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `estimatedDateArrival` to be a primitive type in the JSON string but got `%s`", jsonObj.get("estimatedDateArrival").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
      }

      JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
      // validate the required field `images` (array)
      for (int i = 0; i < jsonArrayimages.size(); i++) {
        ImagesInner.validateJsonElement(jsonArrayimages.get(i));
      };
      if (!jsonObj.get("itemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("kitItems").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `kitItems` to be an array in the JSON string but got `%s`", jsonObj.get("kitItems").toString()));
      }

      JsonArray jsonArraykitItems = jsonObj.getAsJsonArray("kitItems");
      // validate the required field `kitItems` (array)
      for (int i = 0; i < jsonArraykitItems.size(); i++) {
        KitItemsInner.validateJsonElement(jsonArraykitItems.get(i));
      };
      if (!jsonObj.get("measurementUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurementUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurementUnit").toString()));
      }
      if ((jsonObj.get("modalType") != null && !jsonObj.get("modalType").isJsonNull()) && !jsonObj.get("modalType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modalType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modalType").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("nameComplete").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameComplete` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameComplete").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("referenceId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceId` to be an array in the JSON string but got `%s`", jsonObj.get("referenceId").toString()));
      }

      JsonArray jsonArrayreferenceId = jsonObj.getAsJsonArray("referenceId");
      // validate the required field `referenceId` (array)
      for (int i = 0; i < jsonArrayreferenceId.size(); i++) {
        ReferenceIdInner.validateJsonElement(jsonArrayreferenceId.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("sellers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellers` to be an array in the JSON string but got `%s`", jsonObj.get("sellers").toString()));
      }

      JsonArray jsonArraysellers = jsonObj.getAsJsonArray("sellers");
      // validate the required field `sellers` (array)
      for (int i = 0; i < jsonArraysellers.size(); i++) {
        SellersInner.validateJsonElement(jsonArraysellers.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemsInner>() {
           @Override
           public void write(JsonWriter out, ItemsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItemsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItemsInner
   * @throws IOException if the JSON string is invalid with respect to ItemsInner
   */
  public static ItemsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemsInner.class);
  }

  /**
   * Convert an instance of ItemsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

