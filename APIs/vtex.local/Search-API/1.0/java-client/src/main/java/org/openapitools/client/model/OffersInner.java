/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OffersPerSalesChannelInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OffersInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:46.427507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OffersInner {
  public static final String SERIALIZED_NAME_AVAILABLE_SALES_CHANNELS = "AvailableSalesChannels";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_SALES_CHANNELS)
  private String availableSalesChannels;

  public static final String SERIALIZED_NAME_OFFERS_PER_SALES_CHANNEL = "OffersPerSalesChannel";
  @SerializedName(SERIALIZED_NAME_OFFERS_PER_SALES_CHANNEL)
  private List<OffersPerSalesChannelInner> offersPerSalesChannel = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELLER_ID = "SellerId";
  @SerializedName(SERIALIZED_NAME_SELLER_ID)
  private String sellerId;

  public static final String SERIALIZED_NAME_SELLER_SKU_ID = "SellerSkuId";
  @SerializedName(SERIALIZED_NAME_SELLER_SKU_ID)
  private String sellerSkuId;

  public OffersInner() {
  }

  public OffersInner availableSalesChannels(String availableSalesChannels) {
    this.availableSalesChannels = availableSalesChannels;
    return this;
  }

  /**
   * Trade policy that the SKU in contained.
   * @return availableSalesChannels
   */
  @javax.annotation.Nullable
  public String getAvailableSalesChannels() {
    return availableSalesChannels;
  }

  public void setAvailableSalesChannels(String availableSalesChannels) {
    this.availableSalesChannels = availableSalesChannels;
  }


  public OffersInner offersPerSalesChannel(List<OffersPerSalesChannelInner> offersPerSalesChannel) {
    this.offersPerSalesChannel = offersPerSalesChannel;
    return this;
  }

  public OffersInner addOffersPerSalesChannelItem(OffersPerSalesChannelInner offersPerSalesChannelItem) {
    if (this.offersPerSalesChannel == null) {
      this.offersPerSalesChannel = new ArrayList<>();
    }
    this.offersPerSalesChannel.add(offersPerSalesChannelItem);
    return this;
  }

  /**
   * Offers per trade policy.
   * @return offersPerSalesChannel
   */
  @javax.annotation.Nonnull
  public List<OffersPerSalesChannelInner> getOffersPerSalesChannel() {
    return offersPerSalesChannel;
  }

  public void setOffersPerSalesChannel(List<OffersPerSalesChannelInner> offersPerSalesChannel) {
    this.offersPerSalesChannel = offersPerSalesChannel;
  }


  public OffersInner sellerId(String sellerId) {
    this.sellerId = sellerId;
    return this;
  }

  /**
   * Seller ID.
   * @return sellerId
   */
  @javax.annotation.Nonnull
  public String getSellerId() {
    return sellerId;
  }

  public void setSellerId(String sellerId) {
    this.sellerId = sellerId;
  }


  public OffersInner sellerSkuId(String sellerSkuId) {
    this.sellerSkuId = sellerSkuId;
    return this;
  }

  /**
   * ID of the association of the SKU with the seller.
   * @return sellerSkuId
   */
  @javax.annotation.Nonnull
  public String getSellerSkuId() {
    return sellerSkuId;
  }

  public void setSellerSkuId(String sellerSkuId) {
    this.sellerSkuId = sellerSkuId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OffersInner offersInner = (OffersInner) o;
    return Objects.equals(this.availableSalesChannels, offersInner.availableSalesChannels) &&
        Objects.equals(this.offersPerSalesChannel, offersInner.offersPerSalesChannel) &&
        Objects.equals(this.sellerId, offersInner.sellerId) &&
        Objects.equals(this.sellerSkuId, offersInner.sellerSkuId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableSalesChannels, offersPerSalesChannel, sellerId, sellerSkuId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OffersInner {\n");
    sb.append("    availableSalesChannels: ").append(toIndentedString(availableSalesChannels)).append("\n");
    sb.append("    offersPerSalesChannel: ").append(toIndentedString(offersPerSalesChannel)).append("\n");
    sb.append("    sellerId: ").append(toIndentedString(sellerId)).append("\n");
    sb.append("    sellerSkuId: ").append(toIndentedString(sellerSkuId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AvailableSalesChannels");
    openapiFields.add("OffersPerSalesChannel");
    openapiFields.add("SellerId");
    openapiFields.add("SellerSkuId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AvailableSalesChannels");
    openapiRequiredFields.add("OffersPerSalesChannel");
    openapiRequiredFields.add("SellerId");
    openapiRequiredFields.add("SellerSkuId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OffersInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OffersInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OffersInner is not found in the empty JSON string", OffersInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OffersInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OffersInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OffersInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AvailableSalesChannels") != null && !jsonObj.get("AvailableSalesChannels").isJsonNull()) && !jsonObj.get("AvailableSalesChannels").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AvailableSalesChannels` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AvailableSalesChannels").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("OffersPerSalesChannel").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `OffersPerSalesChannel` to be an array in the JSON string but got `%s`", jsonObj.get("OffersPerSalesChannel").toString()));
      }

      JsonArray jsonArrayoffersPerSalesChannel = jsonObj.getAsJsonArray("OffersPerSalesChannel");
      // validate the required field `OffersPerSalesChannel` (array)
      for (int i = 0; i < jsonArrayoffersPerSalesChannel.size(); i++) {
        OffersPerSalesChannelInner.validateJsonElement(jsonArrayoffersPerSalesChannel.get(i));
      };
      if (!jsonObj.get("SellerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SellerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SellerId").toString()));
      }
      if (!jsonObj.get("SellerSkuId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SellerSkuId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SellerSkuId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OffersInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OffersInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OffersInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OffersInner.class));

       return (TypeAdapter<T>) new TypeAdapter<OffersInner>() {
           @Override
           public void write(JsonWriter out, OffersInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OffersInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OffersInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OffersInner
   * @throws IOException if the JSON string is invalid with respect to OffersInner
   */
  public static OffersInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OffersInner.class);
  }

  /**
   * Convert an instance of OffersInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

