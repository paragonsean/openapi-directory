/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeliverySlaSamplesInner;
import org.openapitools.client.model.DeliverySlaSamplesPerRegion;
import org.openapitools.client.model.InstallmentsInner;
import org.openapitools.client.model.PaymentOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AKA Commertial Condition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:46.427507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommertialOffer {
  public static final String SERIALIZED_NAME_AVAILABLE_QUANTITY = "AvailableQuantity";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_QUANTITY)
  private Integer availableQuantity;

  public static final String SERIALIZED_NAME_BUY_TOGETHER = "BuyTogether";
  @SerializedName(SERIALIZED_NAME_BUY_TOGETHER)
  private List<Object> buyTogether = new ArrayList<>();

  public static final String SERIALIZED_NAME_CACHE_VERSION_USED_TO_CALL_CHECKOUT = "CacheVersionUsedToCallCheckout";
  @SerializedName(SERIALIZED_NAME_CACHE_VERSION_USED_TO_CALL_CHECKOUT)
  private String cacheVersionUsedToCallCheckout;

  public static final String SERIALIZED_NAME_DELIVERY_SLA_SAMPLES = "DeliverySlaSamples";
  @SerializedName(SERIALIZED_NAME_DELIVERY_SLA_SAMPLES)
  private List<DeliverySlaSamplesInner> deliverySlaSamples = new ArrayList<>();

  public static final String SERIALIZED_NAME_DELIVERY_SLA_SAMPLES_PER_REGION = "DeliverySlaSamplesPerRegion";
  @SerializedName(SERIALIZED_NAME_DELIVERY_SLA_SAMPLES_PER_REGION)
  private DeliverySlaSamplesPerRegion deliverySlaSamplesPerRegion;

  public static final String SERIALIZED_NAME_DISCOUNT_HIGH_LIGHT = "DiscountHighLight";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_HIGH_LIGHT)
  private List<Object> discountHighLight = new ArrayList<>();

  public static final String SERIALIZED_NAME_GET_INFO_ERROR_MESSAGE = "GetInfoErrorMessage";
  @SerializedName(SERIALIZED_NAME_GET_INFO_ERROR_MESSAGE)
  private String getInfoErrorMessage;

  public static final String SERIALIZED_NAME_GIFT_SKU_IDS = "GiftSkuIds";
  @SerializedName(SERIALIZED_NAME_GIFT_SKU_IDS)
  private List<Object> giftSkuIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTALLMENTS = "Installments";
  @SerializedName(SERIALIZED_NAME_INSTALLMENTS)
  private List<InstallmentsInner> installments = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_AVAILABLE = "IsAvailable";
  @SerializedName(SERIALIZED_NAME_IS_AVAILABLE)
  private Boolean isAvailable;

  public static final String SERIALIZED_NAME_ITEM_METADATA_ATTACHMENT = "ItemMetadataAttachment";
  @SerializedName(SERIALIZED_NAME_ITEM_METADATA_ATTACHMENT)
  private List<Object> itemMetadataAttachment = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIST_PRICE = "ListPrice";
  @SerializedName(SERIALIZED_NAME_LIST_PRICE)
  private BigDecimal listPrice;

  public static final String SERIALIZED_NAME_PAYMENT_OPTIONS = "PaymentOptions";
  @SerializedName(SERIALIZED_NAME_PAYMENT_OPTIONS)
  private PaymentOptions paymentOptions;

  public static final String SERIALIZED_NAME_PRICE = "Price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_PRICE_VALID_UNTIL = "PriceValidUntil";
  @SerializedName(SERIALIZED_NAME_PRICE_VALID_UNTIL)
  private String priceValidUntil;

  public static final String SERIALIZED_NAME_PRICE_WITHOUT_DISCOUNT = "PriceWithoutDiscount";
  @SerializedName(SERIALIZED_NAME_PRICE_WITHOUT_DISCOUNT)
  private BigDecimal priceWithoutDiscount;

  public static final String SERIALIZED_NAME_REWARD_VALUE = "RewardValue";
  @SerializedName(SERIALIZED_NAME_REWARD_VALUE)
  private BigDecimal rewardValue;

  public static final String SERIALIZED_NAME_SALE_CHANNEL = "SaleChannel";
  @SerializedName(SERIALIZED_NAME_SALE_CHANNEL)
  private Integer saleChannel;

  public static final String SERIALIZED_NAME_TAX = "Tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private BigDecimal tax;

  public static final String SERIALIZED_NAME_TEASERS = "Teasers";
  @SerializedName(SERIALIZED_NAME_TEASERS)
  private List<Object> teasers = new ArrayList<>();

  public CommertialOffer() {
  }

  public CommertialOffer availableQuantity(Integer availableQuantity) {
    this.availableQuantity = availableQuantity;
    return this;
  }

  /**
   * Use the &#x60;IsAvailable&#x60; field instead.
   * @return availableQuantity
   */
  @javax.annotation.Nonnull
  public Integer getAvailableQuantity() {
    return availableQuantity;
  }

  public void setAvailableQuantity(Integer availableQuantity) {
    this.availableQuantity = availableQuantity;
  }


  public CommertialOffer buyTogether(List<Object> buyTogether) {
    this.buyTogether = buyTogether;
    return this;
  }

  public CommertialOffer addBuyTogetherItem(Object buyTogetherItem) {
    if (this.buyTogether == null) {
      this.buyTogether = new ArrayList<>();
    }
    this.buyTogether.add(buyTogetherItem);
    return this;
  }

  /**
   * Array of other products that can be bought together with the product in question.
   * @return buyTogether
   */
  @javax.annotation.Nonnull
  public List<Object> getBuyTogether() {
    return buyTogether;
  }

  public void setBuyTogether(List<Object> buyTogether) {
    this.buyTogether = buyTogether;
  }


  public CommertialOffer cacheVersionUsedToCallCheckout(String cacheVersionUsedToCallCheckout) {
    this.cacheVersionUsedToCallCheckout = cacheVersionUsedToCallCheckout;
    return this;
  }

  /**
   * Cache version used to call checkout.
   * @return cacheVersionUsedToCallCheckout
   */
  @javax.annotation.Nonnull
  public String getCacheVersionUsedToCallCheckout() {
    return cacheVersionUsedToCallCheckout;
  }

  public void setCacheVersionUsedToCallCheckout(String cacheVersionUsedToCallCheckout) {
    this.cacheVersionUsedToCallCheckout = cacheVersionUsedToCallCheckout;
  }


  public CommertialOffer deliverySlaSamples(List<DeliverySlaSamplesInner> deliverySlaSamples) {
    this.deliverySlaSamples = deliverySlaSamples;
    return this;
  }

  public CommertialOffer addDeliverySlaSamplesItem(DeliverySlaSamplesInner deliverySlaSamplesItem) {
    if (this.deliverySlaSamples == null) {
      this.deliverySlaSamples = new ArrayList<>();
    }
    this.deliverySlaSamples.add(deliverySlaSamplesItem);
    return this;
  }

  /**
   * Delivery SLA samples.
   * @return deliverySlaSamples
   */
  @javax.annotation.Nonnull
  public List<DeliverySlaSamplesInner> getDeliverySlaSamples() {
    return deliverySlaSamples;
  }

  public void setDeliverySlaSamples(List<DeliverySlaSamplesInner> deliverySlaSamples) {
    this.deliverySlaSamples = deliverySlaSamples;
  }


  public CommertialOffer deliverySlaSamplesPerRegion(DeliverySlaSamplesPerRegion deliverySlaSamplesPerRegion) {
    this.deliverySlaSamplesPerRegion = deliverySlaSamplesPerRegion;
    return this;
  }

  /**
   * Get deliverySlaSamplesPerRegion
   * @return deliverySlaSamplesPerRegion
   */
  @javax.annotation.Nonnull
  public DeliverySlaSamplesPerRegion getDeliverySlaSamplesPerRegion() {
    return deliverySlaSamplesPerRegion;
  }

  public void setDeliverySlaSamplesPerRegion(DeliverySlaSamplesPerRegion deliverySlaSamplesPerRegion) {
    this.deliverySlaSamplesPerRegion = deliverySlaSamplesPerRegion;
  }


  public CommertialOffer discountHighLight(List<Object> discountHighLight) {
    this.discountHighLight = discountHighLight;
    return this;
  }

  public CommertialOffer addDiscountHighLightItem(Object discountHighLightItem) {
    if (this.discountHighLight == null) {
      this.discountHighLight = new ArrayList<>();
    }
    this.discountHighLight.add(discountHighLightItem);
    return this;
  }

  /**
   * Discount hightlight.
   * @return discountHighLight
   */
  @javax.annotation.Nonnull
  public List<Object> getDiscountHighLight() {
    return discountHighLight;
  }

  public void setDiscountHighLight(List<Object> discountHighLight) {
    this.discountHighLight = discountHighLight;
  }


  public CommertialOffer getInfoErrorMessage(String getInfoErrorMessage) {
    this.getInfoErrorMessage = getInfoErrorMessage;
    return this;
  }

  /**
   * Get info error message.
   * @return getInfoErrorMessage
   */
  @javax.annotation.Nullable
  public String getGetInfoErrorMessage() {
    return getInfoErrorMessage;
  }

  public void setGetInfoErrorMessage(String getInfoErrorMessage) {
    this.getInfoErrorMessage = getInfoErrorMessage;
  }


  public CommertialOffer giftSkuIds(List<Object> giftSkuIds) {
    this.giftSkuIds = giftSkuIds;
    return this;
  }

  public CommertialOffer addGiftSkuIdsItem(Object giftSkuIdsItem) {
    if (this.giftSkuIds == null) {
      this.giftSkuIds = new ArrayList<>();
    }
    this.giftSkuIds.add(giftSkuIdsItem);
    return this;
  }

  /**
   * Array of SKU gifts IDs.
   * @return giftSkuIds
   */
  @javax.annotation.Nonnull
  public List<Object> getGiftSkuIds() {
    return giftSkuIds;
  }

  public void setGiftSkuIds(List<Object> giftSkuIds) {
    this.giftSkuIds = giftSkuIds;
  }


  public CommertialOffer installments(List<InstallmentsInner> installments) {
    this.installments = installments;
    return this;
  }

  public CommertialOffer addInstallmentsItem(InstallmentsInner installmentsItem) {
    if (this.installments == null) {
      this.installments = new ArrayList<>();
    }
    this.installments.add(installmentsItem);
    return this;
  }

  /**
   * Installments options.
   * @return installments
   */
  @javax.annotation.Nonnull
  public List<InstallmentsInner> getInstallments() {
    return installments;
  }

  public void setInstallments(List<InstallmentsInner> installments) {
    this.installments = installments;
  }


  public CommertialOffer isAvailable(Boolean isAvailable) {
    this.isAvailable = isAvailable;
    return this;
  }

  /**
   * If the product is available or not.
   * @return isAvailable
   */
  @javax.annotation.Nonnull
  public Boolean getIsAvailable() {
    return isAvailable;
  }

  public void setIsAvailable(Boolean isAvailable) {
    this.isAvailable = isAvailable;
  }


  public CommertialOffer itemMetadataAttachment(List<Object> itemMetadataAttachment) {
    this.itemMetadataAttachment = itemMetadataAttachment;
    return this;
  }

  public CommertialOffer addItemMetadataAttachmentItem(Object itemMetadataAttachmentItem) {
    if (this.itemMetadataAttachment == null) {
      this.itemMetadataAttachment = new ArrayList<>();
    }
    this.itemMetadataAttachment.add(itemMetadataAttachmentItem);
    return this;
  }

  /**
   * Item metadata attachment.
   * @return itemMetadataAttachment
   */
  @javax.annotation.Nonnull
  public List<Object> getItemMetadataAttachment() {
    return itemMetadataAttachment;
  }

  public void setItemMetadataAttachment(List<Object> itemMetadataAttachment) {
    this.itemMetadataAttachment = itemMetadataAttachment;
  }


  public CommertialOffer listPrice(BigDecimal listPrice) {
    this.listPrice = listPrice;
    return this;
  }

  /**
   * List price of the product.
   * @return listPrice
   */
  @javax.annotation.Nonnull
  public BigDecimal getListPrice() {
    return listPrice;
  }

  public void setListPrice(BigDecimal listPrice) {
    this.listPrice = listPrice;
  }


  public CommertialOffer paymentOptions(PaymentOptions paymentOptions) {
    this.paymentOptions = paymentOptions;
    return this;
  }

  /**
   * Get paymentOptions
   * @return paymentOptions
   */
  @javax.annotation.Nonnull
  public PaymentOptions getPaymentOptions() {
    return paymentOptions;
  }

  public void setPaymentOptions(PaymentOptions paymentOptions) {
    this.paymentOptions = paymentOptions;
  }


  public CommertialOffer price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * Price of the product.
   * @return price
   */
  @javax.annotation.Nonnull
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public CommertialOffer priceValidUntil(String priceValidUntil) {
    this.priceValidUntil = priceValidUntil;
    return this;
  }

  /**
   * Price of the product valid until a certain date.
   * @return priceValidUntil
   */
  @javax.annotation.Nonnull
  public String getPriceValidUntil() {
    return priceValidUntil;
  }

  public void setPriceValidUntil(String priceValidUntil) {
    this.priceValidUntil = priceValidUntil;
  }


  public CommertialOffer priceWithoutDiscount(BigDecimal priceWithoutDiscount) {
    this.priceWithoutDiscount = priceWithoutDiscount;
    return this;
  }

  /**
   * Price of the product without discount.
   * @return priceWithoutDiscount
   */
  @javax.annotation.Nonnull
  public BigDecimal getPriceWithoutDiscount() {
    return priceWithoutDiscount;
  }

  public void setPriceWithoutDiscount(BigDecimal priceWithoutDiscount) {
    this.priceWithoutDiscount = priceWithoutDiscount;
  }


  public CommertialOffer rewardValue(BigDecimal rewardValue) {
    this.rewardValue = rewardValue;
    return this;
  }

  /**
   * Reward value of the product.
   * @return rewardValue
   */
  @javax.annotation.Nonnull
  public BigDecimal getRewardValue() {
    return rewardValue;
  }

  public void setRewardValue(BigDecimal rewardValue) {
    this.rewardValue = rewardValue;
  }


  public CommertialOffer saleChannel(Integer saleChannel) {
    this.saleChannel = saleChannel;
    return this;
  }

  /**
   * Trade policy which the product is contained.
   * @return saleChannel
   */
  @javax.annotation.Nonnull
  public Integer getSaleChannel() {
    return saleChannel;
  }

  public void setSaleChannel(Integer saleChannel) {
    this.saleChannel = saleChannel;
  }


  public CommertialOffer tax(BigDecimal tax) {
    this.tax = tax;
    return this;
  }

  /**
   * Tax of the product.
   * @return tax
   */
  @javax.annotation.Nonnull
  public BigDecimal getTax() {
    return tax;
  }

  public void setTax(BigDecimal tax) {
    this.tax = tax;
  }


  public CommertialOffer teasers(List<Object> teasers) {
    this.teasers = teasers;
    return this;
  }

  public CommertialOffer addTeasersItem(Object teasersItem) {
    if (this.teasers == null) {
      this.teasers = new ArrayList<>();
    }
    this.teasers.add(teasersItem);
    return this;
  }

  /**
   * Teasers.
   * @return teasers
   */
  @javax.annotation.Nonnull
  public List<Object> getTeasers() {
    return teasers;
  }

  public void setTeasers(List<Object> teasers) {
    this.teasers = teasers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommertialOffer commertialOffer = (CommertialOffer) o;
    return Objects.equals(this.availableQuantity, commertialOffer.availableQuantity) &&
        Objects.equals(this.buyTogether, commertialOffer.buyTogether) &&
        Objects.equals(this.cacheVersionUsedToCallCheckout, commertialOffer.cacheVersionUsedToCallCheckout) &&
        Objects.equals(this.deliverySlaSamples, commertialOffer.deliverySlaSamples) &&
        Objects.equals(this.deliverySlaSamplesPerRegion, commertialOffer.deliverySlaSamplesPerRegion) &&
        Objects.equals(this.discountHighLight, commertialOffer.discountHighLight) &&
        Objects.equals(this.getInfoErrorMessage, commertialOffer.getInfoErrorMessage) &&
        Objects.equals(this.giftSkuIds, commertialOffer.giftSkuIds) &&
        Objects.equals(this.installments, commertialOffer.installments) &&
        Objects.equals(this.isAvailable, commertialOffer.isAvailable) &&
        Objects.equals(this.itemMetadataAttachment, commertialOffer.itemMetadataAttachment) &&
        Objects.equals(this.listPrice, commertialOffer.listPrice) &&
        Objects.equals(this.paymentOptions, commertialOffer.paymentOptions) &&
        Objects.equals(this.price, commertialOffer.price) &&
        Objects.equals(this.priceValidUntil, commertialOffer.priceValidUntil) &&
        Objects.equals(this.priceWithoutDiscount, commertialOffer.priceWithoutDiscount) &&
        Objects.equals(this.rewardValue, commertialOffer.rewardValue) &&
        Objects.equals(this.saleChannel, commertialOffer.saleChannel) &&
        Objects.equals(this.tax, commertialOffer.tax) &&
        Objects.equals(this.teasers, commertialOffer.teasers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableQuantity, buyTogether, cacheVersionUsedToCallCheckout, deliverySlaSamples, deliverySlaSamplesPerRegion, discountHighLight, getInfoErrorMessage, giftSkuIds, installments, isAvailable, itemMetadataAttachment, listPrice, paymentOptions, price, priceValidUntil, priceWithoutDiscount, rewardValue, saleChannel, tax, teasers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommertialOffer {\n");
    sb.append("    availableQuantity: ").append(toIndentedString(availableQuantity)).append("\n");
    sb.append("    buyTogether: ").append(toIndentedString(buyTogether)).append("\n");
    sb.append("    cacheVersionUsedToCallCheckout: ").append(toIndentedString(cacheVersionUsedToCallCheckout)).append("\n");
    sb.append("    deliverySlaSamples: ").append(toIndentedString(deliverySlaSamples)).append("\n");
    sb.append("    deliverySlaSamplesPerRegion: ").append(toIndentedString(deliverySlaSamplesPerRegion)).append("\n");
    sb.append("    discountHighLight: ").append(toIndentedString(discountHighLight)).append("\n");
    sb.append("    getInfoErrorMessage: ").append(toIndentedString(getInfoErrorMessage)).append("\n");
    sb.append("    giftSkuIds: ").append(toIndentedString(giftSkuIds)).append("\n");
    sb.append("    installments: ").append(toIndentedString(installments)).append("\n");
    sb.append("    isAvailable: ").append(toIndentedString(isAvailable)).append("\n");
    sb.append("    itemMetadataAttachment: ").append(toIndentedString(itemMetadataAttachment)).append("\n");
    sb.append("    listPrice: ").append(toIndentedString(listPrice)).append("\n");
    sb.append("    paymentOptions: ").append(toIndentedString(paymentOptions)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceValidUntil: ").append(toIndentedString(priceValidUntil)).append("\n");
    sb.append("    priceWithoutDiscount: ").append(toIndentedString(priceWithoutDiscount)).append("\n");
    sb.append("    rewardValue: ").append(toIndentedString(rewardValue)).append("\n");
    sb.append("    saleChannel: ").append(toIndentedString(saleChannel)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    teasers: ").append(toIndentedString(teasers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AvailableQuantity");
    openapiFields.add("BuyTogether");
    openapiFields.add("CacheVersionUsedToCallCheckout");
    openapiFields.add("DeliverySlaSamples");
    openapiFields.add("DeliverySlaSamplesPerRegion");
    openapiFields.add("DiscountHighLight");
    openapiFields.add("GetInfoErrorMessage");
    openapiFields.add("GiftSkuIds");
    openapiFields.add("Installments");
    openapiFields.add("IsAvailable");
    openapiFields.add("ItemMetadataAttachment");
    openapiFields.add("ListPrice");
    openapiFields.add("PaymentOptions");
    openapiFields.add("Price");
    openapiFields.add("PriceValidUntil");
    openapiFields.add("PriceWithoutDiscount");
    openapiFields.add("RewardValue");
    openapiFields.add("SaleChannel");
    openapiFields.add("Tax");
    openapiFields.add("Teasers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AvailableQuantity");
    openapiRequiredFields.add("BuyTogether");
    openapiRequiredFields.add("CacheVersionUsedToCallCheckout");
    openapiRequiredFields.add("DeliverySlaSamples");
    openapiRequiredFields.add("DeliverySlaSamplesPerRegion");
    openapiRequiredFields.add("DiscountHighLight");
    openapiRequiredFields.add("GetInfoErrorMessage");
    openapiRequiredFields.add("GiftSkuIds");
    openapiRequiredFields.add("Installments");
    openapiRequiredFields.add("IsAvailable");
    openapiRequiredFields.add("ItemMetadataAttachment");
    openapiRequiredFields.add("ListPrice");
    openapiRequiredFields.add("PaymentOptions");
    openapiRequiredFields.add("Price");
    openapiRequiredFields.add("PriceValidUntil");
    openapiRequiredFields.add("PriceWithoutDiscount");
    openapiRequiredFields.add("RewardValue");
    openapiRequiredFields.add("SaleChannel");
    openapiRequiredFields.add("Tax");
    openapiRequiredFields.add("Teasers");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommertialOffer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommertialOffer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommertialOffer is not found in the empty JSON string", CommertialOffer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommertialOffer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommertialOffer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CommertialOffer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("BuyTogether") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("BuyTogether").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `BuyTogether` to be an array in the JSON string but got `%s`", jsonObj.get("BuyTogether").toString()));
      }
      if (!jsonObj.get("CacheVersionUsedToCallCheckout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CacheVersionUsedToCallCheckout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CacheVersionUsedToCallCheckout").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("DeliverySlaSamples").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeliverySlaSamples` to be an array in the JSON string but got `%s`", jsonObj.get("DeliverySlaSamples").toString()));
      }

      JsonArray jsonArraydeliverySlaSamples = jsonObj.getAsJsonArray("DeliverySlaSamples");
      // validate the required field `DeliverySlaSamples` (array)
      for (int i = 0; i < jsonArraydeliverySlaSamples.size(); i++) {
        DeliverySlaSamplesInner.validateJsonElement(jsonArraydeliverySlaSamples.get(i));
      };
      // validate the required field `DeliverySlaSamplesPerRegion`
      DeliverySlaSamplesPerRegion.validateJsonElement(jsonObj.get("DeliverySlaSamplesPerRegion"));
      // ensure the required json array is present
      if (jsonObj.get("DiscountHighLight") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("DiscountHighLight").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DiscountHighLight` to be an array in the JSON string but got `%s`", jsonObj.get("DiscountHighLight").toString()));
      }
      if ((jsonObj.get("GetInfoErrorMessage") != null && !jsonObj.get("GetInfoErrorMessage").isJsonNull()) && !jsonObj.get("GetInfoErrorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GetInfoErrorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GetInfoErrorMessage").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("GiftSkuIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("GiftSkuIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `GiftSkuIds` to be an array in the JSON string but got `%s`", jsonObj.get("GiftSkuIds").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("Installments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Installments` to be an array in the JSON string but got `%s`", jsonObj.get("Installments").toString()));
      }

      JsonArray jsonArrayinstallments = jsonObj.getAsJsonArray("Installments");
      // validate the required field `Installments` (array)
      for (int i = 0; i < jsonArrayinstallments.size(); i++) {
        InstallmentsInner.validateJsonElement(jsonArrayinstallments.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("ItemMetadataAttachment") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("ItemMetadataAttachment").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ItemMetadataAttachment` to be an array in the JSON string but got `%s`", jsonObj.get("ItemMetadataAttachment").toString()));
      }
      // validate the required field `PaymentOptions`
      PaymentOptions.validateJsonElement(jsonObj.get("PaymentOptions"));
      if (!jsonObj.get("PriceValidUntil").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PriceValidUntil` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PriceValidUntil").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("Teasers") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("Teasers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Teasers` to be an array in the JSON string but got `%s`", jsonObj.get("Teasers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommertialOffer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommertialOffer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommertialOffer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommertialOffer.class));

       return (TypeAdapter<T>) new TypeAdapter<CommertialOffer>() {
           @Override
           public void write(JsonWriter out, CommertialOffer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommertialOffer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommertialOffer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommertialOffer
   * @throws IOException if the JSON string is invalid with respect to CommertialOffer
   */
  public static CommertialOffer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommertialOffer.class);
  }

  /**
   * Convert an instance of CommertialOffer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

