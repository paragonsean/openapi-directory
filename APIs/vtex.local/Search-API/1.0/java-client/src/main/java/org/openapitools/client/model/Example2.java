/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Brand;
import org.openapitools.client.model.CategoriesTree;
import org.openapitools.client.model.Department;
import org.openapitools.client.model.SpecificationFilters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Example2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:46.427507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Example2 {
  public static final String SERIALIZED_NAME_BRANDS = "Brands";
  @SerializedName(SERIALIZED_NAME_BRANDS)
  private List<Brand> brands = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORIES_TREES = "CategoriesTrees";
  @SerializedName(SERIALIZED_NAME_CATEGORIES_TREES)
  private List<CategoriesTree> categoriesTrees = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPARTMENTS = "Departments";
  @SerializedName(SERIALIZED_NAME_DEPARTMENTS)
  private List<Department> departments = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPECIFICATION_FILTERS = "SpecificationFilters";
  @SerializedName(SERIALIZED_NAME_SPECIFICATION_FILTERS)
  private SpecificationFilters specificationFilters;

  public Example2() {
  }

  public Example2 brands(List<Brand> brands) {
    this.brands = brands;
    return this;
  }

  public Example2 addBrandsItem(Brand brandsItem) {
    if (this.brands == null) {
      this.brands = new ArrayList<>();
    }
    this.brands.add(brandsItem);
    return this;
  }

  /**
   * 
   * @return brands
   */
  @javax.annotation.Nonnull
  public List<Brand> getBrands() {
    return brands;
  }

  public void setBrands(List<Brand> brands) {
    this.brands = brands;
  }


  public Example2 categoriesTrees(List<CategoriesTree> categoriesTrees) {
    this.categoriesTrees = categoriesTrees;
    return this;
  }

  public Example2 addCategoriesTreesItem(CategoriesTree categoriesTreesItem) {
    if (this.categoriesTrees == null) {
      this.categoriesTrees = new ArrayList<>();
    }
    this.categoriesTrees.add(categoriesTreesItem);
    return this;
  }

  /**
   * 
   * @return categoriesTrees
   */
  @javax.annotation.Nonnull
  public List<CategoriesTree> getCategoriesTrees() {
    return categoriesTrees;
  }

  public void setCategoriesTrees(List<CategoriesTree> categoriesTrees) {
    this.categoriesTrees = categoriesTrees;
  }


  public Example2 departments(List<Department> departments) {
    this.departments = departments;
    return this;
  }

  public Example2 addDepartmentsItem(Department departmentsItem) {
    if (this.departments == null) {
      this.departments = new ArrayList<>();
    }
    this.departments.add(departmentsItem);
    return this;
  }

  /**
   * 
   * @return departments
   */
  @javax.annotation.Nonnull
  public List<Department> getDepartments() {
    return departments;
  }

  public void setDepartments(List<Department> departments) {
    this.departments = departments;
  }


  public Example2 specificationFilters(SpecificationFilters specificationFilters) {
    this.specificationFilters = specificationFilters;
    return this;
  }

  /**
   * Get specificationFilters
   * @return specificationFilters
   */
  @javax.annotation.Nonnull
  public SpecificationFilters getSpecificationFilters() {
    return specificationFilters;
  }

  public void setSpecificationFilters(SpecificationFilters specificationFilters) {
    this.specificationFilters = specificationFilters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Example2 example2 = (Example2) o;
    return Objects.equals(this.brands, example2.brands) &&
        Objects.equals(this.categoriesTrees, example2.categoriesTrees) &&
        Objects.equals(this.departments, example2.departments) &&
        Objects.equals(this.specificationFilters, example2.specificationFilters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brands, categoriesTrees, departments, specificationFilters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Example2 {\n");
    sb.append("    brands: ").append(toIndentedString(brands)).append("\n");
    sb.append("    categoriesTrees: ").append(toIndentedString(categoriesTrees)).append("\n");
    sb.append("    departments: ").append(toIndentedString(departments)).append("\n");
    sb.append("    specificationFilters: ").append(toIndentedString(specificationFilters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Brands");
    openapiFields.add("CategoriesTrees");
    openapiFields.add("Departments");
    openapiFields.add("SpecificationFilters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Brands");
    openapiRequiredFields.add("CategoriesTrees");
    openapiRequiredFields.add("Departments");
    openapiRequiredFields.add("SpecificationFilters");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Example2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Example2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Example2 is not found in the empty JSON string", Example2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Example2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Example2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Example2.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("Brands").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Brands` to be an array in the JSON string but got `%s`", jsonObj.get("Brands").toString()));
      }

      JsonArray jsonArraybrands = jsonObj.getAsJsonArray("Brands");
      // validate the required field `Brands` (array)
      for (int i = 0; i < jsonArraybrands.size(); i++) {
        Brand.validateJsonElement(jsonArraybrands.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("CategoriesTrees").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CategoriesTrees` to be an array in the JSON string but got `%s`", jsonObj.get("CategoriesTrees").toString()));
      }

      JsonArray jsonArraycategoriesTrees = jsonObj.getAsJsonArray("CategoriesTrees");
      // validate the required field `CategoriesTrees` (array)
      for (int i = 0; i < jsonArraycategoriesTrees.size(); i++) {
        CategoriesTree.validateJsonElement(jsonArraycategoriesTrees.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("Departments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Departments` to be an array in the JSON string but got `%s`", jsonObj.get("Departments").toString()));
      }

      JsonArray jsonArraydepartments = jsonObj.getAsJsonArray("Departments");
      // validate the required field `Departments` (array)
      for (int i = 0; i < jsonArraydepartments.size(); i++) {
        Department.validateJsonElement(jsonArraydepartments.get(i));
      };
      // validate the required field `SpecificationFilters`
      SpecificationFilters.validateJsonElement(jsonObj.get("SpecificationFilters"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Example2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Example2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Example2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Example2.class));

       return (TypeAdapter<T>) new TypeAdapter<Example2>() {
           @Override
           public void write(JsonWriter out, Example2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Example2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Example2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Example2
   * @throws IOException if the JSON string is invalid with respect to Example2
   */
  public static Example2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Example2.class);
  }

  /**
   * Convert an instance of Example2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

