/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImagesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:46.427507-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImagesInner {
  public static final String SERIALIZED_NAME_IMAGE_ID = "imageId";
  @SerializedName(SERIALIZED_NAME_IMAGE_ID)
  private String imageId;

  public static final String SERIALIZED_NAME_IMAGE_LABEL = "imageLabel";
  @SerializedName(SERIALIZED_NAME_IMAGE_LABEL)
  private String imageLabel;

  public static final String SERIALIZED_NAME_IMAGE_LAST_MODIFIED = "imageLastModified";
  @SerializedName(SERIALIZED_NAME_IMAGE_LAST_MODIFIED)
  private String imageLastModified;

  public static final String SERIALIZED_NAME_IMAGE_TAG = "imageTag";
  @SerializedName(SERIALIZED_NAME_IMAGE_TAG)
  private String imageTag;

  public static final String SERIALIZED_NAME_IMAGE_TEXT = "imageText";
  @SerializedName(SERIALIZED_NAME_IMAGE_TEXT)
  private String imageText;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public ImagesInner() {
  }

  public ImagesInner imageId(String imageId) {
    this.imageId = imageId;
    return this;
  }

  /**
   * Image ID.
   * @return imageId
   */
  @javax.annotation.Nonnull
  public String getImageId() {
    return imageId;
  }

  public void setImageId(String imageId) {
    this.imageId = imageId;
  }


  public ImagesInner imageLabel(String imageLabel) {
    this.imageLabel = imageLabel;
    return this;
  }

  /**
   * Image label.
   * @return imageLabel
   */
  @javax.annotation.Nonnull
  public String getImageLabel() {
    return imageLabel;
  }

  public void setImageLabel(String imageLabel) {
    this.imageLabel = imageLabel;
  }


  public ImagesInner imageLastModified(String imageLastModified) {
    this.imageLastModified = imageLastModified;
    return this;
  }

  /**
   * Date and time of the last update of the image.
   * @return imageLastModified
   */
  @javax.annotation.Nonnull
  public String getImageLastModified() {
    return imageLastModified;
  }

  public void setImageLastModified(String imageLastModified) {
    this.imageLastModified = imageLastModified;
  }


  public ImagesInner imageTag(String imageTag) {
    this.imageTag = imageTag;
    return this;
  }

  /**
   * Image tag.
   * @return imageTag
   */
  @javax.annotation.Nonnull
  public String getImageTag() {
    return imageTag;
  }

  public void setImageTag(String imageTag) {
    this.imageTag = imageTag;
  }


  public ImagesInner imageText(String imageText) {
    this.imageText = imageText;
    return this;
  }

  /**
   * Image text.
   * @return imageText
   */
  @javax.annotation.Nullable
  public String getImageText() {
    return imageText;
  }

  public void setImageText(String imageText) {
    this.imageText = imageText;
  }


  public ImagesInner imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Image URL.
   * @return imageUrl
   */
  @javax.annotation.Nonnull
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImagesInner imagesInner = (ImagesInner) o;
    return Objects.equals(this.imageId, imagesInner.imageId) &&
        Objects.equals(this.imageLabel, imagesInner.imageLabel) &&
        Objects.equals(this.imageLastModified, imagesInner.imageLastModified) &&
        Objects.equals(this.imageTag, imagesInner.imageTag) &&
        Objects.equals(this.imageText, imagesInner.imageText) &&
        Objects.equals(this.imageUrl, imagesInner.imageUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageId, imageLabel, imageLastModified, imageTag, imageText, imageUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImagesInner {\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    imageLabel: ").append(toIndentedString(imageLabel)).append("\n");
    sb.append("    imageLastModified: ").append(toIndentedString(imageLastModified)).append("\n");
    sb.append("    imageTag: ").append(toIndentedString(imageTag)).append("\n");
    sb.append("    imageText: ").append(toIndentedString(imageText)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("imageId");
    openapiFields.add("imageLabel");
    openapiFields.add("imageLastModified");
    openapiFields.add("imageTag");
    openapiFields.add("imageText");
    openapiFields.add("imageUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("imageId");
    openapiRequiredFields.add("imageLabel");
    openapiRequiredFields.add("imageLastModified");
    openapiRequiredFields.add("imageTag");
    openapiRequiredFields.add("imageText");
    openapiRequiredFields.add("imageUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImagesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImagesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImagesInner is not found in the empty JSON string", ImagesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImagesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImagesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImagesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("imageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageId").toString()));
      }
      if (!jsonObj.get("imageLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageLabel").toString()));
      }
      if (!jsonObj.get("imageLastModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageLastModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageLastModified").toString()));
      }
      if (!jsonObj.get("imageTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageTag").toString()));
      }
      if ((jsonObj.get("imageText") != null && !jsonObj.get("imageText").isJsonNull()) && !jsonObj.get("imageText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageText").toString()));
      }
      if (!jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImagesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImagesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImagesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImagesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ImagesInner>() {
           @Override
           public void write(JsonWriter out, ImagesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImagesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImagesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImagesInner
   * @throws IOException if the JSON string is invalid with respect to ImagesInner
   */
  public static ImagesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImagesInner.class);
  }

  /**
   * Convert an instance of ImagesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

