/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ProductSearchWhoBoughtAlsoBought200ResponseInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CrossSellingApi
 */
@Disabled
public class CrossSellingApiTest {

    private final CrossSellingApi api = new CrossSellingApi();

    /**
     * Get Product Search of Accessories
     *
     * Retrieves general information about the product&#39;s accessories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productSearchAccessoriesTest() throws ApiException {
        String accept = null;
        String contentType = null;
        Integer productId = null;
        api.productSearchAccessories(accept, contentType, productId);
        // TODO: test validations
    }

    /**
     * Get Product Search of Show Together
     *
     * Retrieves general information about the products that are show together with the product in question.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productSearchShowTogetherTest() throws ApiException {
        String accept = null;
        String contentType = null;
        Integer productId = null;
        api.productSearchShowTogether(accept, contentType, productId);
        // TODO: test validations
    }

    /**
     * Get Product Search of Similars
     *
     * Retrieves general information about related product searches.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productSearchSimilarsTest() throws ApiException {
        String accept = null;
        String contentType = null;
        Integer productId = null;
        api.productSearchSimilars(accept, contentType, productId);
        // TODO: test validations
    }

    /**
     * Get Product Search of Suggestions
     *
     * Retrieves general information about other product suggestions related to the product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productSearchSuggestionsTest() throws ApiException {
        String accept = null;
        String contentType = null;
        Integer productId = null;
        api.productSearchSuggestions(accept, contentType, productId);
        // TODO: test validations
    }

    /**
     * Get Product Search of Who Bought Also Bought
     *
     * Retrieves general information about other related products that the user also bought.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productSearchWhoBoughtAlsoBoughtTest() throws ApiException {
        String accept = null;
        String contentType = null;
        String productId = null;
        List<ProductSearchWhoBoughtAlsoBought200ResponseInner> response = api.productSearchWhoBoughtAlsoBought(accept, contentType, productId);
        // TODO: test validations
    }

    /**
     * Get Product Search of Who Saw Also Bought
     *
     * Retrieves general information about other related products that the users saw and also bought.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productSearchWhoSawAlsoBoughtTest() throws ApiException {
        String accept = null;
        String contentType = null;
        String productId = null;
        List<ProductSearchWhoBoughtAlsoBought200ResponseInner> response = api.productSearchWhoSawAlsoBought(accept, contentType, productId);
        // TODO: test validations
    }

    /**
     * Get Product Search of Who Saw Also Saw
     *
     * Retrieves general information about other related products that the users also saw.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productSearchWhoSawAlsoSawTest() throws ApiException {
        String accept = null;
        String contentType = null;
        Integer productId = null;
        List<ProductSearchWhoBoughtAlsoBought200ResponseInner> response = api.productSearchWhoSawAlsoSaw(accept, contentType, productId);
        // TODO: test validations
    }

}
