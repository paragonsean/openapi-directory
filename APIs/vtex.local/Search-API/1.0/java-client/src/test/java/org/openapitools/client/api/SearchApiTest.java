/*
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ProductSearchWhoBoughtAlsoBought200ResponseInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SearchApi
 */
@Disabled
public class SearchApiTest {

    private final SearchApi api = new SearchApi();

    /**
     * Search for Products
     *
     * Retrieves general information about the products related to the term searched.   This is the main search used by the store. The user can type anything to be searched.      For example, if they search for a \&quot;decanter\&quot;, this is the URL: &#x60;https://{{accountName}}.{{environment}}.com.br/api/catalog_system/pub/products/search/decanter&#x60;.     Note that maybe the response can be HTTP 200 or 206, 206 means that it&#39;s a partial content response.    If it is a 206 take a look at the Headers, will be an entry called resources. E.g.: resources → 0-9/19. This means that the response is showing items from 0 to 9, 10 items, but there were 19 items found. See more information at the paging route example.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productSearchTest() throws ApiException {
        String accept = null;
        String contentType = null;
        String search = null;
        List<ProductSearchWhoBoughtAlsoBought200ResponseInner> response = api.productSearch(accept, contentType, search);
        // TODO: test validations
    }

    /**
     * Search for Products with Filter, Order and Pagination
     *
     * Retrieves general information about the store products. This information can be filtered and ordered by a number of options. It also can be paginated, filtered and ordered.     ## Filters      - **Filter by full text** - &#x60;ft&#x3D;{searchWord}&#x60;    E.g.: &#x60;ft&#x3D;television&#x60;    - **Filter by category** - &#x60;fq&#x3D;C:/{a}/{b}&#x60;    &#x60;{a}&#x60; and &#x60;{b}&#x60; are Category IDs     E.g.: &#x60;fq&#x3D;C:/1000041/1000049/&#x60;    - **Filter by brand** - &#x60;fq&#x3D;B:/{a}/{b}&#x60;    &#x60;{a}&#x60; and &#x60;{b}&#x60; are Brand IDs  E.g.: &#x60;fq&#x3D;B:/189385/189387/&#x60;    - **Filter by specification** - &#x60;fq&#x3D;specificationFilter_{a}:{b}&#x60;    &#x60;{a}&#x60; is the specification ID  &#x60;{b}&#x60; is the specification value  E.g.: To filter products where the color is Blue, find the specification ID for color. Suppose it is 123, then the query will be: &#x60;fq&#x3D;specificationFilter_123:Blue&#x60;    - **Filter by price range** - &#x60;fq&#x3D;P:[{a} TO {b}]&#x60;    &#x60;{a}&#x60;  is the minimum price \&quot;from\&quot;  &#x60;{b}&#x60; is the highest price \&quot;to\&quot;    E.g.: &#x60;fq&#x3D;P:[0 TO 20]&#x60; will search products between 0.00 and 20.00.      - **Filter by collection** - &#x60;fq&#x3D;productClusterIds:{{productClusterId}}&#x60;   &#x60;productClusterId&#x60; is the same as &#x60;collectionId&#x60;    For more information about collections, read [Creating a product collection](https://help.vtex.com/en/tutorial/creating-a-product-collection).    - **Filter by product ID** - &#x60;fq&#x3D;productId:{{productId}}&#x60;    - **Filter by SKU ID** - &#x60;fq&#x3D;skuId:{{skuId}}&#x60;    - **Filter by referenceId** - &#x60;fq&#x3D;alternateIds_RefId:{{referenceId}}&#x60;    - **Filter by EAN13** - &#x60;fq&#x3D;alternateIds_Ean:{{ean13}}&#x60;    - **Filter by availability at a specific sales channel** - &#x60;fq&#x3D;isAvailablePerSalesChannel_{{sc}}:{{bool}}&#x60;    &#x60;{{sc}}&#x60; is the desired sales channel    &#x60;{{bool}}&#x60; is true ou false, 1 or 0.    E.g.: seaching available products for the sales channel 4 would be &#x60;fq&#x3D;isAvailablePerSalesChannel_4:1&#x60;    - **Filter by available at a specific seller** - &#x60;fq&#x3D;sellerId:{{sellerId}}&#x60;  The search does not include White Label Sellers.    ## Pagination    - **Initial item number** - &#x60;_from&#x3D;{{first}}&#x60;  - **Final item number** - &#x60;_to&#x3D;{{last}}&#x60;    &gt;⚠️ This endpoint returns a maximum of 50 items per response, so the difference between &#x60;_from&#x60; and &#x60;_to&#x60; should not exceed this number. The result order is descending, from the highest product ID to the lowest.    ## Sorting    - **Price**    &#x60;O&#x3D;OrderByPriceDESC&#x60;    &#x60;O&#x3D;OrderByPriceASC&#x60;    - **Top Selling Products**    &#x60;O&#x3D;OrderByTopSaleDESC&#x60;    - **Best Reviews**    &#x60;O&#x3D;OrderByReviewRateDESC&#x60;    - **Name**    &#x60;O&#x3D;OrderByNameASC&#x60;    &#x60;O&#x3D;OrderByNameDESC&#x60;    - **Release Date**    &#x60;O&#x3D;OrderByReleaseDateDESC&#x60;    - **Best Discounts**    &#x60;O&#x3D;OrderByBestDiscountDESC&#x60;    - **Score**    &#x60;O&#x3D;OrderByScoreDESC&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productSearchFilteredandOrderedTest() throws ApiException {
        String accept = null;
        String contentType = null;
        String from = null;
        String to = null;
        String ft = null;
        String fq = null;
        String O = null;
        List<ProductSearchWhoBoughtAlsoBought200ResponseInner> response = api.productSearchFilteredandOrdered(accept, contentType, from, to, ft, fq, O);
        // TODO: test validations
    }

    /**
     * Search Product by Product URL
     *
     * Retrieves general information about the product of the URL you searched for.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchbyproducturlTest() throws ApiException {
        String accept = null;
        String contentType = null;
        String productTextLink = null;
        List<ProductSearchWhoBoughtAlsoBought200ResponseInner> response = api.searchbyproducturl(accept, contentType, productTextLink);
        // TODO: test validations
    }

}
