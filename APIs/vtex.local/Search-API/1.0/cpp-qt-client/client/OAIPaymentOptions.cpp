/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentOptions::OAIPaymentOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentOptions::OAIPaymentOptions() {
    this->initializeModel();
}

OAIPaymentOptions::~OAIPaymentOptions() {}

void OAIPaymentOptions::initializeModel() {

    m_available_accounts_isSet = false;
    m_available_accounts_isValid = false;

    m_available_tokens_isSet = false;
    m_available_tokens_isValid = false;

    m_gift_card_messages_isSet = false;
    m_gift_card_messages_isValid = false;

    m_gift_cards_isSet = false;
    m_gift_cards_isValid = false;

    m_installment_options_isSet = false;
    m_installment_options_isValid = false;

    m_payment_systems_isSet = false;
    m_payment_systems_isValid = false;

    m_payments_isSet = false;
    m_payments_isValid = false;
}

void OAIPaymentOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentOptions::fromJsonObject(QJsonObject json) {

    m_available_accounts_isValid = ::OpenAPI::fromJsonValue(m_available_accounts, json[QString("availableAccounts")]);
    m_available_accounts_isSet = !json[QString("availableAccounts")].isNull() && m_available_accounts_isValid;

    m_available_tokens_isValid = ::OpenAPI::fromJsonValue(m_available_tokens, json[QString("availableTokens")]);
    m_available_tokens_isSet = !json[QString("availableTokens")].isNull() && m_available_tokens_isValid;

    m_gift_card_messages_isValid = ::OpenAPI::fromJsonValue(m_gift_card_messages, json[QString("giftCardMessages")]);
    m_gift_card_messages_isSet = !json[QString("giftCardMessages")].isNull() && m_gift_card_messages_isValid;

    m_gift_cards_isValid = ::OpenAPI::fromJsonValue(m_gift_cards, json[QString("giftCards")]);
    m_gift_cards_isSet = !json[QString("giftCards")].isNull() && m_gift_cards_isValid;

    m_installment_options_isValid = ::OpenAPI::fromJsonValue(m_installment_options, json[QString("installmentOptions")]);
    m_installment_options_isSet = !json[QString("installmentOptions")].isNull() && m_installment_options_isValid;

    m_payment_systems_isValid = ::OpenAPI::fromJsonValue(m_payment_systems, json[QString("paymentSystems")]);
    m_payment_systems_isSet = !json[QString("paymentSystems")].isNull() && m_payment_systems_isValid;

    m_payments_isValid = ::OpenAPI::fromJsonValue(m_payments, json[QString("payments")]);
    m_payments_isSet = !json[QString("payments")].isNull() && m_payments_isValid;
}

QString OAIPaymentOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_available_accounts.size() > 0) {
        obj.insert(QString("availableAccounts"), ::OpenAPI::toJsonValue(m_available_accounts));
    }
    if (m_available_tokens.size() > 0) {
        obj.insert(QString("availableTokens"), ::OpenAPI::toJsonValue(m_available_tokens));
    }
    if (m_gift_card_messages.size() > 0) {
        obj.insert(QString("giftCardMessages"), ::OpenAPI::toJsonValue(m_gift_card_messages));
    }
    if (m_gift_cards.size() > 0) {
        obj.insert(QString("giftCards"), ::OpenAPI::toJsonValue(m_gift_cards));
    }
    if (m_installment_options.size() > 0) {
        obj.insert(QString("installmentOptions"), ::OpenAPI::toJsonValue(m_installment_options));
    }
    if (m_payment_systems.size() > 0) {
        obj.insert(QString("paymentSystems"), ::OpenAPI::toJsonValue(m_payment_systems));
    }
    if (m_payments.size() > 0) {
        obj.insert(QString("payments"), ::OpenAPI::toJsonValue(m_payments));
    }
    return obj;
}

QList<QJsonValue> OAIPaymentOptions::getAvailableAccounts() const {
    return m_available_accounts;
}
void OAIPaymentOptions::setAvailableAccounts(const QList<QJsonValue> &available_accounts) {
    m_available_accounts = available_accounts;
    m_available_accounts_isSet = true;
}

bool OAIPaymentOptions::is_available_accounts_Set() const{
    return m_available_accounts_isSet;
}

bool OAIPaymentOptions::is_available_accounts_Valid() const{
    return m_available_accounts_isValid;
}

QList<QJsonValue> OAIPaymentOptions::getAvailableTokens() const {
    return m_available_tokens;
}
void OAIPaymentOptions::setAvailableTokens(const QList<QJsonValue> &available_tokens) {
    m_available_tokens = available_tokens;
    m_available_tokens_isSet = true;
}

bool OAIPaymentOptions::is_available_tokens_Set() const{
    return m_available_tokens_isSet;
}

bool OAIPaymentOptions::is_available_tokens_Valid() const{
    return m_available_tokens_isValid;
}

QList<QJsonValue> OAIPaymentOptions::getGiftCardMessages() const {
    return m_gift_card_messages;
}
void OAIPaymentOptions::setGiftCardMessages(const QList<QJsonValue> &gift_card_messages) {
    m_gift_card_messages = gift_card_messages;
    m_gift_card_messages_isSet = true;
}

bool OAIPaymentOptions::is_gift_card_messages_Set() const{
    return m_gift_card_messages_isSet;
}

bool OAIPaymentOptions::is_gift_card_messages_Valid() const{
    return m_gift_card_messages_isValid;
}

QList<QJsonValue> OAIPaymentOptions::getGiftCards() const {
    return m_gift_cards;
}
void OAIPaymentOptions::setGiftCards(const QList<QJsonValue> &gift_cards) {
    m_gift_cards = gift_cards;
    m_gift_cards_isSet = true;
}

bool OAIPaymentOptions::is_gift_cards_Set() const{
    return m_gift_cards_isSet;
}

bool OAIPaymentOptions::is_gift_cards_Valid() const{
    return m_gift_cards_isValid;
}

QList<OAIInstallmentOptions_inner> OAIPaymentOptions::getInstallmentOptions() const {
    return m_installment_options;
}
void OAIPaymentOptions::setInstallmentOptions(const QList<OAIInstallmentOptions_inner> &installment_options) {
    m_installment_options = installment_options;
    m_installment_options_isSet = true;
}

bool OAIPaymentOptions::is_installment_options_Set() const{
    return m_installment_options_isSet;
}

bool OAIPaymentOptions::is_installment_options_Valid() const{
    return m_installment_options_isValid;
}

QList<OAIPaymentSystems_inner> OAIPaymentOptions::getPaymentSystems() const {
    return m_payment_systems;
}
void OAIPaymentOptions::setPaymentSystems(const QList<OAIPaymentSystems_inner> &payment_systems) {
    m_payment_systems = payment_systems;
    m_payment_systems_isSet = true;
}

bool OAIPaymentOptions::is_payment_systems_Set() const{
    return m_payment_systems_isSet;
}

bool OAIPaymentOptions::is_payment_systems_Valid() const{
    return m_payment_systems_isValid;
}

QList<QJsonValue> OAIPaymentOptions::getPayments() const {
    return m_payments;
}
void OAIPaymentOptions::setPayments(const QList<QJsonValue> &payments) {
    m_payments = payments;
    m_payments_isSet = true;
}

bool OAIPaymentOptions::is_payments_Set() const{
    return m_payments_isSet;
}

bool OAIPaymentOptions::is_payments_Valid() const{
    return m_payments_isValid;
}

bool OAIPaymentOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_tokens.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_card_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_cards.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_installment_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_systems.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payments.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_accounts_isValid && m_available_tokens_isValid && m_gift_card_messages_isValid && m_gift_cards_isValid && m_installment_options_isValid && m_payment_systems_isValid && m_payments_isValid && true;
}

} // namespace OpenAPI
