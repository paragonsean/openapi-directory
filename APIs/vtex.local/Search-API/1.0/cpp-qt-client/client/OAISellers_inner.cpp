/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISellers_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISellers_inner::OAISellers_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISellers_inner::OAISellers_inner() {
    this->initializeModel();
}

OAISellers_inner::~OAISellers_inner() {}

void OAISellers_inner::initializeModel() {

    m_add_to_cart_link_isSet = false;
    m_add_to_cart_link_isValid = false;

    m_commertial_offer_isSet = false;
    m_commertial_offer_isValid = false;

    m_seller_default_isSet = false;
    m_seller_default_isValid = false;

    m_seller_id_isSet = false;
    m_seller_id_isValid = false;

    m_seller_name_isSet = false;
    m_seller_name_isValid = false;
}

void OAISellers_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISellers_inner::fromJsonObject(QJsonObject json) {

    m_add_to_cart_link_isValid = ::OpenAPI::fromJsonValue(m_add_to_cart_link, json[QString("addToCartLink")]);
    m_add_to_cart_link_isSet = !json[QString("addToCartLink")].isNull() && m_add_to_cart_link_isValid;

    m_commertial_offer_isValid = ::OpenAPI::fromJsonValue(m_commertial_offer, json[QString("commertialOffer")]);
    m_commertial_offer_isSet = !json[QString("commertialOffer")].isNull() && m_commertial_offer_isValid;

    m_seller_default_isValid = ::OpenAPI::fromJsonValue(m_seller_default, json[QString("sellerDefault")]);
    m_seller_default_isSet = !json[QString("sellerDefault")].isNull() && m_seller_default_isValid;

    m_seller_id_isValid = ::OpenAPI::fromJsonValue(m_seller_id, json[QString("sellerId")]);
    m_seller_id_isSet = !json[QString("sellerId")].isNull() && m_seller_id_isValid;

    m_seller_name_isValid = ::OpenAPI::fromJsonValue(m_seller_name, json[QString("sellerName")]);
    m_seller_name_isSet = !json[QString("sellerName")].isNull() && m_seller_name_isValid;
}

QString OAISellers_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISellers_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_add_to_cart_link_isSet) {
        obj.insert(QString("addToCartLink"), ::OpenAPI::toJsonValue(m_add_to_cart_link));
    }
    if (m_commertial_offer.isSet()) {
        obj.insert(QString("commertialOffer"), ::OpenAPI::toJsonValue(m_commertial_offer));
    }
    if (m_seller_default_isSet) {
        obj.insert(QString("sellerDefault"), ::OpenAPI::toJsonValue(m_seller_default));
    }
    if (m_seller_id_isSet) {
        obj.insert(QString("sellerId"), ::OpenAPI::toJsonValue(m_seller_id));
    }
    if (m_seller_name_isSet) {
        obj.insert(QString("sellerName"), ::OpenAPI::toJsonValue(m_seller_name));
    }
    return obj;
}

QString OAISellers_inner::getAddToCartLink() const {
    return m_add_to_cart_link;
}
void OAISellers_inner::setAddToCartLink(const QString &add_to_cart_link) {
    m_add_to_cart_link = add_to_cart_link;
    m_add_to_cart_link_isSet = true;
}

bool OAISellers_inner::is_add_to_cart_link_Set() const{
    return m_add_to_cart_link_isSet;
}

bool OAISellers_inner::is_add_to_cart_link_Valid() const{
    return m_add_to_cart_link_isValid;
}

OAICommertialOffer OAISellers_inner::getCommertialOffer() const {
    return m_commertial_offer;
}
void OAISellers_inner::setCommertialOffer(const OAICommertialOffer &commertial_offer) {
    m_commertial_offer = commertial_offer;
    m_commertial_offer_isSet = true;
}

bool OAISellers_inner::is_commertial_offer_Set() const{
    return m_commertial_offer_isSet;
}

bool OAISellers_inner::is_commertial_offer_Valid() const{
    return m_commertial_offer_isValid;
}

bool OAISellers_inner::isSellerDefault() const {
    return m_seller_default;
}
void OAISellers_inner::setSellerDefault(const bool &seller_default) {
    m_seller_default = seller_default;
    m_seller_default_isSet = true;
}

bool OAISellers_inner::is_seller_default_Set() const{
    return m_seller_default_isSet;
}

bool OAISellers_inner::is_seller_default_Valid() const{
    return m_seller_default_isValid;
}

QString OAISellers_inner::getSellerId() const {
    return m_seller_id;
}
void OAISellers_inner::setSellerId(const QString &seller_id) {
    m_seller_id = seller_id;
    m_seller_id_isSet = true;
}

bool OAISellers_inner::is_seller_id_Set() const{
    return m_seller_id_isSet;
}

bool OAISellers_inner::is_seller_id_Valid() const{
    return m_seller_id_isValid;
}

QString OAISellers_inner::getSellerName() const {
    return m_seller_name;
}
void OAISellers_inner::setSellerName(const QString &seller_name) {
    m_seller_name = seller_name;
    m_seller_name_isSet = true;
}

bool OAISellers_inner::is_seller_name_Set() const{
    return m_seller_name_isSet;
}

bool OAISellers_inner::is_seller_name_Valid() const{
    return m_seller_name_isValid;
}

bool OAISellers_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_to_cart_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commertial_offer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISellers_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_add_to_cart_link_isValid && m_commertial_offer_isValid && m_seller_default_isValid && m_seller_id_isValid && m_seller_name_isValid && true;
}

} // namespace OpenAPI
