/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem::OAIItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem::OAIItem() {
    this->initializeModel();
}

OAIItem::~OAIItem() {}

void OAIItem::initializeModel() {

    m_cor_isSet = false;
    m_cor_isValid = false;

    m_tamanho_isSet = false;
    m_tamanho_isValid = false;

    m_complement_name_isSet = false;
    m_complement_name_isValid = false;

    m_ean_isSet = false;
    m_ean_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_measurement_unit_isSet = false;
    m_measurement_unit_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_name_complete_isSet = false;
    m_name_complete_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_sellers_isSet = false;
    m_sellers_isValid = false;

    m_unit_multiplier_isSet = false;
    m_unit_multiplier_isValid = false;

    m_variations_isSet = false;
    m_variations_isValid = false;
}

void OAIItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem::fromJsonObject(QJsonObject json) {

    m_cor_isValid = ::OpenAPI::fromJsonValue(m_cor, json[QString("COR")]);
    m_cor_isSet = !json[QString("COR")].isNull() && m_cor_isValid;

    m_tamanho_isValid = ::OpenAPI::fromJsonValue(m_tamanho, json[QString("TAMANHO")]);
    m_tamanho_isSet = !json[QString("TAMANHO")].isNull() && m_tamanho_isValid;

    m_complement_name_isValid = ::OpenAPI::fromJsonValue(m_complement_name, json[QString("complementName")]);
    m_complement_name_isSet = !json[QString("complementName")].isNull() && m_complement_name_isValid;

    m_ean_isValid = ::OpenAPI::fromJsonValue(m_ean, json[QString("ean")]);
    m_ean_isSet = !json[QString("ean")].isNull() && m_ean_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_measurement_unit_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit, json[QString("measurementUnit")]);
    m_measurement_unit_isSet = !json[QString("measurementUnit")].isNull() && m_measurement_unit_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_name_complete_isValid = ::OpenAPI::fromJsonValue(m_name_complete, json[QString("nameComplete")]);
    m_name_complete_isSet = !json[QString("nameComplete")].isNull() && m_name_complete_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("referenceId")]);
    m_reference_id_isSet = !json[QString("referenceId")].isNull() && m_reference_id_isValid;

    m_sellers_isValid = ::OpenAPI::fromJsonValue(m_sellers, json[QString("sellers")]);
    m_sellers_isSet = !json[QString("sellers")].isNull() && m_sellers_isValid;

    m_unit_multiplier_isValid = ::OpenAPI::fromJsonValue(m_unit_multiplier, json[QString("unitMultiplier")]);
    m_unit_multiplier_isSet = !json[QString("unitMultiplier")].isNull() && m_unit_multiplier_isValid;

    m_variations_isValid = ::OpenAPI::fromJsonValue(m_variations, json[QString("variations")]);
    m_variations_isSet = !json[QString("variations")].isNull() && m_variations_isValid;
}

QString OAIItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem::asJsonObject() const {
    QJsonObject obj;
    if (m_cor.size() > 0) {
        obj.insert(QString("COR"), ::OpenAPI::toJsonValue(m_cor));
    }
    if (m_tamanho.size() > 0) {
        obj.insert(QString("TAMANHO"), ::OpenAPI::toJsonValue(m_tamanho));
    }
    if (m_complement_name_isSet) {
        obj.insert(QString("complementName"), ::OpenAPI::toJsonValue(m_complement_name));
    }
    if (m_ean_isSet) {
        obj.insert(QString("ean"), ::OpenAPI::toJsonValue(m_ean));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_measurement_unit_isSet) {
        obj.insert(QString("measurementUnit"), ::OpenAPI::toJsonValue(m_measurement_unit));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_name_complete_isSet) {
        obj.insert(QString("nameComplete"), ::OpenAPI::toJsonValue(m_name_complete));
    }
    if (m_reference_id.size() > 0) {
        obj.insert(QString("referenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_sellers.size() > 0) {
        obj.insert(QString("sellers"), ::OpenAPI::toJsonValue(m_sellers));
    }
    if (m_unit_multiplier_isSet) {
        obj.insert(QString("unitMultiplier"), ::OpenAPI::toJsonValue(m_unit_multiplier));
    }
    if (m_variations.size() > 0) {
        obj.insert(QString("variations"), ::OpenAPI::toJsonValue(m_variations));
    }
    return obj;
}

QList<QString> OAIItem::getCor() const {
    return m_cor;
}
void OAIItem::setCor(const QList<QString> &cor) {
    m_cor = cor;
    m_cor_isSet = true;
}

bool OAIItem::is_cor_Set() const{
    return m_cor_isSet;
}

bool OAIItem::is_cor_Valid() const{
    return m_cor_isValid;
}

QList<QString> OAIItem::getTamanho() const {
    return m_tamanho;
}
void OAIItem::setTamanho(const QList<QString> &tamanho) {
    m_tamanho = tamanho;
    m_tamanho_isSet = true;
}

bool OAIItem::is_tamanho_Set() const{
    return m_tamanho_isSet;
}

bool OAIItem::is_tamanho_Valid() const{
    return m_tamanho_isValid;
}

QString OAIItem::getComplementName() const {
    return m_complement_name;
}
void OAIItem::setComplementName(const QString &complement_name) {
    m_complement_name = complement_name;
    m_complement_name_isSet = true;
}

bool OAIItem::is_complement_name_Set() const{
    return m_complement_name_isSet;
}

bool OAIItem::is_complement_name_Valid() const{
    return m_complement_name_isValid;
}

QString OAIItem::getEan() const {
    return m_ean;
}
void OAIItem::setEan(const QString &ean) {
    m_ean = ean;
    m_ean_isSet = true;
}

bool OAIItem::is_ean_Set() const{
    return m_ean_isSet;
}

bool OAIItem::is_ean_Valid() const{
    return m_ean_isValid;
}

QList<OAIImage> OAIItem::getImages() const {
    return m_images;
}
void OAIItem::setImages(const QList<OAIImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIItem::is_images_Set() const{
    return m_images_isSet;
}

bool OAIItem::is_images_Valid() const{
    return m_images_isValid;
}

QString OAIItem::getItemId() const {
    return m_item_id;
}
void OAIItem::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIItem::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIItem::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QString OAIItem::getMeasurementUnit() const {
    return m_measurement_unit;
}
void OAIItem::setMeasurementUnit(const QString &measurement_unit) {
    m_measurement_unit = measurement_unit;
    m_measurement_unit_isSet = true;
}

bool OAIItem::is_measurement_unit_Set() const{
    return m_measurement_unit_isSet;
}

bool OAIItem::is_measurement_unit_Valid() const{
    return m_measurement_unit_isValid;
}

QString OAIItem::getName() const {
    return m_name;
}
void OAIItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIItem::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIItem::getNameComplete() const {
    return m_name_complete;
}
void OAIItem::setNameComplete(const QString &name_complete) {
    m_name_complete = name_complete;
    m_name_complete_isSet = true;
}

bool OAIItem::is_name_complete_Set() const{
    return m_name_complete_isSet;
}

bool OAIItem::is_name_complete_Valid() const{
    return m_name_complete_isValid;
}

QList<OAIReferenceId> OAIItem::getReferenceId() const {
    return m_reference_id;
}
void OAIItem::setReferenceId(const QList<OAIReferenceId> &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIItem::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIItem::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QList<OAISeller> OAIItem::getSellers() const {
    return m_sellers;
}
void OAIItem::setSellers(const QList<OAISeller> &sellers) {
    m_sellers = sellers;
    m_sellers_isSet = true;
}

bool OAIItem::is_sellers_Set() const{
    return m_sellers_isSet;
}

bool OAIItem::is_sellers_Valid() const{
    return m_sellers_isValid;
}

double OAIItem::getUnitMultiplier() const {
    return m_unit_multiplier;
}
void OAIItem::setUnitMultiplier(const double &unit_multiplier) {
    m_unit_multiplier = unit_multiplier;
    m_unit_multiplier_isSet = true;
}

bool OAIItem::is_unit_multiplier_Set() const{
    return m_unit_multiplier_isSet;
}

bool OAIItem::is_unit_multiplier_Valid() const{
    return m_unit_multiplier_isValid;
}

QList<QString> OAIItem::getVariations() const {
    return m_variations;
}
void OAIItem::setVariations(const QList<QString> &variations) {
    m_variations = variations;
    m_variations_isSet = true;
}

bool OAIItem::is_variations_Set() const{
    return m_variations_isSet;
}

bool OAIItem::is_variations_Valid() const{
    return m_variations_isValid;
}

bool OAIItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cor.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tamanho.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_complement_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sellers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_complement_name_isValid && m_ean_isValid && m_images_isValid && m_item_id_isValid && m_measurement_unit_isValid && m_name_isValid && m_name_complete_isValid && m_sellers_isValid && m_unit_multiplier_isValid && true;
}

} // namespace OpenAPI
