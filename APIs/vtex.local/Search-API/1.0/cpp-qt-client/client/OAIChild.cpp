/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChild.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChild::OAIChild(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChild::OAIChild() {
    this->initializeModel();
}

OAIChild::~OAIChild() {}

void OAIChild::initializeModel() {

    m_children_isSet = false;
    m_children_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;
}

void OAIChild::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChild::fromJsonObject(QJsonObject json) {

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("Children")]);
    m_children_isSet = !json[QString("Children")].isNull() && m_children_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("Link")]);
    m_link_isSet = !json[QString("Link")].isNull() && m_link_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("Quantity")]);
    m_quantity_isSet = !json[QString("Quantity")].isNull() && m_quantity_isValid;
}

QString OAIChild::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChild::asJsonObject() const {
    QJsonObject obj;
    if (m_children.size() > 0) {
        obj.insert(QString("Children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_link_isSet) {
        obj.insert(QString("Link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("Quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    return obj;
}

QList<OAIChild1> OAIChild::getChildren() const {
    return m_children;
}
void OAIChild::setChildren(const QList<OAIChild1> &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAIChild::is_children_Set() const{
    return m_children_isSet;
}

bool OAIChild::is_children_Valid() const{
    return m_children_isValid;
}

QString OAIChild::getLink() const {
    return m_link;
}
void OAIChild::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIChild::is_link_Set() const{
    return m_link_isSet;
}

bool OAIChild::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIChild::getName() const {
    return m_name;
}
void OAIChild::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIChild::is_name_Set() const{
    return m_name_isSet;
}

bool OAIChild::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIChild::getQuantity() const {
    return m_quantity;
}
void OAIChild::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIChild::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIChild::is_quantity_Valid() const{
    return m_quantity_isValid;
}

bool OAIChild::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_children.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChild::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_children_isValid && m_link_isValid && m_name_isValid && m_quantity_isValid && true;
}

} // namespace OpenAPI
