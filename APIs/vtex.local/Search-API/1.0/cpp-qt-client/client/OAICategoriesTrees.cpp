/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoriesTrees.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoriesTrees::OAICategoriesTrees(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoriesTrees::OAICategoriesTrees() {
    this->initializeModel();
}

OAICategoriesTrees::~OAICategoriesTrees() {}

void OAICategoriesTrees::initializeModel() {

    m_displayed_items_isSet = false;
    m_displayed_items_isValid = false;

    m_total_items_isSet = false;
    m_total_items_isValid = false;
}

void OAICategoriesTrees::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategoriesTrees::fromJsonObject(QJsonObject json) {

    m_displayed_items_isValid = ::OpenAPI::fromJsonValue(m_displayed_items, json[QString("DisplayedItems")]);
    m_displayed_items_isSet = !json[QString("DisplayedItems")].isNull() && m_displayed_items_isValid;

    m_total_items_isValid = ::OpenAPI::fromJsonValue(m_total_items, json[QString("TotalItems")]);
    m_total_items_isSet = !json[QString("TotalItems")].isNull() && m_total_items_isValid;
}

QString OAICategoriesTrees::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategoriesTrees::asJsonObject() const {
    QJsonObject obj;
    if (m_displayed_items_isSet) {
        obj.insert(QString("DisplayedItems"), ::OpenAPI::toJsonValue(m_displayed_items));
    }
    if (m_total_items_isSet) {
        obj.insert(QString("TotalItems"), ::OpenAPI::toJsonValue(m_total_items));
    }
    return obj;
}

qint32 OAICategoriesTrees::getDisplayedItems() const {
    return m_displayed_items;
}
void OAICategoriesTrees::setDisplayedItems(const qint32 &displayed_items) {
    m_displayed_items = displayed_items;
    m_displayed_items_isSet = true;
}

bool OAICategoriesTrees::is_displayed_items_Set() const{
    return m_displayed_items_isSet;
}

bool OAICategoriesTrees::is_displayed_items_Valid() const{
    return m_displayed_items_isValid;
}

qint32 OAICategoriesTrees::getTotalItems() const {
    return m_total_items;
}
void OAICategoriesTrees::setTotalItems(const qint32 &total_items) {
    m_total_items = total_items;
    m_total_items_isSet = true;
}

bool OAICategoriesTrees::is_total_items_Set() const{
    return m_total_items_isSet;
}

bool OAICategoriesTrees::is_total_items_Valid() const{
    return m_total_items_isValid;
}

bool OAICategoriesTrees::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_displayed_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_items_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategoriesTrees::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_displayed_items_isValid && m_total_items_isValid && true;
}

} // namespace OpenAPI
