/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOffersPerSalesChannel_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOffersPerSalesChannel_inner::OAIOffersPerSalesChannel_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOffersPerSalesChannel_inner::OAIOffersPerSalesChannel_inner() {
    this->initializeModel();
}

OAIOffersPerSalesChannel_inner::~OAIOffersPerSalesChannel_inner() {}

void OAIOffersPerSalesChannel_inner::initializeModel() {

    m_available_quantity_isSet = false;
    m_available_quantity_isValid = false;

    m_is_available_isSet = false;
    m_is_available_isValid = false;

    m_list_price_isSet = false;
    m_list_price_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_without_discount_isSet = false;
    m_price_without_discount_isValid = false;

    m_sale_channel_isSet = false;
    m_sale_channel_isValid = false;
}

void OAIOffersPerSalesChannel_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOffersPerSalesChannel_inner::fromJsonObject(QJsonObject json) {

    m_available_quantity_isValid = ::OpenAPI::fromJsonValue(m_available_quantity, json[QString("AvailableQuantity")]);
    m_available_quantity_isSet = !json[QString("AvailableQuantity")].isNull() && m_available_quantity_isValid;

    m_is_available_isValid = ::OpenAPI::fromJsonValue(m_is_available, json[QString("IsAvailable")]);
    m_is_available_isSet = !json[QString("IsAvailable")].isNull() && m_is_available_isValid;

    m_list_price_isValid = ::OpenAPI::fromJsonValue(m_list_price, json[QString("ListPrice")]);
    m_list_price_isSet = !json[QString("ListPrice")].isNull() && m_list_price_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("Price")]);
    m_price_isSet = !json[QString("Price")].isNull() && m_price_isValid;

    m_price_without_discount_isValid = ::OpenAPI::fromJsonValue(m_price_without_discount, json[QString("PriceWithoutDiscount")]);
    m_price_without_discount_isSet = !json[QString("PriceWithoutDiscount")].isNull() && m_price_without_discount_isValid;

    m_sale_channel_isValid = ::OpenAPI::fromJsonValue(m_sale_channel, json[QString("SaleChannel")]);
    m_sale_channel_isSet = !json[QString("SaleChannel")].isNull() && m_sale_channel_isValid;
}

QString OAIOffersPerSalesChannel_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOffersPerSalesChannel_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_available_quantity_isSet) {
        obj.insert(QString("AvailableQuantity"), ::OpenAPI::toJsonValue(m_available_quantity));
    }
    if (m_is_available_isSet) {
        obj.insert(QString("IsAvailable"), ::OpenAPI::toJsonValue(m_is_available));
    }
    if (m_list_price_isSet) {
        obj.insert(QString("ListPrice"), ::OpenAPI::toJsonValue(m_list_price));
    }
    if (m_price_isSet) {
        obj.insert(QString("Price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_without_discount_isSet) {
        obj.insert(QString("PriceWithoutDiscount"), ::OpenAPI::toJsonValue(m_price_without_discount));
    }
    if (m_sale_channel_isSet) {
        obj.insert(QString("SaleChannel"), ::OpenAPI::toJsonValue(m_sale_channel));
    }
    return obj;
}

qint32 OAIOffersPerSalesChannel_inner::getAvailableQuantity() const {
    return m_available_quantity;
}
void OAIOffersPerSalesChannel_inner::setAvailableQuantity(const qint32 &available_quantity) {
    m_available_quantity = available_quantity;
    m_available_quantity_isSet = true;
}

bool OAIOffersPerSalesChannel_inner::is_available_quantity_Set() const{
    return m_available_quantity_isSet;
}

bool OAIOffersPerSalesChannel_inner::is_available_quantity_Valid() const{
    return m_available_quantity_isValid;
}

bool OAIOffersPerSalesChannel_inner::isIsAvailable() const {
    return m_is_available;
}
void OAIOffersPerSalesChannel_inner::setIsAvailable(const bool &is_available) {
    m_is_available = is_available;
    m_is_available_isSet = true;
}

bool OAIOffersPerSalesChannel_inner::is_is_available_Set() const{
    return m_is_available_isSet;
}

bool OAIOffersPerSalesChannel_inner::is_is_available_Valid() const{
    return m_is_available_isValid;
}

double OAIOffersPerSalesChannel_inner::getListPrice() const {
    return m_list_price;
}
void OAIOffersPerSalesChannel_inner::setListPrice(const double &list_price) {
    m_list_price = list_price;
    m_list_price_isSet = true;
}

bool OAIOffersPerSalesChannel_inner::is_list_price_Set() const{
    return m_list_price_isSet;
}

bool OAIOffersPerSalesChannel_inner::is_list_price_Valid() const{
    return m_list_price_isValid;
}

double OAIOffersPerSalesChannel_inner::getPrice() const {
    return m_price;
}
void OAIOffersPerSalesChannel_inner::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIOffersPerSalesChannel_inner::is_price_Set() const{
    return m_price_isSet;
}

bool OAIOffersPerSalesChannel_inner::is_price_Valid() const{
    return m_price_isValid;
}

double OAIOffersPerSalesChannel_inner::getPriceWithoutDiscount() const {
    return m_price_without_discount;
}
void OAIOffersPerSalesChannel_inner::setPriceWithoutDiscount(const double &price_without_discount) {
    m_price_without_discount = price_without_discount;
    m_price_without_discount_isSet = true;
}

bool OAIOffersPerSalesChannel_inner::is_price_without_discount_Set() const{
    return m_price_without_discount_isSet;
}

bool OAIOffersPerSalesChannel_inner::is_price_without_discount_Valid() const{
    return m_price_without_discount_isValid;
}

qint32 OAIOffersPerSalesChannel_inner::getSaleChannel() const {
    return m_sale_channel;
}
void OAIOffersPerSalesChannel_inner::setSaleChannel(const qint32 &sale_channel) {
    m_sale_channel = sale_channel;
    m_sale_channel_isSet = true;
}

bool OAIOffersPerSalesChannel_inner::is_sale_channel_Set() const{
    return m_sale_channel_isSet;
}

bool OAIOffersPerSalesChannel_inner::is_sale_channel_Valid() const{
    return m_sale_channel_isValid;
}

bool OAIOffersPerSalesChannel_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_without_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_channel_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOffersPerSalesChannel_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_quantity_isValid && m_is_available_isValid && m_list_price_isValid && m_price_isValid && m_price_without_discount_isValid && m_sale_channel_isValid && true;
}

} // namespace OpenAPI
