/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeneratedObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeneratedObject::OAIGeneratedObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeneratedObject::OAIGeneratedObject() {
    this->initializeModel();
}

OAIGeneratedObject::~OAIGeneratedObject() {}

void OAIGeneratedObject::initializeModel() {

    m_delivery_sla_per_types_isSet = false;
    m_delivery_sla_per_types_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;
}

void OAIGeneratedObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeneratedObject::fromJsonObject(QJsonObject json) {

    m_delivery_sla_per_types_isValid = ::OpenAPI::fromJsonValue(m_delivery_sla_per_types, json[QString("DeliverySlaPerTypes")]);
    m_delivery_sla_per_types_isSet = !json[QString("DeliverySlaPerTypes")].isNull() && m_delivery_sla_per_types_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;
}

QString OAIGeneratedObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeneratedObject::asJsonObject() const {
    QJsonObject obj;
    if (m_delivery_sla_per_types.size() > 0) {
        obj.insert(QString("DeliverySlaPerTypes"), ::OpenAPI::toJsonValue(m_delivery_sla_per_types));
    }
    if (m_region.isSet()) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    return obj;
}

QList<OAIDeliverySlaPerType> OAIGeneratedObject::getDeliverySlaPerTypes() const {
    return m_delivery_sla_per_types;
}
void OAIGeneratedObject::setDeliverySlaPerTypes(const QList<OAIDeliverySlaPerType> &delivery_sla_per_types) {
    m_delivery_sla_per_types = delivery_sla_per_types;
    m_delivery_sla_per_types_isSet = true;
}

bool OAIGeneratedObject::is_delivery_sla_per_types_Set() const{
    return m_delivery_sla_per_types_isSet;
}

bool OAIGeneratedObject::is_delivery_sla_per_types_Valid() const{
    return m_delivery_sla_per_types_isValid;
}

OAIRegion OAIGeneratedObject::getRegion() const {
    return m_region;
}
void OAIGeneratedObject::setRegion(const OAIRegion &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIGeneratedObject::is_region_Set() const{
    return m_region_isSet;
}

bool OAIGeneratedObject::is_region_Valid() const{
    return m_region_isValid;
}

bool OAIGeneratedObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivery_sla_per_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_region.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeneratedObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_delivery_sla_per_types_isValid && m_region_isValid && true;
}

} // namespace OpenAPI
