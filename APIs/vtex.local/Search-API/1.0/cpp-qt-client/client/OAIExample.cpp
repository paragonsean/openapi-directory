/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExample.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExample::OAIExample(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExample::OAIExample() {
    this->initializeModel();
}

OAIExample::~OAIExample() {}

void OAIExample::initializeModel() {

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_link_text_isSet = false;
    m_link_text_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_product_name_isSet = false;
    m_product_name_isValid = false;

    m_product_reference_isSet = false;
    m_product_reference_isValid = false;
}

void OAIExample::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExample::fromJsonObject(QJsonObject json) {

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_link_text_isValid = ::OpenAPI::fromJsonValue(m_link_text, json[QString("linkText")]);
    m_link_text_isSet = !json[QString("linkText")].isNull() && m_link_text_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_product_name_isValid = ::OpenAPI::fromJsonValue(m_product_name, json[QString("productName")]);
    m_product_name_isSet = !json[QString("productName")].isNull() && m_product_name_isValid;

    m_product_reference_isValid = ::OpenAPI::fromJsonValue(m_product_reference, json[QString("productReference")]);
    m_product_reference_isSet = !json[QString("productReference")].isNull() && m_product_reference_isValid;
}

QString OAIExample::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExample::asJsonObject() const {
    QJsonObject obj;
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_link_text_isSet) {
        obj.insert(QString("linkText"), ::OpenAPI::toJsonValue(m_link_text));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_product_name_isSet) {
        obj.insert(QString("productName"), ::OpenAPI::toJsonValue(m_product_name));
    }
    if (m_product_reference_isSet) {
        obj.insert(QString("productReference"), ::OpenAPI::toJsonValue(m_product_reference));
    }
    return obj;
}

QString OAIExample::getBrand() const {
    return m_brand;
}
void OAIExample::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIExample::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIExample::is_brand_Valid() const{
    return m_brand_isValid;
}

QList<QString> OAIExample::getCategories() const {
    return m_categories;
}
void OAIExample::setCategories(const QList<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIExample::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIExample::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIExample::getDescription() const {
    return m_description;
}
void OAIExample::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIExample::is_description_Set() const{
    return m_description_isSet;
}

bool OAIExample::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIItem> OAIExample::getItems() const {
    return m_items;
}
void OAIExample::setItems(const QList<OAIItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIExample::is_items_Set() const{
    return m_items_isSet;
}

bool OAIExample::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIExample::getLink() const {
    return m_link;
}
void OAIExample::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIExample::is_link_Set() const{
    return m_link_isSet;
}

bool OAIExample::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIExample::getLinkText() const {
    return m_link_text;
}
void OAIExample::setLinkText(const QString &link_text) {
    m_link_text = link_text;
    m_link_text_isSet = true;
}

bool OAIExample::is_link_text_Set() const{
    return m_link_text_isSet;
}

bool OAIExample::is_link_text_Valid() const{
    return m_link_text_isValid;
}

QString OAIExample::getProductId() const {
    return m_product_id;
}
void OAIExample::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIExample::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIExample::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIExample::getProductName() const {
    return m_product_name;
}
void OAIExample::setProductName(const QString &product_name) {
    m_product_name = product_name;
    m_product_name_isSet = true;
}

bool OAIExample::is_product_name_Set() const{
    return m_product_name_isSet;
}

bool OAIExample::is_product_name_Valid() const{
    return m_product_name_isValid;
}

QString OAIExample::getProductReference() const {
    return m_product_reference;
}
void OAIExample::setProductReference(const QString &product_reference) {
    m_product_reference = product_reference;
    m_product_reference_isSet = true;
}

bool OAIExample::is_product_reference_Set() const{
    return m_product_reference_isSet;
}

bool OAIExample::is_product_reference_Valid() const{
    return m_product_reference_isValid;
}

bool OAIExample::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExample::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_brand_isValid && m_categories_isValid && m_description_isValid && m_items_isValid && m_link_isValid && m_link_text_isValid && m_product_id_isValid && m_product_name_isValid && m_product_reference_isValid && true;
}

} // namespace OpenAPI
