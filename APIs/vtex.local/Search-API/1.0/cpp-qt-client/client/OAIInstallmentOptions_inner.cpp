/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstallmentOptions_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstallmentOptions_inner::OAIInstallmentOptions_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstallmentOptions_inner::OAIInstallmentOptions_inner() {
    this->initializeModel();
}

OAIInstallmentOptions_inner::~OAIInstallmentOptions_inner() {}

void OAIInstallmentOptions_inner::initializeModel() {

    m_bin_isSet = false;
    m_bin_isValid = false;

    m_installments_isSet = false;
    m_installments_isValid = false;

    m_payment_group_name_isSet = false;
    m_payment_group_name_isValid = false;

    m_payment_name_isSet = false;
    m_payment_name_isValid = false;

    m_payment_system_isSet = false;
    m_payment_system_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIInstallmentOptions_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstallmentOptions_inner::fromJsonObject(QJsonObject json) {

    m_bin_isValid = ::OpenAPI::fromJsonValue(m_bin, json[QString("bin")]);
    m_bin_isSet = !json[QString("bin")].isNull() && m_bin_isValid;

    m_installments_isValid = ::OpenAPI::fromJsonValue(m_installments, json[QString("installments")]);
    m_installments_isSet = !json[QString("installments")].isNull() && m_installments_isValid;

    m_payment_group_name_isValid = ::OpenAPI::fromJsonValue(m_payment_group_name, json[QString("paymentGroupName")]);
    m_payment_group_name_isSet = !json[QString("paymentGroupName")].isNull() && m_payment_group_name_isValid;

    m_payment_name_isValid = ::OpenAPI::fromJsonValue(m_payment_name, json[QString("paymentName")]);
    m_payment_name_isSet = !json[QString("paymentName")].isNull() && m_payment_name_isValid;

    m_payment_system_isValid = ::OpenAPI::fromJsonValue(m_payment_system, json[QString("paymentSystem")]);
    m_payment_system_isSet = !json[QString("paymentSystem")].isNull() && m_payment_system_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIInstallmentOptions_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstallmentOptions_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_bin_isSet) {
        obj.insert(QString("bin"), ::OpenAPI::toJsonValue(m_bin));
    }
    if (m_installments.size() > 0) {
        obj.insert(QString("installments"), ::OpenAPI::toJsonValue(m_installments));
    }
    if (m_payment_group_name_isSet) {
        obj.insert(QString("paymentGroupName"), ::OpenAPI::toJsonValue(m_payment_group_name));
    }
    if (m_payment_name_isSet) {
        obj.insert(QString("paymentName"), ::OpenAPI::toJsonValue(m_payment_name));
    }
    if (m_payment_system_isSet) {
        obj.insert(QString("paymentSystem"), ::OpenAPI::toJsonValue(m_payment_system));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIInstallmentOptions_inner::getBin() const {
    return m_bin;
}
void OAIInstallmentOptions_inner::setBin(const QString &bin) {
    m_bin = bin;
    m_bin_isSet = true;
}

bool OAIInstallmentOptions_inner::is_bin_Set() const{
    return m_bin_isSet;
}

bool OAIInstallmentOptions_inner::is_bin_Valid() const{
    return m_bin_isValid;
}

QList<OAIInstallments_inner> OAIInstallmentOptions_inner::getInstallments() const {
    return m_installments;
}
void OAIInstallmentOptions_inner::setInstallments(const QList<OAIInstallments_inner> &installments) {
    m_installments = installments;
    m_installments_isSet = true;
}

bool OAIInstallmentOptions_inner::is_installments_Set() const{
    return m_installments_isSet;
}

bool OAIInstallmentOptions_inner::is_installments_Valid() const{
    return m_installments_isValid;
}

QString OAIInstallmentOptions_inner::getPaymentGroupName() const {
    return m_payment_group_name;
}
void OAIInstallmentOptions_inner::setPaymentGroupName(const QString &payment_group_name) {
    m_payment_group_name = payment_group_name;
    m_payment_group_name_isSet = true;
}

bool OAIInstallmentOptions_inner::is_payment_group_name_Set() const{
    return m_payment_group_name_isSet;
}

bool OAIInstallmentOptions_inner::is_payment_group_name_Valid() const{
    return m_payment_group_name_isValid;
}

QString OAIInstallmentOptions_inner::getPaymentName() const {
    return m_payment_name;
}
void OAIInstallmentOptions_inner::setPaymentName(const QString &payment_name) {
    m_payment_name = payment_name;
    m_payment_name_isSet = true;
}

bool OAIInstallmentOptions_inner::is_payment_name_Set() const{
    return m_payment_name_isSet;
}

bool OAIInstallmentOptions_inner::is_payment_name_Valid() const{
    return m_payment_name_isValid;
}

QString OAIInstallmentOptions_inner::getPaymentSystem() const {
    return m_payment_system;
}
void OAIInstallmentOptions_inner::setPaymentSystem(const QString &payment_system) {
    m_payment_system = payment_system;
    m_payment_system_isSet = true;
}

bool OAIInstallmentOptions_inner::is_payment_system_Set() const{
    return m_payment_system_isSet;
}

bool OAIInstallmentOptions_inner::is_payment_system_Valid() const{
    return m_payment_system_isValid;
}

qint32 OAIInstallmentOptions_inner::getValue() const {
    return m_value;
}
void OAIInstallmentOptions_inner::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIInstallmentOptions_inner::is_value_Set() const{
    return m_value_isSet;
}

bool OAIInstallmentOptions_inner::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIInstallmentOptions_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstallmentOptions_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bin_isValid && m_installments_isValid && m_payment_group_name_isValid && m_payment_name_isValid && m_payment_system_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
