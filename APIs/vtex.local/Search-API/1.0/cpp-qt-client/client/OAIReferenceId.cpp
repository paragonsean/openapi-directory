/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceId::OAIReferenceId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceId::OAIReferenceId() {
    this->initializeModel();
}

OAIReferenceId::~OAIReferenceId() {}

void OAIReferenceId::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIReferenceId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceId::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIReferenceId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceId::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIReferenceId::getKey() const {
    return m_key;
}
void OAIReferenceId::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIReferenceId::is_key_Set() const{
    return m_key_isSet;
}

bool OAIReferenceId::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIReferenceId::getValue() const {
    return m_value;
}
void OAIReferenceId::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIReferenceId::is_value_Set() const{
    return m_value_isSet;
}

bool OAIReferenceId::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIReferenceId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceId::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
