/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISeller.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISeller::OAISeller(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISeller::OAISeller() {
    this->initializeModel();
}

OAISeller::~OAISeller() {}

void OAISeller::initializeModel() {

    m_add_to_cart_link_isSet = false;
    m_add_to_cart_link_isValid = false;

    m_commertial_offer_isSet = false;
    m_commertial_offer_isValid = false;

    m_seller_default_isSet = false;
    m_seller_default_isValid = false;

    m_seller_id_isSet = false;
    m_seller_id_isValid = false;

    m_seller_name_isSet = false;
    m_seller_name_isValid = false;
}

void OAISeller::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISeller::fromJsonObject(QJsonObject json) {

    m_add_to_cart_link_isValid = ::OpenAPI::fromJsonValue(m_add_to_cart_link, json[QString("addToCartLink")]);
    m_add_to_cart_link_isSet = !json[QString("addToCartLink")].isNull() && m_add_to_cart_link_isValid;

    m_commertial_offer_isValid = ::OpenAPI::fromJsonValue(m_commertial_offer, json[QString("commertialOffer")]);
    m_commertial_offer_isSet = !json[QString("commertialOffer")].isNull() && m_commertial_offer_isValid;

    m_seller_default_isValid = ::OpenAPI::fromJsonValue(m_seller_default, json[QString("sellerDefault")]);
    m_seller_default_isSet = !json[QString("sellerDefault")].isNull() && m_seller_default_isValid;

    m_seller_id_isValid = ::OpenAPI::fromJsonValue(m_seller_id, json[QString("sellerId")]);
    m_seller_id_isSet = !json[QString("sellerId")].isNull() && m_seller_id_isValid;

    m_seller_name_isValid = ::OpenAPI::fromJsonValue(m_seller_name, json[QString("sellerName")]);
    m_seller_name_isSet = !json[QString("sellerName")].isNull() && m_seller_name_isValid;
}

QString OAISeller::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISeller::asJsonObject() const {
    QJsonObject obj;
    if (m_add_to_cart_link_isSet) {
        obj.insert(QString("addToCartLink"), ::OpenAPI::toJsonValue(m_add_to_cart_link));
    }
    if (m_commertial_offer.isSet()) {
        obj.insert(QString("commertialOffer"), ::OpenAPI::toJsonValue(m_commertial_offer));
    }
    if (m_seller_default_isSet) {
        obj.insert(QString("sellerDefault"), ::OpenAPI::toJsonValue(m_seller_default));
    }
    if (m_seller_id_isSet) {
        obj.insert(QString("sellerId"), ::OpenAPI::toJsonValue(m_seller_id));
    }
    if (m_seller_name_isSet) {
        obj.insert(QString("sellerName"), ::OpenAPI::toJsonValue(m_seller_name));
    }
    return obj;
}

QString OAISeller::getAddToCartLink() const {
    return m_add_to_cart_link;
}
void OAISeller::setAddToCartLink(const QString &add_to_cart_link) {
    m_add_to_cart_link = add_to_cart_link;
    m_add_to_cart_link_isSet = true;
}

bool OAISeller::is_add_to_cart_link_Set() const{
    return m_add_to_cart_link_isSet;
}

bool OAISeller::is_add_to_cart_link_Valid() const{
    return m_add_to_cart_link_isValid;
}

OAICommertialOffer OAISeller::getCommertialOffer() const {
    return m_commertial_offer;
}
void OAISeller::setCommertialOffer(const OAICommertialOffer &commertial_offer) {
    m_commertial_offer = commertial_offer;
    m_commertial_offer_isSet = true;
}

bool OAISeller::is_commertial_offer_Set() const{
    return m_commertial_offer_isSet;
}

bool OAISeller::is_commertial_offer_Valid() const{
    return m_commertial_offer_isValid;
}

bool OAISeller::isSellerDefault() const {
    return m_seller_default;
}
void OAISeller::setSellerDefault(const bool &seller_default) {
    m_seller_default = seller_default;
    m_seller_default_isSet = true;
}

bool OAISeller::is_seller_default_Set() const{
    return m_seller_default_isSet;
}

bool OAISeller::is_seller_default_Valid() const{
    return m_seller_default_isValid;
}

QString OAISeller::getSellerId() const {
    return m_seller_id;
}
void OAISeller::setSellerId(const QString &seller_id) {
    m_seller_id = seller_id;
    m_seller_id_isSet = true;
}

bool OAISeller::is_seller_id_Set() const{
    return m_seller_id_isSet;
}

bool OAISeller::is_seller_id_Valid() const{
    return m_seller_id_isValid;
}

QString OAISeller::getSellerName() const {
    return m_seller_name;
}
void OAISeller::setSellerName(const QString &seller_name) {
    m_seller_name = seller_name;
    m_seller_name_isSet = true;
}

bool OAISeller::is_seller_name_Set() const{
    return m_seller_name_isSet;
}

bool OAISeller::is_seller_name_Valid() const{
    return m_seller_name_isValid;
}

bool OAISeller::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_to_cart_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commertial_offer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISeller::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_add_to_cart_link_isValid && m_commertial_offer_isValid && m_seller_default_isValid && m_seller_id_isValid && m_seller_name_isValid && true;
}

} // namespace OpenAPI
