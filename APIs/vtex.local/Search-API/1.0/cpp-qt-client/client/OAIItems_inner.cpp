/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItems_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItems_inner::OAIItems_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItems_inner::OAIItems_inner() {
    this->initializeModel();
}

OAIItems_inner::~OAIItems_inner() {}

void OAIItems_inner::initializeModel() {

    m_videos_isSet = false;
    m_videos_isValid = false;

    m_complement_name_isSet = false;
    m_complement_name_isValid = false;

    m_ean_isSet = false;
    m_ean_isValid = false;

    m_estimated_date_arrival_isSet = false;
    m_estimated_date_arrival_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_is_kit_isSet = false;
    m_is_kit_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_kit_items_isSet = false;
    m_kit_items_isValid = false;

    m_measurement_unit_isSet = false;
    m_measurement_unit_isValid = false;

    m_modal_type_isSet = false;
    m_modal_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_name_complete_isSet = false;
    m_name_complete_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_sellers_isSet = false;
    m_sellers_isValid = false;

    m_unit_multiplier_isSet = false;
    m_unit_multiplier_isValid = false;
}

void OAIItems_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItems_inner::fromJsonObject(QJsonObject json) {

    m_videos_isValid = ::OpenAPI::fromJsonValue(m_videos, json[QString("Videos")]);
    m_videos_isSet = !json[QString("Videos")].isNull() && m_videos_isValid;

    m_complement_name_isValid = ::OpenAPI::fromJsonValue(m_complement_name, json[QString("complementName")]);
    m_complement_name_isSet = !json[QString("complementName")].isNull() && m_complement_name_isValid;

    m_ean_isValid = ::OpenAPI::fromJsonValue(m_ean, json[QString("ean")]);
    m_ean_isSet = !json[QString("ean")].isNull() && m_ean_isValid;

    m_estimated_date_arrival_isValid = ::OpenAPI::fromJsonValue(m_estimated_date_arrival, json[QString("estimatedDateArrival")]);
    m_estimated_date_arrival_isSet = !json[QString("estimatedDateArrival")].isNull() && m_estimated_date_arrival_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_is_kit_isValid = ::OpenAPI::fromJsonValue(m_is_kit, json[QString("isKit")]);
    m_is_kit_isSet = !json[QString("isKit")].isNull() && m_is_kit_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_kit_items_isValid = ::OpenAPI::fromJsonValue(m_kit_items, json[QString("kitItems")]);
    m_kit_items_isSet = !json[QString("kitItems")].isNull() && m_kit_items_isValid;

    m_measurement_unit_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit, json[QString("measurementUnit")]);
    m_measurement_unit_isSet = !json[QString("measurementUnit")].isNull() && m_measurement_unit_isValid;

    m_modal_type_isValid = ::OpenAPI::fromJsonValue(m_modal_type, json[QString("modalType")]);
    m_modal_type_isSet = !json[QString("modalType")].isNull() && m_modal_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_name_complete_isValid = ::OpenAPI::fromJsonValue(m_name_complete, json[QString("nameComplete")]);
    m_name_complete_isSet = !json[QString("nameComplete")].isNull() && m_name_complete_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("referenceId")]);
    m_reference_id_isSet = !json[QString("referenceId")].isNull() && m_reference_id_isValid;

    m_sellers_isValid = ::OpenAPI::fromJsonValue(m_sellers, json[QString("sellers")]);
    m_sellers_isSet = !json[QString("sellers")].isNull() && m_sellers_isValid;

    m_unit_multiplier_isValid = ::OpenAPI::fromJsonValue(m_unit_multiplier, json[QString("unitMultiplier")]);
    m_unit_multiplier_isSet = !json[QString("unitMultiplier")].isNull() && m_unit_multiplier_isValid;
}

QString OAIItems_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItems_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_videos.size() > 0) {
        obj.insert(QString("Videos"), ::OpenAPI::toJsonValue(m_videos));
    }
    if (m_complement_name_isSet) {
        obj.insert(QString("complementName"), ::OpenAPI::toJsonValue(m_complement_name));
    }
    if (m_ean_isSet) {
        obj.insert(QString("ean"), ::OpenAPI::toJsonValue(m_ean));
    }
    if (m_estimated_date_arrival_isSet) {
        obj.insert(QString("estimatedDateArrival"), ::OpenAPI::toJsonValue(m_estimated_date_arrival));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_is_kit_isSet) {
        obj.insert(QString("isKit"), ::OpenAPI::toJsonValue(m_is_kit));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_kit_items.size() > 0) {
        obj.insert(QString("kitItems"), ::OpenAPI::toJsonValue(m_kit_items));
    }
    if (m_measurement_unit_isSet) {
        obj.insert(QString("measurementUnit"), ::OpenAPI::toJsonValue(m_measurement_unit));
    }
    if (m_modal_type_isSet) {
        obj.insert(QString("modalType"), ::OpenAPI::toJsonValue(m_modal_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_name_complete_isSet) {
        obj.insert(QString("nameComplete"), ::OpenAPI::toJsonValue(m_name_complete));
    }
    if (m_reference_id.size() > 0) {
        obj.insert(QString("referenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_sellers.size() > 0) {
        obj.insert(QString("sellers"), ::OpenAPI::toJsonValue(m_sellers));
    }
    if (m_unit_multiplier_isSet) {
        obj.insert(QString("unitMultiplier"), ::OpenAPI::toJsonValue(m_unit_multiplier));
    }
    return obj;
}

QList<QJsonValue> OAIItems_inner::getVideos() const {
    return m_videos;
}
void OAIItems_inner::setVideos(const QList<QJsonValue> &videos) {
    m_videos = videos;
    m_videos_isSet = true;
}

bool OAIItems_inner::is_videos_Set() const{
    return m_videos_isSet;
}

bool OAIItems_inner::is_videos_Valid() const{
    return m_videos_isValid;
}

QString OAIItems_inner::getComplementName() const {
    return m_complement_name;
}
void OAIItems_inner::setComplementName(const QString &complement_name) {
    m_complement_name = complement_name;
    m_complement_name_isSet = true;
}

bool OAIItems_inner::is_complement_name_Set() const{
    return m_complement_name_isSet;
}

bool OAIItems_inner::is_complement_name_Valid() const{
    return m_complement_name_isValid;
}

QString OAIItems_inner::getEan() const {
    return m_ean;
}
void OAIItems_inner::setEan(const QString &ean) {
    m_ean = ean;
    m_ean_isSet = true;
}

bool OAIItems_inner::is_ean_Set() const{
    return m_ean_isSet;
}

bool OAIItems_inner::is_ean_Valid() const{
    return m_ean_isValid;
}

QString OAIItems_inner::getEstimatedDateArrival() const {
    return m_estimated_date_arrival;
}
void OAIItems_inner::setEstimatedDateArrival(const QString &estimated_date_arrival) {
    m_estimated_date_arrival = estimated_date_arrival;
    m_estimated_date_arrival_isSet = true;
}

bool OAIItems_inner::is_estimated_date_arrival_Set() const{
    return m_estimated_date_arrival_isSet;
}

bool OAIItems_inner::is_estimated_date_arrival_Valid() const{
    return m_estimated_date_arrival_isValid;
}

QList<OAIImages_inner> OAIItems_inner::getImages() const {
    return m_images;
}
void OAIItems_inner::setImages(const QList<OAIImages_inner> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIItems_inner::is_images_Set() const{
    return m_images_isSet;
}

bool OAIItems_inner::is_images_Valid() const{
    return m_images_isValid;
}

bool OAIItems_inner::isIsKit() const {
    return m_is_kit;
}
void OAIItems_inner::setIsKit(const bool &is_kit) {
    m_is_kit = is_kit;
    m_is_kit_isSet = true;
}

bool OAIItems_inner::is_is_kit_Set() const{
    return m_is_kit_isSet;
}

bool OAIItems_inner::is_is_kit_Valid() const{
    return m_is_kit_isValid;
}

QString OAIItems_inner::getItemId() const {
    return m_item_id;
}
void OAIItems_inner::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIItems_inner::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIItems_inner::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QList<OAIKitItems_inner> OAIItems_inner::getKitItems() const {
    return m_kit_items;
}
void OAIItems_inner::setKitItems(const QList<OAIKitItems_inner> &kit_items) {
    m_kit_items = kit_items;
    m_kit_items_isSet = true;
}

bool OAIItems_inner::is_kit_items_Set() const{
    return m_kit_items_isSet;
}

bool OAIItems_inner::is_kit_items_Valid() const{
    return m_kit_items_isValid;
}

QString OAIItems_inner::getMeasurementUnit() const {
    return m_measurement_unit;
}
void OAIItems_inner::setMeasurementUnit(const QString &measurement_unit) {
    m_measurement_unit = measurement_unit;
    m_measurement_unit_isSet = true;
}

bool OAIItems_inner::is_measurement_unit_Set() const{
    return m_measurement_unit_isSet;
}

bool OAIItems_inner::is_measurement_unit_Valid() const{
    return m_measurement_unit_isValid;
}

QString OAIItems_inner::getModalType() const {
    return m_modal_type;
}
void OAIItems_inner::setModalType(const QString &modal_type) {
    m_modal_type = modal_type;
    m_modal_type_isSet = true;
}

bool OAIItems_inner::is_modal_type_Set() const{
    return m_modal_type_isSet;
}

bool OAIItems_inner::is_modal_type_Valid() const{
    return m_modal_type_isValid;
}

QString OAIItems_inner::getName() const {
    return m_name;
}
void OAIItems_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIItems_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIItems_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIItems_inner::getNameComplete() const {
    return m_name_complete;
}
void OAIItems_inner::setNameComplete(const QString &name_complete) {
    m_name_complete = name_complete;
    m_name_complete_isSet = true;
}

bool OAIItems_inner::is_name_complete_Set() const{
    return m_name_complete_isSet;
}

bool OAIItems_inner::is_name_complete_Valid() const{
    return m_name_complete_isValid;
}

QList<OAIReferenceId_inner> OAIItems_inner::getReferenceId() const {
    return m_reference_id;
}
void OAIItems_inner::setReferenceId(const QList<OAIReferenceId_inner> &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIItems_inner::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIItems_inner::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QList<OAISellers_inner> OAIItems_inner::getSellers() const {
    return m_sellers;
}
void OAIItems_inner::setSellers(const QList<OAISellers_inner> &sellers) {
    m_sellers = sellers;
    m_sellers_isSet = true;
}

bool OAIItems_inner::is_sellers_Set() const{
    return m_sellers_isSet;
}

bool OAIItems_inner::is_sellers_Valid() const{
    return m_sellers_isValid;
}

double OAIItems_inner::getUnitMultiplier() const {
    return m_unit_multiplier;
}
void OAIItems_inner::setUnitMultiplier(const double &unit_multiplier) {
    m_unit_multiplier = unit_multiplier;
    m_unit_multiplier_isSet = true;
}

bool OAIItems_inner::is_unit_multiplier_Set() const{
    return m_unit_multiplier_isSet;
}

bool OAIItems_inner::is_unit_multiplier_Valid() const{
    return m_unit_multiplier_isValid;
}

bool OAIItems_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_videos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_complement_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_date_arrival_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_kit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kit_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modal_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sellers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItems_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_videos_isValid && m_complement_name_isValid && m_ean_isValid && m_estimated_date_arrival_isValid && m_images_isValid && m_is_kit_isValid && m_item_id_isValid && m_kit_items_isValid && m_measurement_unit_isValid && m_modal_type_isValid && m_name_isValid && m_name_complete_isValid && m_reference_id_isValid && m_sellers_isValid && m_unit_multiplier_isValid && true;
}

} // namespace OpenAPI
