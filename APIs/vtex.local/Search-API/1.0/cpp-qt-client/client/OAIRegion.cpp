/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegion::OAIRegion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegion::OAIRegion() {
    this->initializeModel();
}

OAIRegion::~OAIRegion() {}

void OAIRegion::initializeModel() {

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_culture_info_name_isSet = false;
    m_culture_info_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_persisted_isSet = false;
    m_is_persisted_isValid = false;

    m_is_removed_isSet = false;
    m_is_removed_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAIRegion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegion::fromJsonObject(QJsonObject json) {

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("CountryCode")]);
    m_country_code_isSet = !json[QString("CountryCode")].isNull() && m_country_code_isValid;

    m_culture_info_name_isValid = ::OpenAPI::fromJsonValue(m_culture_info_name, json[QString("CultureInfoName")]);
    m_culture_info_name_isSet = !json[QString("CultureInfoName")].isNull() && m_culture_info_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_is_persisted_isValid = ::OpenAPI::fromJsonValue(m_is_persisted, json[QString("IsPersisted")]);
    m_is_persisted_isSet = !json[QString("IsPersisted")].isNull() && m_is_persisted_isValid;

    m_is_removed_isValid = ::OpenAPI::fromJsonValue(m_is_removed, json[QString("IsRemoved")]);
    m_is_removed_isSet = !json[QString("IsRemoved")].isNull() && m_is_removed_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("ZipCode")]);
    m_zip_code_isSet = !json[QString("ZipCode")].isNull() && m_zip_code_isValid;
}

QString OAIRegion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegion::asJsonObject() const {
    QJsonObject obj;
    if (m_country_code_isSet) {
        obj.insert(QString("CountryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_culture_info_name_isSet) {
        obj.insert(QString("CultureInfoName"), ::OpenAPI::toJsonValue(m_culture_info_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_persisted_isSet) {
        obj.insert(QString("IsPersisted"), ::OpenAPI::toJsonValue(m_is_persisted));
    }
    if (m_is_removed_isSet) {
        obj.insert(QString("IsRemoved"), ::OpenAPI::toJsonValue(m_is_removed));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("ZipCode"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

QString OAIRegion::getCountryCode() const {
    return m_country_code;
}
void OAIRegion::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIRegion::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIRegion::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIRegion::getCultureInfoName() const {
    return m_culture_info_name;
}
void OAIRegion::setCultureInfoName(const QString &culture_info_name) {
    m_culture_info_name = culture_info_name;
    m_culture_info_name_isSet = true;
}

bool OAIRegion::is_culture_info_name_Set() const{
    return m_culture_info_name_isSet;
}

bool OAIRegion::is_culture_info_name_Valid() const{
    return m_culture_info_name_isValid;
}

qint32 OAIRegion::getId() const {
    return m_id;
}
void OAIRegion::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRegion::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRegion::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIRegion::isIsPersisted() const {
    return m_is_persisted;
}
void OAIRegion::setIsPersisted(const bool &is_persisted) {
    m_is_persisted = is_persisted;
    m_is_persisted_isSet = true;
}

bool OAIRegion::is_is_persisted_Set() const{
    return m_is_persisted_isSet;
}

bool OAIRegion::is_is_persisted_Valid() const{
    return m_is_persisted_isValid;
}

bool OAIRegion::isIsRemoved() const {
    return m_is_removed;
}
void OAIRegion::setIsRemoved(const bool &is_removed) {
    m_is_removed = is_removed;
    m_is_removed_isSet = true;
}

bool OAIRegion::is_is_removed_Set() const{
    return m_is_removed_isSet;
}

bool OAIRegion::is_is_removed_Valid() const{
    return m_is_removed_isValid;
}

QString OAIRegion::getName() const {
    return m_name;
}
void OAIRegion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRegion::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRegion::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRegion::getZipCode() const {
    return m_zip_code;
}
void OAIRegion::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIRegion::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIRegion::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAIRegion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_culture_info_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_persisted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_removed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_code_isValid && m_culture_info_name_isValid && m_id_isValid && m_is_persisted_isValid && m_is_removed_isValid && m_name_isValid && m_zip_code_isValid && true;
}

} // namespace OpenAPI
