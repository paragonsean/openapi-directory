/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstallments_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstallments_inner::OAIInstallments_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstallments_inner::OAIInstallments_inner() {
    this->initializeModel();
}

OAIInstallments_inner::~OAIInstallments_inner() {}

void OAIInstallments_inner::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_has_interest_rate_isSet = false;
    m_has_interest_rate_isValid = false;

    m_interest_rate_isSet = false;
    m_interest_rate_isValid = false;

    m_seller_merchant_installments_isSet = false;
    m_seller_merchant_installments_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIInstallments_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstallments_inner::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_has_interest_rate_isValid = ::OpenAPI::fromJsonValue(m_has_interest_rate, json[QString("hasInterestRate")]);
    m_has_interest_rate_isSet = !json[QString("hasInterestRate")].isNull() && m_has_interest_rate_isValid;

    m_interest_rate_isValid = ::OpenAPI::fromJsonValue(m_interest_rate, json[QString("interestRate")]);
    m_interest_rate_isSet = !json[QString("interestRate")].isNull() && m_interest_rate_isValid;

    m_seller_merchant_installments_isValid = ::OpenAPI::fromJsonValue(m_seller_merchant_installments, json[QString("sellerMerchantInstallments")]);
    m_seller_merchant_installments_isSet = !json[QString("sellerMerchantInstallments")].isNull() && m_seller_merchant_installments_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIInstallments_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstallments_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_has_interest_rate_isSet) {
        obj.insert(QString("hasInterestRate"), ::OpenAPI::toJsonValue(m_has_interest_rate));
    }
    if (m_interest_rate_isSet) {
        obj.insert(QString("interestRate"), ::OpenAPI::toJsonValue(m_interest_rate));
    }
    if (m_seller_merchant_installments.size() > 0) {
        obj.insert(QString("sellerMerchantInstallments"), ::OpenAPI::toJsonValue(m_seller_merchant_installments));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

qint32 OAIInstallments_inner::getCount() const {
    return m_count;
}
void OAIInstallments_inner::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIInstallments_inner::is_count_Set() const{
    return m_count_isSet;
}

bool OAIInstallments_inner::is_count_Valid() const{
    return m_count_isValid;
}

bool OAIInstallments_inner::isHasInterestRate() const {
    return m_has_interest_rate;
}
void OAIInstallments_inner::setHasInterestRate(const bool &has_interest_rate) {
    m_has_interest_rate = has_interest_rate;
    m_has_interest_rate_isSet = true;
}

bool OAIInstallments_inner::is_has_interest_rate_Set() const{
    return m_has_interest_rate_isSet;
}

bool OAIInstallments_inner::is_has_interest_rate_Valid() const{
    return m_has_interest_rate_isValid;
}

qint32 OAIInstallments_inner::getInterestRate() const {
    return m_interest_rate;
}
void OAIInstallments_inner::setInterestRate(const qint32 &interest_rate) {
    m_interest_rate = interest_rate;
    m_interest_rate_isSet = true;
}

bool OAIInstallments_inner::is_interest_rate_Set() const{
    return m_interest_rate_isSet;
}

bool OAIInstallments_inner::is_interest_rate_Valid() const{
    return m_interest_rate_isValid;
}

QList<OAISellerMerchantInstallments_inner> OAIInstallments_inner::getSellerMerchantInstallments() const {
    return m_seller_merchant_installments;
}
void OAIInstallments_inner::setSellerMerchantInstallments(const QList<OAISellerMerchantInstallments_inner> &seller_merchant_installments) {
    m_seller_merchant_installments = seller_merchant_installments;
    m_seller_merchant_installments_isSet = true;
}

bool OAIInstallments_inner::is_seller_merchant_installments_Set() const{
    return m_seller_merchant_installments_isSet;
}

bool OAIInstallments_inner::is_seller_merchant_installments_Valid() const{
    return m_seller_merchant_installments_isValid;
}

qint32 OAIInstallments_inner::getTotal() const {
    return m_total;
}
void OAIInstallments_inner::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIInstallments_inner::is_total_Set() const{
    return m_total_isSet;
}

bool OAIInstallments_inner::is_total_Valid() const{
    return m_total_isValid;
}

qint32 OAIInstallments_inner::getValue() const {
    return m_value;
}
void OAIInstallments_inner::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIInstallments_inner::is_value_Set() const{
    return m_value_isSet;
}

bool OAIInstallments_inner::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIInstallments_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_interest_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_merchant_installments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstallments_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_isValid && m_has_interest_rate_isValid && m_interest_rate_isValid && m_seller_merchant_installments_isValid && m_total_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
