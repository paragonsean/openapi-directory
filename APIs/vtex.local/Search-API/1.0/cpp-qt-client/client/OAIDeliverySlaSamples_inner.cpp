/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeliverySlaSamples_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeliverySlaSamples_inner::OAIDeliverySlaSamples_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeliverySlaSamples_inner::OAIDeliverySlaSamples_inner() {
    this->initializeModel();
}

OAIDeliverySlaSamples_inner::~OAIDeliverySlaSamples_inner() {}

void OAIDeliverySlaSamples_inner::initializeModel() {

    m_delivery_sla_per_types_isSet = false;
    m_delivery_sla_per_types_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;
}

void OAIDeliverySlaSamples_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeliverySlaSamples_inner::fromJsonObject(QJsonObject json) {

    m_delivery_sla_per_types_isValid = ::OpenAPI::fromJsonValue(m_delivery_sla_per_types, json[QString("DeliverySlaPerTypes")]);
    m_delivery_sla_per_types_isSet = !json[QString("DeliverySlaPerTypes")].isNull() && m_delivery_sla_per_types_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;
}

QString OAIDeliverySlaSamples_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeliverySlaSamples_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_delivery_sla_per_types.size() > 0) {
        obj.insert(QString("DeliverySlaPerTypes"), ::OpenAPI::toJsonValue(m_delivery_sla_per_types));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    return obj;
}

QList<QJsonValue> OAIDeliverySlaSamples_inner::getDeliverySlaPerTypes() const {
    return m_delivery_sla_per_types;
}
void OAIDeliverySlaSamples_inner::setDeliverySlaPerTypes(const QList<QJsonValue> &delivery_sla_per_types) {
    m_delivery_sla_per_types = delivery_sla_per_types;
    m_delivery_sla_per_types_isSet = true;
}

bool OAIDeliverySlaSamples_inner::is_delivery_sla_per_types_Set() const{
    return m_delivery_sla_per_types_isSet;
}

bool OAIDeliverySlaSamples_inner::is_delivery_sla_per_types_Valid() const{
    return m_delivery_sla_per_types_isValid;
}

QString OAIDeliverySlaSamples_inner::getRegion() const {
    return m_region;
}
void OAIDeliverySlaSamples_inner::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIDeliverySlaSamples_inner::is_region_Set() const{
    return m_region_isSet;
}

bool OAIDeliverySlaSamples_inner::is_region_Valid() const{
    return m_region_isValid;
}

bool OAIDeliverySlaSamples_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivery_sla_per_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeliverySlaSamples_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_delivery_sla_per_types_isValid && m_region_isValid && true;
}

} // namespace OpenAPI
