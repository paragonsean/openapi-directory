/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMainImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMainImage::OAIMainImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMainImage::OAIMainImage() {
    this->initializeModel();
}

OAIMainImage::~OAIMainImage() {}

void OAIMainImage::initializeModel() {

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_image_label_isSet = false;
    m_image_label_isValid = false;

    m_image_path_isSet = false;
    m_image_path_isValid = false;

    m_image_tag_isSet = false;
    m_image_tag_isValid = false;

    m_image_text_isSet = false;
    m_image_text_isValid = false;

    m_is_main_isSet = false;
    m_is_main_isValid = false;

    m_is_zoom_size_isSet = false;
    m_is_zoom_size_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;
}

void OAIMainImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMainImage::fromJsonObject(QJsonObject json) {

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("ImageId")]);
    m_image_id_isSet = !json[QString("ImageId")].isNull() && m_image_id_isValid;

    m_image_label_isValid = ::OpenAPI::fromJsonValue(m_image_label, json[QString("ImageLabel")]);
    m_image_label_isSet = !json[QString("ImageLabel")].isNull() && m_image_label_isValid;

    m_image_path_isValid = ::OpenAPI::fromJsonValue(m_image_path, json[QString("ImagePath")]);
    m_image_path_isSet = !json[QString("ImagePath")].isNull() && m_image_path_isValid;

    m_image_tag_isValid = ::OpenAPI::fromJsonValue(m_image_tag, json[QString("ImageTag")]);
    m_image_tag_isSet = !json[QString("ImageTag")].isNull() && m_image_tag_isValid;

    m_image_text_isValid = ::OpenAPI::fromJsonValue(m_image_text, json[QString("ImageText")]);
    m_image_text_isSet = !json[QString("ImageText")].isNull() && m_image_text_isValid;

    m_is_main_isValid = ::OpenAPI::fromJsonValue(m_is_main, json[QString("IsMain")]);
    m_is_main_isSet = !json[QString("IsMain")].isNull() && m_is_main_isValid;

    m_is_zoom_size_isValid = ::OpenAPI::fromJsonValue(m_is_zoom_size, json[QString("IsZoomSize")]);
    m_is_zoom_size_isSet = !json[QString("IsZoomSize")].isNull() && m_is_zoom_size_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("LastModified")]);
    m_last_modified_isSet = !json[QString("LastModified")].isNull() && m_last_modified_isValid;
}

QString OAIMainImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMainImage::asJsonObject() const {
    QJsonObject obj;
    if (m_image_id_isSet) {
        obj.insert(QString("ImageId"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_image_label_isSet) {
        obj.insert(QString("ImageLabel"), ::OpenAPI::toJsonValue(m_image_label));
    }
    if (m_image_path_isSet) {
        obj.insert(QString("ImagePath"), ::OpenAPI::toJsonValue(m_image_path));
    }
    if (m_image_tag_isSet) {
        obj.insert(QString("ImageTag"), ::OpenAPI::toJsonValue(m_image_tag));
    }
    if (m_image_text_isSet) {
        obj.insert(QString("ImageText"), ::OpenAPI::toJsonValue(m_image_text));
    }
    if (m_is_main_isSet) {
        obj.insert(QString("IsMain"), ::OpenAPI::toJsonValue(m_is_main));
    }
    if (m_is_zoom_size_isSet) {
        obj.insert(QString("IsZoomSize"), ::OpenAPI::toJsonValue(m_is_zoom_size));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("LastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    return obj;
}

QString OAIMainImage::getImageId() const {
    return m_image_id;
}
void OAIMainImage::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAIMainImage::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAIMainImage::is_image_id_Valid() const{
    return m_image_id_isValid;
}

QString OAIMainImage::getImageLabel() const {
    return m_image_label;
}
void OAIMainImage::setImageLabel(const QString &image_label) {
    m_image_label = image_label;
    m_image_label_isSet = true;
}

bool OAIMainImage::is_image_label_Set() const{
    return m_image_label_isSet;
}

bool OAIMainImage::is_image_label_Valid() const{
    return m_image_label_isValid;
}

QString OAIMainImage::getImagePath() const {
    return m_image_path;
}
void OAIMainImage::setImagePath(const QString &image_path) {
    m_image_path = image_path;
    m_image_path_isSet = true;
}

bool OAIMainImage::is_image_path_Set() const{
    return m_image_path_isSet;
}

bool OAIMainImage::is_image_path_Valid() const{
    return m_image_path_isValid;
}

QString OAIMainImage::getImageTag() const {
    return m_image_tag;
}
void OAIMainImage::setImageTag(const QString &image_tag) {
    m_image_tag = image_tag;
    m_image_tag_isSet = true;
}

bool OAIMainImage::is_image_tag_Set() const{
    return m_image_tag_isSet;
}

bool OAIMainImage::is_image_tag_Valid() const{
    return m_image_tag_isValid;
}

QString OAIMainImage::getImageText() const {
    return m_image_text;
}
void OAIMainImage::setImageText(const QString &image_text) {
    m_image_text = image_text;
    m_image_text_isSet = true;
}

bool OAIMainImage::is_image_text_Set() const{
    return m_image_text_isSet;
}

bool OAIMainImage::is_image_text_Valid() const{
    return m_image_text_isValid;
}

bool OAIMainImage::isIsMain() const {
    return m_is_main;
}
void OAIMainImage::setIsMain(const bool &is_main) {
    m_is_main = is_main;
    m_is_main_isSet = true;
}

bool OAIMainImage::is_is_main_Set() const{
    return m_is_main_isSet;
}

bool OAIMainImage::is_is_main_Valid() const{
    return m_is_main_isValid;
}

bool OAIMainImage::isIsZoomSize() const {
    return m_is_zoom_size;
}
void OAIMainImage::setIsZoomSize(const bool &is_zoom_size) {
    m_is_zoom_size = is_zoom_size;
    m_is_zoom_size_isSet = true;
}

bool OAIMainImage::is_is_zoom_size_Set() const{
    return m_is_zoom_size_isSet;
}

bool OAIMainImage::is_is_zoom_size_Valid() const{
    return m_is_zoom_size_isValid;
}

QString OAIMainImage::getLastModified() const {
    return m_last_modified;
}
void OAIMainImage::setLastModified(const QString &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIMainImage::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIMainImage::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

bool OAIMainImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_main_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_zoom_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMainImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_id_isValid && m_image_label_isValid && m_image_path_isValid && m_image_tag_isValid && m_image_text_isValid && m_is_main_isValid && m_is_zoom_size_isValid && m_last_modified_isValid && true;
}

} // namespace OpenAPI
