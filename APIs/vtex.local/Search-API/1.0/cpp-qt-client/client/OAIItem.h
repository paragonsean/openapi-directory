/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIItem.h
 *
 * 
 */

#ifndef OAIItem_H
#define OAIItem_H

#include <QJsonObject>

#include "OAIImage.h"
#include "OAIReferenceId.h"
#include "OAISeller.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImage;
class OAIReferenceId;
class OAISeller;

class OAIItem : public OAIObject {
public:
    OAIItem();
    OAIItem(QString json);
    ~OAIItem() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getCor() const;
    void setCor(const QList<QString> &cor);
    bool is_cor_Set() const;
    bool is_cor_Valid() const;

    QList<QString> getTamanho() const;
    void setTamanho(const QList<QString> &tamanho);
    bool is_tamanho_Set() const;
    bool is_tamanho_Valid() const;

    QString getComplementName() const;
    void setComplementName(const QString &complement_name);
    bool is_complement_name_Set() const;
    bool is_complement_name_Valid() const;

    QString getEan() const;
    void setEan(const QString &ean);
    bool is_ean_Set() const;
    bool is_ean_Valid() const;

    QList<OAIImage> getImages() const;
    void setImages(const QList<OAIImage> &images);
    bool is_images_Set() const;
    bool is_images_Valid() const;

    QString getItemId() const;
    void setItemId(const QString &item_id);
    bool is_item_id_Set() const;
    bool is_item_id_Valid() const;

    QString getMeasurementUnit() const;
    void setMeasurementUnit(const QString &measurement_unit);
    bool is_measurement_unit_Set() const;
    bool is_measurement_unit_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNameComplete() const;
    void setNameComplete(const QString &name_complete);
    bool is_name_complete_Set() const;
    bool is_name_complete_Valid() const;

    QList<OAIReferenceId> getReferenceId() const;
    void setReferenceId(const QList<OAIReferenceId> &reference_id);
    bool is_reference_id_Set() const;
    bool is_reference_id_Valid() const;

    QList<OAISeller> getSellers() const;
    void setSellers(const QList<OAISeller> &sellers);
    bool is_sellers_Set() const;
    bool is_sellers_Valid() const;

    double getUnitMultiplier() const;
    void setUnitMultiplier(const double &unit_multiplier);
    bool is_unit_multiplier_Set() const;
    bool is_unit_multiplier_Valid() const;

    QList<QString> getVariations() const;
    void setVariations(const QList<QString> &variations);
    bool is_variations_Set() const;
    bool is_variations_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_cor;
    bool m_cor_isSet;
    bool m_cor_isValid;

    QList<QString> m_tamanho;
    bool m_tamanho_isSet;
    bool m_tamanho_isValid;

    QString m_complement_name;
    bool m_complement_name_isSet;
    bool m_complement_name_isValid;

    QString m_ean;
    bool m_ean_isSet;
    bool m_ean_isValid;

    QList<OAIImage> m_images;
    bool m_images_isSet;
    bool m_images_isValid;

    QString m_item_id;
    bool m_item_id_isSet;
    bool m_item_id_isValid;

    QString m_measurement_unit;
    bool m_measurement_unit_isSet;
    bool m_measurement_unit_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_name_complete;
    bool m_name_complete_isSet;
    bool m_name_complete_isValid;

    QList<OAIReferenceId> m_reference_id;
    bool m_reference_id_isSet;
    bool m_reference_id_isValid;

    QList<OAISeller> m_sellers;
    bool m_sellers_isSet;
    bool m_sellers_isValid;

    double m_unit_multiplier;
    bool m_unit_multiplier_isSet;
    bool m_unit_multiplier_isValid;

    QList<QString> m_variations;
    bool m_variations_isSet;
    bool m_variations_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIItem)

#endif // OAIItem_H
