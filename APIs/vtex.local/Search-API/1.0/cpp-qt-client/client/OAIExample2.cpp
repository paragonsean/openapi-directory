/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExample2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExample2::OAIExample2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExample2::OAIExample2() {
    this->initializeModel();
}

OAIExample2::~OAIExample2() {}

void OAIExample2::initializeModel() {

    m_brands_isSet = false;
    m_brands_isValid = false;

    m_categories_trees_isSet = false;
    m_categories_trees_isValid = false;

    m_departments_isSet = false;
    m_departments_isValid = false;

    m_specification_filters_isSet = false;
    m_specification_filters_isValid = false;
}

void OAIExample2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExample2::fromJsonObject(QJsonObject json) {

    m_brands_isValid = ::OpenAPI::fromJsonValue(m_brands, json[QString("Brands")]);
    m_brands_isSet = !json[QString("Brands")].isNull() && m_brands_isValid;

    m_categories_trees_isValid = ::OpenAPI::fromJsonValue(m_categories_trees, json[QString("CategoriesTrees")]);
    m_categories_trees_isSet = !json[QString("CategoriesTrees")].isNull() && m_categories_trees_isValid;

    m_departments_isValid = ::OpenAPI::fromJsonValue(m_departments, json[QString("Departments")]);
    m_departments_isSet = !json[QString("Departments")].isNull() && m_departments_isValid;

    m_specification_filters_isValid = ::OpenAPI::fromJsonValue(m_specification_filters, json[QString("SpecificationFilters")]);
    m_specification_filters_isSet = !json[QString("SpecificationFilters")].isNull() && m_specification_filters_isValid;
}

QString OAIExample2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExample2::asJsonObject() const {
    QJsonObject obj;
    if (m_brands.size() > 0) {
        obj.insert(QString("Brands"), ::OpenAPI::toJsonValue(m_brands));
    }
    if (m_categories_trees.size() > 0) {
        obj.insert(QString("CategoriesTrees"), ::OpenAPI::toJsonValue(m_categories_trees));
    }
    if (m_departments.size() > 0) {
        obj.insert(QString("Departments"), ::OpenAPI::toJsonValue(m_departments));
    }
    if (m_specification_filters.isSet()) {
        obj.insert(QString("SpecificationFilters"), ::OpenAPI::toJsonValue(m_specification_filters));
    }
    return obj;
}

QList<OAIBrand> OAIExample2::getBrands() const {
    return m_brands;
}
void OAIExample2::setBrands(const QList<OAIBrand> &brands) {
    m_brands = brands;
    m_brands_isSet = true;
}

bool OAIExample2::is_brands_Set() const{
    return m_brands_isSet;
}

bool OAIExample2::is_brands_Valid() const{
    return m_brands_isValid;
}

QList<OAICategoriesTree> OAIExample2::getCategoriesTrees() const {
    return m_categories_trees;
}
void OAIExample2::setCategoriesTrees(const QList<OAICategoriesTree> &categories_trees) {
    m_categories_trees = categories_trees;
    m_categories_trees_isSet = true;
}

bool OAIExample2::is_categories_trees_Set() const{
    return m_categories_trees_isSet;
}

bool OAIExample2::is_categories_trees_Valid() const{
    return m_categories_trees_isValid;
}

QList<OAIDepartment> OAIExample2::getDepartments() const {
    return m_departments;
}
void OAIExample2::setDepartments(const QList<OAIDepartment> &departments) {
    m_departments = departments;
    m_departments_isSet = true;
}

bool OAIExample2::is_departments_Set() const{
    return m_departments_isSet;
}

bool OAIExample2::is_departments_Valid() const{
    return m_departments_isValid;
}

OAISpecificationFilters OAIExample2::getSpecificationFilters() const {
    return m_specification_filters;
}
void OAIExample2::setSpecificationFilters(const OAISpecificationFilters &specification_filters) {
    m_specification_filters = specification_filters;
    m_specification_filters_isSet = true;
}

bool OAIExample2::is_specification_filters_Set() const{
    return m_specification_filters_isSet;
}

bool OAIExample2::is_specification_filters_Valid() const{
    return m_specification_filters_isValid;
}

bool OAIExample2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_trees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_departments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_specification_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExample2::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_brands_isValid && m_categories_trees_isValid && m_departments_isValid && m_specification_filters_isValid && true;
}

} // namespace OpenAPI
