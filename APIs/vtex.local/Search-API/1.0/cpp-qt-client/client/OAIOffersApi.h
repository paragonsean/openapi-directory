/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOffersApi_H
#define OAI_OAIOffersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI_api_catalog_system_pub_products_offers__productId__get_200_response_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOffersApi : public QObject {
    Q_OBJECT

public:
    OAIOffersApi(const int timeOut = 0);
    ~OAIOffersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  product_id QString [required]
    */
    virtual void apiCatalogSystemPubProductsOffersProductIdGet(const QString &accept, const QString &content_type, const QString &product_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  sku_id QString [required]
    */
    virtual void apiCatalogSystemPubProductsOffersProductIdSkuSkuIdGet(const QString &accept, const QString &content_type, const QString &product_id, const QString &sku_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiCatalogSystemPubProductsOffersProductIdGetCallback(OAIHttpRequestWorker *worker);
    void apiCatalogSystemPubProductsOffersProductIdSkuSkuIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiCatalogSystemPubProductsOffersProductIdGetSignal(QList<OAI_api_catalog_system_pub_products_offers__productId__get_200_response_inner> summary);
    void apiCatalogSystemPubProductsOffersProductIdSkuSkuIdGetSignal(QList<OAI_api_catalog_system_pub_products_offers__productId__get_200_response_inner> summary);


    void apiCatalogSystemPubProductsOffersProductIdGetSignalFull(OAIHttpRequestWorker *worker, QList<OAI_api_catalog_system_pub_products_offers__productId__get_200_response_inner> summary);
    void apiCatalogSystemPubProductsOffersProductIdSkuSkuIdGetSignalFull(OAIHttpRequestWorker *worker, QList<OAI_api_catalog_system_pub_products_offers__productId__get_200_response_inner> summary);

    Q_DECL_DEPRECATED_X("Use apiCatalogSystemPubProductsOffersProductIdGetSignalError() instead")
    void apiCatalogSystemPubProductsOffersProductIdGetSignalE(QList<OAI_api_catalog_system_pub_products_offers__productId__get_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiCatalogSystemPubProductsOffersProductIdGetSignalError(QList<OAI_api_catalog_system_pub_products_offers__productId__get_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiCatalogSystemPubProductsOffersProductIdSkuSkuIdGetSignalError() instead")
    void apiCatalogSystemPubProductsOffersProductIdSkuSkuIdGetSignalE(QList<OAI_api_catalog_system_pub_products_offers__productId__get_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiCatalogSystemPubProductsOffersProductIdSkuSkuIdGetSignalError(QList<OAI_api_catalog_system_pub_products_offers__productId__get_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiCatalogSystemPubProductsOffersProductIdGetSignalErrorFull() instead")
    void apiCatalogSystemPubProductsOffersProductIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiCatalogSystemPubProductsOffersProductIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiCatalogSystemPubProductsOffersProductIdSkuSkuIdGetSignalErrorFull() instead")
    void apiCatalogSystemPubProductsOffersProductIdSkuSkuIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiCatalogSystemPubProductsOffersProductIdSkuSkuIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
