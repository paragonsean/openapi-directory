/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAplicativosDeTV.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAplicativosDeTV::OAIAplicativosDeTV(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAplicativosDeTV::OAIAplicativosDeTV() {
    this->initializeModel();
}

OAIAplicativosDeTV::~OAIAplicativosDeTV() {}

void OAIAplicativosDeTV::initializeModel() {

    m_link_isSet = false;
    m_link_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;
}

void OAIAplicativosDeTV::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAplicativosDeTV::fromJsonObject(QJsonObject json) {

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("Link")]);
    m_link_isSet = !json[QString("Link")].isNull() && m_link_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("Quantity")]);
    m_quantity_isSet = !json[QString("Quantity")].isNull() && m_quantity_isValid;
}

QString OAIAplicativosDeTV::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAplicativosDeTV::asJsonObject() const {
    QJsonObject obj;
    if (m_link_isSet) {
        obj.insert(QString("Link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("Quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    return obj;
}

QString OAIAplicativosDeTV::getLink() const {
    return m_link;
}
void OAIAplicativosDeTV::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIAplicativosDeTV::is_link_Set() const{
    return m_link_isSet;
}

bool OAIAplicativosDeTV::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIAplicativosDeTV::getName() const {
    return m_name;
}
void OAIAplicativosDeTV::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAplicativosDeTV::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAplicativosDeTV::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIAplicativosDeTV::getQuantity() const {
    return m_quantity;
}
void OAIAplicativosDeTV::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIAplicativosDeTV::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIAplicativosDeTV::is_quantity_Valid() const{
    return m_quantity_isValid;
}

bool OAIAplicativosDeTV::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAplicativosDeTV::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_link_isValid && m_name_isValid && m_quantity_isValid && true;
}

} // namespace OpenAPI
