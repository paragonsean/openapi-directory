/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImages_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImages_inner::OAIImages_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImages_inner::OAIImages_inner() {
    this->initializeModel();
}

OAIImages_inner::~OAIImages_inner() {}

void OAIImages_inner::initializeModel() {

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_image_label_isSet = false;
    m_image_label_isValid = false;

    m_image_last_modified_isSet = false;
    m_image_last_modified_isValid = false;

    m_image_tag_isSet = false;
    m_image_tag_isValid = false;

    m_image_text_isSet = false;
    m_image_text_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;
}

void OAIImages_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImages_inner::fromJsonObject(QJsonObject json) {

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("imageId")]);
    m_image_id_isSet = !json[QString("imageId")].isNull() && m_image_id_isValid;

    m_image_label_isValid = ::OpenAPI::fromJsonValue(m_image_label, json[QString("imageLabel")]);
    m_image_label_isSet = !json[QString("imageLabel")].isNull() && m_image_label_isValid;

    m_image_last_modified_isValid = ::OpenAPI::fromJsonValue(m_image_last_modified, json[QString("imageLastModified")]);
    m_image_last_modified_isSet = !json[QString("imageLastModified")].isNull() && m_image_last_modified_isValid;

    m_image_tag_isValid = ::OpenAPI::fromJsonValue(m_image_tag, json[QString("imageTag")]);
    m_image_tag_isSet = !json[QString("imageTag")].isNull() && m_image_tag_isValid;

    m_image_text_isValid = ::OpenAPI::fromJsonValue(m_image_text, json[QString("imageText")]);
    m_image_text_isSet = !json[QString("imageText")].isNull() && m_image_text_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;
}

QString OAIImages_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImages_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_image_id_isSet) {
        obj.insert(QString("imageId"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_image_label_isSet) {
        obj.insert(QString("imageLabel"), ::OpenAPI::toJsonValue(m_image_label));
    }
    if (m_image_last_modified_isSet) {
        obj.insert(QString("imageLastModified"), ::OpenAPI::toJsonValue(m_image_last_modified));
    }
    if (m_image_tag_isSet) {
        obj.insert(QString("imageTag"), ::OpenAPI::toJsonValue(m_image_tag));
    }
    if (m_image_text_isSet) {
        obj.insert(QString("imageText"), ::OpenAPI::toJsonValue(m_image_text));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    return obj;
}

QString OAIImages_inner::getImageId() const {
    return m_image_id;
}
void OAIImages_inner::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAIImages_inner::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAIImages_inner::is_image_id_Valid() const{
    return m_image_id_isValid;
}

QString OAIImages_inner::getImageLabel() const {
    return m_image_label;
}
void OAIImages_inner::setImageLabel(const QString &image_label) {
    m_image_label = image_label;
    m_image_label_isSet = true;
}

bool OAIImages_inner::is_image_label_Set() const{
    return m_image_label_isSet;
}

bool OAIImages_inner::is_image_label_Valid() const{
    return m_image_label_isValid;
}

QString OAIImages_inner::getImageLastModified() const {
    return m_image_last_modified;
}
void OAIImages_inner::setImageLastModified(const QString &image_last_modified) {
    m_image_last_modified = image_last_modified;
    m_image_last_modified_isSet = true;
}

bool OAIImages_inner::is_image_last_modified_Set() const{
    return m_image_last_modified_isSet;
}

bool OAIImages_inner::is_image_last_modified_Valid() const{
    return m_image_last_modified_isValid;
}

QString OAIImages_inner::getImageTag() const {
    return m_image_tag;
}
void OAIImages_inner::setImageTag(const QString &image_tag) {
    m_image_tag = image_tag;
    m_image_tag_isSet = true;
}

bool OAIImages_inner::is_image_tag_Set() const{
    return m_image_tag_isSet;
}

bool OAIImages_inner::is_image_tag_Valid() const{
    return m_image_tag_isValid;
}

QString OAIImages_inner::getImageText() const {
    return m_image_text;
}
void OAIImages_inner::setImageText(const QString &image_text) {
    m_image_text = image_text;
    m_image_text_isSet = true;
}

bool OAIImages_inner::is_image_text_Set() const{
    return m_image_text_isSet;
}

bool OAIImages_inner::is_image_text_Valid() const{
    return m_image_text_isValid;
}

QString OAIImages_inner::getImageUrl() const {
    return m_image_url;
}
void OAIImages_inner::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIImages_inner::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIImages_inner::is_image_url_Valid() const{
    return m_image_url_isValid;
}

bool OAIImages_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImages_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_id_isValid && m_image_label_isValid && m_image_last_modified_isValid && m_image_tag_isValid && m_image_text_isValid && m_image_url_isValid && true;
}

} // namespace OpenAPI
