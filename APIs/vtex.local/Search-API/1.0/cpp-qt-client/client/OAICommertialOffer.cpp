/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommertialOffer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommertialOffer::OAICommertialOffer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommertialOffer::OAICommertialOffer() {
    this->initializeModel();
}

OAICommertialOffer::~OAICommertialOffer() {}

void OAICommertialOffer::initializeModel() {

    m_available_quantity_isSet = false;
    m_available_quantity_isValid = false;

    m_buy_together_isSet = false;
    m_buy_together_isValid = false;

    m_cache_version_used_to_call_checkout_isSet = false;
    m_cache_version_used_to_call_checkout_isValid = false;

    m_delivery_sla_samples_isSet = false;
    m_delivery_sla_samples_isValid = false;

    m_delivery_sla_samples_per_region_isSet = false;
    m_delivery_sla_samples_per_region_isValid = false;

    m_discount_high_light_isSet = false;
    m_discount_high_light_isValid = false;

    m_get_info_error_message_isSet = false;
    m_get_info_error_message_isValid = false;

    m_gift_sku_ids_isSet = false;
    m_gift_sku_ids_isValid = false;

    m_installments_isSet = false;
    m_installments_isValid = false;

    m_is_available_isSet = false;
    m_is_available_isValid = false;

    m_item_metadata_attachment_isSet = false;
    m_item_metadata_attachment_isValid = false;

    m_list_price_isSet = false;
    m_list_price_isValid = false;

    m_payment_options_isSet = false;
    m_payment_options_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_valid_until_isSet = false;
    m_price_valid_until_isValid = false;

    m_price_without_discount_isSet = false;
    m_price_without_discount_isValid = false;

    m_reward_value_isSet = false;
    m_reward_value_isValid = false;

    m_sale_channel_isSet = false;
    m_sale_channel_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_teasers_isSet = false;
    m_teasers_isValid = false;
}

void OAICommertialOffer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommertialOffer::fromJsonObject(QJsonObject json) {

    m_available_quantity_isValid = ::OpenAPI::fromJsonValue(m_available_quantity, json[QString("AvailableQuantity")]);
    m_available_quantity_isSet = !json[QString("AvailableQuantity")].isNull() && m_available_quantity_isValid;

    m_buy_together_isValid = ::OpenAPI::fromJsonValue(m_buy_together, json[QString("BuyTogether")]);
    m_buy_together_isSet = !json[QString("BuyTogether")].isNull() && m_buy_together_isValid;

    m_cache_version_used_to_call_checkout_isValid = ::OpenAPI::fromJsonValue(m_cache_version_used_to_call_checkout, json[QString("CacheVersionUsedToCallCheckout")]);
    m_cache_version_used_to_call_checkout_isSet = !json[QString("CacheVersionUsedToCallCheckout")].isNull() && m_cache_version_used_to_call_checkout_isValid;

    m_delivery_sla_samples_isValid = ::OpenAPI::fromJsonValue(m_delivery_sla_samples, json[QString("DeliverySlaSamples")]);
    m_delivery_sla_samples_isSet = !json[QString("DeliverySlaSamples")].isNull() && m_delivery_sla_samples_isValid;

    m_delivery_sla_samples_per_region_isValid = ::OpenAPI::fromJsonValue(m_delivery_sla_samples_per_region, json[QString("DeliverySlaSamplesPerRegion")]);
    m_delivery_sla_samples_per_region_isSet = !json[QString("DeliverySlaSamplesPerRegion")].isNull() && m_delivery_sla_samples_per_region_isValid;

    m_discount_high_light_isValid = ::OpenAPI::fromJsonValue(m_discount_high_light, json[QString("DiscountHighLight")]);
    m_discount_high_light_isSet = !json[QString("DiscountHighLight")].isNull() && m_discount_high_light_isValid;

    m_get_info_error_message_isValid = ::OpenAPI::fromJsonValue(m_get_info_error_message, json[QString("GetInfoErrorMessage")]);
    m_get_info_error_message_isSet = !json[QString("GetInfoErrorMessage")].isNull() && m_get_info_error_message_isValid;

    m_gift_sku_ids_isValid = ::OpenAPI::fromJsonValue(m_gift_sku_ids, json[QString("GiftSkuIds")]);
    m_gift_sku_ids_isSet = !json[QString("GiftSkuIds")].isNull() && m_gift_sku_ids_isValid;

    m_installments_isValid = ::OpenAPI::fromJsonValue(m_installments, json[QString("Installments")]);
    m_installments_isSet = !json[QString("Installments")].isNull() && m_installments_isValid;

    m_is_available_isValid = ::OpenAPI::fromJsonValue(m_is_available, json[QString("IsAvailable")]);
    m_is_available_isSet = !json[QString("IsAvailable")].isNull() && m_is_available_isValid;

    m_item_metadata_attachment_isValid = ::OpenAPI::fromJsonValue(m_item_metadata_attachment, json[QString("ItemMetadataAttachment")]);
    m_item_metadata_attachment_isSet = !json[QString("ItemMetadataAttachment")].isNull() && m_item_metadata_attachment_isValid;

    m_list_price_isValid = ::OpenAPI::fromJsonValue(m_list_price, json[QString("ListPrice")]);
    m_list_price_isSet = !json[QString("ListPrice")].isNull() && m_list_price_isValid;

    m_payment_options_isValid = ::OpenAPI::fromJsonValue(m_payment_options, json[QString("PaymentOptions")]);
    m_payment_options_isSet = !json[QString("PaymentOptions")].isNull() && m_payment_options_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("Price")]);
    m_price_isSet = !json[QString("Price")].isNull() && m_price_isValid;

    m_price_valid_until_isValid = ::OpenAPI::fromJsonValue(m_price_valid_until, json[QString("PriceValidUntil")]);
    m_price_valid_until_isSet = !json[QString("PriceValidUntil")].isNull() && m_price_valid_until_isValid;

    m_price_without_discount_isValid = ::OpenAPI::fromJsonValue(m_price_without_discount, json[QString("PriceWithoutDiscount")]);
    m_price_without_discount_isSet = !json[QString("PriceWithoutDiscount")].isNull() && m_price_without_discount_isValid;

    m_reward_value_isValid = ::OpenAPI::fromJsonValue(m_reward_value, json[QString("RewardValue")]);
    m_reward_value_isSet = !json[QString("RewardValue")].isNull() && m_reward_value_isValid;

    m_sale_channel_isValid = ::OpenAPI::fromJsonValue(m_sale_channel, json[QString("SaleChannel")]);
    m_sale_channel_isSet = !json[QString("SaleChannel")].isNull() && m_sale_channel_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("Tax")]);
    m_tax_isSet = !json[QString("Tax")].isNull() && m_tax_isValid;

    m_teasers_isValid = ::OpenAPI::fromJsonValue(m_teasers, json[QString("Teasers")]);
    m_teasers_isSet = !json[QString("Teasers")].isNull() && m_teasers_isValid;
}

QString OAICommertialOffer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommertialOffer::asJsonObject() const {
    QJsonObject obj;
    if (m_available_quantity_isSet) {
        obj.insert(QString("AvailableQuantity"), ::OpenAPI::toJsonValue(m_available_quantity));
    }
    if (m_buy_together.size() > 0) {
        obj.insert(QString("BuyTogether"), ::OpenAPI::toJsonValue(m_buy_together));
    }
    if (m_cache_version_used_to_call_checkout_isSet) {
        obj.insert(QString("CacheVersionUsedToCallCheckout"), ::OpenAPI::toJsonValue(m_cache_version_used_to_call_checkout));
    }
    if (m_delivery_sla_samples.size() > 0) {
        obj.insert(QString("DeliverySlaSamples"), ::OpenAPI::toJsonValue(m_delivery_sla_samples));
    }
    if (m_delivery_sla_samples_per_region.isSet()) {
        obj.insert(QString("DeliverySlaSamplesPerRegion"), ::OpenAPI::toJsonValue(m_delivery_sla_samples_per_region));
    }
    if (m_discount_high_light.size() > 0) {
        obj.insert(QString("DiscountHighLight"), ::OpenAPI::toJsonValue(m_discount_high_light));
    }
    if (m_get_info_error_message_isSet) {
        obj.insert(QString("GetInfoErrorMessage"), ::OpenAPI::toJsonValue(m_get_info_error_message));
    }
    if (m_gift_sku_ids.size() > 0) {
        obj.insert(QString("GiftSkuIds"), ::OpenAPI::toJsonValue(m_gift_sku_ids));
    }
    if (m_installments.size() > 0) {
        obj.insert(QString("Installments"), ::OpenAPI::toJsonValue(m_installments));
    }
    if (m_is_available_isSet) {
        obj.insert(QString("IsAvailable"), ::OpenAPI::toJsonValue(m_is_available));
    }
    if (m_item_metadata_attachment.size() > 0) {
        obj.insert(QString("ItemMetadataAttachment"), ::OpenAPI::toJsonValue(m_item_metadata_attachment));
    }
    if (m_list_price_isSet) {
        obj.insert(QString("ListPrice"), ::OpenAPI::toJsonValue(m_list_price));
    }
    if (m_payment_options.isSet()) {
        obj.insert(QString("PaymentOptions"), ::OpenAPI::toJsonValue(m_payment_options));
    }
    if (m_price_isSet) {
        obj.insert(QString("Price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_valid_until_isSet) {
        obj.insert(QString("PriceValidUntil"), ::OpenAPI::toJsonValue(m_price_valid_until));
    }
    if (m_price_without_discount_isSet) {
        obj.insert(QString("PriceWithoutDiscount"), ::OpenAPI::toJsonValue(m_price_without_discount));
    }
    if (m_reward_value_isSet) {
        obj.insert(QString("RewardValue"), ::OpenAPI::toJsonValue(m_reward_value));
    }
    if (m_sale_channel_isSet) {
        obj.insert(QString("SaleChannel"), ::OpenAPI::toJsonValue(m_sale_channel));
    }
    if (m_tax_isSet) {
        obj.insert(QString("Tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_teasers.size() > 0) {
        obj.insert(QString("Teasers"), ::OpenAPI::toJsonValue(m_teasers));
    }
    return obj;
}

qint32 OAICommertialOffer::getAvailableQuantity() const {
    return m_available_quantity;
}
void OAICommertialOffer::setAvailableQuantity(const qint32 &available_quantity) {
    m_available_quantity = available_quantity;
    m_available_quantity_isSet = true;
}

bool OAICommertialOffer::is_available_quantity_Set() const{
    return m_available_quantity_isSet;
}

bool OAICommertialOffer::is_available_quantity_Valid() const{
    return m_available_quantity_isValid;
}

QList<QJsonValue> OAICommertialOffer::getBuyTogether() const {
    return m_buy_together;
}
void OAICommertialOffer::setBuyTogether(const QList<QJsonValue> &buy_together) {
    m_buy_together = buy_together;
    m_buy_together_isSet = true;
}

bool OAICommertialOffer::is_buy_together_Set() const{
    return m_buy_together_isSet;
}

bool OAICommertialOffer::is_buy_together_Valid() const{
    return m_buy_together_isValid;
}

QString OAICommertialOffer::getCacheVersionUsedToCallCheckout() const {
    return m_cache_version_used_to_call_checkout;
}
void OAICommertialOffer::setCacheVersionUsedToCallCheckout(const QString &cache_version_used_to_call_checkout) {
    m_cache_version_used_to_call_checkout = cache_version_used_to_call_checkout;
    m_cache_version_used_to_call_checkout_isSet = true;
}

bool OAICommertialOffer::is_cache_version_used_to_call_checkout_Set() const{
    return m_cache_version_used_to_call_checkout_isSet;
}

bool OAICommertialOffer::is_cache_version_used_to_call_checkout_Valid() const{
    return m_cache_version_used_to_call_checkout_isValid;
}

QList<OAIDeliverySlaSamples_inner> OAICommertialOffer::getDeliverySlaSamples() const {
    return m_delivery_sla_samples;
}
void OAICommertialOffer::setDeliverySlaSamples(const QList<OAIDeliverySlaSamples_inner> &delivery_sla_samples) {
    m_delivery_sla_samples = delivery_sla_samples;
    m_delivery_sla_samples_isSet = true;
}

bool OAICommertialOffer::is_delivery_sla_samples_Set() const{
    return m_delivery_sla_samples_isSet;
}

bool OAICommertialOffer::is_delivery_sla_samples_Valid() const{
    return m_delivery_sla_samples_isValid;
}

OAIDeliverySlaSamplesPerRegion OAICommertialOffer::getDeliverySlaSamplesPerRegion() const {
    return m_delivery_sla_samples_per_region;
}
void OAICommertialOffer::setDeliverySlaSamplesPerRegion(const OAIDeliverySlaSamplesPerRegion &delivery_sla_samples_per_region) {
    m_delivery_sla_samples_per_region = delivery_sla_samples_per_region;
    m_delivery_sla_samples_per_region_isSet = true;
}

bool OAICommertialOffer::is_delivery_sla_samples_per_region_Set() const{
    return m_delivery_sla_samples_per_region_isSet;
}

bool OAICommertialOffer::is_delivery_sla_samples_per_region_Valid() const{
    return m_delivery_sla_samples_per_region_isValid;
}

QList<QJsonValue> OAICommertialOffer::getDiscountHighLight() const {
    return m_discount_high_light;
}
void OAICommertialOffer::setDiscountHighLight(const QList<QJsonValue> &discount_high_light) {
    m_discount_high_light = discount_high_light;
    m_discount_high_light_isSet = true;
}

bool OAICommertialOffer::is_discount_high_light_Set() const{
    return m_discount_high_light_isSet;
}

bool OAICommertialOffer::is_discount_high_light_Valid() const{
    return m_discount_high_light_isValid;
}

QString OAICommertialOffer::getGetInfoErrorMessage() const {
    return m_get_info_error_message;
}
void OAICommertialOffer::setGetInfoErrorMessage(const QString &get_info_error_message) {
    m_get_info_error_message = get_info_error_message;
    m_get_info_error_message_isSet = true;
}

bool OAICommertialOffer::is_get_info_error_message_Set() const{
    return m_get_info_error_message_isSet;
}

bool OAICommertialOffer::is_get_info_error_message_Valid() const{
    return m_get_info_error_message_isValid;
}

QList<QJsonValue> OAICommertialOffer::getGiftSkuIds() const {
    return m_gift_sku_ids;
}
void OAICommertialOffer::setGiftSkuIds(const QList<QJsonValue> &gift_sku_ids) {
    m_gift_sku_ids = gift_sku_ids;
    m_gift_sku_ids_isSet = true;
}

bool OAICommertialOffer::is_gift_sku_ids_Set() const{
    return m_gift_sku_ids_isSet;
}

bool OAICommertialOffer::is_gift_sku_ids_Valid() const{
    return m_gift_sku_ids_isValid;
}

QList<OAIInstallments_inner> OAICommertialOffer::getInstallments() const {
    return m_installments;
}
void OAICommertialOffer::setInstallments(const QList<OAIInstallments_inner> &installments) {
    m_installments = installments;
    m_installments_isSet = true;
}

bool OAICommertialOffer::is_installments_Set() const{
    return m_installments_isSet;
}

bool OAICommertialOffer::is_installments_Valid() const{
    return m_installments_isValid;
}

bool OAICommertialOffer::isIsAvailable() const {
    return m_is_available;
}
void OAICommertialOffer::setIsAvailable(const bool &is_available) {
    m_is_available = is_available;
    m_is_available_isSet = true;
}

bool OAICommertialOffer::is_is_available_Set() const{
    return m_is_available_isSet;
}

bool OAICommertialOffer::is_is_available_Valid() const{
    return m_is_available_isValid;
}

QList<QJsonValue> OAICommertialOffer::getItemMetadataAttachment() const {
    return m_item_metadata_attachment;
}
void OAICommertialOffer::setItemMetadataAttachment(const QList<QJsonValue> &item_metadata_attachment) {
    m_item_metadata_attachment = item_metadata_attachment;
    m_item_metadata_attachment_isSet = true;
}

bool OAICommertialOffer::is_item_metadata_attachment_Set() const{
    return m_item_metadata_attachment_isSet;
}

bool OAICommertialOffer::is_item_metadata_attachment_Valid() const{
    return m_item_metadata_attachment_isValid;
}

double OAICommertialOffer::getListPrice() const {
    return m_list_price;
}
void OAICommertialOffer::setListPrice(const double &list_price) {
    m_list_price = list_price;
    m_list_price_isSet = true;
}

bool OAICommertialOffer::is_list_price_Set() const{
    return m_list_price_isSet;
}

bool OAICommertialOffer::is_list_price_Valid() const{
    return m_list_price_isValid;
}

OAIPaymentOptions OAICommertialOffer::getPaymentOptions() const {
    return m_payment_options;
}
void OAICommertialOffer::setPaymentOptions(const OAIPaymentOptions &payment_options) {
    m_payment_options = payment_options;
    m_payment_options_isSet = true;
}

bool OAICommertialOffer::is_payment_options_Set() const{
    return m_payment_options_isSet;
}

bool OAICommertialOffer::is_payment_options_Valid() const{
    return m_payment_options_isValid;
}

double OAICommertialOffer::getPrice() const {
    return m_price;
}
void OAICommertialOffer::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAICommertialOffer::is_price_Set() const{
    return m_price_isSet;
}

bool OAICommertialOffer::is_price_Valid() const{
    return m_price_isValid;
}

QString OAICommertialOffer::getPriceValidUntil() const {
    return m_price_valid_until;
}
void OAICommertialOffer::setPriceValidUntil(const QString &price_valid_until) {
    m_price_valid_until = price_valid_until;
    m_price_valid_until_isSet = true;
}

bool OAICommertialOffer::is_price_valid_until_Set() const{
    return m_price_valid_until_isSet;
}

bool OAICommertialOffer::is_price_valid_until_Valid() const{
    return m_price_valid_until_isValid;
}

double OAICommertialOffer::getPriceWithoutDiscount() const {
    return m_price_without_discount;
}
void OAICommertialOffer::setPriceWithoutDiscount(const double &price_without_discount) {
    m_price_without_discount = price_without_discount;
    m_price_without_discount_isSet = true;
}

bool OAICommertialOffer::is_price_without_discount_Set() const{
    return m_price_without_discount_isSet;
}

bool OAICommertialOffer::is_price_without_discount_Valid() const{
    return m_price_without_discount_isValid;
}

double OAICommertialOffer::getRewardValue() const {
    return m_reward_value;
}
void OAICommertialOffer::setRewardValue(const double &reward_value) {
    m_reward_value = reward_value;
    m_reward_value_isSet = true;
}

bool OAICommertialOffer::is_reward_value_Set() const{
    return m_reward_value_isSet;
}

bool OAICommertialOffer::is_reward_value_Valid() const{
    return m_reward_value_isValid;
}

qint32 OAICommertialOffer::getSaleChannel() const {
    return m_sale_channel;
}
void OAICommertialOffer::setSaleChannel(const qint32 &sale_channel) {
    m_sale_channel = sale_channel;
    m_sale_channel_isSet = true;
}

bool OAICommertialOffer::is_sale_channel_Set() const{
    return m_sale_channel_isSet;
}

bool OAICommertialOffer::is_sale_channel_Valid() const{
    return m_sale_channel_isValid;
}

double OAICommertialOffer::getTax() const {
    return m_tax;
}
void OAICommertialOffer::setTax(const double &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAICommertialOffer::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAICommertialOffer::is_tax_Valid() const{
    return m_tax_isValid;
}

QList<QJsonValue> OAICommertialOffer::getTeasers() const {
    return m_teasers;
}
void OAICommertialOffer::setTeasers(const QList<QJsonValue> &teasers) {
    m_teasers = teasers;
    m_teasers_isSet = true;
}

bool OAICommertialOffer::is_teasers_Set() const{
    return m_teasers_isSet;
}

bool OAICommertialOffer::is_teasers_Valid() const{
    return m_teasers_isValid;
}

bool OAICommertialOffer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buy_together.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_version_used_to_call_checkout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_sla_samples.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_sla_samples_per_region.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_high_light.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_get_info_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_sku_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_installments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_metadata_attachment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_valid_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_without_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teasers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommertialOffer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_quantity_isValid && m_buy_together_isValid && m_cache_version_used_to_call_checkout_isValid && m_delivery_sla_samples_isValid && m_delivery_sla_samples_per_region_isValid && m_discount_high_light_isValid && m_get_info_error_message_isValid && m_gift_sku_ids_isValid && m_installments_isValid && m_is_available_isValid && m_item_metadata_attachment_isValid && m_list_price_isValid && m_payment_options_isValid && m_price_isValid && m_price_valid_until_isValid && m_price_without_discount_isValid && m_reward_value_isValid && m_sale_channel_isValid && m_tax_isValid && m_teasers_isValid && true;
}

} // namespace OpenAPI
