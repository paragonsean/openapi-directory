/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICommertialOffer.h
 *
 * AKA Commertial Condition.
 */

#ifndef OAICommertialOffer_H
#define OAICommertialOffer_H

#include <QJsonObject>

#include "OAIDeliverySlaSamplesPerRegion.h"
#include "OAIDeliverySlaSamples_inner.h"
#include "OAIInstallments_inner.h"
#include "OAIPaymentOptions.h"
#include <QJsonValue>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDeliverySlaSamples_inner;
class OAIDeliverySlaSamplesPerRegion;
class OAIInstallments_inner;
class OAIPaymentOptions;

class OAICommertialOffer : public OAIObject {
public:
    OAICommertialOffer();
    OAICommertialOffer(QString json);
    ~OAICommertialOffer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAvailableQuantity() const;
    void setAvailableQuantity(const qint32 &available_quantity);
    bool is_available_quantity_Set() const;
    bool is_available_quantity_Valid() const;

    QList<QJsonValue> getBuyTogether() const;
    void setBuyTogether(const QList<QJsonValue> &buy_together);
    bool is_buy_together_Set() const;
    bool is_buy_together_Valid() const;

    QString getCacheVersionUsedToCallCheckout() const;
    void setCacheVersionUsedToCallCheckout(const QString &cache_version_used_to_call_checkout);
    bool is_cache_version_used_to_call_checkout_Set() const;
    bool is_cache_version_used_to_call_checkout_Valid() const;

    QList<OAIDeliverySlaSamples_inner> getDeliverySlaSamples() const;
    void setDeliverySlaSamples(const QList<OAIDeliverySlaSamples_inner> &delivery_sla_samples);
    bool is_delivery_sla_samples_Set() const;
    bool is_delivery_sla_samples_Valid() const;

    OAIDeliverySlaSamplesPerRegion getDeliverySlaSamplesPerRegion() const;
    void setDeliverySlaSamplesPerRegion(const OAIDeliverySlaSamplesPerRegion &delivery_sla_samples_per_region);
    bool is_delivery_sla_samples_per_region_Set() const;
    bool is_delivery_sla_samples_per_region_Valid() const;

    QList<QJsonValue> getDiscountHighLight() const;
    void setDiscountHighLight(const QList<QJsonValue> &discount_high_light);
    bool is_discount_high_light_Set() const;
    bool is_discount_high_light_Valid() const;

    QString getGetInfoErrorMessage() const;
    void setGetInfoErrorMessage(const QString &get_info_error_message);
    bool is_get_info_error_message_Set() const;
    bool is_get_info_error_message_Valid() const;

    QList<QJsonValue> getGiftSkuIds() const;
    void setGiftSkuIds(const QList<QJsonValue> &gift_sku_ids);
    bool is_gift_sku_ids_Set() const;
    bool is_gift_sku_ids_Valid() const;

    QList<OAIInstallments_inner> getInstallments() const;
    void setInstallments(const QList<OAIInstallments_inner> &installments);
    bool is_installments_Set() const;
    bool is_installments_Valid() const;

    bool isIsAvailable() const;
    void setIsAvailable(const bool &is_available);
    bool is_is_available_Set() const;
    bool is_is_available_Valid() const;

    QList<QJsonValue> getItemMetadataAttachment() const;
    void setItemMetadataAttachment(const QList<QJsonValue> &item_metadata_attachment);
    bool is_item_metadata_attachment_Set() const;
    bool is_item_metadata_attachment_Valid() const;

    double getListPrice() const;
    void setListPrice(const double &list_price);
    bool is_list_price_Set() const;
    bool is_list_price_Valid() const;

    OAIPaymentOptions getPaymentOptions() const;
    void setPaymentOptions(const OAIPaymentOptions &payment_options);
    bool is_payment_options_Set() const;
    bool is_payment_options_Valid() const;

    double getPrice() const;
    void setPrice(const double &price);
    bool is_price_Set() const;
    bool is_price_Valid() const;

    QString getPriceValidUntil() const;
    void setPriceValidUntil(const QString &price_valid_until);
    bool is_price_valid_until_Set() const;
    bool is_price_valid_until_Valid() const;

    double getPriceWithoutDiscount() const;
    void setPriceWithoutDiscount(const double &price_without_discount);
    bool is_price_without_discount_Set() const;
    bool is_price_without_discount_Valid() const;

    double getRewardValue() const;
    void setRewardValue(const double &reward_value);
    bool is_reward_value_Set() const;
    bool is_reward_value_Valid() const;

    qint32 getSaleChannel() const;
    void setSaleChannel(const qint32 &sale_channel);
    bool is_sale_channel_Set() const;
    bool is_sale_channel_Valid() const;

    double getTax() const;
    void setTax(const double &tax);
    bool is_tax_Set() const;
    bool is_tax_Valid() const;

    QList<QJsonValue> getTeasers() const;
    void setTeasers(const QList<QJsonValue> &teasers);
    bool is_teasers_Set() const;
    bool is_teasers_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_available_quantity;
    bool m_available_quantity_isSet;
    bool m_available_quantity_isValid;

    QList<QJsonValue> m_buy_together;
    bool m_buy_together_isSet;
    bool m_buy_together_isValid;

    QString m_cache_version_used_to_call_checkout;
    bool m_cache_version_used_to_call_checkout_isSet;
    bool m_cache_version_used_to_call_checkout_isValid;

    QList<OAIDeliverySlaSamples_inner> m_delivery_sla_samples;
    bool m_delivery_sla_samples_isSet;
    bool m_delivery_sla_samples_isValid;

    OAIDeliverySlaSamplesPerRegion m_delivery_sla_samples_per_region;
    bool m_delivery_sla_samples_per_region_isSet;
    bool m_delivery_sla_samples_per_region_isValid;

    QList<QJsonValue> m_discount_high_light;
    bool m_discount_high_light_isSet;
    bool m_discount_high_light_isValid;

    QString m_get_info_error_message;
    bool m_get_info_error_message_isSet;
    bool m_get_info_error_message_isValid;

    QList<QJsonValue> m_gift_sku_ids;
    bool m_gift_sku_ids_isSet;
    bool m_gift_sku_ids_isValid;

    QList<OAIInstallments_inner> m_installments;
    bool m_installments_isSet;
    bool m_installments_isValid;

    bool m_is_available;
    bool m_is_available_isSet;
    bool m_is_available_isValid;

    QList<QJsonValue> m_item_metadata_attachment;
    bool m_item_metadata_attachment_isSet;
    bool m_item_metadata_attachment_isValid;

    double m_list_price;
    bool m_list_price_isSet;
    bool m_list_price_isValid;

    OAIPaymentOptions m_payment_options;
    bool m_payment_options_isSet;
    bool m_payment_options_isValid;

    double m_price;
    bool m_price_isSet;
    bool m_price_isValid;

    QString m_price_valid_until;
    bool m_price_valid_until_isSet;
    bool m_price_valid_until_isValid;

    double m_price_without_discount;
    bool m_price_without_discount_isSet;
    bool m_price_without_discount_isValid;

    double m_reward_value;
    bool m_reward_value_isSet;
    bool m_reward_value_isValid;

    qint32 m_sale_channel;
    bool m_sale_channel_isSet;
    bool m_sale_channel_isValid;

    double m_tax;
    bool m_tax_isSet;
    bool m_tax_isValid;

    QList<QJsonValue> m_teasers;
    bool m_teasers_isSet;
    bool m_teasers_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICommertialOffer)

#endif // OAICommertialOffer_H
