/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoriesTrees_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoriesTrees_inner::OAICategoriesTrees_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoriesTrees_inner::OAICategoriesTrees_inner() {
    this->initializeModel();
}

OAICategoriesTrees_inner::~OAICategoriesTrees_inner() {}

void OAICategoriesTrees_inner::initializeModel() {

    m_children_isSet = false;
    m_children_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_link_encoded_isSet = false;
    m_link_encoded_isValid = false;

    m_map_isSet = false;
    m_map_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAICategoriesTrees_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategoriesTrees_inner::fromJsonObject(QJsonObject json) {

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("Children")]);
    m_children_isSet = !json[QString("Children")].isNull() && m_children_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("Link")]);
    m_link_isSet = !json[QString("Link")].isNull() && m_link_isValid;

    m_link_encoded_isValid = ::OpenAPI::fromJsonValue(m_link_encoded, json[QString("LinkEncoded")]);
    m_link_encoded_isSet = !json[QString("LinkEncoded")].isNull() && m_link_encoded_isValid;

    m_map_isValid = ::OpenAPI::fromJsonValue(m_map, json[QString("Map")]);
    m_map_isSet = !json[QString("Map")].isNull() && m_map_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("Quantity")]);
    m_quantity_isSet = !json[QString("Quantity")].isNull() && m_quantity_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAICategoriesTrees_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategoriesTrees_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_children.size() > 0) {
        obj.insert(QString("Children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_link_isSet) {
        obj.insert(QString("Link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_link_encoded_isSet) {
        obj.insert(QString("LinkEncoded"), ::OpenAPI::toJsonValue(m_link_encoded));
    }
    if (m_map_isSet) {
        obj.insert(QString("Map"), ::OpenAPI::toJsonValue(m_map));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("Quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QList<OAIChildren_inner> OAICategoriesTrees_inner::getChildren() const {
    return m_children;
}
void OAICategoriesTrees_inner::setChildren(const QList<OAIChildren_inner> &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAICategoriesTrees_inner::is_children_Set() const{
    return m_children_isSet;
}

bool OAICategoriesTrees_inner::is_children_Valid() const{
    return m_children_isValid;
}

qint32 OAICategoriesTrees_inner::getId() const {
    return m_id;
}
void OAICategoriesTrees_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICategoriesTrees_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAICategoriesTrees_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICategoriesTrees_inner::getLink() const {
    return m_link;
}
void OAICategoriesTrees_inner::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAICategoriesTrees_inner::is_link_Set() const{
    return m_link_isSet;
}

bool OAICategoriesTrees_inner::is_link_Valid() const{
    return m_link_isValid;
}

QString OAICategoriesTrees_inner::getLinkEncoded() const {
    return m_link_encoded;
}
void OAICategoriesTrees_inner::setLinkEncoded(const QString &link_encoded) {
    m_link_encoded = link_encoded;
    m_link_encoded_isSet = true;
}

bool OAICategoriesTrees_inner::is_link_encoded_Set() const{
    return m_link_encoded_isSet;
}

bool OAICategoriesTrees_inner::is_link_encoded_Valid() const{
    return m_link_encoded_isValid;
}

QString OAICategoriesTrees_inner::getMap() const {
    return m_map;
}
void OAICategoriesTrees_inner::setMap(const QString &map) {
    m_map = map;
    m_map_isSet = true;
}

bool OAICategoriesTrees_inner::is_map_Set() const{
    return m_map_isSet;
}

bool OAICategoriesTrees_inner::is_map_Valid() const{
    return m_map_isValid;
}

QString OAICategoriesTrees_inner::getName() const {
    return m_name;
}
void OAICategoriesTrees_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICategoriesTrees_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAICategoriesTrees_inner::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICategoriesTrees_inner::getPosition() const {
    return m_position;
}
void OAICategoriesTrees_inner::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAICategoriesTrees_inner::is_position_Set() const{
    return m_position_isSet;
}

bool OAICategoriesTrees_inner::is_position_Valid() const{
    return m_position_isValid;
}

qint32 OAICategoriesTrees_inner::getQuantity() const {
    return m_quantity;
}
void OAICategoriesTrees_inner::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAICategoriesTrees_inner::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAICategoriesTrees_inner::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAICategoriesTrees_inner::getValue() const {
    return m_value;
}
void OAICategoriesTrees_inner::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAICategoriesTrees_inner::is_value_Set() const{
    return m_value_isSet;
}

bool OAICategoriesTrees_inner::is_value_Valid() const{
    return m_value_isValid;
}

bool OAICategoriesTrees_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_children.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_encoded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategoriesTrees_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_children_isValid && m_id_isValid && m_link_isValid && m_link_encoded_isValid && m_map_isValid && m_name_isValid && m_position_isValid && m_quantity_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
