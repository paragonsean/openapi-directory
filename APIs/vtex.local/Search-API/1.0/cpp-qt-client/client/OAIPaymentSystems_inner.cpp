/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentSystems_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentSystems_inner::OAIPaymentSystems_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentSystems_inner::OAIPaymentSystems_inner() {
    this->initializeModel();
}

OAIPaymentSystems_inner::~OAIPaymentSystems_inner() {}

void OAIPaymentSystems_inner::initializeModel() {

    m_available_payments_isSet = false;
    m_available_payments_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_custom_isSet = false;
    m_is_custom_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_requires_authentication_isSet = false;
    m_requires_authentication_isValid = false;

    m_requires_document_isSet = false;
    m_requires_document_isValid = false;

    m_string_id_isSet = false;
    m_string_id_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_validator_isSet = false;
    m_validator_isValid = false;
}

void OAIPaymentSystems_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentSystems_inner::fromJsonObject(QJsonObject json) {

    m_available_payments_isValid = ::OpenAPI::fromJsonValue(m_available_payments, json[QString("availablePayments")]);
    m_available_payments_isSet = !json[QString("availablePayments")].isNull() && m_available_payments_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("groupName")]);
    m_group_name_isSet = !json[QString("groupName")].isNull() && m_group_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_custom_isValid = ::OpenAPI::fromJsonValue(m_is_custom, json[QString("isCustom")]);
    m_is_custom_isSet = !json[QString("isCustom")].isNull() && m_is_custom_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_requires_authentication_isValid = ::OpenAPI::fromJsonValue(m_requires_authentication, json[QString("requiresAuthentication")]);
    m_requires_authentication_isSet = !json[QString("requiresAuthentication")].isNull() && m_requires_authentication_isValid;

    m_requires_document_isValid = ::OpenAPI::fromJsonValue(m_requires_document, json[QString("requiresDocument")]);
    m_requires_document_isSet = !json[QString("requiresDocument")].isNull() && m_requires_document_isValid;

    m_string_id_isValid = ::OpenAPI::fromJsonValue(m_string_id, json[QString("stringId")]);
    m_string_id_isSet = !json[QString("stringId")].isNull() && m_string_id_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_validator_isValid = ::OpenAPI::fromJsonValue(m_validator, json[QString("validator")]);
    m_validator_isSet = !json[QString("validator")].isNull() && m_validator_isValid;
}

QString OAIPaymentSystems_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentSystems_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_available_payments_isSet) {
        obj.insert(QString("availablePayments"), ::OpenAPI::toJsonValue(m_available_payments));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("groupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_custom_isSet) {
        obj.insert(QString("isCustom"), ::OpenAPI::toJsonValue(m_is_custom));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_requires_authentication_isSet) {
        obj.insert(QString("requiresAuthentication"), ::OpenAPI::toJsonValue(m_requires_authentication));
    }
    if (m_requires_document_isSet) {
        obj.insert(QString("requiresDocument"), ::OpenAPI::toJsonValue(m_requires_document));
    }
    if (m_string_id_isSet) {
        obj.insert(QString("stringId"), ::OpenAPI::toJsonValue(m_string_id));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_validator_isSet) {
        obj.insert(QString("validator"), ::OpenAPI::toJsonValue(m_validator));
    }
    return obj;
}

QString OAIPaymentSystems_inner::getAvailablePayments() const {
    return m_available_payments;
}
void OAIPaymentSystems_inner::setAvailablePayments(const QString &available_payments) {
    m_available_payments = available_payments;
    m_available_payments_isSet = true;
}

bool OAIPaymentSystems_inner::is_available_payments_Set() const{
    return m_available_payments_isSet;
}

bool OAIPaymentSystems_inner::is_available_payments_Valid() const{
    return m_available_payments_isValid;
}

QString OAIPaymentSystems_inner::getDescription() const {
    return m_description;
}
void OAIPaymentSystems_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPaymentSystems_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPaymentSystems_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPaymentSystems_inner::getDueDate() const {
    return m_due_date;
}
void OAIPaymentSystems_inner::setDueDate(const QString &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIPaymentSystems_inner::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIPaymentSystems_inner::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QString OAIPaymentSystems_inner::getGroupName() const {
    return m_group_name;
}
void OAIPaymentSystems_inner::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIPaymentSystems_inner::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIPaymentSystems_inner::is_group_name_Valid() const{
    return m_group_name_isValid;
}

qint32 OAIPaymentSystems_inner::getId() const {
    return m_id;
}
void OAIPaymentSystems_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPaymentSystems_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPaymentSystems_inner::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPaymentSystems_inner::isIsCustom() const {
    return m_is_custom;
}
void OAIPaymentSystems_inner::setIsCustom(const bool &is_custom) {
    m_is_custom = is_custom;
    m_is_custom_isSet = true;
}

bool OAIPaymentSystems_inner::is_is_custom_Set() const{
    return m_is_custom_isSet;
}

bool OAIPaymentSystems_inner::is_is_custom_Valid() const{
    return m_is_custom_isValid;
}

QString OAIPaymentSystems_inner::getName() const {
    return m_name;
}
void OAIPaymentSystems_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPaymentSystems_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPaymentSystems_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPaymentSystems_inner::isRequiresAuthentication() const {
    return m_requires_authentication;
}
void OAIPaymentSystems_inner::setRequiresAuthentication(const bool &requires_authentication) {
    m_requires_authentication = requires_authentication;
    m_requires_authentication_isSet = true;
}

bool OAIPaymentSystems_inner::is_requires_authentication_Set() const{
    return m_requires_authentication_isSet;
}

bool OAIPaymentSystems_inner::is_requires_authentication_Valid() const{
    return m_requires_authentication_isValid;
}

bool OAIPaymentSystems_inner::isRequiresDocument() const {
    return m_requires_document;
}
void OAIPaymentSystems_inner::setRequiresDocument(const bool &requires_document) {
    m_requires_document = requires_document;
    m_requires_document_isSet = true;
}

bool OAIPaymentSystems_inner::is_requires_document_Set() const{
    return m_requires_document_isSet;
}

bool OAIPaymentSystems_inner::is_requires_document_Valid() const{
    return m_requires_document_isValid;
}

QString OAIPaymentSystems_inner::getStringId() const {
    return m_string_id;
}
void OAIPaymentSystems_inner::setStringId(const QString &string_id) {
    m_string_id = string_id;
    m_string_id_isSet = true;
}

bool OAIPaymentSystems_inner::is_string_id_Set() const{
    return m_string_id_isSet;
}

bool OAIPaymentSystems_inner::is_string_id_Valid() const{
    return m_string_id_isValid;
}

QString OAIPaymentSystems_inner::getRTemplate() const {
    return m_r_template;
}
void OAIPaymentSystems_inner::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIPaymentSystems_inner::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIPaymentSystems_inner::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QString OAIPaymentSystems_inner::getValidator() const {
    return m_validator;
}
void OAIPaymentSystems_inner::setValidator(const QString &validator) {
    m_validator = validator;
    m_validator_isSet = true;
}

bool OAIPaymentSystems_inner::is_validator_Set() const{
    return m_validator_isSet;
}

bool OAIPaymentSystems_inner::is_validator_Valid() const{
    return m_validator_isValid;
}

bool OAIPaymentSystems_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_payments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_custom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentSystems_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_payments_isValid && m_description_isValid && m_due_date_isValid && m_group_name_isValid && m_id_isValid && m_is_custom_isValid && m_name_isValid && m_requires_authentication_isValid && m_requires_document_isValid && m_string_id_isValid && m_r_template_isValid && m_validator_isValid && true;
}

} // namespace OpenAPI
