/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductSearchWhoBoughtAlsoBought_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductSearchWhoBoughtAlsoBought_200_response_inner::OAIProductSearchWhoBoughtAlsoBought_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductSearchWhoBoughtAlsoBought_200_response_inner::OAIProductSearchWhoBoughtAlsoBought_200_response_inner() {
    this->initializeModel();
}

OAIProductSearchWhoBoughtAlsoBought_200_response_inner::~OAIProductSearchWhoBoughtAlsoBought_200_response_inner() {}

void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::initializeModel() {

    m_all_specifications_isSet = false;
    m_all_specifications_isValid = false;

    m_all_specifications_groups_isSet = false;
    m_all_specifications_groups_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_brand_id_isSet = false;
    m_brand_id_isValid = false;

    m_brand_image_url_isSet = false;
    m_brand_image_url_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_categories_ids_isSet = false;
    m_categories_ids_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_cluster_highlights_isSet = false;
    m_cluster_highlights_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_link_text_isSet = false;
    m_link_text_isValid = false;

    m_meta_tag_description_isSet = false;
    m_meta_tag_description_isValid = false;

    m_product_clusters_isSet = false;
    m_product_clusters_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_product_name_isSet = false;
    m_product_name_isValid = false;

    m_product_reference_isSet = false;
    m_product_reference_isValid = false;

    m_product_reference_code_isSet = false;
    m_product_reference_code_isValid = false;

    m_product_title_isSet = false;
    m_product_title_isValid = false;

    m_release_date_isSet = false;
    m_release_date_isValid = false;

    m_searchable_clusters_isSet = false;
    m_searchable_clusters_isValid = false;
}

void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::fromJsonObject(QJsonObject json) {

    m_all_specifications_isValid = ::OpenAPI::fromJsonValue(m_all_specifications, json[QString("allSpecifications")]);
    m_all_specifications_isSet = !json[QString("allSpecifications")].isNull() && m_all_specifications_isValid;

    m_all_specifications_groups_isValid = ::OpenAPI::fromJsonValue(m_all_specifications_groups, json[QString("allSpecificationsGroups")]);
    m_all_specifications_groups_isSet = !json[QString("allSpecificationsGroups")].isNull() && m_all_specifications_groups_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_brand_id_isValid = ::OpenAPI::fromJsonValue(m_brand_id, json[QString("brandId")]);
    m_brand_id_isSet = !json[QString("brandId")].isNull() && m_brand_id_isValid;

    m_brand_image_url_isValid = ::OpenAPI::fromJsonValue(m_brand_image_url, json[QString("brandImageUrl")]);
    m_brand_image_url_isSet = !json[QString("brandImageUrl")].isNull() && m_brand_image_url_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_categories_ids_isValid = ::OpenAPI::fromJsonValue(m_categories_ids, json[QString("categoriesIds")]);
    m_categories_ids_isSet = !json[QString("categoriesIds")].isNull() && m_categories_ids_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_cluster_highlights_isValid = ::OpenAPI::fromJsonValue(m_cluster_highlights, json[QString("clusterHighlights")]);
    m_cluster_highlights_isSet = !json[QString("clusterHighlights")].isNull() && m_cluster_highlights_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_link_text_isValid = ::OpenAPI::fromJsonValue(m_link_text, json[QString("linkText")]);
    m_link_text_isSet = !json[QString("linkText")].isNull() && m_link_text_isValid;

    m_meta_tag_description_isValid = ::OpenAPI::fromJsonValue(m_meta_tag_description, json[QString("metaTagDescription")]);
    m_meta_tag_description_isSet = !json[QString("metaTagDescription")].isNull() && m_meta_tag_description_isValid;

    m_product_clusters_isValid = ::OpenAPI::fromJsonValue(m_product_clusters, json[QString("productClusters")]);
    m_product_clusters_isSet = !json[QString("productClusters")].isNull() && m_product_clusters_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_product_name_isValid = ::OpenAPI::fromJsonValue(m_product_name, json[QString("productName")]);
    m_product_name_isSet = !json[QString("productName")].isNull() && m_product_name_isValid;

    m_product_reference_isValid = ::OpenAPI::fromJsonValue(m_product_reference, json[QString("productReference")]);
    m_product_reference_isSet = !json[QString("productReference")].isNull() && m_product_reference_isValid;

    m_product_reference_code_isValid = ::OpenAPI::fromJsonValue(m_product_reference_code, json[QString("productReferenceCode")]);
    m_product_reference_code_isSet = !json[QString("productReferenceCode")].isNull() && m_product_reference_code_isValid;

    m_product_title_isValid = ::OpenAPI::fromJsonValue(m_product_title, json[QString("productTitle")]);
    m_product_title_isSet = !json[QString("productTitle")].isNull() && m_product_title_isValid;

    m_release_date_isValid = ::OpenAPI::fromJsonValue(m_release_date, json[QString("releaseDate")]);
    m_release_date_isSet = !json[QString("releaseDate")].isNull() && m_release_date_isValid;

    m_searchable_clusters_isValid = ::OpenAPI::fromJsonValue(m_searchable_clusters, json[QString("searchableClusters")]);
    m_searchable_clusters_isSet = !json[QString("searchableClusters")].isNull() && m_searchable_clusters_isValid;
}

QString OAIProductSearchWhoBoughtAlsoBought_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductSearchWhoBoughtAlsoBought_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_all_specifications.size() > 0) {
        obj.insert(QString("allSpecifications"), ::OpenAPI::toJsonValue(m_all_specifications));
    }
    if (m_all_specifications_groups.size() > 0) {
        obj.insert(QString("allSpecificationsGroups"), ::OpenAPI::toJsonValue(m_all_specifications_groups));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_brand_id_isSet) {
        obj.insert(QString("brandId"), ::OpenAPI::toJsonValue(m_brand_id));
    }
    if (m_brand_image_url_isSet) {
        obj.insert(QString("brandImageUrl"), ::OpenAPI::toJsonValue(m_brand_image_url));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_categories_ids.size() > 0) {
        obj.insert(QString("categoriesIds"), ::OpenAPI::toJsonValue(m_categories_ids));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_cluster_highlights_isSet) {
        obj.insert(QString("clusterHighlights"), ::OpenAPI::toJsonValue(m_cluster_highlights));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_link_text_isSet) {
        obj.insert(QString("linkText"), ::OpenAPI::toJsonValue(m_link_text));
    }
    if (m_meta_tag_description_isSet) {
        obj.insert(QString("metaTagDescription"), ::OpenAPI::toJsonValue(m_meta_tag_description));
    }
    if (m_product_clusters_isSet) {
        obj.insert(QString("productClusters"), ::OpenAPI::toJsonValue(m_product_clusters));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_product_name_isSet) {
        obj.insert(QString("productName"), ::OpenAPI::toJsonValue(m_product_name));
    }
    if (m_product_reference_isSet) {
        obj.insert(QString("productReference"), ::OpenAPI::toJsonValue(m_product_reference));
    }
    if (m_product_reference_code_isSet) {
        obj.insert(QString("productReferenceCode"), ::OpenAPI::toJsonValue(m_product_reference_code));
    }
    if (m_product_title_isSet) {
        obj.insert(QString("productTitle"), ::OpenAPI::toJsonValue(m_product_title));
    }
    if (m_release_date_isSet) {
        obj.insert(QString("releaseDate"), ::OpenAPI::toJsonValue(m_release_date));
    }
    if (m_searchable_clusters_isSet) {
        obj.insert(QString("searchableClusters"), ::OpenAPI::toJsonValue(m_searchable_clusters));
    }
    return obj;
}

QList<QString> OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getAllSpecifications() const {
    return m_all_specifications;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setAllSpecifications(const QList<QString> &all_specifications) {
    m_all_specifications = all_specifications;
    m_all_specifications_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_all_specifications_Set() const{
    return m_all_specifications_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_all_specifications_Valid() const{
    return m_all_specifications_isValid;
}

QList<QString> OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getAllSpecificationsGroups() const {
    return m_all_specifications_groups;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setAllSpecificationsGroups(const QList<QString> &all_specifications_groups) {
    m_all_specifications_groups = all_specifications_groups;
    m_all_specifications_groups_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_all_specifications_groups_Set() const{
    return m_all_specifications_groups_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_all_specifications_groups_Valid() const{
    return m_all_specifications_groups_isValid;
}

QString OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getBrand() const {
    return m_brand;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_brand_Valid() const{
    return m_brand_isValid;
}

qint32 OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getBrandId() const {
    return m_brand_id;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setBrandId(const qint32 &brand_id) {
    m_brand_id = brand_id;
    m_brand_id_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_brand_id_Set() const{
    return m_brand_id_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_brand_id_Valid() const{
    return m_brand_id_isValid;
}

QString OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getBrandImageUrl() const {
    return m_brand_image_url;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setBrandImageUrl(const QString &brand_image_url) {
    m_brand_image_url = brand_image_url;
    m_brand_image_url_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_brand_image_url_Set() const{
    return m_brand_image_url_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_brand_image_url_Valid() const{
    return m_brand_image_url_isValid;
}

QList<QJsonValue> OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getCategories() const {
    return m_categories;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setCategories(const QList<QJsonValue> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_categories_Valid() const{
    return m_categories_isValid;
}

QList<QJsonValue> OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getCategoriesIds() const {
    return m_categories_ids;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setCategoriesIds(const QList<QJsonValue> &categories_ids) {
    m_categories_ids = categories_ids;
    m_categories_ids_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_categories_ids_Set() const{
    return m_categories_ids_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_categories_ids_Valid() const{
    return m_categories_ids_isValid;
}

QString OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getCategoryId() const {
    return m_category_id;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_category_id_Valid() const{
    return m_category_id_isValid;
}

OAIObject OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getClusterHighlights() const {
    return m_cluster_highlights;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setClusterHighlights(const OAIObject &cluster_highlights) {
    m_cluster_highlights = cluster_highlights;
    m_cluster_highlights_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_cluster_highlights_Set() const{
    return m_cluster_highlights_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_cluster_highlights_Valid() const{
    return m_cluster_highlights_isValid;
}

QString OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getDescription() const {
    return m_description;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIItems_inner> OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getItems() const {
    return m_items;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setItems(const QList<OAIItems_inner> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_items_Set() const{
    return m_items_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getLink() const {
    return m_link;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_link_Set() const{
    return m_link_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getLinkText() const {
    return m_link_text;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setLinkText(const QString &link_text) {
    m_link_text = link_text;
    m_link_text_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_link_text_Set() const{
    return m_link_text_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_link_text_Valid() const{
    return m_link_text_isValid;
}

QString OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getMetaTagDescription() const {
    return m_meta_tag_description;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setMetaTagDescription(const QString &meta_tag_description) {
    m_meta_tag_description = meta_tag_description;
    m_meta_tag_description_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_meta_tag_description_Set() const{
    return m_meta_tag_description_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_meta_tag_description_Valid() const{
    return m_meta_tag_description_isValid;
}

OAIObject OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getProductClusters() const {
    return m_product_clusters;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setProductClusters(const OAIObject &product_clusters) {
    m_product_clusters = product_clusters;
    m_product_clusters_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_product_clusters_Set() const{
    return m_product_clusters_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_product_clusters_Valid() const{
    return m_product_clusters_isValid;
}

QString OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getProductId() const {
    return m_product_id;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getProductName() const {
    return m_product_name;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setProductName(const QString &product_name) {
    m_product_name = product_name;
    m_product_name_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_product_name_Set() const{
    return m_product_name_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_product_name_Valid() const{
    return m_product_name_isValid;
}

QString OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getProductReference() const {
    return m_product_reference;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setProductReference(const QString &product_reference) {
    m_product_reference = product_reference;
    m_product_reference_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_product_reference_Set() const{
    return m_product_reference_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_product_reference_Valid() const{
    return m_product_reference_isValid;
}

qint32 OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getProductReferenceCode() const {
    return m_product_reference_code;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setProductReferenceCode(const qint32 &product_reference_code) {
    m_product_reference_code = product_reference_code;
    m_product_reference_code_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_product_reference_code_Set() const{
    return m_product_reference_code_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_product_reference_code_Valid() const{
    return m_product_reference_code_isValid;
}

QString OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getProductTitle() const {
    return m_product_title;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setProductTitle(const QString &product_title) {
    m_product_title = product_title;
    m_product_title_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_product_title_Set() const{
    return m_product_title_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_product_title_Valid() const{
    return m_product_title_isValid;
}

QString OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getReleaseDate() const {
    return m_release_date;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setReleaseDate(const QString &release_date) {
    m_release_date = release_date;
    m_release_date_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_release_date_Set() const{
    return m_release_date_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_release_date_Valid() const{
    return m_release_date_isValid;
}

OAIObject OAIProductSearchWhoBoughtAlsoBought_200_response_inner::getSearchableClusters() const {
    return m_searchable_clusters;
}
void OAIProductSearchWhoBoughtAlsoBought_200_response_inner::setSearchableClusters(const OAIObject &searchable_clusters) {
    m_searchable_clusters = searchable_clusters;
    m_searchable_clusters_isSet = true;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_searchable_clusters_Set() const{
    return m_searchable_clusters_isSet;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::is_searchable_clusters_Valid() const{
    return m_searchable_clusters_isValid;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_specifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_specifications_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_highlights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_tag_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_clusters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_reference_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_searchable_clusters_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductSearchWhoBoughtAlsoBought_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_all_specifications_isValid && m_all_specifications_groups_isValid && m_brand_isValid && m_brand_id_isValid && m_brand_image_url_isValid && m_categories_isValid && m_categories_ids_isValid && m_category_id_isValid && m_cluster_highlights_isValid && m_description_isValid && m_items_isValid && m_link_isValid && m_link_text_isValid && m_meta_tag_description_isValid && m_product_clusters_isValid && m_product_id_isValid && m_product_name_isValid && m_product_reference_isValid && m_product_reference_code_isValid && m_product_title_isValid && m_release_date_isValid && m_searchable_clusters_isValid && true;
}

} // namespace OpenAPI
