/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemsReturned_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemsReturned_inner::OAIItemsReturned_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemsReturned_inner::OAIItemsReturned_inner() {
    this->initializeModel();
}

OAIItemsReturned_inner::~OAIItemsReturned_inner() {}

void OAIItemsReturned_inner::initializeModel() {

    m_criteria_isSet = false;
    m_criteria_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_thumb_isSet = false;
    m_thumb_isValid = false;

    m_thumb_url_isSet = false;
    m_thumb_url_isValid = false;
}

void OAIItemsReturned_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemsReturned_inner::fromJsonObject(QJsonObject json) {

    m_criteria_isValid = ::OpenAPI::fromJsonValue(m_criteria, json[QString("criteria")]);
    m_criteria_isSet = !json[QString("criteria")].isNull() && m_criteria_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_thumb_isValid = ::OpenAPI::fromJsonValue(m_thumb, json[QString("thumb")]);
    m_thumb_isSet = !json[QString("thumb")].isNull() && m_thumb_isValid;

    m_thumb_url_isValid = ::OpenAPI::fromJsonValue(m_thumb_url, json[QString("thumbUrl")]);
    m_thumb_url_isSet = !json[QString("thumbUrl")].isNull() && m_thumb_url_isValid;
}

QString OAIItemsReturned_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemsReturned_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_criteria_isSet) {
        obj.insert(QString("criteria"), ::OpenAPI::toJsonValue(m_criteria));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_thumb_isSet) {
        obj.insert(QString("thumb"), ::OpenAPI::toJsonValue(m_thumb));
    }
    if (m_thumb_url_isSet) {
        obj.insert(QString("thumbUrl"), ::OpenAPI::toJsonValue(m_thumb_url));
    }
    return obj;
}

QString OAIItemsReturned_inner::getCriteria() const {
    return m_criteria;
}
void OAIItemsReturned_inner::setCriteria(const QString &criteria) {
    m_criteria = criteria;
    m_criteria_isSet = true;
}

bool OAIItemsReturned_inner::is_criteria_Set() const{
    return m_criteria_isSet;
}

bool OAIItemsReturned_inner::is_criteria_Valid() const{
    return m_criteria_isValid;
}

QString OAIItemsReturned_inner::getHref() const {
    return m_href;
}
void OAIItemsReturned_inner::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIItemsReturned_inner::is_href_Set() const{
    return m_href_isSet;
}

bool OAIItemsReturned_inner::is_href_Valid() const{
    return m_href_isValid;
}

QList<QJsonValue> OAIItemsReturned_inner::getItems() const {
    return m_items;
}
void OAIItemsReturned_inner::setItems(const QList<QJsonValue> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIItemsReturned_inner::is_items_Set() const{
    return m_items_isSet;
}

bool OAIItemsReturned_inner::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIItemsReturned_inner::getName() const {
    return m_name;
}
void OAIItemsReturned_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIItemsReturned_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIItemsReturned_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIItemsReturned_inner::getThumb() const {
    return m_thumb;
}
void OAIItemsReturned_inner::setThumb(const QString &thumb) {
    m_thumb = thumb;
    m_thumb_isSet = true;
}

bool OAIItemsReturned_inner::is_thumb_Set() const{
    return m_thumb_isSet;
}

bool OAIItemsReturned_inner::is_thumb_Valid() const{
    return m_thumb_isValid;
}

QString OAIItemsReturned_inner::getThumbUrl() const {
    return m_thumb_url;
}
void OAIItemsReturned_inner::setThumbUrl(const QString &thumb_url) {
    m_thumb_url = thumb_url;
    m_thumb_url_isSet = true;
}

bool OAIItemsReturned_inner::is_thumb_url_Set() const{
    return m_thumb_url_isSet;
}

bool OAIItemsReturned_inner::is_thumb_url_Valid() const{
    return m_thumb_url_isValid;
}

bool OAIItemsReturned_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_criteria_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemsReturned_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_criteria_isValid && m_href_isValid && m_items_isValid && m_name_isValid && m_thumb_isValid && m_thumb_url_isValid && true;
}

} // namespace OpenAPI
