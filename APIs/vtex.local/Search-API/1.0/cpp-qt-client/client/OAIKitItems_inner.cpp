/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKitItems_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKitItems_inner::OAIKitItems_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKitItems_inner::OAIKitItems_inner() {
    this->initializeModel();
}

OAIKitItems_inner::~OAIKitItems_inner() {}

void OAIKitItems_inner::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;
}

void OAIKitItems_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKitItems_inner::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;
}

QString OAIKitItems_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKitItems_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    return obj;
}

qint32 OAIKitItems_inner::getAmount() const {
    return m_amount;
}
void OAIKitItems_inner::setAmount(const qint32 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIKitItems_inner::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIKitItems_inner::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIKitItems_inner::getItemId() const {
    return m_item_id;
}
void OAIKitItems_inner::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIKitItems_inner::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIKitItems_inner::is_item_id_Valid() const{
    return m_item_id_isValid;
}

bool OAIKitItems_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKitItems_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_item_id_isValid && true;
}

} // namespace OpenAPI
