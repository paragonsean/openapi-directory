/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICrossSellingApi_H
#define OAI_OAICrossSellingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProductSearchWhoBoughtAlsoBought_200_response_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICrossSellingApi : public QObject {
    Q_OBJECT

public:
    OAICrossSellingApi(const int timeOut = 0);
    ~OAICrossSellingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  product_id qint32 [required]
    */
    virtual void productSearchAccessories(const QString &accept, const QString &content_type, const qint32 &product_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  product_id qint32 [required]
    */
    virtual void productSearchShowTogether(const QString &accept, const QString &content_type, const qint32 &product_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  product_id qint32 [required]
    */
    virtual void productSearchSimilars(const QString &accept, const QString &content_type, const qint32 &product_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  product_id qint32 [required]
    */
    virtual void productSearchSuggestions(const QString &accept, const QString &content_type, const qint32 &product_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  product_id QString [required]
    */
    virtual void productSearchWhoBoughtAlsoBought(const QString &accept, const QString &content_type, const QString &product_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  product_id QString [required]
    */
    virtual void productSearchWhoSawAlsoBought(const QString &accept, const QString &content_type, const QString &product_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  product_id qint32 [required]
    */
    virtual void productSearchWhoSawAlsoSaw(const QString &accept, const QString &content_type, const qint32 &product_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void productSearchAccessoriesCallback(OAIHttpRequestWorker *worker);
    void productSearchShowTogetherCallback(OAIHttpRequestWorker *worker);
    void productSearchSimilarsCallback(OAIHttpRequestWorker *worker);
    void productSearchSuggestionsCallback(OAIHttpRequestWorker *worker);
    void productSearchWhoBoughtAlsoBoughtCallback(OAIHttpRequestWorker *worker);
    void productSearchWhoSawAlsoBoughtCallback(OAIHttpRequestWorker *worker);
    void productSearchWhoSawAlsoSawCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void productSearchAccessoriesSignal();
    void productSearchShowTogetherSignal();
    void productSearchSimilarsSignal();
    void productSearchSuggestionsSignal();
    void productSearchWhoBoughtAlsoBoughtSignal(QList<OAIProductSearchWhoBoughtAlsoBought_200_response_inner> summary);
    void productSearchWhoSawAlsoBoughtSignal(QList<OAIProductSearchWhoBoughtAlsoBought_200_response_inner> summary);
    void productSearchWhoSawAlsoSawSignal(QList<OAIProductSearchWhoBoughtAlsoBought_200_response_inner> summary);


    void productSearchAccessoriesSignalFull(OAIHttpRequestWorker *worker);
    void productSearchShowTogetherSignalFull(OAIHttpRequestWorker *worker);
    void productSearchSimilarsSignalFull(OAIHttpRequestWorker *worker);
    void productSearchSuggestionsSignalFull(OAIHttpRequestWorker *worker);
    void productSearchWhoBoughtAlsoBoughtSignalFull(OAIHttpRequestWorker *worker, QList<OAIProductSearchWhoBoughtAlsoBought_200_response_inner> summary);
    void productSearchWhoSawAlsoBoughtSignalFull(OAIHttpRequestWorker *worker, QList<OAIProductSearchWhoBoughtAlsoBought_200_response_inner> summary);
    void productSearchWhoSawAlsoSawSignalFull(OAIHttpRequestWorker *worker, QList<OAIProductSearchWhoBoughtAlsoBought_200_response_inner> summary);

    Q_DECL_DEPRECATED_X("Use productSearchAccessoriesSignalError() instead")
    void productSearchAccessoriesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productSearchAccessoriesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSearchShowTogetherSignalError() instead")
    void productSearchShowTogetherSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productSearchShowTogetherSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSearchSimilarsSignalError() instead")
    void productSearchSimilarsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productSearchSimilarsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSearchSuggestionsSignalError() instead")
    void productSearchSuggestionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productSearchSuggestionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSearchWhoBoughtAlsoBoughtSignalError() instead")
    void productSearchWhoBoughtAlsoBoughtSignalE(QList<OAIProductSearchWhoBoughtAlsoBought_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productSearchWhoBoughtAlsoBoughtSignalError(QList<OAIProductSearchWhoBoughtAlsoBought_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSearchWhoSawAlsoBoughtSignalError() instead")
    void productSearchWhoSawAlsoBoughtSignalE(QList<OAIProductSearchWhoBoughtAlsoBought_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productSearchWhoSawAlsoBoughtSignalError(QList<OAIProductSearchWhoBoughtAlsoBought_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSearchWhoSawAlsoSawSignalError() instead")
    void productSearchWhoSawAlsoSawSignalE(QList<OAIProductSearchWhoBoughtAlsoBought_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productSearchWhoSawAlsoSawSignalError(QList<OAIProductSearchWhoBoughtAlsoBought_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use productSearchAccessoriesSignalErrorFull() instead")
    void productSearchAccessoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productSearchAccessoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSearchShowTogetherSignalErrorFull() instead")
    void productSearchShowTogetherSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productSearchShowTogetherSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSearchSimilarsSignalErrorFull() instead")
    void productSearchSimilarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productSearchSimilarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSearchSuggestionsSignalErrorFull() instead")
    void productSearchSuggestionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productSearchSuggestionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSearchWhoBoughtAlsoBoughtSignalErrorFull() instead")
    void productSearchWhoBoughtAlsoBoughtSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productSearchWhoBoughtAlsoBoughtSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSearchWhoSawAlsoBoughtSignalErrorFull() instead")
    void productSearchWhoSawAlsoBoughtSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productSearchWhoSawAlsoBoughtSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSearchWhoSawAlsoSawSignalErrorFull() instead")
    void productSearchWhoSawAlsoSawSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productSearchWhoSawAlsoSawSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
