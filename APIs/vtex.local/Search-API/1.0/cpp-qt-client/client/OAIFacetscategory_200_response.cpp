/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacetscategory_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFacetscategory_200_response::OAIFacetscategory_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFacetscategory_200_response::OAIFacetscategory_200_response() {
    this->initializeModel();
}

OAIFacetscategory_200_response::~OAIFacetscategory_200_response() {}

void OAIFacetscategory_200_response::initializeModel() {

    m_brands_isSet = false;
    m_brands_isValid = false;

    m_categories_trees_isSet = false;
    m_categories_trees_isValid = false;

    m_departments_isSet = false;
    m_departments_isValid = false;

    m_price_ranges_isSet = false;
    m_price_ranges_isValid = false;

    m_specification_filters_isSet = false;
    m_specification_filters_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAIFacetscategory_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFacetscategory_200_response::fromJsonObject(QJsonObject json) {

    m_brands_isValid = ::OpenAPI::fromJsonValue(m_brands, json[QString("Brands")]);
    m_brands_isSet = !json[QString("Brands")].isNull() && m_brands_isValid;

    m_categories_trees_isValid = ::OpenAPI::fromJsonValue(m_categories_trees, json[QString("CategoriesTrees")]);
    m_categories_trees_isSet = !json[QString("CategoriesTrees")].isNull() && m_categories_trees_isValid;

    m_departments_isValid = ::OpenAPI::fromJsonValue(m_departments, json[QString("Departments")]);
    m_departments_isSet = !json[QString("Departments")].isNull() && m_departments_isValid;

    m_price_ranges_isValid = ::OpenAPI::fromJsonValue(m_price_ranges, json[QString("PriceRanges")]);
    m_price_ranges_isSet = !json[QString("PriceRanges")].isNull() && m_price_ranges_isValid;

    m_specification_filters_isValid = ::OpenAPI::fromJsonValue(m_specification_filters, json[QString("SpecificationFilters")]);
    m_specification_filters_isSet = !json[QString("SpecificationFilters")].isNull() && m_specification_filters_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("Summary")]);
    m_summary_isSet = !json[QString("Summary")].isNull() && m_summary_isValid;
}

QString OAIFacetscategory_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFacetscategory_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_brands.size() > 0) {
        obj.insert(QString("Brands"), ::OpenAPI::toJsonValue(m_brands));
    }
    if (m_categories_trees.size() > 0) {
        obj.insert(QString("CategoriesTrees"), ::OpenAPI::toJsonValue(m_categories_trees));
    }
    if (m_departments.size() > 0) {
        obj.insert(QString("Departments"), ::OpenAPI::toJsonValue(m_departments));
    }
    if (m_price_ranges.size() > 0) {
        obj.insert(QString("PriceRanges"), ::OpenAPI::toJsonValue(m_price_ranges));
    }
    if (m_specification_filters_isSet) {
        obj.insert(QString("SpecificationFilters"), ::OpenAPI::toJsonValue(m_specification_filters));
    }
    if (m_summary.isSet()) {
        obj.insert(QString("Summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QList<OAIBrands_inner> OAIFacetscategory_200_response::getBrands() const {
    return m_brands;
}
void OAIFacetscategory_200_response::setBrands(const QList<OAIBrands_inner> &brands) {
    m_brands = brands;
    m_brands_isSet = true;
}

bool OAIFacetscategory_200_response::is_brands_Set() const{
    return m_brands_isSet;
}

bool OAIFacetscategory_200_response::is_brands_Valid() const{
    return m_brands_isValid;
}

QList<OAICategoriesTrees_inner> OAIFacetscategory_200_response::getCategoriesTrees() const {
    return m_categories_trees;
}
void OAIFacetscategory_200_response::setCategoriesTrees(const QList<OAICategoriesTrees_inner> &categories_trees) {
    m_categories_trees = categories_trees;
    m_categories_trees_isSet = true;
}

bool OAIFacetscategory_200_response::is_categories_trees_Set() const{
    return m_categories_trees_isSet;
}

bool OAIFacetscategory_200_response::is_categories_trees_Valid() const{
    return m_categories_trees_isValid;
}

QList<OAIDepartments_inner> OAIFacetscategory_200_response::getDepartments() const {
    return m_departments;
}
void OAIFacetscategory_200_response::setDepartments(const QList<OAIDepartments_inner> &departments) {
    m_departments = departments;
    m_departments_isSet = true;
}

bool OAIFacetscategory_200_response::is_departments_Set() const{
    return m_departments_isSet;
}

bool OAIFacetscategory_200_response::is_departments_Valid() const{
    return m_departments_isValid;
}

QList<QJsonValue> OAIFacetscategory_200_response::getPriceRanges() const {
    return m_price_ranges;
}
void OAIFacetscategory_200_response::setPriceRanges(const QList<QJsonValue> &price_ranges) {
    m_price_ranges = price_ranges;
    m_price_ranges_isSet = true;
}

bool OAIFacetscategory_200_response::is_price_ranges_Set() const{
    return m_price_ranges_isSet;
}

bool OAIFacetscategory_200_response::is_price_ranges_Valid() const{
    return m_price_ranges_isValid;
}

OAIObject OAIFacetscategory_200_response::getSpecificationFilters() const {
    return m_specification_filters;
}
void OAIFacetscategory_200_response::setSpecificationFilters(const OAIObject &specification_filters) {
    m_specification_filters = specification_filters;
    m_specification_filters_isSet = true;
}

bool OAIFacetscategory_200_response::is_specification_filters_Set() const{
    return m_specification_filters_isSet;
}

bool OAIFacetscategory_200_response::is_specification_filters_Valid() const{
    return m_specification_filters_isValid;
}

OAISummary OAIFacetscategory_200_response::getSummary() const {
    return m_summary;
}
void OAIFacetscategory_200_response::setSummary(const OAISummary &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIFacetscategory_200_response::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIFacetscategory_200_response::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAIFacetscategory_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_trees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_departments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_specification_filters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFacetscategory_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_brands_isValid && m_categories_trees_isValid && m_departments_isValid && m_price_ranges_isValid && m_specification_filters_isValid && m_summary_isValid && true;
}

} // namespace OpenAPI
