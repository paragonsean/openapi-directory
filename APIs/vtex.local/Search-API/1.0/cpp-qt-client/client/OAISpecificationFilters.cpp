/**
 * Legacy Search API
 *   > Check the new [Search onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/search-onboarding). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.    This API lets you search and sort products in the Catalog using Fulltext, Category and Brand search terms.     Retrieve product data to create custom searches and product shelves.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpecificationFilters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpecificationFilters::OAISpecificationFilters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpecificationFilters::OAISpecificationFilters() {
    this->initializeModel();
}

OAISpecificationFilters::~OAISpecificationFilters() {}

void OAISpecificationFilters::initializeModel() {

    m_aplicativos_de_tv_isSet = false;
    m_aplicativos_de_tv_isValid = false;

    m_resoluo_isSet = false;
    m_resoluo_isValid = false;

    m_tamanho_da_tela_isSet = false;
    m_tamanho_da_tela_isValid = false;
}

void OAISpecificationFilters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpecificationFilters::fromJsonObject(QJsonObject json) {

    m_aplicativos_de_tv_isValid = ::OpenAPI::fromJsonValue(m_aplicativos_de_tv, json[QString("Aplicativos de TV")]);
    m_aplicativos_de_tv_isSet = !json[QString("Aplicativos de TV")].isNull() && m_aplicativos_de_tv_isValid;

    m_resoluo_isValid = ::OpenAPI::fromJsonValue(m_resoluo, json[QString("Resolução")]);
    m_resoluo_isSet = !json[QString("Resolução")].isNull() && m_resoluo_isValid;

    m_tamanho_da_tela_isValid = ::OpenAPI::fromJsonValue(m_tamanho_da_tela, json[QString("Tamanho da Tela")]);
    m_tamanho_da_tela_isSet = !json[QString("Tamanho da Tela")].isNull() && m_tamanho_da_tela_isValid;
}

QString OAISpecificationFilters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpecificationFilters::asJsonObject() const {
    QJsonObject obj;
    if (m_aplicativos_de_tv.size() > 0) {
        obj.insert(QString("Aplicativos de TV"), ::OpenAPI::toJsonValue(m_aplicativos_de_tv));
    }
    if (m_resoluo.size() > 0) {
        obj.insert(QString("Resolução"), ::OpenAPI::toJsonValue(m_resoluo));
    }
    if (m_tamanho_da_tela.size() > 0) {
        obj.insert(QString("Tamanho da Tela"), ::OpenAPI::toJsonValue(m_tamanho_da_tela));
    }
    return obj;
}

QList<OAIAplicativosDeTV> OAISpecificationFilters::getAplicativosDeTv() const {
    return m_aplicativos_de_tv;
}
void OAISpecificationFilters::setAplicativosDeTv(const QList<OAIAplicativosDeTV> &aplicativos_de_tv) {
    m_aplicativos_de_tv = aplicativos_de_tv;
    m_aplicativos_de_tv_isSet = true;
}

bool OAISpecificationFilters::is_aplicativos_de_tv_Set() const{
    return m_aplicativos_de_tv_isSet;
}

bool OAISpecificationFilters::is_aplicativos_de_tv_Valid() const{
    return m_aplicativos_de_tv_isValid;
}

QList<OAIResoluO> OAISpecificationFilters::getResoluo() const {
    return m_resoluo;
}
void OAISpecificationFilters::setResoluo(const QList<OAIResoluO> &resoluo) {
    m_resoluo = resoluo;
    m_resoluo_isSet = true;
}

bool OAISpecificationFilters::is_resoluo_Set() const{
    return m_resoluo_isSet;
}

bool OAISpecificationFilters::is_resoluo_Valid() const{
    return m_resoluo_isValid;
}

QList<OAITamanhoDaTela> OAISpecificationFilters::getTamanhoDaTela() const {
    return m_tamanho_da_tela;
}
void OAISpecificationFilters::setTamanhoDaTela(const QList<OAITamanhoDaTela> &tamanho_da_tela) {
    m_tamanho_da_tela = tamanho_da_tela;
    m_tamanho_da_tela_isSet = true;
}

bool OAISpecificationFilters::is_tamanho_da_tela_Set() const{
    return m_tamanho_da_tela_isSet;
}

bool OAISpecificationFilters::is_tamanho_da_tela_Valid() const{
    return m_tamanho_da_tela_isValid;
}

bool OAISpecificationFilters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aplicativos_de_tv.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resoluo.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tamanho_da_tela.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpecificationFilters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_aplicativos_de_tv_isValid && m_resoluo_isValid && m_tamanho_da_tela_isValid && true;
}

} // namespace OpenAPI
