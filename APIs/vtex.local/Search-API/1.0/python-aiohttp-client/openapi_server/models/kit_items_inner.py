# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KitItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, item_id: str=None):
        """KitItemsInner - a model defined in OpenAPI

        :param amount: The amount of this KitItemsInner.
        :param item_id: The item_id of this KitItemsInner.
        """
        self.openapi_types = {
            'amount': int,
            'item_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'item_id': 'itemId'
        }

        self._amount = amount
        self._item_id = item_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KitItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The kitItems_inner of this KitItemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this KitItemsInner.

        Amount of the SKU component in the kit.

        :return: The amount of this KitItemsInner.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this KitItemsInner.

        Amount of the SKU component in the kit.

        :param amount: The amount of this KitItemsInner.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def item_id(self):
        """Gets the item_id of this KitItemsInner.

        SKU kit component ID.

        :return: The item_id of this KitItemsInner.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this KitItemsInner.

        SKU kit component ID.

        :param item_id: The item_id of this KitItemsInner.
        :type item_id: str
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")

        self._item_id = item_id
