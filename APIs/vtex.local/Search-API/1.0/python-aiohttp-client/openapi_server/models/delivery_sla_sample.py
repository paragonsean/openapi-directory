# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delivery_sla_per_type2 import DeliverySlaPerType2
from openapi_server.models.region2 import Region2
from openapi_server import util


class DeliverySlaSample(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delivery_sla_per_types: List[DeliverySlaPerType2]=None, region: Region2=None):
        """DeliverySlaSample - a model defined in OpenAPI

        :param delivery_sla_per_types: The delivery_sla_per_types of this DeliverySlaSample.
        :param region: The region of this DeliverySlaSample.
        """
        self.openapi_types = {
            'delivery_sla_per_types': List[DeliverySlaPerType2],
            'region': Region2
        }

        self.attribute_map = {
            'delivery_sla_per_types': 'DeliverySlaPerTypes',
            'region': 'Region'
        }

        self._delivery_sla_per_types = delivery_sla_per_types
        self._region = region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeliverySlaSample':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeliverySlaSample of this DeliverySlaSample.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delivery_sla_per_types(self):
        """Gets the delivery_sla_per_types of this DeliverySlaSample.

        

        :return: The delivery_sla_per_types of this DeliverySlaSample.
        :rtype: List[DeliverySlaPerType2]
        """
        return self._delivery_sla_per_types

    @delivery_sla_per_types.setter
    def delivery_sla_per_types(self, delivery_sla_per_types):
        """Sets the delivery_sla_per_types of this DeliverySlaSample.

        

        :param delivery_sla_per_types: The delivery_sla_per_types of this DeliverySlaSample.
        :type delivery_sla_per_types: List[DeliverySlaPerType2]
        """
        if delivery_sla_per_types is None:
            raise ValueError("Invalid value for `delivery_sla_per_types`, must not be `None`")

        self._delivery_sla_per_types = delivery_sla_per_types

    @property
    def region(self):
        """Gets the region of this DeliverySlaSample.


        :return: The region of this DeliverySlaSample.
        :rtype: Region2
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this DeliverySlaSample.


        :param region: The region of this DeliverySlaSample.
        :type region: Region2
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region
