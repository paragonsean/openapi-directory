# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Region(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code: str=None, culture_info_name: str=None, id: int=None, is_persisted: bool=None, is_removed: bool=None, name: str=None, zip_code: str=None):
        """Region - a model defined in OpenAPI

        :param country_code: The country_code of this Region.
        :param culture_info_name: The culture_info_name of this Region.
        :param id: The id of this Region.
        :param is_persisted: The is_persisted of this Region.
        :param is_removed: The is_removed of this Region.
        :param name: The name of this Region.
        :param zip_code: The zip_code of this Region.
        """
        self.openapi_types = {
            'country_code': str,
            'culture_info_name': str,
            'id': int,
            'is_persisted': bool,
            'is_removed': bool,
            'name': str,
            'zip_code': str
        }

        self.attribute_map = {
            'country_code': 'CountryCode',
            'culture_info_name': 'CultureInfoName',
            'id': 'Id',
            'is_persisted': 'IsPersisted',
            'is_removed': 'IsRemoved',
            'name': 'Name',
            'zip_code': 'ZipCode'
        }

        self._country_code = country_code
        self._culture_info_name = culture_info_name
        self._id = id
        self._is_persisted = is_persisted
        self._is_removed = is_removed
        self._name = name
        self._zip_code = zip_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Region':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Region of this Region.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self):
        """Gets the country_code of this Region.


        :return: The country_code of this Region.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Region.


        :param country_code: The country_code of this Region.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def culture_info_name(self):
        """Gets the culture_info_name of this Region.


        :return: The culture_info_name of this Region.
        :rtype: str
        """
        return self._culture_info_name

    @culture_info_name.setter
    def culture_info_name(self, culture_info_name):
        """Sets the culture_info_name of this Region.


        :param culture_info_name: The culture_info_name of this Region.
        :type culture_info_name: str
        """
        if culture_info_name is None:
            raise ValueError("Invalid value for `culture_info_name`, must not be `None`")

        self._culture_info_name = culture_info_name

    @property
    def id(self):
        """Gets the id of this Region.


        :return: The id of this Region.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Region.


        :param id: The id of this Region.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_persisted(self):
        """Gets the is_persisted of this Region.


        :return: The is_persisted of this Region.
        :rtype: bool
        """
        return self._is_persisted

    @is_persisted.setter
    def is_persisted(self, is_persisted):
        """Sets the is_persisted of this Region.


        :param is_persisted: The is_persisted of this Region.
        :type is_persisted: bool
        """
        if is_persisted is None:
            raise ValueError("Invalid value for `is_persisted`, must not be `None`")

        self._is_persisted = is_persisted

    @property
    def is_removed(self):
        """Gets the is_removed of this Region.


        :return: The is_removed of this Region.
        :rtype: bool
        """
        return self._is_removed

    @is_removed.setter
    def is_removed(self, is_removed):
        """Sets the is_removed of this Region.


        :param is_removed: The is_removed of this Region.
        :type is_removed: bool
        """
        if is_removed is None:
            raise ValueError("Invalid value for `is_removed`, must not be `None`")

        self._is_removed = is_removed

    @property
    def name(self):
        """Gets the name of this Region.


        :return: The name of this Region.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Region.


        :param name: The name of this Region.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def zip_code(self):
        """Gets the zip_code of this Region.


        :return: The zip_code of this Region.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Region.


        :param zip_code: The zip_code of this Region.
        :type zip_code: str
        """
        if zip_code is None:
            raise ValueError("Invalid value for `zip_code`, must not be `None`")

        self._zip_code = zip_code
