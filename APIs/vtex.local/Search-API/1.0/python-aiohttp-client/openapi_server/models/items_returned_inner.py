# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItemsReturnedInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, criteria: str=None, href: str=None, items: List[object]=None, name: str=None, thumb: str=None, thumb_url: str=None):
        """ItemsReturnedInner - a model defined in OpenAPI

        :param criteria: The criteria of this ItemsReturnedInner.
        :param href: The href of this ItemsReturnedInner.
        :param items: The items of this ItemsReturnedInner.
        :param name: The name of this ItemsReturnedInner.
        :param thumb: The thumb of this ItemsReturnedInner.
        :param thumb_url: The thumb_url of this ItemsReturnedInner.
        """
        self.openapi_types = {
            'criteria': str,
            'href': str,
            'items': List[object],
            'name': str,
            'thumb': str,
            'thumb_url': str
        }

        self.attribute_map = {
            'criteria': 'criteria',
            'href': 'href',
            'items': 'items',
            'name': 'name',
            'thumb': 'thumb',
            'thumb_url': 'thumbUrl'
        }

        self._criteria = criteria
        self._href = href
        self._items = items
        self._name = name
        self._thumb = thumb
        self._thumb_url = thumb_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemsReturnedInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The itemsReturned_inner of this ItemsReturnedInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def criteria(self):
        """Gets the criteria of this ItemsReturnedInner.

        Item criteria.

        :return: The criteria of this ItemsReturnedInner.
        :rtype: str
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this ItemsReturnedInner.

        Item criteria.

        :param criteria: The criteria of this ItemsReturnedInner.
        :type criteria: str
        """
        if criteria is None:
            raise ValueError("Invalid value for `criteria`, must not be `None`")

        self._criteria = criteria

    @property
    def href(self):
        """Gets the href of this ItemsReturnedInner.

        Item URL.

        :return: The href of this ItemsReturnedInner.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ItemsReturnedInner.

        Item URL.

        :param href: The href of this ItemsReturnedInner.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")

        self._href = href

    @property
    def items(self):
        """Gets the items of this ItemsReturnedInner.

        Array of products.

        :return: The items of this ItemsReturnedInner.
        :rtype: List[object]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ItemsReturnedInner.

        Array of products.

        :param items: The items of this ItemsReturnedInner.
        :type items: List[object]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def name(self):
        """Gets the name of this ItemsReturnedInner.

        Item name.

        :return: The name of this ItemsReturnedInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ItemsReturnedInner.

        Item name.

        :param name: The name of this ItemsReturnedInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def thumb(self):
        """Gets the thumb of this ItemsReturnedInner.

        Item thumbnail.

        :return: The thumb of this ItemsReturnedInner.
        :rtype: str
        """
        return self._thumb

    @thumb.setter
    def thumb(self, thumb):
        """Sets the thumb of this ItemsReturnedInner.

        Item thumbnail.

        :param thumb: The thumb of this ItemsReturnedInner.
        :type thumb: str
        """
        if thumb is None:
            raise ValueError("Invalid value for `thumb`, must not be `None`")

        self._thumb = thumb

    @property
    def thumb_url(self):
        """Gets the thumb_url of this ItemsReturnedInner.

        Item thumbnail URL.

        :return: The thumb_url of this ItemsReturnedInner.
        :rtype: str
        """
        return self._thumb_url

    @thumb_url.setter
    def thumb_url(self, thumb_url):
        """Sets the thumb_url of this ItemsReturnedInner.

        Item thumbnail URL.

        :param thumb_url: The thumb_url of this ItemsReturnedInner.
        :type thumb_url: str
        """
        if thumb_url is None:
            raise ValueError("Invalid value for `thumb_url`, must not be `None`")

        self._thumb_url = thumb_url
