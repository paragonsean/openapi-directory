# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OffersPerSalesChannelInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_quantity: int=None, is_available: bool=None, list_price: float=None, price: float=None, price_without_discount: float=None, sale_channel: int=None):
        """OffersPerSalesChannelInner - a model defined in OpenAPI

        :param available_quantity: The available_quantity of this OffersPerSalesChannelInner.
        :param is_available: The is_available of this OffersPerSalesChannelInner.
        :param list_price: The list_price of this OffersPerSalesChannelInner.
        :param price: The price of this OffersPerSalesChannelInner.
        :param price_without_discount: The price_without_discount of this OffersPerSalesChannelInner.
        :param sale_channel: The sale_channel of this OffersPerSalesChannelInner.
        """
        self.openapi_types = {
            'available_quantity': int,
            'is_available': bool,
            'list_price': float,
            'price': float,
            'price_without_discount': float,
            'sale_channel': int
        }

        self.attribute_map = {
            'available_quantity': 'AvailableQuantity',
            'is_available': 'IsAvailable',
            'list_price': 'ListPrice',
            'price': 'Price',
            'price_without_discount': 'PriceWithoutDiscount',
            'sale_channel': 'SaleChannel'
        }

        self._available_quantity = available_quantity
        self._is_available = is_available
        self._list_price = list_price
        self._price = price
        self._price_without_discount = price_without_discount
        self._sale_channel = sale_channel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OffersPerSalesChannelInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OffersPerSalesChannel_inner of this OffersPerSalesChannelInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_quantity(self):
        """Gets the available_quantity of this OffersPerSalesChannelInner.

        SKU available quantity.

        :return: The available_quantity of this OffersPerSalesChannelInner.
        :rtype: int
        """
        return self._available_quantity

    @available_quantity.setter
    def available_quantity(self, available_quantity):
        """Sets the available_quantity of this OffersPerSalesChannelInner.

        SKU available quantity.

        :param available_quantity: The available_quantity of this OffersPerSalesChannelInner.
        :type available_quantity: int
        """
        if available_quantity is None:
            raise ValueError("Invalid value for `available_quantity`, must not be `None`")

        self._available_quantity = available_quantity

    @property
    def is_available(self):
        """Gets the is_available of this OffersPerSalesChannelInner.

        If the SKU is available or not.

        :return: The is_available of this OffersPerSalesChannelInner.
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this OffersPerSalesChannelInner.

        If the SKU is available or not.

        :param is_available: The is_available of this OffersPerSalesChannelInner.
        :type is_available: bool
        """
        if is_available is None:
            raise ValueError("Invalid value for `is_available`, must not be `None`")

        self._is_available = is_available

    @property
    def list_price(self):
        """Gets the list_price of this OffersPerSalesChannelInner.

        SKU list price.

        :return: The list_price of this OffersPerSalesChannelInner.
        :rtype: float
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this OffersPerSalesChannelInner.

        SKU list price.

        :param list_price: The list_price of this OffersPerSalesChannelInner.
        :type list_price: float
        """
        if list_price is None:
            raise ValueError("Invalid value for `list_price`, must not be `None`")

        self._list_price = list_price

    @property
    def price(self):
        """Gets the price of this OffersPerSalesChannelInner.

        SKU price.

        :return: The price of this OffersPerSalesChannelInner.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OffersPerSalesChannelInner.

        SKU price.

        :param price: The price of this OffersPerSalesChannelInner.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def price_without_discount(self):
        """Gets the price_without_discount of this OffersPerSalesChannelInner.

        SKU precie without discount.

        :return: The price_without_discount of this OffersPerSalesChannelInner.
        :rtype: float
        """
        return self._price_without_discount

    @price_without_discount.setter
    def price_without_discount(self, price_without_discount):
        """Sets the price_without_discount of this OffersPerSalesChannelInner.

        SKU precie without discount.

        :param price_without_discount: The price_without_discount of this OffersPerSalesChannelInner.
        :type price_without_discount: float
        """
        if price_without_discount is None:
            raise ValueError("Invalid value for `price_without_discount`, must not be `None`")

        self._price_without_discount = price_without_discount

    @property
    def sale_channel(self):
        """Gets the sale_channel of this OffersPerSalesChannelInner.

        SKU trade policy.

        :return: The sale_channel of this OffersPerSalesChannelInner.
        :rtype: int
        """
        return self._sale_channel

    @sale_channel.setter
    def sale_channel(self, sale_channel):
        """Sets the sale_channel of this OffersPerSalesChannelInner.

        SKU trade policy.

        :param sale_channel: The sale_channel of this OffersPerSalesChannelInner.
        :type sale_channel: int
        """
        if sale_channel is None:
            raise ValueError("Invalid value for `sale_channel`, must not be `None`")

        self._sale_channel = sale_channel
