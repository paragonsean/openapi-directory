# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BrandsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, link: str=None, link_encoded: str=None, map: str=None, name: str=None, position: int=None, quantity: int=None, value: str=None):
        """BrandsInner - a model defined in OpenAPI

        :param link: The link of this BrandsInner.
        :param link_encoded: The link_encoded of this BrandsInner.
        :param map: The map of this BrandsInner.
        :param name: The name of this BrandsInner.
        :param position: The position of this BrandsInner.
        :param quantity: The quantity of this BrandsInner.
        :param value: The value of this BrandsInner.
        """
        self.openapi_types = {
            'link': str,
            'link_encoded': str,
            'map': str,
            'name': str,
            'position': int,
            'quantity': int,
            'value': str
        }

        self.attribute_map = {
            'link': 'Link',
            'link_encoded': 'LinkEncoded',
            'map': 'Map',
            'name': 'Name',
            'position': 'Position',
            'quantity': 'Quantity',
            'value': 'Value'
        }

        self._link = link
        self._link_encoded = link_encoded
        self._map = map
        self._name = name
        self._position = position
        self._quantity = quantity
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrandsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Brands_inner of this BrandsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def link(self):
        """Gets the link of this BrandsInner.

        Link of the facet.

        :return: The link of this BrandsInner.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this BrandsInner.

        Link of the facet.

        :param link: The link of this BrandsInner.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def link_encoded(self):
        """Gets the link_encoded of this BrandsInner.

        Enconded link of the facet.

        :return: The link_encoded of this BrandsInner.
        :rtype: str
        """
        return self._link_encoded

    @link_encoded.setter
    def link_encoded(self, link_encoded):
        """Sets the link_encoded of this BrandsInner.

        Enconded link of the facet.

        :param link_encoded: The link_encoded of this BrandsInner.
        :type link_encoded: str
        """
        if link_encoded is None:
            raise ValueError("Invalid value for `link_encoded`, must not be `None`")

        self._link_encoded = link_encoded

    @property
    def map(self):
        """Gets the map of this BrandsInner.

        Mapping of the facet.

        :return: The map of this BrandsInner.
        :rtype: str
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this BrandsInner.

        Mapping of the facet.

        :param map: The map of this BrandsInner.
        :type map: str
        """
        if map is None:
            raise ValueError("Invalid value for `map`, must not be `None`")

        self._map = map

    @property
    def name(self):
        """Gets the name of this BrandsInner.

        Brand name.

        :return: The name of this BrandsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BrandsInner.

        Brand name.

        :param name: The name of this BrandsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def position(self):
        """Gets the position of this BrandsInner.

        Position of the facet.

        :return: The position of this BrandsInner.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this BrandsInner.

        Position of the facet.

        :param position: The position of this BrandsInner.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def quantity(self):
        """Gets the quantity of this BrandsInner.

        Quantity of facets.

        :return: The quantity of this BrandsInner.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this BrandsInner.

        Quantity of facets.

        :param quantity: The quantity of this BrandsInner.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def value(self):
        """Gets the value of this BrandsInner.

        Value of the facet.

        :return: The value of this BrandsInner.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this BrandsInner.

        Value of the facet.

        :param value: The value of this BrandsInner.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
