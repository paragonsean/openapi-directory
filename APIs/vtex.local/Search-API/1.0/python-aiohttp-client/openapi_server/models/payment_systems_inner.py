# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentSystemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_payments: str=None, description: str=None, due_date: str=None, group_name: str=None, id: int=None, is_custom: bool=None, name: str=None, requires_authentication: bool=None, requires_document: bool=None, string_id: str=None, template: str=None, validator: str=None):
        """PaymentSystemsInner - a model defined in OpenAPI

        :param available_payments: The available_payments of this PaymentSystemsInner.
        :param description: The description of this PaymentSystemsInner.
        :param due_date: The due_date of this PaymentSystemsInner.
        :param group_name: The group_name of this PaymentSystemsInner.
        :param id: The id of this PaymentSystemsInner.
        :param is_custom: The is_custom of this PaymentSystemsInner.
        :param name: The name of this PaymentSystemsInner.
        :param requires_authentication: The requires_authentication of this PaymentSystemsInner.
        :param requires_document: The requires_document of this PaymentSystemsInner.
        :param string_id: The string_id of this PaymentSystemsInner.
        :param template: The template of this PaymentSystemsInner.
        :param validator: The validator of this PaymentSystemsInner.
        """
        self.openapi_types = {
            'available_payments': str,
            'description': str,
            'due_date': str,
            'group_name': str,
            'id': int,
            'is_custom': bool,
            'name': str,
            'requires_authentication': bool,
            'requires_document': bool,
            'string_id': str,
            'template': str,
            'validator': str
        }

        self.attribute_map = {
            'available_payments': 'availablePayments',
            'description': 'description',
            'due_date': 'dueDate',
            'group_name': 'groupName',
            'id': 'id',
            'is_custom': 'isCustom',
            'name': 'name',
            'requires_authentication': 'requiresAuthentication',
            'requires_document': 'requiresDocument',
            'string_id': 'stringId',
            'template': 'template',
            'validator': 'validator'
        }

        self._available_payments = available_payments
        self._description = description
        self._due_date = due_date
        self._group_name = group_name
        self._id = id
        self._is_custom = is_custom
        self._name = name
        self._requires_authentication = requires_authentication
        self._requires_document = requires_document
        self._string_id = string_id
        self._template = template
        self._validator = validator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentSystemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The paymentSystems_inner of this PaymentSystemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_payments(self):
        """Gets the available_payments of this PaymentSystemsInner.

        Available payments.

        :return: The available_payments of this PaymentSystemsInner.
        :rtype: str
        """
        return self._available_payments

    @available_payments.setter
    def available_payments(self, available_payments):
        """Sets the available_payments of this PaymentSystemsInner.

        Available payments.

        :param available_payments: The available_payments of this PaymentSystemsInner.
        :type available_payments: str
        """
        if available_payments is None:
            raise ValueError("Invalid value for `available_payments`, must not be `None`")

        self._available_payments = available_payments

    @property
    def description(self):
        """Gets the description of this PaymentSystemsInner.

        Description.

        :return: The description of this PaymentSystemsInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentSystemsInner.

        Description.

        :param description: The description of this PaymentSystemsInner.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def due_date(self):
        """Gets the due_date of this PaymentSystemsInner.

        Due date.

        :return: The due_date of this PaymentSystemsInner.
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this PaymentSystemsInner.

        Due date.

        :param due_date: The due_date of this PaymentSystemsInner.
        :type due_date: str
        """
        if due_date is None:
            raise ValueError("Invalid value for `due_date`, must not be `None`")

        self._due_date = due_date

    @property
    def group_name(self):
        """Gets the group_name of this PaymentSystemsInner.

        Group name.

        :return: The group_name of this PaymentSystemsInner.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this PaymentSystemsInner.

        Group name.

        :param group_name: The group_name of this PaymentSystemsInner.
        :type group_name: str
        """
        if group_name is None:
            raise ValueError("Invalid value for `group_name`, must not be `None`")

        self._group_name = group_name

    @property
    def id(self):
        """Gets the id of this PaymentSystemsInner.

        ID.

        :return: The id of this PaymentSystemsInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentSystemsInner.

        ID.

        :param id: The id of this PaymentSystemsInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_custom(self):
        """Gets the is_custom of this PaymentSystemsInner.

        If is custom or not.

        :return: The is_custom of this PaymentSystemsInner.
        :rtype: bool
        """
        return self._is_custom

    @is_custom.setter
    def is_custom(self, is_custom):
        """Sets the is_custom of this PaymentSystemsInner.

        If is custom or not.

        :param is_custom: The is_custom of this PaymentSystemsInner.
        :type is_custom: bool
        """
        if is_custom is None:
            raise ValueError("Invalid value for `is_custom`, must not be `None`")

        self._is_custom = is_custom

    @property
    def name(self):
        """Gets the name of this PaymentSystemsInner.

        Name.

        :return: The name of this PaymentSystemsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PaymentSystemsInner.

        Name.

        :param name: The name of this PaymentSystemsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def requires_authentication(self):
        """Gets the requires_authentication of this PaymentSystemsInner.

        If requires authentication.

        :return: The requires_authentication of this PaymentSystemsInner.
        :rtype: bool
        """
        return self._requires_authentication

    @requires_authentication.setter
    def requires_authentication(self, requires_authentication):
        """Sets the requires_authentication of this PaymentSystemsInner.

        If requires authentication.

        :param requires_authentication: The requires_authentication of this PaymentSystemsInner.
        :type requires_authentication: bool
        """
        if requires_authentication is None:
            raise ValueError("Invalid value for `requires_authentication`, must not be `None`")

        self._requires_authentication = requires_authentication

    @property
    def requires_document(self):
        """Gets the requires_document of this PaymentSystemsInner.

        If requires document or not.

        :return: The requires_document of this PaymentSystemsInner.
        :rtype: bool
        """
        return self._requires_document

    @requires_document.setter
    def requires_document(self, requires_document):
        """Sets the requires_document of this PaymentSystemsInner.

        If requires document or not.

        :param requires_document: The requires_document of this PaymentSystemsInner.
        :type requires_document: bool
        """
        if requires_document is None:
            raise ValueError("Invalid value for `requires_document`, must not be `None`")

        self._requires_document = requires_document

    @property
    def string_id(self):
        """Gets the string_id of this PaymentSystemsInner.

        String ID.

        :return: The string_id of this PaymentSystemsInner.
        :rtype: str
        """
        return self._string_id

    @string_id.setter
    def string_id(self, string_id):
        """Sets the string_id of this PaymentSystemsInner.

        String ID.

        :param string_id: The string_id of this PaymentSystemsInner.
        :type string_id: str
        """
        if string_id is None:
            raise ValueError("Invalid value for `string_id`, must not be `None`")

        self._string_id = string_id

    @property
    def template(self):
        """Gets the template of this PaymentSystemsInner.

        Template.

        :return: The template of this PaymentSystemsInner.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this PaymentSystemsInner.

        Template.

        :param template: The template of this PaymentSystemsInner.
        :type template: str
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")

        self._template = template

    @property
    def validator(self):
        """Gets the validator of this PaymentSystemsInner.

        Validator.

        :return: The validator of this PaymentSystemsInner.
        :rtype: str
        """
        return self._validator

    @validator.setter
    def validator(self, validator):
        """Sets the validator of this PaymentSystemsInner.

        Validator.

        :param validator: The validator of this PaymentSystemsInner.
        :type validator: str
        """
        if validator is None:
            raise ValueError("Invalid value for `validator`, must not be `None`")

        self._validator = validator
