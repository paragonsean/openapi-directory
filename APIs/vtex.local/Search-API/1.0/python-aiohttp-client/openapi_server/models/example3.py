# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.items_returned import ItemsReturned
from openapi_server import util


class Example3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items_returned: List[ItemsReturned]=None):
        """Example3 - a model defined in OpenAPI

        :param items_returned: The items_returned of this Example3.
        """
        self.openapi_types = {
            'items_returned': List[ItemsReturned]
        }

        self.attribute_map = {
            'items_returned': 'itemsReturned'
        }

        self._items_returned = items_returned

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Example3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Example3 of this Example3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items_returned(self):
        """Gets the items_returned of this Example3.

        

        :return: The items_returned of this Example3.
        :rtype: List[ItemsReturned]
        """
        return self._items_returned

    @items_returned.setter
    def items_returned(self, items_returned):
        """Sets the items_returned of this Example3.

        

        :param items_returned: The items_returned of this Example3.
        :type items_returned: List[ItemsReturned]
        """
        if items_returned is None:
            raise ValueError("Invalid value for `items_returned`, must not be `None`")

        self._items_returned = items_returned
