# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item import Item
from openapi_server import util


class Example(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand: str=None, categories: List[str]=None, description: str=None, items: List[Item]=None, link: str=None, link_text: str=None, product_id: str=None, product_name: str=None, product_reference: str=None):
        """Example - a model defined in OpenAPI

        :param brand: The brand of this Example.
        :param categories: The categories of this Example.
        :param description: The description of this Example.
        :param items: The items of this Example.
        :param link: The link of this Example.
        :param link_text: The link_text of this Example.
        :param product_id: The product_id of this Example.
        :param product_name: The product_name of this Example.
        :param product_reference: The product_reference of this Example.
        """
        self.openapi_types = {
            'brand': str,
            'categories': List[str],
            'description': str,
            'items': List[Item],
            'link': str,
            'link_text': str,
            'product_id': str,
            'product_name': str,
            'product_reference': str
        }

        self.attribute_map = {
            'brand': 'brand',
            'categories': 'categories',
            'description': 'description',
            'items': 'items',
            'link': 'link',
            'link_text': 'linkText',
            'product_id': 'productId',
            'product_name': 'productName',
            'product_reference': 'productReference'
        }

        self._brand = brand
        self._categories = categories
        self._description = description
        self._items = items
        self._link = link
        self._link_text = link_text
        self._product_id = product_id
        self._product_name = product_name
        self._product_reference = product_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Example':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Example of this Example.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand(self):
        """Gets the brand of this Example.


        :return: The brand of this Example.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Example.


        :param brand: The brand of this Example.
        :type brand: str
        """
        if brand is None:
            raise ValueError("Invalid value for `brand`, must not be `None`")

        self._brand = brand

    @property
    def categories(self):
        """Gets the categories of this Example.

        

        :return: The categories of this Example.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Example.

        

        :param categories: The categories of this Example.
        :type categories: List[str]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")

        self._categories = categories

    @property
    def description(self):
        """Gets the description of this Example.


        :return: The description of this Example.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Example.


        :param description: The description of this Example.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def items(self):
        """Gets the items of this Example.

        

        :return: The items of this Example.
        :rtype: List[Item]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Example.

        

        :param items: The items of this Example.
        :type items: List[Item]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def link(self):
        """Gets the link of this Example.


        :return: The link of this Example.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Example.


        :param link: The link of this Example.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def link_text(self):
        """Gets the link_text of this Example.


        :return: The link_text of this Example.
        :rtype: str
        """
        return self._link_text

    @link_text.setter
    def link_text(self, link_text):
        """Sets the link_text of this Example.


        :param link_text: The link_text of this Example.
        :type link_text: str
        """
        if link_text is None:
            raise ValueError("Invalid value for `link_text`, must not be `None`")

        self._link_text = link_text

    @property
    def product_id(self):
        """Gets the product_id of this Example.


        :return: The product_id of this Example.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Example.


        :param product_id: The product_id of this Example.
        :type product_id: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def product_name(self):
        """Gets the product_name of this Example.


        :return: The product_name of this Example.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this Example.


        :param product_name: The product_name of this Example.
        :type product_name: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")

        self._product_name = product_name

    @property
    def product_reference(self):
        """Gets the product_reference of this Example.


        :return: The product_reference of this Example.
        :rtype: str
        """
        return self._product_reference

    @product_reference.setter
    def product_reference(self, product_reference):
        """Sets the product_reference of this Example.


        :param product_reference: The product_reference of this Example.
        :type product_reference: str
        """
        if product_reference is None:
            raise ValueError("Invalid value for `product_reference`, must not be `None`")

        self._product_reference = product_reference
