# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.brands_inner import BrandsInner
from openapi_server.models.categories_trees_inner import CategoriesTreesInner
from openapi_server.models.departments_inner import DepartmentsInner
from openapi_server.models.summary import Summary
from openapi_server import util


class Facetscategory200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brands: List[BrandsInner]=None, categories_trees: List[CategoriesTreesInner]=None, departments: List[DepartmentsInner]=None, price_ranges: List[object]=None, specification_filters: object=None, summary: Summary=None):
        """Facetscategory200Response - a model defined in OpenAPI

        :param brands: The brands of this Facetscategory200Response.
        :param categories_trees: The categories_trees of this Facetscategory200Response.
        :param departments: The departments of this Facetscategory200Response.
        :param price_ranges: The price_ranges of this Facetscategory200Response.
        :param specification_filters: The specification_filters of this Facetscategory200Response.
        :param summary: The summary of this Facetscategory200Response.
        """
        self.openapi_types = {
            'brands': List[BrandsInner],
            'categories_trees': List[CategoriesTreesInner],
            'departments': List[DepartmentsInner],
            'price_ranges': List[object],
            'specification_filters': object,
            'summary': Summary
        }

        self.attribute_map = {
            'brands': 'Brands',
            'categories_trees': 'CategoriesTrees',
            'departments': 'Departments',
            'price_ranges': 'PriceRanges',
            'specification_filters': 'SpecificationFilters',
            'summary': 'Summary'
        }

        self._brands = brands
        self._categories_trees = categories_trees
        self._departments = departments
        self._price_ranges = price_ranges
        self._specification_filters = specification_filters
        self._summary = summary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Facetscategory200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Facetscategory_200_response of this Facetscategory200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brands(self):
        """Gets the brands of this Facetscategory200Response.

        Array of general information about the brands.

        :return: The brands of this Facetscategory200Response.
        :rtype: List[BrandsInner]
        """
        return self._brands

    @brands.setter
    def brands(self, brands):
        """Sets the brands of this Facetscategory200Response.

        Array of general information about the brands.

        :param brands: The brands of this Facetscategory200Response.
        :type brands: List[BrandsInner]
        """
        if brands is None:
            raise ValueError("Invalid value for `brands`, must not be `None`")

        self._brands = brands

    @property
    def categories_trees(self):
        """Gets the categories_trees of this Facetscategory200Response.

        Array of the category tree.

        :return: The categories_trees of this Facetscategory200Response.
        :rtype: List[CategoriesTreesInner]
        """
        return self._categories_trees

    @categories_trees.setter
    def categories_trees(self, categories_trees):
        """Sets the categories_trees of this Facetscategory200Response.

        Array of the category tree.

        :param categories_trees: The categories_trees of this Facetscategory200Response.
        :type categories_trees: List[CategoriesTreesInner]
        """
        if categories_trees is None:
            raise ValueError("Invalid value for `categories_trees`, must not be `None`")

        self._categories_trees = categories_trees

    @property
    def departments(self):
        """Gets the departments of this Facetscategory200Response.

        Array of general information about the categories.

        :return: The departments of this Facetscategory200Response.
        :rtype: List[DepartmentsInner]
        """
        return self._departments

    @departments.setter
    def departments(self, departments):
        """Sets the departments of this Facetscategory200Response.

        Array of general information about the categories.

        :param departments: The departments of this Facetscategory200Response.
        :type departments: List[DepartmentsInner]
        """
        if departments is None:
            raise ValueError("Invalid value for `departments`, must not be `None`")

        self._departments = departments

    @property
    def price_ranges(self):
        """Gets the price_ranges of this Facetscategory200Response.

        Array with general information of the price ranges.

        :return: The price_ranges of this Facetscategory200Response.
        :rtype: List[object]
        """
        return self._price_ranges

    @price_ranges.setter
    def price_ranges(self, price_ranges):
        """Sets the price_ranges of this Facetscategory200Response.

        Array with general information of the price ranges.

        :param price_ranges: The price_ranges of this Facetscategory200Response.
        :type price_ranges: List[object]
        """
        if price_ranges is None:
            raise ValueError("Invalid value for `price_ranges`, must not be `None`")

        self._price_ranges = price_ranges

    @property
    def specification_filters(self):
        """Gets the specification_filters of this Facetscategory200Response.

        Object with general information of specifications.

        :return: The specification_filters of this Facetscategory200Response.
        :rtype: object
        """
        return self._specification_filters

    @specification_filters.setter
    def specification_filters(self, specification_filters):
        """Sets the specification_filters of this Facetscategory200Response.

        Object with general information of specifications.

        :param specification_filters: The specification_filters of this Facetscategory200Response.
        :type specification_filters: object
        """
        if specification_filters is None:
            raise ValueError("Invalid value for `specification_filters`, must not be `None`")

        self._specification_filters = specification_filters

    @property
    def summary(self):
        """Gets the summary of this Facetscategory200Response.


        :return: The summary of this Facetscategory200Response.
        :rtype: Summary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Facetscategory200Response.


        :param summary: The summary of this Facetscategory200Response.
        :type summary: Summary
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")

        self._summary = summary
