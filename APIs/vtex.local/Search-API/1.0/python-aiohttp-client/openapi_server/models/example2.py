# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.brand import Brand
from openapi_server.models.categories_tree import CategoriesTree
from openapi_server.models.department import Department
from openapi_server.models.specification_filters import SpecificationFilters
from openapi_server import util


class Example2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brands: List[Brand]=None, categories_trees: List[CategoriesTree]=None, departments: List[Department]=None, specification_filters: SpecificationFilters=None):
        """Example2 - a model defined in OpenAPI

        :param brands: The brands of this Example2.
        :param categories_trees: The categories_trees of this Example2.
        :param departments: The departments of this Example2.
        :param specification_filters: The specification_filters of this Example2.
        """
        self.openapi_types = {
            'brands': List[Brand],
            'categories_trees': List[CategoriesTree],
            'departments': List[Department],
            'specification_filters': SpecificationFilters
        }

        self.attribute_map = {
            'brands': 'Brands',
            'categories_trees': 'CategoriesTrees',
            'departments': 'Departments',
            'specification_filters': 'SpecificationFilters'
        }

        self._brands = brands
        self._categories_trees = categories_trees
        self._departments = departments
        self._specification_filters = specification_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Example2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Example2 of this Example2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brands(self):
        """Gets the brands of this Example2.

        

        :return: The brands of this Example2.
        :rtype: List[Brand]
        """
        return self._brands

    @brands.setter
    def brands(self, brands):
        """Sets the brands of this Example2.

        

        :param brands: The brands of this Example2.
        :type brands: List[Brand]
        """
        if brands is None:
            raise ValueError("Invalid value for `brands`, must not be `None`")

        self._brands = brands

    @property
    def categories_trees(self):
        """Gets the categories_trees of this Example2.

        

        :return: The categories_trees of this Example2.
        :rtype: List[CategoriesTree]
        """
        return self._categories_trees

    @categories_trees.setter
    def categories_trees(self, categories_trees):
        """Sets the categories_trees of this Example2.

        

        :param categories_trees: The categories_trees of this Example2.
        :type categories_trees: List[CategoriesTree]
        """
        if categories_trees is None:
            raise ValueError("Invalid value for `categories_trees`, must not be `None`")

        self._categories_trees = categories_trees

    @property
    def departments(self):
        """Gets the departments of this Example2.

        

        :return: The departments of this Example2.
        :rtype: List[Department]
        """
        return self._departments

    @departments.setter
    def departments(self, departments):
        """Sets the departments of this Example2.

        

        :param departments: The departments of this Example2.
        :type departments: List[Department]
        """
        if departments is None:
            raise ValueError("Invalid value for `departments`, must not be `None`")

        self._departments = departments

    @property
    def specification_filters(self):
        """Gets the specification_filters of this Example2.


        :return: The specification_filters of this Example2.
        :rtype: SpecificationFilters
        """
        return self._specification_filters

    @specification_filters.setter
    def specification_filters(self, specification_filters):
        """Sets the specification_filters of this Example2.


        :param specification_filters: The specification_filters of this Example2.
        :type specification_filters: SpecificationFilters
        """
        if specification_filters is None:
            raise ValueError("Invalid value for `specification_filters`, must not be `None`")

        self._specification_filters = specification_filters
