# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeliverySlaPerType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, estimated_time_span_to_delivery: str=None, price: float=None, type_name: str=None):
        """DeliverySlaPerType - a model defined in OpenAPI

        :param estimated_time_span_to_delivery: The estimated_time_span_to_delivery of this DeliverySlaPerType.
        :param price: The price of this DeliverySlaPerType.
        :param type_name: The type_name of this DeliverySlaPerType.
        """
        self.openapi_types = {
            'estimated_time_span_to_delivery': str,
            'price': float,
            'type_name': str
        }

        self.attribute_map = {
            'estimated_time_span_to_delivery': 'EstimatedTimeSpanToDelivery',
            'price': 'Price',
            'type_name': 'TypeName'
        }

        self._estimated_time_span_to_delivery = estimated_time_span_to_delivery
        self._price = price
        self._type_name = type_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeliverySlaPerType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeliverySlaPerType of this DeliverySlaPerType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def estimated_time_span_to_delivery(self):
        """Gets the estimated_time_span_to_delivery of this DeliverySlaPerType.


        :return: The estimated_time_span_to_delivery of this DeliverySlaPerType.
        :rtype: str
        """
        return self._estimated_time_span_to_delivery

    @estimated_time_span_to_delivery.setter
    def estimated_time_span_to_delivery(self, estimated_time_span_to_delivery):
        """Sets the estimated_time_span_to_delivery of this DeliverySlaPerType.


        :param estimated_time_span_to_delivery: The estimated_time_span_to_delivery of this DeliverySlaPerType.
        :type estimated_time_span_to_delivery: str
        """
        if estimated_time_span_to_delivery is None:
            raise ValueError("Invalid value for `estimated_time_span_to_delivery`, must not be `None`")

        self._estimated_time_span_to_delivery = estimated_time_span_to_delivery

    @property
    def price(self):
        """Gets the price of this DeliverySlaPerType.


        :return: The price of this DeliverySlaPerType.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this DeliverySlaPerType.


        :param price: The price of this DeliverySlaPerType.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def type_name(self):
        """Gets the type_name of this DeliverySlaPerType.


        :return: The type_name of this DeliverySlaPerType.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this DeliverySlaPerType.


        :param type_name: The type_name of this DeliverySlaPerType.
        :type type_name: str
        """
        if type_name is None:
            raise ValueError("Invalid value for `type_name`, must not be `None`")

        self._type_name = type_name
