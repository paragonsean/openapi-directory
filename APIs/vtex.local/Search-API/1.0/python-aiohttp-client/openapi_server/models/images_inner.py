# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImagesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_id: str=None, image_label: str=None, image_last_modified: str=None, image_tag: str=None, image_text: str=None, image_url: str=None):
        """ImagesInner - a model defined in OpenAPI

        :param image_id: The image_id of this ImagesInner.
        :param image_label: The image_label of this ImagesInner.
        :param image_last_modified: The image_last_modified of this ImagesInner.
        :param image_tag: The image_tag of this ImagesInner.
        :param image_text: The image_text of this ImagesInner.
        :param image_url: The image_url of this ImagesInner.
        """
        self.openapi_types = {
            'image_id': str,
            'image_label': str,
            'image_last_modified': str,
            'image_tag': str,
            'image_text': str,
            'image_url': str
        }

        self.attribute_map = {
            'image_id': 'imageId',
            'image_label': 'imageLabel',
            'image_last_modified': 'imageLastModified',
            'image_tag': 'imageTag',
            'image_text': 'imageText',
            'image_url': 'imageUrl'
        }

        self._image_id = image_id
        self._image_label = image_label
        self._image_last_modified = image_last_modified
        self._image_tag = image_tag
        self._image_text = image_text
        self._image_url = image_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImagesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The images_inner of this ImagesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_id(self):
        """Gets the image_id of this ImagesInner.

        Image ID.

        :return: The image_id of this ImagesInner.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this ImagesInner.

        Image ID.

        :param image_id: The image_id of this ImagesInner.
        :type image_id: str
        """
        if image_id is None:
            raise ValueError("Invalid value for `image_id`, must not be `None`")

        self._image_id = image_id

    @property
    def image_label(self):
        """Gets the image_label of this ImagesInner.

        Image label.

        :return: The image_label of this ImagesInner.
        :rtype: str
        """
        return self._image_label

    @image_label.setter
    def image_label(self, image_label):
        """Sets the image_label of this ImagesInner.

        Image label.

        :param image_label: The image_label of this ImagesInner.
        :type image_label: str
        """
        if image_label is None:
            raise ValueError("Invalid value for `image_label`, must not be `None`")

        self._image_label = image_label

    @property
    def image_last_modified(self):
        """Gets the image_last_modified of this ImagesInner.

        Date and time of the last update of the image.

        :return: The image_last_modified of this ImagesInner.
        :rtype: str
        """
        return self._image_last_modified

    @image_last_modified.setter
    def image_last_modified(self, image_last_modified):
        """Sets the image_last_modified of this ImagesInner.

        Date and time of the last update of the image.

        :param image_last_modified: The image_last_modified of this ImagesInner.
        :type image_last_modified: str
        """
        if image_last_modified is None:
            raise ValueError("Invalid value for `image_last_modified`, must not be `None`")

        self._image_last_modified = image_last_modified

    @property
    def image_tag(self):
        """Gets the image_tag of this ImagesInner.

        Image tag.

        :return: The image_tag of this ImagesInner.
        :rtype: str
        """
        return self._image_tag

    @image_tag.setter
    def image_tag(self, image_tag):
        """Sets the image_tag of this ImagesInner.

        Image tag.

        :param image_tag: The image_tag of this ImagesInner.
        :type image_tag: str
        """
        if image_tag is None:
            raise ValueError("Invalid value for `image_tag`, must not be `None`")

        self._image_tag = image_tag

    @property
    def image_text(self):
        """Gets the image_text of this ImagesInner.

        Image text.

        :return: The image_text of this ImagesInner.
        :rtype: str
        """
        return self._image_text

    @image_text.setter
    def image_text(self, image_text):
        """Sets the image_text of this ImagesInner.

        Image text.

        :param image_text: The image_text of this ImagesInner.
        :type image_text: str
        """
        if image_text is None:
            raise ValueError("Invalid value for `image_text`, must not be `None`")

        self._image_text = image_text

    @property
    def image_url(self):
        """Gets the image_url of this ImagesInner.

        Image URL.

        :return: The image_url of this ImagesInner.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this ImagesInner.

        Image URL.

        :param image_url: The image_url of this ImagesInner.
        :type image_url: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")

        self._image_url = image_url
