# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.installment_options_inner import InstallmentOptionsInner
from openapi_server.models.payment_systems_inner import PaymentSystemsInner
from openapi_server import util


class PaymentOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_accounts: List[object]=None, available_tokens: List[object]=None, gift_card_messages: List[object]=None, gift_cards: List[object]=None, installment_options: List[InstallmentOptionsInner]=None, payment_systems: List[PaymentSystemsInner]=None, payments: List[object]=None):
        """PaymentOptions - a model defined in OpenAPI

        :param available_accounts: The available_accounts of this PaymentOptions.
        :param available_tokens: The available_tokens of this PaymentOptions.
        :param gift_card_messages: The gift_card_messages of this PaymentOptions.
        :param gift_cards: The gift_cards of this PaymentOptions.
        :param installment_options: The installment_options of this PaymentOptions.
        :param payment_systems: The payment_systems of this PaymentOptions.
        :param payments: The payments of this PaymentOptions.
        """
        self.openapi_types = {
            'available_accounts': List[object],
            'available_tokens': List[object],
            'gift_card_messages': List[object],
            'gift_cards': List[object],
            'installment_options': List[InstallmentOptionsInner],
            'payment_systems': List[PaymentSystemsInner],
            'payments': List[object]
        }

        self.attribute_map = {
            'available_accounts': 'availableAccounts',
            'available_tokens': 'availableTokens',
            'gift_card_messages': 'giftCardMessages',
            'gift_cards': 'giftCards',
            'installment_options': 'installmentOptions',
            'payment_systems': 'paymentSystems',
            'payments': 'payments'
        }

        self._available_accounts = available_accounts
        self._available_tokens = available_tokens
        self._gift_card_messages = gift_card_messages
        self._gift_cards = gift_cards
        self._installment_options = installment_options
        self._payment_systems = payment_systems
        self._payments = payments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentOptions of this PaymentOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_accounts(self):
        """Gets the available_accounts of this PaymentOptions.

        Available accounts.

        :return: The available_accounts of this PaymentOptions.
        :rtype: List[object]
        """
        return self._available_accounts

    @available_accounts.setter
    def available_accounts(self, available_accounts):
        """Sets the available_accounts of this PaymentOptions.

        Available accounts.

        :param available_accounts: The available_accounts of this PaymentOptions.
        :type available_accounts: List[object]
        """
        if available_accounts is None:
            raise ValueError("Invalid value for `available_accounts`, must not be `None`")

        self._available_accounts = available_accounts

    @property
    def available_tokens(self):
        """Gets the available_tokens of this PaymentOptions.

        Available tokens.

        :return: The available_tokens of this PaymentOptions.
        :rtype: List[object]
        """
        return self._available_tokens

    @available_tokens.setter
    def available_tokens(self, available_tokens):
        """Sets the available_tokens of this PaymentOptions.

        Available tokens.

        :param available_tokens: The available_tokens of this PaymentOptions.
        :type available_tokens: List[object]
        """
        if available_tokens is None:
            raise ValueError("Invalid value for `available_tokens`, must not be `None`")

        self._available_tokens = available_tokens

    @property
    def gift_card_messages(self):
        """Gets the gift_card_messages of this PaymentOptions.

        GiftCardMessages.

        :return: The gift_card_messages of this PaymentOptions.
        :rtype: List[object]
        """
        return self._gift_card_messages

    @gift_card_messages.setter
    def gift_card_messages(self, gift_card_messages):
        """Sets the gift_card_messages of this PaymentOptions.

        GiftCardMessages.

        :param gift_card_messages: The gift_card_messages of this PaymentOptions.
        :type gift_card_messages: List[object]
        """
        if gift_card_messages is None:
            raise ValueError("Invalid value for `gift_card_messages`, must not be `None`")

        self._gift_card_messages = gift_card_messages

    @property
    def gift_cards(self):
        """Gets the gift_cards of this PaymentOptions.

        GiftCards.

        :return: The gift_cards of this PaymentOptions.
        :rtype: List[object]
        """
        return self._gift_cards

    @gift_cards.setter
    def gift_cards(self, gift_cards):
        """Sets the gift_cards of this PaymentOptions.

        GiftCards.

        :param gift_cards: The gift_cards of this PaymentOptions.
        :type gift_cards: List[object]
        """
        if gift_cards is None:
            raise ValueError("Invalid value for `gift_cards`, must not be `None`")

        self._gift_cards = gift_cards

    @property
    def installment_options(self):
        """Gets the installment_options of this PaymentOptions.

        installment options.

        :return: The installment_options of this PaymentOptions.
        :rtype: List[InstallmentOptionsInner]
        """
        return self._installment_options

    @installment_options.setter
    def installment_options(self, installment_options):
        """Sets the installment_options of this PaymentOptions.

        installment options.

        :param installment_options: The installment_options of this PaymentOptions.
        :type installment_options: List[InstallmentOptionsInner]
        """
        if installment_options is None:
            raise ValueError("Invalid value for `installment_options`, must not be `None`")

        self._installment_options = installment_options

    @property
    def payment_systems(self):
        """Gets the payment_systems of this PaymentOptions.

        Payment systems.

        :return: The payment_systems of this PaymentOptions.
        :rtype: List[PaymentSystemsInner]
        """
        return self._payment_systems

    @payment_systems.setter
    def payment_systems(self, payment_systems):
        """Sets the payment_systems of this PaymentOptions.

        Payment systems.

        :param payment_systems: The payment_systems of this PaymentOptions.
        :type payment_systems: List[PaymentSystemsInner]
        """
        if payment_systems is None:
            raise ValueError("Invalid value for `payment_systems`, must not be `None`")

        self._payment_systems = payment_systems

    @property
    def payments(self):
        """Gets the payments of this PaymentOptions.

        Payments.

        :return: The payments of this PaymentOptions.
        :rtype: List[object]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this PaymentOptions.

        Payments.

        :param payments: The payments of this PaymentOptions.
        :type payments: List[object]
        """
        if payments is None:
            raise ValueError("Invalid value for `payments`, must not be `None`")

        self._payments = payments
