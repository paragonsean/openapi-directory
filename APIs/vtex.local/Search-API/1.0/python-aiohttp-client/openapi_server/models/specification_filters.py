# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aplicativos_de_tv import AplicativosDeTV
from openapi_server.models.resolu_o import ResoluO
from openapi_server.models.tamanho_da_tela import TamanhoDaTela
from openapi_server import util


class SpecificationFilters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aplicativos_de_tv: List[AplicativosDeTV]=None, resoluo: List[ResoluO]=None, tamanho_da_tela: List[TamanhoDaTela]=None):
        """SpecificationFilters - a model defined in OpenAPI

        :param aplicativos_de_tv: The aplicativos_de_tv of this SpecificationFilters.
        :param resoluo: The resoluo of this SpecificationFilters.
        :param tamanho_da_tela: The tamanho_da_tela of this SpecificationFilters.
        """
        self.openapi_types = {
            'aplicativos_de_tv': List[AplicativosDeTV],
            'resoluo': List[ResoluO],
            'tamanho_da_tela': List[TamanhoDaTela]
        }

        self.attribute_map = {
            'aplicativos_de_tv': 'Aplicativos de TV',
            'resoluo': 'Resolução',
            'tamanho_da_tela': 'Tamanho da Tela'
        }

        self._aplicativos_de_tv = aplicativos_de_tv
        self._resoluo = resoluo
        self._tamanho_da_tela = tamanho_da_tela

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpecificationFilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpecificationFilters of this SpecificationFilters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aplicativos_de_tv(self):
        """Gets the aplicativos_de_tv of this SpecificationFilters.

        

        :return: The aplicativos_de_tv of this SpecificationFilters.
        :rtype: List[AplicativosDeTV]
        """
        return self._aplicativos_de_tv

    @aplicativos_de_tv.setter
    def aplicativos_de_tv(self, aplicativos_de_tv):
        """Sets the aplicativos_de_tv of this SpecificationFilters.

        

        :param aplicativos_de_tv: The aplicativos_de_tv of this SpecificationFilters.
        :type aplicativos_de_tv: List[AplicativosDeTV]
        """
        if aplicativos_de_tv is None:
            raise ValueError("Invalid value for `aplicativos_de_tv`, must not be `None`")

        self._aplicativos_de_tv = aplicativos_de_tv

    @property
    def resoluo(self):
        """Gets the resoluo of this SpecificationFilters.

        

        :return: The resoluo of this SpecificationFilters.
        :rtype: List[ResoluO]
        """
        return self._resoluo

    @resoluo.setter
    def resoluo(self, resoluo):
        """Sets the resoluo of this SpecificationFilters.

        

        :param resoluo: The resoluo of this SpecificationFilters.
        :type resoluo: List[ResoluO]
        """
        if resoluo is None:
            raise ValueError("Invalid value for `resoluo`, must not be `None`")

        self._resoluo = resoluo

    @property
    def tamanho_da_tela(self):
        """Gets the tamanho_da_tela of this SpecificationFilters.

        

        :return: The tamanho_da_tela of this SpecificationFilters.
        :rtype: List[TamanhoDaTela]
        """
        return self._tamanho_da_tela

    @tamanho_da_tela.setter
    def tamanho_da_tela(self, tamanho_da_tela):
        """Sets the tamanho_da_tela of this SpecificationFilters.

        

        :param tamanho_da_tela: The tamanho_da_tela of this SpecificationFilters.
        :type tamanho_da_tela: List[TamanhoDaTela]
        """
        if tamanho_da_tela is None:
            raise ValueError("Invalid value for `tamanho_da_tela`, must not be `None`")

        self._tamanho_da_tela = tamanho_da_tela
