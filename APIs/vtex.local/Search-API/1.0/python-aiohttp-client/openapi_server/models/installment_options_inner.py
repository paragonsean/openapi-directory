# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.installments_inner import InstallmentsInner
from openapi_server import util


class InstallmentOptionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bin: str=None, installments: List[InstallmentsInner]=None, payment_group_name: str=None, payment_name: str=None, payment_system: str=None, value: int=None):
        """InstallmentOptionsInner - a model defined in OpenAPI

        :param bin: The bin of this InstallmentOptionsInner.
        :param installments: The installments of this InstallmentOptionsInner.
        :param payment_group_name: The payment_group_name of this InstallmentOptionsInner.
        :param payment_name: The payment_name of this InstallmentOptionsInner.
        :param payment_system: The payment_system of this InstallmentOptionsInner.
        :param value: The value of this InstallmentOptionsInner.
        """
        self.openapi_types = {
            'bin': str,
            'installments': List[InstallmentsInner],
            'payment_group_name': str,
            'payment_name': str,
            'payment_system': str,
            'value': int
        }

        self.attribute_map = {
            'bin': 'bin',
            'installments': 'installments',
            'payment_group_name': 'paymentGroupName',
            'payment_name': 'paymentName',
            'payment_system': 'paymentSystem',
            'value': 'value'
        }

        self._bin = bin
        self._installments = installments
        self._payment_group_name = payment_group_name
        self._payment_name = payment_name
        self._payment_system = payment_system
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstallmentOptionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The installmentOptions_inner of this InstallmentOptionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bin(self):
        """Gets the bin of this InstallmentOptionsInner.

        Bin.

        :return: The bin of this InstallmentOptionsInner.
        :rtype: str
        """
        return self._bin

    @bin.setter
    def bin(self, bin):
        """Sets the bin of this InstallmentOptionsInner.

        Bin.

        :param bin: The bin of this InstallmentOptionsInner.
        :type bin: str
        """
        if bin is None:
            raise ValueError("Invalid value for `bin`, must not be `None`")

        self._bin = bin

    @property
    def installments(self):
        """Gets the installments of this InstallmentOptionsInner.

        Installments.

        :return: The installments of this InstallmentOptionsInner.
        :rtype: List[InstallmentsInner]
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this InstallmentOptionsInner.

        Installments.

        :param installments: The installments of this InstallmentOptionsInner.
        :type installments: List[InstallmentsInner]
        """
        if installments is None:
            raise ValueError("Invalid value for `installments`, must not be `None`")

        self._installments = installments

    @property
    def payment_group_name(self):
        """Gets the payment_group_name of this InstallmentOptionsInner.

        Payment group name.

        :return: The payment_group_name of this InstallmentOptionsInner.
        :rtype: str
        """
        return self._payment_group_name

    @payment_group_name.setter
    def payment_group_name(self, payment_group_name):
        """Sets the payment_group_name of this InstallmentOptionsInner.

        Payment group name.

        :param payment_group_name: The payment_group_name of this InstallmentOptionsInner.
        :type payment_group_name: str
        """
        if payment_group_name is None:
            raise ValueError("Invalid value for `payment_group_name`, must not be `None`")

        self._payment_group_name = payment_group_name

    @property
    def payment_name(self):
        """Gets the payment_name of this InstallmentOptionsInner.

        Payment name.

        :return: The payment_name of this InstallmentOptionsInner.
        :rtype: str
        """
        return self._payment_name

    @payment_name.setter
    def payment_name(self, payment_name):
        """Sets the payment_name of this InstallmentOptionsInner.

        Payment name.

        :param payment_name: The payment_name of this InstallmentOptionsInner.
        :type payment_name: str
        """
        if payment_name is None:
            raise ValueError("Invalid value for `payment_name`, must not be `None`")

        self._payment_name = payment_name

    @property
    def payment_system(self):
        """Gets the payment_system of this InstallmentOptionsInner.

        Payment system.

        :return: The payment_system of this InstallmentOptionsInner.
        :rtype: str
        """
        return self._payment_system

    @payment_system.setter
    def payment_system(self, payment_system):
        """Sets the payment_system of this InstallmentOptionsInner.

        Payment system.

        :param payment_system: The payment_system of this InstallmentOptionsInner.
        :type payment_system: str
        """
        if payment_system is None:
            raise ValueError("Invalid value for `payment_system`, must not be `None`")

        self._payment_system = payment_system

    @property
    def value(self):
        """Gets the value of this InstallmentOptionsInner.

        Value.

        :return: The value of this InstallmentOptionsInner.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InstallmentOptionsInner.

        Value.

        :param value: The value of this InstallmentOptionsInner.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
