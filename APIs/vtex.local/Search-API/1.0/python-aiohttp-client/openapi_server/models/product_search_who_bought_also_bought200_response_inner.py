# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.items_inner import ItemsInner
from openapi_server import util


class ProductSearchWhoBoughtAlsoBought200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_specifications: List[str]=None, all_specifications_groups: List[str]=None, brand: str=None, brand_id: int=None, brand_image_url: str=None, categories: List[object]=None, categories_ids: List[object]=None, category_id: str=None, cluster_highlights: object=None, description: str=None, items: List[ItemsInner]=None, link: str=None, link_text: str=None, meta_tag_description: str=None, product_clusters: object=None, product_id: str=None, product_name: str=None, product_reference: str=None, product_reference_code: int=None, product_title: str=None, release_date: str=None, searchable_clusters: object=None):
        """ProductSearchWhoBoughtAlsoBought200ResponseInner - a model defined in OpenAPI

        :param all_specifications: The all_specifications of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param all_specifications_groups: The all_specifications_groups of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param brand: The brand of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param brand_id: The brand_id of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param brand_image_url: The brand_image_url of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param categories: The categories of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param categories_ids: The categories_ids of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param category_id: The category_id of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param cluster_highlights: The cluster_highlights of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param description: The description of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param items: The items of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param link: The link of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param link_text: The link_text of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param meta_tag_description: The meta_tag_description of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param product_clusters: The product_clusters of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param product_id: The product_id of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param product_name: The product_name of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param product_reference: The product_reference of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param product_reference_code: The product_reference_code of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param product_title: The product_title of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param release_date: The release_date of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :param searchable_clusters: The searchable_clusters of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        """
        self.openapi_types = {
            'all_specifications': List[str],
            'all_specifications_groups': List[str],
            'brand': str,
            'brand_id': int,
            'brand_image_url': str,
            'categories': List[object],
            'categories_ids': List[object],
            'category_id': str,
            'cluster_highlights': object,
            'description': str,
            'items': List[ItemsInner],
            'link': str,
            'link_text': str,
            'meta_tag_description': str,
            'product_clusters': object,
            'product_id': str,
            'product_name': str,
            'product_reference': str,
            'product_reference_code': int,
            'product_title': str,
            'release_date': str,
            'searchable_clusters': object
        }

        self.attribute_map = {
            'all_specifications': 'allSpecifications',
            'all_specifications_groups': 'allSpecificationsGroups',
            'brand': 'brand',
            'brand_id': 'brandId',
            'brand_image_url': 'brandImageUrl',
            'categories': 'categories',
            'categories_ids': 'categoriesIds',
            'category_id': 'categoryId',
            'cluster_highlights': 'clusterHighlights',
            'description': 'description',
            'items': 'items',
            'link': 'link',
            'link_text': 'linkText',
            'meta_tag_description': 'metaTagDescription',
            'product_clusters': 'productClusters',
            'product_id': 'productId',
            'product_name': 'productName',
            'product_reference': 'productReference',
            'product_reference_code': 'productReferenceCode',
            'product_title': 'productTitle',
            'release_date': 'releaseDate',
            'searchable_clusters': 'searchableClusters'
        }

        self._all_specifications = all_specifications
        self._all_specifications_groups = all_specifications_groups
        self._brand = brand
        self._brand_id = brand_id
        self._brand_image_url = brand_image_url
        self._categories = categories
        self._categories_ids = categories_ids
        self._category_id = category_id
        self._cluster_highlights = cluster_highlights
        self._description = description
        self._items = items
        self._link = link
        self._link_text = link_text
        self._meta_tag_description = meta_tag_description
        self._product_clusters = product_clusters
        self._product_id = product_id
        self._product_name = product_name
        self._product_reference = product_reference
        self._product_reference_code = product_reference_code
        self._product_title = product_title
        self._release_date = release_date
        self._searchable_clusters = searchable_clusters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductSearchWhoBoughtAlsoBought200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductSearchWhoBoughtAlsoBought_200_response_inner of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_specifications(self):
        """Gets the all_specifications of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Array of the product's specifications.

        :return: The all_specifications of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: List[str]
        """
        return self._all_specifications

    @all_specifications.setter
    def all_specifications(self, all_specifications):
        """Sets the all_specifications of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Array of the product's specifications.

        :param all_specifications: The all_specifications of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type all_specifications: List[str]
        """
        if all_specifications is None:
            raise ValueError("Invalid value for `all_specifications`, must not be `None`")

        self._all_specifications = all_specifications

    @property
    def all_specifications_groups(self):
        """Gets the all_specifications_groups of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Array of the product's specifications groups.

        :return: The all_specifications_groups of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: List[str]
        """
        return self._all_specifications_groups

    @all_specifications_groups.setter
    def all_specifications_groups(self, all_specifications_groups):
        """Sets the all_specifications_groups of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Array of the product's specifications groups.

        :param all_specifications_groups: The all_specifications_groups of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type all_specifications_groups: List[str]
        """
        if all_specifications_groups is None:
            raise ValueError("Invalid value for `all_specifications_groups`, must not be `None`")

        self._all_specifications_groups = all_specifications_groups

    @property
    def brand(self):
        """Gets the brand of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Brand name.

        :return: The brand of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Brand name.

        :param brand: The brand of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type brand: str
        """
        if brand is None:
            raise ValueError("Invalid value for `brand`, must not be `None`")

        self._brand = brand

    @property
    def brand_id(self):
        """Gets the brand_id of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product brand ID.

        :return: The brand_id of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: int
        """
        return self._brand_id

    @brand_id.setter
    def brand_id(self, brand_id):
        """Sets the brand_id of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product brand ID.

        :param brand_id: The brand_id of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type brand_id: int
        """
        if brand_id is None:
            raise ValueError("Invalid value for `brand_id`, must not be `None`")

        self._brand_id = brand_id

    @property
    def brand_image_url(self):
        """Gets the brand_image_url of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product's brand image URL.

        :return: The brand_image_url of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: str
        """
        return self._brand_image_url

    @brand_image_url.setter
    def brand_image_url(self, brand_image_url):
        """Sets the brand_image_url of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product's brand image URL.

        :param brand_image_url: The brand_image_url of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type brand_image_url: str
        """
        if brand_image_url is None:
            raise ValueError("Invalid value for `brand_image_url`, must not be `None`")

        self._brand_image_url = brand_image_url

    @property
    def categories(self):
        """Gets the categories of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Array of the product's categories URLs.

        :return: The categories of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: List[object]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Array of the product's categories URLs.

        :param categories: The categories of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type categories: List[object]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")

        self._categories = categories

    @property
    def categories_ids(self):
        """Gets the categories_ids of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Array of the product's categories IDs.

        :return: The categories_ids of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: List[object]
        """
        return self._categories_ids

    @categories_ids.setter
    def categories_ids(self, categories_ids):
        """Sets the categories_ids of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Array of the product's categories IDs.

        :param categories_ids: The categories_ids of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type categories_ids: List[object]
        """
        if categories_ids is None:
            raise ValueError("Invalid value for `categories_ids`, must not be `None`")

        self._categories_ids = categories_ids

    @property
    def category_id(self):
        """Gets the category_id of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product category ID.

        :return: The category_id of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product category ID.

        :param category_id: The category_id of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type category_id: str
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")

        self._category_id = category_id

    @property
    def cluster_highlights(self):
        """Gets the cluster_highlights of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Cluster highlight ID and name.

        :return: The cluster_highlights of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: object
        """
        return self._cluster_highlights

    @cluster_highlights.setter
    def cluster_highlights(self, cluster_highlights):
        """Sets the cluster_highlights of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Cluster highlight ID and name.

        :param cluster_highlights: The cluster_highlights of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type cluster_highlights: object
        """
        if cluster_highlights is None:
            raise ValueError("Invalid value for `cluster_highlights`, must not be `None`")

        self._cluster_highlights = cluster_highlights

    @property
    def description(self):
        """Gets the description of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Description of the main information related to the product. A simple and easy to understand summary for the customer.

        :return: The description of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Description of the main information related to the product. A simple and easy to understand summary for the customer.

        :param description: The description of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def items(self):
        """Gets the items of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Array containing the product SKU general information.

        :return: The items of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: List[ItemsInner]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Array containing the product SKU general information.

        :param items: The items of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type items: List[ItemsInner]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def link(self):
        """Gets the link of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product URL.

        :return: The link of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product URL.

        :param link: The link of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def link_text(self):
        """Gets the link_text of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product URL.

        :return: The link_text of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: str
        """
        return self._link_text

    @link_text.setter
    def link_text(self, link_text):
        """Sets the link_text of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product URL.

        :param link_text: The link_text of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type link_text: str
        """
        if link_text is None:
            raise ValueError("Invalid value for `link_text`, must not be `None`")

        self._link_text = link_text

    @property
    def meta_tag_description(self):
        """Gets the meta_tag_description of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Brief description of the category. It's recommended that you don't exceed 150 characters so that the search engines can display it correctly in the results page.

        :return: The meta_tag_description of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: str
        """
        return self._meta_tag_description

    @meta_tag_description.setter
    def meta_tag_description(self, meta_tag_description):
        """Sets the meta_tag_description of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Brief description of the category. It's recommended that you don't exceed 150 characters so that the search engines can display it correctly in the results page.

        :param meta_tag_description: The meta_tag_description of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type meta_tag_description: str
        """
        if meta_tag_description is None:
            raise ValueError("Invalid value for `meta_tag_description`, must not be `None`")

        self._meta_tag_description = meta_tag_description

    @property
    def product_clusters(self):
        """Gets the product_clusters of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product clusters' IDs and names.

        :return: The product_clusters of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: object
        """
        return self._product_clusters

    @product_clusters.setter
    def product_clusters(self, product_clusters):
        """Sets the product_clusters of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product clusters' IDs and names.

        :param product_clusters: The product_clusters of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type product_clusters: object
        """
        if product_clusters is None:
            raise ValueError("Invalid value for `product_clusters`, must not be `None`")

        self._product_clusters = product_clusters

    @property
    def product_id(self):
        """Gets the product_id of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product unique identifier.

        :return: The product_id of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product unique identifier.

        :param product_id: The product_id of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type product_id: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def product_name(self):
        """Gets the product_name of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product name.

        :return: The product_name of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product name.

        :param product_name: The product_name of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type product_name: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")

        self._product_name = product_name

    @property
    def product_reference(self):
        """Gets the product_reference of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product reference.

        :return: The product_reference of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: str
        """
        return self._product_reference

    @product_reference.setter
    def product_reference(self, product_reference):
        """Sets the product_reference of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product reference.

        :param product_reference: The product_reference of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type product_reference: str
        """
        if product_reference is None:
            raise ValueError("Invalid value for `product_reference`, must not be `None`")

        self._product_reference = product_reference

    @property
    def product_reference_code(self):
        """Gets the product_reference_code of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product reference ID.

        :return: The product_reference_code of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: int
        """
        return self._product_reference_code

    @product_reference_code.setter
    def product_reference_code(self, product_reference_code):
        """Sets the product_reference_code of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product reference ID.

        :param product_reference_code: The product_reference_code of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type product_reference_code: int
        """
        if product_reference_code is None:
            raise ValueError("Invalid value for `product_reference_code`, must not be `None`")

        self._product_reference_code = product_reference_code

    @property
    def product_title(self):
        """Gets the product_title of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Text that is in the browser tab and corresponds to the title of the product page. This field is important for SEO.

        :return: The product_title of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: str
        """
        return self._product_title

    @product_title.setter
    def product_title(self, product_title):
        """Sets the product_title of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Text that is in the browser tab and corresponds to the title of the product page. This field is important for SEO.

        :param product_title: The product_title of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type product_title: str
        """
        if product_title is None:
            raise ValueError("Invalid value for `product_title`, must not be `None`")

        self._product_title = product_title

    @property
    def release_date(self):
        """Gets the release_date of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product release date.

        :return: The release_date of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Product release date.

        :param release_date: The release_date of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type release_date: str
        """
        if release_date is None:
            raise ValueError("Invalid value for `release_date`, must not be `None`")

        self._release_date = release_date

    @property
    def searchable_clusters(self):
        """Gets the searchable_clusters of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Searchable clusters IDs and names

        :return: The searchable_clusters of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :rtype: object
        """
        return self._searchable_clusters

    @searchable_clusters.setter
    def searchable_clusters(self, searchable_clusters):
        """Sets the searchable_clusters of this ProductSearchWhoBoughtAlsoBought200ResponseInner.

        Searchable clusters IDs and names

        :param searchable_clusters: The searchable_clusters of this ProductSearchWhoBoughtAlsoBought200ResponseInner.
        :type searchable_clusters: object
        """
        if searchable_clusters is None:
            raise ValueError("Invalid value for `searchable_clusters`, must not be `None`")

        self._searchable_clusters = searchable_clusters
