# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CategoriesTrees(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, displayed_items: int=None, total_items: int=None):
        """CategoriesTrees - a model defined in OpenAPI

        :param displayed_items: The displayed_items of this CategoriesTrees.
        :param total_items: The total_items of this CategoriesTrees.
        """
        self.openapi_types = {
            'displayed_items': int,
            'total_items': int
        }

        self.attribute_map = {
            'displayed_items': 'DisplayedItems',
            'total_items': 'TotalItems'
        }

        self._displayed_items = displayed_items
        self._total_items = total_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategoriesTrees':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CategoriesTrees of this CategoriesTrees.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def displayed_items(self):
        """Gets the displayed_items of this CategoriesTrees.

        Quantity of displayed items.

        :return: The displayed_items of this CategoriesTrees.
        :rtype: int
        """
        return self._displayed_items

    @displayed_items.setter
    def displayed_items(self, displayed_items):
        """Sets the displayed_items of this CategoriesTrees.

        Quantity of displayed items.

        :param displayed_items: The displayed_items of this CategoriesTrees.
        :type displayed_items: int
        """
        if displayed_items is None:
            raise ValueError("Invalid value for `displayed_items`, must not be `None`")

        self._displayed_items = displayed_items

    @property
    def total_items(self):
        """Gets the total_items of this CategoriesTrees.

        Quantity of total items.

        :return: The total_items of this CategoriesTrees.
        :rtype: int
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items):
        """Sets the total_items of this CategoriesTrees.

        Quantity of total items.

        :param total_items: The total_items of this CategoriesTrees.
        :type total_items: int
        """
        if total_items is None:
            raise ValueError("Invalid value for `total_items`, must not be `None`")

        self._total_items = total_items
