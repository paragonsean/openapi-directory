# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.commertial_offer import CommertialOffer
from openapi_server import util


class SellersInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, add_to_cart_link: str=None, commertial_offer: CommertialOffer=None, seller_default: bool=None, seller_id: str=None, seller_name: str=None):
        """SellersInner - a model defined in OpenAPI

        :param add_to_cart_link: The add_to_cart_link of this SellersInner.
        :param commertial_offer: The commertial_offer of this SellersInner.
        :param seller_default: The seller_default of this SellersInner.
        :param seller_id: The seller_id of this SellersInner.
        :param seller_name: The seller_name of this SellersInner.
        """
        self.openapi_types = {
            'add_to_cart_link': str,
            'commertial_offer': CommertialOffer,
            'seller_default': bool,
            'seller_id': str,
            'seller_name': str
        }

        self.attribute_map = {
            'add_to_cart_link': 'addToCartLink',
            'commertial_offer': 'commertialOffer',
            'seller_default': 'sellerDefault',
            'seller_id': 'sellerId',
            'seller_name': 'sellerName'
        }

        self._add_to_cart_link = add_to_cart_link
        self._commertial_offer = commertial_offer
        self._seller_default = seller_default
        self._seller_id = seller_id
        self._seller_name = seller_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SellersInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sellers_inner of this SellersInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add_to_cart_link(self):
        """Gets the add_to_cart_link of this SellersInner.

        URL to add the product to the cart.

        :return: The add_to_cart_link of this SellersInner.
        :rtype: str
        """
        return self._add_to_cart_link

    @add_to_cart_link.setter
    def add_to_cart_link(self, add_to_cart_link):
        """Sets the add_to_cart_link of this SellersInner.

        URL to add the product to the cart.

        :param add_to_cart_link: The add_to_cart_link of this SellersInner.
        :type add_to_cart_link: str
        """
        if add_to_cart_link is None:
            raise ValueError("Invalid value for `add_to_cart_link`, must not be `None`")

        self._add_to_cart_link = add_to_cart_link

    @property
    def commertial_offer(self):
        """Gets the commertial_offer of this SellersInner.


        :return: The commertial_offer of this SellersInner.
        :rtype: CommertialOffer
        """
        return self._commertial_offer

    @commertial_offer.setter
    def commertial_offer(self, commertial_offer):
        """Sets the commertial_offer of this SellersInner.


        :param commertial_offer: The commertial_offer of this SellersInner.
        :type commertial_offer: CommertialOffer
        """
        if commertial_offer is None:
            raise ValueError("Invalid value for `commertial_offer`, must not be `None`")

        self._commertial_offer = commertial_offer

    @property
    def seller_default(self):
        """Gets the seller_default of this SellersInner.

        If the seller is default or not.

        :return: The seller_default of this SellersInner.
        :rtype: bool
        """
        return self._seller_default

    @seller_default.setter
    def seller_default(self, seller_default):
        """Sets the seller_default of this SellersInner.

        If the seller is default or not.

        :param seller_default: The seller_default of this SellersInner.
        :type seller_default: bool
        """
        if seller_default is None:
            raise ValueError("Invalid value for `seller_default`, must not be `None`")

        self._seller_default = seller_default

    @property
    def seller_id(self):
        """Gets the seller_id of this SellersInner.

        SKU seller ID.

        :return: The seller_id of this SellersInner.
        :rtype: str
        """
        return self._seller_id

    @seller_id.setter
    def seller_id(self, seller_id):
        """Sets the seller_id of this SellersInner.

        SKU seller ID.

        :param seller_id: The seller_id of this SellersInner.
        :type seller_id: str
        """
        if seller_id is None:
            raise ValueError("Invalid value for `seller_id`, must not be `None`")

        self._seller_id = seller_id

    @property
    def seller_name(self):
        """Gets the seller_name of this SellersInner.

        SKU seller name.

        :return: The seller_name of this SellersInner.
        :rtype: str
        """
        return self._seller_name

    @seller_name.setter
    def seller_name(self, seller_name):
        """Sets the seller_name of this SellersInner.

        SKU seller name.

        :param seller_name: The seller_name of this SellersInner.
        :type seller_name: str
        """
        if seller_name is None:
            raise ValueError("Invalid value for `seller_name`, must not be `None`")

        self._seller_name = seller_name
