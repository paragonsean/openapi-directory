# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResoluO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, link: str=None, name: str=None, quantity: int=None):
        """ResoluO - a model defined in OpenAPI

        :param link: The link of this ResoluO.
        :param name: The name of this ResoluO.
        :param quantity: The quantity of this ResoluO.
        """
        self.openapi_types = {
            'link': str,
            'name': str,
            'quantity': int
        }

        self.attribute_map = {
            'link': 'Link',
            'name': 'Name',
            'quantity': 'Quantity'
        }

        self._link = link
        self._name = name
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResoluO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResoluO of this ResoluO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def link(self):
        """Gets the link of this ResoluO.


        :return: The link of this ResoluO.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ResoluO.


        :param link: The link of this ResoluO.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def name(self):
        """Gets the name of this ResoluO.


        :return: The name of this ResoluO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResoluO.


        :param name: The name of this ResoluO.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def quantity(self):
        """Gets the quantity of this ResoluO.


        :return: The quantity of this ResoluO.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ResoluO.


        :param quantity: The quantity of this ResoluO.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity
