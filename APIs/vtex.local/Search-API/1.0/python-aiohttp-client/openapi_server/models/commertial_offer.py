# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delivery_sla_samples_inner import DeliverySlaSamplesInner
from openapi_server.models.delivery_sla_samples_per_region import DeliverySlaSamplesPerRegion
from openapi_server.models.installments_inner import InstallmentsInner
from openapi_server.models.payment_options import PaymentOptions
from openapi_server import util


class CommertialOffer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_quantity: int=None, buy_together: List[object]=None, cache_version_used_to_call_checkout: str=None, delivery_sla_samples: List[DeliverySlaSamplesInner]=None, delivery_sla_samples_per_region: DeliverySlaSamplesPerRegion=None, discount_high_light: List[object]=None, get_info_error_message: str=None, gift_sku_ids: List[object]=None, installments: List[InstallmentsInner]=None, is_available: bool=None, item_metadata_attachment: List[object]=None, list_price: float=None, payment_options: PaymentOptions=None, price: float=None, price_valid_until: str=None, price_without_discount: float=None, reward_value: float=None, sale_channel: int=None, tax: float=None, teasers: List[object]=None):
        """CommertialOffer - a model defined in OpenAPI

        :param available_quantity: The available_quantity of this CommertialOffer.
        :param buy_together: The buy_together of this CommertialOffer.
        :param cache_version_used_to_call_checkout: The cache_version_used_to_call_checkout of this CommertialOffer.
        :param delivery_sla_samples: The delivery_sla_samples of this CommertialOffer.
        :param delivery_sla_samples_per_region: The delivery_sla_samples_per_region of this CommertialOffer.
        :param discount_high_light: The discount_high_light of this CommertialOffer.
        :param get_info_error_message: The get_info_error_message of this CommertialOffer.
        :param gift_sku_ids: The gift_sku_ids of this CommertialOffer.
        :param installments: The installments of this CommertialOffer.
        :param is_available: The is_available of this CommertialOffer.
        :param item_metadata_attachment: The item_metadata_attachment of this CommertialOffer.
        :param list_price: The list_price of this CommertialOffer.
        :param payment_options: The payment_options of this CommertialOffer.
        :param price: The price of this CommertialOffer.
        :param price_valid_until: The price_valid_until of this CommertialOffer.
        :param price_without_discount: The price_without_discount of this CommertialOffer.
        :param reward_value: The reward_value of this CommertialOffer.
        :param sale_channel: The sale_channel of this CommertialOffer.
        :param tax: The tax of this CommertialOffer.
        :param teasers: The teasers of this CommertialOffer.
        """
        self.openapi_types = {
            'available_quantity': int,
            'buy_together': List[object],
            'cache_version_used_to_call_checkout': str,
            'delivery_sla_samples': List[DeliverySlaSamplesInner],
            'delivery_sla_samples_per_region': DeliverySlaSamplesPerRegion,
            'discount_high_light': List[object],
            'get_info_error_message': str,
            'gift_sku_ids': List[object],
            'installments': List[InstallmentsInner],
            'is_available': bool,
            'item_metadata_attachment': List[object],
            'list_price': float,
            'payment_options': PaymentOptions,
            'price': float,
            'price_valid_until': str,
            'price_without_discount': float,
            'reward_value': float,
            'sale_channel': int,
            'tax': float,
            'teasers': List[object]
        }

        self.attribute_map = {
            'available_quantity': 'AvailableQuantity',
            'buy_together': 'BuyTogether',
            'cache_version_used_to_call_checkout': 'CacheVersionUsedToCallCheckout',
            'delivery_sla_samples': 'DeliverySlaSamples',
            'delivery_sla_samples_per_region': 'DeliverySlaSamplesPerRegion',
            'discount_high_light': 'DiscountHighLight',
            'get_info_error_message': 'GetInfoErrorMessage',
            'gift_sku_ids': 'GiftSkuIds',
            'installments': 'Installments',
            'is_available': 'IsAvailable',
            'item_metadata_attachment': 'ItemMetadataAttachment',
            'list_price': 'ListPrice',
            'payment_options': 'PaymentOptions',
            'price': 'Price',
            'price_valid_until': 'PriceValidUntil',
            'price_without_discount': 'PriceWithoutDiscount',
            'reward_value': 'RewardValue',
            'sale_channel': 'SaleChannel',
            'tax': 'Tax',
            'teasers': 'Teasers'
        }

        self._available_quantity = available_quantity
        self._buy_together = buy_together
        self._cache_version_used_to_call_checkout = cache_version_used_to_call_checkout
        self._delivery_sla_samples = delivery_sla_samples
        self._delivery_sla_samples_per_region = delivery_sla_samples_per_region
        self._discount_high_light = discount_high_light
        self._get_info_error_message = get_info_error_message
        self._gift_sku_ids = gift_sku_ids
        self._installments = installments
        self._is_available = is_available
        self._item_metadata_attachment = item_metadata_attachment
        self._list_price = list_price
        self._payment_options = payment_options
        self._price = price
        self._price_valid_until = price_valid_until
        self._price_without_discount = price_without_discount
        self._reward_value = reward_value
        self._sale_channel = sale_channel
        self._tax = tax
        self._teasers = teasers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommertialOffer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The commertialOffer of this CommertialOffer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_quantity(self):
        """Gets the available_quantity of this CommertialOffer.

        Use the `IsAvailable` field instead.

        :return: The available_quantity of this CommertialOffer.
        :rtype: int
        """
        return self._available_quantity

    @available_quantity.setter
    def available_quantity(self, available_quantity):
        """Sets the available_quantity of this CommertialOffer.

        Use the `IsAvailable` field instead.

        :param available_quantity: The available_quantity of this CommertialOffer.
        :type available_quantity: int
        """
        if available_quantity is None:
            raise ValueError("Invalid value for `available_quantity`, must not be `None`")

        self._available_quantity = available_quantity

    @property
    def buy_together(self):
        """Gets the buy_together of this CommertialOffer.

        Array of other products that can be bought together with the product in question.

        :return: The buy_together of this CommertialOffer.
        :rtype: List[object]
        """
        return self._buy_together

    @buy_together.setter
    def buy_together(self, buy_together):
        """Sets the buy_together of this CommertialOffer.

        Array of other products that can be bought together with the product in question.

        :param buy_together: The buy_together of this CommertialOffer.
        :type buy_together: List[object]
        """
        if buy_together is None:
            raise ValueError("Invalid value for `buy_together`, must not be `None`")

        self._buy_together = buy_together

    @property
    def cache_version_used_to_call_checkout(self):
        """Gets the cache_version_used_to_call_checkout of this CommertialOffer.

        Cache version used to call checkout.

        :return: The cache_version_used_to_call_checkout of this CommertialOffer.
        :rtype: str
        """
        return self._cache_version_used_to_call_checkout

    @cache_version_used_to_call_checkout.setter
    def cache_version_used_to_call_checkout(self, cache_version_used_to_call_checkout):
        """Sets the cache_version_used_to_call_checkout of this CommertialOffer.

        Cache version used to call checkout.

        :param cache_version_used_to_call_checkout: The cache_version_used_to_call_checkout of this CommertialOffer.
        :type cache_version_used_to_call_checkout: str
        """
        if cache_version_used_to_call_checkout is None:
            raise ValueError("Invalid value for `cache_version_used_to_call_checkout`, must not be `None`")

        self._cache_version_used_to_call_checkout = cache_version_used_to_call_checkout

    @property
    def delivery_sla_samples(self):
        """Gets the delivery_sla_samples of this CommertialOffer.

        Delivery SLA samples.

        :return: The delivery_sla_samples of this CommertialOffer.
        :rtype: List[DeliverySlaSamplesInner]
        """
        return self._delivery_sla_samples

    @delivery_sla_samples.setter
    def delivery_sla_samples(self, delivery_sla_samples):
        """Sets the delivery_sla_samples of this CommertialOffer.

        Delivery SLA samples.

        :param delivery_sla_samples: The delivery_sla_samples of this CommertialOffer.
        :type delivery_sla_samples: List[DeliverySlaSamplesInner]
        """
        if delivery_sla_samples is None:
            raise ValueError("Invalid value for `delivery_sla_samples`, must not be `None`")

        self._delivery_sla_samples = delivery_sla_samples

    @property
    def delivery_sla_samples_per_region(self):
        """Gets the delivery_sla_samples_per_region of this CommertialOffer.


        :return: The delivery_sla_samples_per_region of this CommertialOffer.
        :rtype: DeliverySlaSamplesPerRegion
        """
        return self._delivery_sla_samples_per_region

    @delivery_sla_samples_per_region.setter
    def delivery_sla_samples_per_region(self, delivery_sla_samples_per_region):
        """Sets the delivery_sla_samples_per_region of this CommertialOffer.


        :param delivery_sla_samples_per_region: The delivery_sla_samples_per_region of this CommertialOffer.
        :type delivery_sla_samples_per_region: DeliverySlaSamplesPerRegion
        """
        if delivery_sla_samples_per_region is None:
            raise ValueError("Invalid value for `delivery_sla_samples_per_region`, must not be `None`")

        self._delivery_sla_samples_per_region = delivery_sla_samples_per_region

    @property
    def discount_high_light(self):
        """Gets the discount_high_light of this CommertialOffer.

        Discount hightlight.

        :return: The discount_high_light of this CommertialOffer.
        :rtype: List[object]
        """
        return self._discount_high_light

    @discount_high_light.setter
    def discount_high_light(self, discount_high_light):
        """Sets the discount_high_light of this CommertialOffer.

        Discount hightlight.

        :param discount_high_light: The discount_high_light of this CommertialOffer.
        :type discount_high_light: List[object]
        """
        if discount_high_light is None:
            raise ValueError("Invalid value for `discount_high_light`, must not be `None`")

        self._discount_high_light = discount_high_light

    @property
    def get_info_error_message(self):
        """Gets the get_info_error_message of this CommertialOffer.

        Get info error message.

        :return: The get_info_error_message of this CommertialOffer.
        :rtype: str
        """
        return self._get_info_error_message

    @get_info_error_message.setter
    def get_info_error_message(self, get_info_error_message):
        """Sets the get_info_error_message of this CommertialOffer.

        Get info error message.

        :param get_info_error_message: The get_info_error_message of this CommertialOffer.
        :type get_info_error_message: str
        """
        if get_info_error_message is None:
            raise ValueError("Invalid value for `get_info_error_message`, must not be `None`")

        self._get_info_error_message = get_info_error_message

    @property
    def gift_sku_ids(self):
        """Gets the gift_sku_ids of this CommertialOffer.

        Array of SKU gifts IDs.

        :return: The gift_sku_ids of this CommertialOffer.
        :rtype: List[object]
        """
        return self._gift_sku_ids

    @gift_sku_ids.setter
    def gift_sku_ids(self, gift_sku_ids):
        """Sets the gift_sku_ids of this CommertialOffer.

        Array of SKU gifts IDs.

        :param gift_sku_ids: The gift_sku_ids of this CommertialOffer.
        :type gift_sku_ids: List[object]
        """
        if gift_sku_ids is None:
            raise ValueError("Invalid value for `gift_sku_ids`, must not be `None`")

        self._gift_sku_ids = gift_sku_ids

    @property
    def installments(self):
        """Gets the installments of this CommertialOffer.

        Installments options.

        :return: The installments of this CommertialOffer.
        :rtype: List[InstallmentsInner]
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this CommertialOffer.

        Installments options.

        :param installments: The installments of this CommertialOffer.
        :type installments: List[InstallmentsInner]
        """
        if installments is None:
            raise ValueError("Invalid value for `installments`, must not be `None`")

        self._installments = installments

    @property
    def is_available(self):
        """Gets the is_available of this CommertialOffer.

        If the product is available or not.

        :return: The is_available of this CommertialOffer.
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this CommertialOffer.

        If the product is available or not.

        :param is_available: The is_available of this CommertialOffer.
        :type is_available: bool
        """
        if is_available is None:
            raise ValueError("Invalid value for `is_available`, must not be `None`")

        self._is_available = is_available

    @property
    def item_metadata_attachment(self):
        """Gets the item_metadata_attachment of this CommertialOffer.

        Item metadata attachment.

        :return: The item_metadata_attachment of this CommertialOffer.
        :rtype: List[object]
        """
        return self._item_metadata_attachment

    @item_metadata_attachment.setter
    def item_metadata_attachment(self, item_metadata_attachment):
        """Sets the item_metadata_attachment of this CommertialOffer.

        Item metadata attachment.

        :param item_metadata_attachment: The item_metadata_attachment of this CommertialOffer.
        :type item_metadata_attachment: List[object]
        """
        if item_metadata_attachment is None:
            raise ValueError("Invalid value for `item_metadata_attachment`, must not be `None`")

        self._item_metadata_attachment = item_metadata_attachment

    @property
    def list_price(self):
        """Gets the list_price of this CommertialOffer.

        List price of the product.

        :return: The list_price of this CommertialOffer.
        :rtype: float
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this CommertialOffer.

        List price of the product.

        :param list_price: The list_price of this CommertialOffer.
        :type list_price: float
        """
        if list_price is None:
            raise ValueError("Invalid value for `list_price`, must not be `None`")

        self._list_price = list_price

    @property
    def payment_options(self):
        """Gets the payment_options of this CommertialOffer.


        :return: The payment_options of this CommertialOffer.
        :rtype: PaymentOptions
        """
        return self._payment_options

    @payment_options.setter
    def payment_options(self, payment_options):
        """Sets the payment_options of this CommertialOffer.


        :param payment_options: The payment_options of this CommertialOffer.
        :type payment_options: PaymentOptions
        """
        if payment_options is None:
            raise ValueError("Invalid value for `payment_options`, must not be `None`")

        self._payment_options = payment_options

    @property
    def price(self):
        """Gets the price of this CommertialOffer.

        Price of the product.

        :return: The price of this CommertialOffer.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CommertialOffer.

        Price of the product.

        :param price: The price of this CommertialOffer.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def price_valid_until(self):
        """Gets the price_valid_until of this CommertialOffer.

        Price of the product valid until a certain date.

        :return: The price_valid_until of this CommertialOffer.
        :rtype: str
        """
        return self._price_valid_until

    @price_valid_until.setter
    def price_valid_until(self, price_valid_until):
        """Sets the price_valid_until of this CommertialOffer.

        Price of the product valid until a certain date.

        :param price_valid_until: The price_valid_until of this CommertialOffer.
        :type price_valid_until: str
        """
        if price_valid_until is None:
            raise ValueError("Invalid value for `price_valid_until`, must not be `None`")

        self._price_valid_until = price_valid_until

    @property
    def price_without_discount(self):
        """Gets the price_without_discount of this CommertialOffer.

        Price of the product without discount.

        :return: The price_without_discount of this CommertialOffer.
        :rtype: float
        """
        return self._price_without_discount

    @price_without_discount.setter
    def price_without_discount(self, price_without_discount):
        """Sets the price_without_discount of this CommertialOffer.

        Price of the product without discount.

        :param price_without_discount: The price_without_discount of this CommertialOffer.
        :type price_without_discount: float
        """
        if price_without_discount is None:
            raise ValueError("Invalid value for `price_without_discount`, must not be `None`")

        self._price_without_discount = price_without_discount

    @property
    def reward_value(self):
        """Gets the reward_value of this CommertialOffer.

        Reward value of the product.

        :return: The reward_value of this CommertialOffer.
        :rtype: float
        """
        return self._reward_value

    @reward_value.setter
    def reward_value(self, reward_value):
        """Sets the reward_value of this CommertialOffer.

        Reward value of the product.

        :param reward_value: The reward_value of this CommertialOffer.
        :type reward_value: float
        """
        if reward_value is None:
            raise ValueError("Invalid value for `reward_value`, must not be `None`")

        self._reward_value = reward_value

    @property
    def sale_channel(self):
        """Gets the sale_channel of this CommertialOffer.

        Trade policy which the product is contained.

        :return: The sale_channel of this CommertialOffer.
        :rtype: int
        """
        return self._sale_channel

    @sale_channel.setter
    def sale_channel(self, sale_channel):
        """Sets the sale_channel of this CommertialOffer.

        Trade policy which the product is contained.

        :param sale_channel: The sale_channel of this CommertialOffer.
        :type sale_channel: int
        """
        if sale_channel is None:
            raise ValueError("Invalid value for `sale_channel`, must not be `None`")

        self._sale_channel = sale_channel

    @property
    def tax(self):
        """Gets the tax of this CommertialOffer.

        Tax of the product.

        :return: The tax of this CommertialOffer.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this CommertialOffer.

        Tax of the product.

        :param tax: The tax of this CommertialOffer.
        :type tax: float
        """
        if tax is None:
            raise ValueError("Invalid value for `tax`, must not be `None`")

        self._tax = tax

    @property
    def teasers(self):
        """Gets the teasers of this CommertialOffer.

        Teasers.

        :return: The teasers of this CommertialOffer.
        :rtype: List[object]
        """
        return self._teasers

    @teasers.setter
    def teasers(self, teasers):
        """Sets the teasers of this CommertialOffer.

        Teasers.

        :param teasers: The teasers of this CommertialOffer.
        :type teasers: List[object]
        """
        if teasers is None:
            raise ValueError("Invalid value for `teasers`, must not be `None`")

        self._teasers = teasers
