# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Installment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interest_rate: float=None, name: str=None, number_of_installments: int=None, payment_system_group_name: str=None, payment_system_name: str=None, total_value_plus_interest_rate: float=None, value: float=None):
        """Installment - a model defined in OpenAPI

        :param interest_rate: The interest_rate of this Installment.
        :param name: The name of this Installment.
        :param number_of_installments: The number_of_installments of this Installment.
        :param payment_system_group_name: The payment_system_group_name of this Installment.
        :param payment_system_name: The payment_system_name of this Installment.
        :param total_value_plus_interest_rate: The total_value_plus_interest_rate of this Installment.
        :param value: The value of this Installment.
        """
        self.openapi_types = {
            'interest_rate': float,
            'name': str,
            'number_of_installments': int,
            'payment_system_group_name': str,
            'payment_system_name': str,
            'total_value_plus_interest_rate': float,
            'value': float
        }

        self.attribute_map = {
            'interest_rate': 'InterestRate',
            'name': 'Name',
            'number_of_installments': 'NumberOfInstallments',
            'payment_system_group_name': 'PaymentSystemGroupName',
            'payment_system_name': 'PaymentSystemName',
            'total_value_plus_interest_rate': 'TotalValuePlusInterestRate',
            'value': 'Value'
        }

        self._interest_rate = interest_rate
        self._name = name
        self._number_of_installments = number_of_installments
        self._payment_system_group_name = payment_system_group_name
        self._payment_system_name = payment_system_name
        self._total_value_plus_interest_rate = total_value_plus_interest_rate
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Installment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Installment of this Installment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interest_rate(self):
        """Gets the interest_rate of this Installment.


        :return: The interest_rate of this Installment.
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this Installment.


        :param interest_rate: The interest_rate of this Installment.
        :type interest_rate: float
        """
        if interest_rate is None:
            raise ValueError("Invalid value for `interest_rate`, must not be `None`")

        self._interest_rate = interest_rate

    @property
    def name(self):
        """Gets the name of this Installment.


        :return: The name of this Installment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Installment.


        :param name: The name of this Installment.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def number_of_installments(self):
        """Gets the number_of_installments of this Installment.


        :return: The number_of_installments of this Installment.
        :rtype: int
        """
        return self._number_of_installments

    @number_of_installments.setter
    def number_of_installments(self, number_of_installments):
        """Sets the number_of_installments of this Installment.


        :param number_of_installments: The number_of_installments of this Installment.
        :type number_of_installments: int
        """
        if number_of_installments is None:
            raise ValueError("Invalid value for `number_of_installments`, must not be `None`")

        self._number_of_installments = number_of_installments

    @property
    def payment_system_group_name(self):
        """Gets the payment_system_group_name of this Installment.


        :return: The payment_system_group_name of this Installment.
        :rtype: str
        """
        return self._payment_system_group_name

    @payment_system_group_name.setter
    def payment_system_group_name(self, payment_system_group_name):
        """Sets the payment_system_group_name of this Installment.


        :param payment_system_group_name: The payment_system_group_name of this Installment.
        :type payment_system_group_name: str
        """
        if payment_system_group_name is None:
            raise ValueError("Invalid value for `payment_system_group_name`, must not be `None`")

        self._payment_system_group_name = payment_system_group_name

    @property
    def payment_system_name(self):
        """Gets the payment_system_name of this Installment.


        :return: The payment_system_name of this Installment.
        :rtype: str
        """
        return self._payment_system_name

    @payment_system_name.setter
    def payment_system_name(self, payment_system_name):
        """Sets the payment_system_name of this Installment.


        :param payment_system_name: The payment_system_name of this Installment.
        :type payment_system_name: str
        """
        if payment_system_name is None:
            raise ValueError("Invalid value for `payment_system_name`, must not be `None`")

        self._payment_system_name = payment_system_name

    @property
    def total_value_plus_interest_rate(self):
        """Gets the total_value_plus_interest_rate of this Installment.


        :return: The total_value_plus_interest_rate of this Installment.
        :rtype: float
        """
        return self._total_value_plus_interest_rate

    @total_value_plus_interest_rate.setter
    def total_value_plus_interest_rate(self, total_value_plus_interest_rate):
        """Sets the total_value_plus_interest_rate of this Installment.


        :param total_value_plus_interest_rate: The total_value_plus_interest_rate of this Installment.
        :type total_value_plus_interest_rate: float
        """
        if total_value_plus_interest_rate is None:
            raise ValueError("Invalid value for `total_value_plus_interest_rate`, must not be `None`")

        self._total_value_plus_interest_rate = total_value_plus_interest_rate

    @property
    def value(self):
        """Gets the value of this Installment.


        :return: The value of this Installment.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Installment.


        :param value: The value of this Installment.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
