# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SellerMerchantInstallmentsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, has_interest_rate: bool=None, id: str=None, interest_rate: int=None, total: int=None, value: int=None):
        """SellerMerchantInstallmentsInner - a model defined in OpenAPI

        :param count: The count of this SellerMerchantInstallmentsInner.
        :param has_interest_rate: The has_interest_rate of this SellerMerchantInstallmentsInner.
        :param id: The id of this SellerMerchantInstallmentsInner.
        :param interest_rate: The interest_rate of this SellerMerchantInstallmentsInner.
        :param total: The total of this SellerMerchantInstallmentsInner.
        :param value: The value of this SellerMerchantInstallmentsInner.
        """
        self.openapi_types = {
            'count': int,
            'has_interest_rate': bool,
            'id': str,
            'interest_rate': int,
            'total': int,
            'value': int
        }

        self.attribute_map = {
            'count': 'count',
            'has_interest_rate': 'hasInterestRate',
            'id': 'id',
            'interest_rate': 'interestRate',
            'total': 'total',
            'value': 'value'
        }

        self._count = count
        self._has_interest_rate = has_interest_rate
        self._id = id
        self._interest_rate = interest_rate
        self._total = total
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SellerMerchantInstallmentsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sellerMerchantInstallments_inner of this SellerMerchantInstallmentsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this SellerMerchantInstallmentsInner.

        Count.

        :return: The count of this SellerMerchantInstallmentsInner.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SellerMerchantInstallmentsInner.

        Count.

        :param count: The count of this SellerMerchantInstallmentsInner.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def has_interest_rate(self):
        """Gets the has_interest_rate of this SellerMerchantInstallmentsInner.

        Has interest rate.

        :return: The has_interest_rate of this SellerMerchantInstallmentsInner.
        :rtype: bool
        """
        return self._has_interest_rate

    @has_interest_rate.setter
    def has_interest_rate(self, has_interest_rate):
        """Sets the has_interest_rate of this SellerMerchantInstallmentsInner.

        Has interest rate.

        :param has_interest_rate: The has_interest_rate of this SellerMerchantInstallmentsInner.
        :type has_interest_rate: bool
        """
        if has_interest_rate is None:
            raise ValueError("Invalid value for `has_interest_rate`, must not be `None`")

        self._has_interest_rate = has_interest_rate

    @property
    def id(self):
        """Gets the id of this SellerMerchantInstallmentsInner.

        ID.

        :return: The id of this SellerMerchantInstallmentsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SellerMerchantInstallmentsInner.

        ID.

        :param id: The id of this SellerMerchantInstallmentsInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def interest_rate(self):
        """Gets the interest_rate of this SellerMerchantInstallmentsInner.

        Interest rate.

        :return: The interest_rate of this SellerMerchantInstallmentsInner.
        :rtype: int
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this SellerMerchantInstallmentsInner.

        Interest rate.

        :param interest_rate: The interest_rate of this SellerMerchantInstallmentsInner.
        :type interest_rate: int
        """
        if interest_rate is None:
            raise ValueError("Invalid value for `interest_rate`, must not be `None`")

        self._interest_rate = interest_rate

    @property
    def total(self):
        """Gets the total of this SellerMerchantInstallmentsInner.

        Total.

        :return: The total of this SellerMerchantInstallmentsInner.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this SellerMerchantInstallmentsInner.

        Total.

        :param total: The total of this SellerMerchantInstallmentsInner.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total

    @property
    def value(self):
        """Gets the value of this SellerMerchantInstallmentsInner.

        Value.

        :return: The value of this SellerMerchantInstallmentsInner.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SellerMerchantInstallmentsInner.

        Value.

        :param value: The value of this SellerMerchantInstallmentsInner.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
