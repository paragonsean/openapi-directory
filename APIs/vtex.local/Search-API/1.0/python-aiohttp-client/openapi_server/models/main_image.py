# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MainImage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_id: str=None, image_label: str=None, image_path: str=None, image_tag: str=None, image_text: str=None, is_main: bool=None, is_zoom_size: bool=None, last_modified: str=None):
        """MainImage - a model defined in OpenAPI

        :param image_id: The image_id of this MainImage.
        :param image_label: The image_label of this MainImage.
        :param image_path: The image_path of this MainImage.
        :param image_tag: The image_tag of this MainImage.
        :param image_text: The image_text of this MainImage.
        :param is_main: The is_main of this MainImage.
        :param is_zoom_size: The is_zoom_size of this MainImage.
        :param last_modified: The last_modified of this MainImage.
        """
        self.openapi_types = {
            'image_id': str,
            'image_label': str,
            'image_path': str,
            'image_tag': str,
            'image_text': str,
            'is_main': bool,
            'is_zoom_size': bool,
            'last_modified': str
        }

        self.attribute_map = {
            'image_id': 'ImageId',
            'image_label': 'ImageLabel',
            'image_path': 'ImagePath',
            'image_tag': 'ImageTag',
            'image_text': 'ImageText',
            'is_main': 'IsMain',
            'is_zoom_size': 'IsZoomSize',
            'last_modified': 'LastModified'
        }

        self._image_id = image_id
        self._image_label = image_label
        self._image_path = image_path
        self._image_tag = image_tag
        self._image_text = image_text
        self._is_main = is_main
        self._is_zoom_size = is_zoom_size
        self._last_modified = last_modified

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MainImage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MainImage of this MainImage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_id(self):
        """Gets the image_id of this MainImage.

        Unique identifier of the association of the Image to the SKU.

        :return: The image_id of this MainImage.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this MainImage.

        Unique identifier of the association of the Image to the SKU.

        :param image_id: The image_id of this MainImage.
        :type image_id: str
        """
        if image_id is None:
            raise ValueError("Invalid value for `image_id`, must not be `None`")

        self._image_id = image_id

    @property
    def image_label(self):
        """Gets the image_label of this MainImage.

        Image Label.

        :return: The image_label of this MainImage.
        :rtype: str
        """
        return self._image_label

    @image_label.setter
    def image_label(self, image_label):
        """Sets the image_label of this MainImage.

        Image Label.

        :param image_label: The image_label of this MainImage.
        :type image_label: str
        """
        if image_label is None:
            raise ValueError("Invalid value for `image_label`, must not be `None`")

        self._image_label = image_label

    @property
    def image_path(self):
        """Gets the image_path of this MainImage.

        Image file path.

        :return: The image_path of this MainImage.
        :rtype: str
        """
        return self._image_path

    @image_path.setter
    def image_path(self, image_path):
        """Sets the image_path of this MainImage.

        Image file path.

        :param image_path: The image_path of this MainImage.
        :type image_path: str
        """
        if image_path is None:
            raise ValueError("Invalid value for `image_path`, must not be `None`")

        self._image_path = image_path

    @property
    def image_tag(self):
        """Gets the image_tag of this MainImage.

        Image HTML tag.

        :return: The image_tag of this MainImage.
        :rtype: str
        """
        return self._image_tag

    @image_tag.setter
    def image_tag(self, image_tag):
        """Sets the image_tag of this MainImage.

        Image HTML tag.

        :param image_tag: The image_tag of this MainImage.
        :type image_tag: str
        """
        if image_tag is None:
            raise ValueError("Invalid value for `image_tag`, must not be `None`")

        self._image_tag = image_tag

    @property
    def image_text(self):
        """Gets the image_text of this MainImage.

        General text of the image.

        :return: The image_text of this MainImage.
        :rtype: str
        """
        return self._image_text

    @image_text.setter
    def image_text(self, image_text):
        """Sets the image_text of this MainImage.

        General text of the image.

        :param image_text: The image_text of this MainImage.
        :type image_text: str
        """
        if image_text is None:
            raise ValueError("Invalid value for `image_text`, must not be `None`")

        self._image_text = image_text

    @property
    def is_main(self):
        """Gets the is_main of this MainImage.

        If the image is the main image of the SKU or not.

        :return: The is_main of this MainImage.
        :rtype: bool
        """
        return self._is_main

    @is_main.setter
    def is_main(self, is_main):
        """Sets the is_main of this MainImage.

        If the image is the main image of the SKU or not.

        :param is_main: The is_main of this MainImage.
        :type is_main: bool
        """
        if is_main is None:
            raise ValueError("Invalid value for `is_main`, must not be `None`")

        self._is_main = is_main

    @property
    def is_zoom_size(self):
        """Gets the is_zoom_size of this MainImage.

        If the image has zoom applied.

        :return: The is_zoom_size of this MainImage.
        :rtype: bool
        """
        return self._is_zoom_size

    @is_zoom_size.setter
    def is_zoom_size(self, is_zoom_size):
        """Sets the is_zoom_size of this MainImage.

        If the image has zoom applied.

        :param is_zoom_size: The is_zoom_size of this MainImage.
        :type is_zoom_size: bool
        """
        if is_zoom_size is None:
            raise ValueError("Invalid value for `is_zoom_size`, must not be `None`")

        self._is_zoom_size = is_zoom_size

    @property
    def last_modified(self):
        """Gets the last_modified of this MainImage.

        Time that the image was last modified.

        :return: The last_modified of this MainImage.
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this MainImage.

        Time that the image was last modified.

        :param last_modified: The last_modified of this MainImage.
        :type last_modified: str
        """
        if last_modified is None:
            raise ValueError("Invalid value for `last_modified`, must not be `None`")

        self._last_modified = last_modified
