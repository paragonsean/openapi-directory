# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image import Image
from openapi_server.models.reference_id import ReferenceId
from openapi_server.models.seller import Seller
from openapi_server import util


class Item(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cor: List[str]=None, tamanho: List[str]=None, complement_name: str=None, ean: str=None, images: List[Image]=None, item_id: str=None, measurement_unit: str=None, name: str=None, name_complete: str=None, reference_id: List[ReferenceId]=None, sellers: List[Seller]=None, unit_multiplier: float=None, variations: List[str]=None):
        """Item - a model defined in OpenAPI

        :param cor: The cor of this Item.
        :param tamanho: The tamanho of this Item.
        :param complement_name: The complement_name of this Item.
        :param ean: The ean of this Item.
        :param images: The images of this Item.
        :param item_id: The item_id of this Item.
        :param measurement_unit: The measurement_unit of this Item.
        :param name: The name of this Item.
        :param name_complete: The name_complete of this Item.
        :param reference_id: The reference_id of this Item.
        :param sellers: The sellers of this Item.
        :param unit_multiplier: The unit_multiplier of this Item.
        :param variations: The variations of this Item.
        """
        self.openapi_types = {
            'cor': List[str],
            'tamanho': List[str],
            'complement_name': str,
            'ean': str,
            'images': List[Image],
            'item_id': str,
            'measurement_unit': str,
            'name': str,
            'name_complete': str,
            'reference_id': List[ReferenceId],
            'sellers': List[Seller],
            'unit_multiplier': float,
            'variations': List[str]
        }

        self.attribute_map = {
            'cor': 'COR',
            'tamanho': 'TAMANHO',
            'complement_name': 'complementName',
            'ean': 'ean',
            'images': 'images',
            'item_id': 'itemId',
            'measurement_unit': 'measurementUnit',
            'name': 'name',
            'name_complete': 'nameComplete',
            'reference_id': 'referenceId',
            'sellers': 'sellers',
            'unit_multiplier': 'unitMultiplier',
            'variations': 'variations'
        }

        self._cor = cor
        self._tamanho = tamanho
        self._complement_name = complement_name
        self._ean = ean
        self._images = images
        self._item_id = item_id
        self._measurement_unit = measurement_unit
        self._name = name
        self._name_complete = name_complete
        self._reference_id = reference_id
        self._sellers = sellers
        self._unit_multiplier = unit_multiplier
        self._variations = variations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item of this Item.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cor(self):
        """Gets the cor of this Item.

        

        :return: The cor of this Item.
        :rtype: List[str]
        """
        return self._cor

    @cor.setter
    def cor(self, cor):
        """Sets the cor of this Item.

        

        :param cor: The cor of this Item.
        :type cor: List[str]
        """

        self._cor = cor

    @property
    def tamanho(self):
        """Gets the tamanho of this Item.

        

        :return: The tamanho of this Item.
        :rtype: List[str]
        """
        return self._tamanho

    @tamanho.setter
    def tamanho(self, tamanho):
        """Sets the tamanho of this Item.

        

        :param tamanho: The tamanho of this Item.
        :type tamanho: List[str]
        """

        self._tamanho = tamanho

    @property
    def complement_name(self):
        """Gets the complement_name of this Item.


        :return: The complement_name of this Item.
        :rtype: str
        """
        return self._complement_name

    @complement_name.setter
    def complement_name(self, complement_name):
        """Sets the complement_name of this Item.


        :param complement_name: The complement_name of this Item.
        :type complement_name: str
        """
        if complement_name is None:
            raise ValueError("Invalid value for `complement_name`, must not be `None`")

        self._complement_name = complement_name

    @property
    def ean(self):
        """Gets the ean of this Item.


        :return: The ean of this Item.
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this Item.


        :param ean: The ean of this Item.
        :type ean: str
        """
        if ean is None:
            raise ValueError("Invalid value for `ean`, must not be `None`")

        self._ean = ean

    @property
    def images(self):
        """Gets the images of this Item.

        

        :return: The images of this Item.
        :rtype: List[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Item.

        

        :param images: The images of this Item.
        :type images: List[Image]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def item_id(self):
        """Gets the item_id of this Item.


        :return: The item_id of this Item.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Item.


        :param item_id: The item_id of this Item.
        :type item_id: str
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")

        self._item_id = item_id

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this Item.


        :return: The measurement_unit of this Item.
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this Item.


        :param measurement_unit: The measurement_unit of this Item.
        :type measurement_unit: str
        """
        if measurement_unit is None:
            raise ValueError("Invalid value for `measurement_unit`, must not be `None`")

        self._measurement_unit = measurement_unit

    @property
    def name(self):
        """Gets the name of this Item.


        :return: The name of this Item.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Item.


        :param name: The name of this Item.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def name_complete(self):
        """Gets the name_complete of this Item.


        :return: The name_complete of this Item.
        :rtype: str
        """
        return self._name_complete

    @name_complete.setter
    def name_complete(self, name_complete):
        """Sets the name_complete of this Item.


        :param name_complete: The name_complete of this Item.
        :type name_complete: str
        """
        if name_complete is None:
            raise ValueError("Invalid value for `name_complete`, must not be `None`")

        self._name_complete = name_complete

    @property
    def reference_id(self):
        """Gets the reference_id of this Item.

        

        :return: The reference_id of this Item.
        :rtype: List[ReferenceId]
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this Item.

        

        :param reference_id: The reference_id of this Item.
        :type reference_id: List[ReferenceId]
        """

        self._reference_id = reference_id

    @property
    def sellers(self):
        """Gets the sellers of this Item.

        

        :return: The sellers of this Item.
        :rtype: List[Seller]
        """
        return self._sellers

    @sellers.setter
    def sellers(self, sellers):
        """Sets the sellers of this Item.

        

        :param sellers: The sellers of this Item.
        :type sellers: List[Seller]
        """
        if sellers is None:
            raise ValueError("Invalid value for `sellers`, must not be `None`")

        self._sellers = sellers

    @property
    def unit_multiplier(self):
        """Gets the unit_multiplier of this Item.


        :return: The unit_multiplier of this Item.
        :rtype: float
        """
        return self._unit_multiplier

    @unit_multiplier.setter
    def unit_multiplier(self, unit_multiplier):
        """Sets the unit_multiplier of this Item.


        :param unit_multiplier: The unit_multiplier of this Item.
        :type unit_multiplier: float
        """
        if unit_multiplier is None:
            raise ValueError("Invalid value for `unit_multiplier`, must not be `None`")

        self._unit_multiplier = unit_multiplier

    @property
    def variations(self):
        """Gets the variations of this Item.

        

        :return: The variations of this Item.
        :rtype: List[str]
        """
        return self._variations

    @variations.setter
    def variations(self, variations):
        """Sets the variations of this Item.

        

        :param variations: The variations of this Item.
        :type variations: List[str]
        """

        self._variations = variations
