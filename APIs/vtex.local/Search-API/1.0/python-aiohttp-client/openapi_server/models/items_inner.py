# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.images_inner import ImagesInner
from openapi_server.models.kit_items_inner import KitItemsInner
from openapi_server.models.reference_id_inner import ReferenceIdInner
from openapi_server.models.sellers_inner import SellersInner
from openapi_server import util


class ItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, videos: List[object]=None, complement_name: str=None, ean: str=None, estimated_date_arrival: str=None, images: List[ImagesInner]=None, is_kit: bool=None, item_id: str=None, kit_items: List[KitItemsInner]=None, measurement_unit: str=None, modal_type: str=None, name: str=None, name_complete: str=None, reference_id: List[ReferenceIdInner]=None, sellers: List[SellersInner]=None, unit_multiplier: float=None):
        """ItemsInner - a model defined in OpenAPI

        :param videos: The videos of this ItemsInner.
        :param complement_name: The complement_name of this ItemsInner.
        :param ean: The ean of this ItemsInner.
        :param estimated_date_arrival: The estimated_date_arrival of this ItemsInner.
        :param images: The images of this ItemsInner.
        :param is_kit: The is_kit of this ItemsInner.
        :param item_id: The item_id of this ItemsInner.
        :param kit_items: The kit_items of this ItemsInner.
        :param measurement_unit: The measurement_unit of this ItemsInner.
        :param modal_type: The modal_type of this ItemsInner.
        :param name: The name of this ItemsInner.
        :param name_complete: The name_complete of this ItemsInner.
        :param reference_id: The reference_id of this ItemsInner.
        :param sellers: The sellers of this ItemsInner.
        :param unit_multiplier: The unit_multiplier of this ItemsInner.
        """
        self.openapi_types = {
            'videos': List[object],
            'complement_name': str,
            'ean': str,
            'estimated_date_arrival': str,
            'images': List[ImagesInner],
            'is_kit': bool,
            'item_id': str,
            'kit_items': List[KitItemsInner],
            'measurement_unit': str,
            'modal_type': str,
            'name': str,
            'name_complete': str,
            'reference_id': List[ReferenceIdInner],
            'sellers': List[SellersInner],
            'unit_multiplier': float
        }

        self.attribute_map = {
            'videos': 'Videos',
            'complement_name': 'complementName',
            'ean': 'ean',
            'estimated_date_arrival': 'estimatedDateArrival',
            'images': 'images',
            'is_kit': 'isKit',
            'item_id': 'itemId',
            'kit_items': 'kitItems',
            'measurement_unit': 'measurementUnit',
            'modal_type': 'modalType',
            'name': 'name',
            'name_complete': 'nameComplete',
            'reference_id': 'referenceId',
            'sellers': 'sellers',
            'unit_multiplier': 'unitMultiplier'
        }

        self._videos = videos
        self._complement_name = complement_name
        self._ean = ean
        self._estimated_date_arrival = estimated_date_arrival
        self._images = images
        self._is_kit = is_kit
        self._item_id = item_id
        self._kit_items = kit_items
        self._measurement_unit = measurement_unit
        self._modal_type = modal_type
        self._name = name
        self._name_complete = name_complete
        self._reference_id = reference_id
        self._sellers = sellers
        self._unit_multiplier = unit_multiplier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The items_inner of this ItemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def videos(self):
        """Gets the videos of this ItemsInner.

        Videos.

        :return: The videos of this ItemsInner.
        :rtype: List[object]
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this ItemsInner.

        Videos.

        :param videos: The videos of this ItemsInner.
        :type videos: List[object]
        """
        if videos is None:
            raise ValueError("Invalid value for `videos`, must not be `None`")

        self._videos = videos

    @property
    def complement_name(self):
        """Gets the complement_name of this ItemsInner.

        SKU complement name.

        :return: The complement_name of this ItemsInner.
        :rtype: str
        """
        return self._complement_name

    @complement_name.setter
    def complement_name(self, complement_name):
        """Sets the complement_name of this ItemsInner.

        SKU complement name.

        :param complement_name: The complement_name of this ItemsInner.
        :type complement_name: str
        """
        if complement_name is None:
            raise ValueError("Invalid value for `complement_name`, must not be `None`")

        self._complement_name = complement_name

    @property
    def ean(self):
        """Gets the ean of this ItemsInner.

        SKU unique identification code (barcode), accepts up to 13 numerical characters.

        :return: The ean of this ItemsInner.
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this ItemsInner.

        SKU unique identification code (barcode), accepts up to 13 numerical characters.

        :param ean: The ean of this ItemsInner.
        :type ean: str
        """
        if ean is None:
            raise ValueError("Invalid value for `ean`, must not be `None`")

        self._ean = ean

    @property
    def estimated_date_arrival(self):
        """Gets the estimated_date_arrival of this ItemsInner.

        Estimated date arrival.

        :return: The estimated_date_arrival of this ItemsInner.
        :rtype: str
        """
        return self._estimated_date_arrival

    @estimated_date_arrival.setter
    def estimated_date_arrival(self, estimated_date_arrival):
        """Sets the estimated_date_arrival of this ItemsInner.

        Estimated date arrival.

        :param estimated_date_arrival: The estimated_date_arrival of this ItemsInner.
        :type estimated_date_arrival: str
        """
        if estimated_date_arrival is None:
            raise ValueError("Invalid value for `estimated_date_arrival`, must not be `None`")

        self._estimated_date_arrival = estimated_date_arrival

    @property
    def images(self):
        """Gets the images of this ItemsInner.

        Array of information about the SKU image.

        :return: The images of this ItemsInner.
        :rtype: List[ImagesInner]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this ItemsInner.

        Array of information about the SKU image.

        :param images: The images of this ItemsInner.
        :type images: List[ImagesInner]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def is_kit(self):
        """Gets the is_kit of this ItemsInner.

        If the SKU is part of a kit.

        :return: The is_kit of this ItemsInner.
        :rtype: bool
        """
        return self._is_kit

    @is_kit.setter
    def is_kit(self, is_kit):
        """Sets the is_kit of this ItemsInner.

        If the SKU is part of a kit.

        :param is_kit: The is_kit of this ItemsInner.
        :type is_kit: bool
        """
        if is_kit is None:
            raise ValueError("Invalid value for `is_kit`, must not be `None`")

        self._is_kit = is_kit

    @property
    def item_id(self):
        """Gets the item_id of this ItemsInner.

        SKU ID.

        :return: The item_id of this ItemsInner.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this ItemsInner.

        SKU ID.

        :param item_id: The item_id of this ItemsInner.
        :type item_id: str
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")

        self._item_id = item_id

    @property
    def kit_items(self):
        """Gets the kit_items of this ItemsInner.

        Array with information of SKUs components from a Kit.

        :return: The kit_items of this ItemsInner.
        :rtype: List[KitItemsInner]
        """
        return self._kit_items

    @kit_items.setter
    def kit_items(self, kit_items):
        """Sets the kit_items of this ItemsInner.

        Array with information of SKUs components from a Kit.

        :param kit_items: The kit_items of this ItemsInner.
        :type kit_items: List[KitItemsInner]
        """
        if kit_items is None:
            raise ValueError("Invalid value for `kit_items`, must not be `None`")

        self._kit_items = kit_items

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this ItemsInner.

        Used only in cases when you need to convert the unit of measure for sale. In common cases, use 'un'.

        :return: The measurement_unit of this ItemsInner.
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this ItemsInner.

        Used only in cases when you need to convert the unit of measure for sale. In common cases, use 'un'.

        :param measurement_unit: The measurement_unit of this ItemsInner.
        :type measurement_unit: str
        """
        if measurement_unit is None:
            raise ValueError("Invalid value for `measurement_unit`, must not be `None`")

        self._measurement_unit = measurement_unit

    @property
    def modal_type(self):
        """Gets the modal_type of this ItemsInner.

        Modal Type.

        :return: The modal_type of this ItemsInner.
        :rtype: str
        """
        return self._modal_type

    @modal_type.setter
    def modal_type(self, modal_type):
        """Sets the modal_type of this ItemsInner.

        Modal Type.

        :param modal_type: The modal_type of this ItemsInner.
        :type modal_type: str
        """
        if modal_type is None:
            raise ValueError("Invalid value for `modal_type`, must not be `None`")

        self._modal_type = modal_type

    @property
    def name(self):
        """Gets the name of this ItemsInner.

        SKU name.

        :return: The name of this ItemsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ItemsInner.

        SKU name.

        :param name: The name of this ItemsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def name_complete(self):
        """Gets the name_complete of this ItemsInner.

        SKU complete name.

        :return: The name_complete of this ItemsInner.
        :rtype: str
        """
        return self._name_complete

    @name_complete.setter
    def name_complete(self, name_complete):
        """Sets the name_complete of this ItemsInner.

        SKU complete name.

        :param name_complete: The name_complete of this ItemsInner.
        :type name_complete: str
        """
        if name_complete is None:
            raise ValueError("Invalid value for `name_complete`, must not be `None`")

        self._name_complete = name_complete

    @property
    def reference_id(self):
        """Gets the reference_id of this ItemsInner.

        Reference code ID.

        :return: The reference_id of this ItemsInner.
        :rtype: List[ReferenceIdInner]
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this ItemsInner.

        Reference code ID.

        :param reference_id: The reference_id of this ItemsInner.
        :type reference_id: List[ReferenceIdInner]
        """
        if reference_id is None:
            raise ValueError("Invalid value for `reference_id`, must not be `None`")

        self._reference_id = reference_id

    @property
    def sellers(self):
        """Gets the sellers of this ItemsInner.

        Array of SKU sellers.

        :return: The sellers of this ItemsInner.
        :rtype: List[SellersInner]
        """
        return self._sellers

    @sellers.setter
    def sellers(self, sellers):
        """Sets the sellers of this ItemsInner.

        Array of SKU sellers.

        :param sellers: The sellers of this ItemsInner.
        :type sellers: List[SellersInner]
        """
        if sellers is None:
            raise ValueError("Invalid value for `sellers`, must not be `None`")

        self._sellers = sellers

    @property
    def unit_multiplier(self):
        """Gets the unit_multiplier of this ItemsInner.

        numerical unit that multiplies the selected quantity of the product when it is inserted in the cart.

        :return: The unit_multiplier of this ItemsInner.
        :rtype: float
        """
        return self._unit_multiplier

    @unit_multiplier.setter
    def unit_multiplier(self, unit_multiplier):
        """Sets the unit_multiplier of this ItemsInner.

        numerical unit that multiplies the selected quantity of the product when it is inserted in the cart.

        :param unit_multiplier: The unit_multiplier of this ItemsInner.
        :type unit_multiplier: float
        """
        if unit_multiplier is None:
            raise ValueError("Invalid value for `unit_multiplier`, must not be `None`")

        self._unit_multiplier = unit_multiplier
