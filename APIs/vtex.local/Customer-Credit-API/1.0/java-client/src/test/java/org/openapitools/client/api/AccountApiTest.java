/*
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddanaccountHolderRequest1;
import org.openapitools.client.model.ChangecreditlimitofanAccountRequest1;
import org.openapitools.client.model.ChangetoleranceofanaccountRequest1;
import org.openapitools.client.model.CloseanAccountRequest1;
import org.openapitools.client.model.CreateaPreAuthorizationRequest1;
import org.openapitools.client.model.CreateaPreAuthorizationUsingidRequest;
import org.openapitools.client.model.CreateorUpdateSettlementRequest1;
import org.openapitools.client.model.DecreasebalanceofanaccountRequest1;
import org.openapitools.client.model.Getaccount1;
import org.openapitools.client.model.OpenanAccountRequest1;
import org.openapitools.client.model.OpenorChangeAccountRequest1;
import org.openapitools.client.model.PartialorTotalRefundaSettlementRequest1;
import org.openapitools.client.model.Searchaccounts1;
import org.openapitools.client.model.Searchcheckingaccounts1;
import org.openapitools.client.model.Statements1;
import org.openapitools.client.model.ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice;
import org.openapitools.client.model.UpdateemailanddescriptionofaaccountRequest1;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountApi
 */
@Disabled
public class AccountApiTest {

    private final AccountApi api = new AccountApi();

    /**
     * Account statements
     *
     * Get the account statements.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountstatementsTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String creditAccountId = null;
        Statements1 response = api.accountstatements(contentType, accept, creditAccountId);
        // TODO: test validations
    }

    /**
     * Add an account Holder
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addanaccountHolderTest() throws ApiException {
        String creditAccountId = null;
        String accept = null;
        String contentType = null;
        AddanaccountHolderRequest1 addanaccountHolderRequest1 = null;
        Searchcheckingaccounts1 response = api.addanaccountHolder(creditAccountId, accept, contentType, addanaccountHolderRequest1);
        // TODO: test validations
    }

    /**
     * Cancel a Pre Authorization
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelaPreAuthorizationTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String creditAccountId = null;
        String transactionId = null;
        api.cancelaPreAuthorization(contentType, accept, creditAccountId, transactionId);
        // TODO: test validations
    }

    /**
     * Change credit limit of an Account
     *
     * Increase the credit limit of an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changecreditlimitofanAccountTest() throws ApiException {
        String creditAccountId = null;
        String accept = null;
        String contentType = null;
        ChangecreditlimitofanAccountRequest1 changecreditlimitofanAccountRequest1 = null;
        Object response = api.changecreditlimitofanAccount(creditAccountId, accept, contentType, changecreditlimitofanAccountRequest1);
        // TODO: test validations
    }

    /**
     * Change tolerance of an account
     *
     * Increase the credit limit of a checking account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changetoleranceofanaccountTest() throws ApiException {
        String creditAccountId = null;
        String accept = null;
        String contentType = null;
        ChangetoleranceofanaccountRequest1 changetoleranceofanaccountRequest1 = null;
        Object response = api.changetoleranceofanaccount(creditAccountId, accept, contentType, changetoleranceofanaccountRequest1);
        // TODO: test validations
    }

    /**
     * Close an Account
     *
     * Closes an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void closeanAccountTest() throws ApiException {
        String creditAccountId = null;
        String accept = null;
        String contentType = null;
        CloseanAccountRequest1 closeanAccountRequest1 = null;
        api.closeanAccount(creditAccountId, accept, contentType, closeanAccountRequest1);
        // TODO: test validations
    }

    /**
     * Create a Pre Authorization
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createaPreAuthorizationTest() throws ApiException {
        String creditAccountId = null;
        String accept = null;
        String contentType = null;
        CreateaPreAuthorizationRequest1 createaPreAuthorizationRequest1 = null;
        api.createaPreAuthorization(creditAccountId, accept, contentType, createaPreAuthorizationRequest1);
        // TODO: test validations
    }

    /**
     * Create a Pre Authorization (using id)
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createaPreAuthorizationUsingidTest() throws ApiException {
        String creditAccountId = null;
        String transactionId = null;
        String accept = null;
        String contentType = null;
        CreateaPreAuthorizationUsingidRequest createaPreAuthorizationUsingidRequest = null;
        api.createaPreAuthorizationUsingid(creditAccountId, transactionId, accept, contentType, createaPreAuthorizationUsingidRequest);
        // TODO: test validations
    }

    /**
     * Create or Update Settlement
     *
     * Debit a value from checking account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createorUpdateSettlementTest() throws ApiException {
        String creditAccountId = null;
        String transactionId = null;
        String accept = null;
        String contentType = null;
        CreateorUpdateSettlementRequest1 createorUpdateSettlementRequest1 = null;
        ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice response = api.createorUpdateSettlement(creditAccountId, transactionId, accept, contentType, createorUpdateSettlementRequest1);
        // TODO: test validations
    }

    /**
     * Decrease balance of an account
     *
     * Create a debit value updating the account BALANCE.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void decreasebalanceofanaccountTest() throws ApiException {
        String creditAccountId = null;
        String statementId = null;
        String accept = null;
        String contentType = null;
        DecreasebalanceofanaccountRequest1 decreasebalanceofanaccountRequest1 = null;
        api.decreasebalanceofanaccount(creditAccountId, statementId, accept, contentType, decreasebalanceofanaccountRequest1);
        // TODO: test validations
    }

    /**
     * Delete an account holder
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteanaccountholderTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String creditAccountId = null;
        String holderId = null;
        Searchcheckingaccounts1 response = api.deleteanaccountholder(contentType, accept, creditAccountId, holderId);
        // TODO: test validations
    }

    /**
     * Open an Account
     *
     * Open an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openanAccountTest() throws ApiException {
        String accept = null;
        String contentType = null;
        OpenanAccountRequest1 openanAccountRequest1 = null;
        String response = api.openanAccount(accept, contentType, openanAccountRequest1);
        // TODO: test validations
    }

    /**
     * Open or Change Account
     *
     * Open or Change an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openorChangeAccountTest() throws ApiException {
        String accountId = null;
        String accept = null;
        String contentType = null;
        OpenorChangeAccountRequest1 openorChangeAccountRequest1 = null;
        String response = api.openorChangeAccount(accountId, accept, contentType, openorChangeAccountRequest1);
        // TODO: test validations
    }

    /**
     * Partial or Total Refund a Settlement
     *
     * Refund a value from a already settled transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void partialorTotalRefundaSettlementTest() throws ApiException {
        String creditAccountId = null;
        String transactionId = null;
        String accept = null;
        String contentType = null;
        PartialorTotalRefundaSettlementRequest1 partialorTotalRefundaSettlementRequest1 = null;
        ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice response = api.partialorTotalRefundaSettlement(creditAccountId, transactionId, accept, contentType, partialorTotalRefundaSettlementRequest1);
        // TODO: test validations
    }

    /**
     * Retrieve an Account by Id
     *
     * Retrieve an account by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveaAccountbyIdTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String creditAccountId = null;
        Getaccount1 response = api.retrieveaAccountbyId(contentType, accept, creditAccountId);
        // TODO: test validations
    }

    /**
     * Search all accounts
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchallaccountsTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Searchaccounts1 response = api.searchallaccounts(contentType, accept);
        // TODO: test validations
    }

    /**
     * Update email and description of a account
     *
     * Update a checking account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateemailanddescriptionofaaccountTest() throws ApiException {
        String creditAccountId = null;
        String accept = null;
        String contentType = null;
        UpdateemailanddescriptionofaaccountRequest1 updateemailanddescriptionofaaccountRequest1 = null;
        String response = api.updateemailanddescriptionofaaccount(creditAccountId, accept, contentType, updateemailanddescriptionofaaccountRequest1);
        // TODO: test validations
    }

}
