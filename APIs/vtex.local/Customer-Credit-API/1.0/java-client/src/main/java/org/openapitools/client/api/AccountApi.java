/*
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddanaccountHolderRequest1;
import org.openapitools.client.model.ChangecreditlimitofanAccountRequest1;
import org.openapitools.client.model.ChangetoleranceofanaccountRequest1;
import org.openapitools.client.model.CloseanAccountRequest1;
import org.openapitools.client.model.CreateaPreAuthorizationRequest1;
import org.openapitools.client.model.CreateaPreAuthorizationUsingidRequest;
import org.openapitools.client.model.CreateorUpdateSettlementRequest1;
import org.openapitools.client.model.DecreasebalanceofanaccountRequest1;
import org.openapitools.client.model.Getaccount1;
import org.openapitools.client.model.OpenanAccountRequest1;
import org.openapitools.client.model.OpenorChangeAccountRequest1;
import org.openapitools.client.model.PartialorTotalRefundaSettlementRequest1;
import org.openapitools.client.model.Searchaccounts1;
import org.openapitools.client.model.Searchcheckingaccounts1;
import org.openapitools.client.model.Statements1;
import org.openapitools.client.model.ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice;
import org.openapitools.client.model.UpdateemailanddescriptionofaaccountRequest1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountstatements
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call accountstatementsCall(String contentType, String accept, String creditAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{creditAccountId}/statements"
            .replace("{" + "creditAccountId" + "}", localVarApiClient.escapeString(creditAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountstatementsValidateBeforeCall(String contentType, String accept, String creditAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling accountstatements(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling accountstatements(Async)");
        }

        // verify the required parameter 'creditAccountId' is set
        if (creditAccountId == null) {
            throw new ApiException("Missing the required parameter 'creditAccountId' when calling accountstatements(Async)");
        }

        return accountstatementsCall(contentType, accept, creditAccountId, _callback);

    }

    /**
     * Account statements
     * Get the account statements.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId  (required)
     * @return Statements1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public Statements1 accountstatements(String contentType, String accept, String creditAccountId) throws ApiException {
        ApiResponse<Statements1> localVarResp = accountstatementsWithHttpInfo(contentType, accept, creditAccountId);
        return localVarResp.getData();
    }

    /**
     * Account statements
     * Get the account statements.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId  (required)
     * @return ApiResponse&lt;Statements1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Statements1> accountstatementsWithHttpInfo(String contentType, String accept, String creditAccountId) throws ApiException {
        okhttp3.Call localVarCall = accountstatementsValidateBeforeCall(contentType, accept, creditAccountId, null);
        Type localVarReturnType = new TypeToken<Statements1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Account statements (asynchronously)
     * Get the account statements.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call accountstatementsAsync(String contentType, String accept, String creditAccountId, final ApiCallback<Statements1> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountstatementsValidateBeforeCall(contentType, accept, creditAccountId, _callback);
        Type localVarReturnType = new TypeToken<Statements1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addanaccountHolder
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param addanaccountHolderRequest1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addanaccountHolderCall(String creditAccountId, String accept, String contentType, AddanaccountHolderRequest1 addanaccountHolderRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addanaccountHolderRequest1;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{creditAccountId}/holders"
            .replace("{" + "creditAccountId" + "}", localVarApiClient.escapeString(creditAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addanaccountHolderValidateBeforeCall(String creditAccountId, String accept, String contentType, AddanaccountHolderRequest1 addanaccountHolderRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditAccountId' is set
        if (creditAccountId == null) {
            throw new ApiException("Missing the required parameter 'creditAccountId' when calling addanaccountHolder(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling addanaccountHolder(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling addanaccountHolder(Async)");
        }

        // verify the required parameter 'addanaccountHolderRequest1' is set
        if (addanaccountHolderRequest1 == null) {
            throw new ApiException("Missing the required parameter 'addanaccountHolderRequest1' when calling addanaccountHolder(Async)");
        }

        return addanaccountHolderCall(creditAccountId, accept, contentType, addanaccountHolderRequest1, _callback);

    }

    /**
     * Add an account Holder
     * 
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param addanaccountHolderRequest1  (required)
     * @return Searchcheckingaccounts1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public Searchcheckingaccounts1 addanaccountHolder(String creditAccountId, String accept, String contentType, AddanaccountHolderRequest1 addanaccountHolderRequest1) throws ApiException {
        ApiResponse<Searchcheckingaccounts1> localVarResp = addanaccountHolderWithHttpInfo(creditAccountId, accept, contentType, addanaccountHolderRequest1);
        return localVarResp.getData();
    }

    /**
     * Add an account Holder
     * 
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param addanaccountHolderRequest1  (required)
     * @return ApiResponse&lt;Searchcheckingaccounts1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Searchcheckingaccounts1> addanaccountHolderWithHttpInfo(String creditAccountId, String accept, String contentType, AddanaccountHolderRequest1 addanaccountHolderRequest1) throws ApiException {
        okhttp3.Call localVarCall = addanaccountHolderValidateBeforeCall(creditAccountId, accept, contentType, addanaccountHolderRequest1, null);
        Type localVarReturnType = new TypeToken<Searchcheckingaccounts1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an account Holder (asynchronously)
     * 
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param addanaccountHolderRequest1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addanaccountHolderAsync(String creditAccountId, String accept, String contentType, AddanaccountHolderRequest1 addanaccountHolderRequest1, final ApiCallback<Searchcheckingaccounts1> _callback) throws ApiException {

        okhttp3.Call localVarCall = addanaccountHolderValidateBeforeCall(creditAccountId, accept, contentType, addanaccountHolderRequest1, _callback);
        Type localVarReturnType = new TypeToken<Searchcheckingaccounts1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelaPreAuthorization
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param transactionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelaPreAuthorizationCall(String contentType, String accept, String creditAccountId, String transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{creditAccountId}/transactions/{transactionId}"
            .replace("{" + "creditAccountId" + "}", localVarApiClient.escapeString(creditAccountId.toString()))
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelaPreAuthorizationValidateBeforeCall(String contentType, String accept, String creditAccountId, String transactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling cancelaPreAuthorization(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling cancelaPreAuthorization(Async)");
        }

        // verify the required parameter 'creditAccountId' is set
        if (creditAccountId == null) {
            throw new ApiException("Missing the required parameter 'creditAccountId' when calling cancelaPreAuthorization(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling cancelaPreAuthorization(Async)");
        }

        return cancelaPreAuthorizationCall(contentType, accept, creditAccountId, transactionId, _callback);

    }

    /**
     * Cancel a Pre Authorization
     * 
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param transactionId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void cancelaPreAuthorization(String contentType, String accept, String creditAccountId, String transactionId) throws ApiException {
        cancelaPreAuthorizationWithHttpInfo(contentType, accept, creditAccountId, transactionId);
    }

    /**
     * Cancel a Pre Authorization
     * 
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param transactionId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelaPreAuthorizationWithHttpInfo(String contentType, String accept, String creditAccountId, String transactionId) throws ApiException {
        okhttp3.Call localVarCall = cancelaPreAuthorizationValidateBeforeCall(contentType, accept, creditAccountId, transactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel a Pre Authorization (asynchronously)
     * 
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param transactionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelaPreAuthorizationAsync(String contentType, String accept, String creditAccountId, String transactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelaPreAuthorizationValidateBeforeCall(contentType, accept, creditAccountId, transactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for changecreditlimitofanAccount
     * @param creditAccountId Credit account&#39;s identifier (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param changecreditlimitofanAccountRequest1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * connection -  <br>  * content-length -  <br>  * date -  <br>  * server -  <br>  * via -  <br>  * x-cache -  <br>  * x-cache-lookup -  <br>  * x-powered-by -  <br>  * x-vtex-janus-router-backend-app -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call changecreditlimitofanAccountCall(String creditAccountId, String accept, String contentType, ChangecreditlimitofanAccountRequest1 changecreditlimitofanAccountRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changecreditlimitofanAccountRequest1;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{creditAccountId}/creditlimit"
            .replace("{" + "creditAccountId" + "}", localVarApiClient.escapeString(creditAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changecreditlimitofanAccountValidateBeforeCall(String creditAccountId, String accept, String contentType, ChangecreditlimitofanAccountRequest1 changecreditlimitofanAccountRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditAccountId' is set
        if (creditAccountId == null) {
            throw new ApiException("Missing the required parameter 'creditAccountId' when calling changecreditlimitofanAccount(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling changecreditlimitofanAccount(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling changecreditlimitofanAccount(Async)");
        }

        // verify the required parameter 'changecreditlimitofanAccountRequest1' is set
        if (changecreditlimitofanAccountRequest1 == null) {
            throw new ApiException("Missing the required parameter 'changecreditlimitofanAccountRequest1' when calling changecreditlimitofanAccount(Async)");
        }

        return changecreditlimitofanAccountCall(creditAccountId, accept, contentType, changecreditlimitofanAccountRequest1, _callback);

    }

    /**
     * Change credit limit of an Account
     * Increase the credit limit of an account.
     * @param creditAccountId Credit account&#39;s identifier (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param changecreditlimitofanAccountRequest1  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * connection -  <br>  * content-length -  <br>  * date -  <br>  * server -  <br>  * via -  <br>  * x-cache -  <br>  * x-cache-lookup -  <br>  * x-powered-by -  <br>  * x-vtex-janus-router-backend-app -  <br>  </td></tr>
     </table>
     */
    public Object changecreditlimitofanAccount(String creditAccountId, String accept, String contentType, ChangecreditlimitofanAccountRequest1 changecreditlimitofanAccountRequest1) throws ApiException {
        ApiResponse<Object> localVarResp = changecreditlimitofanAccountWithHttpInfo(creditAccountId, accept, contentType, changecreditlimitofanAccountRequest1);
        return localVarResp.getData();
    }

    /**
     * Change credit limit of an Account
     * Increase the credit limit of an account.
     * @param creditAccountId Credit account&#39;s identifier (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param changecreditlimitofanAccountRequest1  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * connection -  <br>  * content-length -  <br>  * date -  <br>  * server -  <br>  * via -  <br>  * x-cache -  <br>  * x-cache-lookup -  <br>  * x-powered-by -  <br>  * x-vtex-janus-router-backend-app -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> changecreditlimitofanAccountWithHttpInfo(String creditAccountId, String accept, String contentType, ChangecreditlimitofanAccountRequest1 changecreditlimitofanAccountRequest1) throws ApiException {
        okhttp3.Call localVarCall = changecreditlimitofanAccountValidateBeforeCall(creditAccountId, accept, contentType, changecreditlimitofanAccountRequest1, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change credit limit of an Account (asynchronously)
     * Increase the credit limit of an account.
     * @param creditAccountId Credit account&#39;s identifier (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param changecreditlimitofanAccountRequest1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * connection -  <br>  * content-length -  <br>  * date -  <br>  * server -  <br>  * via -  <br>  * x-cache -  <br>  * x-cache-lookup -  <br>  * x-powered-by -  <br>  * x-vtex-janus-router-backend-app -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call changecreditlimitofanAccountAsync(String creditAccountId, String accept, String contentType, ChangecreditlimitofanAccountRequest1 changecreditlimitofanAccountRequest1, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = changecreditlimitofanAccountValidateBeforeCall(creditAccountId, accept, contentType, changecreditlimitofanAccountRequest1, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changetoleranceofanaccount
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param changetoleranceofanaccountRequest1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * connection -  <br>  * content-length -  <br>  * date -  <br>  * server -  <br>  * via -  <br>  * x-cache -  <br>  * x-cache-lookup -  <br>  * x-powered-by -  <br>  * x-vtex-janus-router-backend-app -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call changetoleranceofanaccountCall(String creditAccountId, String accept, String contentType, ChangetoleranceofanaccountRequest1 changetoleranceofanaccountRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changetoleranceofanaccountRequest1;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{creditAccountId}/tolerance"
            .replace("{" + "creditAccountId" + "}", localVarApiClient.escapeString(creditAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changetoleranceofanaccountValidateBeforeCall(String creditAccountId, String accept, String contentType, ChangetoleranceofanaccountRequest1 changetoleranceofanaccountRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditAccountId' is set
        if (creditAccountId == null) {
            throw new ApiException("Missing the required parameter 'creditAccountId' when calling changetoleranceofanaccount(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling changetoleranceofanaccount(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling changetoleranceofanaccount(Async)");
        }

        // verify the required parameter 'changetoleranceofanaccountRequest1' is set
        if (changetoleranceofanaccountRequest1 == null) {
            throw new ApiException("Missing the required parameter 'changetoleranceofanaccountRequest1' when calling changetoleranceofanaccount(Async)");
        }

        return changetoleranceofanaccountCall(creditAccountId, accept, contentType, changetoleranceofanaccountRequest1, _callback);

    }

    /**
     * Change tolerance of an account
     * Increase the credit limit of a checking account.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param changetoleranceofanaccountRequest1  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * connection -  <br>  * content-length -  <br>  * date -  <br>  * server -  <br>  * via -  <br>  * x-cache -  <br>  * x-cache-lookup -  <br>  * x-powered-by -  <br>  * x-vtex-janus-router-backend-app -  <br>  </td></tr>
     </table>
     */
    public Object changetoleranceofanaccount(String creditAccountId, String accept, String contentType, ChangetoleranceofanaccountRequest1 changetoleranceofanaccountRequest1) throws ApiException {
        ApiResponse<Object> localVarResp = changetoleranceofanaccountWithHttpInfo(creditAccountId, accept, contentType, changetoleranceofanaccountRequest1);
        return localVarResp.getData();
    }

    /**
     * Change tolerance of an account
     * Increase the credit limit of a checking account.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param changetoleranceofanaccountRequest1  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * connection -  <br>  * content-length -  <br>  * date -  <br>  * server -  <br>  * via -  <br>  * x-cache -  <br>  * x-cache-lookup -  <br>  * x-powered-by -  <br>  * x-vtex-janus-router-backend-app -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> changetoleranceofanaccountWithHttpInfo(String creditAccountId, String accept, String contentType, ChangetoleranceofanaccountRequest1 changetoleranceofanaccountRequest1) throws ApiException {
        okhttp3.Call localVarCall = changetoleranceofanaccountValidateBeforeCall(creditAccountId, accept, contentType, changetoleranceofanaccountRequest1, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change tolerance of an account (asynchronously)
     * Increase the credit limit of a checking account.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param changetoleranceofanaccountRequest1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * connection -  <br>  * content-length -  <br>  * date -  <br>  * server -  <br>  * via -  <br>  * x-cache -  <br>  * x-cache-lookup -  <br>  * x-powered-by -  <br>  * x-vtex-janus-router-backend-app -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call changetoleranceofanaccountAsync(String creditAccountId, String accept, String contentType, ChangetoleranceofanaccountRequest1 changetoleranceofanaccountRequest1, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = changetoleranceofanaccountValidateBeforeCall(creditAccountId, accept, contentType, changetoleranceofanaccountRequest1, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for closeanAccount
     * @param creditAccountId Credit account&#39;s identifier (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param closeanAccountRequest1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call closeanAccountCall(String creditAccountId, String accept, String contentType, CloseanAccountRequest1 closeanAccountRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = closeanAccountRequest1;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{creditAccountId}"
            .replace("{" + "creditAccountId" + "}", localVarApiClient.escapeString(creditAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call closeanAccountValidateBeforeCall(String creditAccountId, String accept, String contentType, CloseanAccountRequest1 closeanAccountRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditAccountId' is set
        if (creditAccountId == null) {
            throw new ApiException("Missing the required parameter 'creditAccountId' when calling closeanAccount(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling closeanAccount(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling closeanAccount(Async)");
        }

        // verify the required parameter 'closeanAccountRequest1' is set
        if (closeanAccountRequest1 == null) {
            throw new ApiException("Missing the required parameter 'closeanAccountRequest1' when calling closeanAccount(Async)");
        }

        return closeanAccountCall(creditAccountId, accept, contentType, closeanAccountRequest1, _callback);

    }

    /**
     * Close an Account
     * Closes an account.
     * @param creditAccountId Credit account&#39;s identifier (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param closeanAccountRequest1  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void closeanAccount(String creditAccountId, String accept, String contentType, CloseanAccountRequest1 closeanAccountRequest1) throws ApiException {
        closeanAccountWithHttpInfo(creditAccountId, accept, contentType, closeanAccountRequest1);
    }

    /**
     * Close an Account
     * Closes an account.
     * @param creditAccountId Credit account&#39;s identifier (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param closeanAccountRequest1  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> closeanAccountWithHttpInfo(String creditAccountId, String accept, String contentType, CloseanAccountRequest1 closeanAccountRequest1) throws ApiException {
        okhttp3.Call localVarCall = closeanAccountValidateBeforeCall(creditAccountId, accept, contentType, closeanAccountRequest1, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Close an Account (asynchronously)
     * Closes an account.
     * @param creditAccountId Credit account&#39;s identifier (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param closeanAccountRequest1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call closeanAccountAsync(String creditAccountId, String accept, String contentType, CloseanAccountRequest1 closeanAccountRequest1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = closeanAccountValidateBeforeCall(creditAccountId, accept, contentType, closeanAccountRequest1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createaPreAuthorization
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param createaPreAuthorizationRequest1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createaPreAuthorizationCall(String creditAccountId, String accept, String contentType, CreateaPreAuthorizationRequest1 createaPreAuthorizationRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createaPreAuthorizationRequest1;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{creditAccountId}/transaction"
            .replace("{" + "creditAccountId" + "}", localVarApiClient.escapeString(creditAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createaPreAuthorizationValidateBeforeCall(String creditAccountId, String accept, String contentType, CreateaPreAuthorizationRequest1 createaPreAuthorizationRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditAccountId' is set
        if (creditAccountId == null) {
            throw new ApiException("Missing the required parameter 'creditAccountId' when calling createaPreAuthorization(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createaPreAuthorization(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createaPreAuthorization(Async)");
        }

        // verify the required parameter 'createaPreAuthorizationRequest1' is set
        if (createaPreAuthorizationRequest1 == null) {
            throw new ApiException("Missing the required parameter 'createaPreAuthorizationRequest1' when calling createaPreAuthorization(Async)");
        }

        return createaPreAuthorizationCall(creditAccountId, accept, contentType, createaPreAuthorizationRequest1, _callback);

    }

    /**
     * Create a Pre Authorization
     * 
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param createaPreAuthorizationRequest1  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void createaPreAuthorization(String creditAccountId, String accept, String contentType, CreateaPreAuthorizationRequest1 createaPreAuthorizationRequest1) throws ApiException {
        createaPreAuthorizationWithHttpInfo(creditAccountId, accept, contentType, createaPreAuthorizationRequest1);
    }

    /**
     * Create a Pre Authorization
     * 
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param createaPreAuthorizationRequest1  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createaPreAuthorizationWithHttpInfo(String creditAccountId, String accept, String contentType, CreateaPreAuthorizationRequest1 createaPreAuthorizationRequest1) throws ApiException {
        okhttp3.Call localVarCall = createaPreAuthorizationValidateBeforeCall(creditAccountId, accept, contentType, createaPreAuthorizationRequest1, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a Pre Authorization (asynchronously)
     * 
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param createaPreAuthorizationRequest1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createaPreAuthorizationAsync(String creditAccountId, String accept, String contentType, CreateaPreAuthorizationRequest1 createaPreAuthorizationRequest1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createaPreAuthorizationValidateBeforeCall(creditAccountId, accept, contentType, createaPreAuthorizationRequest1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createaPreAuthorizationUsingid
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param transactionId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param createaPreAuthorizationUsingidRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createaPreAuthorizationUsingidCall(String creditAccountId, String transactionId, String accept, String contentType, CreateaPreAuthorizationUsingidRequest createaPreAuthorizationUsingidRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createaPreAuthorizationUsingidRequest;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{creditAccountId}/transactions/{transactionId}"
            .replace("{" + "creditAccountId" + "}", localVarApiClient.escapeString(creditAccountId.toString()))
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createaPreAuthorizationUsingidValidateBeforeCall(String creditAccountId, String transactionId, String accept, String contentType, CreateaPreAuthorizationUsingidRequest createaPreAuthorizationUsingidRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditAccountId' is set
        if (creditAccountId == null) {
            throw new ApiException("Missing the required parameter 'creditAccountId' when calling createaPreAuthorizationUsingid(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling createaPreAuthorizationUsingid(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createaPreAuthorizationUsingid(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createaPreAuthorizationUsingid(Async)");
        }

        // verify the required parameter 'createaPreAuthorizationUsingidRequest' is set
        if (createaPreAuthorizationUsingidRequest == null) {
            throw new ApiException("Missing the required parameter 'createaPreAuthorizationUsingidRequest' when calling createaPreAuthorizationUsingid(Async)");
        }

        return createaPreAuthorizationUsingidCall(creditAccountId, transactionId, accept, contentType, createaPreAuthorizationUsingidRequest, _callback);

    }

    /**
     * Create a Pre Authorization (using id)
     * 
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param transactionId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param createaPreAuthorizationUsingidRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void createaPreAuthorizationUsingid(String creditAccountId, String transactionId, String accept, String contentType, CreateaPreAuthorizationUsingidRequest createaPreAuthorizationUsingidRequest) throws ApiException {
        createaPreAuthorizationUsingidWithHttpInfo(creditAccountId, transactionId, accept, contentType, createaPreAuthorizationUsingidRequest);
    }

    /**
     * Create a Pre Authorization (using id)
     * 
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param transactionId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param createaPreAuthorizationUsingidRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createaPreAuthorizationUsingidWithHttpInfo(String creditAccountId, String transactionId, String accept, String contentType, CreateaPreAuthorizationUsingidRequest createaPreAuthorizationUsingidRequest) throws ApiException {
        okhttp3.Call localVarCall = createaPreAuthorizationUsingidValidateBeforeCall(creditAccountId, transactionId, accept, contentType, createaPreAuthorizationUsingidRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a Pre Authorization (using id) (asynchronously)
     * 
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param transactionId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param createaPreAuthorizationUsingidRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createaPreAuthorizationUsingidAsync(String creditAccountId, String transactionId, String accept, String contentType, CreateaPreAuthorizationUsingidRequest createaPreAuthorizationUsingidRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createaPreAuthorizationUsingidValidateBeforeCall(creditAccountId, transactionId, accept, contentType, createaPreAuthorizationUsingidRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createorUpdateSettlement
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param transactionId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param createorUpdateSettlementRequest1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * connection -  <br>  * content-length -  <br>  * content-type -  <br>  * date -  <br>  * server -  <br>  * x-powered-by -  <br>  * x-vtex-janus-router-backend-app -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createorUpdateSettlementCall(String creditAccountId, String transactionId, String accept, String contentType, CreateorUpdateSettlementRequest1 createorUpdateSettlementRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createorUpdateSettlementRequest1;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{creditAccountId}/transactions/{transactionId}/settlement"
            .replace("{" + "creditAccountId" + "}", localVarApiClient.escapeString(creditAccountId.toString()))
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createorUpdateSettlementValidateBeforeCall(String creditAccountId, String transactionId, String accept, String contentType, CreateorUpdateSettlementRequest1 createorUpdateSettlementRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditAccountId' is set
        if (creditAccountId == null) {
            throw new ApiException("Missing the required parameter 'creditAccountId' when calling createorUpdateSettlement(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling createorUpdateSettlement(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createorUpdateSettlement(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createorUpdateSettlement(Async)");
        }

        // verify the required parameter 'createorUpdateSettlementRequest1' is set
        if (createorUpdateSettlementRequest1 == null) {
            throw new ApiException("Missing the required parameter 'createorUpdateSettlementRequest1' when calling createorUpdateSettlement(Async)");
        }

        return createorUpdateSettlementCall(creditAccountId, transactionId, accept, contentType, createorUpdateSettlementRequest1, _callback);

    }

    /**
     * Create or Update Settlement
     * Debit a value from checking account.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param transactionId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param createorUpdateSettlementRequest1  (required)
     * @return ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * connection -  <br>  * content-length -  <br>  * content-type -  <br>  * date -  <br>  * server -  <br>  * x-powered-by -  <br>  * x-vtex-janus-router-backend-app -  <br>  </td></tr>
     </table>
     */
    public ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice createorUpdateSettlement(String creditAccountId, String transactionId, String accept, String contentType, CreateorUpdateSettlementRequest1 createorUpdateSettlementRequest1) throws ApiException {
        ApiResponse<ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice> localVarResp = createorUpdateSettlementWithHttpInfo(creditAccountId, transactionId, accept, contentType, createorUpdateSettlementRequest1);
        return localVarResp.getData();
    }

    /**
     * Create or Update Settlement
     * Debit a value from checking account.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param transactionId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param createorUpdateSettlementRequest1  (required)
     * @return ApiResponse&lt;ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * connection -  <br>  * content-length -  <br>  * content-type -  <br>  * date -  <br>  * server -  <br>  * x-powered-by -  <br>  * x-vtex-janus-router-backend-app -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice> createorUpdateSettlementWithHttpInfo(String creditAccountId, String transactionId, String accept, String contentType, CreateorUpdateSettlementRequest1 createorUpdateSettlementRequest1) throws ApiException {
        okhttp3.Call localVarCall = createorUpdateSettlementValidateBeforeCall(creditAccountId, transactionId, accept, contentType, createorUpdateSettlementRequest1, null);
        Type localVarReturnType = new TypeToken<ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or Update Settlement (asynchronously)
     * Debit a value from checking account.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param transactionId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param createorUpdateSettlementRequest1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * connection -  <br>  * content-length -  <br>  * content-type -  <br>  * date -  <br>  * server -  <br>  * x-powered-by -  <br>  * x-vtex-janus-router-backend-app -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createorUpdateSettlementAsync(String creditAccountId, String transactionId, String accept, String contentType, CreateorUpdateSettlementRequest1 createorUpdateSettlementRequest1, final ApiCallback<ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice> _callback) throws ApiException {

        okhttp3.Call localVarCall = createorUpdateSettlementValidateBeforeCall(creditAccountId, transactionId, accept, contentType, createorUpdateSettlementRequest1, _callback);
        Type localVarReturnType = new TypeToken<ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for decreasebalanceofanaccount
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param statementId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param decreasebalanceofanaccountRequest1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decreasebalanceofanaccountCall(String creditAccountId, String statementId, String accept, String contentType, DecreasebalanceofanaccountRequest1 decreasebalanceofanaccountRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = decreasebalanceofanaccountRequest1;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{creditAccountId}/statements/{statementId}"
            .replace("{" + "creditAccountId" + "}", localVarApiClient.escapeString(creditAccountId.toString()))
            .replace("{" + "statementId" + "}", localVarApiClient.escapeString(statementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call decreasebalanceofanaccountValidateBeforeCall(String creditAccountId, String statementId, String accept, String contentType, DecreasebalanceofanaccountRequest1 decreasebalanceofanaccountRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditAccountId' is set
        if (creditAccountId == null) {
            throw new ApiException("Missing the required parameter 'creditAccountId' when calling decreasebalanceofanaccount(Async)");
        }

        // verify the required parameter 'statementId' is set
        if (statementId == null) {
            throw new ApiException("Missing the required parameter 'statementId' when calling decreasebalanceofanaccount(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling decreasebalanceofanaccount(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling decreasebalanceofanaccount(Async)");
        }

        // verify the required parameter 'decreasebalanceofanaccountRequest1' is set
        if (decreasebalanceofanaccountRequest1 == null) {
            throw new ApiException("Missing the required parameter 'decreasebalanceofanaccountRequest1' when calling decreasebalanceofanaccount(Async)");
        }

        return decreasebalanceofanaccountCall(creditAccountId, statementId, accept, contentType, decreasebalanceofanaccountRequest1, _callback);

    }

    /**
     * Decrease balance of an account
     * Create a debit value updating the account BALANCE.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param statementId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param decreasebalanceofanaccountRequest1  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void decreasebalanceofanaccount(String creditAccountId, String statementId, String accept, String contentType, DecreasebalanceofanaccountRequest1 decreasebalanceofanaccountRequest1) throws ApiException {
        decreasebalanceofanaccountWithHttpInfo(creditAccountId, statementId, accept, contentType, decreasebalanceofanaccountRequest1);
    }

    /**
     * Decrease balance of an account
     * Create a debit value updating the account BALANCE.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param statementId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param decreasebalanceofanaccountRequest1  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> decreasebalanceofanaccountWithHttpInfo(String creditAccountId, String statementId, String accept, String contentType, DecreasebalanceofanaccountRequest1 decreasebalanceofanaccountRequest1) throws ApiException {
        okhttp3.Call localVarCall = decreasebalanceofanaccountValidateBeforeCall(creditAccountId, statementId, accept, contentType, decreasebalanceofanaccountRequest1, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Decrease balance of an account (asynchronously)
     * Create a debit value updating the account BALANCE.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param statementId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param decreasebalanceofanaccountRequest1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decreasebalanceofanaccountAsync(String creditAccountId, String statementId, String accept, String contentType, DecreasebalanceofanaccountRequest1 decreasebalanceofanaccountRequest1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = decreasebalanceofanaccountValidateBeforeCall(creditAccountId, statementId, accept, contentType, decreasebalanceofanaccountRequest1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteanaccountholder
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param holderId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteanaccountholderCall(String contentType, String accept, String creditAccountId, String holderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{creditAccountId}/holders/{holderId}"
            .replace("{" + "creditAccountId" + "}", localVarApiClient.escapeString(creditAccountId.toString()))
            .replace("{" + "holderId" + "}", localVarApiClient.escapeString(holderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteanaccountholderValidateBeforeCall(String contentType, String accept, String creditAccountId, String holderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deleteanaccountholder(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling deleteanaccountholder(Async)");
        }

        // verify the required parameter 'creditAccountId' is set
        if (creditAccountId == null) {
            throw new ApiException("Missing the required parameter 'creditAccountId' when calling deleteanaccountholder(Async)");
        }

        // verify the required parameter 'holderId' is set
        if (holderId == null) {
            throw new ApiException("Missing the required parameter 'holderId' when calling deleteanaccountholder(Async)");
        }

        return deleteanaccountholderCall(contentType, accept, creditAccountId, holderId, _callback);

    }

    /**
     * Delete an account holder
     * 
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param holderId  (required)
     * @return Searchcheckingaccounts1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public Searchcheckingaccounts1 deleteanaccountholder(String contentType, String accept, String creditAccountId, String holderId) throws ApiException {
        ApiResponse<Searchcheckingaccounts1> localVarResp = deleteanaccountholderWithHttpInfo(contentType, accept, creditAccountId, holderId);
        return localVarResp.getData();
    }

    /**
     * Delete an account holder
     * 
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param holderId  (required)
     * @return ApiResponse&lt;Searchcheckingaccounts1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Searchcheckingaccounts1> deleteanaccountholderWithHttpInfo(String contentType, String accept, String creditAccountId, String holderId) throws ApiException {
        okhttp3.Call localVarCall = deleteanaccountholderValidateBeforeCall(contentType, accept, creditAccountId, holderId, null);
        Type localVarReturnType = new TypeToken<Searchcheckingaccounts1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an account holder (asynchronously)
     * 
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param holderId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteanaccountholderAsync(String contentType, String accept, String creditAccountId, String holderId, final ApiCallback<Searchcheckingaccounts1> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteanaccountholderValidateBeforeCall(contentType, accept, creditAccountId, holderId, _callback);
        Type localVarReturnType = new TypeToken<Searchcheckingaccounts1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openanAccount
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param openanAccountRequest1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call openanAccountCall(String accept, String contentType, OpenanAccountRequest1 openanAccountRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = openanAccountRequest1;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openanAccountValidateBeforeCall(String accept, String contentType, OpenanAccountRequest1 openanAccountRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling openanAccount(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling openanAccount(Async)");
        }

        // verify the required parameter 'openanAccountRequest1' is set
        if (openanAccountRequest1 == null) {
            throw new ApiException("Missing the required parameter 'openanAccountRequest1' when calling openanAccount(Async)");
        }

        return openanAccountCall(accept, contentType, openanAccountRequest1, _callback);

    }

    /**
     * Open an Account
     * Open an account.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param openanAccountRequest1  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public String openanAccount(String accept, String contentType, OpenanAccountRequest1 openanAccountRequest1) throws ApiException {
        ApiResponse<String> localVarResp = openanAccountWithHttpInfo(accept, contentType, openanAccountRequest1);
        return localVarResp.getData();
    }

    /**
     * Open an Account
     * Open an account.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param openanAccountRequest1  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<String> openanAccountWithHttpInfo(String accept, String contentType, OpenanAccountRequest1 openanAccountRequest1) throws ApiException {
        okhttp3.Call localVarCall = openanAccountValidateBeforeCall(accept, contentType, openanAccountRequest1, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Open an Account (asynchronously)
     * Open an account.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param openanAccountRequest1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call openanAccountAsync(String accept, String contentType, OpenanAccountRequest1 openanAccountRequest1, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = openanAccountValidateBeforeCall(accept, contentType, openanAccountRequest1, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openorChangeAccount
     * @param accountId It must be an alphanumeric value (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param openorChangeAccountRequest1  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call openorChangeAccountCall(String accountId, String accept, String contentType, OpenorChangeAccountRequest1 openorChangeAccountRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = openorChangeAccountRequest1;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{accountId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openorChangeAccountValidateBeforeCall(String accountId, String accept, String contentType, OpenorChangeAccountRequest1 openorChangeAccountRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling openorChangeAccount(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling openorChangeAccount(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling openorChangeAccount(Async)");
        }

        return openorChangeAccountCall(accountId, accept, contentType, openorChangeAccountRequest1, _callback);

    }

    /**
     * Open or Change Account
     * Open or Change an account.
     * @param accountId It must be an alphanumeric value (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param openorChangeAccountRequest1  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public String openorChangeAccount(String accountId, String accept, String contentType, OpenorChangeAccountRequest1 openorChangeAccountRequest1) throws ApiException {
        ApiResponse<String> localVarResp = openorChangeAccountWithHttpInfo(accountId, accept, contentType, openorChangeAccountRequest1);
        return localVarResp.getData();
    }

    /**
     * Open or Change Account
     * Open or Change an account.
     * @param accountId It must be an alphanumeric value (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param openorChangeAccountRequest1  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<String> openorChangeAccountWithHttpInfo(String accountId, String accept, String contentType, OpenorChangeAccountRequest1 openorChangeAccountRequest1) throws ApiException {
        okhttp3.Call localVarCall = openorChangeAccountValidateBeforeCall(accountId, accept, contentType, openorChangeAccountRequest1, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Open or Change Account (asynchronously)
     * Open or Change an account.
     * @param accountId It must be an alphanumeric value (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param openorChangeAccountRequest1  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call openorChangeAccountAsync(String accountId, String accept, String contentType, OpenorChangeAccountRequest1 openorChangeAccountRequest1, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = openorChangeAccountValidateBeforeCall(accountId, accept, contentType, openorChangeAccountRequest1, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partialorTotalRefundaSettlement
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param transactionId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param partialorTotalRefundaSettlementRequest1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * connection -  <br>  * content-length -  <br>  * content-type -  <br>  * date -  <br>  * server -  <br>  * x-powered-by -  <br>  * x-vtex-janus-router-backend-app -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call partialorTotalRefundaSettlementCall(String creditAccountId, String transactionId, String accept, String contentType, PartialorTotalRefundaSettlementRequest1 partialorTotalRefundaSettlementRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = partialorTotalRefundaSettlementRequest1;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{creditAccountId}/transactions/{transactionId}/refunds"
            .replace("{" + "creditAccountId" + "}", localVarApiClient.escapeString(creditAccountId.toString()))
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partialorTotalRefundaSettlementValidateBeforeCall(String creditAccountId, String transactionId, String accept, String contentType, PartialorTotalRefundaSettlementRequest1 partialorTotalRefundaSettlementRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditAccountId' is set
        if (creditAccountId == null) {
            throw new ApiException("Missing the required parameter 'creditAccountId' when calling partialorTotalRefundaSettlement(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling partialorTotalRefundaSettlement(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling partialorTotalRefundaSettlement(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling partialorTotalRefundaSettlement(Async)");
        }

        // verify the required parameter 'partialorTotalRefundaSettlementRequest1' is set
        if (partialorTotalRefundaSettlementRequest1 == null) {
            throw new ApiException("Missing the required parameter 'partialorTotalRefundaSettlementRequest1' when calling partialorTotalRefundaSettlement(Async)");
        }

        return partialorTotalRefundaSettlementCall(creditAccountId, transactionId, accept, contentType, partialorTotalRefundaSettlementRequest1, _callback);

    }

    /**
     * Partial or Total Refund a Settlement
     * Refund a value from a already settled transaction.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param transactionId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param partialorTotalRefundaSettlementRequest1  (required)
     * @return ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * connection -  <br>  * content-length -  <br>  * content-type -  <br>  * date -  <br>  * server -  <br>  * x-powered-by -  <br>  * x-vtex-janus-router-backend-app -  <br>  </td></tr>
     </table>
     */
    public ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice partialorTotalRefundaSettlement(String creditAccountId, String transactionId, String accept, String contentType, PartialorTotalRefundaSettlementRequest1 partialorTotalRefundaSettlementRequest1) throws ApiException {
        ApiResponse<ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice> localVarResp = partialorTotalRefundaSettlementWithHttpInfo(creditAccountId, transactionId, accept, contentType, partialorTotalRefundaSettlementRequest1);
        return localVarResp.getData();
    }

    /**
     * Partial or Total Refund a Settlement
     * Refund a value from a already settled transaction.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param transactionId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param partialorTotalRefundaSettlementRequest1  (required)
     * @return ApiResponse&lt;ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * connection -  <br>  * content-length -  <br>  * content-type -  <br>  * date -  <br>  * server -  <br>  * x-powered-by -  <br>  * x-vtex-janus-router-backend-app -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice> partialorTotalRefundaSettlementWithHttpInfo(String creditAccountId, String transactionId, String accept, String contentType, PartialorTotalRefundaSettlementRequest1 partialorTotalRefundaSettlementRequest1) throws ApiException {
        okhttp3.Call localVarCall = partialorTotalRefundaSettlementValidateBeforeCall(creditAccountId, transactionId, accept, contentType, partialorTotalRefundaSettlementRequest1, null);
        Type localVarReturnType = new TypeToken<ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Partial or Total Refund a Settlement (asynchronously)
     * Refund a value from a already settled transaction.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param transactionId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param partialorTotalRefundaSettlementRequest1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * connection -  <br>  * content-length -  <br>  * content-type -  <br>  * date -  <br>  * server -  <br>  * x-powered-by -  <br>  * x-vtex-janus-router-backend-app -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call partialorTotalRefundaSettlementAsync(String creditAccountId, String transactionId, String accept, String contentType, PartialorTotalRefundaSettlementRequest1 partialorTotalRefundaSettlementRequest1, final ApiCallback<ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice> _callback) throws ApiException {

        okhttp3.Call localVarCall = partialorTotalRefundaSettlementValidateBeforeCall(creditAccountId, transactionId, accept, contentType, partialorTotalRefundaSettlementRequest1, _callback);
        Type localVarReturnType = new TypeToken<ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveaAccountbyId
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveaAccountbyIdCall(String contentType, String accept, String creditAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{creditAccountId}"
            .replace("{" + "creditAccountId" + "}", localVarApiClient.escapeString(creditAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveaAccountbyIdValidateBeforeCall(String contentType, String accept, String creditAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling retrieveaAccountbyId(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling retrieveaAccountbyId(Async)");
        }

        // verify the required parameter 'creditAccountId' is set
        if (creditAccountId == null) {
            throw new ApiException("Missing the required parameter 'creditAccountId' when calling retrieveaAccountbyId(Async)");
        }

        return retrieveaAccountbyIdCall(contentType, accept, creditAccountId, _callback);

    }

    /**
     * Retrieve an Account by Id
     * Retrieve an account by id.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId  (required)
     * @return Getaccount1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public Getaccount1 retrieveaAccountbyId(String contentType, String accept, String creditAccountId) throws ApiException {
        ApiResponse<Getaccount1> localVarResp = retrieveaAccountbyIdWithHttpInfo(contentType, accept, creditAccountId);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Account by Id
     * Retrieve an account by id.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId  (required)
     * @return ApiResponse&lt;Getaccount1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Getaccount1> retrieveaAccountbyIdWithHttpInfo(String contentType, String accept, String creditAccountId) throws ApiException {
        okhttp3.Call localVarCall = retrieveaAccountbyIdValidateBeforeCall(contentType, accept, creditAccountId, null);
        Type localVarReturnType = new TypeToken<Getaccount1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Account by Id (asynchronously)
     * Retrieve an account by id.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveaAccountbyIdAsync(String contentType, String accept, String creditAccountId, final ApiCallback<Getaccount1> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveaAccountbyIdValidateBeforeCall(contentType, accept, creditAccountId, _callback);
        Type localVarReturnType = new TypeToken<Getaccount1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchallaccounts
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call searchallaccountsCall(String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchallaccountsValidateBeforeCall(String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling searchallaccounts(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling searchallaccounts(Async)");
        }

        return searchallaccountsCall(contentType, accept, _callback);

    }

    /**
     * Search all accounts
     * 
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @return Searchaccounts1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public Searchaccounts1 searchallaccounts(String contentType, String accept) throws ApiException {
        ApiResponse<Searchaccounts1> localVarResp = searchallaccountsWithHttpInfo(contentType, accept);
        return localVarResp.getData();
    }

    /**
     * Search all accounts
     * 
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @return ApiResponse&lt;Searchaccounts1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Searchaccounts1> searchallaccountsWithHttpInfo(String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = searchallaccountsValidateBeforeCall(contentType, accept, null);
        Type localVarReturnType = new TypeToken<Searchaccounts1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search all accounts (asynchronously)
     * 
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call searchallaccountsAsync(String contentType, String accept, final ApiCallback<Searchaccounts1> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchallaccountsValidateBeforeCall(contentType, accept, _callback);
        Type localVarReturnType = new TypeToken<Searchaccounts1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateemailanddescriptionofaaccount
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param updateemailanddescriptionofaaccountRequest1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateemailanddescriptionofaaccountCall(String creditAccountId, String accept, String contentType, UpdateemailanddescriptionofaaccountRequest1 updateemailanddescriptionofaaccountRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateemailanddescriptionofaaccountRequest1;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{creditAccountId}"
            .replace("{" + "creditAccountId" + "}", localVarApiClient.escapeString(creditAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateemailanddescriptionofaaccountValidateBeforeCall(String creditAccountId, String accept, String contentType, UpdateemailanddescriptionofaaccountRequest1 updateemailanddescriptionofaaccountRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditAccountId' is set
        if (creditAccountId == null) {
            throw new ApiException("Missing the required parameter 'creditAccountId' when calling updateemailanddescriptionofaaccount(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updateemailanddescriptionofaaccount(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateemailanddescriptionofaaccount(Async)");
        }

        // verify the required parameter 'updateemailanddescriptionofaaccountRequest1' is set
        if (updateemailanddescriptionofaaccountRequest1 == null) {
            throw new ApiException("Missing the required parameter 'updateemailanddescriptionofaaccountRequest1' when calling updateemailanddescriptionofaaccount(Async)");
        }

        return updateemailanddescriptionofaaccountCall(creditAccountId, accept, contentType, updateemailanddescriptionofaaccountRequest1, _callback);

    }

    /**
     * Update email and description of a account
     * Update a checking account.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param updateemailanddescriptionofaaccountRequest1  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public String updateemailanddescriptionofaaccount(String creditAccountId, String accept, String contentType, UpdateemailanddescriptionofaaccountRequest1 updateemailanddescriptionofaaccountRequest1) throws ApiException {
        ApiResponse<String> localVarResp = updateemailanddescriptionofaaccountWithHttpInfo(creditAccountId, accept, contentType, updateemailanddescriptionofaaccountRequest1);
        return localVarResp.getData();
    }

    /**
     * Update email and description of a account
     * Update a checking account.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param updateemailanddescriptionofaaccountRequest1  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<String> updateemailanddescriptionofaaccountWithHttpInfo(String creditAccountId, String accept, String contentType, UpdateemailanddescriptionofaaccountRequest1 updateemailanddescriptionofaaccountRequest1) throws ApiException {
        okhttp3.Call localVarCall = updateemailanddescriptionofaaccountValidateBeforeCall(creditAccountId, accept, contentType, updateemailanddescriptionofaaccountRequest1, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update email and description of a account (asynchronously)
     * Update a checking account.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param updateemailanddescriptionofaaccountRequest1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateemailanddescriptionofaaccountAsync(String creditAccountId, String accept, String contentType, UpdateemailanddescriptionofaaccountRequest1 updateemailanddescriptionofaaccountRequest1, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateemailanddescriptionofaaccountValidateBeforeCall(creditAccountId, accept, contentType, updateemailanddescriptionofaaccountRequest1, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
