/*
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateorchangestoreconfigurationRequest1;
import org.openapitools.client.model.Savestoreconfig1;
import org.openapitools.client.model.Storeconfig1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StoreConfigurationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StoreConfigurationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StoreConfigurationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createorchangestoreconfiguration
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param createorchangestoreconfigurationRequest1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createorchangestoreconfigurationCall(String accept, String contentType, CreateorchangestoreconfigurationRequest1 createorchangestoreconfigurationRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createorchangestoreconfigurationRequest1;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/storeconfig";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createorchangestoreconfigurationValidateBeforeCall(String accept, String contentType, CreateorchangestoreconfigurationRequest1 createorchangestoreconfigurationRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createorchangestoreconfiguration(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createorchangestoreconfiguration(Async)");
        }

        // verify the required parameter 'createorchangestoreconfigurationRequest1' is set
        if (createorchangestoreconfigurationRequest1 == null) {
            throw new ApiException("Missing the required parameter 'createorchangestoreconfigurationRequest1' when calling createorchangestoreconfiguration(Async)");
        }

        return createorchangestoreconfigurationCall(accept, contentType, createorchangestoreconfigurationRequest1, _callback);

    }

    /**
     * Create or change store configuration
     * Create or change store configuration data.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param createorchangestoreconfigurationRequest1  (required)
     * @return Savestoreconfig1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public Savestoreconfig1 createorchangestoreconfiguration(String accept, String contentType, CreateorchangestoreconfigurationRequest1 createorchangestoreconfigurationRequest1) throws ApiException {
        ApiResponse<Savestoreconfig1> localVarResp = createorchangestoreconfigurationWithHttpInfo(accept, contentType, createorchangestoreconfigurationRequest1);
        return localVarResp.getData();
    }

    /**
     * Create or change store configuration
     * Create or change store configuration data.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param createorchangestoreconfigurationRequest1  (required)
     * @return ApiResponse&lt;Savestoreconfig1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Savestoreconfig1> createorchangestoreconfigurationWithHttpInfo(String accept, String contentType, CreateorchangestoreconfigurationRequest1 createorchangestoreconfigurationRequest1) throws ApiException {
        okhttp3.Call localVarCall = createorchangestoreconfigurationValidateBeforeCall(accept, contentType, createorchangestoreconfigurationRequest1, null);
        Type localVarReturnType = new TypeToken<Savestoreconfig1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or change store configuration (asynchronously)
     * Create or change store configuration data.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param createorchangestoreconfigurationRequest1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createorchangestoreconfigurationAsync(String accept, String contentType, CreateorchangestoreconfigurationRequest1 createorchangestoreconfigurationRequest1, final ApiCallback<Savestoreconfig1> _callback) throws ApiException {

        okhttp3.Call localVarCall = createorchangestoreconfigurationValidateBeforeCall(accept, contentType, createorchangestoreconfigurationRequest1, _callback);
        Type localVarReturnType = new TypeToken<Savestoreconfig1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrievestoreconfiguration
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrievestoreconfigurationCall(String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/storeconfig";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrievestoreconfigurationValidateBeforeCall(String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling retrievestoreconfiguration(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling retrievestoreconfiguration(Async)");
        }

        return retrievestoreconfigurationCall(contentType, accept, _callback);

    }

    /**
     * Retrieve store configuration
     * Get store configuration data.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @return Storeconfig1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public Storeconfig1 retrievestoreconfiguration(String contentType, String accept) throws ApiException {
        ApiResponse<Storeconfig1> localVarResp = retrievestoreconfigurationWithHttpInfo(contentType, accept);
        return localVarResp.getData();
    }

    /**
     * Retrieve store configuration
     * Get store configuration data.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @return ApiResponse&lt;Storeconfig1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Storeconfig1> retrievestoreconfigurationWithHttpInfo(String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = retrievestoreconfigurationValidateBeforeCall(contentType, accept, null);
        Type localVarReturnType = new TypeToken<Storeconfig1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve store configuration (asynchronously)
     * Get store configuration data.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrievestoreconfigurationAsync(String contentType, String accept, final ApiCallback<Storeconfig1> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrievestoreconfigurationValidateBeforeCall(contentType, accept, _callback);
        Type localVarReturnType = new TypeToken<Storeconfig1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
