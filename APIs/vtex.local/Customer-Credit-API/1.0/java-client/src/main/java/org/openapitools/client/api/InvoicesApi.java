/*
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.ChangeInvoiceRequest1;
import org.openapitools.client.model.Getinvoicesfromacheckingaccount1;
import org.openapitools.client.model.MarkaninvoiceasPaidRequest1;
import org.openapitools.client.model.Paidinvoices1;
import org.openapitools.client.model.PostponeaninvoiceRequest1;
import org.openapitools.client.model.Retrievedinvoice1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InvoicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvoicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InvoicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelInvoice
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param invoiceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Access-Control-Allow-Origin -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call cancelInvoiceCall(String contentType, String accept, String creditAccountId, String invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{creditAccountId}/invoices/{invoiceId}"
            .replace("{" + "creditAccountId" + "}", localVarApiClient.escapeString(creditAccountId.toString()))
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelInvoiceValidateBeforeCall(String contentType, String accept, String creditAccountId, String invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling cancelInvoice(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling cancelInvoice(Async)");
        }

        // verify the required parameter 'creditAccountId' is set
        if (creditAccountId == null) {
            throw new ApiException("Missing the required parameter 'creditAccountId' when calling cancelInvoice(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling cancelInvoice(Async)");
        }

        return cancelInvoiceCall(contentType, accept, creditAccountId, invoiceId, _callback);

    }

    /**
     * Cancel Invoice
     * Changes invoice&#39;s status from ancells invoice by specified Id.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param invoiceId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Access-Control-Allow-Origin -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public Object cancelInvoice(String contentType, String accept, String creditAccountId, String invoiceId) throws ApiException {
        ApiResponse<Object> localVarResp = cancelInvoiceWithHttpInfo(contentType, accept, creditAccountId, invoiceId);
        return localVarResp.getData();
    }

    /**
     * Cancel Invoice
     * Changes invoice&#39;s status from ancells invoice by specified Id.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param invoiceId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Access-Control-Allow-Origin -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> cancelInvoiceWithHttpInfo(String contentType, String accept, String creditAccountId, String invoiceId) throws ApiException {
        okhttp3.Call localVarCall = cancelInvoiceValidateBeforeCall(contentType, accept, creditAccountId, invoiceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel Invoice (asynchronously)
     * Changes invoice&#39;s status from ancells invoice by specified Id.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param invoiceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Access-Control-Allow-Origin -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call cancelInvoiceAsync(String contentType, String accept, String creditAccountId, String invoiceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelInvoiceValidateBeforeCall(contentType, accept, creditAccountId, invoiceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeInvoice
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param invoiceId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param changeInvoiceRequest1  (required)
     * @param friendlyId Invoice&#39;s identification (optional, default to insert identifier here)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Access-Control-Allow-Origin -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call changeInvoiceCall(String creditAccountId, String invoiceId, String accept, String contentType, ChangeInvoiceRequest1 changeInvoiceRequest1, String friendlyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeInvoiceRequest1;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{creditAccountId}/invoices/{invoiceId}"
            .replace("{" + "creditAccountId" + "}", localVarApiClient.escapeString(creditAccountId.toString()))
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (friendlyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("friendlyId", friendlyId));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeInvoiceValidateBeforeCall(String creditAccountId, String invoiceId, String accept, String contentType, ChangeInvoiceRequest1 changeInvoiceRequest1, String friendlyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditAccountId' is set
        if (creditAccountId == null) {
            throw new ApiException("Missing the required parameter 'creditAccountId' when calling changeInvoice(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling changeInvoice(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling changeInvoice(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling changeInvoice(Async)");
        }

        // verify the required parameter 'changeInvoiceRequest1' is set
        if (changeInvoiceRequest1 == null) {
            throw new ApiException("Missing the required parameter 'changeInvoiceRequest1' when calling changeInvoice(Async)");
        }

        return changeInvoiceCall(creditAccountId, invoiceId, accept, contentType, changeInvoiceRequest1, friendlyId, _callback);

    }

    /**
     * Change Invoice
     * Updates invoice&#39;s attributes &#x60;status&#x60;, &#x60;paymentLink&#x60; and &#x60;observation&#x60;.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param invoiceId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param changeInvoiceRequest1  (required)
     * @param friendlyId Invoice&#39;s identification (optional, default to insert identifier here)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Access-Control-Allow-Origin -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public Object changeInvoice(String creditAccountId, String invoiceId, String accept, String contentType, ChangeInvoiceRequest1 changeInvoiceRequest1, String friendlyId) throws ApiException {
        ApiResponse<Object> localVarResp = changeInvoiceWithHttpInfo(creditAccountId, invoiceId, accept, contentType, changeInvoiceRequest1, friendlyId);
        return localVarResp.getData();
    }

    /**
     * Change Invoice
     * Updates invoice&#39;s attributes &#x60;status&#x60;, &#x60;paymentLink&#x60; and &#x60;observation&#x60;.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param invoiceId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param changeInvoiceRequest1  (required)
     * @param friendlyId Invoice&#39;s identification (optional, default to insert identifier here)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Access-Control-Allow-Origin -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> changeInvoiceWithHttpInfo(String creditAccountId, String invoiceId, String accept, String contentType, ChangeInvoiceRequest1 changeInvoiceRequest1, String friendlyId) throws ApiException {
        okhttp3.Call localVarCall = changeInvoiceValidateBeforeCall(creditAccountId, invoiceId, accept, contentType, changeInvoiceRequest1, friendlyId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Invoice (asynchronously)
     * Updates invoice&#39;s attributes &#x60;status&#x60;, &#x60;paymentLink&#x60; and &#x60;observation&#x60;.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param invoiceId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param changeInvoiceRequest1  (required)
     * @param friendlyId Invoice&#39;s identification (optional, default to insert identifier here)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Access-Control-Allow-Origin -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call changeInvoiceAsync(String creditAccountId, String invoiceId, String accept, String contentType, ChangeInvoiceRequest1 changeInvoiceRequest1, String friendlyId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeInvoiceValidateBeforeCall(creditAccountId, invoiceId, accept, contentType, changeInvoiceRequest1, friendlyId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for markaninvoiceasPaid
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param invoiceId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param markaninvoiceasPaidRequest1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Access-Control-Allow-Origin -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call markaninvoiceasPaidCall(String creditAccountId, String invoiceId, String accept, String contentType, MarkaninvoiceasPaidRequest1 markaninvoiceasPaidRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = markaninvoiceasPaidRequest1;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{creditAccountId}/invoices/{invoiceId}/payments"
            .replace("{" + "creditAccountId" + "}", localVarApiClient.escapeString(creditAccountId.toString()))
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markaninvoiceasPaidValidateBeforeCall(String creditAccountId, String invoiceId, String accept, String contentType, MarkaninvoiceasPaidRequest1 markaninvoiceasPaidRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditAccountId' is set
        if (creditAccountId == null) {
            throw new ApiException("Missing the required parameter 'creditAccountId' when calling markaninvoiceasPaid(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling markaninvoiceasPaid(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling markaninvoiceasPaid(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling markaninvoiceasPaid(Async)");
        }

        // verify the required parameter 'markaninvoiceasPaidRequest1' is set
        if (markaninvoiceasPaidRequest1 == null) {
            throw new ApiException("Missing the required parameter 'markaninvoiceasPaidRequest1' when calling markaninvoiceasPaid(Async)");
        }

        return markaninvoiceasPaidCall(creditAccountId, invoiceId, accept, contentType, markaninvoiceasPaidRequest1, _callback);

    }

    /**
     * Mark an invoice as Paid
     * Pay an invoice.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param invoiceId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param markaninvoiceasPaidRequest1  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Access-Control-Allow-Origin -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public String markaninvoiceasPaid(String creditAccountId, String invoiceId, String accept, String contentType, MarkaninvoiceasPaidRequest1 markaninvoiceasPaidRequest1) throws ApiException {
        ApiResponse<String> localVarResp = markaninvoiceasPaidWithHttpInfo(creditAccountId, invoiceId, accept, contentType, markaninvoiceasPaidRequest1);
        return localVarResp.getData();
    }

    /**
     * Mark an invoice as Paid
     * Pay an invoice.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param invoiceId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param markaninvoiceasPaidRequest1  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Access-Control-Allow-Origin -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<String> markaninvoiceasPaidWithHttpInfo(String creditAccountId, String invoiceId, String accept, String contentType, MarkaninvoiceasPaidRequest1 markaninvoiceasPaidRequest1) throws ApiException {
        okhttp3.Call localVarCall = markaninvoiceasPaidValidateBeforeCall(creditAccountId, invoiceId, accept, contentType, markaninvoiceasPaidRequest1, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark an invoice as Paid (asynchronously)
     * Pay an invoice.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param invoiceId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param markaninvoiceasPaidRequest1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Access-Control-Allow-Origin -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call markaninvoiceasPaidAsync(String creditAccountId, String invoiceId, String accept, String contentType, MarkaninvoiceasPaidRequest1 markaninvoiceasPaidRequest1, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = markaninvoiceasPaidValidateBeforeCall(creditAccountId, invoiceId, accept, contentType, markaninvoiceasPaidRequest1, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postponeaninvoice
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param invoiceId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param postponeaninvoiceRequest1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Access-Control-Allow-Origin -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call postponeaninvoiceCall(String creditAccountId, String invoiceId, String accept, String contentType, PostponeaninvoiceRequest1 postponeaninvoiceRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postponeaninvoiceRequest1;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{creditAccountId}/invoices/{invoiceId}/postponement"
            .replace("{" + "creditAccountId" + "}", localVarApiClient.escapeString(creditAccountId.toString()))
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postponeaninvoiceValidateBeforeCall(String creditAccountId, String invoiceId, String accept, String contentType, PostponeaninvoiceRequest1 postponeaninvoiceRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditAccountId' is set
        if (creditAccountId == null) {
            throw new ApiException("Missing the required parameter 'creditAccountId' when calling postponeaninvoice(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling postponeaninvoice(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling postponeaninvoice(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling postponeaninvoice(Async)");
        }

        // verify the required parameter 'postponeaninvoiceRequest1' is set
        if (postponeaninvoiceRequest1 == null) {
            throw new ApiException("Missing the required parameter 'postponeaninvoiceRequest1' when calling postponeaninvoice(Async)");
        }

        return postponeaninvoiceCall(creditAccountId, invoiceId, accept, contentType, postponeaninvoiceRequest1, _callback);

    }

    /**
     * Postpone an invoice
     * Postpone an invoice.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param invoiceId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param postponeaninvoiceRequest1  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Access-Control-Allow-Origin -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public Object postponeaninvoice(String creditAccountId, String invoiceId, String accept, String contentType, PostponeaninvoiceRequest1 postponeaninvoiceRequest1) throws ApiException {
        ApiResponse<Object> localVarResp = postponeaninvoiceWithHttpInfo(creditAccountId, invoiceId, accept, contentType, postponeaninvoiceRequest1);
        return localVarResp.getData();
    }

    /**
     * Postpone an invoice
     * Postpone an invoice.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param invoiceId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param postponeaninvoiceRequest1  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Access-Control-Allow-Origin -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Object> postponeaninvoiceWithHttpInfo(String creditAccountId, String invoiceId, String accept, String contentType, PostponeaninvoiceRequest1 postponeaninvoiceRequest1) throws ApiException {
        okhttp3.Call localVarCall = postponeaninvoiceValidateBeforeCall(creditAccountId, invoiceId, accept, contentType, postponeaninvoiceRequest1, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Postpone an invoice (asynchronously)
     * Postpone an invoice.
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param invoiceId  (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param postponeaninvoiceRequest1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Access-Control-Allow-Origin -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-Translate -  <br>  * X-Translate-BackEnd -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call postponeaninvoiceAsync(String creditAccountId, String invoiceId, String accept, String contentType, PostponeaninvoiceRequest1 postponeaninvoiceRequest1, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = postponeaninvoiceValidateBeforeCall(creditAccountId, invoiceId, accept, contentType, postponeaninvoiceRequest1, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveInvoicebyId
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param invoiceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveInvoicebyIdCall(String contentType, String accept, String creditAccountId, String invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{creditAccountId}/invoices/{invoiceId}"
            .replace("{" + "creditAccountId" + "}", localVarApiClient.escapeString(creditAccountId.toString()))
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveInvoicebyIdValidateBeforeCall(String contentType, String accept, String creditAccountId, String invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling retrieveInvoicebyId(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling retrieveInvoicebyId(Async)");
        }

        // verify the required parameter 'creditAccountId' is set
        if (creditAccountId == null) {
            throw new ApiException("Missing the required parameter 'creditAccountId' when calling retrieveInvoicebyId(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling retrieveInvoicebyId(Async)");
        }

        return retrieveInvoicebyIdCall(contentType, accept, creditAccountId, invoiceId, _callback);

    }

    /**
     * Retrieve Invoice by Id
     * Returns associated data for the specified Invoice Id, like status  and value, for example.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param invoiceId  (required)
     * @return Retrievedinvoice1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public Retrievedinvoice1 retrieveInvoicebyId(String contentType, String accept, String creditAccountId, String invoiceId) throws ApiException {
        ApiResponse<Retrievedinvoice1> localVarResp = retrieveInvoicebyIdWithHttpInfo(contentType, accept, creditAccountId, invoiceId);
        return localVarResp.getData();
    }

    /**
     * Retrieve Invoice by Id
     * Returns associated data for the specified Invoice Id, like status  and value, for example.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param invoiceId  (required)
     * @return ApiResponse&lt;Retrievedinvoice1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Retrievedinvoice1> retrieveInvoicebyIdWithHttpInfo(String contentType, String accept, String creditAccountId, String invoiceId) throws ApiException {
        okhttp3.Call localVarCall = retrieveInvoicebyIdValidateBeforeCall(contentType, accept, creditAccountId, invoiceId, null);
        Type localVarReturnType = new TypeToken<Retrievedinvoice1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Invoice by Id (asynchronously)
     * Returns associated data for the specified Invoice Id, like status  and value, for example.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId Credit account&#39;s identification (required)
     * @param invoiceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveInvoicebyIdAsync(String contentType, String accept, String creditAccountId, String invoiceId, final ApiCallback<Retrievedinvoice1> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveInvoicebyIdValidateBeforeCall(contentType, accept, creditAccountId, invoiceId, _callback);
        Type localVarReturnType = new TypeToken<Retrievedinvoice1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchallinvoices
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param from  (optional, default to )
     * @param to  (optional, default to )
     * @param createdDateFrom  (optional)
     * @param createdDateTo  (optional)
     * @param value Invoice&#39;s value. It must be completed with a decimal value. (optional)
     * @param status Invoice&#39;s status. It must be completed with \&quot;Paid\&quot;, \&quot;Cancelled\&quot; or \&quot;Open\&quot; value. (optional, default to Paid)
     * @param friendlyId Invoice&#39;s identifier (optional, default to insert identifier here)
     * @param creditAccountId Credit account&#39;s identifier (optional, default to B75F0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call searchallinvoicesCall(String contentType, String accept, String from, String to, String createdDateFrom, String createdDateTo, BigDecimal value, String status, String friendlyId, String creditAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (createdDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateFrom", createdDateFrom));
        }

        if (createdDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdDateTo", createdDateTo));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (friendlyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("friendlyId", friendlyId));
        }

        if (creditAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("creditAccountId", creditAccountId));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchallinvoicesValidateBeforeCall(String contentType, String accept, String from, String to, String createdDateFrom, String createdDateTo, BigDecimal value, String status, String friendlyId, String creditAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling searchallinvoices(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling searchallinvoices(Async)");
        }

        return searchallinvoicesCall(contentType, accept, from, to, createdDateFrom, createdDateTo, value, status, friendlyId, creditAccountId, _callback);

    }

    /**
     * Search all invoices
     * Returns all invoices according to the informed query params in the request.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param from  (optional, default to )
     * @param to  (optional, default to )
     * @param createdDateFrom  (optional)
     * @param createdDateTo  (optional)
     * @param value Invoice&#39;s value. It must be completed with a decimal value. (optional)
     * @param status Invoice&#39;s status. It must be completed with \&quot;Paid\&quot;, \&quot;Cancelled\&quot; or \&quot;Open\&quot; value. (optional, default to Paid)
     * @param friendlyId Invoice&#39;s identifier (optional, default to insert identifier here)
     * @param creditAccountId Credit account&#39;s identifier (optional, default to B75F0)
     * @return Paidinvoices1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public Paidinvoices1 searchallinvoices(String contentType, String accept, String from, String to, String createdDateFrom, String createdDateTo, BigDecimal value, String status, String friendlyId, String creditAccountId) throws ApiException {
        ApiResponse<Paidinvoices1> localVarResp = searchallinvoicesWithHttpInfo(contentType, accept, from, to, createdDateFrom, createdDateTo, value, status, friendlyId, creditAccountId);
        return localVarResp.getData();
    }

    /**
     * Search all invoices
     * Returns all invoices according to the informed query params in the request.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param from  (optional, default to )
     * @param to  (optional, default to )
     * @param createdDateFrom  (optional)
     * @param createdDateTo  (optional)
     * @param value Invoice&#39;s value. It must be completed with a decimal value. (optional)
     * @param status Invoice&#39;s status. It must be completed with \&quot;Paid\&quot;, \&quot;Cancelled\&quot; or \&quot;Open\&quot; value. (optional, default to Paid)
     * @param friendlyId Invoice&#39;s identifier (optional, default to insert identifier here)
     * @param creditAccountId Credit account&#39;s identifier (optional, default to B75F0)
     * @return ApiResponse&lt;Paidinvoices1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Paidinvoices1> searchallinvoicesWithHttpInfo(String contentType, String accept, String from, String to, String createdDateFrom, String createdDateTo, BigDecimal value, String status, String friendlyId, String creditAccountId) throws ApiException {
        okhttp3.Call localVarCall = searchallinvoicesValidateBeforeCall(contentType, accept, from, to, createdDateFrom, createdDateTo, value, status, friendlyId, creditAccountId, null);
        Type localVarReturnType = new TypeToken<Paidinvoices1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search all invoices (asynchronously)
     * Returns all invoices according to the informed query params in the request.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param from  (optional, default to )
     * @param to  (optional, default to )
     * @param createdDateFrom  (optional)
     * @param createdDateTo  (optional)
     * @param value Invoice&#39;s value. It must be completed with a decimal value. (optional)
     * @param status Invoice&#39;s status. It must be completed with \&quot;Paid\&quot;, \&quot;Cancelled\&quot; or \&quot;Open\&quot; value. (optional, default to Paid)
     * @param friendlyId Invoice&#39;s identifier (optional, default to insert identifier here)
     * @param creditAccountId Credit account&#39;s identifier (optional, default to B75F0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call searchallinvoicesAsync(String contentType, String accept, String from, String to, String createdDateFrom, String createdDateTo, BigDecimal value, String status, String friendlyId, String creditAccountId, final ApiCallback<Paidinvoices1> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchallinvoicesValidateBeforeCall(contentType, accept, from, to, createdDateFrom, createdDateTo, value, status, friendlyId, creditAccountId, _callback);
        Type localVarReturnType = new TypeToken<Paidinvoices1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchallinvoicesofaAccount
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call searchallinvoicesofaAccountCall(String contentType, String accept, String creditAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/creditcontrol/accounts/{creditAccountId}/invoices"
            .replace("{" + "creditAccountId" + "}", localVarApiClient.escapeString(creditAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchallinvoicesofaAccountValidateBeforeCall(String contentType, String accept, String creditAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling searchallinvoicesofaAccount(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling searchallinvoicesofaAccount(Async)");
        }

        // verify the required parameter 'creditAccountId' is set
        if (creditAccountId == null) {
            throw new ApiException("Missing the required parameter 'creditAccountId' when calling searchallinvoicesofaAccount(Async)");
        }

        return searchallinvoicesofaAccountCall(contentType, accept, creditAccountId, _callback);

    }

    /**
     * Retrieve invoice by creditAccountId
     * Returns associated invoices by specified creditAccountId, the param that identifies a client in VTEX&#39;s system.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId  (required)
     * @return Getinvoicesfromacheckingaccount1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public Getinvoicesfromacheckingaccount1 searchallinvoicesofaAccount(String contentType, String accept, String creditAccountId) throws ApiException {
        ApiResponse<Getinvoicesfromacheckingaccount1> localVarResp = searchallinvoicesofaAccountWithHttpInfo(contentType, accept, creditAccountId);
        return localVarResp.getData();
    }

    /**
     * Retrieve invoice by creditAccountId
     * Returns associated invoices by specified creditAccountId, the param that identifies a client in VTEX&#39;s system.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId  (required)
     * @return ApiResponse&lt;Getinvoicesfromacheckingaccount1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Getinvoicesfromacheckingaccount1> searchallinvoicesofaAccountWithHttpInfo(String contentType, String accept, String creditAccountId) throws ApiException {
        okhttp3.Call localVarCall = searchallinvoicesofaAccountValidateBeforeCall(contentType, accept, creditAccountId, null);
        Type localVarReturnType = new TypeToken<Getinvoicesfromacheckingaccount1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve invoice by creditAccountId (asynchronously)
     * Returns associated invoices by specified creditAccountId, the param that identifies a client in VTEX&#39;s system.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param creditAccountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call searchallinvoicesofaAccountAsync(String contentType, String accept, String creditAccountId, final ApiCallback<Getinvoicesfromacheckingaccount1> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchallinvoicesofaAccountValidateBeforeCall(contentType, accept, creditAccountId, _callback);
        Type localVarReturnType = new TypeToken<Getinvoicesfromacheckingaccount1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
