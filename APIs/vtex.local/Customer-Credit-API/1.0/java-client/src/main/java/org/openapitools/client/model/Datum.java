/*
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Datum
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:41.771522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Datum {
  public static final String SERIALIZED_NAME_CHECKING_ACCOUNT_ID = "checkingAccountId";
  @SerializedName(SERIALIZED_NAME_CHECKING_ACCOUNT_ID)
  private String checkingAccountId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private String dueDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_OBSERVATION = "observation";
  @SerializedName(SERIALIZED_NAME_OBSERVATION)
  private String observation;

  public static final String SERIALIZED_NAME_ORIGINAL_DUE_DATE = "originalDueDate";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_DUE_DATE)
  private String originalDueDate;

  public static final String SERIALIZED_NAME_PAYMENT_LINK = "paymentLink";
  @SerializedName(SERIALIZED_NAME_PAYMENT_LINK)
  private String paymentLink;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private BigDecimal value;

  public Datum() {
  }

  public Datum checkingAccountId(String checkingAccountId) {
    this.checkingAccountId = checkingAccountId;
    return this;
  }

  /**
   * Get checkingAccountId
   * @return checkingAccountId
   */
  @javax.annotation.Nonnull
  public String getCheckingAccountId() {
    return checkingAccountId;
  }

  public void setCheckingAccountId(String checkingAccountId) {
    this.checkingAccountId = checkingAccountId;
  }


  public Datum createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Datum description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Datum dueDate(String dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * Get dueDate
   * @return dueDate
   */
  @javax.annotation.Nonnull
  public String getDueDate() {
    return dueDate;
  }

  public void setDueDate(String dueDate) {
    this.dueDate = dueDate;
  }


  public Datum id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Datum observation(String observation) {
    this.observation = observation;
    return this;
  }

  /**
   * Get observation
   * @return observation
   */
  @javax.annotation.Nullable
  public String getObservation() {
    return observation;
  }

  public void setObservation(String observation) {
    this.observation = observation;
  }


  public Datum originalDueDate(String originalDueDate) {
    this.originalDueDate = originalDueDate;
    return this;
  }

  /**
   * Get originalDueDate
   * @return originalDueDate
   */
  @javax.annotation.Nonnull
  public String getOriginalDueDate() {
    return originalDueDate;
  }

  public void setOriginalDueDate(String originalDueDate) {
    this.originalDueDate = originalDueDate;
  }


  public Datum paymentLink(String paymentLink) {
    this.paymentLink = paymentLink;
    return this;
  }

  /**
   * Get paymentLink
   * @return paymentLink
   */
  @javax.annotation.Nullable
  public String getPaymentLink() {
    return paymentLink;
  }

  public void setPaymentLink(String paymentLink) {
    this.paymentLink = paymentLink;
  }


  public Datum status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Datum updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Datum value(BigDecimal value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nonnull
  public BigDecimal getValue() {
    return value;
  }

  public void setValue(BigDecimal value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Datum datum = (Datum) o;
    return Objects.equals(this.checkingAccountId, datum.checkingAccountId) &&
        Objects.equals(this.createdAt, datum.createdAt) &&
        Objects.equals(this.description, datum.description) &&
        Objects.equals(this.dueDate, datum.dueDate) &&
        Objects.equals(this.id, datum.id) &&
        Objects.equals(this.observation, datum.observation) &&
        Objects.equals(this.originalDueDate, datum.originalDueDate) &&
        Objects.equals(this.paymentLink, datum.paymentLink) &&
        Objects.equals(this.status, datum.status) &&
        Objects.equals(this.updatedAt, datum.updatedAt) &&
        Objects.equals(this.value, datum.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkingAccountId, createdAt, description, dueDate, id, observation, originalDueDate, paymentLink, status, updatedAt, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Datum {\n");
    sb.append("    checkingAccountId: ").append(toIndentedString(checkingAccountId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    observation: ").append(toIndentedString(observation)).append("\n");
    sb.append("    originalDueDate: ").append(toIndentedString(originalDueDate)).append("\n");
    sb.append("    paymentLink: ").append(toIndentedString(paymentLink)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checkingAccountId");
    openapiFields.add("createdAt");
    openapiFields.add("description");
    openapiFields.add("dueDate");
    openapiFields.add("id");
    openapiFields.add("observation");
    openapiFields.add("originalDueDate");
    openapiFields.add("paymentLink");
    openapiFields.add("status");
    openapiFields.add("updatedAt");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("checkingAccountId");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("dueDate");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("observation");
    openapiRequiredFields.add("originalDueDate");
    openapiRequiredFields.add("paymentLink");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("updatedAt");
    openapiRequiredFields.add("value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Datum
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Datum.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Datum is not found in the empty JSON string", Datum.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Datum.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Datum` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Datum.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("checkingAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkingAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkingAccountId").toString()));
      }
      if (!jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("dueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dueDate").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("observation") != null && !jsonObj.get("observation").isJsonNull()) && !jsonObj.get("observation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `observation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("observation").toString()));
      }
      if (!jsonObj.get("originalDueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalDueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalDueDate").toString()));
      }
      if ((jsonObj.get("paymentLink") != null && !jsonObj.get("paymentLink").isJsonNull()) && !jsonObj.get("paymentLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentLink").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("updatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Datum.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Datum' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Datum> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Datum.class));

       return (TypeAdapter<T>) new TypeAdapter<Datum>() {
           @Override
           public void write(JsonWriter out, Datum value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Datum read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Datum given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Datum
   * @throws IOException if the JSON string is invalid with respect to Datum
   */
  public static Datum fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Datum.class);
  }

  /**
   * Convert an instance of Datum to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

