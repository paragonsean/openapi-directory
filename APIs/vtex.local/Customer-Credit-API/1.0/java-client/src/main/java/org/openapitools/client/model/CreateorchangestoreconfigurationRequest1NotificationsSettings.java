/*
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateorchangestoreconfigurationRequest1NotificationsSettingsDaysAfterInner;
import org.openapitools.client.model.CreateorchangestoreconfigurationRequest1NotificationsSettingsDaysPriorInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateorchangestoreconfigurationRequest1NotificationsSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:41.771522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateorchangestoreconfigurationRequest1NotificationsSettings {
  public static final String SERIALIZED_NAME_DAYS_AFTER = "daysAfter";
  @SerializedName(SERIALIZED_NAME_DAYS_AFTER)
  private List<CreateorchangestoreconfigurationRequest1NotificationsSettingsDaysAfterInner> daysAfter = new ArrayList<>();

  public static final String SERIALIZED_NAME_DAYS_PRIOR = "daysPrior";
  @SerializedName(SERIALIZED_NAME_DAYS_PRIOR)
  private List<CreateorchangestoreconfigurationRequest1NotificationsSettingsDaysPriorInner> daysPrior = new ArrayList<>();

  public CreateorchangestoreconfigurationRequest1NotificationsSettings() {
  }

  public CreateorchangestoreconfigurationRequest1NotificationsSettings daysAfter(List<CreateorchangestoreconfigurationRequest1NotificationsSettingsDaysAfterInner> daysAfter) {
    this.daysAfter = daysAfter;
    return this;
  }

  public CreateorchangestoreconfigurationRequest1NotificationsSettings addDaysAfterItem(CreateorchangestoreconfigurationRequest1NotificationsSettingsDaysAfterInner daysAfterItem) {
    if (this.daysAfter == null) {
      this.daysAfter = new ArrayList<>();
    }
    this.daysAfter.add(daysAfterItem);
    return this;
  }

  /**
   * Get daysAfter
   * @return daysAfter
   */
  @javax.annotation.Nullable
  public List<CreateorchangestoreconfigurationRequest1NotificationsSettingsDaysAfterInner> getDaysAfter() {
    return daysAfter;
  }

  public void setDaysAfter(List<CreateorchangestoreconfigurationRequest1NotificationsSettingsDaysAfterInner> daysAfter) {
    this.daysAfter = daysAfter;
  }


  public CreateorchangestoreconfigurationRequest1NotificationsSettings daysPrior(List<CreateorchangestoreconfigurationRequest1NotificationsSettingsDaysPriorInner> daysPrior) {
    this.daysPrior = daysPrior;
    return this;
  }

  public CreateorchangestoreconfigurationRequest1NotificationsSettings addDaysPriorItem(CreateorchangestoreconfigurationRequest1NotificationsSettingsDaysPriorInner daysPriorItem) {
    if (this.daysPrior == null) {
      this.daysPrior = new ArrayList<>();
    }
    this.daysPrior.add(daysPriorItem);
    return this;
  }

  /**
   * Get daysPrior
   * @return daysPrior
   */
  @javax.annotation.Nullable
  public List<CreateorchangestoreconfigurationRequest1NotificationsSettingsDaysPriorInner> getDaysPrior() {
    return daysPrior;
  }

  public void setDaysPrior(List<CreateorchangestoreconfigurationRequest1NotificationsSettingsDaysPriorInner> daysPrior) {
    this.daysPrior = daysPrior;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateorchangestoreconfigurationRequest1NotificationsSettings createorchangestoreconfigurationRequest1NotificationsSettings = (CreateorchangestoreconfigurationRequest1NotificationsSettings) o;
    return Objects.equals(this.daysAfter, createorchangestoreconfigurationRequest1NotificationsSettings.daysAfter) &&
        Objects.equals(this.daysPrior, createorchangestoreconfigurationRequest1NotificationsSettings.daysPrior);
  }

  @Override
  public int hashCode() {
    return Objects.hash(daysAfter, daysPrior);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateorchangestoreconfigurationRequest1NotificationsSettings {\n");
    sb.append("    daysAfter: ").append(toIndentedString(daysAfter)).append("\n");
    sb.append("    daysPrior: ").append(toIndentedString(daysPrior)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("daysAfter");
    openapiFields.add("daysPrior");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateorchangestoreconfigurationRequest1NotificationsSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateorchangestoreconfigurationRequest1NotificationsSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateorchangestoreconfigurationRequest1NotificationsSettings is not found in the empty JSON string", CreateorchangestoreconfigurationRequest1NotificationsSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateorchangestoreconfigurationRequest1NotificationsSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateorchangestoreconfigurationRequest1NotificationsSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("daysAfter") != null && !jsonObj.get("daysAfter").isJsonNull()) {
        JsonArray jsonArraydaysAfter = jsonObj.getAsJsonArray("daysAfter");
        if (jsonArraydaysAfter != null) {
          // ensure the json data is an array
          if (!jsonObj.get("daysAfter").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `daysAfter` to be an array in the JSON string but got `%s`", jsonObj.get("daysAfter").toString()));
          }

          // validate the optional field `daysAfter` (array)
          for (int i = 0; i < jsonArraydaysAfter.size(); i++) {
            CreateorchangestoreconfigurationRequest1NotificationsSettingsDaysAfterInner.validateJsonElement(jsonArraydaysAfter.get(i));
          };
        }
      }
      if (jsonObj.get("daysPrior") != null && !jsonObj.get("daysPrior").isJsonNull()) {
        JsonArray jsonArraydaysPrior = jsonObj.getAsJsonArray("daysPrior");
        if (jsonArraydaysPrior != null) {
          // ensure the json data is an array
          if (!jsonObj.get("daysPrior").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `daysPrior` to be an array in the JSON string but got `%s`", jsonObj.get("daysPrior").toString()));
          }

          // validate the optional field `daysPrior` (array)
          for (int i = 0; i < jsonArraydaysPrior.size(); i++) {
            CreateorchangestoreconfigurationRequest1NotificationsSettingsDaysPriorInner.validateJsonElement(jsonArraydaysPrior.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateorchangestoreconfigurationRequest1NotificationsSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateorchangestoreconfigurationRequest1NotificationsSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateorchangestoreconfigurationRequest1NotificationsSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateorchangestoreconfigurationRequest1NotificationsSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateorchangestoreconfigurationRequest1NotificationsSettings>() {
           @Override
           public void write(JsonWriter out, CreateorchangestoreconfigurationRequest1NotificationsSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateorchangestoreconfigurationRequest1NotificationsSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateorchangestoreconfigurationRequest1NotificationsSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateorchangestoreconfigurationRequest1NotificationsSettings
   * @throws IOException if the JSON string is invalid with respect to CreateorchangestoreconfigurationRequest1NotificationsSettings
   */
  public static CreateorchangestoreconfigurationRequest1NotificationsSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateorchangestoreconfigurationRequest1NotificationsSettings.class);
  }

  /**
   * Convert an instance of CreateorchangestoreconfigurationRequest1NotificationsSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

