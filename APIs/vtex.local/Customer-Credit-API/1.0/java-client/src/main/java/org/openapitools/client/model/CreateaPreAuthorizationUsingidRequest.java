/*
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateaPreAuthorizationUsingidRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:41.771522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateaPreAuthorizationUsingidRequest {
  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private String expirationDate = "1";

  public static final String SERIALIZED_NAME_INSTALLMENTS = "installments";
  @SerializedName(SERIALIZED_NAME_INSTALLMENTS)
  private String installments = "1";

  public static final String SERIALIZED_NAME_SETTLE = "settle";
  @SerializedName(SERIALIZED_NAME_SETTLE)
  private Boolean settle = false;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value = "20.0";

  public CreateaPreAuthorizationUsingidRequest() {
  }

  public CreateaPreAuthorizationUsingidRequest expirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * date in ISO8601 (UTC) dateformat (optional default is 1(one) day)
   * @return expirationDate
   */
  @javax.annotation.Nonnull
  public String getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
  }


  public CreateaPreAuthorizationUsingidRequest installments(String installments) {
    this.installments = installments;
    return this;
  }

  /**
   * Get installments
   * @return installments
   */
  @javax.annotation.Nonnull
  public String getInstallments() {
    return installments;
  }

  public void setInstallments(String installments) {
    this.installments = installments;
  }


  public CreateaPreAuthorizationUsingidRequest settle(Boolean settle) {
    this.settle = settle;
    return this;
  }

  /**
   * Get settle
   * @return settle
   */
  @javax.annotation.Nonnull
  public Boolean getSettle() {
    return settle;
  }

  public void setSettle(Boolean settle) {
    this.settle = settle;
  }


  public CreateaPreAuthorizationUsingidRequest value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nonnull
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateaPreAuthorizationUsingidRequest createaPreAuthorizationUsingidRequest = (CreateaPreAuthorizationUsingidRequest) o;
    return Objects.equals(this.expirationDate, createaPreAuthorizationUsingidRequest.expirationDate) &&
        Objects.equals(this.installments, createaPreAuthorizationUsingidRequest.installments) &&
        Objects.equals(this.settle, createaPreAuthorizationUsingidRequest.settle) &&
        Objects.equals(this.value, createaPreAuthorizationUsingidRequest.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expirationDate, installments, settle, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateaPreAuthorizationUsingidRequest {\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    installments: ").append(toIndentedString(installments)).append("\n");
    sb.append("    settle: ").append(toIndentedString(settle)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expirationDate");
    openapiFields.add("installments");
    openapiFields.add("settle");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("expirationDate");
    openapiRequiredFields.add("installments");
    openapiRequiredFields.add("settle");
    openapiRequiredFields.add("value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateaPreAuthorizationUsingidRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateaPreAuthorizationUsingidRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateaPreAuthorizationUsingidRequest is not found in the empty JSON string", CreateaPreAuthorizationUsingidRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateaPreAuthorizationUsingidRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateaPreAuthorizationUsingidRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateaPreAuthorizationUsingidRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("expirationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expirationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expirationDate").toString()));
      }
      if (!jsonObj.get("installments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installments").toString()));
      }
      if (!jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateaPreAuthorizationUsingidRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateaPreAuthorizationUsingidRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateaPreAuthorizationUsingidRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateaPreAuthorizationUsingidRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateaPreAuthorizationUsingidRequest>() {
           @Override
           public void write(JsonWriter out, CreateaPreAuthorizationUsingidRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateaPreAuthorizationUsingidRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateaPreAuthorizationUsingidRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateaPreAuthorizationUsingidRequest
   * @throws IOException if the JSON string is invalid with respect to CreateaPreAuthorizationUsingidRequest
   */
  public static CreateaPreAuthorizationUsingidRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateaPreAuthorizationUsingidRequest.class);
  }

  /**
   * Convert an instance of CreateaPreAuthorizationUsingidRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

