# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateaPreAuthorizationUsingidRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiration_date: str='1', installments: str='1', settle: bool=False, value: str='20.0'):
        """CreateaPreAuthorizationUsingidRequest - a model defined in OpenAPI

        :param expiration_date: The expiration_date of this CreateaPreAuthorizationUsingidRequest.
        :param installments: The installments of this CreateaPreAuthorizationUsingidRequest.
        :param settle: The settle of this CreateaPreAuthorizationUsingidRequest.
        :param value: The value of this CreateaPreAuthorizationUsingidRequest.
        """
        self.openapi_types = {
            'expiration_date': str,
            'installments': str,
            'settle': bool,
            'value': str
        }

        self.attribute_map = {
            'expiration_date': 'expirationDate',
            'installments': 'installments',
            'settle': 'settle',
            'value': 'value'
        }

        self._expiration_date = expiration_date
        self._installments = installments
        self._settle = settle
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateaPreAuthorizationUsingidRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateaPreAuthorization_usingid__request of this CreateaPreAuthorizationUsingidRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiration_date(self):
        """Gets the expiration_date of this CreateaPreAuthorizationUsingidRequest.

        date in ISO8601 (UTC) dateformat (optional default is 1(one) day)

        :return: The expiration_date of this CreateaPreAuthorizationUsingidRequest.
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this CreateaPreAuthorizationUsingidRequest.

        date in ISO8601 (UTC) dateformat (optional default is 1(one) day)

        :param expiration_date: The expiration_date of this CreateaPreAuthorizationUsingidRequest.
        :type expiration_date: str
        """
        if expiration_date is None:
            raise ValueError("Invalid value for `expiration_date`, must not be `None`")

        self._expiration_date = expiration_date

    @property
    def installments(self):
        """Gets the installments of this CreateaPreAuthorizationUsingidRequest.


        :return: The installments of this CreateaPreAuthorizationUsingidRequest.
        :rtype: str
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this CreateaPreAuthorizationUsingidRequest.


        :param installments: The installments of this CreateaPreAuthorizationUsingidRequest.
        :type installments: str
        """
        if installments is None:
            raise ValueError("Invalid value for `installments`, must not be `None`")

        self._installments = installments

    @property
    def settle(self):
        """Gets the settle of this CreateaPreAuthorizationUsingidRequest.


        :return: The settle of this CreateaPreAuthorizationUsingidRequest.
        :rtype: bool
        """
        return self._settle

    @settle.setter
    def settle(self, settle):
        """Sets the settle of this CreateaPreAuthorizationUsingidRequest.


        :param settle: The settle of this CreateaPreAuthorizationUsingidRequest.
        :type settle: bool
        """
        if settle is None:
            raise ValueError("Invalid value for `settle`, must not be `None`")

        self._settle = settle

    @property
    def value(self):
        """Gets the value of this CreateaPreAuthorizationUsingidRequest.


        :return: The value of this CreateaPreAuthorizationUsingidRequest.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CreateaPreAuthorizationUsingidRequest.


        :param value: The value of this CreateaPreAuthorizationUsingidRequest.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
