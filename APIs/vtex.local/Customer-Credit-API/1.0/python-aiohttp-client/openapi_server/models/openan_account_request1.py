# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OpenanAccountRequest1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credit_limit: str='500', description: str='example', document: str='99999999999', document_type: str='CPF', email: str='email@domain.com', tolerance: str='1'):
        """OpenanAccountRequest1 - a model defined in OpenAPI

        :param credit_limit: The credit_limit of this OpenanAccountRequest1.
        :param description: The description of this OpenanAccountRequest1.
        :param document: The document of this OpenanAccountRequest1.
        :param document_type: The document_type of this OpenanAccountRequest1.
        :param email: The email of this OpenanAccountRequest1.
        :param tolerance: The tolerance of this OpenanAccountRequest1.
        """
        self.openapi_types = {
            'credit_limit': str,
            'description': str,
            'document': str,
            'document_type': str,
            'email': str,
            'tolerance': str
        }

        self.attribute_map = {
            'credit_limit': 'creditLimit',
            'description': 'description',
            'document': 'document',
            'document_type': 'documentType',
            'email': 'email',
            'tolerance': 'tolerance'
        }

        self._credit_limit = credit_limit
        self._description = description
        self._document = document
        self._document_type = document_type
        self._email = email
        self._tolerance = tolerance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OpenanAccountRequest1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OpenanAccountRequest_1 of this OpenanAccountRequest1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credit_limit(self):
        """Gets the credit_limit of this OpenanAccountRequest1.


        :return: The credit_limit of this OpenanAccountRequest1.
        :rtype: str
        """
        return self._credit_limit

    @credit_limit.setter
    def credit_limit(self, credit_limit):
        """Sets the credit_limit of this OpenanAccountRequest1.


        :param credit_limit: The credit_limit of this OpenanAccountRequest1.
        :type credit_limit: str
        """
        if credit_limit is None:
            raise ValueError("Invalid value for `credit_limit`, must not be `None`")

        self._credit_limit = credit_limit

    @property
    def description(self):
        """Gets the description of this OpenanAccountRequest1.


        :return: The description of this OpenanAccountRequest1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OpenanAccountRequest1.


        :param description: The description of this OpenanAccountRequest1.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def document(self):
        """Gets the document of this OpenanAccountRequest1.


        :return: The document of this OpenanAccountRequest1.
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this OpenanAccountRequest1.


        :param document: The document of this OpenanAccountRequest1.
        :type document: str
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")

        self._document = document

    @property
    def document_type(self):
        """Gets the document_type of this OpenanAccountRequest1.


        :return: The document_type of this OpenanAccountRequest1.
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this OpenanAccountRequest1.


        :param document_type: The document_type of this OpenanAccountRequest1.
        :type document_type: str
        """
        if document_type is None:
            raise ValueError("Invalid value for `document_type`, must not be `None`")

        self._document_type = document_type

    @property
    def email(self):
        """Gets the email of this OpenanAccountRequest1.


        :return: The email of this OpenanAccountRequest1.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OpenanAccountRequest1.


        :param email: The email of this OpenanAccountRequest1.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def tolerance(self):
        """Gets the tolerance of this OpenanAccountRequest1.


        :return: The tolerance of this OpenanAccountRequest1.
        :rtype: str
        """
        return self._tolerance

    @tolerance.setter
    def tolerance(self, tolerance):
        """Sets the tolerance of this OpenanAccountRequest1.


        :param tolerance: The tolerance of this OpenanAccountRequest1.
        :type tolerance: str
        """
        if tolerance is None:
            raise ValueError("Invalid value for `tolerance`, must not be `None`")

        self._tolerance = tolerance
