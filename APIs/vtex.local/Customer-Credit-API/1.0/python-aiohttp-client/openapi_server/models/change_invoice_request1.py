# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChangeInvoiceRequest1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, observation: str='example', payment_link: str='example', status: str='Paid'):
        """ChangeInvoiceRequest1 - a model defined in OpenAPI

        :param observation: The observation of this ChangeInvoiceRequest1.
        :param payment_link: The payment_link of this ChangeInvoiceRequest1.
        :param status: The status of this ChangeInvoiceRequest1.
        """
        self.openapi_types = {
            'observation': str,
            'payment_link': str,
            'status': str
        }

        self.attribute_map = {
            'observation': 'observation',
            'payment_link': 'paymentLink',
            'status': 'status'
        }

        self._observation = observation
        self._payment_link = payment_link
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChangeInvoiceRequest1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChangeInvoiceRequest_1 of this ChangeInvoiceRequest1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def observation(self):
        """Gets the observation of this ChangeInvoiceRequest1.


        :return: The observation of this ChangeInvoiceRequest1.
        :rtype: str
        """
        return self._observation

    @observation.setter
    def observation(self, observation):
        """Sets the observation of this ChangeInvoiceRequest1.


        :param observation: The observation of this ChangeInvoiceRequest1.
        :type observation: str
        """
        if observation is None:
            raise ValueError("Invalid value for `observation`, must not be `None`")

        self._observation = observation

    @property
    def payment_link(self):
        """Gets the payment_link of this ChangeInvoiceRequest1.


        :return: The payment_link of this ChangeInvoiceRequest1.
        :rtype: str
        """
        return self._payment_link

    @payment_link.setter
    def payment_link(self, payment_link):
        """Sets the payment_link of this ChangeInvoiceRequest1.


        :param payment_link: The payment_link of this ChangeInvoiceRequest1.
        :type payment_link: str
        """
        if payment_link is None:
            raise ValueError("Invalid value for `payment_link`, must not be `None`")

        self._payment_link = payment_link

    @property
    def status(self):
        """Gets the status of this ChangeInvoiceRequest1.

        Invoice's status. It must be completed with &quot;Paid&quot;, &quot;Cancelled&quot; or &quot;Open&quot; value.

        :return: The status of this ChangeInvoiceRequest1.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ChangeInvoiceRequest1.

        Invoice's status. It must be completed with &quot;Paid&quot;, &quot;Cancelled&quot; or &quot;Open&quot; value.

        :param status: The status of this ChangeInvoiceRequest1.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
