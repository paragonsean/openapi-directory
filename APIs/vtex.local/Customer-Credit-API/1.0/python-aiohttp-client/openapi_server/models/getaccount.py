# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Getaccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, balance: float=None, credit_limit: float=None, description: str=None, email: str=None, last_update: str=None):
        """Getaccount - a model defined in OpenAPI

        :param account: The account of this Getaccount.
        :param balance: The balance of this Getaccount.
        :param credit_limit: The credit_limit of this Getaccount.
        :param description: The description of this Getaccount.
        :param email: The email of this Getaccount.
        :param last_update: The last_update of this Getaccount.
        """
        self.openapi_types = {
            'account': str,
            'balance': float,
            'credit_limit': float,
            'description': str,
            'email': str,
            'last_update': str
        }

        self.attribute_map = {
            'account': 'account',
            'balance': 'balance',
            'credit_limit': 'creditLimit',
            'description': 'description',
            'email': 'email',
            'last_update': 'lastUpdate'
        }

        self._account = account
        self._balance = balance
        self._credit_limit = credit_limit
        self._description = description
        self._email = email
        self._last_update = last_update

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Getaccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Getaccount of this Getaccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this Getaccount.


        :return: The account of this Getaccount.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Getaccount.


        :param account: The account of this Getaccount.
        :type account: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")

        self._account = account

    @property
    def balance(self):
        """Gets the balance of this Getaccount.


        :return: The balance of this Getaccount.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Getaccount.


        :param balance: The balance of this Getaccount.
        :type balance: float
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")

        self._balance = balance

    @property
    def credit_limit(self):
        """Gets the credit_limit of this Getaccount.


        :return: The credit_limit of this Getaccount.
        :rtype: float
        """
        return self._credit_limit

    @credit_limit.setter
    def credit_limit(self, credit_limit):
        """Sets the credit_limit of this Getaccount.


        :param credit_limit: The credit_limit of this Getaccount.
        :type credit_limit: float
        """
        if credit_limit is None:
            raise ValueError("Invalid value for `credit_limit`, must not be `None`")

        self._credit_limit = credit_limit

    @property
    def description(self):
        """Gets the description of this Getaccount.


        :return: The description of this Getaccount.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Getaccount.


        :param description: The description of this Getaccount.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def email(self):
        """Gets the email of this Getaccount.


        :return: The email of this Getaccount.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Getaccount.


        :param email: The email of this Getaccount.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def last_update(self):
        """Gets the last_update of this Getaccount.


        :return: The last_update of this Getaccount.
        :rtype: str
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Getaccount.


        :param last_update: The last_update of this Getaccount.
        :type last_update: str
        """
        if last_update is None:
            raise ValueError("Invalid value for `last_update`, must not be `None`")

        self._last_update = last_update
