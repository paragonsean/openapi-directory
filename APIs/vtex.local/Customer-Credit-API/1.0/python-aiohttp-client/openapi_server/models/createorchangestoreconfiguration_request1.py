# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.createorchangestoreconfiguration_request1_notifications_settings import CreateorchangestoreconfigurationRequest1NotificationsSettings
from openapi_server import util


class CreateorchangestoreconfigurationRequest1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automatic_checking_account_creation_enabled: bool=False, daily_interest_rate: str='0.6', default_credit_value: str='150.0', invoice_postponement_limit: str='2', max_postponement_days: str='3', max_pre_authorization_growth_rate: str='0.1', my_credits_enabled: bool=True, notifications_settings: CreateorchangestoreconfigurationRequest1NotificationsSettings=None, postponement_enabled: bool=False, tax_rate: str='0.4', tolerance_enabled: bool=True):
        """CreateorchangestoreconfigurationRequest1 - a model defined in OpenAPI

        :param automatic_checking_account_creation_enabled: The automatic_checking_account_creation_enabled of this CreateorchangestoreconfigurationRequest1.
        :param daily_interest_rate: The daily_interest_rate of this CreateorchangestoreconfigurationRequest1.
        :param default_credit_value: The default_credit_value of this CreateorchangestoreconfigurationRequest1.
        :param invoice_postponement_limit: The invoice_postponement_limit of this CreateorchangestoreconfigurationRequest1.
        :param max_postponement_days: The max_postponement_days of this CreateorchangestoreconfigurationRequest1.
        :param max_pre_authorization_growth_rate: The max_pre_authorization_growth_rate of this CreateorchangestoreconfigurationRequest1.
        :param my_credits_enabled: The my_credits_enabled of this CreateorchangestoreconfigurationRequest1.
        :param notifications_settings: The notifications_settings of this CreateorchangestoreconfigurationRequest1.
        :param postponement_enabled: The postponement_enabled of this CreateorchangestoreconfigurationRequest1.
        :param tax_rate: The tax_rate of this CreateorchangestoreconfigurationRequest1.
        :param tolerance_enabled: The tolerance_enabled of this CreateorchangestoreconfigurationRequest1.
        """
        self.openapi_types = {
            'automatic_checking_account_creation_enabled': bool,
            'daily_interest_rate': str,
            'default_credit_value': str,
            'invoice_postponement_limit': str,
            'max_postponement_days': str,
            'max_pre_authorization_growth_rate': str,
            'my_credits_enabled': bool,
            'notifications_settings': CreateorchangestoreconfigurationRequest1NotificationsSettings,
            'postponement_enabled': bool,
            'tax_rate': str,
            'tolerance_enabled': bool
        }

        self.attribute_map = {
            'automatic_checking_account_creation_enabled': 'automaticCheckingAccountCreationEnabled',
            'daily_interest_rate': 'dailyInterestRate',
            'default_credit_value': 'defaultCreditValue',
            'invoice_postponement_limit': 'invoicePostponementLimit',
            'max_postponement_days': 'maxPostponementDays',
            'max_pre_authorization_growth_rate': 'maxPreAuthorizationGrowthRate',
            'my_credits_enabled': 'myCreditsEnabled',
            'notifications_settings': 'notificationsSettings',
            'postponement_enabled': 'postponementEnabled',
            'tax_rate': 'taxRate',
            'tolerance_enabled': 'toleranceEnabled'
        }

        self._automatic_checking_account_creation_enabled = automatic_checking_account_creation_enabled
        self._daily_interest_rate = daily_interest_rate
        self._default_credit_value = default_credit_value
        self._invoice_postponement_limit = invoice_postponement_limit
        self._max_postponement_days = max_postponement_days
        self._max_pre_authorization_growth_rate = max_pre_authorization_growth_rate
        self._my_credits_enabled = my_credits_enabled
        self._notifications_settings = notifications_settings
        self._postponement_enabled = postponement_enabled
        self._tax_rate = tax_rate
        self._tolerance_enabled = tolerance_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateorchangestoreconfigurationRequest1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateorchangestoreconfigurationRequest_1 of this CreateorchangestoreconfigurationRequest1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automatic_checking_account_creation_enabled(self):
        """Gets the automatic_checking_account_creation_enabled of this CreateorchangestoreconfigurationRequest1.


        :return: The automatic_checking_account_creation_enabled of this CreateorchangestoreconfigurationRequest1.
        :rtype: bool
        """
        return self._automatic_checking_account_creation_enabled

    @automatic_checking_account_creation_enabled.setter
    def automatic_checking_account_creation_enabled(self, automatic_checking_account_creation_enabled):
        """Sets the automatic_checking_account_creation_enabled of this CreateorchangestoreconfigurationRequest1.


        :param automatic_checking_account_creation_enabled: The automatic_checking_account_creation_enabled of this CreateorchangestoreconfigurationRequest1.
        :type automatic_checking_account_creation_enabled: bool
        """
        if automatic_checking_account_creation_enabled is None:
            raise ValueError("Invalid value for `automatic_checking_account_creation_enabled`, must not be `None`")

        self._automatic_checking_account_creation_enabled = automatic_checking_account_creation_enabled

    @property
    def daily_interest_rate(self):
        """Gets the daily_interest_rate of this CreateorchangestoreconfigurationRequest1.


        :return: The daily_interest_rate of this CreateorchangestoreconfigurationRequest1.
        :rtype: str
        """
        return self._daily_interest_rate

    @daily_interest_rate.setter
    def daily_interest_rate(self, daily_interest_rate):
        """Sets the daily_interest_rate of this CreateorchangestoreconfigurationRequest1.


        :param daily_interest_rate: The daily_interest_rate of this CreateorchangestoreconfigurationRequest1.
        :type daily_interest_rate: str
        """
        if daily_interest_rate is None:
            raise ValueError("Invalid value for `daily_interest_rate`, must not be `None`")

        self._daily_interest_rate = daily_interest_rate

    @property
    def default_credit_value(self):
        """Gets the default_credit_value of this CreateorchangestoreconfigurationRequest1.


        :return: The default_credit_value of this CreateorchangestoreconfigurationRequest1.
        :rtype: str
        """
        return self._default_credit_value

    @default_credit_value.setter
    def default_credit_value(self, default_credit_value):
        """Sets the default_credit_value of this CreateorchangestoreconfigurationRequest1.


        :param default_credit_value: The default_credit_value of this CreateorchangestoreconfigurationRequest1.
        :type default_credit_value: str
        """
        if default_credit_value is None:
            raise ValueError("Invalid value for `default_credit_value`, must not be `None`")

        self._default_credit_value = default_credit_value

    @property
    def invoice_postponement_limit(self):
        """Gets the invoice_postponement_limit of this CreateorchangestoreconfigurationRequest1.


        :return: The invoice_postponement_limit of this CreateorchangestoreconfigurationRequest1.
        :rtype: str
        """
        return self._invoice_postponement_limit

    @invoice_postponement_limit.setter
    def invoice_postponement_limit(self, invoice_postponement_limit):
        """Sets the invoice_postponement_limit of this CreateorchangestoreconfigurationRequest1.


        :param invoice_postponement_limit: The invoice_postponement_limit of this CreateorchangestoreconfigurationRequest1.
        :type invoice_postponement_limit: str
        """
        if invoice_postponement_limit is None:
            raise ValueError("Invalid value for `invoice_postponement_limit`, must not be `None`")

        self._invoice_postponement_limit = invoice_postponement_limit

    @property
    def max_postponement_days(self):
        """Gets the max_postponement_days of this CreateorchangestoreconfigurationRequest1.


        :return: The max_postponement_days of this CreateorchangestoreconfigurationRequest1.
        :rtype: str
        """
        return self._max_postponement_days

    @max_postponement_days.setter
    def max_postponement_days(self, max_postponement_days):
        """Sets the max_postponement_days of this CreateorchangestoreconfigurationRequest1.


        :param max_postponement_days: The max_postponement_days of this CreateorchangestoreconfigurationRequest1.
        :type max_postponement_days: str
        """
        if max_postponement_days is None:
            raise ValueError("Invalid value for `max_postponement_days`, must not be `None`")

        self._max_postponement_days = max_postponement_days

    @property
    def max_pre_authorization_growth_rate(self):
        """Gets the max_pre_authorization_growth_rate of this CreateorchangestoreconfigurationRequest1.


        :return: The max_pre_authorization_growth_rate of this CreateorchangestoreconfigurationRequest1.
        :rtype: str
        """
        return self._max_pre_authorization_growth_rate

    @max_pre_authorization_growth_rate.setter
    def max_pre_authorization_growth_rate(self, max_pre_authorization_growth_rate):
        """Sets the max_pre_authorization_growth_rate of this CreateorchangestoreconfigurationRequest1.


        :param max_pre_authorization_growth_rate: The max_pre_authorization_growth_rate of this CreateorchangestoreconfigurationRequest1.
        :type max_pre_authorization_growth_rate: str
        """
        if max_pre_authorization_growth_rate is None:
            raise ValueError("Invalid value for `max_pre_authorization_growth_rate`, must not be `None`")

        self._max_pre_authorization_growth_rate = max_pre_authorization_growth_rate

    @property
    def my_credits_enabled(self):
        """Gets the my_credits_enabled of this CreateorchangestoreconfigurationRequest1.


        :return: The my_credits_enabled of this CreateorchangestoreconfigurationRequest1.
        :rtype: bool
        """
        return self._my_credits_enabled

    @my_credits_enabled.setter
    def my_credits_enabled(self, my_credits_enabled):
        """Sets the my_credits_enabled of this CreateorchangestoreconfigurationRequest1.


        :param my_credits_enabled: The my_credits_enabled of this CreateorchangestoreconfigurationRequest1.
        :type my_credits_enabled: bool
        """
        if my_credits_enabled is None:
            raise ValueError("Invalid value for `my_credits_enabled`, must not be `None`")

        self._my_credits_enabled = my_credits_enabled

    @property
    def notifications_settings(self):
        """Gets the notifications_settings of this CreateorchangestoreconfigurationRequest1.


        :return: The notifications_settings of this CreateorchangestoreconfigurationRequest1.
        :rtype: CreateorchangestoreconfigurationRequest1NotificationsSettings
        """
        return self._notifications_settings

    @notifications_settings.setter
    def notifications_settings(self, notifications_settings):
        """Sets the notifications_settings of this CreateorchangestoreconfigurationRequest1.


        :param notifications_settings: The notifications_settings of this CreateorchangestoreconfigurationRequest1.
        :type notifications_settings: CreateorchangestoreconfigurationRequest1NotificationsSettings
        """

        self._notifications_settings = notifications_settings

    @property
    def postponement_enabled(self):
        """Gets the postponement_enabled of this CreateorchangestoreconfigurationRequest1.


        :return: The postponement_enabled of this CreateorchangestoreconfigurationRequest1.
        :rtype: bool
        """
        return self._postponement_enabled

    @postponement_enabled.setter
    def postponement_enabled(self, postponement_enabled):
        """Sets the postponement_enabled of this CreateorchangestoreconfigurationRequest1.


        :param postponement_enabled: The postponement_enabled of this CreateorchangestoreconfigurationRequest1.
        :type postponement_enabled: bool
        """
        if postponement_enabled is None:
            raise ValueError("Invalid value for `postponement_enabled`, must not be `None`")

        self._postponement_enabled = postponement_enabled

    @property
    def tax_rate(self):
        """Gets the tax_rate of this CreateorchangestoreconfigurationRequest1.


        :return: The tax_rate of this CreateorchangestoreconfigurationRequest1.
        :rtype: str
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this CreateorchangestoreconfigurationRequest1.


        :param tax_rate: The tax_rate of this CreateorchangestoreconfigurationRequest1.
        :type tax_rate: str
        """
        if tax_rate is None:
            raise ValueError("Invalid value for `tax_rate`, must not be `None`")

        self._tax_rate = tax_rate

    @property
    def tolerance_enabled(self):
        """Gets the tolerance_enabled of this CreateorchangestoreconfigurationRequest1.


        :return: The tolerance_enabled of this CreateorchangestoreconfigurationRequest1.
        :rtype: bool
        """
        return self._tolerance_enabled

    @tolerance_enabled.setter
    def tolerance_enabled(self, tolerance_enabled):
        """Sets the tolerance_enabled of this CreateorchangestoreconfigurationRequest1.


        :param tolerance_enabled: The tolerance_enabled of this CreateorchangestoreconfigurationRequest1.
        :type tolerance_enabled: bool
        """
        if tolerance_enabled is None:
            raise ValueError("Invalid value for `tolerance_enabled`, must not be `None`")

        self._tolerance_enabled = tolerance_enabled
