# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Storeconfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, daily_interest_rate: float=None, invoice_postponement_limit: int=None, tax_rate: float=None, tolerance_percent: float=None):
        """Storeconfig - a model defined in OpenAPI

        :param daily_interest_rate: The daily_interest_rate of this Storeconfig.
        :param invoice_postponement_limit: The invoice_postponement_limit of this Storeconfig.
        :param tax_rate: The tax_rate of this Storeconfig.
        :param tolerance_percent: The tolerance_percent of this Storeconfig.
        """
        self.openapi_types = {
            'daily_interest_rate': float,
            'invoice_postponement_limit': int,
            'tax_rate': float,
            'tolerance_percent': float
        }

        self.attribute_map = {
            'daily_interest_rate': 'dailyInterestRate',
            'invoice_postponement_limit': 'invoicePostponementLimit',
            'tax_rate': 'taxRate',
            'tolerance_percent': 'tolerancePercent'
        }

        self._daily_interest_rate = daily_interest_rate
        self._invoice_postponement_limit = invoice_postponement_limit
        self._tax_rate = tax_rate
        self._tolerance_percent = tolerance_percent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Storeconfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Storeconfig of this Storeconfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def daily_interest_rate(self):
        """Gets the daily_interest_rate of this Storeconfig.


        :return: The daily_interest_rate of this Storeconfig.
        :rtype: float
        """
        return self._daily_interest_rate

    @daily_interest_rate.setter
    def daily_interest_rate(self, daily_interest_rate):
        """Sets the daily_interest_rate of this Storeconfig.


        :param daily_interest_rate: The daily_interest_rate of this Storeconfig.
        :type daily_interest_rate: float
        """
        if daily_interest_rate is None:
            raise ValueError("Invalid value for `daily_interest_rate`, must not be `None`")

        self._daily_interest_rate = daily_interest_rate

    @property
    def invoice_postponement_limit(self):
        """Gets the invoice_postponement_limit of this Storeconfig.


        :return: The invoice_postponement_limit of this Storeconfig.
        :rtype: int
        """
        return self._invoice_postponement_limit

    @invoice_postponement_limit.setter
    def invoice_postponement_limit(self, invoice_postponement_limit):
        """Sets the invoice_postponement_limit of this Storeconfig.


        :param invoice_postponement_limit: The invoice_postponement_limit of this Storeconfig.
        :type invoice_postponement_limit: int
        """
        if invoice_postponement_limit is None:
            raise ValueError("Invalid value for `invoice_postponement_limit`, must not be `None`")

        self._invoice_postponement_limit = invoice_postponement_limit

    @property
    def tax_rate(self):
        """Gets the tax_rate of this Storeconfig.


        :return: The tax_rate of this Storeconfig.
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this Storeconfig.


        :param tax_rate: The tax_rate of this Storeconfig.
        :type tax_rate: float
        """
        if tax_rate is None:
            raise ValueError("Invalid value for `tax_rate`, must not be `None`")

        self._tax_rate = tax_rate

    @property
    def tolerance_percent(self):
        """Gets the tolerance_percent of this Storeconfig.


        :return: The tolerance_percent of this Storeconfig.
        :rtype: float
        """
        return self._tolerance_percent

    @tolerance_percent.setter
    def tolerance_percent(self, tolerance_percent):
        """Sets the tolerance_percent of this Storeconfig.


        :param tolerance_percent: The tolerance_percent of this Storeconfig.
        :type tolerance_percent: float
        """
        if tolerance_percent is None:
            raise ValueError("Invalid value for `tolerance_percent`, must not be `None`")

        self._tolerance_percent = tolerance_percent
