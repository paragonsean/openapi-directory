# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.datum21 import Datum21
from openapi_server.models.summary21 import Summary21
from openapi_server import util


class Searchcheckingaccounts1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[Datum21]=None, summary: Summary21=None):
        """Searchcheckingaccounts1 - a model defined in OpenAPI

        :param data: The data of this Searchcheckingaccounts1.
        :param summary: The summary of this Searchcheckingaccounts1.
        """
        self.openapi_types = {
            'data': List[Datum21],
            'summary': Summary21
        }

        self.attribute_map = {
            'data': 'data',
            'summary': 'summary'
        }

        self._data = data
        self._summary = summary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Searchcheckingaccounts1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Searchcheckingaccounts_1 of this Searchcheckingaccounts1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this Searchcheckingaccounts1.

        

        :return: The data of this Searchcheckingaccounts1.
        :rtype: List[Datum21]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Searchcheckingaccounts1.

        

        :param data: The data of this Searchcheckingaccounts1.
        :type data: List[Datum21]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def summary(self):
        """Gets the summary of this Searchcheckingaccounts1.


        :return: The summary of this Searchcheckingaccounts1.
        :rtype: Summary21
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Searchcheckingaccounts1.


        :param summary: The summary of this Searchcheckingaccounts1.
        :type summary: Summary21
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")

        self._summary = summary
