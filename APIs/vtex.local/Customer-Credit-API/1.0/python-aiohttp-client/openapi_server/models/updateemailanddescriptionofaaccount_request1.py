# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateemailanddescriptionofaaccountRequest1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str='example', email: str='email@domain.com'):
        """UpdateemailanddescriptionofaaccountRequest1 - a model defined in OpenAPI

        :param description: The description of this UpdateemailanddescriptionofaaccountRequest1.
        :param email: The email of this UpdateemailanddescriptionofaaccountRequest1.
        """
        self.openapi_types = {
            'description': str,
            'email': str
        }

        self.attribute_map = {
            'description': 'description',
            'email': 'email'
        }

        self._description = description
        self._email = email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateemailanddescriptionofaaccountRequest1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateemailanddescriptionofaaccountRequest_1 of this UpdateemailanddescriptionofaaccountRequest1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this UpdateemailanddescriptionofaaccountRequest1.


        :return: The description of this UpdateemailanddescriptionofaaccountRequest1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateemailanddescriptionofaaccountRequest1.


        :param description: The description of this UpdateemailanddescriptionofaaccountRequest1.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def email(self):
        """Gets the email of this UpdateemailanddescriptionofaaccountRequest1.


        :return: The email of this UpdateemailanddescriptionofaaccountRequest1.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UpdateemailanddescriptionofaaccountRequest1.


        :param email: The email of this UpdateemailanddescriptionofaaccountRequest1.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email
