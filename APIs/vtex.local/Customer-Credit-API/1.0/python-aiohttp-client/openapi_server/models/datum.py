# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Datum(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checking_account_id: str=None, created_at: str=None, description: str=None, due_date: str=None, id: str=None, observation: str=None, original_due_date: str=None, payment_link: str=None, status: str=None, updated_at: str=None, value: float=None):
        """Datum - a model defined in OpenAPI

        :param checking_account_id: The checking_account_id of this Datum.
        :param created_at: The created_at of this Datum.
        :param description: The description of this Datum.
        :param due_date: The due_date of this Datum.
        :param id: The id of this Datum.
        :param observation: The observation of this Datum.
        :param original_due_date: The original_due_date of this Datum.
        :param payment_link: The payment_link of this Datum.
        :param status: The status of this Datum.
        :param updated_at: The updated_at of this Datum.
        :param value: The value of this Datum.
        """
        self.openapi_types = {
            'checking_account_id': str,
            'created_at': str,
            'description': str,
            'due_date': str,
            'id': str,
            'observation': str,
            'original_due_date': str,
            'payment_link': str,
            'status': str,
            'updated_at': str,
            'value': float
        }

        self.attribute_map = {
            'checking_account_id': 'checkingAccountId',
            'created_at': 'createdAt',
            'description': 'description',
            'due_date': 'dueDate',
            'id': 'id',
            'observation': 'observation',
            'original_due_date': 'originalDueDate',
            'payment_link': 'paymentLink',
            'status': 'status',
            'updated_at': 'updatedAt',
            'value': 'value'
        }

        self._checking_account_id = checking_account_id
        self._created_at = created_at
        self._description = description
        self._due_date = due_date
        self._id = id
        self._observation = observation
        self._original_due_date = original_due_date
        self._payment_link = payment_link
        self._status = status
        self._updated_at = updated_at
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Datum':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Datum of this Datum.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checking_account_id(self):
        """Gets the checking_account_id of this Datum.


        :return: The checking_account_id of this Datum.
        :rtype: str
        """
        return self._checking_account_id

    @checking_account_id.setter
    def checking_account_id(self, checking_account_id):
        """Sets the checking_account_id of this Datum.


        :param checking_account_id: The checking_account_id of this Datum.
        :type checking_account_id: str
        """
        if checking_account_id is None:
            raise ValueError("Invalid value for `checking_account_id`, must not be `None`")

        self._checking_account_id = checking_account_id

    @property
    def created_at(self):
        """Gets the created_at of this Datum.


        :return: The created_at of this Datum.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Datum.


        :param created_at: The created_at of this Datum.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Datum.


        :return: The description of this Datum.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Datum.


        :param description: The description of this Datum.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def due_date(self):
        """Gets the due_date of this Datum.


        :return: The due_date of this Datum.
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Datum.


        :param due_date: The due_date of this Datum.
        :type due_date: str
        """
        if due_date is None:
            raise ValueError("Invalid value for `due_date`, must not be `None`")

        self._due_date = due_date

    @property
    def id(self):
        """Gets the id of this Datum.


        :return: The id of this Datum.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Datum.


        :param id: The id of this Datum.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def observation(self):
        """Gets the observation of this Datum.


        :return: The observation of this Datum.
        :rtype: str
        """
        return self._observation

    @observation.setter
    def observation(self, observation):
        """Sets the observation of this Datum.


        :param observation: The observation of this Datum.
        :type observation: str
        """
        if observation is None:
            raise ValueError("Invalid value for `observation`, must not be `None`")

        self._observation = observation

    @property
    def original_due_date(self):
        """Gets the original_due_date of this Datum.


        :return: The original_due_date of this Datum.
        :rtype: str
        """
        return self._original_due_date

    @original_due_date.setter
    def original_due_date(self, original_due_date):
        """Sets the original_due_date of this Datum.


        :param original_due_date: The original_due_date of this Datum.
        :type original_due_date: str
        """
        if original_due_date is None:
            raise ValueError("Invalid value for `original_due_date`, must not be `None`")

        self._original_due_date = original_due_date

    @property
    def payment_link(self):
        """Gets the payment_link of this Datum.


        :return: The payment_link of this Datum.
        :rtype: str
        """
        return self._payment_link

    @payment_link.setter
    def payment_link(self, payment_link):
        """Sets the payment_link of this Datum.


        :param payment_link: The payment_link of this Datum.
        :type payment_link: str
        """
        if payment_link is None:
            raise ValueError("Invalid value for `payment_link`, must not be `None`")

        self._payment_link = payment_link

    @property
    def status(self):
        """Gets the status of this Datum.


        :return: The status of this Datum.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Datum.


        :param status: The status of this Datum.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this Datum.


        :return: The updated_at of this Datum.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Datum.


        :param updated_at: The updated_at of this Datum.
        :type updated_at: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def value(self):
        """Gets the value of this Datum.


        :return: The value of this Datum.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Datum.


        :param value: The value of this Datum.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
