# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.statements11 import Statements11
from openapi_server import util


class Statements(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_balance: float=None, interval_balance: float=None, previous_balance: float=None, statements: List[Statements11]=None):
        """Statements - a model defined in OpenAPI

        :param current_balance: The current_balance of this Statements.
        :param interval_balance: The interval_balance of this Statements.
        :param previous_balance: The previous_balance of this Statements.
        :param statements: The statements of this Statements.
        """
        self.openapi_types = {
            'current_balance': float,
            'interval_balance': float,
            'previous_balance': float,
            'statements': List[Statements11]
        }

        self.attribute_map = {
            'current_balance': 'currentBalance',
            'interval_balance': 'intervalBalance',
            'previous_balance': 'previousBalance',
            'statements': 'statements'
        }

        self._current_balance = current_balance
        self._interval_balance = interval_balance
        self._previous_balance = previous_balance
        self._statements = statements

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Statements':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Statements of this Statements.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_balance(self):
        """Gets the current_balance of this Statements.


        :return: The current_balance of this Statements.
        :rtype: float
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this Statements.


        :param current_balance: The current_balance of this Statements.
        :type current_balance: float
        """
        if current_balance is None:
            raise ValueError("Invalid value for `current_balance`, must not be `None`")

        self._current_balance = current_balance

    @property
    def interval_balance(self):
        """Gets the interval_balance of this Statements.


        :return: The interval_balance of this Statements.
        :rtype: float
        """
        return self._interval_balance

    @interval_balance.setter
    def interval_balance(self, interval_balance):
        """Sets the interval_balance of this Statements.


        :param interval_balance: The interval_balance of this Statements.
        :type interval_balance: float
        """
        if interval_balance is None:
            raise ValueError("Invalid value for `interval_balance`, must not be `None`")

        self._interval_balance = interval_balance

    @property
    def previous_balance(self):
        """Gets the previous_balance of this Statements.


        :return: The previous_balance of this Statements.
        :rtype: float
        """
        return self._previous_balance

    @previous_balance.setter
    def previous_balance(self, previous_balance):
        """Sets the previous_balance of this Statements.


        :param previous_balance: The previous_balance of this Statements.
        :type previous_balance: float
        """
        if previous_balance is None:
            raise ValueError("Invalid value for `previous_balance`, must not be `None`")

        self._previous_balance = previous_balance

    @property
    def statements(self):
        """Gets the statements of this Statements.

        

        :return: The statements of this Statements.
        :rtype: List[Statements11]
        """
        return self._statements

    @statements.setter
    def statements(self, statements):
        """Sets the statements of this Statements.

        

        :param statements: The statements of this Statements.
        :type statements: List[Statements11]
        """
        if statements is None:
            raise ValueError("Invalid value for `statements`, must not be `None`")

        self._statements = statements
