/**
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavestoreconfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavestoreconfig::OAISavestoreconfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavestoreconfig::OAISavestoreconfig() {
    this->initializeModel();
}

OAISavestoreconfig::~OAISavestoreconfig() {}

void OAISavestoreconfig::initializeModel() {

    m_daily_interest_rate_isSet = false;
    m_daily_interest_rate_isValid = false;

    m_invoice_postponement_limit_isSet = false;
    m_invoice_postponement_limit_isValid = false;

    m_tax_rate_isSet = false;
    m_tax_rate_isValid = false;

    m_tolerance_percent_isSet = false;
    m_tolerance_percent_isValid = false;
}

void OAISavestoreconfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavestoreconfig::fromJsonObject(QJsonObject json) {

    m_daily_interest_rate_isValid = ::OpenAPI::fromJsonValue(m_daily_interest_rate, json[QString("dailyInterestRate")]);
    m_daily_interest_rate_isSet = !json[QString("dailyInterestRate")].isNull() && m_daily_interest_rate_isValid;

    m_invoice_postponement_limit_isValid = ::OpenAPI::fromJsonValue(m_invoice_postponement_limit, json[QString("invoicePostponementLimit")]);
    m_invoice_postponement_limit_isSet = !json[QString("invoicePostponementLimit")].isNull() && m_invoice_postponement_limit_isValid;

    m_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_tax_rate, json[QString("taxRate")]);
    m_tax_rate_isSet = !json[QString("taxRate")].isNull() && m_tax_rate_isValid;

    m_tolerance_percent_isValid = ::OpenAPI::fromJsonValue(m_tolerance_percent, json[QString("tolerancePercent")]);
    m_tolerance_percent_isSet = !json[QString("tolerancePercent")].isNull() && m_tolerance_percent_isValid;
}

QString OAISavestoreconfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavestoreconfig::asJsonObject() const {
    QJsonObject obj;
    if (m_daily_interest_rate_isSet) {
        obj.insert(QString("dailyInterestRate"), ::OpenAPI::toJsonValue(m_daily_interest_rate));
    }
    if (m_invoice_postponement_limit_isSet) {
        obj.insert(QString("invoicePostponementLimit"), ::OpenAPI::toJsonValue(m_invoice_postponement_limit));
    }
    if (m_tax_rate_isSet) {
        obj.insert(QString("taxRate"), ::OpenAPI::toJsonValue(m_tax_rate));
    }
    if (m_tolerance_percent_isSet) {
        obj.insert(QString("tolerancePercent"), ::OpenAPI::toJsonValue(m_tolerance_percent));
    }
    return obj;
}

double OAISavestoreconfig::getDailyInterestRate() const {
    return m_daily_interest_rate;
}
void OAISavestoreconfig::setDailyInterestRate(const double &daily_interest_rate) {
    m_daily_interest_rate = daily_interest_rate;
    m_daily_interest_rate_isSet = true;
}

bool OAISavestoreconfig::is_daily_interest_rate_Set() const{
    return m_daily_interest_rate_isSet;
}

bool OAISavestoreconfig::is_daily_interest_rate_Valid() const{
    return m_daily_interest_rate_isValid;
}

qint32 OAISavestoreconfig::getInvoicePostponementLimit() const {
    return m_invoice_postponement_limit;
}
void OAISavestoreconfig::setInvoicePostponementLimit(const qint32 &invoice_postponement_limit) {
    m_invoice_postponement_limit = invoice_postponement_limit;
    m_invoice_postponement_limit_isSet = true;
}

bool OAISavestoreconfig::is_invoice_postponement_limit_Set() const{
    return m_invoice_postponement_limit_isSet;
}

bool OAISavestoreconfig::is_invoice_postponement_limit_Valid() const{
    return m_invoice_postponement_limit_isValid;
}

double OAISavestoreconfig::getTaxRate() const {
    return m_tax_rate;
}
void OAISavestoreconfig::setTaxRate(const double &tax_rate) {
    m_tax_rate = tax_rate;
    m_tax_rate_isSet = true;
}

bool OAISavestoreconfig::is_tax_rate_Set() const{
    return m_tax_rate_isSet;
}

bool OAISavestoreconfig::is_tax_rate_Valid() const{
    return m_tax_rate_isValid;
}

double OAISavestoreconfig::getTolerancePercent() const {
    return m_tolerance_percent;
}
void OAISavestoreconfig::setTolerancePercent(const double &tolerance_percent) {
    m_tolerance_percent = tolerance_percent;
    m_tolerance_percent_isSet = true;
}

bool OAISavestoreconfig::is_tolerance_percent_Set() const{
    return m_tolerance_percent_isSet;
}

bool OAISavestoreconfig::is_tolerance_percent_Valid() const{
    return m_tolerance_percent_isValid;
}

bool OAISavestoreconfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_daily_interest_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_postponement_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tolerance_percent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavestoreconfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_daily_interest_rate_isValid && m_invoice_postponement_limit_isValid && m_tax_rate_isValid && m_tolerance_percent_isValid && true;
}

} // namespace OpenAPI
