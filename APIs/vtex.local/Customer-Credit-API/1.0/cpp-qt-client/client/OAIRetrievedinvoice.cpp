/**
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetrievedinvoice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetrievedinvoice::OAIRetrievedinvoice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetrievedinvoice::OAIRetrievedinvoice() {
    this->initializeModel();
}

OAIRetrievedinvoice::~OAIRetrievedinvoice() {}

void OAIRetrievedinvoice::initializeModel() {

    m_checking_account_id_isSet = false;
    m_checking_account_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_observation_isSet = false;
    m_observation_isValid = false;

    m_original_due_date_isSet = false;
    m_original_due_date_isValid = false;

    m_payment_link_isSet = false;
    m_payment_link_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIRetrievedinvoice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetrievedinvoice::fromJsonObject(QJsonObject json) {

    m_checking_account_id_isValid = ::OpenAPI::fromJsonValue(m_checking_account_id, json[QString("checkingAccountId")]);
    m_checking_account_id_isSet = !json[QString("checkingAccountId")].isNull() && m_checking_account_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_observation_isValid = ::OpenAPI::fromJsonValue(m_observation, json[QString("observation")]);
    m_observation_isSet = !json[QString("observation")].isNull() && m_observation_isValid;

    m_original_due_date_isValid = ::OpenAPI::fromJsonValue(m_original_due_date, json[QString("originalDueDate")]);
    m_original_due_date_isSet = !json[QString("originalDueDate")].isNull() && m_original_due_date_isValid;

    m_payment_link_isValid = ::OpenAPI::fromJsonValue(m_payment_link, json[QString("paymentLink")]);
    m_payment_link_isSet = !json[QString("paymentLink")].isNull() && m_payment_link_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIRetrievedinvoice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetrievedinvoice::asJsonObject() const {
    QJsonObject obj;
    if (m_checking_account_id_isSet) {
        obj.insert(QString("checkingAccountId"), ::OpenAPI::toJsonValue(m_checking_account_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_observation_isSet) {
        obj.insert(QString("observation"), ::OpenAPI::toJsonValue(m_observation));
    }
    if (m_original_due_date_isSet) {
        obj.insert(QString("originalDueDate"), ::OpenAPI::toJsonValue(m_original_due_date));
    }
    if (m_payment_link_isSet) {
        obj.insert(QString("paymentLink"), ::OpenAPI::toJsonValue(m_payment_link));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIRetrievedinvoice::getCheckingAccountId() const {
    return m_checking_account_id;
}
void OAIRetrievedinvoice::setCheckingAccountId(const QString &checking_account_id) {
    m_checking_account_id = checking_account_id;
    m_checking_account_id_isSet = true;
}

bool OAIRetrievedinvoice::is_checking_account_id_Set() const{
    return m_checking_account_id_isSet;
}

bool OAIRetrievedinvoice::is_checking_account_id_Valid() const{
    return m_checking_account_id_isValid;
}

QString OAIRetrievedinvoice::getCreatedAt() const {
    return m_created_at;
}
void OAIRetrievedinvoice::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIRetrievedinvoice::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIRetrievedinvoice::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIRetrievedinvoice::getDescription() const {
    return m_description;
}
void OAIRetrievedinvoice::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRetrievedinvoice::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRetrievedinvoice::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRetrievedinvoice::getDueDate() const {
    return m_due_date;
}
void OAIRetrievedinvoice::setDueDate(const QString &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIRetrievedinvoice::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIRetrievedinvoice::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QString OAIRetrievedinvoice::getId() const {
    return m_id;
}
void OAIRetrievedinvoice::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRetrievedinvoice::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRetrievedinvoice::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRetrievedinvoice::getObservation() const {
    return m_observation;
}
void OAIRetrievedinvoice::setObservation(const QString &observation) {
    m_observation = observation;
    m_observation_isSet = true;
}

bool OAIRetrievedinvoice::is_observation_Set() const{
    return m_observation_isSet;
}

bool OAIRetrievedinvoice::is_observation_Valid() const{
    return m_observation_isValid;
}

QString OAIRetrievedinvoice::getOriginalDueDate() const {
    return m_original_due_date;
}
void OAIRetrievedinvoice::setOriginalDueDate(const QString &original_due_date) {
    m_original_due_date = original_due_date;
    m_original_due_date_isSet = true;
}

bool OAIRetrievedinvoice::is_original_due_date_Set() const{
    return m_original_due_date_isSet;
}

bool OAIRetrievedinvoice::is_original_due_date_Valid() const{
    return m_original_due_date_isValid;
}

QString OAIRetrievedinvoice::getPaymentLink() const {
    return m_payment_link;
}
void OAIRetrievedinvoice::setPaymentLink(const QString &payment_link) {
    m_payment_link = payment_link;
    m_payment_link_isSet = true;
}

bool OAIRetrievedinvoice::is_payment_link_Set() const{
    return m_payment_link_isSet;
}

bool OAIRetrievedinvoice::is_payment_link_Valid() const{
    return m_payment_link_isValid;
}

QString OAIRetrievedinvoice::getStatus() const {
    return m_status;
}
void OAIRetrievedinvoice::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRetrievedinvoice::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRetrievedinvoice::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRetrievedinvoice::getUpdatedAt() const {
    return m_updated_at;
}
void OAIRetrievedinvoice::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIRetrievedinvoice::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIRetrievedinvoice::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

double OAIRetrievedinvoice::getValue() const {
    return m_value;
}
void OAIRetrievedinvoice::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIRetrievedinvoice::is_value_Set() const{
    return m_value_isSet;
}

bool OAIRetrievedinvoice::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIRetrievedinvoice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checking_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetrievedinvoice::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_checking_account_id_isValid && m_created_at_isValid && m_description_isValid && m_due_date_isValid && m_id_isValid && m_observation_isValid && m_original_due_date_isValid && m_payment_link_isValid && m_status_isValid && m_updated_at_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
