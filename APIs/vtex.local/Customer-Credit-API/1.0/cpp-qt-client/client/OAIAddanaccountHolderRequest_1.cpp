/**
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddanaccountHolderRequest_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddanaccountHolderRequest_1::OAIAddanaccountHolderRequest_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddanaccountHolderRequest_1::OAIAddanaccountHolderRequest_1() {
    this->initializeModel();
}

OAIAddanaccountHolderRequest_1::~OAIAddanaccountHolderRequest_1() {}

void OAIAddanaccountHolderRequest_1::initializeModel() {

    m_claims_isSet = false;
    m_claims_isValid = false;
}

void OAIAddanaccountHolderRequest_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddanaccountHolderRequest_1::fromJsonObject(QJsonObject json) {

    m_claims_isValid = ::OpenAPI::fromJsonValue(m_claims, json[QString("claims")]);
    m_claims_isSet = !json[QString("claims")].isNull() && m_claims_isValid;
}

QString OAIAddanaccountHolderRequest_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddanaccountHolderRequest_1::asJsonObject() const {
    QJsonObject obj;
    if (m_claims.isSet()) {
        obj.insert(QString("claims"), ::OpenAPI::toJsonValue(m_claims));
    }
    return obj;
}

OAIClaims_1 OAIAddanaccountHolderRequest_1::getClaims() const {
    return m_claims;
}
void OAIAddanaccountHolderRequest_1::setClaims(const OAIClaims_1 &claims) {
    m_claims = claims;
    m_claims_isSet = true;
}

bool OAIAddanaccountHolderRequest_1::is_claims_Set() const{
    return m_claims_isSet;
}

bool OAIAddanaccountHolderRequest_1::is_claims_Valid() const{
    return m_claims_isValid;
}

bool OAIAddanaccountHolderRequest_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_claims.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddanaccountHolderRequest_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_claims_isValid && true;
}

} // namespace OpenAPI
