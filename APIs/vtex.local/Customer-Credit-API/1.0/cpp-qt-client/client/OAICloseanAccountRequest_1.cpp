/**
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloseanAccountRequest_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloseanAccountRequest_1::OAICloseanAccountRequest_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloseanAccountRequest_1::OAICloseanAccountRequest_1() {
    this->initializeModel();
}

OAICloseanAccountRequest_1::~OAICloseanAccountRequest_1() {}

void OAICloseanAccountRequest_1::initializeModel() {

    m_document_isSet = false;
    m_document_isValid = false;

    m_document_type_isSet = false;
    m_document_type_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;
}

void OAICloseanAccountRequest_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloseanAccountRequest_1::fromJsonObject(QJsonObject json) {

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_document_type_isValid = ::OpenAPI::fromJsonValue(m_document_type, json[QString("documentType")]);
    m_document_type_isSet = !json[QString("documentType")].isNull() && m_document_type_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;
}

QString OAICloseanAccountRequest_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloseanAccountRequest_1::asJsonObject() const {
    QJsonObject obj;
    if (m_document_isSet) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_document_type_isSet) {
        obj.insert(QString("documentType"), ::OpenAPI::toJsonValue(m_document_type));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    return obj;
}

QString OAICloseanAccountRequest_1::getDocument() const {
    return m_document;
}
void OAICloseanAccountRequest_1::setDocument(const QString &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAICloseanAccountRequest_1::is_document_Set() const{
    return m_document_isSet;
}

bool OAICloseanAccountRequest_1::is_document_Valid() const{
    return m_document_isValid;
}

QString OAICloseanAccountRequest_1::getDocumentType() const {
    return m_document_type;
}
void OAICloseanAccountRequest_1::setDocumentType(const QString &document_type) {
    m_document_type = document_type;
    m_document_type_isSet = true;
}

bool OAICloseanAccountRequest_1::is_document_type_Set() const{
    return m_document_type_isSet;
}

bool OAICloseanAccountRequest_1::is_document_type_Valid() const{
    return m_document_type_isValid;
}

QString OAICloseanAccountRequest_1::getEmail() const {
    return m_email;
}
void OAICloseanAccountRequest_1::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICloseanAccountRequest_1::is_email_Set() const{
    return m_email_isSet;
}

bool OAICloseanAccountRequest_1::is_email_Valid() const{
    return m_email_isValid;
}

bool OAICloseanAccountRequest_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloseanAccountRequest_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
