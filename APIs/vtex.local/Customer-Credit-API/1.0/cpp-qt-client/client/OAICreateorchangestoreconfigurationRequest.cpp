/**
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateorchangestoreconfigurationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateorchangestoreconfigurationRequest::OAICreateorchangestoreconfigurationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateorchangestoreconfigurationRequest::OAICreateorchangestoreconfigurationRequest() {
    this->initializeModel();
}

OAICreateorchangestoreconfigurationRequest::~OAICreateorchangestoreconfigurationRequest() {}

void OAICreateorchangestoreconfigurationRequest::initializeModel() {

    m_automatic_checking_account_creation_enabled_isSet = false;
    m_automatic_checking_account_creation_enabled_isValid = false;

    m_daily_interest_rate_isSet = false;
    m_daily_interest_rate_isValid = false;

    m_default_credit_value_isSet = false;
    m_default_credit_value_isValid = false;

    m_invoice_postponement_limit_isSet = false;
    m_invoice_postponement_limit_isValid = false;

    m_max_postponement_days_isSet = false;
    m_max_postponement_days_isValid = false;

    m_max_pre_authorization_growth_rate_isSet = false;
    m_max_pre_authorization_growth_rate_isValid = false;

    m_my_credits_enabled_isSet = false;
    m_my_credits_enabled_isValid = false;

    m_postponement_enabled_isSet = false;
    m_postponement_enabled_isValid = false;

    m_tax_rate_isSet = false;
    m_tax_rate_isValid = false;

    m_tolerance_enabled_isSet = false;
    m_tolerance_enabled_isValid = false;
}

void OAICreateorchangestoreconfigurationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateorchangestoreconfigurationRequest::fromJsonObject(QJsonObject json) {

    m_automatic_checking_account_creation_enabled_isValid = ::OpenAPI::fromJsonValue(m_automatic_checking_account_creation_enabled, json[QString("automaticCheckingAccountCreationEnabled")]);
    m_automatic_checking_account_creation_enabled_isSet = !json[QString("automaticCheckingAccountCreationEnabled")].isNull() && m_automatic_checking_account_creation_enabled_isValid;

    m_daily_interest_rate_isValid = ::OpenAPI::fromJsonValue(m_daily_interest_rate, json[QString("dailyInterestRate")]);
    m_daily_interest_rate_isSet = !json[QString("dailyInterestRate")].isNull() && m_daily_interest_rate_isValid;

    m_default_credit_value_isValid = ::OpenAPI::fromJsonValue(m_default_credit_value, json[QString("defaultCreditValue")]);
    m_default_credit_value_isSet = !json[QString("defaultCreditValue")].isNull() && m_default_credit_value_isValid;

    m_invoice_postponement_limit_isValid = ::OpenAPI::fromJsonValue(m_invoice_postponement_limit, json[QString("invoicePostponementLimit")]);
    m_invoice_postponement_limit_isSet = !json[QString("invoicePostponementLimit")].isNull() && m_invoice_postponement_limit_isValid;

    m_max_postponement_days_isValid = ::OpenAPI::fromJsonValue(m_max_postponement_days, json[QString("maxPostponementDays")]);
    m_max_postponement_days_isSet = !json[QString("maxPostponementDays")].isNull() && m_max_postponement_days_isValid;

    m_max_pre_authorization_growth_rate_isValid = ::OpenAPI::fromJsonValue(m_max_pre_authorization_growth_rate, json[QString("maxPreAuthorizationGrowthRate")]);
    m_max_pre_authorization_growth_rate_isSet = !json[QString("maxPreAuthorizationGrowthRate")].isNull() && m_max_pre_authorization_growth_rate_isValid;

    m_my_credits_enabled_isValid = ::OpenAPI::fromJsonValue(m_my_credits_enabled, json[QString("myCreditsEnabled")]);
    m_my_credits_enabled_isSet = !json[QString("myCreditsEnabled")].isNull() && m_my_credits_enabled_isValid;

    m_postponement_enabled_isValid = ::OpenAPI::fromJsonValue(m_postponement_enabled, json[QString("postponementEnabled")]);
    m_postponement_enabled_isSet = !json[QString("postponementEnabled")].isNull() && m_postponement_enabled_isValid;

    m_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_tax_rate, json[QString("taxRate")]);
    m_tax_rate_isSet = !json[QString("taxRate")].isNull() && m_tax_rate_isValid;

    m_tolerance_enabled_isValid = ::OpenAPI::fromJsonValue(m_tolerance_enabled, json[QString("toleranceEnabled")]);
    m_tolerance_enabled_isSet = !json[QString("toleranceEnabled")].isNull() && m_tolerance_enabled_isValid;
}

QString OAICreateorchangestoreconfigurationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateorchangestoreconfigurationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_automatic_checking_account_creation_enabled_isSet) {
        obj.insert(QString("automaticCheckingAccountCreationEnabled"), ::OpenAPI::toJsonValue(m_automatic_checking_account_creation_enabled));
    }
    if (m_daily_interest_rate_isSet) {
        obj.insert(QString("dailyInterestRate"), ::OpenAPI::toJsonValue(m_daily_interest_rate));
    }
    if (m_default_credit_value_isSet) {
        obj.insert(QString("defaultCreditValue"), ::OpenAPI::toJsonValue(m_default_credit_value));
    }
    if (m_invoice_postponement_limit_isSet) {
        obj.insert(QString("invoicePostponementLimit"), ::OpenAPI::toJsonValue(m_invoice_postponement_limit));
    }
    if (m_max_postponement_days_isSet) {
        obj.insert(QString("maxPostponementDays"), ::OpenAPI::toJsonValue(m_max_postponement_days));
    }
    if (m_max_pre_authorization_growth_rate_isSet) {
        obj.insert(QString("maxPreAuthorizationGrowthRate"), ::OpenAPI::toJsonValue(m_max_pre_authorization_growth_rate));
    }
    if (m_my_credits_enabled_isSet) {
        obj.insert(QString("myCreditsEnabled"), ::OpenAPI::toJsonValue(m_my_credits_enabled));
    }
    if (m_postponement_enabled_isSet) {
        obj.insert(QString("postponementEnabled"), ::OpenAPI::toJsonValue(m_postponement_enabled));
    }
    if (m_tax_rate_isSet) {
        obj.insert(QString("taxRate"), ::OpenAPI::toJsonValue(m_tax_rate));
    }
    if (m_tolerance_enabled_isSet) {
        obj.insert(QString("toleranceEnabled"), ::OpenAPI::toJsonValue(m_tolerance_enabled));
    }
    return obj;
}

bool OAICreateorchangestoreconfigurationRequest::isAutomaticCheckingAccountCreationEnabled() const {
    return m_automatic_checking_account_creation_enabled;
}
void OAICreateorchangestoreconfigurationRequest::setAutomaticCheckingAccountCreationEnabled(const bool &automatic_checking_account_creation_enabled) {
    m_automatic_checking_account_creation_enabled = automatic_checking_account_creation_enabled;
    m_automatic_checking_account_creation_enabled_isSet = true;
}

bool OAICreateorchangestoreconfigurationRequest::is_automatic_checking_account_creation_enabled_Set() const{
    return m_automatic_checking_account_creation_enabled_isSet;
}

bool OAICreateorchangestoreconfigurationRequest::is_automatic_checking_account_creation_enabled_Valid() const{
    return m_automatic_checking_account_creation_enabled_isValid;
}

QString OAICreateorchangestoreconfigurationRequest::getDailyInterestRate() const {
    return m_daily_interest_rate;
}
void OAICreateorchangestoreconfigurationRequest::setDailyInterestRate(const QString &daily_interest_rate) {
    m_daily_interest_rate = daily_interest_rate;
    m_daily_interest_rate_isSet = true;
}

bool OAICreateorchangestoreconfigurationRequest::is_daily_interest_rate_Set() const{
    return m_daily_interest_rate_isSet;
}

bool OAICreateorchangestoreconfigurationRequest::is_daily_interest_rate_Valid() const{
    return m_daily_interest_rate_isValid;
}

QString OAICreateorchangestoreconfigurationRequest::getDefaultCreditValue() const {
    return m_default_credit_value;
}
void OAICreateorchangestoreconfigurationRequest::setDefaultCreditValue(const QString &default_credit_value) {
    m_default_credit_value = default_credit_value;
    m_default_credit_value_isSet = true;
}

bool OAICreateorchangestoreconfigurationRequest::is_default_credit_value_Set() const{
    return m_default_credit_value_isSet;
}

bool OAICreateorchangestoreconfigurationRequest::is_default_credit_value_Valid() const{
    return m_default_credit_value_isValid;
}

QString OAICreateorchangestoreconfigurationRequest::getInvoicePostponementLimit() const {
    return m_invoice_postponement_limit;
}
void OAICreateorchangestoreconfigurationRequest::setInvoicePostponementLimit(const QString &invoice_postponement_limit) {
    m_invoice_postponement_limit = invoice_postponement_limit;
    m_invoice_postponement_limit_isSet = true;
}

bool OAICreateorchangestoreconfigurationRequest::is_invoice_postponement_limit_Set() const{
    return m_invoice_postponement_limit_isSet;
}

bool OAICreateorchangestoreconfigurationRequest::is_invoice_postponement_limit_Valid() const{
    return m_invoice_postponement_limit_isValid;
}

QString OAICreateorchangestoreconfigurationRequest::getMaxPostponementDays() const {
    return m_max_postponement_days;
}
void OAICreateorchangestoreconfigurationRequest::setMaxPostponementDays(const QString &max_postponement_days) {
    m_max_postponement_days = max_postponement_days;
    m_max_postponement_days_isSet = true;
}

bool OAICreateorchangestoreconfigurationRequest::is_max_postponement_days_Set() const{
    return m_max_postponement_days_isSet;
}

bool OAICreateorchangestoreconfigurationRequest::is_max_postponement_days_Valid() const{
    return m_max_postponement_days_isValid;
}

QString OAICreateorchangestoreconfigurationRequest::getMaxPreAuthorizationGrowthRate() const {
    return m_max_pre_authorization_growth_rate;
}
void OAICreateorchangestoreconfigurationRequest::setMaxPreAuthorizationGrowthRate(const QString &max_pre_authorization_growth_rate) {
    m_max_pre_authorization_growth_rate = max_pre_authorization_growth_rate;
    m_max_pre_authorization_growth_rate_isSet = true;
}

bool OAICreateorchangestoreconfigurationRequest::is_max_pre_authorization_growth_rate_Set() const{
    return m_max_pre_authorization_growth_rate_isSet;
}

bool OAICreateorchangestoreconfigurationRequest::is_max_pre_authorization_growth_rate_Valid() const{
    return m_max_pre_authorization_growth_rate_isValid;
}

bool OAICreateorchangestoreconfigurationRequest::isMyCreditsEnabled() const {
    return m_my_credits_enabled;
}
void OAICreateorchangestoreconfigurationRequest::setMyCreditsEnabled(const bool &my_credits_enabled) {
    m_my_credits_enabled = my_credits_enabled;
    m_my_credits_enabled_isSet = true;
}

bool OAICreateorchangestoreconfigurationRequest::is_my_credits_enabled_Set() const{
    return m_my_credits_enabled_isSet;
}

bool OAICreateorchangestoreconfigurationRequest::is_my_credits_enabled_Valid() const{
    return m_my_credits_enabled_isValid;
}

bool OAICreateorchangestoreconfigurationRequest::isPostponementEnabled() const {
    return m_postponement_enabled;
}
void OAICreateorchangestoreconfigurationRequest::setPostponementEnabled(const bool &postponement_enabled) {
    m_postponement_enabled = postponement_enabled;
    m_postponement_enabled_isSet = true;
}

bool OAICreateorchangestoreconfigurationRequest::is_postponement_enabled_Set() const{
    return m_postponement_enabled_isSet;
}

bool OAICreateorchangestoreconfigurationRequest::is_postponement_enabled_Valid() const{
    return m_postponement_enabled_isValid;
}

QString OAICreateorchangestoreconfigurationRequest::getTaxRate() const {
    return m_tax_rate;
}
void OAICreateorchangestoreconfigurationRequest::setTaxRate(const QString &tax_rate) {
    m_tax_rate = tax_rate;
    m_tax_rate_isSet = true;
}

bool OAICreateorchangestoreconfigurationRequest::is_tax_rate_Set() const{
    return m_tax_rate_isSet;
}

bool OAICreateorchangestoreconfigurationRequest::is_tax_rate_Valid() const{
    return m_tax_rate_isValid;
}

bool OAICreateorchangestoreconfigurationRequest::isToleranceEnabled() const {
    return m_tolerance_enabled;
}
void OAICreateorchangestoreconfigurationRequest::setToleranceEnabled(const bool &tolerance_enabled) {
    m_tolerance_enabled = tolerance_enabled;
    m_tolerance_enabled_isSet = true;
}

bool OAICreateorchangestoreconfigurationRequest::is_tolerance_enabled_Set() const{
    return m_tolerance_enabled_isSet;
}

bool OAICreateorchangestoreconfigurationRequest::is_tolerance_enabled_Valid() const{
    return m_tolerance_enabled_isValid;
}

bool OAICreateorchangestoreconfigurationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automatic_checking_account_creation_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_interest_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_credit_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_postponement_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_postponement_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_pre_authorization_growth_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_my_credits_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postponement_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tolerance_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateorchangestoreconfigurationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_automatic_checking_account_creation_enabled_isValid && m_daily_interest_rate_isValid && m_default_credit_value_isValid && m_invoice_postponement_limit_isValid && m_max_postponement_days_isValid && m_max_pre_authorization_growth_rate_isValid && m_my_credits_enabled_isValid && m_postponement_enabled_isValid && m_tax_rate_isValid && m_tolerance_enabled_isValid && true;
}

} // namespace OpenAPI
