/**
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatum2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatum2::OAIDatum2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatum2::OAIDatum2() {
    this->initializeModel();
}

OAIDatum2::~OAIDatum2() {}

void OAIDatum2::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_credit_limit_isSet = false;
    m_credit_limit_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_document_isSet = false;
    m_document_isValid = false;

    m_document_type_isSet = false;
    m_document_type_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_last_update_isSet = false;
    m_last_update_isValid = false;
}

void OAIDatum2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatum2::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_credit_limit_isValid = ::OpenAPI::fromJsonValue(m_credit_limit, json[QString("creditLimit")]);
    m_credit_limit_isSet = !json[QString("creditLimit")].isNull() && m_credit_limit_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_document_type_isValid = ::OpenAPI::fromJsonValue(m_document_type, json[QString("documentType")]);
    m_document_type_isSet = !json[QString("documentType")].isNull() && m_document_type_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_last_update_isValid = ::OpenAPI::fromJsonValue(m_last_update, json[QString("lastUpdate")]);
    m_last_update_isSet = !json[QString("lastUpdate")].isNull() && m_last_update_isValid;
}

QString OAIDatum2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatum2::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_credit_limit_isSet) {
        obj.insert(QString("creditLimit"), ::OpenAPI::toJsonValue(m_credit_limit));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_document_isSet) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_document_type_isSet) {
        obj.insert(QString("documentType"), ::OpenAPI::toJsonValue(m_document_type));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_last_update_isSet) {
        obj.insert(QString("lastUpdate"), ::OpenAPI::toJsonValue(m_last_update));
    }
    return obj;
}

QString OAIDatum2::getAccount() const {
    return m_account;
}
void OAIDatum2::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIDatum2::is_account_Set() const{
    return m_account_isSet;
}

bool OAIDatum2::is_account_Valid() const{
    return m_account_isValid;
}

double OAIDatum2::getBalance() const {
    return m_balance;
}
void OAIDatum2::setBalance(const double &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIDatum2::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIDatum2::is_balance_Valid() const{
    return m_balance_isValid;
}

double OAIDatum2::getCreditLimit() const {
    return m_credit_limit;
}
void OAIDatum2::setCreditLimit(const double &credit_limit) {
    m_credit_limit = credit_limit;
    m_credit_limit_isSet = true;
}

bool OAIDatum2::is_credit_limit_Set() const{
    return m_credit_limit_isSet;
}

bool OAIDatum2::is_credit_limit_Valid() const{
    return m_credit_limit_isValid;
}

QString OAIDatum2::getDescription() const {
    return m_description;
}
void OAIDatum2::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDatum2::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDatum2::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDatum2::getDocument() const {
    return m_document;
}
void OAIDatum2::setDocument(const QString &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIDatum2::is_document_Set() const{
    return m_document_isSet;
}

bool OAIDatum2::is_document_Valid() const{
    return m_document_isValid;
}

QString OAIDatum2::getDocumentType() const {
    return m_document_type;
}
void OAIDatum2::setDocumentType(const QString &document_type) {
    m_document_type = document_type;
    m_document_type_isSet = true;
}

bool OAIDatum2::is_document_type_Set() const{
    return m_document_type_isSet;
}

bool OAIDatum2::is_document_type_Valid() const{
    return m_document_type_isValid;
}

QString OAIDatum2::getEmail() const {
    return m_email;
}
void OAIDatum2::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIDatum2::is_email_Set() const{
    return m_email_isSet;
}

bool OAIDatum2::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIDatum2::getLastUpdate() const {
    return m_last_update;
}
void OAIDatum2::setLastUpdate(const QString &last_update) {
    m_last_update = last_update;
    m_last_update_isSet = true;
}

bool OAIDatum2::is_last_update_Set() const{
    return m_last_update_isSet;
}

bool OAIDatum2::is_last_update_Valid() const{
    return m_last_update_isValid;
}

bool OAIDatum2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatum2::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_isValid && m_balance_isValid && m_credit_limit_isValid && m_description_isValid && m_document_isValid && m_document_type_isValid && m_email_isValid && m_last_update_isValid && true;
}

} // namespace OpenAPI
