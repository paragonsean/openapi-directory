/**
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountApi_H
#define OAI_OAIAccountApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddanaccountHolderRequest_1.h"
#include "OAIChangecreditlimitofanAccountRequest_1.h"
#include "OAIChangetoleranceofanaccountRequest_1.h"
#include "OAICloseanAccountRequest_1.h"
#include "OAICreateaPreAuthorizationRequest_1.h"
#include "OAICreateaPreAuthorization_usingid__request.h"
#include "OAICreateorUpdateSettlementRequest_1.h"
#include "OAIDecreasebalanceofanaccountRequest_1.h"
#include "OAIGetaccount_1.h"
#include "OAIObject.h"
#include "OAIOpenanAccountRequest_1.h"
#include "OAIOpenorChangeAccountRequest_1.h"
#include "OAIPartialorTotalRefundaSettlementRequest_1.h"
#include "OAISearchaccounts_1.h"
#include "OAISearchcheckingaccounts_1.h"
#include "OAIStatements_1.h"
#include "OAIThisoperationcausesthecreationofNinvoices_whereNisthenumberofinstallments_Thefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice_.h"
#include "OAIUpdateemailanddescriptionofaaccountRequest_1.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountApi : public QObject {
    Q_OBJECT

public:
    OAIAccountApi(const int timeOut = 0);
    ~OAIAccountApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  credit_account_id QString [required]
    */
    virtual void accountstatements(const QString &content_type, const QString &accept, const QString &credit_account_id);

    /**
    * @param[in]  credit_account_id QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_addanaccount_holder_request_1 OAIAddanaccountHolderRequest_1 [required]
    */
    virtual void addanaccountHolder(const QString &credit_account_id, const QString &accept, const QString &content_type, const OAIAddanaccountHolderRequest_1 &oai_addanaccount_holder_request_1);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  credit_account_id QString [required]
    * @param[in]  transaction_id QString [required]
    */
    virtual void cancelaPreAuthorization(const QString &content_type, const QString &accept, const QString &credit_account_id, const QString &transaction_id);

    /**
    * @param[in]  credit_account_id QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_changecreditlimitofan_account_request_1 OAIChangecreditlimitofanAccountRequest_1 [required]
    */
    virtual void changecreditlimitofanAccount(const QString &credit_account_id, const QString &accept, const QString &content_type, const OAIChangecreditlimitofanAccountRequest_1 &oai_changecreditlimitofan_account_request_1);

    /**
    * @param[in]  credit_account_id QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_changetoleranceofanaccount_request_1 OAIChangetoleranceofanaccountRequest_1 [required]
    */
    virtual void changetoleranceofanaccount(const QString &credit_account_id, const QString &accept, const QString &content_type, const OAIChangetoleranceofanaccountRequest_1 &oai_changetoleranceofanaccount_request_1);

    /**
    * @param[in]  credit_account_id QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_closean_account_request_1 OAICloseanAccountRequest_1 [required]
    */
    virtual void closeanAccount(const QString &credit_account_id, const QString &accept, const QString &content_type, const OAICloseanAccountRequest_1 &oai_closean_account_request_1);

    /**
    * @param[in]  credit_account_id QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_createa_pre_authorization_request_1 OAICreateaPreAuthorizationRequest_1 [required]
    */
    virtual void createaPreAuthorization(const QString &credit_account_id, const QString &accept, const QString &content_type, const OAICreateaPreAuthorizationRequest_1 &oai_createa_pre_authorization_request_1);

    /**
    * @param[in]  credit_account_id QString [required]
    * @param[in]  transaction_id QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_createa_pre_authorization_usingid__request OAICreateaPreAuthorization_usingid__request [required]
    */
    virtual void createaPreAuthorization_usingid(const QString &credit_account_id, const QString &transaction_id, const QString &accept, const QString &content_type, const OAICreateaPreAuthorization_usingid__request &oai_createa_pre_authorization_usingid__request);

    /**
    * @param[in]  credit_account_id QString [required]
    * @param[in]  transaction_id QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_createor_update_settlement_request_1 OAICreateorUpdateSettlementRequest_1 [required]
    */
    virtual void createorUpdateSettlement(const QString &credit_account_id, const QString &transaction_id, const QString &accept, const QString &content_type, const OAICreateorUpdateSettlementRequest_1 &oai_createor_update_settlement_request_1);

    /**
    * @param[in]  credit_account_id QString [required]
    * @param[in]  statement_id QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_decreasebalanceofanaccount_request_1 OAIDecreasebalanceofanaccountRequest_1 [required]
    */
    virtual void decreasebalanceofanaccount(const QString &credit_account_id, const QString &statement_id, const QString &accept, const QString &content_type, const OAIDecreasebalanceofanaccountRequest_1 &oai_decreasebalanceofanaccount_request_1);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  credit_account_id QString [required]
    * @param[in]  holder_id QString [required]
    */
    virtual void deleteanaccountholder(const QString &content_type, const QString &accept, const QString &credit_account_id, const QString &holder_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_openan_account_request_1 OAIOpenanAccountRequest_1 [required]
    */
    virtual void openanAccount(const QString &accept, const QString &content_type, const OAIOpenanAccountRequest_1 &oai_openan_account_request_1);

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_openor_change_account_request_1 OAIOpenorChangeAccountRequest_1 [optional]
    */
    virtual void openorChangeAccount(const QString &account_id, const QString &accept, const QString &content_type, const ::OpenAPI::OptionalParam<OAIOpenorChangeAccountRequest_1> &oai_openor_change_account_request_1 = ::OpenAPI::OptionalParam<OAIOpenorChangeAccountRequest_1>());

    /**
    * @param[in]  credit_account_id QString [required]
    * @param[in]  transaction_id QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_partialor_total_refunda_settlement_request_1 OAIPartialorTotalRefundaSettlementRequest_1 [required]
    */
    virtual void partialorTotalRefundaSettlement(const QString &credit_account_id, const QString &transaction_id, const QString &accept, const QString &content_type, const OAIPartialorTotalRefundaSettlementRequest_1 &oai_partialor_total_refunda_settlement_request_1);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  credit_account_id QString [required]
    */
    virtual void retrieveaAccountbyId(const QString &content_type, const QString &accept, const QString &credit_account_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void searchallaccounts(const QString &content_type, const QString &accept);

    /**
    * @param[in]  credit_account_id QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_updateemailanddescriptionofaaccount_request_1 OAIUpdateemailanddescriptionofaaccountRequest_1 [required]
    */
    virtual void updateemailanddescriptionofaaccount(const QString &credit_account_id, const QString &accept, const QString &content_type, const OAIUpdateemailanddescriptionofaaccountRequest_1 &oai_updateemailanddescriptionofaaccount_request_1);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountstatementsCallback(OAIHttpRequestWorker *worker);
    void addanaccountHolderCallback(OAIHttpRequestWorker *worker);
    void cancelaPreAuthorizationCallback(OAIHttpRequestWorker *worker);
    void changecreditlimitofanAccountCallback(OAIHttpRequestWorker *worker);
    void changetoleranceofanaccountCallback(OAIHttpRequestWorker *worker);
    void closeanAccountCallback(OAIHttpRequestWorker *worker);
    void createaPreAuthorizationCallback(OAIHttpRequestWorker *worker);
    void createaPreAuthorization_usingidCallback(OAIHttpRequestWorker *worker);
    void createorUpdateSettlementCallback(OAIHttpRequestWorker *worker);
    void decreasebalanceofanaccountCallback(OAIHttpRequestWorker *worker);
    void deleteanaccountholderCallback(OAIHttpRequestWorker *worker);
    void openanAccountCallback(OAIHttpRequestWorker *worker);
    void openorChangeAccountCallback(OAIHttpRequestWorker *worker);
    void partialorTotalRefundaSettlementCallback(OAIHttpRequestWorker *worker);
    void retrieveaAccountbyIdCallback(OAIHttpRequestWorker *worker);
    void searchallaccountsCallback(OAIHttpRequestWorker *worker);
    void updateemailanddescriptionofaaccountCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountstatementsSignal(OAIStatements_1 summary);
    void addanaccountHolderSignal(OAISearchcheckingaccounts_1 summary);
    void cancelaPreAuthorizationSignal();
    void changecreditlimitofanAccountSignal(OAIObject summary);
    void changetoleranceofanaccountSignal(OAIObject summary);
    void closeanAccountSignal();
    void createaPreAuthorizationSignal();
    void createaPreAuthorization_usingidSignal();
    void createorUpdateSettlementSignal(OAIThisoperationcausesthecreationofNinvoices_whereNisthenumberofinstallments_Thefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice_ summary);
    void decreasebalanceofanaccountSignal();
    void deleteanaccountholderSignal(OAISearchcheckingaccounts_1 summary);
    void openanAccountSignal(QString summary);
    void openorChangeAccountSignal(QString summary);
    void partialorTotalRefundaSettlementSignal(OAIThisoperationcausesthecreationofNinvoices_whereNisthenumberofinstallments_Thefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice_ summary);
    void retrieveaAccountbyIdSignal(OAIGetaccount_1 summary);
    void searchallaccountsSignal(OAISearchaccounts_1 summary);
    void updateemailanddescriptionofaaccountSignal(QString summary);


    void accountstatementsSignalFull(OAIHttpRequestWorker *worker, OAIStatements_1 summary);
    void addanaccountHolderSignalFull(OAIHttpRequestWorker *worker, OAISearchcheckingaccounts_1 summary);
    void cancelaPreAuthorizationSignalFull(OAIHttpRequestWorker *worker);
    void changecreditlimitofanAccountSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void changetoleranceofanaccountSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void closeanAccountSignalFull(OAIHttpRequestWorker *worker);
    void createaPreAuthorizationSignalFull(OAIHttpRequestWorker *worker);
    void createaPreAuthorization_usingidSignalFull(OAIHttpRequestWorker *worker);
    void createorUpdateSettlementSignalFull(OAIHttpRequestWorker *worker, OAIThisoperationcausesthecreationofNinvoices_whereNisthenumberofinstallments_Thefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice_ summary);
    void decreasebalanceofanaccountSignalFull(OAIHttpRequestWorker *worker);
    void deleteanaccountholderSignalFull(OAIHttpRequestWorker *worker, OAISearchcheckingaccounts_1 summary);
    void openanAccountSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void openorChangeAccountSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void partialorTotalRefundaSettlementSignalFull(OAIHttpRequestWorker *worker, OAIThisoperationcausesthecreationofNinvoices_whereNisthenumberofinstallments_Thefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice_ summary);
    void retrieveaAccountbyIdSignalFull(OAIHttpRequestWorker *worker, OAIGetaccount_1 summary);
    void searchallaccountsSignalFull(OAIHttpRequestWorker *worker, OAISearchaccounts_1 summary);
    void updateemailanddescriptionofaaccountSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use accountstatementsSignalError() instead")
    void accountstatementsSignalE(OAIStatements_1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountstatementsSignalError(OAIStatements_1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addanaccountHolderSignalError() instead")
    void addanaccountHolderSignalE(OAISearchcheckingaccounts_1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addanaccountHolderSignalError(OAISearchcheckingaccounts_1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelaPreAuthorizationSignalError() instead")
    void cancelaPreAuthorizationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelaPreAuthorizationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changecreditlimitofanAccountSignalError() instead")
    void changecreditlimitofanAccountSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changecreditlimitofanAccountSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changetoleranceofanaccountSignalError() instead")
    void changetoleranceofanaccountSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changetoleranceofanaccountSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use closeanAccountSignalError() instead")
    void closeanAccountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void closeanAccountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createaPreAuthorizationSignalError() instead")
    void createaPreAuthorizationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createaPreAuthorizationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createaPreAuthorization_usingidSignalError() instead")
    void createaPreAuthorization_usingidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createaPreAuthorization_usingidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createorUpdateSettlementSignalError() instead")
    void createorUpdateSettlementSignalE(OAIThisoperationcausesthecreationofNinvoices_whereNisthenumberofinstallments_Thefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createorUpdateSettlementSignalError(OAIThisoperationcausesthecreationofNinvoices_whereNisthenumberofinstallments_Thefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use decreasebalanceofanaccountSignalError() instead")
    void decreasebalanceofanaccountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void decreasebalanceofanaccountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteanaccountholderSignalError() instead")
    void deleteanaccountholderSignalE(OAISearchcheckingaccounts_1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteanaccountholderSignalError(OAISearchcheckingaccounts_1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use openanAccountSignalError() instead")
    void openanAccountSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void openanAccountSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use openorChangeAccountSignalError() instead")
    void openorChangeAccountSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void openorChangeAccountSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partialorTotalRefundaSettlementSignalError() instead")
    void partialorTotalRefundaSettlementSignalE(OAIThisoperationcausesthecreationofNinvoices_whereNisthenumberofinstallments_Thefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partialorTotalRefundaSettlementSignalError(OAIThisoperationcausesthecreationofNinvoices_whereNisthenumberofinstallments_Thefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveaAccountbyIdSignalError() instead")
    void retrieveaAccountbyIdSignalE(OAIGetaccount_1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveaAccountbyIdSignalError(OAIGetaccount_1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchallaccountsSignalError() instead")
    void searchallaccountsSignalE(OAISearchaccounts_1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchallaccountsSignalError(OAISearchaccounts_1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateemailanddescriptionofaaccountSignalError() instead")
    void updateemailanddescriptionofaaccountSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateemailanddescriptionofaaccountSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountstatementsSignalErrorFull() instead")
    void accountstatementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountstatementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addanaccountHolderSignalErrorFull() instead")
    void addanaccountHolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addanaccountHolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelaPreAuthorizationSignalErrorFull() instead")
    void cancelaPreAuthorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelaPreAuthorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changecreditlimitofanAccountSignalErrorFull() instead")
    void changecreditlimitofanAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changecreditlimitofanAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changetoleranceofanaccountSignalErrorFull() instead")
    void changetoleranceofanaccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changetoleranceofanaccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use closeanAccountSignalErrorFull() instead")
    void closeanAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void closeanAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createaPreAuthorizationSignalErrorFull() instead")
    void createaPreAuthorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createaPreAuthorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createaPreAuthorization_usingidSignalErrorFull() instead")
    void createaPreAuthorization_usingidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createaPreAuthorization_usingidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createorUpdateSettlementSignalErrorFull() instead")
    void createorUpdateSettlementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createorUpdateSettlementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use decreasebalanceofanaccountSignalErrorFull() instead")
    void decreasebalanceofanaccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void decreasebalanceofanaccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteanaccountholderSignalErrorFull() instead")
    void deleteanaccountholderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteanaccountholderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use openanAccountSignalErrorFull() instead")
    void openanAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void openanAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use openorChangeAccountSignalErrorFull() instead")
    void openorChangeAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void openorChangeAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partialorTotalRefundaSettlementSignalErrorFull() instead")
    void partialorTotalRefundaSettlementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partialorTotalRefundaSettlementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveaAccountbyIdSignalErrorFull() instead")
    void retrieveaAccountbyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveaAccountbyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchallaccountsSignalErrorFull() instead")
    void searchallaccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchallaccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateemailanddescriptionofaaccountSignalErrorFull() instead")
    void updateemailanddescriptionofaaccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateemailanddescriptionofaaccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
