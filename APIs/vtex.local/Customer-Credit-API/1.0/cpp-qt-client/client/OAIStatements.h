/**
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStatements.h
 *
 * 
 */

#ifndef OAIStatements_H
#define OAIStatements_H

#include <QJsonObject>

#include "OAIStatements1_1.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStatements1_1;

class OAIStatements : public OAIObject {
public:
    OAIStatements();
    OAIStatements(QString json);
    ~OAIStatements() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCurrentBalance() const;
    void setCurrentBalance(const double &current_balance);
    bool is_current_balance_Set() const;
    bool is_current_balance_Valid() const;

    double getIntervalBalance() const;
    void setIntervalBalance(const double &interval_balance);
    bool is_interval_balance_Set() const;
    bool is_interval_balance_Valid() const;

    double getPreviousBalance() const;
    void setPreviousBalance(const double &previous_balance);
    bool is_previous_balance_Set() const;
    bool is_previous_balance_Valid() const;

    QList<OAIStatements1_1> getStatements() const;
    void setStatements(const QList<OAIStatements1_1> &statements);
    bool is_statements_Set() const;
    bool is_statements_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_current_balance;
    bool m_current_balance_isSet;
    bool m_current_balance_isValid;

    double m_interval_balance;
    bool m_interval_balance_isSet;
    bool m_interval_balance_isValid;

    double m_previous_balance;
    bool m_previous_balance_isSet;
    bool m_previous_balance_isValid;

    QList<OAIStatements1_1> m_statements;
    bool m_statements_isSet;
    bool m_statements_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStatements)

#endif // OAIStatements_H
