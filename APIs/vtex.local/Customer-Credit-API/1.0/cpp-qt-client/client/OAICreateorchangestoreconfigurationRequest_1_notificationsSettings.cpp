/**
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateorchangestoreconfigurationRequest_1_notificationsSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateorchangestoreconfigurationRequest_1_notificationsSettings::OAICreateorchangestoreconfigurationRequest_1_notificationsSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateorchangestoreconfigurationRequest_1_notificationsSettings::OAICreateorchangestoreconfigurationRequest_1_notificationsSettings() {
    this->initializeModel();
}

OAICreateorchangestoreconfigurationRequest_1_notificationsSettings::~OAICreateorchangestoreconfigurationRequest_1_notificationsSettings() {}

void OAICreateorchangestoreconfigurationRequest_1_notificationsSettings::initializeModel() {

    m_days_after_isSet = false;
    m_days_after_isValid = false;

    m_days_prior_isSet = false;
    m_days_prior_isValid = false;
}

void OAICreateorchangestoreconfigurationRequest_1_notificationsSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateorchangestoreconfigurationRequest_1_notificationsSettings::fromJsonObject(QJsonObject json) {

    m_days_after_isValid = ::OpenAPI::fromJsonValue(m_days_after, json[QString("daysAfter")]);
    m_days_after_isSet = !json[QString("daysAfter")].isNull() && m_days_after_isValid;

    m_days_prior_isValid = ::OpenAPI::fromJsonValue(m_days_prior, json[QString("daysPrior")]);
    m_days_prior_isSet = !json[QString("daysPrior")].isNull() && m_days_prior_isValid;
}

QString OAICreateorchangestoreconfigurationRequest_1_notificationsSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateorchangestoreconfigurationRequest_1_notificationsSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_days_after.size() > 0) {
        obj.insert(QString("daysAfter"), ::OpenAPI::toJsonValue(m_days_after));
    }
    if (m_days_prior.size() > 0) {
        obj.insert(QString("daysPrior"), ::OpenAPI::toJsonValue(m_days_prior));
    }
    return obj;
}

QList<OAICreateorchangestoreconfigurationRequest_1_notificationsSettings_daysAfter_inner> OAICreateorchangestoreconfigurationRequest_1_notificationsSettings::getDaysAfter() const {
    return m_days_after;
}
void OAICreateorchangestoreconfigurationRequest_1_notificationsSettings::setDaysAfter(const QList<OAICreateorchangestoreconfigurationRequest_1_notificationsSettings_daysAfter_inner> &days_after) {
    m_days_after = days_after;
    m_days_after_isSet = true;
}

bool OAICreateorchangestoreconfigurationRequest_1_notificationsSettings::is_days_after_Set() const{
    return m_days_after_isSet;
}

bool OAICreateorchangestoreconfigurationRequest_1_notificationsSettings::is_days_after_Valid() const{
    return m_days_after_isValid;
}

QList<OAICreateorchangestoreconfigurationRequest_1_notificationsSettings_daysPrior_inner> OAICreateorchangestoreconfigurationRequest_1_notificationsSettings::getDaysPrior() const {
    return m_days_prior;
}
void OAICreateorchangestoreconfigurationRequest_1_notificationsSettings::setDaysPrior(const QList<OAICreateorchangestoreconfigurationRequest_1_notificationsSettings_daysPrior_inner> &days_prior) {
    m_days_prior = days_prior;
    m_days_prior_isSet = true;
}

bool OAICreateorchangestoreconfigurationRequest_1_notificationsSettings::is_days_prior_Set() const{
    return m_days_prior_isSet;
}

bool OAICreateorchangestoreconfigurationRequest_1_notificationsSettings::is_days_prior_Valid() const{
    return m_days_prior_isValid;
}

bool OAICreateorchangestoreconfigurationRequest_1_notificationsSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_days_after.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_prior.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateorchangestoreconfigurationRequest_1_notificationsSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
