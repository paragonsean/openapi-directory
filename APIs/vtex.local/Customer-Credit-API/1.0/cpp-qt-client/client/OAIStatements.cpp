/**
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatements.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatements::OAIStatements(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatements::OAIStatements() {
    this->initializeModel();
}

OAIStatements::~OAIStatements() {}

void OAIStatements::initializeModel() {

    m_current_balance_isSet = false;
    m_current_balance_isValid = false;

    m_interval_balance_isSet = false;
    m_interval_balance_isValid = false;

    m_previous_balance_isSet = false;
    m_previous_balance_isValid = false;

    m_statements_isSet = false;
    m_statements_isValid = false;
}

void OAIStatements::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatements::fromJsonObject(QJsonObject json) {

    m_current_balance_isValid = ::OpenAPI::fromJsonValue(m_current_balance, json[QString("currentBalance")]);
    m_current_balance_isSet = !json[QString("currentBalance")].isNull() && m_current_balance_isValid;

    m_interval_balance_isValid = ::OpenAPI::fromJsonValue(m_interval_balance, json[QString("intervalBalance")]);
    m_interval_balance_isSet = !json[QString("intervalBalance")].isNull() && m_interval_balance_isValid;

    m_previous_balance_isValid = ::OpenAPI::fromJsonValue(m_previous_balance, json[QString("previousBalance")]);
    m_previous_balance_isSet = !json[QString("previousBalance")].isNull() && m_previous_balance_isValid;

    m_statements_isValid = ::OpenAPI::fromJsonValue(m_statements, json[QString("statements")]);
    m_statements_isSet = !json[QString("statements")].isNull() && m_statements_isValid;
}

QString OAIStatements::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatements::asJsonObject() const {
    QJsonObject obj;
    if (m_current_balance_isSet) {
        obj.insert(QString("currentBalance"), ::OpenAPI::toJsonValue(m_current_balance));
    }
    if (m_interval_balance_isSet) {
        obj.insert(QString("intervalBalance"), ::OpenAPI::toJsonValue(m_interval_balance));
    }
    if (m_previous_balance_isSet) {
        obj.insert(QString("previousBalance"), ::OpenAPI::toJsonValue(m_previous_balance));
    }
    if (m_statements.size() > 0) {
        obj.insert(QString("statements"), ::OpenAPI::toJsonValue(m_statements));
    }
    return obj;
}

double OAIStatements::getCurrentBalance() const {
    return m_current_balance;
}
void OAIStatements::setCurrentBalance(const double &current_balance) {
    m_current_balance = current_balance;
    m_current_balance_isSet = true;
}

bool OAIStatements::is_current_balance_Set() const{
    return m_current_balance_isSet;
}

bool OAIStatements::is_current_balance_Valid() const{
    return m_current_balance_isValid;
}

double OAIStatements::getIntervalBalance() const {
    return m_interval_balance;
}
void OAIStatements::setIntervalBalance(const double &interval_balance) {
    m_interval_balance = interval_balance;
    m_interval_balance_isSet = true;
}

bool OAIStatements::is_interval_balance_Set() const{
    return m_interval_balance_isSet;
}

bool OAIStatements::is_interval_balance_Valid() const{
    return m_interval_balance_isValid;
}

double OAIStatements::getPreviousBalance() const {
    return m_previous_balance;
}
void OAIStatements::setPreviousBalance(const double &previous_balance) {
    m_previous_balance = previous_balance;
    m_previous_balance_isSet = true;
}

bool OAIStatements::is_previous_balance_Set() const{
    return m_previous_balance_isSet;
}

bool OAIStatements::is_previous_balance_Valid() const{
    return m_previous_balance_isValid;
}

QList<OAIStatements1_1> OAIStatements::getStatements() const {
    return m_statements;
}
void OAIStatements::setStatements(const QList<OAIStatements1_1> &statements) {
    m_statements = statements;
    m_statements_isSet = true;
}

bool OAIStatements::is_statements_Set() const{
    return m_statements_isSet;
}

bool OAIStatements::is_statements_Valid() const{
    return m_statements_isValid;
}

bool OAIStatements::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statements.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatements::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_balance_isValid && m_interval_balance_isValid && m_previous_balance_isValid && m_statements_isValid && true;
}

} // namespace OpenAPI
