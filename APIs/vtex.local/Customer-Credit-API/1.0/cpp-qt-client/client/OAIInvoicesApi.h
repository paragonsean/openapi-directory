/**
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInvoicesApi_H
#define OAI_OAIInvoicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChangeInvoiceRequest_1.h"
#include "OAIGetinvoicesfromacheckingaccount_1.h"
#include "OAIMarkaninvoiceasPaidRequest_1.h"
#include "OAIObject.h"
#include "OAIPaidinvoices_1.h"
#include "OAIPostponeaninvoiceRequest_1.h"
#include "OAIRetrievedinvoice_1.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInvoicesApi : public QObject {
    Q_OBJECT

public:
    OAIInvoicesApi(const int timeOut = 0);
    ~OAIInvoicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  credit_account_id QString [required]
    * @param[in]  invoice_id QString [required]
    */
    virtual void cancelInvoice(const QString &content_type, const QString &accept, const QString &credit_account_id, const QString &invoice_id);

    /**
    * @param[in]  credit_account_id QString [required]
    * @param[in]  invoice_id QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_change_invoice_request_1 OAIChangeInvoiceRequest_1 [required]
    * @param[in]  friendly_id QString [optional]
    */
    virtual void changeInvoice(const QString &credit_account_id, const QString &invoice_id, const QString &accept, const QString &content_type, const OAIChangeInvoiceRequest_1 &oai_change_invoice_request_1, const ::OpenAPI::OptionalParam<QString> &friendly_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  credit_account_id QString [required]
    * @param[in]  invoice_id QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_markaninvoiceas_paid_request_1 OAIMarkaninvoiceasPaidRequest_1 [required]
    */
    virtual void markaninvoiceasPaid(const QString &credit_account_id, const QString &invoice_id, const QString &accept, const QString &content_type, const OAIMarkaninvoiceasPaidRequest_1 &oai_markaninvoiceas_paid_request_1);

    /**
    * @param[in]  credit_account_id QString [required]
    * @param[in]  invoice_id QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_postponeaninvoice_request_1 OAIPostponeaninvoiceRequest_1 [required]
    */
    virtual void postponeaninvoice(const QString &credit_account_id, const QString &invoice_id, const QString &accept, const QString &content_type, const OAIPostponeaninvoiceRequest_1 &oai_postponeaninvoice_request_1);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  credit_account_id QString [required]
    * @param[in]  invoice_id QString [required]
    */
    virtual void retrieveInvoicebyId(const QString &content_type, const QString &accept, const QString &credit_account_id, const QString &invoice_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  from QString [optional]
    * @param[in]  to QString [optional]
    * @param[in]  created_date_from QString [optional]
    * @param[in]  created_date_to QString [optional]
    * @param[in]  value double [optional]
    * @param[in]  status QString [optional]
    * @param[in]  friendly_id QString [optional]
    * @param[in]  credit_account_id QString [optional]
    */
    virtual void searchallinvoices(const QString &content_type, const QString &accept, const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_date_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &value = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &friendly_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &credit_account_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  credit_account_id QString [required]
    */
    virtual void searchallinvoicesofaAccount(const QString &content_type, const QString &accept, const QString &credit_account_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelInvoiceCallback(OAIHttpRequestWorker *worker);
    void changeInvoiceCallback(OAIHttpRequestWorker *worker);
    void markaninvoiceasPaidCallback(OAIHttpRequestWorker *worker);
    void postponeaninvoiceCallback(OAIHttpRequestWorker *worker);
    void retrieveInvoicebyIdCallback(OAIHttpRequestWorker *worker);
    void searchallinvoicesCallback(OAIHttpRequestWorker *worker);
    void searchallinvoicesofaAccountCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelInvoiceSignal(OAIObject summary);
    void changeInvoiceSignal(OAIObject summary);
    void markaninvoiceasPaidSignal(QString summary);
    void postponeaninvoiceSignal(OAIObject summary);
    void retrieveInvoicebyIdSignal(OAIRetrievedinvoice_1 summary);
    void searchallinvoicesSignal(OAIPaidinvoices_1 summary);
    void searchallinvoicesofaAccountSignal(OAIGetinvoicesfromacheckingaccount_1 summary);


    void cancelInvoiceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void changeInvoiceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void markaninvoiceasPaidSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void postponeaninvoiceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void retrieveInvoicebyIdSignalFull(OAIHttpRequestWorker *worker, OAIRetrievedinvoice_1 summary);
    void searchallinvoicesSignalFull(OAIHttpRequestWorker *worker, OAIPaidinvoices_1 summary);
    void searchallinvoicesofaAccountSignalFull(OAIHttpRequestWorker *worker, OAIGetinvoicesfromacheckingaccount_1 summary);

    Q_DECL_DEPRECATED_X("Use cancelInvoiceSignalError() instead")
    void cancelInvoiceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelInvoiceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeInvoiceSignalError() instead")
    void changeInvoiceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changeInvoiceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markaninvoiceasPaidSignalError() instead")
    void markaninvoiceasPaidSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void markaninvoiceasPaidSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postponeaninvoiceSignalError() instead")
    void postponeaninvoiceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postponeaninvoiceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveInvoicebyIdSignalError() instead")
    void retrieveInvoicebyIdSignalE(OAIRetrievedinvoice_1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveInvoicebyIdSignalError(OAIRetrievedinvoice_1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchallinvoicesSignalError() instead")
    void searchallinvoicesSignalE(OAIPaidinvoices_1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchallinvoicesSignalError(OAIPaidinvoices_1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchallinvoicesofaAccountSignalError() instead")
    void searchallinvoicesofaAccountSignalE(OAIGetinvoicesfromacheckingaccount_1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchallinvoicesofaAccountSignalError(OAIGetinvoicesfromacheckingaccount_1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelInvoiceSignalErrorFull() instead")
    void cancelInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeInvoiceSignalErrorFull() instead")
    void changeInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markaninvoiceasPaidSignalErrorFull() instead")
    void markaninvoiceasPaidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void markaninvoiceasPaidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postponeaninvoiceSignalErrorFull() instead")
    void postponeaninvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postponeaninvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveInvoicebyIdSignalErrorFull() instead")
    void retrieveInvoicebyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveInvoicebyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchallinvoicesSignalErrorFull() instead")
    void searchallinvoicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchallinvoicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchallinvoicesofaAccountSignalErrorFull() instead")
    void searchallinvoicesofaAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchallinvoicesofaAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
