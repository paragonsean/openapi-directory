/**
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateaPreAuthorization_usingid__request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateaPreAuthorization_usingid__request::OAICreateaPreAuthorization_usingid__request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateaPreAuthorization_usingid__request::OAICreateaPreAuthorization_usingid__request() {
    this->initializeModel();
}

OAICreateaPreAuthorization_usingid__request::~OAICreateaPreAuthorization_usingid__request() {}

void OAICreateaPreAuthorization_usingid__request::initializeModel() {

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_installments_isSet = false;
    m_installments_isValid = false;

    m_settle_isSet = false;
    m_settle_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAICreateaPreAuthorization_usingid__request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateaPreAuthorization_usingid__request::fromJsonObject(QJsonObject json) {

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_installments_isValid = ::OpenAPI::fromJsonValue(m_installments, json[QString("installments")]);
    m_installments_isSet = !json[QString("installments")].isNull() && m_installments_isValid;

    m_settle_isValid = ::OpenAPI::fromJsonValue(m_settle, json[QString("settle")]);
    m_settle_isSet = !json[QString("settle")].isNull() && m_settle_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAICreateaPreAuthorization_usingid__request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateaPreAuthorization_usingid__request::asJsonObject() const {
    QJsonObject obj;
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_installments_isSet) {
        obj.insert(QString("installments"), ::OpenAPI::toJsonValue(m_installments));
    }
    if (m_settle_isSet) {
        obj.insert(QString("settle"), ::OpenAPI::toJsonValue(m_settle));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAICreateaPreAuthorization_usingid__request::getExpirationDate() const {
    return m_expiration_date;
}
void OAICreateaPreAuthorization_usingid__request::setExpirationDate(const QString &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAICreateaPreAuthorization_usingid__request::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAICreateaPreAuthorization_usingid__request::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAICreateaPreAuthorization_usingid__request::getInstallments() const {
    return m_installments;
}
void OAICreateaPreAuthorization_usingid__request::setInstallments(const QString &installments) {
    m_installments = installments;
    m_installments_isSet = true;
}

bool OAICreateaPreAuthorization_usingid__request::is_installments_Set() const{
    return m_installments_isSet;
}

bool OAICreateaPreAuthorization_usingid__request::is_installments_Valid() const{
    return m_installments_isValid;
}

bool OAICreateaPreAuthorization_usingid__request::isSettle() const {
    return m_settle;
}
void OAICreateaPreAuthorization_usingid__request::setSettle(const bool &settle) {
    m_settle = settle;
    m_settle_isSet = true;
}

bool OAICreateaPreAuthorization_usingid__request::is_settle_Set() const{
    return m_settle_isSet;
}

bool OAICreateaPreAuthorization_usingid__request::is_settle_Valid() const{
    return m_settle_isValid;
}

QString OAICreateaPreAuthorization_usingid__request::getValue() const {
    return m_value;
}
void OAICreateaPreAuthorization_usingid__request::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAICreateaPreAuthorization_usingid__request::is_value_Set() const{
    return m_value_isSet;
}

bool OAICreateaPreAuthorization_usingid__request::is_value_Valid() const{
    return m_value_isValid;
}

bool OAICreateaPreAuthorization_usingid__request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateaPreAuthorization_usingid__request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expiration_date_isValid && m_installments_isValid && m_settle_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
