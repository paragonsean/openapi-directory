/**
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateaPreAuthorizationRequest1 model module.
 * @module model/CreateaPreAuthorizationRequest1
 * @version 1.0
 */
class CreateaPreAuthorizationRequest1 {
    /**
     * Constructs a new <code>CreateaPreAuthorizationRequest1</code>.
     * @alias module:model/CreateaPreAuthorizationRequest1
     * @param expirationDate {String} date in ISO8601 (UTC) dateformat (optional default is 1(one) day)
     * @param installments {String} 
     * @param settle {Boolean} 
     * @param value {String} 
     */
    constructor(expirationDate, installments, settle, value) { 
        
        CreateaPreAuthorizationRequest1.initialize(this, expirationDate, installments, settle, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expirationDate, installments, settle, value) { 
        obj['expirationDate'] = expirationDate || '1';
        obj['installments'] = installments || '1';
        obj['settle'] = settle || false;
        obj['value'] = value || '490.0';
    }

    /**
     * Constructs a <code>CreateaPreAuthorizationRequest1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateaPreAuthorizationRequest1} obj Optional instance to populate.
     * @return {module:model/CreateaPreAuthorizationRequest1} The populated <code>CreateaPreAuthorizationRequest1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateaPreAuthorizationRequest1();

            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'String');
            }
            if (data.hasOwnProperty('installments')) {
                obj['installments'] = ApiClient.convertToType(data['installments'], 'String');
            }
            if (data.hasOwnProperty('settle')) {
                obj['settle'] = ApiClient.convertToType(data['settle'], 'Boolean');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateaPreAuthorizationRequest1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateaPreAuthorizationRequest1</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateaPreAuthorizationRequest1.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['expirationDate'] && !(typeof data['expirationDate'] === 'string' || data['expirationDate'] instanceof String)) {
            throw new Error("Expected the field `expirationDate` to be a primitive type in the JSON string but got " + data['expirationDate']);
        }
        // ensure the json data is a string
        if (data['installments'] && !(typeof data['installments'] === 'string' || data['installments'] instanceof String)) {
            throw new Error("Expected the field `installments` to be a primitive type in the JSON string but got " + data['installments']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

CreateaPreAuthorizationRequest1.RequiredProperties = ["expirationDate", "installments", "settle", "value"];

/**
 * date in ISO8601 (UTC) dateformat (optional default is 1(one) day)
 * @member {String} expirationDate
 * @default '1'
 */
CreateaPreAuthorizationRequest1.prototype['expirationDate'] = '1';

/**
 * @member {String} installments
 * @default '1'
 */
CreateaPreAuthorizationRequest1.prototype['installments'] = '1';

/**
 * @member {Boolean} settle
 * @default false
 */
CreateaPreAuthorizationRequest1.prototype['settle'] = false;

/**
 * @member {String} value
 * @default '490.0'
 */
CreateaPreAuthorizationRequest1.prototype['value'] = '490.0';






export default CreateaPreAuthorizationRequest1;

