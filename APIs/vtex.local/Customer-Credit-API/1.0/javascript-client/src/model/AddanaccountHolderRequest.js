/**
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Claims2 from './Claims2';

/**
 * The AddanaccountHolderRequest model module.
 * @module model/AddanaccountHolderRequest
 * @version 1.0
 */
class AddanaccountHolderRequest {
    /**
     * Constructs a new <code>AddanaccountHolderRequest</code>.
     * @alias module:model/AddanaccountHolderRequest
     * @param claims {module:model/Claims2} 
     */
    constructor(claims) { 
        
        AddanaccountHolderRequest.initialize(this, claims);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, claims) { 
        obj['claims'] = claims;
    }

    /**
     * Constructs a <code>AddanaccountHolderRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddanaccountHolderRequest} obj Optional instance to populate.
     * @return {module:model/AddanaccountHolderRequest} The populated <code>AddanaccountHolderRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddanaccountHolderRequest();

            if (data.hasOwnProperty('claims')) {
                obj['claims'] = Claims2.constructFromObject(data['claims']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddanaccountHolderRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddanaccountHolderRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AddanaccountHolderRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `claims`
        if (data['claims']) { // data not null
          Claims2.validateJSON(data['claims']);
        }

        return true;
    }


}

AddanaccountHolderRequest.RequiredProperties = ["claims"];

/**
 * @member {module:model/Claims2} claims
 */
AddanaccountHolderRequest.prototype['claims'] = undefined;






export default AddanaccountHolderRequest;

