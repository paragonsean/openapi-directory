/**
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateemailanddescriptionofaaccountRequest1 model module.
 * @module model/UpdateemailanddescriptionofaaccountRequest1
 * @version 1.0
 */
class UpdateemailanddescriptionofaaccountRequest1 {
    /**
     * Constructs a new <code>UpdateemailanddescriptionofaaccountRequest1</code>.
     * @alias module:model/UpdateemailanddescriptionofaaccountRequest1
     * @param description {String} 
     * @param email {String} 
     */
    constructor(description, email) { 
        
        UpdateemailanddescriptionofaaccountRequest1.initialize(this, description, email);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, email) { 
        obj['description'] = description || 'example';
        obj['email'] = email || 'email@domain.com';
    }

    /**
     * Constructs a <code>UpdateemailanddescriptionofaaccountRequest1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateemailanddescriptionofaaccountRequest1} obj Optional instance to populate.
     * @return {module:model/UpdateemailanddescriptionofaaccountRequest1} The populated <code>UpdateemailanddescriptionofaaccountRequest1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateemailanddescriptionofaaccountRequest1();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateemailanddescriptionofaaccountRequest1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateemailanddescriptionofaaccountRequest1</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateemailanddescriptionofaaccountRequest1.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }

        return true;
    }


}

UpdateemailanddescriptionofaaccountRequest1.RequiredProperties = ["description", "email"];

/**
 * @member {String} description
 * @default 'example'
 */
UpdateemailanddescriptionofaaccountRequest1.prototype['description'] = 'example';

/**
 * @member {String} email
 * @default 'email@domain.com'
 */
UpdateemailanddescriptionofaaccountRequest1.prototype['email'] = 'email@domain.com';






export default UpdateemailanddescriptionofaaccountRequest1;

