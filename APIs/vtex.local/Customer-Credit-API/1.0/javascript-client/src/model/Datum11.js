/**
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Datum11 model module.
 * @module model/Datum11
 * @version 1.0
 */
class Datum11 {
    /**
     * Constructs a new <code>Datum11</code>.
     * @alias module:model/Datum11
     * @param checkingAccountId {String} 
     * @param createdAt {String} 
     * @param description {String} 
     * @param dueDate {String} 
     * @param id {String} 
     * @param observation {String} 
     * @param originalDueDate {String} 
     * @param paymentLink {String} 
     * @param status {String} 
     * @param updatedAt {String} 
     * @param value {Number} 
     */
    constructor(checkingAccountId, createdAt, description, dueDate, id, observation, originalDueDate, paymentLink, status, updatedAt, value) { 
        
        Datum11.initialize(this, checkingAccountId, createdAt, description, dueDate, id, observation, originalDueDate, paymentLink, status, updatedAt, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, checkingAccountId, createdAt, description, dueDate, id, observation, originalDueDate, paymentLink, status, updatedAt, value) { 
        obj['checkingAccountId'] = checkingAccountId;
        obj['createdAt'] = createdAt;
        obj['description'] = description;
        obj['dueDate'] = dueDate;
        obj['id'] = id;
        obj['observation'] = observation;
        obj['originalDueDate'] = originalDueDate;
        obj['paymentLink'] = paymentLink;
        obj['status'] = status;
        obj['updatedAt'] = updatedAt;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Datum11</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Datum11} obj Optional instance to populate.
     * @return {module:model/Datum11} The populated <code>Datum11</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Datum11();

            if (data.hasOwnProperty('checkingAccountId')) {
                obj['checkingAccountId'] = ApiClient.convertToType(data['checkingAccountId'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dueDate')) {
                obj['dueDate'] = ApiClient.convertToType(data['dueDate'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('observation')) {
                obj['observation'] = ApiClient.convertToType(data['observation'], 'String');
            }
            if (data.hasOwnProperty('originalDueDate')) {
                obj['originalDueDate'] = ApiClient.convertToType(data['originalDueDate'], 'String');
            }
            if (data.hasOwnProperty('paymentLink')) {
                obj['paymentLink'] = ApiClient.convertToType(data['paymentLink'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Datum11</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Datum11</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Datum11.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['checkingAccountId'] && !(typeof data['checkingAccountId'] === 'string' || data['checkingAccountId'] instanceof String)) {
            throw new Error("Expected the field `checkingAccountId` to be a primitive type in the JSON string but got " + data['checkingAccountId']);
        }
        // ensure the json data is a string
        if (data['createdAt'] && !(typeof data['createdAt'] === 'string' || data['createdAt'] instanceof String)) {
            throw new Error("Expected the field `createdAt` to be a primitive type in the JSON string but got " + data['createdAt']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['dueDate'] && !(typeof data['dueDate'] === 'string' || data['dueDate'] instanceof String)) {
            throw new Error("Expected the field `dueDate` to be a primitive type in the JSON string but got " + data['dueDate']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['observation'] && !(typeof data['observation'] === 'string' || data['observation'] instanceof String)) {
            throw new Error("Expected the field `observation` to be a primitive type in the JSON string but got " + data['observation']);
        }
        // ensure the json data is a string
        if (data['originalDueDate'] && !(typeof data['originalDueDate'] === 'string' || data['originalDueDate'] instanceof String)) {
            throw new Error("Expected the field `originalDueDate` to be a primitive type in the JSON string but got " + data['originalDueDate']);
        }
        // ensure the json data is a string
        if (data['paymentLink'] && !(typeof data['paymentLink'] === 'string' || data['paymentLink'] instanceof String)) {
            throw new Error("Expected the field `paymentLink` to be a primitive type in the JSON string but got " + data['paymentLink']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['updatedAt'] && !(typeof data['updatedAt'] === 'string' || data['updatedAt'] instanceof String)) {
            throw new Error("Expected the field `updatedAt` to be a primitive type in the JSON string but got " + data['updatedAt']);
        }

        return true;
    }


}

Datum11.RequiredProperties = ["checkingAccountId", "createdAt", "description", "dueDate", "id", "observation", "originalDueDate", "paymentLink", "status", "updatedAt", "value"];

/**
 * @member {String} checkingAccountId
 */
Datum11.prototype['checkingAccountId'] = undefined;

/**
 * @member {String} createdAt
 */
Datum11.prototype['createdAt'] = undefined;

/**
 * @member {String} description
 */
Datum11.prototype['description'] = undefined;

/**
 * @member {String} dueDate
 */
Datum11.prototype['dueDate'] = undefined;

/**
 * @member {String} id
 */
Datum11.prototype['id'] = undefined;

/**
 * @member {String} observation
 */
Datum11.prototype['observation'] = undefined;

/**
 * @member {String} originalDueDate
 */
Datum11.prototype['originalDueDate'] = undefined;

/**
 * @member {String} paymentLink
 */
Datum11.prototype['paymentLink'] = undefined;

/**
 * @member {String} status
 */
Datum11.prototype['status'] = undefined;

/**
 * @member {String} updatedAt
 */
Datum11.prototype['updatedAt'] = undefined;

/**
 * @member {Number} value
 */
Datum11.prototype['value'] = undefined;






export default Datum11;

