/**
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Savestoreconfig model module.
 * @module model/Savestoreconfig
 * @version 1.0
 */
class Savestoreconfig {
    /**
     * Constructs a new <code>Savestoreconfig</code>.
     * @alias module:model/Savestoreconfig
     * @param dailyInterestRate {Number} 
     * @param invoicePostponementLimit {Number} 
     * @param taxRate {Number} 
     * @param tolerancePercent {Number} 
     */
    constructor(dailyInterestRate, invoicePostponementLimit, taxRate, tolerancePercent) { 
        
        Savestoreconfig.initialize(this, dailyInterestRate, invoicePostponementLimit, taxRate, tolerancePercent);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dailyInterestRate, invoicePostponementLimit, taxRate, tolerancePercent) { 
        obj['dailyInterestRate'] = dailyInterestRate;
        obj['invoicePostponementLimit'] = invoicePostponementLimit;
        obj['taxRate'] = taxRate;
        obj['tolerancePercent'] = tolerancePercent;
    }

    /**
     * Constructs a <code>Savestoreconfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Savestoreconfig} obj Optional instance to populate.
     * @return {module:model/Savestoreconfig} The populated <code>Savestoreconfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Savestoreconfig();

            if (data.hasOwnProperty('dailyInterestRate')) {
                obj['dailyInterestRate'] = ApiClient.convertToType(data['dailyInterestRate'], 'Number');
            }
            if (data.hasOwnProperty('invoicePostponementLimit')) {
                obj['invoicePostponementLimit'] = ApiClient.convertToType(data['invoicePostponementLimit'], 'Number');
            }
            if (data.hasOwnProperty('taxRate')) {
                obj['taxRate'] = ApiClient.convertToType(data['taxRate'], 'Number');
            }
            if (data.hasOwnProperty('tolerancePercent')) {
                obj['tolerancePercent'] = ApiClient.convertToType(data['tolerancePercent'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Savestoreconfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Savestoreconfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Savestoreconfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

Savestoreconfig.RequiredProperties = ["dailyInterestRate", "invoicePostponementLimit", "taxRate", "tolerancePercent"];

/**
 * @member {Number} dailyInterestRate
 */
Savestoreconfig.prototype['dailyInterestRate'] = undefined;

/**
 * @member {Number} invoicePostponementLimit
 */
Savestoreconfig.prototype['invoicePostponementLimit'] = undefined;

/**
 * @member {Number} taxRate
 */
Savestoreconfig.prototype['taxRate'] = undefined;

/**
 * @member {Number} tolerancePercent
 */
Savestoreconfig.prototype['tolerancePercent'] = undefined;






export default Savestoreconfig;

