/**
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddanaccountHolderRequest1 from '../model/AddanaccountHolderRequest1';
import ChangecreditlimitofanAccountRequest1 from '../model/ChangecreditlimitofanAccountRequest1';
import ChangetoleranceofanaccountRequest1 from '../model/ChangetoleranceofanaccountRequest1';
import CloseanAccountRequest1 from '../model/CloseanAccountRequest1';
import CreateaPreAuthorizationRequest1 from '../model/CreateaPreAuthorizationRequest1';
import CreateaPreAuthorizationUsingidRequest from '../model/CreateaPreAuthorizationUsingidRequest';
import CreateorUpdateSettlementRequest1 from '../model/CreateorUpdateSettlementRequest1';
import DecreasebalanceofanaccountRequest1 from '../model/DecreasebalanceofanaccountRequest1';
import Getaccount1 from '../model/Getaccount1';
import OpenanAccountRequest1 from '../model/OpenanAccountRequest1';
import OpenorChangeAccountRequest1 from '../model/OpenorChangeAccountRequest1';
import PartialorTotalRefundaSettlementRequest1 from '../model/PartialorTotalRefundaSettlementRequest1';
import Searchaccounts1 from '../model/Searchaccounts1';
import Searchcheckingaccounts1 from '../model/Searchcheckingaccounts1';
import Statements1 from '../model/Statements1';
import ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice from '../model/ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice';
import UpdateemailanddescriptionofaaccountRequest1 from '../model/UpdateemailanddescriptionofaaccountRequest1';

/**
* Account service.
* @module api/AccountApi
* @version 1.0
*/
export default class AccountApi {

    /**
    * Constructs a new AccountApi. 
    * @alias module:api/AccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountstatements operation.
     * @callback module:api/AccountApi~accountstatementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Statements1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Account statements
     * Get the account statements.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} creditAccountId 
     * @param {module:api/AccountApi~accountstatementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Statements1}
     */
    accountstatements(contentType, accept, creditAccountId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling accountstatements");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling accountstatements");
      }
      // verify the required parameter 'creditAccountId' is set
      if (creditAccountId === undefined || creditAccountId === null) {
        throw new Error("Missing the required parameter 'creditAccountId' when calling accountstatements");
      }

      let pathParams = {
        'creditAccountId': creditAccountId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = Statements1;
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{creditAccountId}/statements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addanaccountHolder operation.
     * @callback module:api/AccountApi~addanaccountHolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Searchcheckingaccounts1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an account Holder
     * 
     * @param {String} creditAccountId Credit account's identification
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {module:model/AddanaccountHolderRequest1} addanaccountHolderRequest1 
     * @param {module:api/AccountApi~addanaccountHolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Searchcheckingaccounts1}
     */
    addanaccountHolder(creditAccountId, accept, contentType, addanaccountHolderRequest1, callback) {
      let postBody = addanaccountHolderRequest1;
      // verify the required parameter 'creditAccountId' is set
      if (creditAccountId === undefined || creditAccountId === null) {
        throw new Error("Missing the required parameter 'creditAccountId' when calling addanaccountHolder");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling addanaccountHolder");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling addanaccountHolder");
      }
      // verify the required parameter 'addanaccountHolderRequest1' is set
      if (addanaccountHolderRequest1 === undefined || addanaccountHolderRequest1 === null) {
        throw new Error("Missing the required parameter 'addanaccountHolderRequest1' when calling addanaccountHolder");
      }

      let pathParams = {
        'creditAccountId': creditAccountId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = Searchcheckingaccounts1;
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{creditAccountId}/holders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelaPreAuthorization operation.
     * @callback module:api/AccountApi~cancelaPreAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a Pre Authorization
     * 
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} creditAccountId Credit account's identification
     * @param {String} transactionId 
     * @param {module:api/AccountApi~cancelaPreAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelaPreAuthorization(contentType, accept, creditAccountId, transactionId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling cancelaPreAuthorization");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling cancelaPreAuthorization");
      }
      // verify the required parameter 'creditAccountId' is set
      if (creditAccountId === undefined || creditAccountId === null) {
        throw new Error("Missing the required parameter 'creditAccountId' when calling cancelaPreAuthorization");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling cancelaPreAuthorization");
      }

      let pathParams = {
        'creditAccountId': creditAccountId,
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{creditAccountId}/transactions/{transactionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changecreditlimitofanAccount operation.
     * @callback module:api/AccountApi~changecreditlimitofanAccountCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change credit limit of an Account
     * Increase the credit limit of an account.
     * @param {String} creditAccountId Credit account's identifier
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {module:model/ChangecreditlimitofanAccountRequest1} changecreditlimitofanAccountRequest1 
     * @param {module:api/AccountApi~changecreditlimitofanAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    changecreditlimitofanAccount(creditAccountId, accept, contentType, changecreditlimitofanAccountRequest1, callback) {
      let postBody = changecreditlimitofanAccountRequest1;
      // verify the required parameter 'creditAccountId' is set
      if (creditAccountId === undefined || creditAccountId === null) {
        throw new Error("Missing the required parameter 'creditAccountId' when calling changecreditlimitofanAccount");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling changecreditlimitofanAccount");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling changecreditlimitofanAccount");
      }
      // verify the required parameter 'changecreditlimitofanAccountRequest1' is set
      if (changecreditlimitofanAccountRequest1 === undefined || changecreditlimitofanAccountRequest1 === null) {
        throw new Error("Missing the required parameter 'changecreditlimitofanAccountRequest1' when calling changecreditlimitofanAccount");
      }

      let pathParams = {
        'creditAccountId': creditAccountId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{creditAccountId}/creditlimit', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changetoleranceofanaccount operation.
     * @callback module:api/AccountApi~changetoleranceofanaccountCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change tolerance of an account
     * Increase the credit limit of a checking account.
     * @param {String} creditAccountId Credit account's identification
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {module:model/ChangetoleranceofanaccountRequest1} changetoleranceofanaccountRequest1 
     * @param {module:api/AccountApi~changetoleranceofanaccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    changetoleranceofanaccount(creditAccountId, accept, contentType, changetoleranceofanaccountRequest1, callback) {
      let postBody = changetoleranceofanaccountRequest1;
      // verify the required parameter 'creditAccountId' is set
      if (creditAccountId === undefined || creditAccountId === null) {
        throw new Error("Missing the required parameter 'creditAccountId' when calling changetoleranceofanaccount");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling changetoleranceofanaccount");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling changetoleranceofanaccount");
      }
      // verify the required parameter 'changetoleranceofanaccountRequest1' is set
      if (changetoleranceofanaccountRequest1 === undefined || changetoleranceofanaccountRequest1 === null) {
        throw new Error("Missing the required parameter 'changetoleranceofanaccountRequest1' when calling changetoleranceofanaccount");
      }

      let pathParams = {
        'creditAccountId': creditAccountId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{creditAccountId}/tolerance', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the closeanAccount operation.
     * @callback module:api/AccountApi~closeanAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close an Account
     * Closes an account.
     * @param {String} creditAccountId Credit account's identifier
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {module:model/CloseanAccountRequest1} closeanAccountRequest1 
     * @param {module:api/AccountApi~closeanAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    closeanAccount(creditAccountId, accept, contentType, closeanAccountRequest1, callback) {
      let postBody = closeanAccountRequest1;
      // verify the required parameter 'creditAccountId' is set
      if (creditAccountId === undefined || creditAccountId === null) {
        throw new Error("Missing the required parameter 'creditAccountId' when calling closeanAccount");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling closeanAccount");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling closeanAccount");
      }
      // verify the required parameter 'closeanAccountRequest1' is set
      if (closeanAccountRequest1 === undefined || closeanAccountRequest1 === null) {
        throw new Error("Missing the required parameter 'closeanAccountRequest1' when calling closeanAccount");
      }

      let pathParams = {
        'creditAccountId': creditAccountId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{creditAccountId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createaPreAuthorization operation.
     * @callback module:api/AccountApi~createaPreAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Pre Authorization
     * 
     * @param {String} creditAccountId Credit account's identification
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {module:model/CreateaPreAuthorizationRequest1} createaPreAuthorizationRequest1 
     * @param {module:api/AccountApi~createaPreAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createaPreAuthorization(creditAccountId, accept, contentType, createaPreAuthorizationRequest1, callback) {
      let postBody = createaPreAuthorizationRequest1;
      // verify the required parameter 'creditAccountId' is set
      if (creditAccountId === undefined || creditAccountId === null) {
        throw new Error("Missing the required parameter 'creditAccountId' when calling createaPreAuthorization");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createaPreAuthorization");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createaPreAuthorization");
      }
      // verify the required parameter 'createaPreAuthorizationRequest1' is set
      if (createaPreAuthorizationRequest1 === undefined || createaPreAuthorizationRequest1 === null) {
        throw new Error("Missing the required parameter 'createaPreAuthorizationRequest1' when calling createaPreAuthorization");
      }

      let pathParams = {
        'creditAccountId': creditAccountId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{creditAccountId}/transaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createaPreAuthorizationUsingid operation.
     * @callback module:api/AccountApi~createaPreAuthorizationUsingidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Pre Authorization (using id)
     * 
     * @param {String} creditAccountId Credit account's identification
     * @param {String} transactionId 
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {module:model/CreateaPreAuthorizationUsingidRequest} createaPreAuthorizationUsingidRequest 
     * @param {module:api/AccountApi~createaPreAuthorizationUsingidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createaPreAuthorizationUsingid(creditAccountId, transactionId, accept, contentType, createaPreAuthorizationUsingidRequest, callback) {
      let postBody = createaPreAuthorizationUsingidRequest;
      // verify the required parameter 'creditAccountId' is set
      if (creditAccountId === undefined || creditAccountId === null) {
        throw new Error("Missing the required parameter 'creditAccountId' when calling createaPreAuthorizationUsingid");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling createaPreAuthorizationUsingid");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createaPreAuthorizationUsingid");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createaPreAuthorizationUsingid");
      }
      // verify the required parameter 'createaPreAuthorizationUsingidRequest' is set
      if (createaPreAuthorizationUsingidRequest === undefined || createaPreAuthorizationUsingidRequest === null) {
        throw new Error("Missing the required parameter 'createaPreAuthorizationUsingidRequest' when calling createaPreAuthorizationUsingid");
      }

      let pathParams = {
        'creditAccountId': creditAccountId,
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{creditAccountId}/transactions/{transactionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createorUpdateSettlement operation.
     * @callback module:api/AccountApi~createorUpdateSettlementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or Update Settlement
     * Debit a value from checking account.
     * @param {String} creditAccountId Credit account's identification
     * @param {String} transactionId 
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {module:model/CreateorUpdateSettlementRequest1} createorUpdateSettlementRequest1 
     * @param {module:api/AccountApi~createorUpdateSettlementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice}
     */
    createorUpdateSettlement(creditAccountId, transactionId, accept, contentType, createorUpdateSettlementRequest1, callback) {
      let postBody = createorUpdateSettlementRequest1;
      // verify the required parameter 'creditAccountId' is set
      if (creditAccountId === undefined || creditAccountId === null) {
        throw new Error("Missing the required parameter 'creditAccountId' when calling createorUpdateSettlement");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling createorUpdateSettlement");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createorUpdateSettlement");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createorUpdateSettlement");
      }
      // verify the required parameter 'createorUpdateSettlementRequest1' is set
      if (createorUpdateSettlementRequest1 === undefined || createorUpdateSettlementRequest1 === null) {
        throw new Error("Missing the required parameter 'createorUpdateSettlementRequest1' when calling createorUpdateSettlement");
      }

      let pathParams = {
        'creditAccountId': creditAccountId,
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice;
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{creditAccountId}/transactions/{transactionId}/settlement', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the decreasebalanceofanaccount operation.
     * @callback module:api/AccountApi~decreasebalanceofanaccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Decrease balance of an account
     * Create a debit value updating the account BALANCE.
     * @param {String} creditAccountId Credit account's identification
     * @param {String} statementId 
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {module:model/DecreasebalanceofanaccountRequest1} decreasebalanceofanaccountRequest1 
     * @param {module:api/AccountApi~decreasebalanceofanaccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    decreasebalanceofanaccount(creditAccountId, statementId, accept, contentType, decreasebalanceofanaccountRequest1, callback) {
      let postBody = decreasebalanceofanaccountRequest1;
      // verify the required parameter 'creditAccountId' is set
      if (creditAccountId === undefined || creditAccountId === null) {
        throw new Error("Missing the required parameter 'creditAccountId' when calling decreasebalanceofanaccount");
      }
      // verify the required parameter 'statementId' is set
      if (statementId === undefined || statementId === null) {
        throw new Error("Missing the required parameter 'statementId' when calling decreasebalanceofanaccount");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling decreasebalanceofanaccount");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling decreasebalanceofanaccount");
      }
      // verify the required parameter 'decreasebalanceofanaccountRequest1' is set
      if (decreasebalanceofanaccountRequest1 === undefined || decreasebalanceofanaccountRequest1 === null) {
        throw new Error("Missing the required parameter 'decreasebalanceofanaccountRequest1' when calling decreasebalanceofanaccount");
      }

      let pathParams = {
        'creditAccountId': creditAccountId,
        'statementId': statementId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{creditAccountId}/statements/{statementId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteanaccountholder operation.
     * @callback module:api/AccountApi~deleteanaccountholderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Searchcheckingaccounts1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an account holder
     * 
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} creditAccountId Credit account's identification
     * @param {String} holderId 
     * @param {module:api/AccountApi~deleteanaccountholderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Searchcheckingaccounts1}
     */
    deleteanaccountholder(contentType, accept, creditAccountId, holderId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deleteanaccountholder");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteanaccountholder");
      }
      // verify the required parameter 'creditAccountId' is set
      if (creditAccountId === undefined || creditAccountId === null) {
        throw new Error("Missing the required parameter 'creditAccountId' when calling deleteanaccountholder");
      }
      // verify the required parameter 'holderId' is set
      if (holderId === undefined || holderId === null) {
        throw new Error("Missing the required parameter 'holderId' when calling deleteanaccountholder");
      }

      let pathParams = {
        'creditAccountId': creditAccountId,
        'holderId': holderId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = Searchcheckingaccounts1;
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{creditAccountId}/holders/{holderId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the openanAccount operation.
     * @callback module:api/AccountApi~openanAccountCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Open an Account
     * Open an account.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {module:model/OpenanAccountRequest1} openanAccountRequest1 
     * @param {module:api/AccountApi~openanAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    openanAccount(accept, contentType, openanAccountRequest1, callback) {
      let postBody = openanAccountRequest1;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling openanAccount");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling openanAccount");
      }
      // verify the required parameter 'openanAccountRequest1' is set
      if (openanAccountRequest1 === undefined || openanAccountRequest1 === null) {
        throw new Error("Missing the required parameter 'openanAccountRequest1' when calling openanAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the openorChangeAccount operation.
     * @callback module:api/AccountApi~openorChangeAccountCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Open or Change Account
     * Open or Change an account.
     * @param {String} accountId It must be an alphanumeric value
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {Object} opts Optional parameters
     * @param {module:model/OpenorChangeAccountRequest1} [openorChangeAccountRequest1] 
     * @param {module:api/AccountApi~openorChangeAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    openorChangeAccount(accountId, accept, contentType, opts, callback) {
      opts = opts || {};
      let postBody = opts['openorChangeAccountRequest1'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling openorChangeAccount");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling openorChangeAccount");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling openorChangeAccount");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{accountId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partialorTotalRefundaSettlement operation.
     * @callback module:api/AccountApi~partialorTotalRefundaSettlementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partial or Total Refund a Settlement
     * Refund a value from a already settled transaction.
     * @param {String} creditAccountId Credit account's identification
     * @param {String} transactionId 
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {module:model/PartialorTotalRefundaSettlementRequest1} partialorTotalRefundaSettlementRequest1 
     * @param {module:api/AccountApi~partialorTotalRefundaSettlementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice}
     */
    partialorTotalRefundaSettlement(creditAccountId, transactionId, accept, contentType, partialorTotalRefundaSettlementRequest1, callback) {
      let postBody = partialorTotalRefundaSettlementRequest1;
      // verify the required parameter 'creditAccountId' is set
      if (creditAccountId === undefined || creditAccountId === null) {
        throw new Error("Missing the required parameter 'creditAccountId' when calling partialorTotalRefundaSettlement");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling partialorTotalRefundaSettlement");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling partialorTotalRefundaSettlement");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling partialorTotalRefundaSettlement");
      }
      // verify the required parameter 'partialorTotalRefundaSettlementRequest1' is set
      if (partialorTotalRefundaSettlementRequest1 === undefined || partialorTotalRefundaSettlementRequest1 === null) {
        throw new Error("Missing the required parameter 'partialorTotalRefundaSettlementRequest1' when calling partialorTotalRefundaSettlement");
      }

      let pathParams = {
        'creditAccountId': creditAccountId,
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThisoperationcausesthecreationofNinvoicesWhereNisthenumberofinstallmentsThefirstinvoicewillhaveaduedatewith30daysandthenextinvoiceswillhaveaduedate30daysawayfrompreviousinvoice;
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{creditAccountId}/transactions/{transactionId}/refunds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveaAccountbyId operation.
     * @callback module:api/AccountApi~retrieveaAccountbyIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Getaccount1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Account by Id
     * Retrieve an account by id.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} creditAccountId 
     * @param {module:api/AccountApi~retrieveaAccountbyIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Getaccount1}
     */
    retrieveaAccountbyId(contentType, accept, creditAccountId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling retrieveaAccountbyId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling retrieveaAccountbyId");
      }
      // verify the required parameter 'creditAccountId' is set
      if (creditAccountId === undefined || creditAccountId === null) {
        throw new Error("Missing the required parameter 'creditAccountId' when calling retrieveaAccountbyId");
      }

      let pathParams = {
        'creditAccountId': creditAccountId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = Getaccount1;
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{creditAccountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchallaccounts operation.
     * @callback module:api/AccountApi~searchallaccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Searchaccounts1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search all accounts
     * 
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {module:api/AccountApi~searchallaccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Searchaccounts1}
     */
    searchallaccounts(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling searchallaccounts");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling searchallaccounts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = Searchaccounts1;
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateemailanddescriptionofaaccount operation.
     * @callback module:api/AccountApi~updateemailanddescriptionofaaccountCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email and description of a account
     * Update a checking account.
     * @param {String} creditAccountId Credit account's identification
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {module:model/UpdateemailanddescriptionofaaccountRequest1} updateemailanddescriptionofaaccountRequest1 
     * @param {module:api/AccountApi~updateemailanddescriptionofaaccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    updateemailanddescriptionofaaccount(creditAccountId, accept, contentType, updateemailanddescriptionofaaccountRequest1, callback) {
      let postBody = updateemailanddescriptionofaaccountRequest1;
      // verify the required parameter 'creditAccountId' is set
      if (creditAccountId === undefined || creditAccountId === null) {
        throw new Error("Missing the required parameter 'creditAccountId' when calling updateemailanddescriptionofaaccount");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling updateemailanddescriptionofaaccount");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updateemailanddescriptionofaaccount");
      }
      // verify the required parameter 'updateemailanddescriptionofaaccountRequest1' is set
      if (updateemailanddescriptionofaaccountRequest1 === undefined || updateemailanddescriptionofaaccountRequest1 === null) {
        throw new Error("Missing the required parameter 'updateemailanddescriptionofaaccountRequest1' when calling updateemailanddescriptionofaaccount");
      }

      let pathParams = {
        'creditAccountId': creditAccountId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{creditAccountId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
