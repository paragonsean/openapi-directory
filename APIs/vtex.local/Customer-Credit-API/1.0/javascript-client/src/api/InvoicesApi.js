/**
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangeInvoiceRequest1 from '../model/ChangeInvoiceRequest1';
import Getinvoicesfromacheckingaccount1 from '../model/Getinvoicesfromacheckingaccount1';
import MarkaninvoiceasPaidRequest1 from '../model/MarkaninvoiceasPaidRequest1';
import Paidinvoices1 from '../model/Paidinvoices1';
import PostponeaninvoiceRequest1 from '../model/PostponeaninvoiceRequest1';
import Retrievedinvoice1 from '../model/Retrievedinvoice1';

/**
* Invoices service.
* @module api/InvoicesApi
* @version 1.0
*/
export default class InvoicesApi {

    /**
    * Constructs a new InvoicesApi. 
    * @alias module:api/InvoicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelInvoice operation.
     * @callback module:api/InvoicesApi~cancelInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Invoice
     * Changes invoice's status from ancells invoice by specified Id.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} creditAccountId Credit account's identification
     * @param {String} invoiceId 
     * @param {module:api/InvoicesApi~cancelInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cancelInvoice(contentType, accept, creditAccountId, invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling cancelInvoice");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling cancelInvoice");
      }
      // verify the required parameter 'creditAccountId' is set
      if (creditAccountId === undefined || creditAccountId === null) {
        throw new Error("Missing the required parameter 'creditAccountId' when calling cancelInvoice");
      }
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling cancelInvoice");
      }

      let pathParams = {
        'creditAccountId': creditAccountId,
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{creditAccountId}/invoices/{invoiceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeInvoice operation.
     * @callback module:api/InvoicesApi~changeInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Invoice
     * Updates invoice's attributes `status`, `paymentLink` and `observation`.
     * @param {String} creditAccountId Credit account's identification
     * @param {String} invoiceId 
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {module:model/ChangeInvoiceRequest1} changeInvoiceRequest1 
     * @param {Object} opts Optional parameters
     * @param {String} [friendlyId = 'insert identifier here')] Invoice's identification
     * @param {module:api/InvoicesApi~changeInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    changeInvoice(creditAccountId, invoiceId, accept, contentType, changeInvoiceRequest1, opts, callback) {
      opts = opts || {};
      let postBody = changeInvoiceRequest1;
      // verify the required parameter 'creditAccountId' is set
      if (creditAccountId === undefined || creditAccountId === null) {
        throw new Error("Missing the required parameter 'creditAccountId' when calling changeInvoice");
      }
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling changeInvoice");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling changeInvoice");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling changeInvoice");
      }
      // verify the required parameter 'changeInvoiceRequest1' is set
      if (changeInvoiceRequest1 === undefined || changeInvoiceRequest1 === null) {
        throw new Error("Missing the required parameter 'changeInvoiceRequest1' when calling changeInvoice");
      }

      let pathParams = {
        'creditAccountId': creditAccountId,
        'invoiceId': invoiceId
      };
      let queryParams = {
        'friendlyId': opts['friendlyId']
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{creditAccountId}/invoices/{invoiceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markaninvoiceasPaid operation.
     * @callback module:api/InvoicesApi~markaninvoiceasPaidCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark an invoice as Paid
     * Pay an invoice.
     * @param {String} creditAccountId Credit account's identification
     * @param {String} invoiceId 
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {module:model/MarkaninvoiceasPaidRequest1} markaninvoiceasPaidRequest1 
     * @param {module:api/InvoicesApi~markaninvoiceasPaidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    markaninvoiceasPaid(creditAccountId, invoiceId, accept, contentType, markaninvoiceasPaidRequest1, callback) {
      let postBody = markaninvoiceasPaidRequest1;
      // verify the required parameter 'creditAccountId' is set
      if (creditAccountId === undefined || creditAccountId === null) {
        throw new Error("Missing the required parameter 'creditAccountId' when calling markaninvoiceasPaid");
      }
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling markaninvoiceasPaid");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling markaninvoiceasPaid");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling markaninvoiceasPaid");
      }
      // verify the required parameter 'markaninvoiceasPaidRequest1' is set
      if (markaninvoiceasPaidRequest1 === undefined || markaninvoiceasPaidRequest1 === null) {
        throw new Error("Missing the required parameter 'markaninvoiceasPaidRequest1' when calling markaninvoiceasPaid");
      }

      let pathParams = {
        'creditAccountId': creditAccountId,
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{creditAccountId}/invoices/{invoiceId}/payments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postponeaninvoice operation.
     * @callback module:api/InvoicesApi~postponeaninvoiceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Postpone an invoice
     * Postpone an invoice.
     * @param {String} creditAccountId Credit account's identification
     * @param {String} invoiceId 
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {module:model/PostponeaninvoiceRequest1} postponeaninvoiceRequest1 
     * @param {module:api/InvoicesApi~postponeaninvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    postponeaninvoice(creditAccountId, invoiceId, accept, contentType, postponeaninvoiceRequest1, callback) {
      let postBody = postponeaninvoiceRequest1;
      // verify the required parameter 'creditAccountId' is set
      if (creditAccountId === undefined || creditAccountId === null) {
        throw new Error("Missing the required parameter 'creditAccountId' when calling postponeaninvoice");
      }
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling postponeaninvoice");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling postponeaninvoice");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postponeaninvoice");
      }
      // verify the required parameter 'postponeaninvoiceRequest1' is set
      if (postponeaninvoiceRequest1 === undefined || postponeaninvoiceRequest1 === null) {
        throw new Error("Missing the required parameter 'postponeaninvoiceRequest1' when calling postponeaninvoice");
      }

      let pathParams = {
        'creditAccountId': creditAccountId,
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{creditAccountId}/invoices/{invoiceId}/postponement', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveInvoicebyId operation.
     * @callback module:api/InvoicesApi~retrieveInvoicebyIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Retrievedinvoice1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Invoice by Id
     * Returns associated data for the specified Invoice Id, like status  and value, for example.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} creditAccountId Credit account's identification
     * @param {String} invoiceId 
     * @param {module:api/InvoicesApi~retrieveInvoicebyIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Retrievedinvoice1}
     */
    retrieveInvoicebyId(contentType, accept, creditAccountId, invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling retrieveInvoicebyId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling retrieveInvoicebyId");
      }
      // verify the required parameter 'creditAccountId' is set
      if (creditAccountId === undefined || creditAccountId === null) {
        throw new Error("Missing the required parameter 'creditAccountId' when calling retrieveInvoicebyId");
      }
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling retrieveInvoicebyId");
      }

      let pathParams = {
        'creditAccountId': creditAccountId,
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = Retrievedinvoice1;
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{creditAccountId}/invoices/{invoiceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchallinvoices operation.
     * @callback module:api/InvoicesApi~searchallinvoicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Paidinvoices1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search all invoices
     * Returns all invoices according to the informed query params in the request.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {Object} opts Optional parameters
     * @param {String} [from = '')] 
     * @param {String} [to = '')] 
     * @param {String} [createdDateFrom] 
     * @param {String} [createdDateTo] 
     * @param {Number} [value] Invoice's value. It must be completed with a decimal value.
     * @param {String} [status = 'Paid')] Invoice's status. It must be completed with \"Paid\", \"Cancelled\" or \"Open\" value.
     * @param {String} [friendlyId = 'insert identifier here')] Invoice's identifier
     * @param {String} [creditAccountId = 'B75F0')] Credit account's identifier
     * @param {module:api/InvoicesApi~searchallinvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Paidinvoices1}
     */
    searchallinvoices(contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling searchallinvoices");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling searchallinvoices");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'createdDateFrom': opts['createdDateFrom'],
        'createdDateTo': opts['createdDateTo'],
        'value': opts['value'],
        'status': opts['status'],
        'friendlyId': opts['friendlyId'],
        'creditAccountId': opts['creditAccountId']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = Paidinvoices1;
      return this.apiClient.callApi(
        '/api/creditcontrol/invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchallinvoicesofaAccount operation.
     * @callback module:api/InvoicesApi~searchallinvoicesofaAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Getinvoicesfromacheckingaccount1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve invoice by creditAccountId
     * Returns associated invoices by specified creditAccountId, the param that identifies a client in VTEX's system.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} creditAccountId 
     * @param {module:api/InvoicesApi~searchallinvoicesofaAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Getinvoicesfromacheckingaccount1}
     */
    searchallinvoicesofaAccount(contentType, accept, creditAccountId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling searchallinvoicesofaAccount");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling searchallinvoicesofaAccount");
      }
      // verify the required parameter 'creditAccountId' is set
      if (creditAccountId === undefined || creditAccountId === null) {
        throw new Error("Missing the required parameter 'creditAccountId' when calling searchallinvoicesofaAccount");
      }

      let pathParams = {
        'creditAccountId': creditAccountId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = Getinvoicesfromacheckingaccount1;
      return this.apiClient.callApi(
        '/api/creditcontrol/accounts/{creditAccountId}/invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
