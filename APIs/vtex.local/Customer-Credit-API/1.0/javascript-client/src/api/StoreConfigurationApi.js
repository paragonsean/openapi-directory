/**
 * Customer Credit API
 * With Customer Credit your store can enable **credit payments** through the checkout. You can also control **invoices** and the **credit limits** of your clients.    Learn more about Customer Credit in our [Help Center article](https://help.vtex.com/en/tracks/customer-credit-getting-started--1hCRg21lXYy2seOKgqQ2CC/36grlQ69NK6OCuioeekyCs).    All requests need the **authorization header**.    Additionally, you can find more information on installment payments for an order in the `customData`  field found in the [Get Order](https://developers.vtex.com/docs/api-reference/orders-api#get-/api/oms/pvt/orders/-orderId-) endpoint of the Orders API. This includes the number of installments, amount and due dates.    This API allows two kinds of authorization:  1. Authorization header containing the VTEX ID authentication token.  2. VTEX Appkey and Apptoken headers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateorchangestoreconfigurationRequest1 from '../model/CreateorchangestoreconfigurationRequest1';
import Savestoreconfig1 from '../model/Savestoreconfig1';
import Storeconfig1 from '../model/Storeconfig1';

/**
* StoreConfiguration service.
* @module api/StoreConfigurationApi
* @version 1.0
*/
export default class StoreConfigurationApi {

    /**
    * Constructs a new StoreConfigurationApi. 
    * @alias module:api/StoreConfigurationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createorchangestoreconfiguration operation.
     * @callback module:api/StoreConfigurationApi~createorchangestoreconfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Savestoreconfig1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or change store configuration
     * Create or change store configuration data.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {module:model/CreateorchangestoreconfigurationRequest1} createorchangestoreconfigurationRequest1 
     * @param {module:api/StoreConfigurationApi~createorchangestoreconfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Savestoreconfig1}
     */
    createorchangestoreconfiguration(accept, contentType, createorchangestoreconfigurationRequest1, callback) {
      let postBody = createorchangestoreconfigurationRequest1;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createorchangestoreconfiguration");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createorchangestoreconfiguration");
      }
      // verify the required parameter 'createorchangestoreconfigurationRequest1' is set
      if (createorchangestoreconfigurationRequest1 === undefined || createorchangestoreconfigurationRequest1 === null) {
        throw new Error("Missing the required parameter 'createorchangestoreconfigurationRequest1' when calling createorchangestoreconfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = Savestoreconfig1;
      return this.apiClient.callApi(
        '/api/creditcontrol/storeconfig', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrievestoreconfiguration operation.
     * @callback module:api/StoreConfigurationApi~retrievestoreconfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Storeconfig1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve store configuration
     * Get store configuration data.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {module:api/StoreConfigurationApi~retrievestoreconfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Storeconfig1}
     */
    retrievestoreconfiguration(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling retrievestoreconfiguration");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling retrievestoreconfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = Storeconfig1;
      return this.apiClient.callApi(
        '/api/creditcontrol/storeconfig', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
