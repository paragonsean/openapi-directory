/*
 * Price Simulations API
 *   > Check the new [Pricing onboarding guide](https://developers.vtex.com/docs/guides/pricing-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Pricing and is organized by focusing on the developer's journey    The Price Simulations API allows you to configure custom price selectors for B2B stores, based on the context set by the [Orders Configuration app](https://developers.vtex.com/docs/guides/vtex-order-configuration).    ## Custom Prices    In this section, you can create a specific shopping scenario with the criteria you want. For explaining purpose, we used the `orderType` and `state` as default values, but it can be others too.    `GET` [Get custom prices schema](https://developers.vtex.com/docs/api-reference/price-simulations#get-/_v/custom-prices/session/schema)  `POST` [Create or Update custom prices schema](https://developers.vtex.com/docs/api-reference/price-simulations#post-/_v/custom-prices/session/schema)    ## Session Management    Every time you edit a configuration value set on the Custom Prices session, you must use this endpoint to update the Order Configuration.    `POST` [Update Order Configuration](https://developers.vtex.com/docs/api-reference/price-simulations#post-/sessions/)      ## Price Association    Use these routes to associate a shopping scenario, created at the Custom Price session, to a specific price table.    `GET` [Get price association by ID](https://developers.vtex.com/docs/api-reference/price-simulations#get-/_v/custom-prices/rules/-priceAssociationId-)  `POST` [Create price association](https://developers.vtex.com/docs/api-reference/price-simulations#post-/_v/custom-prices/rules)  `PUT` [Update price association by ID](https://developers.vtex.com/docs/api-reference/price-simulations#put-/_v/custom-prices/rules/-priceAssociationId-)  `DELETE` [Disassociate price association by ID](https://developers.vtex.com/docs/api-reference/price-simulations#delete-/_v/custom-prices/rules/-priceAssociationId-)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RequestBody;
import org.openapitools.client.model.VCustomPricesRulesPost200Response;
import org.openapitools.client.model.VCustomPricesRulesPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PriceAssociationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PriceAssociationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PriceAssociationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for vCustomPricesRulesPost
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand (required)
     * @param vcustomPricesRulesPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vCustomPricesRulesPostCall(String contentType, String accept, VCustomPricesRulesPostRequest vcustomPricesRulesPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vcustomPricesRulesPostRequest;

        // create path and map variables
        String localVarPath = "/_v/custom-prices/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vCustomPricesRulesPostValidateBeforeCall(String contentType, String accept, VCustomPricesRulesPostRequest vcustomPricesRulesPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling vCustomPricesRulesPost(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling vCustomPricesRulesPost(Async)");
        }

        return vCustomPricesRulesPostCall(contentType, accept, vcustomPricesRulesPostRequest, _callback);

    }

    /**
     * Create price association
     * Creates a new price association for a shopping scenario
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand (required)
     * @param vcustomPricesRulesPostRequest  (optional)
     * @return VCustomPricesRulesPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VCustomPricesRulesPost200Response vCustomPricesRulesPost(String contentType, String accept, VCustomPricesRulesPostRequest vcustomPricesRulesPostRequest) throws ApiException {
        ApiResponse<VCustomPricesRulesPost200Response> localVarResp = vCustomPricesRulesPostWithHttpInfo(contentType, accept, vcustomPricesRulesPostRequest);
        return localVarResp.getData();
    }

    /**
     * Create price association
     * Creates a new price association for a shopping scenario
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand (required)
     * @param vcustomPricesRulesPostRequest  (optional)
     * @return ApiResponse&lt;VCustomPricesRulesPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VCustomPricesRulesPost200Response> vCustomPricesRulesPostWithHttpInfo(String contentType, String accept, VCustomPricesRulesPostRequest vcustomPricesRulesPostRequest) throws ApiException {
        okhttp3.Call localVarCall = vCustomPricesRulesPostValidateBeforeCall(contentType, accept, vcustomPricesRulesPostRequest, null);
        Type localVarReturnType = new TypeToken<VCustomPricesRulesPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create price association (asynchronously)
     * Creates a new price association for a shopping scenario
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand (required)
     * @param vcustomPricesRulesPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vCustomPricesRulesPostAsync(String contentType, String accept, VCustomPricesRulesPostRequest vcustomPricesRulesPostRequest, final ApiCallback<VCustomPricesRulesPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = vCustomPricesRulesPostValidateBeforeCall(contentType, accept, vcustomPricesRulesPostRequest, _callback);
        Type localVarReturnType = new TypeToken<VCustomPricesRulesPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vCustomPricesRulesPriceAssociationIdDelete
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand (required)
     * @param priceAssociationId Price Association unique identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vCustomPricesRulesPriceAssociationIdDeleteCall(String contentType, String accept, Integer priceAssociationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/_v/custom-prices/rules/{priceAssociationId}"
            .replace("{" + "priceAssociationId" + "}", localVarApiClient.escapeString(priceAssociationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vCustomPricesRulesPriceAssociationIdDeleteValidateBeforeCall(String contentType, String accept, Integer priceAssociationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling vCustomPricesRulesPriceAssociationIdDelete(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling vCustomPricesRulesPriceAssociationIdDelete(Async)");
        }

        // verify the required parameter 'priceAssociationId' is set
        if (priceAssociationId == null) {
            throw new ApiException("Missing the required parameter 'priceAssociationId' when calling vCustomPricesRulesPriceAssociationIdDelete(Async)");
        }

        return vCustomPricesRulesPriceAssociationIdDeleteCall(contentType, accept, priceAssociationId, _callback);

    }

    /**
     * Disassociate price association by ID
     * Disassociates a price association from a shopping scenario by its ID
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand (required)
     * @param priceAssociationId Price Association unique identifier (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String vCustomPricesRulesPriceAssociationIdDelete(String contentType, String accept, Integer priceAssociationId) throws ApiException {
        ApiResponse<String> localVarResp = vCustomPricesRulesPriceAssociationIdDeleteWithHttpInfo(contentType, accept, priceAssociationId);
        return localVarResp.getData();
    }

    /**
     * Disassociate price association by ID
     * Disassociates a price association from a shopping scenario by its ID
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand (required)
     * @param priceAssociationId Price Association unique identifier (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> vCustomPricesRulesPriceAssociationIdDeleteWithHttpInfo(String contentType, String accept, Integer priceAssociationId) throws ApiException {
        okhttp3.Call localVarCall = vCustomPricesRulesPriceAssociationIdDeleteValidateBeforeCall(contentType, accept, priceAssociationId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disassociate price association by ID (asynchronously)
     * Disassociates a price association from a shopping scenario by its ID
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand (required)
     * @param priceAssociationId Price Association unique identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vCustomPricesRulesPriceAssociationIdDeleteAsync(String contentType, String accept, Integer priceAssociationId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = vCustomPricesRulesPriceAssociationIdDeleteValidateBeforeCall(contentType, accept, priceAssociationId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vCustomPricesRulesPriceAssociationIdGet
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand (required)
     * @param priceAssociationId Price Association unique identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vCustomPricesRulesPriceAssociationIdGetCall(String contentType, String accept, Integer priceAssociationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/_v/custom-prices/rules/{priceAssociationId}"
            .replace("{" + "priceAssociationId" + "}", localVarApiClient.escapeString(priceAssociationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vCustomPricesRulesPriceAssociationIdGetValidateBeforeCall(String contentType, String accept, Integer priceAssociationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling vCustomPricesRulesPriceAssociationIdGet(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling vCustomPricesRulesPriceAssociationIdGet(Async)");
        }

        // verify the required parameter 'priceAssociationId' is set
        if (priceAssociationId == null) {
            throw new ApiException("Missing the required parameter 'priceAssociationId' when calling vCustomPricesRulesPriceAssociationIdGet(Async)");
        }

        return vCustomPricesRulesPriceAssociationIdGetCall(contentType, accept, priceAssociationId, _callback);

    }

    /**
     * Get price association by ID
     * Retrieves price association for a shopping scenario by its ID
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand (required)
     * @param priceAssociationId Price Association unique identifier (required)
     * @return VCustomPricesRulesPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VCustomPricesRulesPost200Response vCustomPricesRulesPriceAssociationIdGet(String contentType, String accept, Integer priceAssociationId) throws ApiException {
        ApiResponse<VCustomPricesRulesPost200Response> localVarResp = vCustomPricesRulesPriceAssociationIdGetWithHttpInfo(contentType, accept, priceAssociationId);
        return localVarResp.getData();
    }

    /**
     * Get price association by ID
     * Retrieves price association for a shopping scenario by its ID
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand (required)
     * @param priceAssociationId Price Association unique identifier (required)
     * @return ApiResponse&lt;VCustomPricesRulesPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VCustomPricesRulesPost200Response> vCustomPricesRulesPriceAssociationIdGetWithHttpInfo(String contentType, String accept, Integer priceAssociationId) throws ApiException {
        okhttp3.Call localVarCall = vCustomPricesRulesPriceAssociationIdGetValidateBeforeCall(contentType, accept, priceAssociationId, null);
        Type localVarReturnType = new TypeToken<VCustomPricesRulesPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get price association by ID (asynchronously)
     * Retrieves price association for a shopping scenario by its ID
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand (required)
     * @param priceAssociationId Price Association unique identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vCustomPricesRulesPriceAssociationIdGetAsync(String contentType, String accept, Integer priceAssociationId, final ApiCallback<VCustomPricesRulesPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = vCustomPricesRulesPriceAssociationIdGetValidateBeforeCall(contentType, accept, priceAssociationId, _callback);
        Type localVarReturnType = new TypeToken<VCustomPricesRulesPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vCustomPricesRulesPriceAssociationIdPut
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand (required)
     * @param priceAssociationId Price Association unique identifier (required)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vCustomPricesRulesPriceAssociationIdPutCall(String contentType, String accept, Integer priceAssociationId, RequestBody requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/_v/custom-prices/rules/{priceAssociationId}"
            .replace("{" + "priceAssociationId" + "}", localVarApiClient.escapeString(priceAssociationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vCustomPricesRulesPriceAssociationIdPutValidateBeforeCall(String contentType, String accept, Integer priceAssociationId, RequestBody requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling vCustomPricesRulesPriceAssociationIdPut(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling vCustomPricesRulesPriceAssociationIdPut(Async)");
        }

        // verify the required parameter 'priceAssociationId' is set
        if (priceAssociationId == null) {
            throw new ApiException("Missing the required parameter 'priceAssociationId' when calling vCustomPricesRulesPriceAssociationIdPut(Async)");
        }

        return vCustomPricesRulesPriceAssociationIdPutCall(contentType, accept, priceAssociationId, requestBody, _callback);

    }

    /**
     * Update price association by ID
     * Updates a price association for a shopping scenario by its ID
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand (required)
     * @param priceAssociationId Price Association unique identifier (required)
     * @param requestBody  (optional)
     * @return VCustomPricesRulesPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VCustomPricesRulesPost200Response vCustomPricesRulesPriceAssociationIdPut(String contentType, String accept, Integer priceAssociationId, RequestBody requestBody) throws ApiException {
        ApiResponse<VCustomPricesRulesPost200Response> localVarResp = vCustomPricesRulesPriceAssociationIdPutWithHttpInfo(contentType, accept, priceAssociationId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Update price association by ID
     * Updates a price association for a shopping scenario by its ID
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand (required)
     * @param priceAssociationId Price Association unique identifier (required)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;VCustomPricesRulesPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VCustomPricesRulesPost200Response> vCustomPricesRulesPriceAssociationIdPutWithHttpInfo(String contentType, String accept, Integer priceAssociationId, RequestBody requestBody) throws ApiException {
        okhttp3.Call localVarCall = vCustomPricesRulesPriceAssociationIdPutValidateBeforeCall(contentType, accept, priceAssociationId, requestBody, null);
        Type localVarReturnType = new TypeToken<VCustomPricesRulesPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update price association by ID (asynchronously)
     * Updates a price association for a shopping scenario by its ID
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand (required)
     * @param priceAssociationId Price Association unique identifier (required)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vCustomPricesRulesPriceAssociationIdPutAsync(String contentType, String accept, Integer priceAssociationId, RequestBody requestBody, final ApiCallback<VCustomPricesRulesPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = vCustomPricesRulesPriceAssociationIdPutValidateBeforeCall(contentType, accept, priceAssociationId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<VCustomPricesRulesPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
