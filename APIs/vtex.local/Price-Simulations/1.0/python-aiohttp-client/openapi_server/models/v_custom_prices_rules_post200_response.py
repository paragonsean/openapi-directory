# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VCustomPricesRulesPost200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: object=None, id: int=None, order_type: str='', pricetable: str='', state: str=''):
        """VCustomPricesRulesPost200Response - a model defined in OpenAPI

        :param email: The email of this VCustomPricesRulesPost200Response.
        :param id: The id of this VCustomPricesRulesPost200Response.
        :param order_type: The order_type of this VCustomPricesRulesPost200Response.
        :param pricetable: The pricetable of this VCustomPricesRulesPost200Response.
        :param state: The state of this VCustomPricesRulesPost200Response.
        """
        self.openapi_types = {
            'email': object,
            'id': int,
            'order_type': str,
            'pricetable': str,
            'state': str
        }

        self.attribute_map = {
            'email': 'email',
            'id': 'id',
            'order_type': 'orderType',
            'pricetable': 'pricetable',
            'state': 'state'
        }

        self._email = email
        self._id = id
        self._order_type = order_type
        self._pricetable = pricetable
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VCustomPricesRulesPost200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The __v_custom_prices_rules_post_200_response of this VCustomPricesRulesPost200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this VCustomPricesRulesPost200Response.

        User's email

        :return: The email of this VCustomPricesRulesPost200Response.
        :rtype: object
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this VCustomPricesRulesPost200Response.

        User's email

        :param email: The email of this VCustomPricesRulesPost200Response.
        :type email: object
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this VCustomPricesRulesPost200Response.

        Price association ID

        :return: The id of this VCustomPricesRulesPost200Response.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VCustomPricesRulesPost200Response.

        Price association ID

        :param id: The id of this VCustomPricesRulesPost200Response.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def order_type(self):
        """Gets the order_type of this VCustomPricesRulesPost200Response.

        Order type

        :return: The order_type of this VCustomPricesRulesPost200Response.
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this VCustomPricesRulesPost200Response.

        Order type

        :param order_type: The order_type of this VCustomPricesRulesPost200Response.
        :type order_type: str
        """

        self._order_type = order_type

    @property
    def pricetable(self):
        """Gets the pricetable of this VCustomPricesRulesPost200Response.

        Name of the Price Table associated with the scenario

        :return: The pricetable of this VCustomPricesRulesPost200Response.
        :rtype: str
        """
        return self._pricetable

    @pricetable.setter
    def pricetable(self, pricetable):
        """Sets the pricetable of this VCustomPricesRulesPost200Response.

        Name of the Price Table associated with the scenario

        :param pricetable: The pricetable of this VCustomPricesRulesPost200Response.
        :type pricetable: str
        """
        if pricetable is None:
            raise ValueError("Invalid value for `pricetable`, must not be `None`")

        self._pricetable = pricetable

    @property
    def state(self):
        """Gets the state of this VCustomPricesRulesPost200Response.

        Delivery location

        :return: The state of this VCustomPricesRulesPost200Response.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VCustomPricesRulesPost200Response.

        Delivery location

        :param state: The state of this VCustomPricesRulesPost200Response.
        :type state: str
        """

        self._state = state
