# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fields_inner import FieldsInner
from openapi_server import util


class RequestBody1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: List[FieldsInner]=[{"name":"orderType","type":"string"},{"name":"state","type":"string"}], use_email: bool=True):
        """RequestBody1 - a model defined in OpenAPI

        :param fields: The fields of this RequestBody1.
        :param use_email: The use_email of this RequestBody1.
        """
        self.openapi_types = {
            'fields': List[FieldsInner],
            'use_email': bool
        }

        self.attribute_map = {
            'fields': 'fields',
            'use_email': 'useEmail'
        }

        self._fields = fields
        self._use_email = use_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestBody1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request_body_1 of this RequestBody1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this RequestBody1.

        Order Configuration criteria

        :return: The fields of this RequestBody1.
        :rtype: List[FieldsInner]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this RequestBody1.

        Order Configuration criteria

        :param fields: The fields of this RequestBody1.
        :type fields: List[FieldsInner]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def use_email(self):
        """Gets the use_email of this RequestBody1.

        If the custom price should use the user's e-mail to validate it

        :return: The use_email of this RequestBody1.
        :rtype: bool
        """
        return self._use_email

    @use_email.setter
    def use_email(self, use_email):
        """Sets the use_email of this RequestBody1.

        If the custom price should use the user's e-mail to validate it

        :param use_email: The use_email of this RequestBody1.
        :type use_email: bool
        """

        self._use_email = use_email
