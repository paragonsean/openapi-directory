/**
 * Price Simulations API
 *   > Check the new [Pricing onboarding guide](https://developers.vtex.com/docs/guides/pricing-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Pricing and is organized by focusing on the developer's journey    The Price Simulations API allows you to configure custom price selectors for B2B stores, based on the context set by the [Orders Configuration app](https://developers.vtex.com/docs/guides/vtex-order-configuration).    ## Custom Prices    In this section, you can create a specific shopping scenario with the criteria you want. For explaining purpose, we used the `orderType` and `state` as default values, but it can be others too.    `GET` [Get custom prices schema](https://developers.vtex.com/docs/api-reference/price-simulations#get-/_v/custom-prices/session/schema)  `POST` [Create or Update custom prices schema](https://developers.vtex.com/docs/api-reference/price-simulations#post-/_v/custom-prices/session/schema)    ## Session Management    Every time you edit a configuration value set on the Custom Prices session, you must use this endpoint to update the Order Configuration.    `POST` [Update Order Configuration](https://developers.vtex.com/docs/api-reference/price-simulations#post-/sessions/)      ## Price Association    Use these routes to associate a shopping scenario, created at the Custom Price session, to a specific price table.    `GET` [Get price association by ID](https://developers.vtex.com/docs/api-reference/price-simulations#get-/_v/custom-prices/rules/-priceAssociationId-)  `POST` [Create price association](https://developers.vtex.com/docs/api-reference/price-simulations#post-/_v/custom-prices/rules)  `PUT` [Update price association by ID](https://developers.vtex.com/docs/api-reference/price-simulations#put-/_v/custom-prices/rules/-priceAssociationId-)  `DELETE` [Disassociate price association by ID](https://developers.vtex.com/docs/api-reference/price-simulations#delete-/_v/custom-prices/rules/-priceAssociationId-)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPriceAssociationApi_H
#define OAI_OAIPriceAssociationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRequest_body.h"
#include "OAI__v_custom_prices_rules_post_200_response.h"
#include "OAI__v_custom_prices_rules_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPriceAssociationApi : public QObject {
    Q_OBJECT

public:
    OAIPriceAssociationApi(const int timeOut = 0);
    ~OAIPriceAssociationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai__v_custom_prices_rules_post_request OAI__v_custom_prices_rules_post_request [optional]
    */
    virtual void vCustomPricesRulesPost(const QString &content_type, const QString &accept, const ::OpenAPI::OptionalParam<OAI__v_custom_prices_rules_post_request> &oai__v_custom_prices_rules_post_request = ::OpenAPI::OptionalParam<OAI__v_custom_prices_rules_post_request>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  price_association_id qint32 [required]
    */
    virtual void vCustomPricesRulesPriceAssociationIdDelete(const QString &content_type, const QString &accept, const qint32 &price_association_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  price_association_id qint32 [required]
    */
    virtual void vCustomPricesRulesPriceAssociationIdGet(const QString &content_type, const QString &accept, const qint32 &price_association_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  price_association_id qint32 [required]
    * @param[in]  oai_request_body OAIRequest_body [optional]
    */
    virtual void vCustomPricesRulesPriceAssociationIdPut(const QString &content_type, const QString &accept, const qint32 &price_association_id, const ::OpenAPI::OptionalParam<OAIRequest_body> &oai_request_body = ::OpenAPI::OptionalParam<OAIRequest_body>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void vCustomPricesRulesPostCallback(OAIHttpRequestWorker *worker);
    void vCustomPricesRulesPriceAssociationIdDeleteCallback(OAIHttpRequestWorker *worker);
    void vCustomPricesRulesPriceAssociationIdGetCallback(OAIHttpRequestWorker *worker);
    void vCustomPricesRulesPriceAssociationIdPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void vCustomPricesRulesPostSignal(OAI__v_custom_prices_rules_post_200_response summary);
    void vCustomPricesRulesPriceAssociationIdDeleteSignal(QString summary);
    void vCustomPricesRulesPriceAssociationIdGetSignal(OAI__v_custom_prices_rules_post_200_response summary);
    void vCustomPricesRulesPriceAssociationIdPutSignal(OAI__v_custom_prices_rules_post_200_response summary);


    void vCustomPricesRulesPostSignalFull(OAIHttpRequestWorker *worker, OAI__v_custom_prices_rules_post_200_response summary);
    void vCustomPricesRulesPriceAssociationIdDeleteSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void vCustomPricesRulesPriceAssociationIdGetSignalFull(OAIHttpRequestWorker *worker, OAI__v_custom_prices_rules_post_200_response summary);
    void vCustomPricesRulesPriceAssociationIdPutSignalFull(OAIHttpRequestWorker *worker, OAI__v_custom_prices_rules_post_200_response summary);

    Q_DECL_DEPRECATED_X("Use vCustomPricesRulesPostSignalError() instead")
    void vCustomPricesRulesPostSignalE(OAI__v_custom_prices_rules_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vCustomPricesRulesPostSignalError(OAI__v_custom_prices_rules_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vCustomPricesRulesPriceAssociationIdDeleteSignalError() instead")
    void vCustomPricesRulesPriceAssociationIdDeleteSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vCustomPricesRulesPriceAssociationIdDeleteSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vCustomPricesRulesPriceAssociationIdGetSignalError() instead")
    void vCustomPricesRulesPriceAssociationIdGetSignalE(OAI__v_custom_prices_rules_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vCustomPricesRulesPriceAssociationIdGetSignalError(OAI__v_custom_prices_rules_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vCustomPricesRulesPriceAssociationIdPutSignalError() instead")
    void vCustomPricesRulesPriceAssociationIdPutSignalE(OAI__v_custom_prices_rules_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vCustomPricesRulesPriceAssociationIdPutSignalError(OAI__v_custom_prices_rules_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use vCustomPricesRulesPostSignalErrorFull() instead")
    void vCustomPricesRulesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vCustomPricesRulesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vCustomPricesRulesPriceAssociationIdDeleteSignalErrorFull() instead")
    void vCustomPricesRulesPriceAssociationIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vCustomPricesRulesPriceAssociationIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vCustomPricesRulesPriceAssociationIdGetSignalErrorFull() instead")
    void vCustomPricesRulesPriceAssociationIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vCustomPricesRulesPriceAssociationIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vCustomPricesRulesPriceAssociationIdPutSignalErrorFull() instead")
    void vCustomPricesRulesPriceAssociationIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vCustomPricesRulesPriceAssociationIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
