/*
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProductItems;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object representing roles
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:43.802250-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RoleItems {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_ADMIN = "isAdmin";
  @SerializedName(SERIALIZED_NAME_IS_ADMIN)
  private Boolean isAdmin;

  public static final String SERIALIZED_NAME_LOGINS = "logins";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_LOGINS)
  private String logins;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<ProductItems> products = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private String resources;

  public static final String SERIALIZED_NAME_ROLE_TYPE = "roleType";
  @SerializedName(SERIALIZED_NAME_ROLE_TYPE)
  private Integer roleType;

  public RoleItems() {
  }

  public RoleItems id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the role
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public RoleItems isAdmin(Boolean isAdmin) {
    this.isAdmin = isAdmin;
    return this;
  }

  /**
   * If the role is admin
   * @return isAdmin
   */
  @javax.annotation.Nullable
  public Boolean getIsAdmin() {
    return isAdmin;
  }

  public void setIsAdmin(Boolean isAdmin) {
    this.isAdmin = isAdmin;
  }


  @Deprecated
  public RoleItems logins(String logins) {
    this.logins = logins;
    return this;
  }

  /**
   * Get logins
   * @return logins
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getLogins() {
    return logins;
  }

  @Deprecated
  public void setLogins(String logins) {
    this.logins = logins;
  }


  public RoleItems name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the role
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RoleItems products(List<ProductItems> products) {
    this.products = products;
    return this;
  }

  public RoleItems addProductsItem(ProductItems productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

  /**
   * Array of product objects
   * @return products
   */
  @javax.annotation.Nullable
  public List<ProductItems> getProducts() {
    return products;
  }

  public void setProducts(List<ProductItems> products) {
    this.products = products;
  }


  @Deprecated
  public RoleItems resources(String resources) {
    this.resources = resources;
    return this;
  }

  /**
   * Get resources
   * @return resources
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getResources() {
    return resources;
  }

  @Deprecated
  public void setResources(String resources) {
    this.resources = resources;
  }


  public RoleItems roleType(Integer roleType) {
    this.roleType = roleType;
    return this;
  }

  /**
   * Returns 1 for custom roles, and 0 otherwise
   * @return roleType
   */
  @javax.annotation.Nullable
  public Integer getRoleType() {
    return roleType;
  }

  public void setRoleType(Integer roleType) {
    this.roleType = roleType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoleItems roleItems = (RoleItems) o;
    return Objects.equals(this.id, roleItems.id) &&
        Objects.equals(this.isAdmin, roleItems.isAdmin) &&
        Objects.equals(this.logins, roleItems.logins) &&
        Objects.equals(this.name, roleItems.name) &&
        Objects.equals(this.products, roleItems.products) &&
        Objects.equals(this.resources, roleItems.resources) &&
        Objects.equals(this.roleType, roleItems.roleType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, isAdmin, logins, name, products, resources, roleType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoleItems {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isAdmin: ").append(toIndentedString(isAdmin)).append("\n");
    sb.append("    logins: ").append(toIndentedString(logins)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    roleType: ").append(toIndentedString(roleType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("isAdmin");
    openapiFields.add("logins");
    openapiFields.add("name");
    openapiFields.add("products");
    openapiFields.add("resources");
    openapiFields.add("roleType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoleItems
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoleItems.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoleItems is not found in the empty JSON string", RoleItems.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoleItems.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoleItems` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("logins") != null && !jsonObj.get("logins").isJsonNull()) && !jsonObj.get("logins").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logins` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logins").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull()) {
        JsonArray jsonArrayproducts = jsonObj.getAsJsonArray("products");
        if (jsonArrayproducts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("products").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
          }

          // validate the optional field `products` (array)
          for (int i = 0; i < jsonArrayproducts.size(); i++) {
            ProductItems.validateJsonElement(jsonArrayproducts.get(i));
          };
        }
      }
      if ((jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) && !jsonObj.get("resources").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resources` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resources").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoleItems.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoleItems' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoleItems> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoleItems.class));

       return (TypeAdapter<T>) new TypeAdapter<RoleItems>() {
           @Override
           public void write(JsonWriter out, RoleItems value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoleItems read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoleItems given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoleItems
   * @throws IOException if the JSON string is invalid with respect to RoleItems
   */
  public static RoleItems fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoleItems.class);
  }

  /**
   * Convert an instance of RoleItems to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

