/*
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountResponseAppKey;
import org.openapitools.client.model.AccountResponseContact;
import org.openapitools.client.model.AccountResponseSponsor;
import org.openapitools.client.model.AppKeyItems;
import org.openapitools.client.model.LicenseItems;
import org.openapitools.client.model.SiteItems;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Successful response for &#x60;/api/vlm/account&#x60;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:43.802250-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountResponse {
  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_APP_KEY = "appKey";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_APP_KEY)
  private AccountResponseAppKey appKey;

  public static final String SERIALIZED_NAME_APP_KEYS = "appKeys";
  @SerializedName(SERIALIZED_NAME_APP_KEYS)
  private List<AppKeyItems> appKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_CNPJ = "cnpj";
  @SerializedName(SERIALIZED_NAME_CNPJ)
  private String cnpj;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_COMPLEMENT = "complement";
  @SerializedName(SERIALIZED_NAME_COMPLEMENT)
  private String complement;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private AccountResponseContact contact;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_DEFAULT_URL = "defaultUrl";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_DEFAULT_URL)
  private String defaultUrl;

  public static final String SERIALIZED_NAME_DISTRICT = "district";
  @SerializedName(SERIALIZED_NAME_DISTRICT)
  private String district;

  public static final String SERIALIZED_NAME_HAS_LOGO = "hasLogo";
  @SerializedName(SERIALIZED_NAME_HAS_LOGO)
  private Boolean hasLogo;

  public static final String SERIALIZED_NAME_HAVE_PARENT_ACCOUNT = "haveParentAccount";
  @SerializedName(SERIALIZED_NAME_HAVE_PARENT_ACCOUNT)
  private Boolean haveParentAccount;

  public static final String SERIALIZED_NAME_HOSTS = "hosts";
  @SerializedName(SERIALIZED_NAME_HOSTS)
  private List<String> hosts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INACTIVATION_DATE = "inactivationDate";
  @SerializedName(SERIALIZED_NAME_INACTIVATION_DATE)
  private OffsetDateTime inactivationDate;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_IS_OPERATING = "isOperating";
  @SerializedName(SERIALIZED_NAME_IS_OPERATING)
  private Boolean isOperating;

  public static final String SERIALIZED_NAME_LICENSES = "licenses";
  @SerializedName(SERIALIZED_NAME_LICENSES)
  private List<LicenseItems> licenses = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo;

  public static final String SERIALIZED_NAME_LV = "lv";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_LV)
  private String lv;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_OPERATION_DATE = "operationDate";
  @SerializedName(SERIALIZED_NAME_OPERATION_DATE)
  private OffsetDateTime operationDate;

  public static final String SERIALIZED_NAME_PARENT_ACCOUNT_ID = "parentAccountId";
  @SerializedName(SERIALIZED_NAME_PARENT_ACCOUNT_ID)
  private String parentAccountId;

  public static final String SERIALIZED_NAME_PARENT_ACCOUNT_NAME = "parentAccountName";
  @SerializedName(SERIALIZED_NAME_PARENT_ACCOUNT_NAME)
  private String parentAccountName;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_SITES = "sites";
  @SerializedName(SERIALIZED_NAME_SITES)
  private List<SiteItems> sites = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPONSOR = "sponsor";
  @SerializedName(SERIALIZED_NAME_SPONSOR)
  private AccountResponseSponsor sponsor;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TELEPHONE = "telephone";
  @SerializedName(SERIALIZED_NAME_TELEPHONE)
  private String telephone;

  public static final String SERIALIZED_NAME_TRADING_NAME = "tradingName";
  @SerializedName(SERIALIZED_NAME_TRADING_NAME)
  private String tradingName;

  public AccountResponse() {
  }

  public AccountResponse accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

  /**
   * Account name
   * @return accountName
   */
  @javax.annotation.Nullable
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public AccountResponse address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Address of contact
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  @Deprecated
  public AccountResponse appKey(AccountResponseAppKey appKey) {
    this.appKey = appKey;
    return this;
  }

  /**
   * Get appKey
   * @return appKey
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public AccountResponseAppKey getAppKey() {
    return appKey;
  }

  @Deprecated
  public void setAppKey(AccountResponseAppKey appKey) {
    this.appKey = appKey;
  }


  public AccountResponse appKeys(List<AppKeyItems> appKeys) {
    this.appKeys = appKeys;
    return this;
  }

  public AccountResponse addAppKeysItem(AppKeyItems appKeysItem) {
    if (this.appKeys == null) {
      this.appKeys = new ArrayList<>();
    }
    this.appKeys.add(appKeysItem);
    return this;
  }

  /**
   * Array of application keys
   * @return appKeys
   */
  @javax.annotation.Nullable
  public List<AppKeyItems> getAppKeys() {
    return appKeys;
  }

  public void setAppKeys(List<AppKeyItems> appKeys) {
    this.appKeys = appKeys;
  }


  public AccountResponse city(String city) {
    this.city = city;
    return this;
  }

  /**
   * City of contact
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public AccountResponse cnpj(String cnpj) {
    this.cnpj = cnpj;
    return this;
  }

  /**
   * CNPJ (Tax ID) of account
   * @return cnpj
   */
  @javax.annotation.Nullable
  public String getCnpj() {
    return cnpj;
  }

  public void setCnpj(String cnpj) {
    this.cnpj = cnpj;
  }


  public AccountResponse companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Company name
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public AccountResponse complement(String complement) {
    this.complement = complement;
    return this;
  }

  /**
   * Additional address of contact
   * @return complement
   */
  @javax.annotation.Nullable
  public String getComplement() {
    return complement;
  }

  public void setComplement(String complement) {
    this.complement = complement;
  }


  public AccountResponse contact(AccountResponseContact contact) {
    this.contact = contact;
    return this;
  }

  /**
   * Get contact
   * @return contact
   */
  @javax.annotation.Nullable
  public AccountResponseContact getContact() {
    return contact;
  }

  public void setContact(AccountResponseContact contact) {
    this.contact = contact;
  }


  public AccountResponse country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Country of contact
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public AccountResponse creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The date when the account was created
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  @Deprecated
  public AccountResponse defaultUrl(String defaultUrl) {
    this.defaultUrl = defaultUrl;
    return this;
  }

  /**
   * Get defaultUrl
   * @return defaultUrl
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getDefaultUrl() {
    return defaultUrl;
  }

  @Deprecated
  public void setDefaultUrl(String defaultUrl) {
    this.defaultUrl = defaultUrl;
  }


  public AccountResponse district(String district) {
    this.district = district;
    return this;
  }

  /**
   * Neighborhood of contact
   * @return district
   */
  @javax.annotation.Nullable
  public String getDistrict() {
    return district;
  }

  public void setDistrict(String district) {
    this.district = district;
  }


  public AccountResponse hasLogo(Boolean hasLogo) {
    this.hasLogo = hasLogo;
    return this;
  }

  /**
   * If logo has been setup
   * @return hasLogo
   */
  @javax.annotation.Nullable
  public Boolean getHasLogo() {
    return hasLogo;
  }

  public void setHasLogo(Boolean hasLogo) {
    this.hasLogo = hasLogo;
  }


  public AccountResponse haveParentAccount(Boolean haveParentAccount) {
    this.haveParentAccount = haveParentAccount;
    return this;
  }

  /**
   * If it has a parent account
   * @return haveParentAccount
   */
  @javax.annotation.Nullable
  public Boolean getHaveParentAccount() {
    return haveParentAccount;
  }

  public void setHaveParentAccount(Boolean haveParentAccount) {
    this.haveParentAccount = haveParentAccount;
  }


  public AccountResponse hosts(List<String> hosts) {
    this.hosts = hosts;
    return this;
  }

  public AccountResponse addHostsItem(String hostsItem) {
    if (this.hosts == null) {
      this.hosts = new ArrayList<>();
    }
    this.hosts.add(hostsItem);
    return this;
  }

  /**
   * Hosts of all stores
   * @return hosts
   */
  @javax.annotation.Nullable
  public List<String> getHosts() {
    return hosts;
  }

  public void setHosts(List<String> hosts) {
    this.hosts = hosts;
  }


  public AccountResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the account
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AccountResponse inactivationDate(OffsetDateTime inactivationDate) {
    this.inactivationDate = inactivationDate;
    return this;
  }

  /**
   * The date when the account was deactivated
   * @return inactivationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInactivationDate() {
    return inactivationDate;
  }

  public void setInactivationDate(OffsetDateTime inactivationDate) {
    this.inactivationDate = inactivationDate;
  }


  public AccountResponse isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * If account is active or not
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public AccountResponse isOperating(Boolean isOperating) {
    this.isOperating = isOperating;
    return this;
  }

  /**
   * If it is in production
   * @return isOperating
   */
  @javax.annotation.Nullable
  public Boolean getIsOperating() {
    return isOperating;
  }

  public void setIsOperating(Boolean isOperating) {
    this.isOperating = isOperating;
  }


  public AccountResponse licenses(List<LicenseItems> licenses) {
    this.licenses = licenses;
    return this;
  }

  public AccountResponse addLicensesItem(LicenseItems licensesItem) {
    if (this.licenses == null) {
      this.licenses = new ArrayList<>();
    }
    this.licenses.add(licensesItem);
    return this;
  }

  /**
   * Licenses of the account
   * @return licenses
   */
  @javax.annotation.Nullable
  public List<LicenseItems> getLicenses() {
    return licenses;
  }

  public void setLicenses(List<LicenseItems> licenses) {
    this.licenses = licenses;
  }


  public AccountResponse logo(String logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Filename of account logo
   * @return logo
   */
  @javax.annotation.Nullable
  public String getLogo() {
    return logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }


  @Deprecated
  public AccountResponse lv(String lv) {
    this.lv = lv;
    return this;
  }

  /**
   * Get lv
   * @return lv
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getLv() {
    return lv;
  }

  @Deprecated
  public void setLv(String lv) {
    this.lv = lv;
  }


  public AccountResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Trading name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AccountResponse number(String number) {
    this.number = number;
    return this;
  }

  /**
   * Number of the address of contact
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public AccountResponse operationDate(OffsetDateTime operationDate) {
    this.operationDate = operationDate;
    return this;
  }

  /**
   * The date when the account went into production
   * @return operationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getOperationDate() {
    return operationDate;
  }

  public void setOperationDate(OffsetDateTime operationDate) {
    this.operationDate = operationDate;
  }


  public AccountResponse parentAccountId(String parentAccountId) {
    this.parentAccountId = parentAccountId;
    return this;
  }

  /**
   * The ID of the parent account
   * @return parentAccountId
   */
  @javax.annotation.Nullable
  public String getParentAccountId() {
    return parentAccountId;
  }

  public void setParentAccountId(String parentAccountId) {
    this.parentAccountId = parentAccountId;
  }


  public AccountResponse parentAccountName(String parentAccountName) {
    this.parentAccountName = parentAccountName;
    return this;
  }

  /**
   * The name of the parent account
   * @return parentAccountName
   */
  @javax.annotation.Nullable
  public String getParentAccountName() {
    return parentAccountName;
  }

  public void setParentAccountName(String parentAccountName) {
    this.parentAccountName = parentAccountName;
  }


  public AccountResponse postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Zip Code of contact
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public AccountResponse sites(List<SiteItems> sites) {
    this.sites = sites;
    return this;
  }

  public AccountResponse addSitesItem(SiteItems sitesItem) {
    if (this.sites == null) {
      this.sites = new ArrayList<>();
    }
    this.sites.add(sitesItem);
    return this;
  }

  /**
   * Array of objects representing a store
   * @return sites
   */
  @javax.annotation.Nullable
  public List<SiteItems> getSites() {
    return sites;
  }

  public void setSites(List<SiteItems> sites) {
    this.sites = sites;
  }


  public AccountResponse sponsor(AccountResponseSponsor sponsor) {
    this.sponsor = sponsor;
    return this;
  }

  /**
   * Get sponsor
   * @return sponsor
   */
  @javax.annotation.Nullable
  public AccountResponseSponsor getSponsor() {
    return sponsor;
  }

  public void setSponsor(AccountResponseSponsor sponsor) {
    this.sponsor = sponsor;
  }


  public AccountResponse state(String state) {
    this.state = state;
    return this;
  }

  /**
   * State/Province of contact
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public AccountResponse telephone(String telephone) {
    this.telephone = telephone;
    return this;
  }

  /**
   * Telephone of contact
   * @return telephone
   */
  @javax.annotation.Nullable
  public String getTelephone() {
    return telephone;
  }

  public void setTelephone(String telephone) {
    this.telephone = telephone;
  }


  public AccountResponse tradingName(String tradingName) {
    this.tradingName = tradingName;
    return this;
  }

  /**
   * Trading name
   * @return tradingName
   */
  @javax.annotation.Nullable
  public String getTradingName() {
    return tradingName;
  }

  public void setTradingName(String tradingName) {
    this.tradingName = tradingName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountResponse accountResponse = (AccountResponse) o;
    return Objects.equals(this.accountName, accountResponse.accountName) &&
        Objects.equals(this.address, accountResponse.address) &&
        Objects.equals(this.appKey, accountResponse.appKey) &&
        Objects.equals(this.appKeys, accountResponse.appKeys) &&
        Objects.equals(this.city, accountResponse.city) &&
        Objects.equals(this.cnpj, accountResponse.cnpj) &&
        Objects.equals(this.companyName, accountResponse.companyName) &&
        Objects.equals(this.complement, accountResponse.complement) &&
        Objects.equals(this.contact, accountResponse.contact) &&
        Objects.equals(this.country, accountResponse.country) &&
        Objects.equals(this.creationDate, accountResponse.creationDate) &&
        Objects.equals(this.defaultUrl, accountResponse.defaultUrl) &&
        Objects.equals(this.district, accountResponse.district) &&
        Objects.equals(this.hasLogo, accountResponse.hasLogo) &&
        Objects.equals(this.haveParentAccount, accountResponse.haveParentAccount) &&
        Objects.equals(this.hosts, accountResponse.hosts) &&
        Objects.equals(this.id, accountResponse.id) &&
        Objects.equals(this.inactivationDate, accountResponse.inactivationDate) &&
        Objects.equals(this.isActive, accountResponse.isActive) &&
        Objects.equals(this.isOperating, accountResponse.isOperating) &&
        Objects.equals(this.licenses, accountResponse.licenses) &&
        Objects.equals(this.logo, accountResponse.logo) &&
        Objects.equals(this.lv, accountResponse.lv) &&
        Objects.equals(this.name, accountResponse.name) &&
        Objects.equals(this.number, accountResponse.number) &&
        Objects.equals(this.operationDate, accountResponse.operationDate) &&
        Objects.equals(this.parentAccountId, accountResponse.parentAccountId) &&
        Objects.equals(this.parentAccountName, accountResponse.parentAccountName) &&
        Objects.equals(this.postalCode, accountResponse.postalCode) &&
        Objects.equals(this.sites, accountResponse.sites) &&
        Objects.equals(this.sponsor, accountResponse.sponsor) &&
        Objects.equals(this.state, accountResponse.state) &&
        Objects.equals(this.telephone, accountResponse.telephone) &&
        Objects.equals(this.tradingName, accountResponse.tradingName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountName, address, appKey, appKeys, city, cnpj, companyName, complement, contact, country, creationDate, defaultUrl, district, hasLogo, haveParentAccount, hosts, id, inactivationDate, isActive, isOperating, licenses, logo, lv, name, number, operationDate, parentAccountId, parentAccountName, postalCode, sites, sponsor, state, telephone, tradingName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountResponse {\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    appKey: ").append(toIndentedString(appKey)).append("\n");
    sb.append("    appKeys: ").append(toIndentedString(appKeys)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    cnpj: ").append(toIndentedString(cnpj)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    complement: ").append(toIndentedString(complement)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    defaultUrl: ").append(toIndentedString(defaultUrl)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    hasLogo: ").append(toIndentedString(hasLogo)).append("\n");
    sb.append("    haveParentAccount: ").append(toIndentedString(haveParentAccount)).append("\n");
    sb.append("    hosts: ").append(toIndentedString(hosts)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inactivationDate: ").append(toIndentedString(inactivationDate)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isOperating: ").append(toIndentedString(isOperating)).append("\n");
    sb.append("    licenses: ").append(toIndentedString(licenses)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    lv: ").append(toIndentedString(lv)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    operationDate: ").append(toIndentedString(operationDate)).append("\n");
    sb.append("    parentAccountId: ").append(toIndentedString(parentAccountId)).append("\n");
    sb.append("    parentAccountName: ").append(toIndentedString(parentAccountName)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    sites: ").append(toIndentedString(sites)).append("\n");
    sb.append("    sponsor: ").append(toIndentedString(sponsor)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    telephone: ").append(toIndentedString(telephone)).append("\n");
    sb.append("    tradingName: ").append(toIndentedString(tradingName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountName");
    openapiFields.add("address");
    openapiFields.add("appKey");
    openapiFields.add("appKeys");
    openapiFields.add("city");
    openapiFields.add("cnpj");
    openapiFields.add("companyName");
    openapiFields.add("complement");
    openapiFields.add("contact");
    openapiFields.add("country");
    openapiFields.add("creationDate");
    openapiFields.add("defaultUrl");
    openapiFields.add("district");
    openapiFields.add("hasLogo");
    openapiFields.add("haveParentAccount");
    openapiFields.add("hosts");
    openapiFields.add("id");
    openapiFields.add("inactivationDate");
    openapiFields.add("isActive");
    openapiFields.add("isOperating");
    openapiFields.add("licenses");
    openapiFields.add("logo");
    openapiFields.add("lv");
    openapiFields.add("name");
    openapiFields.add("number");
    openapiFields.add("operationDate");
    openapiFields.add("parentAccountId");
    openapiFields.add("parentAccountName");
    openapiFields.add("postalCode");
    openapiFields.add("sites");
    openapiFields.add("sponsor");
    openapiFields.add("state");
    openapiFields.add("telephone");
    openapiFields.add("tradingName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountResponse is not found in the empty JSON string", AccountResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountName") != null && !jsonObj.get("accountName").isJsonNull()) && !jsonObj.get("accountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountName").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      // validate the optional field `appKey`
      if (jsonObj.get("appKey") != null && !jsonObj.get("appKey").isJsonNull()) {
        AccountResponseAppKey.validateJsonElement(jsonObj.get("appKey"));
      }
      if (jsonObj.get("appKeys") != null && !jsonObj.get("appKeys").isJsonNull()) {
        JsonArray jsonArrayappKeys = jsonObj.getAsJsonArray("appKeys");
        if (jsonArrayappKeys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appKeys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appKeys` to be an array in the JSON string but got `%s`", jsonObj.get("appKeys").toString()));
          }

          // validate the optional field `appKeys` (array)
          for (int i = 0; i < jsonArrayappKeys.size(); i++) {
            AppKeyItems.validateJsonElement(jsonArrayappKeys.get(i));
          };
        }
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("cnpj") != null && !jsonObj.get("cnpj").isJsonNull()) && !jsonObj.get("cnpj").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cnpj` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cnpj").toString()));
      }
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if ((jsonObj.get("complement") != null && !jsonObj.get("complement").isJsonNull()) && !jsonObj.get("complement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complement").toString()));
      }
      // validate the optional field `contact`
      if (jsonObj.get("contact") != null && !jsonObj.get("contact").isJsonNull()) {
        AccountResponseContact.validateJsonElement(jsonObj.get("contact"));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("defaultUrl") != null && !jsonObj.get("defaultUrl").isJsonNull()) && !jsonObj.get("defaultUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultUrl").toString()));
      }
      if ((jsonObj.get("district") != null && !jsonObj.get("district").isJsonNull()) && !jsonObj.get("district").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `district` to be a primitive type in the JSON string but got `%s`", jsonObj.get("district").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hosts") != null && !jsonObj.get("hosts").isJsonNull() && !jsonObj.get("hosts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hosts` to be an array in the JSON string but got `%s`", jsonObj.get("hosts").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("licenses") != null && !jsonObj.get("licenses").isJsonNull()) {
        JsonArray jsonArraylicenses = jsonObj.getAsJsonArray("licenses");
        if (jsonArraylicenses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("licenses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `licenses` to be an array in the JSON string but got `%s`", jsonObj.get("licenses").toString()));
          }

          // validate the optional field `licenses` (array)
          for (int i = 0; i < jsonArraylicenses.size(); i++) {
            LicenseItems.validateJsonElement(jsonArraylicenses.get(i));
          };
        }
      }
      if ((jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) && !jsonObj.get("logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo").toString()));
      }
      if ((jsonObj.get("lv") != null && !jsonObj.get("lv").isJsonNull()) && !jsonObj.get("lv").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lv` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lv").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if ((jsonObj.get("parentAccountId") != null && !jsonObj.get("parentAccountId").isJsonNull()) && !jsonObj.get("parentAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentAccountId").toString()));
      }
      if ((jsonObj.get("parentAccountName") != null && !jsonObj.get("parentAccountName").isJsonNull()) && !jsonObj.get("parentAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentAccountName").toString()));
      }
      if ((jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      if (jsonObj.get("sites") != null && !jsonObj.get("sites").isJsonNull()) {
        JsonArray jsonArraysites = jsonObj.getAsJsonArray("sites");
        if (jsonArraysites != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sites").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sites` to be an array in the JSON string but got `%s`", jsonObj.get("sites").toString()));
          }

          // validate the optional field `sites` (array)
          for (int i = 0; i < jsonArraysites.size(); i++) {
            SiteItems.validateJsonElement(jsonArraysites.get(i));
          };
        }
      }
      // validate the optional field `sponsor`
      if (jsonObj.get("sponsor") != null && !jsonObj.get("sponsor").isJsonNull()) {
        AccountResponseSponsor.validateJsonElement(jsonObj.get("sponsor"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("telephone") != null && !jsonObj.get("telephone").isJsonNull()) && !jsonObj.get("telephone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `telephone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("telephone").toString()));
      }
      if ((jsonObj.get("tradingName") != null && !jsonObj.get("tradingName").isJsonNull()) && !jsonObj.get("tradingName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tradingName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tradingName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountResponse>() {
           @Override
           public void write(JsonWriter out, AccountResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountResponse
   * @throws IOException if the JSON string is invalid with respect to AccountResponse
   */
  public static AccountResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountResponse.class);
  }

  /**
   * Convert an instance of AccountResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

