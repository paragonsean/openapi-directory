/*
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object representing VLMError
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:43.802250-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VLMError {
  public static final String SERIALIZED_NAME_DETAIS = "Detais";
  @SerializedName(SERIALIZED_NAME_DETAIS)
  private String detais;

  public static final String SERIALIZED_NAME_HTTP_STATUS_CODE = "HttpStatusCode";
  @SerializedName(SERIALIZED_NAME_HTTP_STATUS_CODE)
  private Integer httpStatusCode;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_VL_M_ERROR_CODE = "VLMErrorCode";
  @SerializedName(SERIALIZED_NAME_VL_M_ERROR_CODE)
  private Integer vlMErrorCode;

  public VLMError() {
  }

  public VLMError detais(String detais) {
    this.detais = detais;
    return this;
  }

  /**
   * Details of error
   * @return detais
   */
  @javax.annotation.Nullable
  public String getDetais() {
    return detais;
  }

  public void setDetais(String detais) {
    this.detais = detais;
  }


  public VLMError httpStatusCode(Integer httpStatusCode) {
    this.httpStatusCode = httpStatusCode;
    return this;
  }

  /**
   * Status code of HTTP response
   * @return httpStatusCode
   */
  @javax.annotation.Nullable
  public Integer getHttpStatusCode() {
    return httpStatusCode;
  }

  public void setHttpStatusCode(Integer httpStatusCode) {
    this.httpStatusCode = httpStatusCode;
  }


  public VLMError message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Error message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public VLMError vlMErrorCode(Integer vlMErrorCode) {
    this.vlMErrorCode = vlMErrorCode;
    return this;
  }

  /**
   * Error code for License Manager
   * @return vlMErrorCode
   */
  @javax.annotation.Nullable
  public Integer getVlMErrorCode() {
    return vlMErrorCode;
  }

  public void setVlMErrorCode(Integer vlMErrorCode) {
    this.vlMErrorCode = vlMErrorCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VLMError vlMError = (VLMError) o;
    return Objects.equals(this.detais, vlMError.detais) &&
        Objects.equals(this.httpStatusCode, vlMError.httpStatusCode) &&
        Objects.equals(this.message, vlMError.message) &&
        Objects.equals(this.vlMErrorCode, vlMError.vlMErrorCode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(detais, httpStatusCode, message, vlMErrorCode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VLMError {\n");
    sb.append("    detais: ").append(toIndentedString(detais)).append("\n");
    sb.append("    httpStatusCode: ").append(toIndentedString(httpStatusCode)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    vlMErrorCode: ").append(toIndentedString(vlMErrorCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Detais");
    openapiFields.add("HttpStatusCode");
    openapiFields.add("Message");
    openapiFields.add("VLMErrorCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VLMError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VLMError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VLMError is not found in the empty JSON string", VLMError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VLMError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VLMError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Detais") != null && !jsonObj.get("Detais").isJsonNull()) && !jsonObj.get("Detais").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Detais` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Detais").toString()));
      }
      if ((jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) && !jsonObj.get("Message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VLMError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VLMError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VLMError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VLMError.class));

       return (TypeAdapter<T>) new TypeAdapter<VLMError>() {
           @Override
           public void write(JsonWriter out, VLMError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VLMError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VLMError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VLMError
   * @throws IOException if the JSON string is invalid with respect to VLMError
   */
  public static VLMError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VLMError.class);
  }

  /**
   * Convert an instance of VLMError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

