/*
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object representing products
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:43.802250-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductItems {
  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_CATEGORY_NAME = "categoryName";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CATEGORY_NAME)
  private String categoryName;

  public static final String SERIALIZED_NAME_CONSOLE_URL_MASK = "consoleUrlMask";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CONSOLE_URL_MASK)
  private String consoleUrlMask;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRODUCT_RESOURCES = "productResources";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PRODUCT_RESOURCES)
  private String productResources;

  public static final String SERIALIZED_NAME_URL = "url";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_URL_CONFIGURATION = "urlConfiguration";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_URL_CONFIGURATION)
  private String urlConfiguration;

  public static final String SERIALIZED_NAME_WEB_API_URL_MASK = "webApiUrlMask";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_WEB_API_URL_MASK)
  private String webApiUrlMask;

  public ProductItems() {
  }

  @Deprecated
  public ProductItems categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * Get categoryId
   * @return categoryId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getCategoryId() {
    return categoryId;
  }

  @Deprecated
  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  @Deprecated
  public ProductItems categoryName(String categoryName) {
    this.categoryName = categoryName;
    return this;
  }

  /**
   * Get categoryName
   * @return categoryName
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getCategoryName() {
    return categoryName;
  }

  @Deprecated
  public void setCategoryName(String categoryName) {
    this.categoryName = categoryName;
  }


  @Deprecated
  public ProductItems consoleUrlMask(String consoleUrlMask) {
    this.consoleUrlMask = consoleUrlMask;
    return this;
  }

  /**
   * Get consoleUrlMask
   * @return consoleUrlMask
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getConsoleUrlMask() {
    return consoleUrlMask;
  }

  @Deprecated
  public void setConsoleUrlMask(String consoleUrlMask) {
    this.consoleUrlMask = consoleUrlMask;
  }


  @Deprecated
  public ProductItems description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  @Deprecated
  public void setDescription(String description) {
    this.description = description;
  }


  @Deprecated
  public ProductItems id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  @Deprecated
  public void setId(String id) {
    this.id = id;
  }


  public ProductItems name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the product
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Deprecated
  public ProductItems productResources(String productResources) {
    this.productResources = productResources;
    return this;
  }

  /**
   * Get productResources
   * @return productResources
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getProductResources() {
    return productResources;
  }

  @Deprecated
  public void setProductResources(String productResources) {
    this.productResources = productResources;
  }


  @Deprecated
  public ProductItems url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  @Deprecated
  public void setUrl(String url) {
    this.url = url;
  }


  @Deprecated
  public ProductItems urlConfiguration(String urlConfiguration) {
    this.urlConfiguration = urlConfiguration;
    return this;
  }

  /**
   * Get urlConfiguration
   * @return urlConfiguration
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getUrlConfiguration() {
    return urlConfiguration;
  }

  @Deprecated
  public void setUrlConfiguration(String urlConfiguration) {
    this.urlConfiguration = urlConfiguration;
  }


  @Deprecated
  public ProductItems webApiUrlMask(String webApiUrlMask) {
    this.webApiUrlMask = webApiUrlMask;
    return this;
  }

  /**
   * Get webApiUrlMask
   * @return webApiUrlMask
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getWebApiUrlMask() {
    return webApiUrlMask;
  }

  @Deprecated
  public void setWebApiUrlMask(String webApiUrlMask) {
    this.webApiUrlMask = webApiUrlMask;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductItems productItems = (ProductItems) o;
    return Objects.equals(this.categoryId, productItems.categoryId) &&
        Objects.equals(this.categoryName, productItems.categoryName) &&
        Objects.equals(this.consoleUrlMask, productItems.consoleUrlMask) &&
        Objects.equals(this.description, productItems.description) &&
        Objects.equals(this.id, productItems.id) &&
        Objects.equals(this.name, productItems.name) &&
        Objects.equals(this.productResources, productItems.productResources) &&
        Objects.equals(this.url, productItems.url) &&
        Objects.equals(this.urlConfiguration, productItems.urlConfiguration) &&
        Objects.equals(this.webApiUrlMask, productItems.webApiUrlMask);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryId, categoryName, consoleUrlMask, description, id, name, productResources, url, urlConfiguration, webApiUrlMask);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductItems {\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    categoryName: ").append(toIndentedString(categoryName)).append("\n");
    sb.append("    consoleUrlMask: ").append(toIndentedString(consoleUrlMask)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    productResources: ").append(toIndentedString(productResources)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    urlConfiguration: ").append(toIndentedString(urlConfiguration)).append("\n");
    sb.append("    webApiUrlMask: ").append(toIndentedString(webApiUrlMask)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryId");
    openapiFields.add("categoryName");
    openapiFields.add("consoleUrlMask");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("productResources");
    openapiFields.add("url");
    openapiFields.add("urlConfiguration");
    openapiFields.add("webApiUrlMask");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductItems
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductItems.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductItems is not found in the empty JSON string", ProductItems.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductItems.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductItems` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("categoryId") != null && !jsonObj.get("categoryId").isJsonNull()) && !jsonObj.get("categoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryId").toString()));
      }
      if ((jsonObj.get("categoryName") != null && !jsonObj.get("categoryName").isJsonNull()) && !jsonObj.get("categoryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryName").toString()));
      }
      if ((jsonObj.get("consoleUrlMask") != null && !jsonObj.get("consoleUrlMask").isJsonNull()) && !jsonObj.get("consoleUrlMask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consoleUrlMask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consoleUrlMask").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("productResources") != null && !jsonObj.get("productResources").isJsonNull()) && !jsonObj.get("productResources").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productResources` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productResources").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("urlConfiguration") != null && !jsonObj.get("urlConfiguration").isJsonNull()) && !jsonObj.get("urlConfiguration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlConfiguration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlConfiguration").toString()));
      }
      if ((jsonObj.get("webApiUrlMask") != null && !jsonObj.get("webApiUrlMask").isJsonNull()) && !jsonObj.get("webApiUrlMask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webApiUrlMask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webApiUrlMask").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductItems.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductItems' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductItems> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductItems.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductItems>() {
           @Override
           public void write(JsonWriter out, ProductItems value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductItems read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductItems given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductItems
   * @throws IOException if the JSON string is invalid with respect to ProductItems
   */
  public static ProductItems fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductItems.class);
  }

  /**
   * Convert an instance of ProductItems to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

