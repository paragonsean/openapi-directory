/*
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreatenewappkeyRequest;
import org.openapitools.client.model.CreatenewappkeyResponse;
import org.openapitools.client.model.Getappkeysfromaccount;
import org.openapitools.client.model.UpdateappkeyRequest;
import org.openapitools.client.model.VLMError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppKeysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppKeysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppKeysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createnewappkey
     * @param createnewappkeyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createnewappkeyCall(CreatenewappkeyRequest createnewappkeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createnewappkeyRequest;

        // create path and map variables
        String localVarPath = "/api/vlm/appkeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createnewappkeyValidateBeforeCall(CreatenewappkeyRequest createnewappkeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createnewappkeyRequest' is set
        if (createnewappkeyRequest == null) {
            throw new ApiException("Missing the required parameter 'createnewappkeyRequest' when calling createnewappkey(Async)");
        }

        return createnewappkeyCall(createnewappkeyRequest, _callback);

    }

    /**
     * Create new appkey
     * Creates a new pair of &#x60;appKey&#x60; and &#x60;appToken&#x60;.
     * @param createnewappkeyRequest  (required)
     * @return CreatenewappkeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreatenewappkeyResponse createnewappkey(CreatenewappkeyRequest createnewappkeyRequest) throws ApiException {
        ApiResponse<CreatenewappkeyResponse> localVarResp = createnewappkeyWithHttpInfo(createnewappkeyRequest);
        return localVarResp.getData();
    }

    /**
     * Create new appkey
     * Creates a new pair of &#x60;appKey&#x60; and &#x60;appToken&#x60;.
     * @param createnewappkeyRequest  (required)
     * @return ApiResponse&lt;CreatenewappkeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatenewappkeyResponse> createnewappkeyWithHttpInfo(CreatenewappkeyRequest createnewappkeyRequest) throws ApiException {
        okhttp3.Call localVarCall = createnewappkeyValidateBeforeCall(createnewappkeyRequest, null);
        Type localVarReturnType = new TypeToken<CreatenewappkeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new appkey (asynchronously)
     * Creates a new pair of &#x60;appKey&#x60; and &#x60;appToken&#x60;.
     * @param createnewappkeyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createnewappkeyAsync(CreatenewappkeyRequest createnewappkeyRequest, final ApiCallback<CreatenewappkeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createnewappkeyValidateBeforeCall(createnewappkeyRequest, _callback);
        Type localVarReturnType = new TypeToken<CreatenewappkeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getappkeysfromaccount
     * @param contentType The media type of the body of the request. Default value for license manager protocol is application/json (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getappkeysfromaccountCall(String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/vlm/appkeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getappkeysfromaccountValidateBeforeCall(String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getappkeysfromaccount(Async)");
        }

        return getappkeysfromaccountCall(contentType, _callback);

    }

    /**
     * Get appKeys from account
     * Gets all application keys from an account.
     * @param contentType The media type of the body of the request. Default value for license manager protocol is application/json (required)
     * @return List&lt;Getappkeysfromaccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Getappkeysfromaccount> getappkeysfromaccount(String contentType) throws ApiException {
        ApiResponse<List<Getappkeysfromaccount>> localVarResp = getappkeysfromaccountWithHttpInfo(contentType);
        return localVarResp.getData();
    }

    /**
     * Get appKeys from account
     * Gets all application keys from an account.
     * @param contentType The media type of the body of the request. Default value for license manager protocol is application/json (required)
     * @return ApiResponse&lt;List&lt;Getappkeysfromaccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Getappkeysfromaccount>> getappkeysfromaccountWithHttpInfo(String contentType) throws ApiException {
        okhttp3.Call localVarCall = getappkeysfromaccountValidateBeforeCall(contentType, null);
        Type localVarReturnType = new TypeToken<List<Getappkeysfromaccount>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get appKeys from account (asynchronously)
     * Gets all application keys from an account.
     * @param contentType The media type of the body of the request. Default value for license manager protocol is application/json (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getappkeysfromaccountAsync(String contentType, final ApiCallback<List<Getappkeysfromaccount>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getappkeysfromaccountValidateBeforeCall(contentType, _callback);
        Type localVarReturnType = new TypeToken<List<Getappkeysfromaccount>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateappkey
     * @param id ID from the appKey which will be updated (required)
     * @param updateappkeyRequest Request body for updating AppKeys (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateappkeyCall(String id, UpdateappkeyRequest updateappkeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateappkeyRequest;

        // create path and map variables
        String localVarPath = "/api/vlm/appkeys/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateappkeyValidateBeforeCall(String id, UpdateappkeyRequest updateappkeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateappkey(Async)");
        }

        // verify the required parameter 'updateappkeyRequest' is set
        if (updateappkeyRequest == null) {
            throw new ApiException("Missing the required parameter 'updateappkeyRequest' when calling updateappkey(Async)");
        }

        return updateappkeyCall(id, updateappkeyRequest, _callback);

    }

    /**
     * Update appkey
     * Activates or deactivates an &#x60;appKey&#x60; by its ID.
     * @param id ID from the appKey which will be updated (required)
     * @param updateappkeyRequest Request body for updating AppKeys (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public void updateappkey(String id, UpdateappkeyRequest updateappkeyRequest) throws ApiException {
        updateappkeyWithHttpInfo(id, updateappkeyRequest);
    }

    /**
     * Update appkey
     * Activates or deactivates an &#x60;appKey&#x60; by its ID.
     * @param id ID from the appKey which will be updated (required)
     * @param updateappkeyRequest Request body for updating AppKeys (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateappkeyWithHttpInfo(String id, UpdateappkeyRequest updateappkeyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateappkeyValidateBeforeCall(id, updateappkeyRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update appkey (asynchronously)
     * Activates or deactivates an &#x60;appKey&#x60; by its ID.
     * @param id ID from the appKey which will be updated (required)
     * @param updateappkeyRequest Request body for updating AppKeys (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateappkeyAsync(String id, UpdateappkeyRequest updateappkeyRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateappkeyValidateBeforeCall(id, updateappkeyRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
