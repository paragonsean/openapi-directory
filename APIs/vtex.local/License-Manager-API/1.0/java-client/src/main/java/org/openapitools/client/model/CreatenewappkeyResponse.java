/*
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response body of sucessful call to /api/vlm/appkeys
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:43.802250-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreatenewappkeyResponse {
  public static final String SERIALIZED_NAME_APP_KEY = "appKey";
  @SerializedName(SERIALIZED_NAME_APP_KEY)
  private String appKey;

  public static final String SERIALIZED_NAME_APP_TOKEN = "appToken";
  @SerializedName(SERIALIZED_NAME_APP_TOKEN)
  private String appToken;

  public static final String SERIALIZED_NAME_CREATED_IN = "createdIn";
  @SerializedName(SERIALIZED_NAME_CREATED_IN)
  private OffsetDateTime createdIn;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public CreatenewappkeyResponse() {
  }

  public CreatenewappkeyResponse appKey(String appKey) {
    this.appKey = appKey;
    return this;
  }

  /**
   * AppKey (Access Key in the license manager UI)
   * @return appKey
   */
  @javax.annotation.Nonnull
  public String getAppKey() {
    return appKey;
  }

  public void setAppKey(String appKey) {
    this.appKey = appKey;
  }


  public CreatenewappkeyResponse appToken(String appToken) {
    this.appToken = appToken;
    return this;
  }

  /**
   * Secret of application key
   * @return appToken
   */
  @javax.annotation.Nonnull
  public String getAppToken() {
    return appToken;
  }

  public void setAppToken(String appToken) {
    this.appToken = appToken;
  }


  public CreatenewappkeyResponse createdIn(OffsetDateTime createdIn) {
    this.createdIn = createdIn;
    return this;
  }

  /**
   * Date of creation of application key
   * @return createdIn
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedIn() {
    return createdIn;
  }

  public void setCreatedIn(OffsetDateTime createdIn) {
    this.createdIn = createdIn;
  }


  public CreatenewappkeyResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of application key
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CreatenewappkeyResponse isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * If the application key is active
   * @return isActive
   */
  @javax.annotation.Nonnull
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public CreatenewappkeyResponse label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Label for application key
   * @return label
   */
  @javax.annotation.Nonnull
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatenewappkeyResponse createnewappkeyResponse = (CreatenewappkeyResponse) o;
    return Objects.equals(this.appKey, createnewappkeyResponse.appKey) &&
        Objects.equals(this.appToken, createnewappkeyResponse.appToken) &&
        Objects.equals(this.createdIn, createnewappkeyResponse.createdIn) &&
        Objects.equals(this.id, createnewappkeyResponse.id) &&
        Objects.equals(this.isActive, createnewappkeyResponse.isActive) &&
        Objects.equals(this.label, createnewappkeyResponse.label);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appKey, appToken, createdIn, id, isActive, label);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatenewappkeyResponse {\n");
    sb.append("    appKey: ").append(toIndentedString(appKey)).append("\n");
    sb.append("    appToken: ").append(toIndentedString(appToken)).append("\n");
    sb.append("    createdIn: ").append(toIndentedString(createdIn)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appKey");
    openapiFields.add("appToken");
    openapiFields.add("createdIn");
    openapiFields.add("id");
    openapiFields.add("isActive");
    openapiFields.add("label");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("appKey");
    openapiRequiredFields.add("appToken");
    openapiRequiredFields.add("createdIn");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isActive");
    openapiRequiredFields.add("label");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreatenewappkeyResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreatenewappkeyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreatenewappkeyResponse is not found in the empty JSON string", CreatenewappkeyResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreatenewappkeyResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreatenewappkeyResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreatenewappkeyResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("appKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appKey").toString()));
      }
      if (!jsonObj.get("appToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appToken").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreatenewappkeyResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreatenewappkeyResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreatenewappkeyResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreatenewappkeyResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CreatenewappkeyResponse>() {
           @Override
           public void write(JsonWriter out, CreatenewappkeyResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreatenewappkeyResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreatenewappkeyResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreatenewappkeyResponse
   * @throws IOException if the JSON string is invalid with respect to CreatenewappkeyResponse
   */
  public static CreatenewappkeyResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreatenewappkeyResponse.class);
  }

  /**
   * Convert an instance of CreatenewappkeyResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

