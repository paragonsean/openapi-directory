/*
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateUser400Response;
import org.openapitools.client.model.GetRolesbyUser200ResponseInner;
import org.openapitools.client.model.GetUser400Response;
import org.openapitools.client.model.ListRolesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RolesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RolesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RolesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getListRoles
     * @param contentType The media type of the body of the request. Default value for license manager protocol is application/json (required)
     * @param numItems Number of items in the returned page (optional, default to 10)
     * @param pageNumber Which page from the whole list will be returned (optional, default to 1)
     * @param sort Chooses the field that the list will be sorted by (optional, default to id)
     * @param sortType Defines the sorting order. ASC is used for ascendant order. DSC is used for descendant order (optional, default to ASC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListRolesCall(String contentType, Integer numItems, Integer pageNumber, String sort, String sortType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/license-manager/site/pvt/roles/list/paged";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (numItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numItems", numItems));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sortType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortType", sortType));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListRolesValidateBeforeCall(String contentType, Integer numItems, Integer pageNumber, String sort, String sortType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getListRoles(Async)");
        }

        return getListRolesCall(contentType, numItems, pageNumber, sort, sortType, _callback);

    }

    /**
     * Get List of Roles
     * Returns a list of available roles. The response is divided in pages. The query parameter &#x60;numItems&#x60; defines the number of items in each page, and consequently the amount of pages for the whole list.
     * @param contentType The media type of the body of the request. Default value for license manager protocol is application/json (required)
     * @param numItems Number of items in the returned page (optional, default to 10)
     * @param pageNumber Which page from the whole list will be returned (optional, default to 1)
     * @param sort Chooses the field that the list will be sorted by (optional, default to id)
     * @param sortType Defines the sorting order. ASC is used for ascendant order. DSC is used for descendant order (optional, default to ASC)
     * @return ListRolesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListRolesResponse getListRoles(String contentType, Integer numItems, Integer pageNumber, String sort, String sortType) throws ApiException {
        ApiResponse<ListRolesResponse> localVarResp = getListRolesWithHttpInfo(contentType, numItems, pageNumber, sort, sortType);
        return localVarResp.getData();
    }

    /**
     * Get List of Roles
     * Returns a list of available roles. The response is divided in pages. The query parameter &#x60;numItems&#x60; defines the number of items in each page, and consequently the amount of pages for the whole list.
     * @param contentType The media type of the body of the request. Default value for license manager protocol is application/json (required)
     * @param numItems Number of items in the returned page (optional, default to 10)
     * @param pageNumber Which page from the whole list will be returned (optional, default to 1)
     * @param sort Chooses the field that the list will be sorted by (optional, default to id)
     * @param sortType Defines the sorting order. ASC is used for ascendant order. DSC is used for descendant order (optional, default to ASC)
     * @return ApiResponse&lt;ListRolesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRolesResponse> getListRolesWithHttpInfo(String contentType, Integer numItems, Integer pageNumber, String sort, String sortType) throws ApiException {
        okhttp3.Call localVarCall = getListRolesValidateBeforeCall(contentType, numItems, pageNumber, sort, sortType, null);
        Type localVarReturnType = new TypeToken<ListRolesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get List of Roles (asynchronously)
     * Returns a list of available roles. The response is divided in pages. The query parameter &#x60;numItems&#x60; defines the number of items in each page, and consequently the amount of pages for the whole list.
     * @param contentType The media type of the body of the request. Default value for license manager protocol is application/json (required)
     * @param numItems Number of items in the returned page (optional, default to 10)
     * @param pageNumber Which page from the whole list will be returned (optional, default to 1)
     * @param sort Chooses the field that the list will be sorted by (optional, default to id)
     * @param sortType Defines the sorting order. ASC is used for ascendant order. DSC is used for descendant order (optional, default to ASC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListRolesAsync(String contentType, Integer numItems, Integer pageNumber, String sort, String sortType, final ApiCallback<ListRolesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListRolesValidateBeforeCall(contentType, numItems, pageNumber, sort, sortType, _callback);
        Type localVarReturnType = new TypeToken<ListRolesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRolesbyUser
     * @param contentType The media type of the body of the request. Default value for license manager protocol is application/json (required)
     * @param userId ID corresponding to the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRolesbyUserCall(String contentType, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/license-manager/users/{userId}/roles"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRolesbyUserValidateBeforeCall(String contentType, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getRolesbyUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getRolesbyUser(Async)");
        }

        return getRolesbyUserCall(contentType, userId, _callback);

    }

    /**
     * Get Roles by User/appKey
     * Gets roles of a particular user or application key.
     * @param contentType The media type of the body of the request. Default value for license manager protocol is application/json (required)
     * @param userId ID corresponding to the user (required)
     * @return List&lt;GetRolesbyUser200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<GetRolesbyUser200ResponseInner> getRolesbyUser(String contentType, String userId) throws ApiException {
        ApiResponse<List<GetRolesbyUser200ResponseInner>> localVarResp = getRolesbyUserWithHttpInfo(contentType, userId);
        return localVarResp.getData();
    }

    /**
     * Get Roles by User/appKey
     * Gets roles of a particular user or application key.
     * @param contentType The media type of the body of the request. Default value for license manager protocol is application/json (required)
     * @param userId ID corresponding to the user (required)
     * @return ApiResponse&lt;List&lt;GetRolesbyUser200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetRolesbyUser200ResponseInner>> getRolesbyUserWithHttpInfo(String contentType, String userId) throws ApiException {
        okhttp3.Call localVarCall = getRolesbyUserValidateBeforeCall(contentType, userId, null);
        Type localVarReturnType = new TypeToken<List<GetRolesbyUser200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Roles by User/appKey (asynchronously)
     * Gets roles of a particular user or application key.
     * @param contentType The media type of the body of the request. Default value for license manager protocol is application/json (required)
     * @param userId ID corresponding to the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRolesbyUserAsync(String contentType, String userId, final ApiCallback<List<GetRolesbyUser200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRolesbyUserValidateBeforeCall(contentType, userId, _callback);
        Type localVarReturnType = new TypeToken<List<GetRolesbyUser200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putRolesinUser
     * @param userId ID corresponding to the user (required)
     * @param requestBody List of roles&#39; IDs to add to the user or application key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - A no-content response, but the roles were added successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - A userId or role list with invalid format. The message on the body of the response will contain further information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error - One possible reason is that the userId is not present on the database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putRolesinUserCall(String userId, List<Integer> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/license-manager/users/{userId}/roles"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putRolesinUserValidateBeforeCall(String userId, List<Integer> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling putRolesinUser(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling putRolesinUser(Async)");
        }

        return putRolesinUserCall(userId, requestBody, _callback);

    }

    /**
     * Put Roles in User/appKey
     * Allows you to add roles to a particular user or application key by specifying the list of roles&#39; IDs on the request&#39;s body.
     * @param userId ID corresponding to the user (required)
     * @param requestBody List of roles&#39; IDs to add to the user or application key. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - A no-content response, but the roles were added successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - A userId or role list with invalid format. The message on the body of the response will contain further information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error - One possible reason is that the userId is not present on the database. </td><td>  -  </td></tr>
     </table>
     */
    public void putRolesinUser(String userId, List<Integer> requestBody) throws ApiException {
        putRolesinUserWithHttpInfo(userId, requestBody);
    }

    /**
     * Put Roles in User/appKey
     * Allows you to add roles to a particular user or application key by specifying the list of roles&#39; IDs on the request&#39;s body.
     * @param userId ID corresponding to the user (required)
     * @param requestBody List of roles&#39; IDs to add to the user or application key. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - A no-content response, but the roles were added successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - A userId or role list with invalid format. The message on the body of the response will contain further information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error - One possible reason is that the userId is not present on the database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putRolesinUserWithHttpInfo(String userId, List<Integer> requestBody) throws ApiException {
        okhttp3.Call localVarCall = putRolesinUserValidateBeforeCall(userId, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Put Roles in User/appKey (asynchronously)
     * Allows you to add roles to a particular user or application key by specifying the list of roles&#39; IDs on the request&#39;s body.
     * @param userId ID corresponding to the user (required)
     * @param requestBody List of roles&#39; IDs to add to the user or application key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - A no-content response, but the roles were added successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - A userId or role list with invalid format. The message on the body of the response will contain further information. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error - One possible reason is that the userId is not present on the database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putRolesinUserAsync(String userId, List<Integer> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putRolesinUserValidateBeforeCall(userId, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeRolefromUser
     * @param contentType The media type of the body of the request. Default value for license manager protocol is application/json (required)
     * @param userId ID corresponding to the user (required)
     * @param roleId ID of the role which will be removed from the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - A no-content response, but the role deletion was performed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - A userId or role list with invalid format. The message on the body of the response will contain further information. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeRolefromUserCall(String contentType, String userId, String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/license-manager/users/{userId}/roles/{roleId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeRolefromUserValidateBeforeCall(String contentType, String userId, String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling removeRolefromUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeRolefromUser(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling removeRolefromUser(Async)");
        }

        return removeRolefromUserCall(contentType, userId, roleId, _callback);

    }

    /**
     * Remove Role from User/appKey
     * Allows you to remove a role from a specific user or application key. This method only allows the removal of one role per request. The role&#39;s ID must be specified on the request path, not on the request body.    &gt; Note that a successful response returns a &#x60;204&#x60; response with an empty body. A deletion on a role or user that does not exist will also return a &#x60;204&#x60;. Thus, this method should not be used to verify the existence of a specific user or role.
     * @param contentType The media type of the body of the request. Default value for license manager protocol is application/json (required)
     * @param userId ID corresponding to the user (required)
     * @param roleId ID of the role which will be removed from the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - A no-content response, but the role deletion was performed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - A userId or role list with invalid format. The message on the body of the response will contain further information. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public void removeRolefromUser(String contentType, String userId, String roleId) throws ApiException {
        removeRolefromUserWithHttpInfo(contentType, userId, roleId);
    }

    /**
     * Remove Role from User/appKey
     * Allows you to remove a role from a specific user or application key. This method only allows the removal of one role per request. The role&#39;s ID must be specified on the request path, not on the request body.    &gt; Note that a successful response returns a &#x60;204&#x60; response with an empty body. A deletion on a role or user that does not exist will also return a &#x60;204&#x60;. Thus, this method should not be used to verify the existence of a specific user or role.
     * @param contentType The media type of the body of the request. Default value for license manager protocol is application/json (required)
     * @param userId ID corresponding to the user (required)
     * @param roleId ID of the role which will be removed from the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - A no-content response, but the role deletion was performed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - A userId or role list with invalid format. The message on the body of the response will contain further information. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeRolefromUserWithHttpInfo(String contentType, String userId, String roleId) throws ApiException {
        okhttp3.Call localVarCall = removeRolefromUserValidateBeforeCall(contentType, userId, roleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove Role from User/appKey (asynchronously)
     * Allows you to remove a role from a specific user or application key. This method only allows the removal of one role per request. The role&#39;s ID must be specified on the request path, not on the request body.    &gt; Note that a successful response returns a &#x60;204&#x60; response with an empty body. A deletion on a role or user that does not exist will also return a &#x60;204&#x60;. Thus, this method should not be used to verify the existence of a specific user or role.
     * @param contentType The media type of the body of the request. Default value for license manager protocol is application/json (required)
     * @param userId ID corresponding to the user (required)
     * @param roleId ID of the role which will be removed from the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success - A no-content response, but the role deletion was performed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - A userId or role list with invalid format. The message on the body of the response will contain further information. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeRolefromUserAsync(String contentType, String userId, String roleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeRolefromUserValidateBeforeCall(contentType, userId, roleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
