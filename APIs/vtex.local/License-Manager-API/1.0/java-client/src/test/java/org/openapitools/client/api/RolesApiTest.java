/*
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateUser400Response;
import org.openapitools.client.model.GetRolesbyUser200ResponseInner;
import org.openapitools.client.model.GetUser400Response;
import org.openapitools.client.model.ListRolesResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RolesApi
 */
@Disabled
public class RolesApiTest {

    private final RolesApi api = new RolesApi();

    /**
     * Get List of Roles
     *
     * Returns a list of available roles. The response is divided in pages. The query parameter &#x60;numItems&#x60; defines the number of items in each page, and consequently the amount of pages for the whole list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListRolesTest() throws ApiException {
        String contentType = null;
        Integer numItems = null;
        Integer pageNumber = null;
        String sort = null;
        String sortType = null;
        ListRolesResponse response = api.getListRoles(contentType, numItems, pageNumber, sort, sortType);
        // TODO: test validations
    }

    /**
     * Get Roles by User/appKey
     *
     * Gets roles of a particular user or application key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRolesbyUserTest() throws ApiException {
        String contentType = null;
        String userId = null;
        List<GetRolesbyUser200ResponseInner> response = api.getRolesbyUser(contentType, userId);
        // TODO: test validations
    }

    /**
     * Put Roles in User/appKey
     *
     * Allows you to add roles to a particular user or application key by specifying the list of roles&#39; IDs on the request&#39;s body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putRolesinUserTest() throws ApiException {
        String userId = null;
        List<Integer> requestBody = null;
        api.putRolesinUser(userId, requestBody);
        // TODO: test validations
    }

    /**
     * Remove Role from User/appKey
     *
     * Allows you to remove a role from a specific user or application key. This method only allows the removal of one role per request. The role&#39;s ID must be specified on the request path, not on the request body.    &gt; Note that a successful response returns a &#x60;204&#x60; response with an empty body. A deletion on a role or user that does not exist will also return a &#x60;204&#x60;. Thus, this method should not be used to verify the existence of a specific user or role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeRolefromUserTest() throws ApiException {
        String contentType = null;
        String userId = null;
        String roleId = null;
        api.removeRolefromUser(contentType, userId, roleId);
        // TODO: test validations
    }

}
