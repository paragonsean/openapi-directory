/*
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateUser200Response;
import org.openapitools.client.model.CreateUser400Response;
import org.openapitools.client.model.CreateUserRequest;
import org.openapitools.client.model.GetUser400Response;
import org.openapitools.client.model.ListUsersResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Create User
     *
     * Allows you to create a user by providing an email (mandatory) and name (optional). The email must be in a valid format. The success response will contain the generated &#x60;userId&#x60; for that user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        CreateUserRequest createUserRequest = null;
        CreateUser200Response response = api.createUser(createUserRequest);
        // TODO: test validations
    }

    /**
     * Get List of Users
     *
     * Returns a list of registered users. The response is divided in pages. The query parameter &#x60;numItems&#x60; defines the number of items in each page, and consequently the amount of pages for the whole list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListUsersTest() throws ApiException {
        String contentType = null;
        Integer numItems = null;
        Integer pageNumber = null;
        String sort = null;
        String sortType = null;
        ListUsersResponse response = api.getListUsers(contentType, numItems, pageNumber, sort, sortType);
        // TODO: test validations
    }

    /**
     * Get User
     *
     * Allows you to get a user from the database, using the &#x60;userId&#x60; as the identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String contentType = null;
        String userId = null;
        CreateUser200Response response = api.getUser(contentType, userId);
        // TODO: test validations
    }

}
