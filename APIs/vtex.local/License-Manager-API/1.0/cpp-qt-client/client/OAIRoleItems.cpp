/**
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoleItems.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoleItems::OAIRoleItems(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoleItems::OAIRoleItems() {
    this->initializeModel();
}

OAIRoleItems::~OAIRoleItems() {}

void OAIRoleItems::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_admin_isSet = false;
    m_is_admin_isValid = false;

    m_logins_isSet = false;
    m_logins_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_role_type_isSet = false;
    m_role_type_isValid = false;
}

void OAIRoleItems::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoleItems::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_admin_isValid = ::OpenAPI::fromJsonValue(m_is_admin, json[QString("isAdmin")]);
    m_is_admin_isSet = !json[QString("isAdmin")].isNull() && m_is_admin_isValid;

    m_logins_isValid = ::OpenAPI::fromJsonValue(m_logins, json[QString("logins")]);
    m_logins_isSet = !json[QString("logins")].isNull() && m_logins_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_role_type_isValid = ::OpenAPI::fromJsonValue(m_role_type, json[QString("roleType")]);
    m_role_type_isSet = !json[QString("roleType")].isNull() && m_role_type_isValid;
}

QString OAIRoleItems::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoleItems::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_admin_isSet) {
        obj.insert(QString("isAdmin"), ::OpenAPI::toJsonValue(m_is_admin));
    }
    if (m_logins_isSet) {
        obj.insert(QString("logins"), ::OpenAPI::toJsonValue(m_logins));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_resources_isSet) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_role_type_isSet) {
        obj.insert(QString("roleType"), ::OpenAPI::toJsonValue(m_role_type));
    }
    return obj;
}

qint32 OAIRoleItems::getId() const {
    return m_id;
}
void OAIRoleItems::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRoleItems::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRoleItems::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIRoleItems::isIsAdmin() const {
    return m_is_admin;
}
void OAIRoleItems::setIsAdmin(const bool &is_admin) {
    m_is_admin = is_admin;
    m_is_admin_isSet = true;
}

bool OAIRoleItems::is_is_admin_Set() const{
    return m_is_admin_isSet;
}

bool OAIRoleItems::is_is_admin_Valid() const{
    return m_is_admin_isValid;
}

QString OAIRoleItems::getLogins() const {
    return m_logins;
}
void OAIRoleItems::setLogins(const QString &logins) {
    m_logins = logins;
    m_logins_isSet = true;
}

bool OAIRoleItems::is_logins_Set() const{
    return m_logins_isSet;
}

bool OAIRoleItems::is_logins_Valid() const{
    return m_logins_isValid;
}

QString OAIRoleItems::getName() const {
    return m_name;
}
void OAIRoleItems::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRoleItems::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRoleItems::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIProductItems> OAIRoleItems::getProducts() const {
    return m_products;
}
void OAIRoleItems::setProducts(const QList<OAIProductItems> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAIRoleItems::is_products_Set() const{
    return m_products_isSet;
}

bool OAIRoleItems::is_products_Valid() const{
    return m_products_isValid;
}

QString OAIRoleItems::getResources() const {
    return m_resources;
}
void OAIRoleItems::setResources(const QString &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIRoleItems::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIRoleItems::is_resources_Valid() const{
    return m_resources_isValid;
}

qint32 OAIRoleItems::getRoleType() const {
    return m_role_type;
}
void OAIRoleItems::setRoleType(const qint32 &role_type) {
    m_role_type = role_type;
    m_role_type_isSet = true;
}

bool OAIRoleItems::is_role_type_Set() const{
    return m_role_type_isSet;
}

bool OAIRoleItems::is_role_type_Valid() const{
    return m_role_type_isValid;
}

bool OAIRoleItems::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoleItems::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
