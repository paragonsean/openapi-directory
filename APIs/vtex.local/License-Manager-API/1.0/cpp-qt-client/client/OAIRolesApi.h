/**
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRolesApi_H
#define OAI_OAIRolesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateUser_400_response.h"
#include "OAIGetRolesbyUser_200_response_inner.h"
#include "OAIGetUser_400_response.h"
#include "OAIListRolesResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRolesApi : public QObject {
    Q_OBJECT

public:
    OAIRolesApi(const int timeOut = 0);
    ~OAIRolesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  num_items qint32 [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  sort_type QString [optional]
    */
    virtual void getListRoles(const QString &content_type, const ::OpenAPI::OptionalParam<qint32> &num_items = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void getRolesbyUser(const QString &content_type, const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  request_body QList<qint32> [required]
    */
    virtual void putRolesinUser(const QString &user_id, const QList<qint32> &request_body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  role_id QString [required]
    */
    virtual void removeRolefromUser(const QString &content_type, const QString &user_id, const QString &role_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getListRolesCallback(OAIHttpRequestWorker *worker);
    void getRolesbyUserCallback(OAIHttpRequestWorker *worker);
    void putRolesinUserCallback(OAIHttpRequestWorker *worker);
    void removeRolefromUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getListRolesSignal(OAIListRolesResponse summary);
    void getRolesbyUserSignal(QList<OAIGetRolesbyUser_200_response_inner> summary);
    void putRolesinUserSignal();
    void removeRolefromUserSignal();


    void getListRolesSignalFull(OAIHttpRequestWorker *worker, OAIListRolesResponse summary);
    void getRolesbyUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetRolesbyUser_200_response_inner> summary);
    void putRolesinUserSignalFull(OAIHttpRequestWorker *worker);
    void removeRolefromUserSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getListRolesSignalError() instead")
    void getListRolesSignalE(OAIListRolesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getListRolesSignalError(OAIListRolesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRolesbyUserSignalError() instead")
    void getRolesbyUserSignalE(QList<OAIGetRolesbyUser_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRolesbyUserSignalError(QList<OAIGetRolesbyUser_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putRolesinUserSignalError() instead")
    void putRolesinUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putRolesinUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeRolefromUserSignalError() instead")
    void removeRolefromUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeRolefromUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getListRolesSignalErrorFull() instead")
    void getListRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getListRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRolesbyUserSignalErrorFull() instead")
    void getRolesbyUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRolesbyUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putRolesinUserSignalErrorFull() instead")
    void putRolesinUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putRolesinUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeRolefromUserSignalErrorFull() instead")
    void removeRolefromUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeRolefromUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
