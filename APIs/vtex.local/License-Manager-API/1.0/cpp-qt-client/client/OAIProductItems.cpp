/**
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductItems.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductItems::OAIProductItems(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductItems::OAIProductItems() {
    this->initializeModel();
}

OAIProductItems::~OAIProductItems() {}

void OAIProductItems::initializeModel() {

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_category_name_isSet = false;
    m_category_name_isValid = false;

    m_console_url_mask_isSet = false;
    m_console_url_mask_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_product_resources_isSet = false;
    m_product_resources_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_url_configuration_isSet = false;
    m_url_configuration_isValid = false;

    m_web_api_url_mask_isSet = false;
    m_web_api_url_mask_isValid = false;
}

void OAIProductItems::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductItems::fromJsonObject(QJsonObject json) {

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_category_name_isValid = ::OpenAPI::fromJsonValue(m_category_name, json[QString("categoryName")]);
    m_category_name_isSet = !json[QString("categoryName")].isNull() && m_category_name_isValid;

    m_console_url_mask_isValid = ::OpenAPI::fromJsonValue(m_console_url_mask, json[QString("consoleUrlMask")]);
    m_console_url_mask_isSet = !json[QString("consoleUrlMask")].isNull() && m_console_url_mask_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_product_resources_isValid = ::OpenAPI::fromJsonValue(m_product_resources, json[QString("productResources")]);
    m_product_resources_isSet = !json[QString("productResources")].isNull() && m_product_resources_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_url_configuration_isValid = ::OpenAPI::fromJsonValue(m_url_configuration, json[QString("urlConfiguration")]);
    m_url_configuration_isSet = !json[QString("urlConfiguration")].isNull() && m_url_configuration_isValid;

    m_web_api_url_mask_isValid = ::OpenAPI::fromJsonValue(m_web_api_url_mask, json[QString("webApiUrlMask")]);
    m_web_api_url_mask_isSet = !json[QString("webApiUrlMask")].isNull() && m_web_api_url_mask_isValid;
}

QString OAIProductItems::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductItems::asJsonObject() const {
    QJsonObject obj;
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_category_name_isSet) {
        obj.insert(QString("categoryName"), ::OpenAPI::toJsonValue(m_category_name));
    }
    if (m_console_url_mask_isSet) {
        obj.insert(QString("consoleUrlMask"), ::OpenAPI::toJsonValue(m_console_url_mask));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_product_resources_isSet) {
        obj.insert(QString("productResources"), ::OpenAPI::toJsonValue(m_product_resources));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_url_configuration_isSet) {
        obj.insert(QString("urlConfiguration"), ::OpenAPI::toJsonValue(m_url_configuration));
    }
    if (m_web_api_url_mask_isSet) {
        obj.insert(QString("webApiUrlMask"), ::OpenAPI::toJsonValue(m_web_api_url_mask));
    }
    return obj;
}

QString OAIProductItems::getCategoryId() const {
    return m_category_id;
}
void OAIProductItems::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIProductItems::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIProductItems::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAIProductItems::getCategoryName() const {
    return m_category_name;
}
void OAIProductItems::setCategoryName(const QString &category_name) {
    m_category_name = category_name;
    m_category_name_isSet = true;
}

bool OAIProductItems::is_category_name_Set() const{
    return m_category_name_isSet;
}

bool OAIProductItems::is_category_name_Valid() const{
    return m_category_name_isValid;
}

QString OAIProductItems::getConsoleUrlMask() const {
    return m_console_url_mask;
}
void OAIProductItems::setConsoleUrlMask(const QString &console_url_mask) {
    m_console_url_mask = console_url_mask;
    m_console_url_mask_isSet = true;
}

bool OAIProductItems::is_console_url_mask_Set() const{
    return m_console_url_mask_isSet;
}

bool OAIProductItems::is_console_url_mask_Valid() const{
    return m_console_url_mask_isValid;
}

QString OAIProductItems::getDescription() const {
    return m_description;
}
void OAIProductItems::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProductItems::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProductItems::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProductItems::getId() const {
    return m_id;
}
void OAIProductItems::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProductItems::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProductItems::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProductItems::getName() const {
    return m_name;
}
void OAIProductItems::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProductItems::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProductItems::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProductItems::getProductResources() const {
    return m_product_resources;
}
void OAIProductItems::setProductResources(const QString &product_resources) {
    m_product_resources = product_resources;
    m_product_resources_isSet = true;
}

bool OAIProductItems::is_product_resources_Set() const{
    return m_product_resources_isSet;
}

bool OAIProductItems::is_product_resources_Valid() const{
    return m_product_resources_isValid;
}

QString OAIProductItems::getUrl() const {
    return m_url;
}
void OAIProductItems::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIProductItems::is_url_Set() const{
    return m_url_isSet;
}

bool OAIProductItems::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIProductItems::getUrlConfiguration() const {
    return m_url_configuration;
}
void OAIProductItems::setUrlConfiguration(const QString &url_configuration) {
    m_url_configuration = url_configuration;
    m_url_configuration_isSet = true;
}

bool OAIProductItems::is_url_configuration_Set() const{
    return m_url_configuration_isSet;
}

bool OAIProductItems::is_url_configuration_Valid() const{
    return m_url_configuration_isValid;
}

QString OAIProductItems::getWebApiUrlMask() const {
    return m_web_api_url_mask;
}
void OAIProductItems::setWebApiUrlMask(const QString &web_api_url_mask) {
    m_web_api_url_mask = web_api_url_mask;
    m_web_api_url_mask_isSet = true;
}

bool OAIProductItems::is_web_api_url_mask_Set() const{
    return m_web_api_url_mask_isSet;
}

bool OAIProductItems::is_web_api_url_mask_Valid() const{
    return m_web_api_url_mask_isValid;
}

bool OAIProductItems::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_console_url_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_resources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_api_url_mask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductItems::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
