/**
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountResponse::OAIAccountResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountResponse::OAIAccountResponse() {
    this->initializeModel();
}

OAIAccountResponse::~OAIAccountResponse() {}

void OAIAccountResponse::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_app_key_isSet = false;
    m_app_key_isValid = false;

    m_app_keys_isSet = false;
    m_app_keys_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_cnpj_isSet = false;
    m_cnpj_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_complement_isSet = false;
    m_complement_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_default_url_isSet = false;
    m_default_url_isValid = false;

    m_district_isSet = false;
    m_district_isValid = false;

    m_has_logo_isSet = false;
    m_has_logo_isValid = false;

    m_have_parent_account_isSet = false;
    m_have_parent_account_isValid = false;

    m_hosts_isSet = false;
    m_hosts_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_inactivation_date_isSet = false;
    m_inactivation_date_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_operating_isSet = false;
    m_is_operating_isValid = false;

    m_licenses_isSet = false;
    m_licenses_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_lv_isSet = false;
    m_lv_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_operation_date_isSet = false;
    m_operation_date_isValid = false;

    m_parent_account_id_isSet = false;
    m_parent_account_id_isValid = false;

    m_parent_account_name_isSet = false;
    m_parent_account_name_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_sites_isSet = false;
    m_sites_isValid = false;

    m_sponsor_isSet = false;
    m_sponsor_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_telephone_isSet = false;
    m_telephone_isValid = false;

    m_trading_name_isSet = false;
    m_trading_name_isValid = false;
}

void OAIAccountResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountResponse::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_app_key_isValid = ::OpenAPI::fromJsonValue(m_app_key, json[QString("appKey")]);
    m_app_key_isSet = !json[QString("appKey")].isNull() && m_app_key_isValid;

    m_app_keys_isValid = ::OpenAPI::fromJsonValue(m_app_keys, json[QString("appKeys")]);
    m_app_keys_isSet = !json[QString("appKeys")].isNull() && m_app_keys_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_cnpj_isValid = ::OpenAPI::fromJsonValue(m_cnpj, json[QString("cnpj")]);
    m_cnpj_isSet = !json[QString("cnpj")].isNull() && m_cnpj_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("companyName")]);
    m_company_name_isSet = !json[QString("companyName")].isNull() && m_company_name_isValid;

    m_complement_isValid = ::OpenAPI::fromJsonValue(m_complement, json[QString("complement")]);
    m_complement_isSet = !json[QString("complement")].isNull() && m_complement_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_default_url_isValid = ::OpenAPI::fromJsonValue(m_default_url, json[QString("defaultUrl")]);
    m_default_url_isSet = !json[QString("defaultUrl")].isNull() && m_default_url_isValid;

    m_district_isValid = ::OpenAPI::fromJsonValue(m_district, json[QString("district")]);
    m_district_isSet = !json[QString("district")].isNull() && m_district_isValid;

    m_has_logo_isValid = ::OpenAPI::fromJsonValue(m_has_logo, json[QString("hasLogo")]);
    m_has_logo_isSet = !json[QString("hasLogo")].isNull() && m_has_logo_isValid;

    m_have_parent_account_isValid = ::OpenAPI::fromJsonValue(m_have_parent_account, json[QString("haveParentAccount")]);
    m_have_parent_account_isSet = !json[QString("haveParentAccount")].isNull() && m_have_parent_account_isValid;

    m_hosts_isValid = ::OpenAPI::fromJsonValue(m_hosts, json[QString("hosts")]);
    m_hosts_isSet = !json[QString("hosts")].isNull() && m_hosts_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_inactivation_date_isValid = ::OpenAPI::fromJsonValue(m_inactivation_date, json[QString("inactivationDate")]);
    m_inactivation_date_isSet = !json[QString("inactivationDate")].isNull() && m_inactivation_date_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_is_operating_isValid = ::OpenAPI::fromJsonValue(m_is_operating, json[QString("isOperating")]);
    m_is_operating_isSet = !json[QString("isOperating")].isNull() && m_is_operating_isValid;

    m_licenses_isValid = ::OpenAPI::fromJsonValue(m_licenses, json[QString("licenses")]);
    m_licenses_isSet = !json[QString("licenses")].isNull() && m_licenses_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_lv_isValid = ::OpenAPI::fromJsonValue(m_lv, json[QString("lv")]);
    m_lv_isSet = !json[QString("lv")].isNull() && m_lv_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_operation_date_isValid = ::OpenAPI::fromJsonValue(m_operation_date, json[QString("operationDate")]);
    m_operation_date_isSet = !json[QString("operationDate")].isNull() && m_operation_date_isValid;

    m_parent_account_id_isValid = ::OpenAPI::fromJsonValue(m_parent_account_id, json[QString("parentAccountId")]);
    m_parent_account_id_isSet = !json[QString("parentAccountId")].isNull() && m_parent_account_id_isValid;

    m_parent_account_name_isValid = ::OpenAPI::fromJsonValue(m_parent_account_name, json[QString("parentAccountName")]);
    m_parent_account_name_isSet = !json[QString("parentAccountName")].isNull() && m_parent_account_name_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_sites_isValid = ::OpenAPI::fromJsonValue(m_sites, json[QString("sites")]);
    m_sites_isSet = !json[QString("sites")].isNull() && m_sites_isValid;

    m_sponsor_isValid = ::OpenAPI::fromJsonValue(m_sponsor, json[QString("sponsor")]);
    m_sponsor_isSet = !json[QString("sponsor")].isNull() && m_sponsor_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_telephone_isValid = ::OpenAPI::fromJsonValue(m_telephone, json[QString("telephone")]);
    m_telephone_isSet = !json[QString("telephone")].isNull() && m_telephone_isValid;

    m_trading_name_isValid = ::OpenAPI::fromJsonValue(m_trading_name, json[QString("tradingName")]);
    m_trading_name_isSet = !json[QString("tradingName")].isNull() && m_trading_name_isValid;
}

QString OAIAccountResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_app_key.isSet()) {
        obj.insert(QString("appKey"), ::OpenAPI::toJsonValue(m_app_key));
    }
    if (m_app_keys.size() > 0) {
        obj.insert(QString("appKeys"), ::OpenAPI::toJsonValue(m_app_keys));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_cnpj_isSet) {
        obj.insert(QString("cnpj"), ::OpenAPI::toJsonValue(m_cnpj));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("companyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_complement_isSet) {
        obj.insert(QString("complement"), ::OpenAPI::toJsonValue(m_complement));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_default_url_isSet) {
        obj.insert(QString("defaultUrl"), ::OpenAPI::toJsonValue(m_default_url));
    }
    if (m_district_isSet) {
        obj.insert(QString("district"), ::OpenAPI::toJsonValue(m_district));
    }
    if (m_has_logo_isSet) {
        obj.insert(QString("hasLogo"), ::OpenAPI::toJsonValue(m_has_logo));
    }
    if (m_have_parent_account_isSet) {
        obj.insert(QString("haveParentAccount"), ::OpenAPI::toJsonValue(m_have_parent_account));
    }
    if (m_hosts.size() > 0) {
        obj.insert(QString("hosts"), ::OpenAPI::toJsonValue(m_hosts));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inactivation_date_isSet) {
        obj.insert(QString("inactivationDate"), ::OpenAPI::toJsonValue(m_inactivation_date));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_operating_isSet) {
        obj.insert(QString("isOperating"), ::OpenAPI::toJsonValue(m_is_operating));
    }
    if (m_licenses.size() > 0) {
        obj.insert(QString("licenses"), ::OpenAPI::toJsonValue(m_licenses));
    }
    if (m_logo_isSet) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_lv_isSet) {
        obj.insert(QString("lv"), ::OpenAPI::toJsonValue(m_lv));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_operation_date_isSet) {
        obj.insert(QString("operationDate"), ::OpenAPI::toJsonValue(m_operation_date));
    }
    if (m_parent_account_id_isSet) {
        obj.insert(QString("parentAccountId"), ::OpenAPI::toJsonValue(m_parent_account_id));
    }
    if (m_parent_account_name_isSet) {
        obj.insert(QString("parentAccountName"), ::OpenAPI::toJsonValue(m_parent_account_name));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_sites.size() > 0) {
        obj.insert(QString("sites"), ::OpenAPI::toJsonValue(m_sites));
    }
    if (m_sponsor.isSet()) {
        obj.insert(QString("sponsor"), ::OpenAPI::toJsonValue(m_sponsor));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_telephone_isSet) {
        obj.insert(QString("telephone"), ::OpenAPI::toJsonValue(m_telephone));
    }
    if (m_trading_name_isSet) {
        obj.insert(QString("tradingName"), ::OpenAPI::toJsonValue(m_trading_name));
    }
    return obj;
}

QString OAIAccountResponse::getAccountName() const {
    return m_account_name;
}
void OAIAccountResponse::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIAccountResponse::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIAccountResponse::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIAccountResponse::getAddress() const {
    return m_address;
}
void OAIAccountResponse::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIAccountResponse::is_address_Set() const{
    return m_address_isSet;
}

bool OAIAccountResponse::is_address_Valid() const{
    return m_address_isValid;
}

OAIAccountResponse_appKey OAIAccountResponse::getAppKey() const {
    return m_app_key;
}
void OAIAccountResponse::setAppKey(const OAIAccountResponse_appKey &app_key) {
    m_app_key = app_key;
    m_app_key_isSet = true;
}

bool OAIAccountResponse::is_app_key_Set() const{
    return m_app_key_isSet;
}

bool OAIAccountResponse::is_app_key_Valid() const{
    return m_app_key_isValid;
}

QList<OAIAppKeyItems> OAIAccountResponse::getAppKeys() const {
    return m_app_keys;
}
void OAIAccountResponse::setAppKeys(const QList<OAIAppKeyItems> &app_keys) {
    m_app_keys = app_keys;
    m_app_keys_isSet = true;
}

bool OAIAccountResponse::is_app_keys_Set() const{
    return m_app_keys_isSet;
}

bool OAIAccountResponse::is_app_keys_Valid() const{
    return m_app_keys_isValid;
}

QString OAIAccountResponse::getCity() const {
    return m_city;
}
void OAIAccountResponse::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAccountResponse::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAccountResponse::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIAccountResponse::getCnpj() const {
    return m_cnpj;
}
void OAIAccountResponse::setCnpj(const QString &cnpj) {
    m_cnpj = cnpj;
    m_cnpj_isSet = true;
}

bool OAIAccountResponse::is_cnpj_Set() const{
    return m_cnpj_isSet;
}

bool OAIAccountResponse::is_cnpj_Valid() const{
    return m_cnpj_isValid;
}

QString OAIAccountResponse::getCompanyName() const {
    return m_company_name;
}
void OAIAccountResponse::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAIAccountResponse::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAIAccountResponse::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QString OAIAccountResponse::getComplement() const {
    return m_complement;
}
void OAIAccountResponse::setComplement(const QString &complement) {
    m_complement = complement;
    m_complement_isSet = true;
}

bool OAIAccountResponse::is_complement_Set() const{
    return m_complement_isSet;
}

bool OAIAccountResponse::is_complement_Valid() const{
    return m_complement_isValid;
}

OAIAccountResponse_contact OAIAccountResponse::getContact() const {
    return m_contact;
}
void OAIAccountResponse::setContact(const OAIAccountResponse_contact &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIAccountResponse::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIAccountResponse::is_contact_Valid() const{
    return m_contact_isValid;
}

QString OAIAccountResponse::getCountry() const {
    return m_country;
}
void OAIAccountResponse::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAccountResponse::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAccountResponse::is_country_Valid() const{
    return m_country_isValid;
}

QDateTime OAIAccountResponse::getCreationDate() const {
    return m_creation_date;
}
void OAIAccountResponse::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIAccountResponse::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIAccountResponse::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIAccountResponse::getDefaultUrl() const {
    return m_default_url;
}
void OAIAccountResponse::setDefaultUrl(const QString &default_url) {
    m_default_url = default_url;
    m_default_url_isSet = true;
}

bool OAIAccountResponse::is_default_url_Set() const{
    return m_default_url_isSet;
}

bool OAIAccountResponse::is_default_url_Valid() const{
    return m_default_url_isValid;
}

QString OAIAccountResponse::getDistrict() const {
    return m_district;
}
void OAIAccountResponse::setDistrict(const QString &district) {
    m_district = district;
    m_district_isSet = true;
}

bool OAIAccountResponse::is_district_Set() const{
    return m_district_isSet;
}

bool OAIAccountResponse::is_district_Valid() const{
    return m_district_isValid;
}

bool OAIAccountResponse::isHasLogo() const {
    return m_has_logo;
}
void OAIAccountResponse::setHasLogo(const bool &has_logo) {
    m_has_logo = has_logo;
    m_has_logo_isSet = true;
}

bool OAIAccountResponse::is_has_logo_Set() const{
    return m_has_logo_isSet;
}

bool OAIAccountResponse::is_has_logo_Valid() const{
    return m_has_logo_isValid;
}

bool OAIAccountResponse::isHaveParentAccount() const {
    return m_have_parent_account;
}
void OAIAccountResponse::setHaveParentAccount(const bool &have_parent_account) {
    m_have_parent_account = have_parent_account;
    m_have_parent_account_isSet = true;
}

bool OAIAccountResponse::is_have_parent_account_Set() const{
    return m_have_parent_account_isSet;
}

bool OAIAccountResponse::is_have_parent_account_Valid() const{
    return m_have_parent_account_isValid;
}

QList<QString> OAIAccountResponse::getHosts() const {
    return m_hosts;
}
void OAIAccountResponse::setHosts(const QList<QString> &hosts) {
    m_hosts = hosts;
    m_hosts_isSet = true;
}

bool OAIAccountResponse::is_hosts_Set() const{
    return m_hosts_isSet;
}

bool OAIAccountResponse::is_hosts_Valid() const{
    return m_hosts_isValid;
}

QString OAIAccountResponse::getId() const {
    return m_id;
}
void OAIAccountResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccountResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccountResponse::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIAccountResponse::getInactivationDate() const {
    return m_inactivation_date;
}
void OAIAccountResponse::setInactivationDate(const QDateTime &inactivation_date) {
    m_inactivation_date = inactivation_date;
    m_inactivation_date_isSet = true;
}

bool OAIAccountResponse::is_inactivation_date_Set() const{
    return m_inactivation_date_isSet;
}

bool OAIAccountResponse::is_inactivation_date_Valid() const{
    return m_inactivation_date_isValid;
}

bool OAIAccountResponse::isIsActive() const {
    return m_is_active;
}
void OAIAccountResponse::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIAccountResponse::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIAccountResponse::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIAccountResponse::isIsOperating() const {
    return m_is_operating;
}
void OAIAccountResponse::setIsOperating(const bool &is_operating) {
    m_is_operating = is_operating;
    m_is_operating_isSet = true;
}

bool OAIAccountResponse::is_is_operating_Set() const{
    return m_is_operating_isSet;
}

bool OAIAccountResponse::is_is_operating_Valid() const{
    return m_is_operating_isValid;
}

QList<OAILicenseItems> OAIAccountResponse::getLicenses() const {
    return m_licenses;
}
void OAIAccountResponse::setLicenses(const QList<OAILicenseItems> &licenses) {
    m_licenses = licenses;
    m_licenses_isSet = true;
}

bool OAIAccountResponse::is_licenses_Set() const{
    return m_licenses_isSet;
}

bool OAIAccountResponse::is_licenses_Valid() const{
    return m_licenses_isValid;
}

QString OAIAccountResponse::getLogo() const {
    return m_logo;
}
void OAIAccountResponse::setLogo(const QString &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIAccountResponse::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIAccountResponse::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAIAccountResponse::getLv() const {
    return m_lv;
}
void OAIAccountResponse::setLv(const QString &lv) {
    m_lv = lv;
    m_lv_isSet = true;
}

bool OAIAccountResponse::is_lv_Set() const{
    return m_lv_isSet;
}

bool OAIAccountResponse::is_lv_Valid() const{
    return m_lv_isValid;
}

QString OAIAccountResponse::getName() const {
    return m_name;
}
void OAIAccountResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccountResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccountResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAccountResponse::getNumber() const {
    return m_number;
}
void OAIAccountResponse::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIAccountResponse::is_number_Set() const{
    return m_number_isSet;
}

bool OAIAccountResponse::is_number_Valid() const{
    return m_number_isValid;
}

QDateTime OAIAccountResponse::getOperationDate() const {
    return m_operation_date;
}
void OAIAccountResponse::setOperationDate(const QDateTime &operation_date) {
    m_operation_date = operation_date;
    m_operation_date_isSet = true;
}

bool OAIAccountResponse::is_operation_date_Set() const{
    return m_operation_date_isSet;
}

bool OAIAccountResponse::is_operation_date_Valid() const{
    return m_operation_date_isValid;
}

QString OAIAccountResponse::getParentAccountId() const {
    return m_parent_account_id;
}
void OAIAccountResponse::setParentAccountId(const QString &parent_account_id) {
    m_parent_account_id = parent_account_id;
    m_parent_account_id_isSet = true;
}

bool OAIAccountResponse::is_parent_account_id_Set() const{
    return m_parent_account_id_isSet;
}

bool OAIAccountResponse::is_parent_account_id_Valid() const{
    return m_parent_account_id_isValid;
}

QString OAIAccountResponse::getParentAccountName() const {
    return m_parent_account_name;
}
void OAIAccountResponse::setParentAccountName(const QString &parent_account_name) {
    m_parent_account_name = parent_account_name;
    m_parent_account_name_isSet = true;
}

bool OAIAccountResponse::is_parent_account_name_Set() const{
    return m_parent_account_name_isSet;
}

bool OAIAccountResponse::is_parent_account_name_Valid() const{
    return m_parent_account_name_isValid;
}

QString OAIAccountResponse::getPostalCode() const {
    return m_postal_code;
}
void OAIAccountResponse::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIAccountResponse::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIAccountResponse::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QList<OAISiteItems> OAIAccountResponse::getSites() const {
    return m_sites;
}
void OAIAccountResponse::setSites(const QList<OAISiteItems> &sites) {
    m_sites = sites;
    m_sites_isSet = true;
}

bool OAIAccountResponse::is_sites_Set() const{
    return m_sites_isSet;
}

bool OAIAccountResponse::is_sites_Valid() const{
    return m_sites_isValid;
}

OAIAccountResponse_sponsor OAIAccountResponse::getSponsor() const {
    return m_sponsor;
}
void OAIAccountResponse::setSponsor(const OAIAccountResponse_sponsor &sponsor) {
    m_sponsor = sponsor;
    m_sponsor_isSet = true;
}

bool OAIAccountResponse::is_sponsor_Set() const{
    return m_sponsor_isSet;
}

bool OAIAccountResponse::is_sponsor_Valid() const{
    return m_sponsor_isValid;
}

QString OAIAccountResponse::getState() const {
    return m_state;
}
void OAIAccountResponse::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAccountResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAccountResponse::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAccountResponse::getTelephone() const {
    return m_telephone;
}
void OAIAccountResponse::setTelephone(const QString &telephone) {
    m_telephone = telephone;
    m_telephone_isSet = true;
}

bool OAIAccountResponse::is_telephone_Set() const{
    return m_telephone_isSet;
}

bool OAIAccountResponse::is_telephone_Valid() const{
    return m_telephone_isValid;
}

QString OAIAccountResponse::getTradingName() const {
    return m_trading_name;
}
void OAIAccountResponse::setTradingName(const QString &trading_name) {
    m_trading_name = trading_name;
    m_trading_name_isSet = true;
}

bool OAIAccountResponse::is_trading_name_Set() const{
    return m_trading_name_isSet;
}

bool OAIAccountResponse::is_trading_name_Valid() const{
    return m_trading_name_isValid;
}

bool OAIAccountResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cnpj_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_have_parent_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inactivation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_operating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_licenses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sites.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sponsor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telephone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trading_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
