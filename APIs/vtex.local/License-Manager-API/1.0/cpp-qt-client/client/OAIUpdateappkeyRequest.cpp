/**
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateappkeyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateappkeyRequest::OAIUpdateappkeyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateappkeyRequest::OAIUpdateappkeyRequest() {
    this->initializeModel();
}

OAIUpdateappkeyRequest::~OAIUpdateappkeyRequest() {}

void OAIUpdateappkeyRequest::initializeModel() {

    m_is_active_isSet = false;
    m_is_active_isValid = false;
}

void OAIUpdateappkeyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateappkeyRequest::fromJsonObject(QJsonObject json) {

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;
}

QString OAIUpdateappkeyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateappkeyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    return obj;
}

bool OAIUpdateappkeyRequest::isIsActive() const {
    return m_is_active;
}
void OAIUpdateappkeyRequest::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIUpdateappkeyRequest::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIUpdateappkeyRequest::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIUpdateappkeyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateappkeyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_active_isValid && true;
}

} // namespace OpenAPI
