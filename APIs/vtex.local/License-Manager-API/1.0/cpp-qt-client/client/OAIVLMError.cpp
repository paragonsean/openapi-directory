/**
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVLMError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVLMError::OAIVLMError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVLMError::OAIVLMError() {
    this->initializeModel();
}

OAIVLMError::~OAIVLMError() {}

void OAIVLMError::initializeModel() {

    m_detais_isSet = false;
    m_detais_isValid = false;

    m_http_status_code_isSet = false;
    m_http_status_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_vlm_error_code_isSet = false;
    m_vlm_error_code_isValid = false;
}

void OAIVLMError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVLMError::fromJsonObject(QJsonObject json) {

    m_detais_isValid = ::OpenAPI::fromJsonValue(m_detais, json[QString("Detais")]);
    m_detais_isSet = !json[QString("Detais")].isNull() && m_detais_isValid;

    m_http_status_code_isValid = ::OpenAPI::fromJsonValue(m_http_status_code, json[QString("HttpStatusCode")]);
    m_http_status_code_isSet = !json[QString("HttpStatusCode")].isNull() && m_http_status_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_vlm_error_code_isValid = ::OpenAPI::fromJsonValue(m_vlm_error_code, json[QString("VLMErrorCode")]);
    m_vlm_error_code_isSet = !json[QString("VLMErrorCode")].isNull() && m_vlm_error_code_isValid;
}

QString OAIVLMError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVLMError::asJsonObject() const {
    QJsonObject obj;
    if (m_detais_isSet) {
        obj.insert(QString("Detais"), ::OpenAPI::toJsonValue(m_detais));
    }
    if (m_http_status_code_isSet) {
        obj.insert(QString("HttpStatusCode"), ::OpenAPI::toJsonValue(m_http_status_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_vlm_error_code_isSet) {
        obj.insert(QString("VLMErrorCode"), ::OpenAPI::toJsonValue(m_vlm_error_code));
    }
    return obj;
}

QString OAIVLMError::getDetais() const {
    return m_detais;
}
void OAIVLMError::setDetais(const QString &detais) {
    m_detais = detais;
    m_detais_isSet = true;
}

bool OAIVLMError::is_detais_Set() const{
    return m_detais_isSet;
}

bool OAIVLMError::is_detais_Valid() const{
    return m_detais_isValid;
}

qint32 OAIVLMError::getHttpStatusCode() const {
    return m_http_status_code;
}
void OAIVLMError::setHttpStatusCode(const qint32 &http_status_code) {
    m_http_status_code = http_status_code;
    m_http_status_code_isSet = true;
}

bool OAIVLMError::is_http_status_code_Set() const{
    return m_http_status_code_isSet;
}

bool OAIVLMError::is_http_status_code_Valid() const{
    return m_http_status_code_isValid;
}

QString OAIVLMError::getMessage() const {
    return m_message;
}
void OAIVLMError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIVLMError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIVLMError::is_message_Valid() const{
    return m_message_isValid;
}

qint32 OAIVLMError::getVlmErrorCode() const {
    return m_vlm_error_code;
}
void OAIVLMError::setVlmErrorCode(const qint32 &vlm_error_code) {
    m_vlm_error_code = vlm_error_code;
    m_vlm_error_code_isSet = true;
}

bool OAIVLMError::is_vlm_error_code_Set() const{
    return m_vlm_error_code_isSet;
}

bool OAIVLMError::is_vlm_error_code_Valid() const{
    return m_vlm_error_code_isValid;
}

bool OAIVLMError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detais_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlm_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVLMError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
