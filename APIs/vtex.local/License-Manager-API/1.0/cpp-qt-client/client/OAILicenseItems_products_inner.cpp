/**
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseItems_products_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseItems_products_inner::OAILicenseItems_products_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseItems_products_inner::OAILicenseItems_products_inner() {
    this->initializeModel();
}

OAILicenseItems_products_inner::~OAILicenseItems_products_inner() {}

void OAILicenseItems_products_inner::initializeModel() {

    m_domains_isSet = false;
    m_domains_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAILicenseItems_products_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicenseItems_products_inner::fromJsonObject(QJsonObject json) {

    m_domains_isValid = ::OpenAPI::fromJsonValue(m_domains, json[QString("domains")]);
    m_domains_isSet = !json[QString("domains")].isNull() && m_domains_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("endpoints")]);
    m_endpoints_isSet = !json[QString("endpoints")].isNull() && m_endpoints_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAILicenseItems_products_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicenseItems_products_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_domains.size() > 0) {
        obj.insert(QString("domains"), ::OpenAPI::toJsonValue(m_domains));
    }
    if (m_endpoints.isSet()) {
        obj.insert(QString("endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<QString> OAILicenseItems_products_inner::getDomains() const {
    return m_domains;
}
void OAILicenseItems_products_inner::setDomains(const QList<QString> &domains) {
    m_domains = domains;
    m_domains_isSet = true;
}

bool OAILicenseItems_products_inner::is_domains_Set() const{
    return m_domains_isSet;
}

bool OAILicenseItems_products_inner::is_domains_Valid() const{
    return m_domains_isValid;
}

OAILicenseItems_products_inner_endpoints OAILicenseItems_products_inner::getEndpoints() const {
    return m_endpoints;
}
void OAILicenseItems_products_inner::setEndpoints(const OAILicenseItems_products_inner_endpoints &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAILicenseItems_products_inner::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAILicenseItems_products_inner::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

double OAILicenseItems_products_inner::getId() const {
    return m_id;
}
void OAILicenseItems_products_inner::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILicenseItems_products_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAILicenseItems_products_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILicenseItems_products_inner::getName() const {
    return m_name;
}
void OAILicenseItems_products_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILicenseItems_products_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAILicenseItems_products_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAILicenseItems_products_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicenseItems_products_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
