/**
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppKeyItems.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppKeyItems::OAIAppKeyItems(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppKeyItems::OAIAppKeyItems() {
    this->initializeModel();
}

OAIAppKeyItems::~OAIAppKeyItems() {}

void OAIAppKeyItems::initializeModel() {

    m_app_key_isSet = false;
    m_app_key_isValid = false;

    m_app_token_isSet = false;
    m_app_token_isValid = false;

    m_created_in_isSet = false;
    m_created_in_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_blocked_isSet = false;
    m_is_blocked_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;
}

void OAIAppKeyItems::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppKeyItems::fromJsonObject(QJsonObject json) {

    m_app_key_isValid = ::OpenAPI::fromJsonValue(m_app_key, json[QString("appKey")]);
    m_app_key_isSet = !json[QString("appKey")].isNull() && m_app_key_isValid;

    m_app_token_isValid = ::OpenAPI::fromJsonValue(m_app_token, json[QString("appToken")]);
    m_app_token_isSet = !json[QString("appToken")].isNull() && m_app_token_isValid;

    m_created_in_isValid = ::OpenAPI::fromJsonValue(m_created_in, json[QString("createdIn")]);
    m_created_in_isSet = !json[QString("createdIn")].isNull() && m_created_in_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_is_blocked_isValid = ::OpenAPI::fromJsonValue(m_is_blocked, json[QString("isBlocked")]);
    m_is_blocked_isSet = !json[QString("isBlocked")].isNull() && m_is_blocked_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;
}

QString OAIAppKeyItems::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppKeyItems::asJsonObject() const {
    QJsonObject obj;
    if (m_app_key_isSet) {
        obj.insert(QString("appKey"), ::OpenAPI::toJsonValue(m_app_key));
    }
    if (m_app_token_isSet) {
        obj.insert(QString("appToken"), ::OpenAPI::toJsonValue(m_app_token));
    }
    if (m_created_in_isSet) {
        obj.insert(QString("createdIn"), ::OpenAPI::toJsonValue(m_created_in));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_blocked_isSet) {
        obj.insert(QString("isBlocked"), ::OpenAPI::toJsonValue(m_is_blocked));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    return obj;
}

QString OAIAppKeyItems::getAppKey() const {
    return m_app_key;
}
void OAIAppKeyItems::setAppKey(const QString &app_key) {
    m_app_key = app_key;
    m_app_key_isSet = true;
}

bool OAIAppKeyItems::is_app_key_Set() const{
    return m_app_key_isSet;
}

bool OAIAppKeyItems::is_app_key_Valid() const{
    return m_app_key_isValid;
}

QString OAIAppKeyItems::getAppToken() const {
    return m_app_token;
}
void OAIAppKeyItems::setAppToken(const QString &app_token) {
    m_app_token = app_token;
    m_app_token_isSet = true;
}

bool OAIAppKeyItems::is_app_token_Set() const{
    return m_app_token_isSet;
}

bool OAIAppKeyItems::is_app_token_Valid() const{
    return m_app_token_isValid;
}

QDateTime OAIAppKeyItems::getCreatedIn() const {
    return m_created_in;
}
void OAIAppKeyItems::setCreatedIn(const QDateTime &created_in) {
    m_created_in = created_in;
    m_created_in_isSet = true;
}

bool OAIAppKeyItems::is_created_in_Set() const{
    return m_created_in_isSet;
}

bool OAIAppKeyItems::is_created_in_Valid() const{
    return m_created_in_isValid;
}

QString OAIAppKeyItems::getId() const {
    return m_id;
}
void OAIAppKeyItems::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAppKeyItems::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAppKeyItems::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAppKeyItems::isIsActive() const {
    return m_is_active;
}
void OAIAppKeyItems::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIAppKeyItems::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIAppKeyItems::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIAppKeyItems::isIsBlocked() const {
    return m_is_blocked;
}
void OAIAppKeyItems::setIsBlocked(const bool &is_blocked) {
    m_is_blocked = is_blocked;
    m_is_blocked_isSet = true;
}

bool OAIAppKeyItems::is_is_blocked_Set() const{
    return m_is_blocked_isSet;
}

bool OAIAppKeyItems::is_is_blocked_Valid() const{
    return m_is_blocked_isValid;
}

QString OAIAppKeyItems::getLabel() const {
    return m_label;
}
void OAIAppKeyItems::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIAppKeyItems::is_label_Set() const{
    return m_label_isSet;
}

bool OAIAppKeyItems::is_label_Valid() const{
    return m_label_isValid;
}

bool OAIAppKeyItems::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppKeyItems::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
