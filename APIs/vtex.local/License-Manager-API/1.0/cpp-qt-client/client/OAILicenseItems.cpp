/**
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseItems.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseItems::OAILicenseItems(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseItems::OAILicenseItems() {
    this->initializeModel();
}

OAILicenseItems::~OAILicenseItems() {}

void OAILicenseItems::initializeModel() {

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_purchased_isSet = false;
    m_is_purchased_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;
}

void OAILicenseItems::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicenseItems::fromJsonObject(QJsonObject json) {

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_purchased_isValid = ::OpenAPI::fromJsonValue(m_is_purchased, json[QString("isPurchased")]);
    m_is_purchased_isSet = !json[QString("isPurchased")].isNull() && m_is_purchased_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;
}

QString OAILicenseItems::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicenseItems::asJsonObject() const {
    QJsonObject obj;
    if (m_expiration_isSet) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_purchased_isSet) {
        obj.insert(QString("isPurchased"), ::OpenAPI::toJsonValue(m_is_purchased));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    return obj;
}

QDateTime OAILicenseItems::getExpiration() const {
    return m_expiration;
}
void OAILicenseItems::setExpiration(const QDateTime &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAILicenseItems::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAILicenseItems::is_expiration_Valid() const{
    return m_expiration_isValid;
}

double OAILicenseItems::getId() const {
    return m_id;
}
void OAILicenseItems::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILicenseItems::is_id_Set() const{
    return m_id_isSet;
}

bool OAILicenseItems::is_id_Valid() const{
    return m_id_isValid;
}

bool OAILicenseItems::isIsPurchased() const {
    return m_is_purchased;
}
void OAILicenseItems::setIsPurchased(const bool &is_purchased) {
    m_is_purchased = is_purchased;
    m_is_purchased_isSet = true;
}

bool OAILicenseItems::is_is_purchased_Set() const{
    return m_is_purchased_isSet;
}

bool OAILicenseItems::is_is_purchased_Valid() const{
    return m_is_purchased_isValid;
}

QString OAILicenseItems::getName() const {
    return m_name;
}
void OAILicenseItems::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILicenseItems::is_name_Set() const{
    return m_name_isSet;
}

bool OAILicenseItems::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAILicenseItems_products_inner> OAILicenseItems::getProducts() const {
    return m_products;
}
void OAILicenseItems::setProducts(const QList<OAILicenseItems_products_inner> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAILicenseItems::is_products_Set() const{
    return m_products_isSet;
}

bool OAILicenseItems::is_products_Valid() const{
    return m_products_isValid;
}

bool OAILicenseItems::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_purchased_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicenseItems::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
