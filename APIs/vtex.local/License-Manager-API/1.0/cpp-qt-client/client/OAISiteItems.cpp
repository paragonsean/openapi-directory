/**
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISiteItems.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISiteItems::OAISiteItems(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISiteItems::OAISiteItems() {
    this->initializeModel();
}

OAISiteItems::~OAISiteItems() {}

void OAISiteItems::initializeModel() {

    m_lv_isSet = false;
    m_lv_isValid = false;

    m_aliases_isSet = false;
    m_aliases_isValid = false;

    m_domains_isSet = false;
    m_domains_isValid = false;

    m_hosts_isSet = false;
    m_hosts_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_monetary_unit_id_isSet = false;
    m_monetary_unit_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_trading_name_isSet = false;
    m_trading_name_isValid = false;
}

void OAISiteItems::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISiteItems::fromJsonObject(QJsonObject json) {

    m_lv_isValid = ::OpenAPI::fromJsonValue(m_lv, json[QString("LV")]);
    m_lv_isSet = !json[QString("LV")].isNull() && m_lv_isValid;

    m_aliases_isValid = ::OpenAPI::fromJsonValue(m_aliases, json[QString("aliases")]);
    m_aliases_isSet = !json[QString("aliases")].isNull() && m_aliases_isValid;

    m_domains_isValid = ::OpenAPI::fromJsonValue(m_domains, json[QString("domains")]);
    m_domains_isSet = !json[QString("domains")].isNull() && m_domains_isValid;

    m_hosts_isValid = ::OpenAPI::fromJsonValue(m_hosts, json[QString("hosts")]);
    m_hosts_isSet = !json[QString("hosts")].isNull() && m_hosts_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_monetary_unit_id_isValid = ::OpenAPI::fromJsonValue(m_monetary_unit_id, json[QString("monetaryUnitId")]);
    m_monetary_unit_id_isSet = !json[QString("monetaryUnitId")].isNull() && m_monetary_unit_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_trading_name_isValid = ::OpenAPI::fromJsonValue(m_trading_name, json[QString("tradingName")]);
    m_trading_name_isSet = !json[QString("tradingName")].isNull() && m_trading_name_isValid;
}

QString OAISiteItems::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISiteItems::asJsonObject() const {
    QJsonObject obj;
    if (m_lv_isSet) {
        obj.insert(QString("LV"), ::OpenAPI::toJsonValue(m_lv));
    }
    if (m_aliases.size() > 0) {
        obj.insert(QString("aliases"), ::OpenAPI::toJsonValue(m_aliases));
    }
    if (m_domains.size() > 0) {
        obj.insert(QString("domains"), ::OpenAPI::toJsonValue(m_domains));
    }
    if (m_hosts.size() > 0) {
        obj.insert(QString("hosts"), ::OpenAPI::toJsonValue(m_hosts));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_logo_isSet) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_monetary_unit_id_isSet) {
        obj.insert(QString("monetaryUnitId"), ::OpenAPI::toJsonValue(m_monetary_unit_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_trading_name_isSet) {
        obj.insert(QString("tradingName"), ::OpenAPI::toJsonValue(m_trading_name));
    }
    return obj;
}

QString OAISiteItems::getLv() const {
    return m_lv;
}
void OAISiteItems::setLv(const QString &lv) {
    m_lv = lv;
    m_lv_isSet = true;
}

bool OAISiteItems::is_lv_Set() const{
    return m_lv_isSet;
}

bool OAISiteItems::is_lv_Valid() const{
    return m_lv_isValid;
}

QList<QString> OAISiteItems::getAliases() const {
    return m_aliases;
}
void OAISiteItems::setAliases(const QList<QString> &aliases) {
    m_aliases = aliases;
    m_aliases_isSet = true;
}

bool OAISiteItems::is_aliases_Set() const{
    return m_aliases_isSet;
}

bool OAISiteItems::is_aliases_Valid() const{
    return m_aliases_isValid;
}

QList<QString> OAISiteItems::getDomains() const {
    return m_domains;
}
void OAISiteItems::setDomains(const QList<QString> &domains) {
    m_domains = domains;
    m_domains_isSet = true;
}

bool OAISiteItems::is_domains_Set() const{
    return m_domains_isSet;
}

bool OAISiteItems::is_domains_Valid() const{
    return m_domains_isValid;
}

QList<QString> OAISiteItems::getHosts() const {
    return m_hosts;
}
void OAISiteItems::setHosts(const QList<QString> &hosts) {
    m_hosts = hosts;
    m_hosts_isSet = true;
}

bool OAISiteItems::is_hosts_Set() const{
    return m_hosts_isSet;
}

bool OAISiteItems::is_hosts_Valid() const{
    return m_hosts_isValid;
}

double OAISiteItems::getId() const {
    return m_id;
}
void OAISiteItems::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISiteItems::is_id_Set() const{
    return m_id_isSet;
}

bool OAISiteItems::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISiteItems::getLogo() const {
    return m_logo;
}
void OAISiteItems::setLogo(const QString &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAISiteItems::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAISiteItems::is_logo_Valid() const{
    return m_logo_isValid;
}

double OAISiteItems::getMonetaryUnitId() const {
    return m_monetary_unit_id;
}
void OAISiteItems::setMonetaryUnitId(const double &monetary_unit_id) {
    m_monetary_unit_id = monetary_unit_id;
    m_monetary_unit_id_isSet = true;
}

bool OAISiteItems::is_monetary_unit_id_Set() const{
    return m_monetary_unit_id_isSet;
}

bool OAISiteItems::is_monetary_unit_id_Valid() const{
    return m_monetary_unit_id_isValid;
}

QString OAISiteItems::getName() const {
    return m_name;
}
void OAISiteItems::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISiteItems::is_name_Set() const{
    return m_name_isSet;
}

bool OAISiteItems::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISiteItems::getTradingName() const {
    return m_trading_name;
}
void OAISiteItems::setTradingName(const QString &trading_name) {
    m_trading_name = trading_name;
    m_trading_name_isSet = true;
}

bool OAISiteItems::is_trading_name_Set() const{
    return m_trading_name_isSet;
}

bool OAISiteItems::is_trading_name_Valid() const{
    return m_trading_name_isValid;
}

bool OAISiteItems::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aliases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monetary_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trading_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISiteItems::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
