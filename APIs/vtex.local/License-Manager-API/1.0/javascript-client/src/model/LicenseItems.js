/**
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LicenseItemsProductsInner from './LicenseItemsProductsInner';

/**
 * The LicenseItems model module.
 * @module model/LicenseItems
 * @version 1.0
 */
class LicenseItems {
    /**
     * Constructs a new <code>LicenseItems</code>.
     * Object representing licenses
     * @alias module:model/LicenseItems
     */
    constructor() { 
        
        LicenseItems.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LicenseItems</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LicenseItems} obj Optional instance to populate.
     * @return {module:model/LicenseItems} The populated <code>LicenseItems</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LicenseItems();

            if (data.hasOwnProperty('expiration')) {
                obj['expiration'] = ApiClient.convertToType(data['expiration'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('isPurchased')) {
                obj['isPurchased'] = ApiClient.convertToType(data['isPurchased'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], [LicenseItemsProductsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LicenseItems</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LicenseItems</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['products']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['products'])) {
                throw new Error("Expected the field `products` to be an array in the JSON data but got " + data['products']);
            }
            // validate the optional field `products` (array)
            for (const item of data['products']) {
                LicenseItemsProductsInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Date} expiration
 */
LicenseItems.prototype['expiration'] = undefined;

/**
 * ID of the category of the license
 * @member {Number} id
 */
LicenseItems.prototype['id'] = undefined;

/**
 * If the license is purchased
 * @member {Boolean} isPurchased
 */
LicenseItems.prototype['isPurchased'] = undefined;

/**
 * Name of the category of the license
 * @member {String} name
 */
LicenseItems.prototype['name'] = undefined;

/**
 * Array of products
 * @member {Array.<module:model/LicenseItemsProductsInner>} products
 */
LicenseItems.prototype['products'] = undefined;






export default LicenseItems;

