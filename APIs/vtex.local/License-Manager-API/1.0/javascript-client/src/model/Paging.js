/**
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Paging model module.
 * @module model/Paging
 * @version 1.0
 */
class Paging {
    /**
     * Constructs a new <code>Paging</code>.
     * Paging object
     * @alias module:model/Paging
     * @param page {Number} Current page number
     * @param pages {Number} Total of pages
     * @param perPage {Number} Items per page
     * @param total {Number} Total of items
     */
    constructor(page, pages, perPage, total) { 
        
        Paging.initialize(this, page, pages, perPage, total);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, page, pages, perPage, total) { 
        obj['page'] = page;
        obj['pages'] = pages;
        obj['perPage'] = perPage;
        obj['total'] = total;
    }

    /**
     * Constructs a <code>Paging</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Paging} obj Optional instance to populate.
     * @return {module:model/Paging} The populated <code>Paging</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Paging();

            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'Number');
            }
            if (data.hasOwnProperty('pages')) {
                obj['pages'] = ApiClient.convertToType(data['pages'], 'Number');
            }
            if (data.hasOwnProperty('perPage')) {
                obj['perPage'] = ApiClient.convertToType(data['perPage'], 'Number');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Paging</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Paging</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Paging.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

Paging.RequiredProperties = ["page", "pages", "perPage", "total"];

/**
 * Current page number
 * @member {Number} page
 */
Paging.prototype['page'] = undefined;

/**
 * Total of pages
 * @member {Number} pages
 */
Paging.prototype['pages'] = undefined;

/**
 * Items per page
 * @member {Number} perPage
 */
Paging.prototype['perPage'] = undefined;

/**
 * Total of items
 * @member {Number} total
 */
Paging.prototype['total'] = undefined;






export default Paging;

