/**
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Paging from './Paging';
import RoleItems from './RoleItems';

/**
 * The ListRolesResponse model module.
 * @module model/ListRolesResponse
 * @version 1.0
 */
class ListRolesResponse {
    /**
     * Constructs a new <code>ListRolesResponse</code>.
     * Response body for listing all roles
     * @alias module:model/ListRolesResponse
     */
    constructor() { 
        
        ListRolesResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListRolesResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListRolesResponse} obj Optional instance to populate.
     * @return {module:model/ListRolesResponse} The populated <code>ListRolesResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListRolesResponse();

            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [RoleItems]);
            }
            if (data.hasOwnProperty('paging')) {
                obj['paging'] = Paging.constructFromObject(data['paging']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListRolesResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListRolesResponse</code>.
     */
    static validateJSON(data) {
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                RoleItems.validateJSON(item);
            };
        }
        // validate the optional field `paging`
        if (data['paging']) { // data not null
          Paging.validateJSON(data['paging']);
        }

        return true;
    }


}



/**
 * Array of role objects
 * @member {Array.<module:model/RoleItems>} items
 */
ListRolesResponse.prototype['items'] = undefined;

/**
 * @member {module:model/Paging} paging
 */
ListRolesResponse.prototype['paging'] = undefined;






export default ListRolesResponse;

