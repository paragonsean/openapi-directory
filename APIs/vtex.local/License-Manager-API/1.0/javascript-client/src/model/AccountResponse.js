/**
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountResponseAppKey from './AccountResponseAppKey';
import AccountResponseContact from './AccountResponseContact';
import AccountResponseSponsor from './AccountResponseSponsor';
import AppKeyItems from './AppKeyItems';
import LicenseItems from './LicenseItems';
import SiteItems from './SiteItems';

/**
 * The AccountResponse model module.
 * @module model/AccountResponse
 * @version 1.0
 */
class AccountResponse {
    /**
     * Constructs a new <code>AccountResponse</code>.
     * Successful response for &#x60;/api/vlm/account&#x60;
     * @alias module:model/AccountResponse
     */
    constructor() { 
        
        AccountResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountResponse} obj Optional instance to populate.
     * @return {module:model/AccountResponse} The populated <code>AccountResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountResponse();

            if (data.hasOwnProperty('accountName')) {
                obj['accountName'] = ApiClient.convertToType(data['accountName'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('appKey')) {
                obj['appKey'] = AccountResponseAppKey.constructFromObject(data['appKey']);
            }
            if (data.hasOwnProperty('appKeys')) {
                obj['appKeys'] = ApiClient.convertToType(data['appKeys'], [AppKeyItems]);
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('cnpj')) {
                obj['cnpj'] = ApiClient.convertToType(data['cnpj'], 'String');
            }
            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('complement')) {
                obj['complement'] = ApiClient.convertToType(data['complement'], 'String');
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = AccountResponseContact.constructFromObject(data['contact']);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('defaultUrl')) {
                obj['defaultUrl'] = ApiClient.convertToType(data['defaultUrl'], 'String');
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = ApiClient.convertToType(data['district'], 'String');
            }
            if (data.hasOwnProperty('hasLogo')) {
                obj['hasLogo'] = ApiClient.convertToType(data['hasLogo'], 'Boolean');
            }
            if (data.hasOwnProperty('haveParentAccount')) {
                obj['haveParentAccount'] = ApiClient.convertToType(data['haveParentAccount'], 'Boolean');
            }
            if (data.hasOwnProperty('hosts')) {
                obj['hosts'] = ApiClient.convertToType(data['hosts'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('inactivationDate')) {
                obj['inactivationDate'] = ApiClient.convertToType(data['inactivationDate'], 'Date');
            }
            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('isOperating')) {
                obj['isOperating'] = ApiClient.convertToType(data['isOperating'], 'Boolean');
            }
            if (data.hasOwnProperty('licenses')) {
                obj['licenses'] = ApiClient.convertToType(data['licenses'], [LicenseItems]);
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = ApiClient.convertToType(data['logo'], 'String');
            }
            if (data.hasOwnProperty('lv')) {
                obj['lv'] = ApiClient.convertToType(data['lv'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('operationDate')) {
                obj['operationDate'] = ApiClient.convertToType(data['operationDate'], 'Date');
            }
            if (data.hasOwnProperty('parentAccountId')) {
                obj['parentAccountId'] = ApiClient.convertToType(data['parentAccountId'], 'String');
            }
            if (data.hasOwnProperty('parentAccountName')) {
                obj['parentAccountName'] = ApiClient.convertToType(data['parentAccountName'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('sites')) {
                obj['sites'] = ApiClient.convertToType(data['sites'], [SiteItems]);
            }
            if (data.hasOwnProperty('sponsor')) {
                obj['sponsor'] = AccountResponseSponsor.constructFromObject(data['sponsor']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('telephone')) {
                obj['telephone'] = ApiClient.convertToType(data['telephone'], 'String');
            }
            if (data.hasOwnProperty('tradingName')) {
                obj['tradingName'] = ApiClient.convertToType(data['tradingName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountName'] && !(typeof data['accountName'] === 'string' || data['accountName'] instanceof String)) {
            throw new Error("Expected the field `accountName` to be a primitive type in the JSON string but got " + data['accountName']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // validate the optional field `appKey`
        if (data['appKey']) { // data not null
          AccountResponseAppKey.validateJSON(data['appKey']);
        }
        if (data['appKeys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appKeys'])) {
                throw new Error("Expected the field `appKeys` to be an array in the JSON data but got " + data['appKeys']);
            }
            // validate the optional field `appKeys` (array)
            for (const item of data['appKeys']) {
                AppKeyItems.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['cnpj'] && !(typeof data['cnpj'] === 'string' || data['cnpj'] instanceof String)) {
            throw new Error("Expected the field `cnpj` to be a primitive type in the JSON string but got " + data['cnpj']);
        }
        // ensure the json data is a string
        if (data['companyName'] && !(typeof data['companyName'] === 'string' || data['companyName'] instanceof String)) {
            throw new Error("Expected the field `companyName` to be a primitive type in the JSON string but got " + data['companyName']);
        }
        // ensure the json data is a string
        if (data['complement'] && !(typeof data['complement'] === 'string' || data['complement'] instanceof String)) {
            throw new Error("Expected the field `complement` to be a primitive type in the JSON string but got " + data['complement']);
        }
        // validate the optional field `contact`
        if (data['contact']) { // data not null
          AccountResponseContact.validateJSON(data['contact']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['defaultUrl'] && !(typeof data['defaultUrl'] === 'string' || data['defaultUrl'] instanceof String)) {
            throw new Error("Expected the field `defaultUrl` to be a primitive type in the JSON string but got " + data['defaultUrl']);
        }
        // ensure the json data is a string
        if (data['district'] && !(typeof data['district'] === 'string' || data['district'] instanceof String)) {
            throw new Error("Expected the field `district` to be a primitive type in the JSON string but got " + data['district']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['hosts'])) {
            throw new Error("Expected the field `hosts` to be an array in the JSON data but got " + data['hosts']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['licenses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['licenses'])) {
                throw new Error("Expected the field `licenses` to be an array in the JSON data but got " + data['licenses']);
            }
            // validate the optional field `licenses` (array)
            for (const item of data['licenses']) {
                LicenseItems.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['logo'] && !(typeof data['logo'] === 'string' || data['logo'] instanceof String)) {
            throw new Error("Expected the field `logo` to be a primitive type in the JSON string but got " + data['logo']);
        }
        // ensure the json data is a string
        if (data['lv'] && !(typeof data['lv'] === 'string' || data['lv'] instanceof String)) {
            throw new Error("Expected the field `lv` to be a primitive type in the JSON string but got " + data['lv']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['parentAccountId'] && !(typeof data['parentAccountId'] === 'string' || data['parentAccountId'] instanceof String)) {
            throw new Error("Expected the field `parentAccountId` to be a primitive type in the JSON string but got " + data['parentAccountId']);
        }
        // ensure the json data is a string
        if (data['parentAccountName'] && !(typeof data['parentAccountName'] === 'string' || data['parentAccountName'] instanceof String)) {
            throw new Error("Expected the field `parentAccountName` to be a primitive type in the JSON string but got " + data['parentAccountName']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        if (data['sites']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sites'])) {
                throw new Error("Expected the field `sites` to be an array in the JSON data but got " + data['sites']);
            }
            // validate the optional field `sites` (array)
            for (const item of data['sites']) {
                SiteItems.validateJSON(item);
            };
        }
        // validate the optional field `sponsor`
        if (data['sponsor']) { // data not null
          AccountResponseSponsor.validateJSON(data['sponsor']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['telephone'] && !(typeof data['telephone'] === 'string' || data['telephone'] instanceof String)) {
            throw new Error("Expected the field `telephone` to be a primitive type in the JSON string but got " + data['telephone']);
        }
        // ensure the json data is a string
        if (data['tradingName'] && !(typeof data['tradingName'] === 'string' || data['tradingName'] instanceof String)) {
            throw new Error("Expected the field `tradingName` to be a primitive type in the JSON string but got " + data['tradingName']);
        }

        return true;
    }


}



/**
 * Account name
 * @member {String} accountName
 */
AccountResponse.prototype['accountName'] = undefined;

/**
 * Address of contact
 * @member {String} address
 */
AccountResponse.prototype['address'] = undefined;

/**
 * @member {module:model/AccountResponseAppKey} appKey
 */
AccountResponse.prototype['appKey'] = undefined;

/**
 * Array of application keys
 * @member {Array.<module:model/AppKeyItems>} appKeys
 */
AccountResponse.prototype['appKeys'] = undefined;

/**
 * City of contact
 * @member {String} city
 */
AccountResponse.prototype['city'] = undefined;

/**
 * CNPJ (Tax ID) of account
 * @member {String} cnpj
 */
AccountResponse.prototype['cnpj'] = undefined;

/**
 * Company name
 * @member {String} companyName
 */
AccountResponse.prototype['companyName'] = undefined;

/**
 * Additional address of contact
 * @member {String} complement
 */
AccountResponse.prototype['complement'] = undefined;

/**
 * @member {module:model/AccountResponseContact} contact
 */
AccountResponse.prototype['contact'] = undefined;

/**
 * Country of contact
 * @member {String} country
 */
AccountResponse.prototype['country'] = undefined;

/**
 * The date when the account was created
 * @member {Date} creationDate
 */
AccountResponse.prototype['creationDate'] = undefined;

/**
 * @member {String} defaultUrl
 */
AccountResponse.prototype['defaultUrl'] = undefined;

/**
 * Neighborhood of contact
 * @member {String} district
 */
AccountResponse.prototype['district'] = undefined;

/**
 * If logo has been setup
 * @member {Boolean} hasLogo
 */
AccountResponse.prototype['hasLogo'] = undefined;

/**
 * If it has a parent account
 * @member {Boolean} haveParentAccount
 */
AccountResponse.prototype['haveParentAccount'] = undefined;

/**
 * Hosts of all stores
 * @member {Array.<String>} hosts
 */
AccountResponse.prototype['hosts'] = undefined;

/**
 * ID of the account
 * @member {String} id
 */
AccountResponse.prototype['id'] = undefined;

/**
 * The date when the account was deactivated
 * @member {Date} inactivationDate
 */
AccountResponse.prototype['inactivationDate'] = undefined;

/**
 * If account is active or not
 * @member {Boolean} isActive
 */
AccountResponse.prototype['isActive'] = undefined;

/**
 * If it is in production
 * @member {Boolean} isOperating
 */
AccountResponse.prototype['isOperating'] = undefined;

/**
 * Licenses of the account
 * @member {Array.<module:model/LicenseItems>} licenses
 */
AccountResponse.prototype['licenses'] = undefined;

/**
 * Filename of account logo
 * @member {String} logo
 */
AccountResponse.prototype['logo'] = undefined;

/**
 * @member {String} lv
 */
AccountResponse.prototype['lv'] = undefined;

/**
 * Trading name
 * @member {String} name
 */
AccountResponse.prototype['name'] = undefined;

/**
 * Number of the address of contact
 * @member {String} number
 */
AccountResponse.prototype['number'] = undefined;

/**
 * The date when the account went into production
 * @member {Date} operationDate
 */
AccountResponse.prototype['operationDate'] = undefined;

/**
 * The ID of the parent account
 * @member {String} parentAccountId
 */
AccountResponse.prototype['parentAccountId'] = undefined;

/**
 * The name of the parent account
 * @member {String} parentAccountName
 */
AccountResponse.prototype['parentAccountName'] = undefined;

/**
 * Zip Code of contact
 * @member {String} postalCode
 */
AccountResponse.prototype['postalCode'] = undefined;

/**
 * Array of objects representing a store
 * @member {Array.<module:model/SiteItems>} sites
 */
AccountResponse.prototype['sites'] = undefined;

/**
 * @member {module:model/AccountResponseSponsor} sponsor
 */
AccountResponse.prototype['sponsor'] = undefined;

/**
 * State/Province of contact
 * @member {String} state
 */
AccountResponse.prototype['state'] = undefined;

/**
 * Telephone of contact
 * @member {String} telephone
 */
AccountResponse.prototype['telephone'] = undefined;

/**
 * Trading name
 * @member {String} tradingName
 */
AccountResponse.prototype['tradingName'] = undefined;






export default AccountResponse;

