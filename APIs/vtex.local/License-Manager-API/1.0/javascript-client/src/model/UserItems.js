/**
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserItems model module.
 * @module model/UserItems
 * @version 1.0
 */
class UserItems {
    /**
     * Constructs a new <code>UserItems</code>.
     * Object representing users
     * @alias module:model/UserItems
     */
    constructor() { 
        
        UserItems.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserItems</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserItems} obj Optional instance to populate.
     * @return {module:model/UserItems} The populated <code>UserItems</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserItems();

            if (data.hasOwnProperty('accountNames')) {
                obj['accountNames'] = ApiClient.convertToType(data['accountNames'], ['String']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isAdmin')) {
                obj['isAdmin'] = ApiClient.convertToType(data['isAdmin'], 'Boolean');
            }
            if (data.hasOwnProperty('isBlocked')) {
                obj['isBlocked'] = ApiClient.convertToType(data['isBlocked'], 'Boolean');
            }
            if (data.hasOwnProperty('isReliable')) {
                obj['isReliable'] = ApiClient.convertToType(data['isReliable'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserItems</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserItems</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['accountNames'])) {
            throw new Error("Expected the field `accountNames` to be an array in the JSON data but got " + data['accountNames']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['roles'])) {
            throw new Error("Expected the field `roles` to be an array in the JSON data but got " + data['roles']);
        }

        return true;
    }


}



/**
 * Array of account names
 * @member {Array.<String>} accountNames
 */
UserItems.prototype['accountNames'] = undefined;

/**
 * Email of the user
 * @member {String} email
 */
UserItems.prototype['email'] = undefined;

/**
 * ID of the user
 * @member {String} id
 */
UserItems.prototype['id'] = undefined;

/**
 * If user is admin
 * @member {Boolean} isAdmin
 */
UserItems.prototype['isAdmin'] = undefined;

/**
 * If user is blocked
 * @member {Boolean} isBlocked
 */
UserItems.prototype['isBlocked'] = undefined;

/**
 * For internal use only
 * @member {Boolean} isReliable
 */
UserItems.prototype['isReliable'] = undefined;

/**
 * Name of the user
 * @member {String} name
 */
UserItems.prototype['name'] = undefined;

/**
 * Array of roles
 * @member {Array.<String>} roles
 */
UserItems.prototype['roles'] = undefined;






export default UserItems;

