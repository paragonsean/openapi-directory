/**
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductItems model module.
 * @module model/ProductItems
 * @version 1.0
 */
class ProductItems {
    /**
     * Constructs a new <code>ProductItems</code>.
     * Object representing products
     * @alias module:model/ProductItems
     */
    constructor() { 
        
        ProductItems.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductItems</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductItems} obj Optional instance to populate.
     * @return {module:model/ProductItems} The populated <code>ProductItems</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductItems();

            if (data.hasOwnProperty('categoryId')) {
                obj['categoryId'] = ApiClient.convertToType(data['categoryId'], 'String');
            }
            if (data.hasOwnProperty('categoryName')) {
                obj['categoryName'] = ApiClient.convertToType(data['categoryName'], 'String');
            }
            if (data.hasOwnProperty('consoleUrlMask')) {
                obj['consoleUrlMask'] = ApiClient.convertToType(data['consoleUrlMask'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('productResources')) {
                obj['productResources'] = ApiClient.convertToType(data['productResources'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('urlConfiguration')) {
                obj['urlConfiguration'] = ApiClient.convertToType(data['urlConfiguration'], 'String');
            }
            if (data.hasOwnProperty('webApiUrlMask')) {
                obj['webApiUrlMask'] = ApiClient.convertToType(data['webApiUrlMask'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductItems</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductItems</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['categoryId'] && !(typeof data['categoryId'] === 'string' || data['categoryId'] instanceof String)) {
            throw new Error("Expected the field `categoryId` to be a primitive type in the JSON string but got " + data['categoryId']);
        }
        // ensure the json data is a string
        if (data['categoryName'] && !(typeof data['categoryName'] === 'string' || data['categoryName'] instanceof String)) {
            throw new Error("Expected the field `categoryName` to be a primitive type in the JSON string but got " + data['categoryName']);
        }
        // ensure the json data is a string
        if (data['consoleUrlMask'] && !(typeof data['consoleUrlMask'] === 'string' || data['consoleUrlMask'] instanceof String)) {
            throw new Error("Expected the field `consoleUrlMask` to be a primitive type in the JSON string but got " + data['consoleUrlMask']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['productResources'] && !(typeof data['productResources'] === 'string' || data['productResources'] instanceof String)) {
            throw new Error("Expected the field `productResources` to be a primitive type in the JSON string but got " + data['productResources']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['urlConfiguration'] && !(typeof data['urlConfiguration'] === 'string' || data['urlConfiguration'] instanceof String)) {
            throw new Error("Expected the field `urlConfiguration` to be a primitive type in the JSON string but got " + data['urlConfiguration']);
        }
        // ensure the json data is a string
        if (data['webApiUrlMask'] && !(typeof data['webApiUrlMask'] === 'string' || data['webApiUrlMask'] instanceof String)) {
            throw new Error("Expected the field `webApiUrlMask` to be a primitive type in the JSON string but got " + data['webApiUrlMask']);
        }

        return true;
    }


}



/**
 * @member {String} categoryId
 */
ProductItems.prototype['categoryId'] = undefined;

/**
 * @member {String} categoryName
 */
ProductItems.prototype['categoryName'] = undefined;

/**
 * @member {String} consoleUrlMask
 */
ProductItems.prototype['consoleUrlMask'] = undefined;

/**
 * @member {String} description
 */
ProductItems.prototype['description'] = undefined;

/**
 * @member {String} id
 */
ProductItems.prototype['id'] = undefined;

/**
 * Name of the product
 * @member {String} name
 */
ProductItems.prototype['name'] = undefined;

/**
 * @member {String} productResources
 */
ProductItems.prototype['productResources'] = undefined;

/**
 * @member {String} url
 */
ProductItems.prototype['url'] = undefined;

/**
 * @member {String} urlConfiguration
 */
ProductItems.prototype['urlConfiguration'] = undefined;

/**
 * @member {String} webApiUrlMask
 */
ProductItems.prototype['webApiUrlMask'] = undefined;






export default ProductItems;

