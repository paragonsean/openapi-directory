/**
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SiteItems model module.
 * @module model/SiteItems
 * @version 1.0
 */
class SiteItems {
    /**
     * Constructs a new <code>SiteItems</code>.
     * Object containing complete information from a store
     * @alias module:model/SiteItems
     */
    constructor() { 
        
        SiteItems.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SiteItems</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SiteItems} obj Optional instance to populate.
     * @return {module:model/SiteItems} The populated <code>SiteItems</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SiteItems();

            if (data.hasOwnProperty('LV')) {
                obj['LV'] = ApiClient.convertToType(data['LV'], 'String');
            }
            if (data.hasOwnProperty('aliases')) {
                obj['aliases'] = ApiClient.convertToType(data['aliases'], ['String']);
            }
            if (data.hasOwnProperty('domains')) {
                obj['domains'] = ApiClient.convertToType(data['domains'], ['String']);
            }
            if (data.hasOwnProperty('hosts')) {
                obj['hosts'] = ApiClient.convertToType(data['hosts'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = ApiClient.convertToType(data['logo'], 'String');
            }
            if (data.hasOwnProperty('monetaryUnitId')) {
                obj['monetaryUnitId'] = ApiClient.convertToType(data['monetaryUnitId'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tradingName')) {
                obj['tradingName'] = ApiClient.convertToType(data['tradingName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SiteItems</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SiteItems</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['LV'] && !(typeof data['LV'] === 'string' || data['LV'] instanceof String)) {
            throw new Error("Expected the field `LV` to be a primitive type in the JSON string but got " + data['LV']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['aliases'])) {
            throw new Error("Expected the field `aliases` to be an array in the JSON data but got " + data['aliases']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['domains'])) {
            throw new Error("Expected the field `domains` to be an array in the JSON data but got " + data['domains']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['hosts'])) {
            throw new Error("Expected the field `hosts` to be an array in the JSON data but got " + data['hosts']);
        }
        // ensure the json data is a string
        if (data['logo'] && !(typeof data['logo'] === 'string' || data['logo'] instanceof String)) {
            throw new Error("Expected the field `logo` to be a primitive type in the JSON string but got " + data['logo']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['tradingName'] && !(typeof data['tradingName'] === 'string' || data['tradingName'] instanceof String)) {
            throw new Error("Expected the field `tradingName` to be a primitive type in the JSON string but got " + data['tradingName']);
        }

        return true;
    }


}



/**
 * @member {String} LV
 */
SiteItems.prototype['LV'] = undefined;

/**
 * @member {Array.<String>} aliases
 */
SiteItems.prototype['aliases'] = undefined;

/**
 * @member {Array.<String>} domains
 */
SiteItems.prototype['domains'] = undefined;

/**
 * Hosts associated to the store
 * @member {Array.<String>} hosts
 */
SiteItems.prototype['hosts'] = undefined;

/**
 * ID of the store
 * @member {Number} id
 */
SiteItems.prototype['id'] = undefined;

/**
 * @member {String} logo
 */
SiteItems.prototype['logo'] = undefined;

/**
 * @member {Number} monetaryUnitId
 */
SiteItems.prototype['monetaryUnitId'] = undefined;

/**
 * Store name
 * @member {String} name
 */
SiteItems.prototype['name'] = undefined;

/**
 * Trading name of the store
 * @member {String} tradingName
 */
SiteItems.prototype['tradingName'] = undefined;






export default SiteItems;

