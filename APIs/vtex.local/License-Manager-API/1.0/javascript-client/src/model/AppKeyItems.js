/**
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AppKeyItems model module.
 * @module model/AppKeyItems
 * @version 1.0
 */
class AppKeyItems {
    /**
     * Constructs a new <code>AppKeyItems</code>.
     * Object representing application keys
     * @alias module:model/AppKeyItems
     */
    constructor() { 
        
        AppKeyItems.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AppKeyItems</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppKeyItems} obj Optional instance to populate.
     * @return {module:model/AppKeyItems} The populated <code>AppKeyItems</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppKeyItems();

            if (data.hasOwnProperty('appKey')) {
                obj['appKey'] = ApiClient.convertToType(data['appKey'], 'String');
            }
            if (data.hasOwnProperty('appToken')) {
                obj['appToken'] = ApiClient.convertToType(data['appToken'], 'String');
            }
            if (data.hasOwnProperty('createdIn')) {
                obj['createdIn'] = ApiClient.convertToType(data['createdIn'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('isBlocked')) {
                obj['isBlocked'] = ApiClient.convertToType(data['isBlocked'], 'Boolean');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppKeyItems</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppKeyItems</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['appKey'] && !(typeof data['appKey'] === 'string' || data['appKey'] instanceof String)) {
            throw new Error("Expected the field `appKey` to be a primitive type in the JSON string but got " + data['appKey']);
        }
        // ensure the json data is a string
        if (data['appToken'] && !(typeof data['appToken'] === 'string' || data['appToken'] instanceof String)) {
            throw new Error("Expected the field `appToken` to be a primitive type in the JSON string but got " + data['appToken']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }

        return true;
    }


}



/**
 * AppKey (Access Key in the license manager UI)
 * @member {String} appKey
 */
AppKeyItems.prototype['appKey'] = undefined;

/**
 * AppToken. For security reasons, should always be null.
 * @member {String} appToken
 */
AppKeyItems.prototype['appToken'] = undefined;

/**
 * Creation date of the application key
 * @member {Date} createdIn
 */
AppKeyItems.prototype['createdIn'] = undefined;

/**
 * ID of the application key
 * @member {String} id
 */
AppKeyItems.prototype['id'] = undefined;

/**
 * If the application key is active
 * @member {Boolean} isActive
 */
AppKeyItems.prototype['isActive'] = undefined;

/**
 * If the application key is blocked
 * @member {Boolean} isBlocked
 */
AppKeyItems.prototype['isBlocked'] = undefined;

/**
 * Label of the application key
 * @member {String} label
 */
AppKeyItems.prototype['label'] = undefined;






export default AppKeyItems;

