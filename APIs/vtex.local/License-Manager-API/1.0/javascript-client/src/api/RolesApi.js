/**
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateUser400Response from '../model/CreateUser400Response';
import GetRolesbyUser200ResponseInner from '../model/GetRolesbyUser200ResponseInner';
import GetUser400Response from '../model/GetUser400Response';
import ListRolesResponse from '../model/ListRolesResponse';

/**
* Roles service.
* @module api/RolesApi
* @version 1.0
*/
export default class RolesApi {

    /**
    * Constructs a new RolesApi. 
    * @alias module:api/RolesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getListRoles operation.
     * @callback module:api/RolesApi~getListRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRolesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List of Roles
     * Returns a list of available roles. The response is divided in pages. The query parameter `numItems` defines the number of items in each page, and consequently the amount of pages for the whole list.
     * @param {String} contentType The media type of the body of the request. Default value for license manager protocol is application/json
     * @param {Object} opts Optional parameters
     * @param {Number} [numItems = 10)] Number of items in the returned page
     * @param {Number} [pageNumber = 1)] Which page from the whole list will be returned
     * @param {String} [sort = 'id')] Chooses the field that the list will be sorted by
     * @param {String} [sortType = 'ASC')] Defines the sorting order. ASC is used for ascendant order. DSC is used for descendant order
     * @param {module:api/RolesApi~getListRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRolesResponse}
     */
    getListRoles(contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getListRoles");
      }

      let pathParams = {
      };
      let queryParams = {
        'numItems': opts['numItems'],
        'pageNumber': opts['pageNumber'],
        'sort': opts['sort'],
        'sortType': opts['sortType']
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRolesResponse;
      return this.apiClient.callApi(
        '/api/license-manager/site/pvt/roles/list/paged', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRolesbyUser operation.
     * @callback module:api/RolesApi~getRolesbyUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetRolesbyUser200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Roles by User/appKey
     * Gets roles of a particular user or application key.
     * @param {String} contentType The media type of the body of the request. Default value for license manager protocol is application/json
     * @param {String} userId ID corresponding to the user
     * @param {module:api/RolesApi~getRolesbyUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetRolesbyUser200ResponseInner>}
     */
    getRolesbyUser(contentType, userId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getRolesbyUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getRolesbyUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetRolesbyUser200ResponseInner];
      return this.apiClient.callApi(
        '/api/license-manager/users/{userId}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRolesinUser operation.
     * @callback module:api/RolesApi~putRolesinUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put Roles in User/appKey
     * Allows you to add roles to a particular user or application key by specifying the list of roles' IDs on the request's body.
     * @param {String} userId ID corresponding to the user
     * @param {Array.<Number>} requestBody List of roles' IDs to add to the user or application key.
     * @param {module:api/RolesApi~putRolesinUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putRolesinUser(userId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling putRolesinUser");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling putRolesinUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/license-manager/users/{userId}/roles', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeRolefromUser operation.
     * @callback module:api/RolesApi~removeRolefromUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Role from User/appKey
     * Allows you to remove a role from a specific user or application key. This method only allows the removal of one role per request. The role's ID must be specified on the request path, not on the request body.    > Note that a successful response returns a `204` response with an empty body. A deletion on a role or user that does not exist will also return a `204`. Thus, this method should not be used to verify the existence of a specific user or role.
     * @param {String} contentType The media type of the body of the request. Default value for license manager protocol is application/json
     * @param {String} userId ID corresponding to the user
     * @param {String} roleId ID of the role which will be removed from the user
     * @param {module:api/RolesApi~removeRolefromUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeRolefromUser(contentType, userId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling removeRolefromUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeRolefromUser");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling removeRolefromUser");
      }

      let pathParams = {
        'userId': userId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/license-manager/users/{userId}/roles/{roleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
