/**
 * License Manager API
 * ## Welcome!    The License Manager API allows you to create users, modify their names and emails, as well as add and remove roles from users.    ### ATTRIBUTES    |Attribute name | Description |  |:------------|--------------|  |accountName | Account name in VTEX License Manager |  |environment | Environment on which you want to run the query e.g. vtexcommercestable |  |userId      | Unique user identification string |  |roleId      | Integer that represents a role, can be looked up on the License Manager UI |
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateUser200Response from '../model/CreateUser200Response';
import CreateUser400Response from '../model/CreateUser400Response';
import CreateUserRequest from '../model/CreateUserRequest';
import GetUser400Response from '../model/GetUser400Response';
import ListUsersResponse from '../model/ListUsersResponse';

/**
* User service.
* @module api/UserApi
* @version 1.0
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/UserApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create User
     * Allows you to create a user by providing an email (mandatory) and name (optional). The email must be in a valid format. The success response will contain the generated `userId` for that user.
     * @param {module:model/CreateUserRequest} createUserRequest 
     * @param {module:api/UserApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUser200Response}
     */
    createUser(createUserRequest, callback) {
      let postBody = createUserRequest;
      // verify the required parameter 'createUserRequest' is set
      if (createUserRequest === undefined || createUserRequest === null) {
        throw new Error("Missing the required parameter 'createUserRequest' when calling createUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUser200Response;
      return this.apiClient.callApi(
        '/api/license-manager/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListUsers operation.
     * @callback module:api/UserApi~getListUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List of Users
     * Returns a list of registered users. The response is divided in pages. The query parameter `numItems` defines the number of items in each page, and consequently the amount of pages for the whole list.
     * @param {String} contentType The media type of the body of the request. Default value for license manager protocol is application/json
     * @param {Object} opts Optional parameters
     * @param {Number} [numItems = 10)] Number of items in the returned page
     * @param {Number} [pageNumber = 1)] Which page from the whole list will be returned
     * @param {String} [sort = 'name')] Chooses the field that the list will be sorted by
     * @param {String} [sortType = 'ASC')] Defines the sorting order. `ASC` is used for ascendant order. `DSC` is used for descendant order
     * @param {module:api/UserApi~getListUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUsersResponse}
     */
    getListUsers(contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getListUsers");
      }

      let pathParams = {
      };
      let queryParams = {
        'numItems': opts['numItems'],
        'pageNumber': opts['pageNumber'],
        'sort': opts['sort'],
        'sortType': opts['sortType']
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListUsersResponse;
      return this.apiClient.callApi(
        '/api/license-manager/site/pvt/logins/list/paged', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/UserApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User
     * Allows you to get a user from the database, using the `userId` as the identifier.
     * @param {String} contentType The media type of the body of the request. Default value for license manager protocol is application/json
     * @param {String} userId ID from queried user.
     * @param {module:api/UserApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUser200Response}
     */
    getUser(contentType, userId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateUser200Response;
      return this.apiClient.callApi(
        '/api/license-manager/users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
