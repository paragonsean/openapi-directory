# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.license_items_products_inner import LicenseItemsProductsInner
from openapi_server import util


class LicenseItems(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiration: datetime=None, id: float=None, is_purchased: bool=None, name: str=None, products: List[LicenseItemsProductsInner]=None):
        """LicenseItems - a model defined in OpenAPI

        :param expiration: The expiration of this LicenseItems.
        :param id: The id of this LicenseItems.
        :param is_purchased: The is_purchased of this LicenseItems.
        :param name: The name of this LicenseItems.
        :param products: The products of this LicenseItems.
        """
        self.openapi_types = {
            'expiration': datetime,
            'id': float,
            'is_purchased': bool,
            'name': str,
            'products': List[LicenseItemsProductsInner]
        }

        self.attribute_map = {
            'expiration': 'expiration',
            'id': 'id',
            'is_purchased': 'isPurchased',
            'name': 'name',
            'products': 'products'
        }

        self._expiration = expiration
        self._id = id
        self._is_purchased = is_purchased
        self._name = name
        self._products = products

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicenseItems':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LicenseItems of this LicenseItems.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiration(self):
        """Gets the expiration of this LicenseItems.


        :return: The expiration of this LicenseItems.
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this LicenseItems.


        :param expiration: The expiration of this LicenseItems.
        :type expiration: datetime
        """

        self._expiration = expiration

    @property
    def id(self):
        """Gets the id of this LicenseItems.

        ID of the category of the license

        :return: The id of this LicenseItems.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LicenseItems.

        ID of the category of the license

        :param id: The id of this LicenseItems.
        :type id: float
        """

        self._id = id

    @property
    def is_purchased(self):
        """Gets the is_purchased of this LicenseItems.

        If the license is purchased

        :return: The is_purchased of this LicenseItems.
        :rtype: bool
        """
        return self._is_purchased

    @is_purchased.setter
    def is_purchased(self, is_purchased):
        """Sets the is_purchased of this LicenseItems.

        If the license is purchased

        :param is_purchased: The is_purchased of this LicenseItems.
        :type is_purchased: bool
        """

        self._is_purchased = is_purchased

    @property
    def name(self):
        """Gets the name of this LicenseItems.

        Name of the category of the license

        :return: The name of this LicenseItems.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LicenseItems.

        Name of the category of the license

        :param name: The name of this LicenseItems.
        :type name: str
        """

        self._name = name

    @property
    def products(self):
        """Gets the products of this LicenseItems.

        Array of products

        :return: The products of this LicenseItems.
        :rtype: List[LicenseItemsProductsInner]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this LicenseItems.

        Array of products

        :param products: The products of this LicenseItems.
        :type products: List[LicenseItemsProductsInner]
        """

        self._products = products
