# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.license_items_products_inner_endpoints import LicenseItemsProductsInnerEndpoints
from openapi_server import util


class LicenseItemsProductsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domains: List[str]=None, endpoints: LicenseItemsProductsInnerEndpoints=None, id: float=None, name: str=None):
        """LicenseItemsProductsInner - a model defined in OpenAPI

        :param domains: The domains of this LicenseItemsProductsInner.
        :param endpoints: The endpoints of this LicenseItemsProductsInner.
        :param id: The id of this LicenseItemsProductsInner.
        :param name: The name of this LicenseItemsProductsInner.
        """
        self.openapi_types = {
            'domains': List[str],
            'endpoints': LicenseItemsProductsInnerEndpoints,
            'id': float,
            'name': str
        }

        self.attribute_map = {
            'domains': 'domains',
            'endpoints': 'endpoints',
            'id': 'id',
            'name': 'name'
        }

        self._domains = domains
        self._endpoints = endpoints
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicenseItemsProductsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LicenseItems_products_inner of this LicenseItemsProductsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domains(self):
        """Gets the domains of this LicenseItemsProductsInner.


        :return: The domains of this LicenseItemsProductsInner.
        :rtype: List[str]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this LicenseItemsProductsInner.


        :param domains: The domains of this LicenseItemsProductsInner.
        :type domains: List[str]
        """

        self._domains = domains

    @property
    def endpoints(self):
        """Gets the endpoints of this LicenseItemsProductsInner.


        :return: The endpoints of this LicenseItemsProductsInner.
        :rtype: LicenseItemsProductsInnerEndpoints
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this LicenseItemsProductsInner.


        :param endpoints: The endpoints of this LicenseItemsProductsInner.
        :type endpoints: LicenseItemsProductsInnerEndpoints
        """

        self._endpoints = endpoints

    @property
    def id(self):
        """Gets the id of this LicenseItemsProductsInner.

        ID of the product

        :return: The id of this LicenseItemsProductsInner.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LicenseItemsProductsInner.

        ID of the product

        :param id: The id of this LicenseItemsProductsInner.
        :type id: float
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this LicenseItemsProductsInner.

        Name of the product

        :return: The name of this LicenseItemsProductsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LicenseItemsProductsInner.

        Name of the product

        :param name: The name of this LicenseItemsProductsInner.
        :type name: str
        """

        self._name = name
