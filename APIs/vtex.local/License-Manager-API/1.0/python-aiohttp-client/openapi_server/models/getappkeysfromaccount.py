# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Getappkeysfromaccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_key: str=None, created_in: datetime=None, id: str=None, is_active: bool=None, label: str=None):
        """Getappkeysfromaccount - a model defined in OpenAPI

        :param app_key: The app_key of this Getappkeysfromaccount.
        :param created_in: The created_in of this Getappkeysfromaccount.
        :param id: The id of this Getappkeysfromaccount.
        :param is_active: The is_active of this Getappkeysfromaccount.
        :param label: The label of this Getappkeysfromaccount.
        """
        self.openapi_types = {
            'app_key': str,
            'created_in': datetime,
            'id': str,
            'is_active': bool,
            'label': str
        }

        self.attribute_map = {
            'app_key': 'appKey',
            'created_in': 'createdIn',
            'id': 'id',
            'is_active': 'isActive',
            'label': 'label'
        }

        self._app_key = app_key
        self._created_in = created_in
        self._id = id
        self._is_active = is_active
        self._label = label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Getappkeysfromaccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Getappkeysfromaccount of this Getappkeysfromaccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_key(self):
        """Gets the app_key of this Getappkeysfromaccount.

        AppKey (Access Key in the license manager UI)

        :return: The app_key of this Getappkeysfromaccount.
        :rtype: str
        """
        return self._app_key

    @app_key.setter
    def app_key(self, app_key):
        """Sets the app_key of this Getappkeysfromaccount.

        AppKey (Access Key in the license manager UI)

        :param app_key: The app_key of this Getappkeysfromaccount.
        :type app_key: str
        """
        if app_key is None:
            raise ValueError("Invalid value for `app_key`, must not be `None`")

        self._app_key = app_key

    @property
    def created_in(self):
        """Gets the created_in of this Getappkeysfromaccount.

        Date of creation of application key

        :return: The created_in of this Getappkeysfromaccount.
        :rtype: datetime
        """
        return self._created_in

    @created_in.setter
    def created_in(self, created_in):
        """Sets the created_in of this Getappkeysfromaccount.

        Date of creation of application key

        :param created_in: The created_in of this Getappkeysfromaccount.
        :type created_in: datetime
        """
        if created_in is None:
            raise ValueError("Invalid value for `created_in`, must not be `None`")

        self._created_in = created_in

    @property
    def id(self):
        """Gets the id of this Getappkeysfromaccount.

        ID of application key

        :return: The id of this Getappkeysfromaccount.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Getappkeysfromaccount.

        ID of application key

        :param id: The id of this Getappkeysfromaccount.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this Getappkeysfromaccount.

        If the application key is active

        :return: The is_active of this Getappkeysfromaccount.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Getappkeysfromaccount.

        If the application key is active

        :param is_active: The is_active of this Getappkeysfromaccount.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def label(self):
        """Gets the label of this Getappkeysfromaccount.

        Label for application key

        :return: The label of this Getappkeysfromaccount.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Getappkeysfromaccount.

        Label for application key

        :param label: The label of this Getappkeysfromaccount.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label
