# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserItems(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_names: List[str]=None, email: str=None, id: str=None, is_admin: bool=None, is_blocked: bool=None, is_reliable: bool=None, name: str=None, roles: List[str]=None):
        """UserItems - a model defined in OpenAPI

        :param account_names: The account_names of this UserItems.
        :param email: The email of this UserItems.
        :param id: The id of this UserItems.
        :param is_admin: The is_admin of this UserItems.
        :param is_blocked: The is_blocked of this UserItems.
        :param is_reliable: The is_reliable of this UserItems.
        :param name: The name of this UserItems.
        :param roles: The roles of this UserItems.
        """
        self.openapi_types = {
            'account_names': List[str],
            'email': str,
            'id': str,
            'is_admin': bool,
            'is_blocked': bool,
            'is_reliable': bool,
            'name': str,
            'roles': List[str]
        }

        self.attribute_map = {
            'account_names': 'accountNames',
            'email': 'email',
            'id': 'id',
            'is_admin': 'isAdmin',
            'is_blocked': 'isBlocked',
            'is_reliable': 'isReliable',
            'name': 'name',
            'roles': 'roles'
        }

        self._account_names = account_names
        self._email = email
        self._id = id
        self._is_admin = is_admin
        self._is_blocked = is_blocked
        self._is_reliable = is_reliable
        self._name = name
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserItems':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserItems of this UserItems.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_names(self):
        """Gets the account_names of this UserItems.

        Array of account names

        :return: The account_names of this UserItems.
        :rtype: List[str]
        """
        return self._account_names

    @account_names.setter
    def account_names(self, account_names):
        """Sets the account_names of this UserItems.

        Array of account names

        :param account_names: The account_names of this UserItems.
        :type account_names: List[str]
        """
        if account_names is not None and len(account_names) > 0:
            raise ValueError("Invalid value for `account_names`, number of items must be less than or equal to `0`")

        self._account_names = account_names

    @property
    def email(self):
        """Gets the email of this UserItems.

        Email of the user

        :return: The email of this UserItems.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserItems.

        Email of the user

        :param email: The email of this UserItems.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this UserItems.

        ID of the user

        :return: The id of this UserItems.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserItems.

        ID of the user

        :param id: The id of this UserItems.
        :type id: str
        """

        self._id = id

    @property
    def is_admin(self):
        """Gets the is_admin of this UserItems.

        If user is admin

        :return: The is_admin of this UserItems.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this UserItems.

        If user is admin

        :param is_admin: The is_admin of this UserItems.
        :type is_admin: bool
        """

        self._is_admin = is_admin

    @property
    def is_blocked(self):
        """Gets the is_blocked of this UserItems.

        If user is blocked

        :return: The is_blocked of this UserItems.
        :rtype: bool
        """
        return self._is_blocked

    @is_blocked.setter
    def is_blocked(self, is_blocked):
        """Sets the is_blocked of this UserItems.

        If user is blocked

        :param is_blocked: The is_blocked of this UserItems.
        :type is_blocked: bool
        """

        self._is_blocked = is_blocked

    @property
    def is_reliable(self):
        """Gets the is_reliable of this UserItems.

        For internal use only

        :return: The is_reliable of this UserItems.
        :rtype: bool
        """
        return self._is_reliable

    @is_reliable.setter
    def is_reliable(self, is_reliable):
        """Sets the is_reliable of this UserItems.

        For internal use only

        :param is_reliable: The is_reliable of this UserItems.
        :type is_reliable: bool
        """

        self._is_reliable = is_reliable

    @property
    def name(self):
        """Gets the name of this UserItems.

        Name of the user

        :return: The name of this UserItems.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserItems.

        Name of the user

        :param name: The name of this UserItems.
        :type name: str
        """

        self._name = name

    @property
    def roles(self):
        """Gets the roles of this UserItems.

        Array of roles

        :return: The roles of this UserItems.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this UserItems.

        Array of roles

        :param roles: The roles of this UserItems.
        :type roles: List[str]
        """
        if roles is not None and len(roles) > 0:
            raise ValueError("Invalid value for `roles`, number of items must be less than or equal to `0`")

        self._roles = roles
