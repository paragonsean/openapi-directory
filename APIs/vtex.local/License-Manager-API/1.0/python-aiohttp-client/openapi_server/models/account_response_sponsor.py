# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountResponseSponsor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, name: str=None, phone: str=None):
        """AccountResponseSponsor - a model defined in OpenAPI

        :param email: The email of this AccountResponseSponsor.
        :param name: The name of this AccountResponseSponsor.
        :param phone: The phone of this AccountResponseSponsor.
        """
        self.openapi_types = {
            'email': str,
            'name': str,
            'phone': str
        }

        self.attribute_map = {
            'email': 'email',
            'name': 'name',
            'phone': 'phone'
        }

        self._email = email
        self._name = name
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountResponseSponsor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountResponse_sponsor of this AccountResponseSponsor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this AccountResponseSponsor.

        Email of the sponsor user

        :return: The email of this AccountResponseSponsor.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AccountResponseSponsor.

        Email of the sponsor user

        :param email: The email of this AccountResponseSponsor.
        :type email: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this AccountResponseSponsor.

        Name of the sponsor user

        :return: The name of this AccountResponseSponsor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountResponseSponsor.

        Name of the sponsor user

        :param name: The name of this AccountResponseSponsor.
        :type name: str
        """

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this AccountResponseSponsor.

        Phone of the sponsor user

        :return: The phone of this AccountResponseSponsor.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this AccountResponseSponsor.

        Phone of the sponsor user

        :param phone: The phone of this AccountResponseSponsor.
        :type phone: str
        """

        self._phone = phone
