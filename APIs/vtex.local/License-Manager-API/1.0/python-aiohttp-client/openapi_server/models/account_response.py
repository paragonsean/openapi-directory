# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_response_app_key import AccountResponseAppKey
from openapi_server.models.account_response_contact import AccountResponseContact
from openapi_server.models.account_response_sponsor import AccountResponseSponsor
from openapi_server.models.app_key_items import AppKeyItems
from openapi_server.models.license_items import LicenseItems
from openapi_server.models.site_items import SiteItems
from openapi_server import util


class AccountResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, address: str=None, app_key: AccountResponseAppKey=None, app_keys: List[AppKeyItems]=None, city: str=None, cnpj: str=None, company_name: str=None, complement: str=None, contact: AccountResponseContact=None, country: str=None, creation_date: datetime=None, default_url: str=None, district: str=None, has_logo: bool=None, have_parent_account: bool=None, hosts: List[str]=None, id: str=None, inactivation_date: datetime=None, is_active: bool=None, is_operating: bool=None, licenses: List[LicenseItems]=None, logo: str=None, lv: str=None, name: str=None, number: str=None, operation_date: datetime=None, parent_account_id: str=None, parent_account_name: str=None, postal_code: str=None, sites: List[SiteItems]=None, sponsor: AccountResponseSponsor=None, state: str=None, telephone: str=None, trading_name: str=None):
        """AccountResponse - a model defined in OpenAPI

        :param account_name: The account_name of this AccountResponse.
        :param address: The address of this AccountResponse.
        :param app_key: The app_key of this AccountResponse.
        :param app_keys: The app_keys of this AccountResponse.
        :param city: The city of this AccountResponse.
        :param cnpj: The cnpj of this AccountResponse.
        :param company_name: The company_name of this AccountResponse.
        :param complement: The complement of this AccountResponse.
        :param contact: The contact of this AccountResponse.
        :param country: The country of this AccountResponse.
        :param creation_date: The creation_date of this AccountResponse.
        :param default_url: The default_url of this AccountResponse.
        :param district: The district of this AccountResponse.
        :param has_logo: The has_logo of this AccountResponse.
        :param have_parent_account: The have_parent_account of this AccountResponse.
        :param hosts: The hosts of this AccountResponse.
        :param id: The id of this AccountResponse.
        :param inactivation_date: The inactivation_date of this AccountResponse.
        :param is_active: The is_active of this AccountResponse.
        :param is_operating: The is_operating of this AccountResponse.
        :param licenses: The licenses of this AccountResponse.
        :param logo: The logo of this AccountResponse.
        :param lv: The lv of this AccountResponse.
        :param name: The name of this AccountResponse.
        :param number: The number of this AccountResponse.
        :param operation_date: The operation_date of this AccountResponse.
        :param parent_account_id: The parent_account_id of this AccountResponse.
        :param parent_account_name: The parent_account_name of this AccountResponse.
        :param postal_code: The postal_code of this AccountResponse.
        :param sites: The sites of this AccountResponse.
        :param sponsor: The sponsor of this AccountResponse.
        :param state: The state of this AccountResponse.
        :param telephone: The telephone of this AccountResponse.
        :param trading_name: The trading_name of this AccountResponse.
        """
        self.openapi_types = {
            'account_name': str,
            'address': str,
            'app_key': AccountResponseAppKey,
            'app_keys': List[AppKeyItems],
            'city': str,
            'cnpj': str,
            'company_name': str,
            'complement': str,
            'contact': AccountResponseContact,
            'country': str,
            'creation_date': datetime,
            'default_url': str,
            'district': str,
            'has_logo': bool,
            'have_parent_account': bool,
            'hosts': List[str],
            'id': str,
            'inactivation_date': datetime,
            'is_active': bool,
            'is_operating': bool,
            'licenses': List[LicenseItems],
            'logo': str,
            'lv': str,
            'name': str,
            'number': str,
            'operation_date': datetime,
            'parent_account_id': str,
            'parent_account_name': str,
            'postal_code': str,
            'sites': List[SiteItems],
            'sponsor': AccountResponseSponsor,
            'state': str,
            'telephone': str,
            'trading_name': str
        }

        self.attribute_map = {
            'account_name': 'accountName',
            'address': 'address',
            'app_key': 'appKey',
            'app_keys': 'appKeys',
            'city': 'city',
            'cnpj': 'cnpj',
            'company_name': 'companyName',
            'complement': 'complement',
            'contact': 'contact',
            'country': 'country',
            'creation_date': 'creationDate',
            'default_url': 'defaultUrl',
            'district': 'district',
            'has_logo': 'hasLogo',
            'have_parent_account': 'haveParentAccount',
            'hosts': 'hosts',
            'id': 'id',
            'inactivation_date': 'inactivationDate',
            'is_active': 'isActive',
            'is_operating': 'isOperating',
            'licenses': 'licenses',
            'logo': 'logo',
            'lv': 'lv',
            'name': 'name',
            'number': 'number',
            'operation_date': 'operationDate',
            'parent_account_id': 'parentAccountId',
            'parent_account_name': 'parentAccountName',
            'postal_code': 'postalCode',
            'sites': 'sites',
            'sponsor': 'sponsor',
            'state': 'state',
            'telephone': 'telephone',
            'trading_name': 'tradingName'
        }

        self._account_name = account_name
        self._address = address
        self._app_key = app_key
        self._app_keys = app_keys
        self._city = city
        self._cnpj = cnpj
        self._company_name = company_name
        self._complement = complement
        self._contact = contact
        self._country = country
        self._creation_date = creation_date
        self._default_url = default_url
        self._district = district
        self._has_logo = has_logo
        self._have_parent_account = have_parent_account
        self._hosts = hosts
        self._id = id
        self._inactivation_date = inactivation_date
        self._is_active = is_active
        self._is_operating = is_operating
        self._licenses = licenses
        self._logo = logo
        self._lv = lv
        self._name = name
        self._number = number
        self._operation_date = operation_date
        self._parent_account_id = parent_account_id
        self._parent_account_name = parent_account_name
        self._postal_code = postal_code
        self._sites = sites
        self._sponsor = sponsor
        self._state = state
        self._telephone = telephone
        self._trading_name = trading_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountResponse of this AccountResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this AccountResponse.

        Account name

        :return: The account_name of this AccountResponse.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this AccountResponse.

        Account name

        :param account_name: The account_name of this AccountResponse.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def address(self):
        """Gets the address of this AccountResponse.

        Address of contact

        :return: The address of this AccountResponse.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AccountResponse.

        Address of contact

        :param address: The address of this AccountResponse.
        :type address: str
        """

        self._address = address

    @property
    def app_key(self):
        """Gets the app_key of this AccountResponse.


        :return: The app_key of this AccountResponse.
        :rtype: AccountResponseAppKey
        """
        return self._app_key

    @app_key.setter
    def app_key(self, app_key):
        """Sets the app_key of this AccountResponse.


        :param app_key: The app_key of this AccountResponse.
        :type app_key: AccountResponseAppKey
        """

        self._app_key = app_key

    @property
    def app_keys(self):
        """Gets the app_keys of this AccountResponse.

        Array of application keys

        :return: The app_keys of this AccountResponse.
        :rtype: List[AppKeyItems]
        """
        return self._app_keys

    @app_keys.setter
    def app_keys(self, app_keys):
        """Sets the app_keys of this AccountResponse.

        Array of application keys

        :param app_keys: The app_keys of this AccountResponse.
        :type app_keys: List[AppKeyItems]
        """

        self._app_keys = app_keys

    @property
    def city(self):
        """Gets the city of this AccountResponse.

        City of contact

        :return: The city of this AccountResponse.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AccountResponse.

        City of contact

        :param city: The city of this AccountResponse.
        :type city: str
        """

        self._city = city

    @property
    def cnpj(self):
        """Gets the cnpj of this AccountResponse.

        CNPJ (Tax ID) of account

        :return: The cnpj of this AccountResponse.
        :rtype: str
        """
        return self._cnpj

    @cnpj.setter
    def cnpj(self, cnpj):
        """Sets the cnpj of this AccountResponse.

        CNPJ (Tax ID) of account

        :param cnpj: The cnpj of this AccountResponse.
        :type cnpj: str
        """

        self._cnpj = cnpj

    @property
    def company_name(self):
        """Gets the company_name of this AccountResponse.

        Company name

        :return: The company_name of this AccountResponse.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this AccountResponse.

        Company name

        :param company_name: The company_name of this AccountResponse.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def complement(self):
        """Gets the complement of this AccountResponse.

        Additional address of contact

        :return: The complement of this AccountResponse.
        :rtype: str
        """
        return self._complement

    @complement.setter
    def complement(self, complement):
        """Sets the complement of this AccountResponse.

        Additional address of contact

        :param complement: The complement of this AccountResponse.
        :type complement: str
        """

        self._complement = complement

    @property
    def contact(self):
        """Gets the contact of this AccountResponse.


        :return: The contact of this AccountResponse.
        :rtype: AccountResponseContact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this AccountResponse.


        :param contact: The contact of this AccountResponse.
        :type contact: AccountResponseContact
        """

        self._contact = contact

    @property
    def country(self):
        """Gets the country of this AccountResponse.

        Country of contact

        :return: The country of this AccountResponse.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AccountResponse.

        Country of contact

        :param country: The country of this AccountResponse.
        :type country: str
        """

        self._country = country

    @property
    def creation_date(self):
        """Gets the creation_date of this AccountResponse.

        The date when the account was created

        :return: The creation_date of this AccountResponse.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this AccountResponse.

        The date when the account was created

        :param creation_date: The creation_date of this AccountResponse.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def default_url(self):
        """Gets the default_url of this AccountResponse.


        :return: The default_url of this AccountResponse.
        :rtype: str
        """
        return self._default_url

    @default_url.setter
    def default_url(self, default_url):
        """Sets the default_url of this AccountResponse.


        :param default_url: The default_url of this AccountResponse.
        :type default_url: str
        """

        self._default_url = default_url

    @property
    def district(self):
        """Gets the district of this AccountResponse.

        Neighborhood of contact

        :return: The district of this AccountResponse.
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this AccountResponse.

        Neighborhood of contact

        :param district: The district of this AccountResponse.
        :type district: str
        """

        self._district = district

    @property
    def has_logo(self):
        """Gets the has_logo of this AccountResponse.

        If logo has been setup

        :return: The has_logo of this AccountResponse.
        :rtype: bool
        """
        return self._has_logo

    @has_logo.setter
    def has_logo(self, has_logo):
        """Sets the has_logo of this AccountResponse.

        If logo has been setup

        :param has_logo: The has_logo of this AccountResponse.
        :type has_logo: bool
        """

        self._has_logo = has_logo

    @property
    def have_parent_account(self):
        """Gets the have_parent_account of this AccountResponse.

        If it has a parent account

        :return: The have_parent_account of this AccountResponse.
        :rtype: bool
        """
        return self._have_parent_account

    @have_parent_account.setter
    def have_parent_account(self, have_parent_account):
        """Sets the have_parent_account of this AccountResponse.

        If it has a parent account

        :param have_parent_account: The have_parent_account of this AccountResponse.
        :type have_parent_account: bool
        """

        self._have_parent_account = have_parent_account

    @property
    def hosts(self):
        """Gets the hosts of this AccountResponse.

        Hosts of all stores

        :return: The hosts of this AccountResponse.
        :rtype: List[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this AccountResponse.

        Hosts of all stores

        :param hosts: The hosts of this AccountResponse.
        :type hosts: List[str]
        """

        self._hosts = hosts

    @property
    def id(self):
        """Gets the id of this AccountResponse.

        ID of the account

        :return: The id of this AccountResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountResponse.

        ID of the account

        :param id: The id of this AccountResponse.
        :type id: str
        """

        self._id = id

    @property
    def inactivation_date(self):
        """Gets the inactivation_date of this AccountResponse.

        The date when the account was deactivated

        :return: The inactivation_date of this AccountResponse.
        :rtype: datetime
        """
        return self._inactivation_date

    @inactivation_date.setter
    def inactivation_date(self, inactivation_date):
        """Sets the inactivation_date of this AccountResponse.

        The date when the account was deactivated

        :param inactivation_date: The inactivation_date of this AccountResponse.
        :type inactivation_date: datetime
        """

        self._inactivation_date = inactivation_date

    @property
    def is_active(self):
        """Gets the is_active of this AccountResponse.

        If account is active or not

        :return: The is_active of this AccountResponse.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this AccountResponse.

        If account is active or not

        :param is_active: The is_active of this AccountResponse.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_operating(self):
        """Gets the is_operating of this AccountResponse.

        If it is in production

        :return: The is_operating of this AccountResponse.
        :rtype: bool
        """
        return self._is_operating

    @is_operating.setter
    def is_operating(self, is_operating):
        """Sets the is_operating of this AccountResponse.

        If it is in production

        :param is_operating: The is_operating of this AccountResponse.
        :type is_operating: bool
        """

        self._is_operating = is_operating

    @property
    def licenses(self):
        """Gets the licenses of this AccountResponse.

        Licenses of the account

        :return: The licenses of this AccountResponse.
        :rtype: List[LicenseItems]
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this AccountResponse.

        Licenses of the account

        :param licenses: The licenses of this AccountResponse.
        :type licenses: List[LicenseItems]
        """

        self._licenses = licenses

    @property
    def logo(self):
        """Gets the logo of this AccountResponse.

        Filename of account logo

        :return: The logo of this AccountResponse.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this AccountResponse.

        Filename of account logo

        :param logo: The logo of this AccountResponse.
        :type logo: str
        """

        self._logo = logo

    @property
    def lv(self):
        """Gets the lv of this AccountResponse.


        :return: The lv of this AccountResponse.
        :rtype: str
        """
        return self._lv

    @lv.setter
    def lv(self, lv):
        """Sets the lv of this AccountResponse.


        :param lv: The lv of this AccountResponse.
        :type lv: str
        """

        self._lv = lv

    @property
    def name(self):
        """Gets the name of this AccountResponse.

        Trading name

        :return: The name of this AccountResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountResponse.

        Trading name

        :param name: The name of this AccountResponse.
        :type name: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this AccountResponse.

        Number of the address of contact

        :return: The number of this AccountResponse.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this AccountResponse.

        Number of the address of contact

        :param number: The number of this AccountResponse.
        :type number: str
        """

        self._number = number

    @property
    def operation_date(self):
        """Gets the operation_date of this AccountResponse.

        The date when the account went into production

        :return: The operation_date of this AccountResponse.
        :rtype: datetime
        """
        return self._operation_date

    @operation_date.setter
    def operation_date(self, operation_date):
        """Sets the operation_date of this AccountResponse.

        The date when the account went into production

        :param operation_date: The operation_date of this AccountResponse.
        :type operation_date: datetime
        """

        self._operation_date = operation_date

    @property
    def parent_account_id(self):
        """Gets the parent_account_id of this AccountResponse.

        The ID of the parent account

        :return: The parent_account_id of this AccountResponse.
        :rtype: str
        """
        return self._parent_account_id

    @parent_account_id.setter
    def parent_account_id(self, parent_account_id):
        """Sets the parent_account_id of this AccountResponse.

        The ID of the parent account

        :param parent_account_id: The parent_account_id of this AccountResponse.
        :type parent_account_id: str
        """

        self._parent_account_id = parent_account_id

    @property
    def parent_account_name(self):
        """Gets the parent_account_name of this AccountResponse.

        The name of the parent account

        :return: The parent_account_name of this AccountResponse.
        :rtype: str
        """
        return self._parent_account_name

    @parent_account_name.setter
    def parent_account_name(self, parent_account_name):
        """Sets the parent_account_name of this AccountResponse.

        The name of the parent account

        :param parent_account_name: The parent_account_name of this AccountResponse.
        :type parent_account_name: str
        """

        self._parent_account_name = parent_account_name

    @property
    def postal_code(self):
        """Gets the postal_code of this AccountResponse.

        Zip Code of contact

        :return: The postal_code of this AccountResponse.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this AccountResponse.

        Zip Code of contact

        :param postal_code: The postal_code of this AccountResponse.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def sites(self):
        """Gets the sites of this AccountResponse.

        Array of objects representing a store

        :return: The sites of this AccountResponse.
        :rtype: List[SiteItems]
        """
        return self._sites

    @sites.setter
    def sites(self, sites):
        """Sets the sites of this AccountResponse.

        Array of objects representing a store

        :param sites: The sites of this AccountResponse.
        :type sites: List[SiteItems]
        """

        self._sites = sites

    @property
    def sponsor(self):
        """Gets the sponsor of this AccountResponse.


        :return: The sponsor of this AccountResponse.
        :rtype: AccountResponseSponsor
        """
        return self._sponsor

    @sponsor.setter
    def sponsor(self, sponsor):
        """Sets the sponsor of this AccountResponse.


        :param sponsor: The sponsor of this AccountResponse.
        :type sponsor: AccountResponseSponsor
        """

        self._sponsor = sponsor

    @property
    def state(self):
        """Gets the state of this AccountResponse.

        State/Province of contact

        :return: The state of this AccountResponse.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AccountResponse.

        State/Province of contact

        :param state: The state of this AccountResponse.
        :type state: str
        """

        self._state = state

    @property
    def telephone(self):
        """Gets the telephone of this AccountResponse.

        Telephone of contact

        :return: The telephone of this AccountResponse.
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this AccountResponse.

        Telephone of contact

        :param telephone: The telephone of this AccountResponse.
        :type telephone: str
        """

        self._telephone = telephone

    @property
    def trading_name(self):
        """Gets the trading_name of this AccountResponse.

        Trading name

        :return: The trading_name of this AccountResponse.
        :rtype: str
        """
        return self._trading_name

    @trading_name.setter
    def trading_name(self, trading_name):
        """Sets the trading_name of this AccountResponse.

        Trading name

        :param trading_name: The trading_name of this AccountResponse.
        :type trading_name: str
        """

        self._trading_name = trading_name
