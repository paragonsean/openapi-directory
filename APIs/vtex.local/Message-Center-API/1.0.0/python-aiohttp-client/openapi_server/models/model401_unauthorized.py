# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Model401Unauthorized(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: int=None, title: str=None, trace_id: str=None, type: str=None):
        """Model401Unauthorized - a model defined in OpenAPI

        :param status: The status of this Model401Unauthorized.
        :param title: The title of this Model401Unauthorized.
        :param trace_id: The trace_id of this Model401Unauthorized.
        :param type: The type of this Model401Unauthorized.
        """
        self.openapi_types = {
            'status': int,
            'title': str,
            'trace_id': str,
            'type': str
        }

        self.attribute_map = {
            'status': 'status',
            'title': 'title',
            'trace_id': 'traceId',
            'type': 'type'
        }

        self._status = status
        self._title = title
        self._trace_id = trace_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Model401Unauthorized':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The 401_Unauthorized of this Model401Unauthorized.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this Model401Unauthorized.


        :return: The status of this Model401Unauthorized.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Model401Unauthorized.


        :param status: The status of this Model401Unauthorized.
        :type status: int
        """
        allowed_values = [401]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def title(self):
        """Gets the title of this Model401Unauthorized.


        :return: The title of this Model401Unauthorized.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Model401Unauthorized.


        :param title: The title of this Model401Unauthorized.
        :type title: str
        """
        allowed_values = ["Unauthorized"]  # noqa: E501
        if title not in allowed_values:
            raise ValueError(
                "Invalid value for `title` ({0}), must be one of {1}"
                .format(title, allowed_values)
            )

        self._title = title

    @property
    def trace_id(self):
        """Gets the trace_id of this Model401Unauthorized.


        :return: The trace_id of this Model401Unauthorized.
        :rtype: str
        """
        return self._trace_id

    @trace_id.setter
    def trace_id(self, trace_id):
        """Sets the trace_id of this Model401Unauthorized.


        :param trace_id: The trace_id of this Model401Unauthorized.
        :type trace_id: str
        """
        if trace_id is None:
            raise ValueError("Invalid value for `trace_id`, must not be `None`")
        if trace_id is not None and not re.search(r'^00-[0-9a-f]{32}-[0-9a-f]{16}-00$', trace_id):
            raise ValueError("Invalid value for `trace_id`, must be a follow pattern or equal to `/^00-[0-9a-f]{32}-[0-9a-f]{16}-00$/`")

        self._trace_id = trace_id

    @property
    def type(self):
        """Gets the type of this Model401Unauthorized.


        :return: The type of this Model401Unauthorized.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Model401Unauthorized.


        :param type: The type of this Model401Unauthorized.
        :type type: str
        """
        allowed_values = ["https://tools.ietf.org/html/rfc7235#section-3.1"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
