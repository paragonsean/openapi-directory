# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_cm_spage200_response_sections_inner import GetCMSpage200ResponseSectionsInner
from openapi_server import util


class GetCMSpage200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, sections: List[GetCMSpage200ResponseSectionsInner]=None, status: str=None, type: str=None, version_id: str=None, version_status: str=None):
        """GetCMSpage200Response - a model defined in OpenAPI

        :param id: The id of this GetCMSpage200Response.
        :param name: The name of this GetCMSpage200Response.
        :param sections: The sections of this GetCMSpage200Response.
        :param status: The status of this GetCMSpage200Response.
        :param type: The type of this GetCMSpage200Response.
        :param version_id: The version_id of this GetCMSpage200Response.
        :param version_status: The version_status of this GetCMSpage200Response.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'sections': List[GetCMSpage200ResponseSectionsInner],
            'status': str,
            'type': str,
            'version_id': str,
            'version_status': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'sections': 'sections',
            'status': 'status',
            'type': 'type',
            'version_id': 'versionId',
            'version_status': 'versionStatus'
        }

        self._id = id
        self._name = name
        self._sections = sections
        self._status = status
        self._type = type
        self._version_id = version_id
        self._version_status = version_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCMSpage200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetCMSpage_200_response of this GetCMSpage200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this GetCMSpage200Response.

        Document ID.

        :return: The id of this GetCMSpage200Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetCMSpage200Response.

        Document ID.

        :param id: The id of this GetCMSpage200Response.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this GetCMSpage200Response.

        Name of the page created in the CMS app.

        :return: The name of this GetCMSpage200Response.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetCMSpage200Response.

        Name of the page created in the CMS app.

        :param name: The name of this GetCMSpage200Response.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def sections(self):
        """Gets the sections of this GetCMSpage200Response.

        Sections that compose the page.

        :return: The sections of this GetCMSpage200Response.
        :rtype: List[GetCMSpage200ResponseSectionsInner]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this GetCMSpage200Response.

        Sections that compose the page.

        :param sections: The sections of this GetCMSpage200Response.
        :type sections: List[GetCMSpage200ResponseSectionsInner]
        """

        self._sections = sections

    @property
    def status(self):
        """Gets the status of this GetCMSpage200Response.

        Current status of the page.

        :return: The status of this GetCMSpage200Response.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetCMSpage200Response.

        Current status of the page.

        :param status: The status of this GetCMSpage200Response.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def type(self):
        """Gets the type of this GetCMSpage200Response.

        Name of the Content Type defined in the FastStore project.

        :return: The type of this GetCMSpage200Response.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetCMSpage200Response.

        Name of the Content Type defined in the FastStore project.

        :param type: The type of this GetCMSpage200Response.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def version_id(self):
        """Gets the version_id of this GetCMSpage200Response.

        Version ID.

        :return: The version_id of this GetCMSpage200Response.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this GetCMSpage200Response.

        Version ID.

        :param version_id: The version_id of this GetCMSpage200Response.
        :type version_id: str
        """

        self._version_id = version_id

    @property
    def version_status(self):
        """Gets the version_status of this GetCMSpage200Response.

        Version status

        :return: The version_status of this GetCMSpage200Response.
        :rtype: str
        """
        return self._version_status

    @version_status.setter
    def version_status(self, version_status):
        """Sets the version_status of this GetCMSpage200Response.

        Version status

        :param version_status: The version_status of this GetCMSpage200Response.
        :type version_status: str
        """

        self._version_status = version_status
