# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_pagesby_content_type200_response_data_inner import GetPagesbyContentType200ResponseDataInner
from openapi_server import util


class GetPagesbyContentType200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[GetPagesbyContentType200ResponseDataInner]=None, has_next_page: bool=None, total_items: int=None):
        """GetPagesbyContentType200Response - a model defined in OpenAPI

        :param data: The data of this GetPagesbyContentType200Response.
        :param has_next_page: The has_next_page of this GetPagesbyContentType200Response.
        :param total_items: The total_items of this GetPagesbyContentType200Response.
        """
        self.openapi_types = {
            'data': List[GetPagesbyContentType200ResponseDataInner],
            'has_next_page': bool,
            'total_items': int
        }

        self.attribute_map = {
            'data': 'data',
            'has_next_page': 'hasNextPage',
            'total_items': 'totalItems'
        }

        self._data = data
        self._has_next_page = has_next_page
        self._total_items = total_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetPagesbyContentType200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetPagesbyContentType_200_response of this GetPagesbyContentType200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this GetPagesbyContentType200Response.

        Array with data from all pages of the given Content Type.

        :return: The data of this GetPagesbyContentType200Response.
        :rtype: List[GetPagesbyContentType200ResponseDataInner]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this GetPagesbyContentType200Response.

        Array with data from all pages of the given Content Type.

        :param data: The data of this GetPagesbyContentType200Response.
        :type data: List[GetPagesbyContentType200ResponseDataInner]
        """

        self._data = data

    @property
    def has_next_page(self):
        """Gets the has_next_page of this GetPagesbyContentType200Response.

        Indicates if there are more items to fetch.

        :return: The has_next_page of this GetPagesbyContentType200Response.
        :rtype: bool
        """
        return self._has_next_page

    @has_next_page.setter
    def has_next_page(self, has_next_page):
        """Sets the has_next_page of this GetPagesbyContentType200Response.

        Indicates if there are more items to fetch.

        :param has_next_page: The has_next_page of this GetPagesbyContentType200Response.
        :type has_next_page: bool
        """

        self._has_next_page = has_next_page

    @property
    def total_items(self):
        """Gets the total_items of this GetPagesbyContentType200Response.

        Total number of results.

        :return: The total_items of this GetPagesbyContentType200Response.
        :rtype: int
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items):
        """Sets the total_items of this GetPagesbyContentType200Response.

        Total number of results.

        :param total_items: The total_items of this GetPagesbyContentType200Response.
        :type total_items: int
        """

        self._total_items = total_items
