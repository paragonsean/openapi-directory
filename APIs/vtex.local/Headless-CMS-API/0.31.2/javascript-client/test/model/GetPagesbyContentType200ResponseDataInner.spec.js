/**
 * VTEX Headless CMS
 *  The VTEX Headless CMS is a no-code management system for storefront content.  That means you can store your content as structured data in a layer decoupled from the frontend and  use the VTEX Headless CMS to access and deliver your content to your storefront project.  Notice that the VTEX Headless CMS typically works with **FastStore** projects only. In this case, you can use this API to fetch data using SSR (NextJS and Gatsby v4+) or SSG (NextJS).  **Servers** - `https://{account}.myvtex.com/` - `https://{workspace}--{account}.myvtex.com/`  **Server variables** - `accountName`: Name of your VTEX account. - `workspace`: Name of your VTEX workspace. 
 *
 * The version of the OpenAPI document: 0.31.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VtexHeadlessCms);
  }
}(this, function(expect, VtexHeadlessCms) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new VtexHeadlessCms.GetPagesbyContentType200ResponseDataInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetPagesbyContentType200ResponseDataInner', function() {
    it('should create an instance of GetPagesbyContentType200ResponseDataInner', function() {
      // uncomment below and update the code to test GetPagesbyContentType200ResponseDataInner
      //var instance = new VtexHeadlessCms.GetPagesbyContentType200ResponseDataInner();
      //expect(instance).to.be.a(VtexHeadlessCms.GetPagesbyContentType200ResponseDataInner);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new VtexHeadlessCms.GetPagesbyContentType200ResponseDataInner();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new VtexHeadlessCms.GetPagesbyContentType200ResponseDataInner();
      //expect(instance).to.be();
    });

    it('should have the property parameters (base name: "parameters")', function() {
      // uncomment below and update the code to test the property parameters
      //var instance = new VtexHeadlessCms.GetPagesbyContentType200ResponseDataInner();
      //expect(instance).to.be();
    });

    it('should have the property sections (base name: "sections")', function() {
      // uncomment below and update the code to test the property sections
      //var instance = new VtexHeadlessCms.GetPagesbyContentType200ResponseDataInner();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new VtexHeadlessCms.GetPagesbyContentType200ResponseDataInner();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new VtexHeadlessCms.GetPagesbyContentType200ResponseDataInner();
      //expect(instance).to.be();
    });

    it('should have the property versionId (base name: "versionId")', function() {
      // uncomment below and update the code to test the property versionId
      //var instance = new VtexHeadlessCms.GetPagesbyContentType200ResponseDataInner();
      //expect(instance).to.be();
    });

    it('should have the property versionStatus (base name: "versionStatus")', function() {
      // uncomment below and update the code to test the property versionStatus
      //var instance = new VtexHeadlessCms.GetPagesbyContentType200ResponseDataInner();
      //expect(instance).to.be();
    });

  });

}));
