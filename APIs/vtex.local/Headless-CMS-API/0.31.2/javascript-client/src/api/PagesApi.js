/**
 * VTEX Headless CMS
 *  The VTEX Headless CMS is a no-code management system for storefront content.  That means you can store your content as structured data in a layer decoupled from the frontend and  use the VTEX Headless CMS to access and deliver your content to your storefront project.  Notice that the VTEX Headless CMS typically works with **FastStore** projects only. In this case, you can use this API to fetch data using SSR (NextJS and Gatsby v4+) or SSG (NextJS).  **Servers** - `https://{account}.myvtex.com/` - `https://{workspace}--{account}.myvtex.com/`  **Server variables** - `accountName`: Name of your VTEX account. - `workspace`: Name of your VTEX workspace. 
 *
 * The version of the OpenAPI document: 0.31.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetAllContentTypes200Response from '../model/GetAllContentTypes200Response';
import GetCMSpage200Response from '../model/GetCMSpage200Response';
import GetPagesbyContentType200Response from '../model/GetPagesbyContentType200Response';

/**
* Pages service.
* @module api/PagesApi
* @version 0.31.2
*/
export default class PagesApi {

    /**
    * Constructs a new PagesApi. 
    * @alias module:api/PagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAllContentTypes operation.
     * @callback module:api/PagesApi~getAllContentTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllContentTypes200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Content Types
     * Gets data from all Content Types.
     * @param {String} builderId Builder ID specified in the settings of the CMS app.
     * @param {module:api/PagesApi~getAllContentTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllContentTypes200Response}
     */
    getAllContentTypes(builderId, callback) {
      let postBody = null;
      // verify the required parameter 'builderId' is set
      if (builderId === undefined || builderId === null) {
        throw new Error("Missing the required parameter 'builderId' when calling getAllContentTypes");
      }

      let pathParams = {
        'builderId': builderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllContentTypes200Response;
      return this.apiClient.callApi(
        '/_v/cms/api/{builderId}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCMSpage operation.
     * @callback module:api/PagesApi~getCMSpageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCMSpage200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CMS page
     * Gets all data from a given page.
     * @param {String} builderId Builder ID specified in the settings of the CMS app.
     * @param {String} contentType Content Type ID defined in the FastStore project.
     * @param {String} documentId Document ID presented in the URL path of a CMS preview.
     * @param {Object} opts Optional parameters
     * @param {String} [versionId] Version ID presented in the URL path of a CMS preview.
     * @param {String} [releaseId] Release ID presented in the URL path of a CMS preview.
     * @param {module:api/PagesApi~getCMSpageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCMSpage200Response}
     */
    getCMSpage(builderId, contentType, documentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'builderId' is set
      if (builderId === undefined || builderId === null) {
        throw new Error("Missing the required parameter 'builderId' when calling getCMSpage");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getCMSpage");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getCMSpage");
      }

      let pathParams = {
        'builderId': builderId,
        'content-type': contentType,
        'document-id': documentId
      };
      let queryParams = {
        'versionId': opts['versionId'],
        'releaseId': opts['releaseId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCMSpage200Response;
      return this.apiClient.callApi(
        '/_v/cms/api/{builderId}/{content-type}/{document-id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPagesbyContentType operation.
     * @callback module:api/PagesApi~getPagesbyContentTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPagesbyContentType200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all CMS pages by Content Type
     * Gets data from all pages of a given Content Type.
     * @param {String} builderId Builder ID specified in the settings of the CMS app.
     * @param {String} contentType Content Type identifier defined in the FastStore project.
     * @param {Object} opts Optional parameters
     * @param {String} [versionId] Version ID presented in the URL path of a CMS preview.
     * @param {String} [releaseId] Release ID presented in the URL path of a CMS preview.
     * @param {String} [filtersField] Filter results by a property of the page (e.g., `filters[status]`) or by a nested custom field of the `parameters` object (e.g., `filters[parameters.collection.sort]`). *Replace {field} with the desired property.*
     * @param {module:api/PagesApi~getPagesbyContentTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPagesbyContentType200Response}
     */
    getPagesbyContentType(builderId, contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'builderId' is set
      if (builderId === undefined || builderId === null) {
        throw new Error("Missing the required parameter 'builderId' when calling getPagesbyContentType");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getPagesbyContentType");
      }

      let pathParams = {
        'builderId': builderId,
        'content-type': contentType
      };
      let queryParams = {
        'versionId': opts['versionId'],
        'releaseId': opts['releaseId'],
        'filters[{field}]': opts['filtersField']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPagesbyContentType200Response;
      return this.apiClient.callApi(
        '/_v/cms/api/{builderId}/{content-type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
