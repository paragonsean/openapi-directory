/**
 * VTEX Headless CMS
 *  The VTEX Headless CMS is a no-code management system for storefront content.  That means you can store your content as structured data in a layer decoupled from the frontend and  use the VTEX Headless CMS to access and deliver your content to your storefront project.  Notice that the VTEX Headless CMS typically works with **FastStore** projects only. In this case, you can use this API to fetch data using SSR (NextJS and Gatsby v4+) or SSG (NextJS).  **Servers** - `https://{account}.myvtex.com/` - `https://{workspace}--{account}.myvtex.com/`  **Server variables** - `accountName`: Name of your VTEX account. - `workspace`: Name of your VTEX workspace. 
 *
 * The version of the OpenAPI document: 0.31.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import GetAllContentTypes200Response from './model/GetAllContentTypes200Response';
import GetAllContentTypes200ResponseContentTypesInner from './model/GetAllContentTypes200ResponseContentTypesInner';
import GetAllContentTypes200ResponseContentTypesInnerConfigurationSchemaSetsInner from './model/GetAllContentTypes200ResponseContentTypesInnerConfigurationSchemaSetsInner';
import GetCMSpage200Response from './model/GetCMSpage200Response';
import GetCMSpage200ResponseSectionsInner from './model/GetCMSpage200ResponseSectionsInner';
import GetPagesbyContentType200Response from './model/GetPagesbyContentType200Response';
import GetPagesbyContentType200ResponseDataInner from './model/GetPagesbyContentType200ResponseDataInner';
import GetPagesbyContentType200ResponseDataInnerSectionsInner from './model/GetPagesbyContentType200ResponseDataInnerSectionsInner';
import PagesApi from './api/PagesApi';


/**
*  The VTEX Headless CMS is a no-code management system for storefront content.  That means you can store your content as structured data in a layer decoupled from the frontend and  use the VTEX Headless CMS to access and deliver your content to your storefront project.  Notice that the VTEX Headless CMS typically works with **FastStore** projects only. In this case, you can use this API to fetch data using SSR (NextJS and Gatsby v4+) or SSG (NextJS).  **Servers** - &#x60;https://{account}.myvtex.com/&#x60; - &#x60;https://{workspace}--{account}.myvtex.com/&#x60;  **Server variables** - &#x60;accountName&#x60;: Name of your VTEX account. - &#x60;workspace&#x60;: Name of your VTEX workspace. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var VtexHeadlessCms = require('index'); // See note below*.
* var xxxSvc = new VtexHeadlessCms.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new VtexHeadlessCms.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new VtexHeadlessCms.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new VtexHeadlessCms.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.31.2
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The GetAllContentTypes200Response model constructor.
     * @property {module:model/GetAllContentTypes200Response}
     */
    GetAllContentTypes200Response,

    /**
     * The GetAllContentTypes200ResponseContentTypesInner model constructor.
     * @property {module:model/GetAllContentTypes200ResponseContentTypesInner}
     */
    GetAllContentTypes200ResponseContentTypesInner,

    /**
     * The GetAllContentTypes200ResponseContentTypesInnerConfigurationSchemaSetsInner model constructor.
     * @property {module:model/GetAllContentTypes200ResponseContentTypesInnerConfigurationSchemaSetsInner}
     */
    GetAllContentTypes200ResponseContentTypesInnerConfigurationSchemaSetsInner,

    /**
     * The GetCMSpage200Response model constructor.
     * @property {module:model/GetCMSpage200Response}
     */
    GetCMSpage200Response,

    /**
     * The GetCMSpage200ResponseSectionsInner model constructor.
     * @property {module:model/GetCMSpage200ResponseSectionsInner}
     */
    GetCMSpage200ResponseSectionsInner,

    /**
     * The GetPagesbyContentType200Response model constructor.
     * @property {module:model/GetPagesbyContentType200Response}
     */
    GetPagesbyContentType200Response,

    /**
     * The GetPagesbyContentType200ResponseDataInner model constructor.
     * @property {module:model/GetPagesbyContentType200ResponseDataInner}
     */
    GetPagesbyContentType200ResponseDataInner,

    /**
     * The GetPagesbyContentType200ResponseDataInnerSectionsInner model constructor.
     * @property {module:model/GetPagesbyContentType200ResponseDataInnerSectionsInner}
     */
    GetPagesbyContentType200ResponseDataInnerSectionsInner,

    /**
    * The PagesApi service constructor.
    * @property {module:api/PagesApi}
    */
    PagesApi
};
