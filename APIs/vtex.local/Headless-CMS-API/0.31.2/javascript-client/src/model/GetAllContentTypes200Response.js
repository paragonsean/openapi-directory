/**
 * VTEX Headless CMS
 *  The VTEX Headless CMS is a no-code management system for storefront content.  That means you can store your content as structured data in a layer decoupled from the frontend and  use the VTEX Headless CMS to access and deliver your content to your storefront project.  Notice that the VTEX Headless CMS typically works with **FastStore** projects only. In this case, you can use this API to fetch data using SSR (NextJS and Gatsby v4+) or SSG (NextJS).  **Servers** - `https://{account}.myvtex.com/` - `https://{workspace}--{account}.myvtex.com/`  **Server variables** - `accountName`: Name of your VTEX account. - `workspace`: Name of your VTEX workspace. 
 *
 * The version of the OpenAPI document: 0.31.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetAllContentTypes200ResponseContentTypesInner from './GetAllContentTypes200ResponseContentTypesInner';

/**
 * The GetAllContentTypes200Response model module.
 * @module model/GetAllContentTypes200Response
 * @version 0.31.2
 */
class GetAllContentTypes200Response {
    /**
     * Constructs a new <code>GetAllContentTypes200Response</code>.
     * 
     * @alias module:model/GetAllContentTypes200Response
     */
    constructor() { 
        
        GetAllContentTypes200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetAllContentTypes200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetAllContentTypes200Response} obj Optional instance to populate.
     * @return {module:model/GetAllContentTypes200Response} The populated <code>GetAllContentTypes200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetAllContentTypes200Response();

            if (data.hasOwnProperty('contentTypes')) {
                obj['contentTypes'] = ApiClient.convertToType(data['contentTypes'], [GetAllContentTypes200ResponseContentTypesInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetAllContentTypes200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetAllContentTypes200Response</code>.
     */
    static validateJSON(data) {
        if (data['contentTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contentTypes'])) {
                throw new Error("Expected the field `contentTypes` to be an array in the JSON data but got " + data['contentTypes']);
            }
            // validate the optional field `contentTypes` (array)
            for (const item of data['contentTypes']) {
                GetAllContentTypes200ResponseContentTypesInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Array with data of each Content Type.
 * @member {Array.<module:model/GetAllContentTypes200ResponseContentTypesInner>} contentTypes
 */
GetAllContentTypes200Response.prototype['contentTypes'] = undefined;






export default GetAllContentTypes200Response;

