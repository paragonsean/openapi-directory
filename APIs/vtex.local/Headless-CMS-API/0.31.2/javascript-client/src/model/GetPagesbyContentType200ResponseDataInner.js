/**
 * VTEX Headless CMS
 *  The VTEX Headless CMS is a no-code management system for storefront content.  That means you can store your content as structured data in a layer decoupled from the frontend and  use the VTEX Headless CMS to access and deliver your content to your storefront project.  Notice that the VTEX Headless CMS typically works with **FastStore** projects only. In this case, you can use this API to fetch data using SSR (NextJS and Gatsby v4+) or SSG (NextJS).  **Servers** - `https://{account}.myvtex.com/` - `https://{workspace}--{account}.myvtex.com/`  **Server variables** - `accountName`: Name of your VTEX account. - `workspace`: Name of your VTEX workspace. 
 *
 * The version of the OpenAPI document: 0.31.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetPagesbyContentType200ResponseDataInnerSectionsInner from './GetPagesbyContentType200ResponseDataInnerSectionsInner';

/**
 * The GetPagesbyContentType200ResponseDataInner model module.
 * @module model/GetPagesbyContentType200ResponseDataInner
 * @version 0.31.2
 */
class GetPagesbyContentType200ResponseDataInner {
    /**
     * Constructs a new <code>GetPagesbyContentType200ResponseDataInner</code>.
     * Object with data from a specific page.
     * @alias module:model/GetPagesbyContentType200ResponseDataInner
     */
    constructor() { 
        
        GetPagesbyContentType200ResponseDataInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetPagesbyContentType200ResponseDataInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetPagesbyContentType200ResponseDataInner} obj Optional instance to populate.
     * @return {module:model/GetPagesbyContentType200ResponseDataInner} The populated <code>GetPagesbyContentType200ResponseDataInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetPagesbyContentType200ResponseDataInner();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], Object);
            }
            if (data.hasOwnProperty('sections')) {
                obj['sections'] = ApiClient.convertToType(data['sections'], [GetPagesbyContentType200ResponseDataInnerSectionsInner]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('versionId')) {
                obj['versionId'] = ApiClient.convertToType(data['versionId'], 'String');
            }
            if (data.hasOwnProperty('versionStatus')) {
                obj['versionStatus'] = ApiClient.convertToType(data['versionStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetPagesbyContentType200ResponseDataInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetPagesbyContentType200ResponseDataInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['sections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sections'])) {
                throw new Error("Expected the field `sections` to be an array in the JSON data but got " + data['sections']);
            }
            // validate the optional field `sections` (array)
            for (const item of data['sections']) {
                GetPagesbyContentType200ResponseDataInnerSectionsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['versionId'] && !(typeof data['versionId'] === 'string' || data['versionId'] instanceof String)) {
            throw new Error("Expected the field `versionId` to be a primitive type in the JSON string but got " + data['versionId']);
        }
        // ensure the json data is a string
        if (data['versionStatus'] && !(typeof data['versionStatus'] === 'string' || data['versionStatus'] instanceof String)) {
            throw new Error("Expected the field `versionStatus` to be a primitive type in the JSON string but got " + data['versionStatus']);
        }

        return true;
    }


}



/**
 * Document ID presented in the URL path of a CMS preview.
 * @member {String} id
 */
GetPagesbyContentType200ResponseDataInner.prototype['id'] = undefined;

/**
 * Name of the page created via the CMS interface.
 * @member {String} name
 */
GetPagesbyContentType200ResponseDataInner.prototype['name'] = undefined;

/**
 * Object with the configuration values of a `configurationSchemaSets` tab. Varies depending on the Content Type schema defined in the FastStore project.
 * @member {Object} parameters
 */
GetPagesbyContentType200ResponseDataInner.prototype['parameters'] = undefined;

/**
 * Sections that compose the page.
 * @member {Array.<module:model/GetPagesbyContentType200ResponseDataInnerSectionsInner>} sections
 */
GetPagesbyContentType200ResponseDataInner.prototype['sections'] = undefined;

/**
 * Current status of the page.
 * @member {String} status
 */
GetPagesbyContentType200ResponseDataInner.prototype['status'] = undefined;

/**
 * Name of the Content Type defined in the FastStore project.
 * @member {String} type
 */
GetPagesbyContentType200ResponseDataInner.prototype['type'] = undefined;

/**
 * Version ID.
 * @member {String} versionId
 */
GetPagesbyContentType200ResponseDataInner.prototype['versionId'] = undefined;

/**
 * Version status.
 * @member {String} versionStatus
 */
GetPagesbyContentType200ResponseDataInner.prototype['versionStatus'] = undefined;






export default GetPagesbyContentType200ResponseDataInner;

