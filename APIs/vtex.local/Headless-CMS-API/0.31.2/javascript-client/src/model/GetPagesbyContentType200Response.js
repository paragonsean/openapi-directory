/**
 * VTEX Headless CMS
 *  The VTEX Headless CMS is a no-code management system for storefront content.  That means you can store your content as structured data in a layer decoupled from the frontend and  use the VTEX Headless CMS to access and deliver your content to your storefront project.  Notice that the VTEX Headless CMS typically works with **FastStore** projects only. In this case, you can use this API to fetch data using SSR (NextJS and Gatsby v4+) or SSG (NextJS).  **Servers** - `https://{account}.myvtex.com/` - `https://{workspace}--{account}.myvtex.com/`  **Server variables** - `accountName`: Name of your VTEX account. - `workspace`: Name of your VTEX workspace. 
 *
 * The version of the OpenAPI document: 0.31.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetPagesbyContentType200ResponseDataInner from './GetPagesbyContentType200ResponseDataInner';

/**
 * The GetPagesbyContentType200Response model module.
 * @module model/GetPagesbyContentType200Response
 * @version 0.31.2
 */
class GetPagesbyContentType200Response {
    /**
     * Constructs a new <code>GetPagesbyContentType200Response</code>.
     * 
     * @alias module:model/GetPagesbyContentType200Response
     */
    constructor() { 
        
        GetPagesbyContentType200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetPagesbyContentType200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetPagesbyContentType200Response} obj Optional instance to populate.
     * @return {module:model/GetPagesbyContentType200Response} The populated <code>GetPagesbyContentType200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetPagesbyContentType200Response();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [GetPagesbyContentType200ResponseDataInner]);
            }
            if (data.hasOwnProperty('hasNextPage')) {
                obj['hasNextPage'] = ApiClient.convertToType(data['hasNextPage'], 'Boolean');
            }
            if (data.hasOwnProperty('totalItems')) {
                obj['totalItems'] = ApiClient.convertToType(data['totalItems'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetPagesbyContentType200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetPagesbyContentType200Response</code>.
     */
    static validateJSON(data) {
        if (data['data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data'])) {
                throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
            }
            // validate the optional field `data` (array)
            for (const item of data['data']) {
                GetPagesbyContentType200ResponseDataInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Array with data from all pages of the given Content Type.
 * @member {Array.<module:model/GetPagesbyContentType200ResponseDataInner>} data
 */
GetPagesbyContentType200Response.prototype['data'] = undefined;

/**
 * Indicates if there are more items to fetch.
 * @member {Boolean} hasNextPage
 */
GetPagesbyContentType200Response.prototype['hasNextPage'] = undefined;

/**
 * Total number of results.
 * @member {Number} totalItems
 */
GetPagesbyContentType200Response.prototype['totalItems'] = undefined;






export default GetPagesbyContentType200Response;

