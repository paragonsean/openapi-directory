/*
 * VTEX Headless CMS
 *  The VTEX Headless CMS is a no-code management system for storefront content.  That means you can store your content as structured data in a layer decoupled from the frontend and  use the VTEX Headless CMS to access and deliver your content to your storefront project.  Notice that the VTEX Headless CMS typically works with **FastStore** projects only. In this case, you can use this API to fetch data using SSR (NextJS and Gatsby v4+) or SSG (NextJS).  **Servers** - `https://{account}.myvtex.com/` - `https://{workspace}--{account}.myvtex.com/`  **Server variables** - `accountName`: Name of your VTEX account. - `workspace`: Name of your VTEX workspace. 
 *
 * The version of the OpenAPI document: 0.31.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetAllContentTypes200Response;
import org.openapitools.client.model.GetCMSpage200Response;
import org.openapitools.client.model.GetPagesbyContentType200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PagesApi
 */
@Disabled
public class PagesApiTest {

    private final PagesApi api = new PagesApi();

    /**
     * Get all Content Types
     *
     * Gets data from all Content Types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllContentTypesTest() throws ApiException {
        String builderId = null;
        GetAllContentTypes200Response response = api.getAllContentTypes(builderId);
        // TODO: test validations
    }

    /**
     * Get CMS page
     *
     * Gets all data from a given page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCMSpageTest() throws ApiException {
        String builderId = null;
        String contentType = null;
        String documentId = null;
        String versionId = null;
        String releaseId = null;
        GetCMSpage200Response response = api.getCMSpage(builderId, contentType, documentId, versionId, releaseId);
        // TODO: test validations
    }

    /**
     * Get all CMS pages by Content Type
     *
     * Gets data from all pages of a given Content Type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPagesbyContentTypeTest() throws ApiException {
        String builderId = null;
        String contentType = null;
        String versionId = null;
        String releaseId = null;
        String filtersLeftCurlyBracketFieldRightCurlyBracket = null;
        GetPagesbyContentType200Response response = api.getPagesbyContentType(builderId, contentType, versionId, releaseId, filtersLeftCurlyBracketFieldRightCurlyBracket);
        // TODO: test validations
    }

}
