/*
 * VTEX Headless CMS
 *  The VTEX Headless CMS is a no-code management system for storefront content.  That means you can store your content as structured data in a layer decoupled from the frontend and  use the VTEX Headless CMS to access and deliver your content to your storefront project.  Notice that the VTEX Headless CMS typically works with **FastStore** projects only. In this case, you can use this API to fetch data using SSR (NextJS and Gatsby v4+) or SSG (NextJS).  **Servers** - `https://{account}.myvtex.com/` - `https://{workspace}--{account}.myvtex.com/`  **Server variables** - `accountName`: Name of your VTEX account. - `workspace`: Name of your VTEX workspace. 
 *
 * The version of the OpenAPI document: 0.31.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetAllContentTypes200Response;
import org.openapitools.client.model.GetCMSpage200Response;
import org.openapitools.client.model.GetPagesbyContentType200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAllContentTypes
     * @param builderId Builder ID specified in the settings of the CMS app. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllContentTypesCall(String builderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/_v/cms/api/{builderId}/"
            .replace("{" + "builderId" + "}", localVarApiClient.escapeString(builderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllContentTypesValidateBeforeCall(String builderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'builderId' is set
        if (builderId == null) {
            throw new ApiException("Missing the required parameter 'builderId' when calling getAllContentTypes(Async)");
        }

        return getAllContentTypesCall(builderId, _callback);

    }

    /**
     * Get all Content Types
     * Gets data from all Content Types.
     * @param builderId Builder ID specified in the settings of the CMS app. (required)
     * @return GetAllContentTypes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetAllContentTypes200Response getAllContentTypes(String builderId) throws ApiException {
        ApiResponse<GetAllContentTypes200Response> localVarResp = getAllContentTypesWithHttpInfo(builderId);
        return localVarResp.getData();
    }

    /**
     * Get all Content Types
     * Gets data from all Content Types.
     * @param builderId Builder ID specified in the settings of the CMS app. (required)
     * @return ApiResponse&lt;GetAllContentTypes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllContentTypes200Response> getAllContentTypesWithHttpInfo(String builderId) throws ApiException {
        okhttp3.Call localVarCall = getAllContentTypesValidateBeforeCall(builderId, null);
        Type localVarReturnType = new TypeToken<GetAllContentTypes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Content Types (asynchronously)
     * Gets data from all Content Types.
     * @param builderId Builder ID specified in the settings of the CMS app. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllContentTypesAsync(String builderId, final ApiCallback<GetAllContentTypes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllContentTypesValidateBeforeCall(builderId, _callback);
        Type localVarReturnType = new TypeToken<GetAllContentTypes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCMSpage
     * @param builderId Builder ID specified in the settings of the CMS app. (required)
     * @param contentType Content Type ID defined in the FastStore project. (required)
     * @param documentId Document ID presented in the URL path of a CMS preview. (required)
     * @param versionId Version ID presented in the URL path of a CMS preview. (optional)
     * @param releaseId Release ID presented in the URL path of a CMS preview. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCMSpageCall(String builderId, String contentType, String documentId, String versionId, String releaseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/_v/cms/api/{builderId}/{content-type}/{document-id}/"
            .replace("{" + "builderId" + "}", localVarApiClient.escapeString(builderId.toString()))
            .replace("{" + "content-type" + "}", localVarApiClient.escapeString(contentType.toString()))
            .replace("{" + "document-id" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (versionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("versionId", versionId));
        }

        if (releaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("releaseId", releaseId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCMSpageValidateBeforeCall(String builderId, String contentType, String documentId, String versionId, String releaseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'builderId' is set
        if (builderId == null) {
            throw new ApiException("Missing the required parameter 'builderId' when calling getCMSpage(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getCMSpage(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getCMSpage(Async)");
        }

        return getCMSpageCall(builderId, contentType, documentId, versionId, releaseId, _callback);

    }

    /**
     * Get CMS page
     * Gets all data from a given page.
     * @param builderId Builder ID specified in the settings of the CMS app. (required)
     * @param contentType Content Type ID defined in the FastStore project. (required)
     * @param documentId Document ID presented in the URL path of a CMS preview. (required)
     * @param versionId Version ID presented in the URL path of a CMS preview. (optional)
     * @param releaseId Release ID presented in the URL path of a CMS preview. (optional)
     * @return GetCMSpage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetCMSpage200Response getCMSpage(String builderId, String contentType, String documentId, String versionId, String releaseId) throws ApiException {
        ApiResponse<GetCMSpage200Response> localVarResp = getCMSpageWithHttpInfo(builderId, contentType, documentId, versionId, releaseId);
        return localVarResp.getData();
    }

    /**
     * Get CMS page
     * Gets all data from a given page.
     * @param builderId Builder ID specified in the settings of the CMS app. (required)
     * @param contentType Content Type ID defined in the FastStore project. (required)
     * @param documentId Document ID presented in the URL path of a CMS preview. (required)
     * @param versionId Version ID presented in the URL path of a CMS preview. (optional)
     * @param releaseId Release ID presented in the URL path of a CMS preview. (optional)
     * @return ApiResponse&lt;GetCMSpage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCMSpage200Response> getCMSpageWithHttpInfo(String builderId, String contentType, String documentId, String versionId, String releaseId) throws ApiException {
        okhttp3.Call localVarCall = getCMSpageValidateBeforeCall(builderId, contentType, documentId, versionId, releaseId, null);
        Type localVarReturnType = new TypeToken<GetCMSpage200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get CMS page (asynchronously)
     * Gets all data from a given page.
     * @param builderId Builder ID specified in the settings of the CMS app. (required)
     * @param contentType Content Type ID defined in the FastStore project. (required)
     * @param documentId Document ID presented in the URL path of a CMS preview. (required)
     * @param versionId Version ID presented in the URL path of a CMS preview. (optional)
     * @param releaseId Release ID presented in the URL path of a CMS preview. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCMSpageAsync(String builderId, String contentType, String documentId, String versionId, String releaseId, final ApiCallback<GetCMSpage200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCMSpageValidateBeforeCall(builderId, contentType, documentId, versionId, releaseId, _callback);
        Type localVarReturnType = new TypeToken<GetCMSpage200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPagesbyContentType
     * @param builderId Builder ID specified in the settings of the CMS app. (required)
     * @param contentType Content Type identifier defined in the FastStore project. (required)
     * @param versionId Version ID presented in the URL path of a CMS preview. (optional)
     * @param releaseId Release ID presented in the URL path of a CMS preview. (optional)
     * @param filtersLeftCurlyBracketFieldRightCurlyBracket Filter results by a property of the page (e.g., &#x60;filters[status]&#x60;) or by a nested custom field of the &#x60;parameters&#x60; object (e.g., &#x60;filters[parameters.collection.sort]&#x60;). *Replace {field} with the desired property.* (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesbyContentTypeCall(String builderId, String contentType, String versionId, String releaseId, String filtersLeftCurlyBracketFieldRightCurlyBracket, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/_v/cms/api/{builderId}/{content-type}"
            .replace("{" + "builderId" + "}", localVarApiClient.escapeString(builderId.toString()))
            .replace("{" + "content-type" + "}", localVarApiClient.escapeString(contentType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (versionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("versionId", versionId));
        }

        if (releaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("releaseId", releaseId));
        }

        if (filtersLeftCurlyBracketFieldRightCurlyBracket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters[{field}]", filtersLeftCurlyBracketFieldRightCurlyBracket));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPagesbyContentTypeValidateBeforeCall(String builderId, String contentType, String versionId, String releaseId, String filtersLeftCurlyBracketFieldRightCurlyBracket, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'builderId' is set
        if (builderId == null) {
            throw new ApiException("Missing the required parameter 'builderId' when calling getPagesbyContentType(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getPagesbyContentType(Async)");
        }

        return getPagesbyContentTypeCall(builderId, contentType, versionId, releaseId, filtersLeftCurlyBracketFieldRightCurlyBracket, _callback);

    }

    /**
     * Get all CMS pages by Content Type
     * Gets data from all pages of a given Content Type.
     * @param builderId Builder ID specified in the settings of the CMS app. (required)
     * @param contentType Content Type identifier defined in the FastStore project. (required)
     * @param versionId Version ID presented in the URL path of a CMS preview. (optional)
     * @param releaseId Release ID presented in the URL path of a CMS preview. (optional)
     * @param filtersLeftCurlyBracketFieldRightCurlyBracket Filter results by a property of the page (e.g., &#x60;filters[status]&#x60;) or by a nested custom field of the &#x60;parameters&#x60; object (e.g., &#x60;filters[parameters.collection.sort]&#x60;). *Replace {field} with the desired property.* (optional)
     * @return GetPagesbyContentType200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetPagesbyContentType200Response getPagesbyContentType(String builderId, String contentType, String versionId, String releaseId, String filtersLeftCurlyBracketFieldRightCurlyBracket) throws ApiException {
        ApiResponse<GetPagesbyContentType200Response> localVarResp = getPagesbyContentTypeWithHttpInfo(builderId, contentType, versionId, releaseId, filtersLeftCurlyBracketFieldRightCurlyBracket);
        return localVarResp.getData();
    }

    /**
     * Get all CMS pages by Content Type
     * Gets data from all pages of a given Content Type.
     * @param builderId Builder ID specified in the settings of the CMS app. (required)
     * @param contentType Content Type identifier defined in the FastStore project. (required)
     * @param versionId Version ID presented in the URL path of a CMS preview. (optional)
     * @param releaseId Release ID presented in the URL path of a CMS preview. (optional)
     * @param filtersLeftCurlyBracketFieldRightCurlyBracket Filter results by a property of the page (e.g., &#x60;filters[status]&#x60;) or by a nested custom field of the &#x60;parameters&#x60; object (e.g., &#x60;filters[parameters.collection.sort]&#x60;). *Replace {field} with the desired property.* (optional)
     * @return ApiResponse&lt;GetPagesbyContentType200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPagesbyContentType200Response> getPagesbyContentTypeWithHttpInfo(String builderId, String contentType, String versionId, String releaseId, String filtersLeftCurlyBracketFieldRightCurlyBracket) throws ApiException {
        okhttp3.Call localVarCall = getPagesbyContentTypeValidateBeforeCall(builderId, contentType, versionId, releaseId, filtersLeftCurlyBracketFieldRightCurlyBracket, null);
        Type localVarReturnType = new TypeToken<GetPagesbyContentType200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all CMS pages by Content Type (asynchronously)
     * Gets data from all pages of a given Content Type.
     * @param builderId Builder ID specified in the settings of the CMS app. (required)
     * @param contentType Content Type identifier defined in the FastStore project. (required)
     * @param versionId Version ID presented in the URL path of a CMS preview. (optional)
     * @param releaseId Release ID presented in the URL path of a CMS preview. (optional)
     * @param filtersLeftCurlyBracketFieldRightCurlyBracket Filter results by a property of the page (e.g., &#x60;filters[status]&#x60;) or by a nested custom field of the &#x60;parameters&#x60; object (e.g., &#x60;filters[parameters.collection.sort]&#x60;). *Replace {field} with the desired property.* (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPagesbyContentTypeAsync(String builderId, String contentType, String versionId, String releaseId, String filtersLeftCurlyBracketFieldRightCurlyBracket, final ApiCallback<GetPagesbyContentType200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPagesbyContentTypeValidateBeforeCall(builderId, contentType, versionId, releaseId, filtersLeftCurlyBracketFieldRightCurlyBracket, _callback);
        Type localVarReturnType = new TypeToken<GetPagesbyContentType200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
