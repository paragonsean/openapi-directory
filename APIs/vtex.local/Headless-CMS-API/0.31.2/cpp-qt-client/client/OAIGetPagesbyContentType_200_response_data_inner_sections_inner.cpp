/**
 * VTEX Headless CMS
 *  The VTEX Headless CMS is a no-code management system for storefront content.  That means you can store your content as structured data in a layer decoupled from the frontend and  use the VTEX Headless CMS to access and deliver your content to your storefront project.  Notice that the VTEX Headless CMS typically works with **FastStore** projects only. In this case, you can use this API to fetch data using SSR (NextJS and Gatsby v4+) or SSG (NextJS).  **Servers** - `https://{account}.myvtex.com/` - `https://{workspace}--{account}.myvtex.com/`  **Server variables** - `accountName`: Name of your VTEX account. - `workspace`: Name of your VTEX workspace. 
 *
 * The version of the OpenAPI document: 0.31.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPagesbyContentType_200_response_data_inner_sections_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPagesbyContentType_200_response_data_inner_sections_inner::OAIGetPagesbyContentType_200_response_data_inner_sections_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPagesbyContentType_200_response_data_inner_sections_inner::OAIGetPagesbyContentType_200_response_data_inner_sections_inner() {
    this->initializeModel();
}

OAIGetPagesbyContentType_200_response_data_inner_sections_inner::~OAIGetPagesbyContentType_200_response_data_inner_sections_inner() {}

void OAIGetPagesbyContentType_200_response_data_inner_sections_inner::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIGetPagesbyContentType_200_response_data_inner_sections_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPagesbyContentType_200_response_data_inner_sections_inner::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIGetPagesbyContentType_200_response_data_inner_sections_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPagesbyContentType_200_response_data_inner_sections_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAIObject OAIGetPagesbyContentType_200_response_data_inner_sections_inner::getData() const {
    return m_data;
}
void OAIGetPagesbyContentType_200_response_data_inner_sections_inner::setData(const OAIObject &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIGetPagesbyContentType_200_response_data_inner_sections_inner::is_data_Set() const{
    return m_data_isSet;
}

bool OAIGetPagesbyContentType_200_response_data_inner_sections_inner::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIGetPagesbyContentType_200_response_data_inner_sections_inner::getId() const {
    return m_id;
}
void OAIGetPagesbyContentType_200_response_data_inner_sections_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetPagesbyContentType_200_response_data_inner_sections_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetPagesbyContentType_200_response_data_inner_sections_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetPagesbyContentType_200_response_data_inner_sections_inner::getName() const {
    return m_name;
}
void OAIGetPagesbyContentType_200_response_data_inner_sections_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetPagesbyContentType_200_response_data_inner_sections_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetPagesbyContentType_200_response_data_inner_sections_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGetPagesbyContentType_200_response_data_inner_sections_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPagesbyContentType_200_response_data_inner_sections_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
