/**
 * VTEX Headless CMS
 *  The VTEX Headless CMS is a no-code management system for storefront content.  That means you can store your content as structured data in a layer decoupled from the frontend and  use the VTEX Headless CMS to access and deliver your content to your storefront project.  Notice that the VTEX Headless CMS typically works with **FastStore** projects only. In this case, you can use this API to fetch data using SSR (NextJS and Gatsby v4+) or SSG (NextJS).  **Servers** - `https://{account}.myvtex.com/` - `https://{workspace}--{account}.myvtex.com/`  **Server variables** - `accountName`: Name of your VTEX account. - `workspace`: Name of your VTEX workspace. 
 *
 * The version of the OpenAPI document: 0.31.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetPagesbyContentType_200_response.h
 *
 * 
 */

#ifndef OAIGetPagesbyContentType_200_response_H
#define OAIGetPagesbyContentType_200_response_H

#include <QJsonObject>

#include "OAIGetPagesbyContentType_200_response_data_inner.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetPagesbyContentType_200_response_data_inner;

class OAIGetPagesbyContentType_200_response : public OAIObject {
public:
    OAIGetPagesbyContentType_200_response();
    OAIGetPagesbyContentType_200_response(QString json);
    ~OAIGetPagesbyContentType_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIGetPagesbyContentType_200_response_data_inner> getData() const;
    void setData(const QList<OAIGetPagesbyContentType_200_response_data_inner> &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    bool isHasNextPage() const;
    void setHasNextPage(const bool &has_next_page);
    bool is_has_next_page_Set() const;
    bool is_has_next_page_Valid() const;

    qint32 getTotalItems() const;
    void setTotalItems(const qint32 &total_items);
    bool is_total_items_Set() const;
    bool is_total_items_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIGetPagesbyContentType_200_response_data_inner> m_data;
    bool m_data_isSet;
    bool m_data_isValid;

    bool m_has_next_page;
    bool m_has_next_page_isSet;
    bool m_has_next_page_isValid;

    qint32 m_total_items;
    bool m_total_items_isSet;
    bool m_total_items_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetPagesbyContentType_200_response)

#endif // OAIGetPagesbyContentType_200_response_H
