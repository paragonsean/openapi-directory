/**
 * VTEX Headless CMS
 *  The VTEX Headless CMS is a no-code management system for storefront content.  That means you can store your content as structured data in a layer decoupled from the frontend and  use the VTEX Headless CMS to access and deliver your content to your storefront project.  Notice that the VTEX Headless CMS typically works with **FastStore** projects only. In this case, you can use this API to fetch data using SSR (NextJS and Gatsby v4+) or SSG (NextJS).  **Servers** - `https://{account}.myvtex.com/` - `https://{workspace}--{account}.myvtex.com/`  **Server variables** - `accountName`: Name of your VTEX account. - `workspace`: Name of your VTEX workspace. 
 *
 * The version of the OpenAPI document: 0.31.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetAllContentTypes_200_response.h
 *
 * 
 */

#ifndef OAIGetAllContentTypes_200_response_H
#define OAIGetAllContentTypes_200_response_H

#include <QJsonObject>

#include "OAIGetAllContentTypes_200_response_contentTypes_inner.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetAllContentTypes_200_response_contentTypes_inner;

class OAIGetAllContentTypes_200_response : public OAIObject {
public:
    OAIGetAllContentTypes_200_response();
    OAIGetAllContentTypes_200_response(QString json);
    ~OAIGetAllContentTypes_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIGetAllContentTypes_200_response_contentTypes_inner> getContentTypes() const;
    void setContentTypes(const QList<OAIGetAllContentTypes_200_response_contentTypes_inner> &content_types);
    bool is_content_types_Set() const;
    bool is_content_types_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIGetAllContentTypes_200_response_contentTypes_inner> m_content_types;
    bool m_content_types_isSet;
    bool m_content_types_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetAllContentTypes_200_response)

#endif // OAIGetAllContentTypes_200_response_H
