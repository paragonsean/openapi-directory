/**
 * VTEX Headless CMS
 *  The VTEX Headless CMS is a no-code management system for storefront content.  That means you can store your content as structured data in a layer decoupled from the frontend and  use the VTEX Headless CMS to access and deliver your content to your storefront project.  Notice that the VTEX Headless CMS typically works with **FastStore** projects only. In this case, you can use this API to fetch data using SSR (NextJS and Gatsby v4+) or SSG (NextJS).  **Servers** - `https://{account}.myvtex.com/` - `https://{workspace}--{account}.myvtex.com/`  **Server variables** - `accountName`: Name of your VTEX account. - `workspace`: Name of your VTEX workspace. 
 *
 * The version of the OpenAPI document: 0.31.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetCMSpage_200_response.h
 *
 * Object containing the data related to a specific page.
 */

#ifndef OAIGetCMSpage_200_response_H
#define OAIGetCMSpage_200_response_H

#include <QJsonObject>

#include "OAIGetCMSpage_200_response_sections_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetCMSpage_200_response_sections_inner;

class OAIGetCMSpage_200_response : public OAIObject {
public:
    OAIGetCMSpage_200_response();
    OAIGetCMSpage_200_response(QString json);
    ~OAIGetCMSpage_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIGetCMSpage_200_response_sections_inner> getSections() const;
    void setSections(const QList<OAIGetCMSpage_200_response_sections_inner> &sections);
    bool is_sections_Set() const;
    bool is_sections_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getVersionId() const;
    void setVersionId(const QString &version_id);
    bool is_version_id_Set() const;
    bool is_version_id_Valid() const;

    QString getVersionStatus() const;
    void setVersionStatus(const QString &version_status);
    bool is_version_status_Set() const;
    bool is_version_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIGetCMSpage_200_response_sections_inner> m_sections;
    bool m_sections_isSet;
    bool m_sections_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_version_id;
    bool m_version_id_isSet;
    bool m_version_id_isValid;

    QString m_version_status;
    bool m_version_status_isSet;
    bool m_version_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetCMSpage_200_response)

#endif // OAIGetCMSpage_200_response_H
