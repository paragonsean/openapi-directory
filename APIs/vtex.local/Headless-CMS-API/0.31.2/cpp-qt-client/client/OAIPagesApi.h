/**
 * VTEX Headless CMS
 *  The VTEX Headless CMS is a no-code management system for storefront content.  That means you can store your content as structured data in a layer decoupled from the frontend and  use the VTEX Headless CMS to access and deliver your content to your storefront project.  Notice that the VTEX Headless CMS typically works with **FastStore** projects only. In this case, you can use this API to fetch data using SSR (NextJS and Gatsby v4+) or SSG (NextJS).  **Servers** - `https://{account}.myvtex.com/` - `https://{workspace}--{account}.myvtex.com/`  **Server variables** - `accountName`: Name of your VTEX account. - `workspace`: Name of your VTEX workspace. 
 *
 * The version of the OpenAPI document: 0.31.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPagesApi_H
#define OAI_OAIPagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetAllContentTypes_200_response.h"
#include "OAIGetCMSpage_200_response.h"
#include "OAIGetPagesbyContentType_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPagesApi : public QObject {
    Q_OBJECT

public:
    OAIPagesApi(const int timeOut = 0);
    ~OAIPagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  builder_id QString [required]
    */
    virtual void getAllContentTypes(const QString &builder_id);

    /**
    * @param[in]  builder_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  document_id QString [required]
    * @param[in]  version_id QString [optional]
    * @param[in]  release_id QString [optional]
    */
    virtual void getCMSpage(const QString &builder_id, const QString &content_type, const QString &document_id, const ::OpenAPI::OptionalParam<QString> &version_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &release_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  builder_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  version_id QString [optional]
    * @param[in]  release_id QString [optional]
    * @param[in]  filters_field QString [optional]
    */
    virtual void getPagesbyContentType(const QString &builder_id, const QString &content_type, const ::OpenAPI::OptionalParam<QString> &version_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &release_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filters_field = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAllContentTypesCallback(OAIHttpRequestWorker *worker);
    void getCMSpageCallback(OAIHttpRequestWorker *worker);
    void getPagesbyContentTypeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAllContentTypesSignal(OAIGetAllContentTypes_200_response summary);
    void getCMSpageSignal(OAIGetCMSpage_200_response summary);
    void getPagesbyContentTypeSignal(OAIGetPagesbyContentType_200_response summary);


    void getAllContentTypesSignalFull(OAIHttpRequestWorker *worker, OAIGetAllContentTypes_200_response summary);
    void getCMSpageSignalFull(OAIHttpRequestWorker *worker, OAIGetCMSpage_200_response summary);
    void getPagesbyContentTypeSignalFull(OAIHttpRequestWorker *worker, OAIGetPagesbyContentType_200_response summary);

    Q_DECL_DEPRECATED_X("Use getAllContentTypesSignalError() instead")
    void getAllContentTypesSignalE(OAIGetAllContentTypes_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllContentTypesSignalError(OAIGetAllContentTypes_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCMSpageSignalError() instead")
    void getCMSpageSignalE(OAIGetCMSpage_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCMSpageSignalError(OAIGetCMSpage_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPagesbyContentTypeSignalError() instead")
    void getPagesbyContentTypeSignalE(OAIGetPagesbyContentType_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPagesbyContentTypeSignalError(OAIGetPagesbyContentType_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAllContentTypesSignalErrorFull() instead")
    void getAllContentTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllContentTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCMSpageSignalErrorFull() instead")
    void getCMSpageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCMSpageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPagesbyContentTypeSignalErrorFull() instead")
    void getPagesbyContentTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPagesbyContentTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
