/**
 * VTEX Headless CMS
 *  The VTEX Headless CMS is a no-code management system for storefront content.  That means you can store your content as structured data in a layer decoupled from the frontend and  use the VTEX Headless CMS to access and deliver your content to your storefront project.  Notice that the VTEX Headless CMS typically works with **FastStore** projects only. In this case, you can use this API to fetch data using SSR (NextJS and Gatsby v4+) or SSG (NextJS).  **Servers** - `https://{account}.myvtex.com/` - `https://{workspace}--{account}.myvtex.com/`  **Server variables** - `accountName`: Name of your VTEX account. - `workspace`: Name of your VTEX workspace. 
 *
 * The version of the OpenAPI document: 0.31.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPagesbyContentType_200_response_data_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPagesbyContentType_200_response_data_inner::OAIGetPagesbyContentType_200_response_data_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPagesbyContentType_200_response_data_inner::OAIGetPagesbyContentType_200_response_data_inner() {
    this->initializeModel();
}

OAIGetPagesbyContentType_200_response_data_inner::~OAIGetPagesbyContentType_200_response_data_inner() {}

void OAIGetPagesbyContentType_200_response_data_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_sections_isSet = false;
    m_sections_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;

    m_version_status_isSet = false;
    m_version_status_isValid = false;
}

void OAIGetPagesbyContentType_200_response_data_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPagesbyContentType_200_response_data_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_sections_isValid = ::OpenAPI::fromJsonValue(m_sections, json[QString("sections")]);
    m_sections_isSet = !json[QString("sections")].isNull() && m_sections_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("versionId")]);
    m_version_id_isSet = !json[QString("versionId")].isNull() && m_version_id_isValid;

    m_version_status_isValid = ::OpenAPI::fromJsonValue(m_version_status, json[QString("versionStatus")]);
    m_version_status_isSet = !json[QString("versionStatus")].isNull() && m_version_status_isValid;
}

QString OAIGetPagesbyContentType_200_response_data_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPagesbyContentType_200_response_data_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_sections.size() > 0) {
        obj.insert(QString("sections"), ::OpenAPI::toJsonValue(m_sections));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("versionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    if (m_version_status_isSet) {
        obj.insert(QString("versionStatus"), ::OpenAPI::toJsonValue(m_version_status));
    }
    return obj;
}

QString OAIGetPagesbyContentType_200_response_data_inner::getId() const {
    return m_id;
}
void OAIGetPagesbyContentType_200_response_data_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetPagesbyContentType_200_response_data_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetPagesbyContentType_200_response_data_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetPagesbyContentType_200_response_data_inner::getName() const {
    return m_name;
}
void OAIGetPagesbyContentType_200_response_data_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetPagesbyContentType_200_response_data_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetPagesbyContentType_200_response_data_inner::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAIGetPagesbyContentType_200_response_data_inner::getParameters() const {
    return m_parameters;
}
void OAIGetPagesbyContentType_200_response_data_inner::setParameters(const OAIObject &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIGetPagesbyContentType_200_response_data_inner::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIGetPagesbyContentType_200_response_data_inner::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QList<OAIGetPagesbyContentType_200_response_data_inner_sections_inner> OAIGetPagesbyContentType_200_response_data_inner::getSections() const {
    return m_sections;
}
void OAIGetPagesbyContentType_200_response_data_inner::setSections(const QList<OAIGetPagesbyContentType_200_response_data_inner_sections_inner> &sections) {
    m_sections = sections;
    m_sections_isSet = true;
}

bool OAIGetPagesbyContentType_200_response_data_inner::is_sections_Set() const{
    return m_sections_isSet;
}

bool OAIGetPagesbyContentType_200_response_data_inner::is_sections_Valid() const{
    return m_sections_isValid;
}

QString OAIGetPagesbyContentType_200_response_data_inner::getStatus() const {
    return m_status;
}
void OAIGetPagesbyContentType_200_response_data_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetPagesbyContentType_200_response_data_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetPagesbyContentType_200_response_data_inner::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetPagesbyContentType_200_response_data_inner::getType() const {
    return m_type;
}
void OAIGetPagesbyContentType_200_response_data_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetPagesbyContentType_200_response_data_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetPagesbyContentType_200_response_data_inner::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGetPagesbyContentType_200_response_data_inner::getVersionId() const {
    return m_version_id;
}
void OAIGetPagesbyContentType_200_response_data_inner::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIGetPagesbyContentType_200_response_data_inner::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIGetPagesbyContentType_200_response_data_inner::is_version_id_Valid() const{
    return m_version_id_isValid;
}

QString OAIGetPagesbyContentType_200_response_data_inner::getVersionStatus() const {
    return m_version_status;
}
void OAIGetPagesbyContentType_200_response_data_inner::setVersionStatus(const QString &version_status) {
    m_version_status = version_status;
    m_version_status_isSet = true;
}

bool OAIGetPagesbyContentType_200_response_data_inner::is_version_status_Set() const{
    return m_version_status_isSet;
}

bool OAIGetPagesbyContentType_200_response_data_inner::is_version_status_Valid() const{
    return m_version_status_isValid;
}

bool OAIGetPagesbyContentType_200_response_data_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPagesbyContentType_200_response_data_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
