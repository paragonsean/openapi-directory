/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOption::OAIOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOption::OAIOption() {
    this->initializeModel();
}

OAIOption::~OAIOption() {}

void OAIOption::initializeModel() {

    m_interest_rate_isSet = false;
    m_interest_rate_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOption::fromJsonObject(QJsonObject json) {

    m_interest_rate_isValid = ::OpenAPI::fromJsonValue(m_interest_rate, json[QString("interestRate")]);
    m_interest_rate_isSet = !json[QString("interestRate")].isNull() && m_interest_rate_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOption::asJsonObject() const {
    QJsonObject obj;
    if (m_interest_rate_isSet) {
        obj.insert(QString("interestRate"), ::OpenAPI::toJsonValue(m_interest_rate));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

double OAIOption::getInterestRate() const {
    return m_interest_rate;
}
void OAIOption::setInterestRate(const double &interest_rate) {
    m_interest_rate = interest_rate;
    m_interest_rate_isSet = true;
}

bool OAIOption::is_interest_rate_Set() const{
    return m_interest_rate_isSet;
}

bool OAIOption::is_interest_rate_Valid() const{
    return m_interest_rate_isValid;
}

qint32 OAIOption::getQuantity() const {
    return m_quantity;
}
void OAIOption::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIOption::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIOption::is_quantity_Valid() const{
    return m_quantity_isValid;
}

double OAIOption::getValue() const {
    return m_value;
}
void OAIOption::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIOption::is_value_Set() const{
    return m_value_isSet;
}

bool OAIOption::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interest_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_interest_rate_isValid && m_quantity_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
