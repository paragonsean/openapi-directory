/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidator::OAIValidator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidator::OAIValidator() {
    this->initializeModel();
}

OAIValidator::~OAIValidator() {}

void OAIValidator::initializeModel() {

    m_card_code_mask_isSet = false;
    m_card_code_mask_isValid = false;

    m_card_code_regex_isSet = false;
    m_card_code_regex_isValid = false;

    m_mask_isSet = false;
    m_mask_isValid = false;

    m_regex_isSet = false;
    m_regex_isValid = false;

    m_use_billing_address_isSet = false;
    m_use_billing_address_isValid = false;

    m_use_card_holder_name_isSet = false;
    m_use_card_holder_name_isValid = false;

    m_use_cvv_isSet = false;
    m_use_cvv_isValid = false;

    m_use_expiration_date_isSet = false;
    m_use_expiration_date_isValid = false;

    m_valid_card_lengths_isSet = false;
    m_valid_card_lengths_isValid = false;

    m_weights_isSet = false;
    m_weights_isValid = false;
}

void OAIValidator::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidator::fromJsonObject(QJsonObject json) {

    m_card_code_mask_isValid = ::OpenAPI::fromJsonValue(m_card_code_mask, json[QString("cardCodeMask")]);
    m_card_code_mask_isSet = !json[QString("cardCodeMask")].isNull() && m_card_code_mask_isValid;

    m_card_code_regex_isValid = ::OpenAPI::fromJsonValue(m_card_code_regex, json[QString("cardCodeRegex")]);
    m_card_code_regex_isSet = !json[QString("cardCodeRegex")].isNull() && m_card_code_regex_isValid;

    m_mask_isValid = ::OpenAPI::fromJsonValue(m_mask, json[QString("mask")]);
    m_mask_isSet = !json[QString("mask")].isNull() && m_mask_isValid;

    m_regex_isValid = ::OpenAPI::fromJsonValue(m_regex, json[QString("regex")]);
    m_regex_isSet = !json[QString("regex")].isNull() && m_regex_isValid;

    m_use_billing_address_isValid = ::OpenAPI::fromJsonValue(m_use_billing_address, json[QString("useBillingAddress")]);
    m_use_billing_address_isSet = !json[QString("useBillingAddress")].isNull() && m_use_billing_address_isValid;

    m_use_card_holder_name_isValid = ::OpenAPI::fromJsonValue(m_use_card_holder_name, json[QString("useCardHolderName")]);
    m_use_card_holder_name_isSet = !json[QString("useCardHolderName")].isNull() && m_use_card_holder_name_isValid;

    m_use_cvv_isValid = ::OpenAPI::fromJsonValue(m_use_cvv, json[QString("useCvv")]);
    m_use_cvv_isSet = !json[QString("useCvv")].isNull() && m_use_cvv_isValid;

    m_use_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_use_expiration_date, json[QString("useExpirationDate")]);
    m_use_expiration_date_isSet = !json[QString("useExpirationDate")].isNull() && m_use_expiration_date_isValid;

    m_valid_card_lengths_isValid = ::OpenAPI::fromJsonValue(m_valid_card_lengths, json[QString("validCardLengths")]);
    m_valid_card_lengths_isSet = !json[QString("validCardLengths")].isNull() && m_valid_card_lengths_isValid;

    m_weights_isValid = ::OpenAPI::fromJsonValue(m_weights, json[QString("weights")]);
    m_weights_isSet = !json[QString("weights")].isNull() && m_weights_isValid;
}

QString OAIValidator::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidator::asJsonObject() const {
    QJsonObject obj;
    if (m_card_code_mask_isSet) {
        obj.insert(QString("cardCodeMask"), ::OpenAPI::toJsonValue(m_card_code_mask));
    }
    if (m_card_code_regex_isSet) {
        obj.insert(QString("cardCodeRegex"), ::OpenAPI::toJsonValue(m_card_code_regex));
    }
    if (m_mask_isSet) {
        obj.insert(QString("mask"), ::OpenAPI::toJsonValue(m_mask));
    }
    if (m_regex_isSet) {
        obj.insert(QString("regex"), ::OpenAPI::toJsonValue(m_regex));
    }
    if (m_use_billing_address_isSet) {
        obj.insert(QString("useBillingAddress"), ::OpenAPI::toJsonValue(m_use_billing_address));
    }
    if (m_use_card_holder_name_isSet) {
        obj.insert(QString("useCardHolderName"), ::OpenAPI::toJsonValue(m_use_card_holder_name));
    }
    if (m_use_cvv_isSet) {
        obj.insert(QString("useCvv"), ::OpenAPI::toJsonValue(m_use_cvv));
    }
    if (m_use_expiration_date_isSet) {
        obj.insert(QString("useExpirationDate"), ::OpenAPI::toJsonValue(m_use_expiration_date));
    }
    if (m_valid_card_lengths_isSet) {
        obj.insert(QString("validCardLengths"), ::OpenAPI::toJsonValue(m_valid_card_lengths));
    }
    if (m_weights.size() > 0) {
        obj.insert(QString("weights"), ::OpenAPI::toJsonValue(m_weights));
    }
    return obj;
}

QString OAIValidator::getCardCodeMask() const {
    return m_card_code_mask;
}
void OAIValidator::setCardCodeMask(const QString &card_code_mask) {
    m_card_code_mask = card_code_mask;
    m_card_code_mask_isSet = true;
}

bool OAIValidator::is_card_code_mask_Set() const{
    return m_card_code_mask_isSet;
}

bool OAIValidator::is_card_code_mask_Valid() const{
    return m_card_code_mask_isValid;
}

QString OAIValidator::getCardCodeRegex() const {
    return m_card_code_regex;
}
void OAIValidator::setCardCodeRegex(const QString &card_code_regex) {
    m_card_code_regex = card_code_regex;
    m_card_code_regex_isSet = true;
}

bool OAIValidator::is_card_code_regex_Set() const{
    return m_card_code_regex_isSet;
}

bool OAIValidator::is_card_code_regex_Valid() const{
    return m_card_code_regex_isValid;
}

QString OAIValidator::getMask() const {
    return m_mask;
}
void OAIValidator::setMask(const QString &mask) {
    m_mask = mask;
    m_mask_isSet = true;
}

bool OAIValidator::is_mask_Set() const{
    return m_mask_isSet;
}

bool OAIValidator::is_mask_Valid() const{
    return m_mask_isValid;
}

QString OAIValidator::getRegex() const {
    return m_regex;
}
void OAIValidator::setRegex(const QString &regex) {
    m_regex = regex;
    m_regex_isSet = true;
}

bool OAIValidator::is_regex_Set() const{
    return m_regex_isSet;
}

bool OAIValidator::is_regex_Valid() const{
    return m_regex_isValid;
}

bool OAIValidator::isUseBillingAddress() const {
    return m_use_billing_address;
}
void OAIValidator::setUseBillingAddress(const bool &use_billing_address) {
    m_use_billing_address = use_billing_address;
    m_use_billing_address_isSet = true;
}

bool OAIValidator::is_use_billing_address_Set() const{
    return m_use_billing_address_isSet;
}

bool OAIValidator::is_use_billing_address_Valid() const{
    return m_use_billing_address_isValid;
}

bool OAIValidator::isUseCardHolderName() const {
    return m_use_card_holder_name;
}
void OAIValidator::setUseCardHolderName(const bool &use_card_holder_name) {
    m_use_card_holder_name = use_card_holder_name;
    m_use_card_holder_name_isSet = true;
}

bool OAIValidator::is_use_card_holder_name_Set() const{
    return m_use_card_holder_name_isSet;
}

bool OAIValidator::is_use_card_holder_name_Valid() const{
    return m_use_card_holder_name_isValid;
}

bool OAIValidator::isUseCvv() const {
    return m_use_cvv;
}
void OAIValidator::setUseCvv(const bool &use_cvv) {
    m_use_cvv = use_cvv;
    m_use_cvv_isSet = true;
}

bool OAIValidator::is_use_cvv_Set() const{
    return m_use_cvv_isSet;
}

bool OAIValidator::is_use_cvv_Valid() const{
    return m_use_cvv_isValid;
}

bool OAIValidator::isUseExpirationDate() const {
    return m_use_expiration_date;
}
void OAIValidator::setUseExpirationDate(const bool &use_expiration_date) {
    m_use_expiration_date = use_expiration_date;
    m_use_expiration_date_isSet = true;
}

bool OAIValidator::is_use_expiration_date_Set() const{
    return m_use_expiration_date_isSet;
}

bool OAIValidator::is_use_expiration_date_Valid() const{
    return m_use_expiration_date_isValid;
}

QString OAIValidator::getValidCardLengths() const {
    return m_valid_card_lengths;
}
void OAIValidator::setValidCardLengths(const QString &valid_card_lengths) {
    m_valid_card_lengths = valid_card_lengths;
    m_valid_card_lengths_isSet = true;
}

bool OAIValidator::is_valid_card_lengths_Set() const{
    return m_valid_card_lengths_isSet;
}

bool OAIValidator::is_valid_card_lengths_Valid() const{
    return m_valid_card_lengths_isValid;
}

QList<qint32> OAIValidator::getWeights() const {
    return m_weights;
}
void OAIValidator::setWeights(const QList<qint32> &weights) {
    m_weights = weights;
    m_weights_isSet = true;
}

bool OAIValidator::is_weights_Set() const{
    return m_weights_isSet;
}

bool OAIValidator::is_weights_Valid() const{
    return m_weights_isValid;
}

bool OAIValidator::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_code_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_code_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_billing_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_card_holder_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_cvv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_card_lengths_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weights.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidator::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_card_code_mask_isValid && m_card_code_regex_isValid && m_mask_isValid && m_regex_isValid && m_use_billing_address_isValid && m_use_card_holder_name_isValid && m_use_cvv_isValid && m_use_expiration_date_isValid && m_valid_card_lengths_isValid && m_weights_isValid && true;
}

} // namespace OpenAPI
