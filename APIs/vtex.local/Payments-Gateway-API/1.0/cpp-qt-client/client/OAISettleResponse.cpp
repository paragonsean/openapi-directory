/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISettleResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISettleResponse::OAISettleResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISettleResponse::OAISettleResponse() {
    this->initializeModel();
}

OAISettleResponse::~OAISettleResponse() {}

void OAISettleResponse::initializeModel() {

    m_cancelled_value_isSet = false;
    m_cancelled_value_isValid = false;

    m_connector_refunded_value_isSet = false;
    m_connector_refunded_value_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_processing_date_isSet = false;
    m_processing_date_isValid = false;

    m_refunded_token_isSet = false;
    m_refunded_token_isValid = false;

    m_refunded_value_isSet = false;
    m_refunded_value_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_detail_isSet = false;
    m_status_detail_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAISettleResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISettleResponse::fromJsonObject(QJsonObject json) {

    m_cancelled_value_isValid = ::OpenAPI::fromJsonValue(m_cancelled_value, json[QString("cancelledValue")]);
    m_cancelled_value_isSet = !json[QString("cancelledValue")].isNull() && m_cancelled_value_isValid;

    m_connector_refunded_value_isValid = ::OpenAPI::fromJsonValue(m_connector_refunded_value, json[QString("connectorRefundedValue")]);
    m_connector_refunded_value_isSet = !json[QString("connectorRefundedValue")].isNull() && m_connector_refunded_value_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_processing_date_isValid = ::OpenAPI::fromJsonValue(m_processing_date, json[QString("processingDate")]);
    m_processing_date_isSet = !json[QString("processingDate")].isNull() && m_processing_date_isValid;

    m_refunded_token_isValid = ::OpenAPI::fromJsonValue(m_refunded_token, json[QString("refundedToken")]);
    m_refunded_token_isSet = !json[QString("refundedToken")].isNull() && m_refunded_token_isValid;

    m_refunded_value_isValid = ::OpenAPI::fromJsonValue(m_refunded_value, json[QString("refundedValue")]);
    m_refunded_value_isSet = !json[QString("refundedValue")].isNull() && m_refunded_value_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_detail_isValid = ::OpenAPI::fromJsonValue(m_status_detail, json[QString("statusDetail")]);
    m_status_detail_isSet = !json[QString("statusDetail")].isNull() && m_status_detail_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAISettleResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISettleResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_cancelled_value_isSet) {
        obj.insert(QString("cancelledValue"), ::OpenAPI::toJsonValue(m_cancelled_value));
    }
    if (m_connector_refunded_value_isSet) {
        obj.insert(QString("connectorRefundedValue"), ::OpenAPI::toJsonValue(m_connector_refunded_value));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_processing_date_isSet) {
        obj.insert(QString("processingDate"), ::OpenAPI::toJsonValue(m_processing_date));
    }
    if (m_refunded_token_isSet) {
        obj.insert(QString("refundedToken"), ::OpenAPI::toJsonValue(m_refunded_token));
    }
    if (m_refunded_value_isSet) {
        obj.insert(QString("refundedValue"), ::OpenAPI::toJsonValue(m_refunded_value));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_detail_isSet) {
        obj.insert(QString("statusDetail"), ::OpenAPI::toJsonValue(m_status_detail));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

qint32 OAISettleResponse::getCancelledValue() const {
    return m_cancelled_value;
}
void OAISettleResponse::setCancelledValue(const qint32 &cancelled_value) {
    m_cancelled_value = cancelled_value;
    m_cancelled_value_isSet = true;
}

bool OAISettleResponse::is_cancelled_value_Set() const{
    return m_cancelled_value_isSet;
}

bool OAISettleResponse::is_cancelled_value_Valid() const{
    return m_cancelled_value_isValid;
}

qint32 OAISettleResponse::getConnectorRefundedValue() const {
    return m_connector_refunded_value;
}
void OAISettleResponse::setConnectorRefundedValue(const qint32 &connector_refunded_value) {
    m_connector_refunded_value = connector_refunded_value;
    m_connector_refunded_value_isSet = true;
}

bool OAISettleResponse::is_connector_refunded_value_Set() const{
    return m_connector_refunded_value_isSet;
}

bool OAISettleResponse::is_connector_refunded_value_Valid() const{
    return m_connector_refunded_value_isValid;
}

QString OAISettleResponse::getMessage() const {
    return m_message;
}
void OAISettleResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAISettleResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAISettleResponse::is_message_Valid() const{
    return m_message_isValid;
}

QString OAISettleResponse::getProcessingDate() const {
    return m_processing_date;
}
void OAISettleResponse::setProcessingDate(const QString &processing_date) {
    m_processing_date = processing_date;
    m_processing_date_isSet = true;
}

bool OAISettleResponse::is_processing_date_Set() const{
    return m_processing_date_isSet;
}

bool OAISettleResponse::is_processing_date_Valid() const{
    return m_processing_date_isValid;
}

QString OAISettleResponse::getRefundedToken() const {
    return m_refunded_token;
}
void OAISettleResponse::setRefundedToken(const QString &refunded_token) {
    m_refunded_token = refunded_token;
    m_refunded_token_isSet = true;
}

bool OAISettleResponse::is_refunded_token_Set() const{
    return m_refunded_token_isSet;
}

bool OAISettleResponse::is_refunded_token_Valid() const{
    return m_refunded_token_isValid;
}

qint32 OAISettleResponse::getRefundedValue() const {
    return m_refunded_value;
}
void OAISettleResponse::setRefundedValue(const qint32 &refunded_value) {
    m_refunded_value = refunded_value;
    m_refunded_value_isSet = true;
}

bool OAISettleResponse::is_refunded_value_Set() const{
    return m_refunded_value_isSet;
}

bool OAISettleResponse::is_refunded_value_Valid() const{
    return m_refunded_value_isValid;
}

qint32 OAISettleResponse::getStatus() const {
    return m_status;
}
void OAISettleResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISettleResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAISettleResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISettleResponse::getStatusDetail() const {
    return m_status_detail;
}
void OAISettleResponse::setStatusDetail(const QString &status_detail) {
    m_status_detail = status_detail;
    m_status_detail_isSet = true;
}

bool OAISettleResponse::is_status_detail_Set() const{
    return m_status_detail_isSet;
}

bool OAISettleResponse::is_status_detail_Valid() const{
    return m_status_detail_isValid;
}

QString OAISettleResponse::getToken() const {
    return m_token;
}
void OAISettleResponse::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAISettleResponse::is_token_Set() const{
    return m_token_isSet;
}

bool OAISettleResponse::is_token_Valid() const{
    return m_token_isValid;
}

bool OAISettleResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancelled_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_refunded_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISettleResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cancelled_value_isValid && m_connector_refunded_value_isValid && m_message_isValid && m_processing_date_isValid && m_refunded_token_isValid && m_refunded_value_isValid && m_status_isValid && m_status_detail_isValid && m_token_isValid && true;
}

} // namespace OpenAPI
