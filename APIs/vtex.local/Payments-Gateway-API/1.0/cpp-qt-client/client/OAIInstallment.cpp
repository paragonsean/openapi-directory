/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstallment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstallment::OAIInstallment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstallment::OAIInstallment() {
    this->initializeModel();
}

OAIInstallment::~OAIInstallment() {}

void OAIInstallment::initializeModel() {

    m_options_isSet = false;
    m_options_isValid = false;

    m_payment_isSet = false;
    m_payment_isValid = false;
}

void OAIInstallment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstallment::fromJsonObject(QJsonObject json) {

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_payment_isValid = ::OpenAPI::fromJsonValue(m_payment, json[QString("payment")]);
    m_payment_isSet = !json[QString("payment")].isNull() && m_payment_isValid;
}

QString OAIInstallment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstallment::asJsonObject() const {
    QJsonObject obj;
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_payment.isSet()) {
        obj.insert(QString("payment"), ::OpenAPI::toJsonValue(m_payment));
    }
    return obj;
}

QList<OAIOption> OAIInstallment::getOptions() const {
    return m_options;
}
void OAIInstallment::setOptions(const QList<OAIOption> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIInstallment::is_options_Set() const{
    return m_options_isSet;
}

bool OAIInstallment::is_options_Valid() const{
    return m_options_isValid;
}

OAIPayment OAIInstallment::getPayment() const {
    return m_payment;
}
void OAIInstallment::setPayment(const OAIPayment &payment) {
    m_payment = payment;
    m_payment_isSet = true;
}

bool OAIInstallment::is_payment_Set() const{
    return m_payment_isSet;
}

bool OAIInstallment::is_payment_Valid() const{
    return m_payment_isValid;
}

bool OAIInstallment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstallment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_options_isValid && m_payment_isValid && true;
}

} // namespace OpenAPI
