/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransactionFlowApi_H
#define OAI_OAITransactionFlowApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICancelthetransactionRequest.h"
#include "OAIRefundthetransactionRequest.h"
#include "OAISettleResponse.h"
#include "OAISettlethetransactionRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransactionFlowApi : public QObject {
    Q_OBJECT

public:
    OAITransactionFlowApi(const int timeOut = 0);
    ~OAITransactionFlowApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  transaction_id QString [required]
    * @param[in]  oai_cancelthetransaction_request OAICancelthetransactionRequest [required]
    */
    virtual void cancelthetransaction(const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &accept, const QString &content_type, const QString &transaction_id, const OAICancelthetransactionRequest &oai_cancelthetransaction_request);

    /**
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  transaction_id QString [required]
    * @param[in]  oai_refundthetransaction_request OAIRefundthetransactionRequest [required]
    */
    virtual void refundthetransaction(const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &accept, const QString &content_type, const QString &transaction_id, const OAIRefundthetransactionRequest &oai_refundthetransaction_request);

    /**
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  transaction_id QString [required]
    * @param[in]  oai_settlethetransaction_request OAISettlethetransactionRequest [required]
    */
    virtual void settlethetransaction(const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &accept, const QString &content_type, const QString &transaction_id, const OAISettlethetransactionRequest &oai_settlethetransaction_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelthetransactionCallback(OAIHttpRequestWorker *worker);
    void refundthetransactionCallback(OAIHttpRequestWorker *worker);
    void settlethetransactionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelthetransactionSignal();
    void refundthetransactionSignal();
    void settlethetransactionSignal(OAISettleResponse summary);


    void cancelthetransactionSignalFull(OAIHttpRequestWorker *worker);
    void refundthetransactionSignalFull(OAIHttpRequestWorker *worker);
    void settlethetransactionSignalFull(OAIHttpRequestWorker *worker, OAISettleResponse summary);

    Q_DECL_DEPRECATED_X("Use cancelthetransactionSignalError() instead")
    void cancelthetransactionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelthetransactionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refundthetransactionSignalError() instead")
    void refundthetransactionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void refundthetransactionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settlethetransactionSignalError() instead")
    void settlethetransactionSignalE(OAISettleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void settlethetransactionSignalError(OAISettleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelthetransactionSignalErrorFull() instead")
    void cancelthetransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelthetransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refundthetransactionSignalErrorFull() instead")
    void refundthetransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void refundthetransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settlethetransactionSignalErrorFull() instead")
    void settlethetransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void settlethetransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
