/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionDetailsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionDetailsResponse::OAITransactionDetailsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionDetailsResponse::OAITransactionDetailsResponse() {
    this->initializeModel();
}

OAITransactionDetailsResponse::~OAITransactionDetailsResponse() {}

void OAITransactionDetailsResponse::initializeModel() {

    m_accept_header_isSet = false;
    m_accept_header_isValid = false;

    m_antifraud_affiliation_id_isSet = false;
    m_antifraud_affiliation_id_isValid = false;

    m_antifraud_tid_isSet = false;
    m_antifraud_tid_isValid = false;

    m_authorization_date_isSet = false;
    m_authorization_date_isValid = false;

    m_authorization_token_isSet = false;
    m_authorization_token_isValid = false;

    m_buyer_isSet = false;
    m_buyer_isValid = false;

    m_cancelation_date_isSet = false;
    m_cancelation_date_isValid = false;

    m_cancelation_token_isSet = false;
    m_cancelation_token_isValid = false;

    m_cancellations_isSet = false;
    m_cancellations_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_commitment_date_isSet = false;
    m_commitment_date_isValid = false;

    m_commitment_token_isSet = false;
    m_commitment_token_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interactions_isSet = false;
    m_interactions_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_marked_for_recurrence_isSet = false;
    m_marked_for_recurrence_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_payments_isSet = false;
    m_payments_isValid = false;

    m_receiver_uri_isSet = false;
    m_receiver_uri_isValid = false;

    m_reference_key_isSet = false;
    m_reference_key_isValid = false;

    m_refunding_date_isSet = false;
    m_refunding_date_isValid = false;

    m_refunding_token_isSet = false;
    m_refunding_token_isValid = false;

    m_refunds_isSet = false;
    m_refunds_isValid = false;

    m_sales_channel_isSet = false;
    m_sales_channel_isValid = false;

    m_settlements_isSet = false;
    m_settlements_isValid = false;

    m_soft_descriptor_isSet = false;
    m_soft_descriptor_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timeout_status_isSet = false;
    m_timeout_status_isValid = false;

    m_total_refunds_isSet = false;
    m_total_refunds_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_urn_isSet = false;
    m_urn_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAITransactionDetailsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionDetailsResponse::fromJsonObject(QJsonObject json) {

    m_accept_header_isValid = ::OpenAPI::fromJsonValue(m_accept_header, json[QString("acceptHeader")]);
    m_accept_header_isSet = !json[QString("acceptHeader")].isNull() && m_accept_header_isValid;

    m_antifraud_affiliation_id_isValid = ::OpenAPI::fromJsonValue(m_antifraud_affiliation_id, json[QString("antifraudAffiliationId")]);
    m_antifraud_affiliation_id_isSet = !json[QString("antifraudAffiliationId")].isNull() && m_antifraud_affiliation_id_isValid;

    m_antifraud_tid_isValid = ::OpenAPI::fromJsonValue(m_antifraud_tid, json[QString("antifraudTid")]);
    m_antifraud_tid_isSet = !json[QString("antifraudTid")].isNull() && m_antifraud_tid_isValid;

    m_authorization_date_isValid = ::OpenAPI::fromJsonValue(m_authorization_date, json[QString("authorizationDate")]);
    m_authorization_date_isSet = !json[QString("authorizationDate")].isNull() && m_authorization_date_isValid;

    m_authorization_token_isValid = ::OpenAPI::fromJsonValue(m_authorization_token, json[QString("authorizationToken")]);
    m_authorization_token_isSet = !json[QString("authorizationToken")].isNull() && m_authorization_token_isValid;

    m_buyer_isValid = ::OpenAPI::fromJsonValue(m_buyer, json[QString("buyer")]);
    m_buyer_isSet = !json[QString("buyer")].isNull() && m_buyer_isValid;

    m_cancelation_date_isValid = ::OpenAPI::fromJsonValue(m_cancelation_date, json[QString("cancelationDate")]);
    m_cancelation_date_isSet = !json[QString("cancelationDate")].isNull() && m_cancelation_date_isValid;

    m_cancelation_token_isValid = ::OpenAPI::fromJsonValue(m_cancelation_token, json[QString("cancelationToken")]);
    m_cancelation_token_isSet = !json[QString("cancelationToken")].isNull() && m_cancelation_token_isValid;

    m_cancellations_isValid = ::OpenAPI::fromJsonValue(m_cancellations, json[QString("cancellations")]);
    m_cancellations_isSet = !json[QString("cancellations")].isNull() && m_cancellations_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_commitment_date_isValid = ::OpenAPI::fromJsonValue(m_commitment_date, json[QString("commitmentDate")]);
    m_commitment_date_isSet = !json[QString("commitmentDate")].isNull() && m_commitment_date_isValid;

    m_commitment_token_isValid = ::OpenAPI::fromJsonValue(m_commitment_token, json[QString("commitmentToken")]);
    m_commitment_token_isSet = !json[QString("commitmentToken")].isNull() && m_commitment_token_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interactions_isValid = ::OpenAPI::fromJsonValue(m_interactions, json[QString("interactions")]);
    m_interactions_isSet = !json[QString("interactions")].isNull() && m_interactions_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_marked_for_recurrence_isValid = ::OpenAPI::fromJsonValue(m_marked_for_recurrence, json[QString("markedForRecurrence")]);
    m_marked_for_recurrence_isSet = !json[QString("markedForRecurrence")].isNull() && m_marked_for_recurrence_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_payments_isValid = ::OpenAPI::fromJsonValue(m_payments, json[QString("payments")]);
    m_payments_isSet = !json[QString("payments")].isNull() && m_payments_isValid;

    m_receiver_uri_isValid = ::OpenAPI::fromJsonValue(m_receiver_uri, json[QString("receiverUri")]);
    m_receiver_uri_isSet = !json[QString("receiverUri")].isNull() && m_receiver_uri_isValid;

    m_reference_key_isValid = ::OpenAPI::fromJsonValue(m_reference_key, json[QString("referenceKey")]);
    m_reference_key_isSet = !json[QString("referenceKey")].isNull() && m_reference_key_isValid;

    m_refunding_date_isValid = ::OpenAPI::fromJsonValue(m_refunding_date, json[QString("refundingDate")]);
    m_refunding_date_isSet = !json[QString("refundingDate")].isNull() && m_refunding_date_isValid;

    m_refunding_token_isValid = ::OpenAPI::fromJsonValue(m_refunding_token, json[QString("refundingToken")]);
    m_refunding_token_isSet = !json[QString("refundingToken")].isNull() && m_refunding_token_isValid;

    m_refunds_isValid = ::OpenAPI::fromJsonValue(m_refunds, json[QString("refunds")]);
    m_refunds_isSet = !json[QString("refunds")].isNull() && m_refunds_isValid;

    m_sales_channel_isValid = ::OpenAPI::fromJsonValue(m_sales_channel, json[QString("salesChannel")]);
    m_sales_channel_isSet = !json[QString("salesChannel")].isNull() && m_sales_channel_isValid;

    m_settlements_isValid = ::OpenAPI::fromJsonValue(m_settlements, json[QString("settlements")]);
    m_settlements_isSet = !json[QString("settlements")].isNull() && m_settlements_isValid;

    m_soft_descriptor_isValid = ::OpenAPI::fromJsonValue(m_soft_descriptor, json[QString("softDescriptor")]);
    m_soft_descriptor_isSet = !json[QString("softDescriptor")].isNull() && m_soft_descriptor_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timeout_status_isValid = ::OpenAPI::fromJsonValue(m_timeout_status, json[QString("timeoutStatus")]);
    m_timeout_status_isSet = !json[QString("timeoutStatus")].isNull() && m_timeout_status_isValid;

    m_total_refunds_isValid = ::OpenAPI::fromJsonValue(m_total_refunds, json[QString("totalRefunds")]);
    m_total_refunds_isSet = !json[QString("totalRefunds")].isNull() && m_total_refunds_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transactionId")]);
    m_transaction_id_isSet = !json[QString("transactionId")].isNull() && m_transaction_id_isValid;

    m_urn_isValid = ::OpenAPI::fromJsonValue(m_urn, json[QString("urn")]);
    m_urn_isSet = !json[QString("urn")].isNull() && m_urn_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("userAgent")]);
    m_user_agent_isSet = !json[QString("userAgent")].isNull() && m_user_agent_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAITransactionDetailsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionDetailsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_header_isSet) {
        obj.insert(QString("acceptHeader"), ::OpenAPI::toJsonValue(m_accept_header));
    }
    if (m_antifraud_affiliation_id_isSet) {
        obj.insert(QString("antifraudAffiliationId"), ::OpenAPI::toJsonValue(m_antifraud_affiliation_id));
    }
    if (m_antifraud_tid_isSet) {
        obj.insert(QString("antifraudTid"), ::OpenAPI::toJsonValue(m_antifraud_tid));
    }
    if (m_authorization_date_isSet) {
        obj.insert(QString("authorizationDate"), ::OpenAPI::toJsonValue(m_authorization_date));
    }
    if (m_authorization_token_isSet) {
        obj.insert(QString("authorizationToken"), ::OpenAPI::toJsonValue(m_authorization_token));
    }
    if (m_buyer_isSet) {
        obj.insert(QString("buyer"), ::OpenAPI::toJsonValue(m_buyer));
    }
    if (m_cancelation_date_isSet) {
        obj.insert(QString("cancelationDate"), ::OpenAPI::toJsonValue(m_cancelation_date));
    }
    if (m_cancelation_token_isSet) {
        obj.insert(QString("cancelationToken"), ::OpenAPI::toJsonValue(m_cancelation_token));
    }
    if (m_cancellations.isSet()) {
        obj.insert(QString("cancellations"), ::OpenAPI::toJsonValue(m_cancellations));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_commitment_date_isSet) {
        obj.insert(QString("commitmentDate"), ::OpenAPI::toJsonValue(m_commitment_date));
    }
    if (m_commitment_token_isSet) {
        obj.insert(QString("commitmentToken"), ::OpenAPI::toJsonValue(m_commitment_token));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interactions.isSet()) {
        obj.insert(QString("interactions"), ::OpenAPI::toJsonValue(m_interactions));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_marked_for_recurrence_isSet) {
        obj.insert(QString("markedForRecurrence"), ::OpenAPI::toJsonValue(m_marked_for_recurrence));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_payments.isSet()) {
        obj.insert(QString("payments"), ::OpenAPI::toJsonValue(m_payments));
    }
    if (m_receiver_uri_isSet) {
        obj.insert(QString("receiverUri"), ::OpenAPI::toJsonValue(m_receiver_uri));
    }
    if (m_reference_key_isSet) {
        obj.insert(QString("referenceKey"), ::OpenAPI::toJsonValue(m_reference_key));
    }
    if (m_refunding_date_isSet) {
        obj.insert(QString("refundingDate"), ::OpenAPI::toJsonValue(m_refunding_date));
    }
    if (m_refunding_token_isSet) {
        obj.insert(QString("refundingToken"), ::OpenAPI::toJsonValue(m_refunding_token));
    }
    if (m_refunds.isSet()) {
        obj.insert(QString("refunds"), ::OpenAPI::toJsonValue(m_refunds));
    }
    if (m_sales_channel_isSet) {
        obj.insert(QString("salesChannel"), ::OpenAPI::toJsonValue(m_sales_channel));
    }
    if (m_settlements.isSet()) {
        obj.insert(QString("settlements"), ::OpenAPI::toJsonValue(m_settlements));
    }
    if (m_soft_descriptor_isSet) {
        obj.insert(QString("softDescriptor"), ::OpenAPI::toJsonValue(m_soft_descriptor));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timeout_status_isSet) {
        obj.insert(QString("timeoutStatus"), ::OpenAPI::toJsonValue(m_timeout_status));
    }
    if (m_total_refunds_isSet) {
        obj.insert(QString("totalRefunds"), ::OpenAPI::toJsonValue(m_total_refunds));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_urn_isSet) {
        obj.insert(QString("urn"), ::OpenAPI::toJsonValue(m_urn));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("userAgent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAITransactionDetailsResponse::getAcceptHeader() const {
    return m_accept_header;
}
void OAITransactionDetailsResponse::setAcceptHeader(const QString &accept_header) {
    m_accept_header = accept_header;
    m_accept_header_isSet = true;
}

bool OAITransactionDetailsResponse::is_accept_header_Set() const{
    return m_accept_header_isSet;
}

bool OAITransactionDetailsResponse::is_accept_header_Valid() const{
    return m_accept_header_isValid;
}

QString OAITransactionDetailsResponse::getAntifraudAffiliationId() const {
    return m_antifraud_affiliation_id;
}
void OAITransactionDetailsResponse::setAntifraudAffiliationId(const QString &antifraud_affiliation_id) {
    m_antifraud_affiliation_id = antifraud_affiliation_id;
    m_antifraud_affiliation_id_isSet = true;
}

bool OAITransactionDetailsResponse::is_antifraud_affiliation_id_Set() const{
    return m_antifraud_affiliation_id_isSet;
}

bool OAITransactionDetailsResponse::is_antifraud_affiliation_id_Valid() const{
    return m_antifraud_affiliation_id_isValid;
}

QString OAITransactionDetailsResponse::getAntifraudTid() const {
    return m_antifraud_tid;
}
void OAITransactionDetailsResponse::setAntifraudTid(const QString &antifraud_tid) {
    m_antifraud_tid = antifraud_tid;
    m_antifraud_tid_isSet = true;
}

bool OAITransactionDetailsResponse::is_antifraud_tid_Set() const{
    return m_antifraud_tid_isSet;
}

bool OAITransactionDetailsResponse::is_antifraud_tid_Valid() const{
    return m_antifraud_tid_isValid;
}

QString OAITransactionDetailsResponse::getAuthorizationDate() const {
    return m_authorization_date;
}
void OAITransactionDetailsResponse::setAuthorizationDate(const QString &authorization_date) {
    m_authorization_date = authorization_date;
    m_authorization_date_isSet = true;
}

bool OAITransactionDetailsResponse::is_authorization_date_Set() const{
    return m_authorization_date_isSet;
}

bool OAITransactionDetailsResponse::is_authorization_date_Valid() const{
    return m_authorization_date_isValid;
}

QString OAITransactionDetailsResponse::getAuthorizationToken() const {
    return m_authorization_token;
}
void OAITransactionDetailsResponse::setAuthorizationToken(const QString &authorization_token) {
    m_authorization_token = authorization_token;
    m_authorization_token_isSet = true;
}

bool OAITransactionDetailsResponse::is_authorization_token_Set() const{
    return m_authorization_token_isSet;
}

bool OAITransactionDetailsResponse::is_authorization_token_Valid() const{
    return m_authorization_token_isValid;
}

QString OAITransactionDetailsResponse::getBuyer() const {
    return m_buyer;
}
void OAITransactionDetailsResponse::setBuyer(const QString &buyer) {
    m_buyer = buyer;
    m_buyer_isSet = true;
}

bool OAITransactionDetailsResponse::is_buyer_Set() const{
    return m_buyer_isSet;
}

bool OAITransactionDetailsResponse::is_buyer_Valid() const{
    return m_buyer_isValid;
}

QString OAITransactionDetailsResponse::getCancelationDate() const {
    return m_cancelation_date;
}
void OAITransactionDetailsResponse::setCancelationDate(const QString &cancelation_date) {
    m_cancelation_date = cancelation_date;
    m_cancelation_date_isSet = true;
}

bool OAITransactionDetailsResponse::is_cancelation_date_Set() const{
    return m_cancelation_date_isSet;
}

bool OAITransactionDetailsResponse::is_cancelation_date_Valid() const{
    return m_cancelation_date_isValid;
}

QString OAITransactionDetailsResponse::getCancelationToken() const {
    return m_cancelation_token;
}
void OAITransactionDetailsResponse::setCancelationToken(const QString &cancelation_token) {
    m_cancelation_token = cancelation_token;
    m_cancelation_token_isSet = true;
}

bool OAITransactionDetailsResponse::is_cancelation_token_Set() const{
    return m_cancelation_token_isSet;
}

bool OAITransactionDetailsResponse::is_cancelation_token_Valid() const{
    return m_cancelation_token_isValid;
}

OAICancellations OAITransactionDetailsResponse::getCancellations() const {
    return m_cancellations;
}
void OAITransactionDetailsResponse::setCancellations(const OAICancellations &cancellations) {
    m_cancellations = cancellations;
    m_cancellations_isSet = true;
}

bool OAITransactionDetailsResponse::is_cancellations_Set() const{
    return m_cancellations_isSet;
}

bool OAITransactionDetailsResponse::is_cancellations_Valid() const{
    return m_cancellations_isValid;
}

QString OAITransactionDetailsResponse::getChannel() const {
    return m_channel;
}
void OAITransactionDetailsResponse::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAITransactionDetailsResponse::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAITransactionDetailsResponse::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAITransactionDetailsResponse::getCommitmentDate() const {
    return m_commitment_date;
}
void OAITransactionDetailsResponse::setCommitmentDate(const QString &commitment_date) {
    m_commitment_date = commitment_date;
    m_commitment_date_isSet = true;
}

bool OAITransactionDetailsResponse::is_commitment_date_Set() const{
    return m_commitment_date_isSet;
}

bool OAITransactionDetailsResponse::is_commitment_date_Valid() const{
    return m_commitment_date_isValid;
}

QString OAITransactionDetailsResponse::getCommitmentToken() const {
    return m_commitment_token;
}
void OAITransactionDetailsResponse::setCommitmentToken(const QString &commitment_token) {
    m_commitment_token = commitment_token;
    m_commitment_token_isSet = true;
}

bool OAITransactionDetailsResponse::is_commitment_token_Set() const{
    return m_commitment_token_isSet;
}

bool OAITransactionDetailsResponse::is_commitment_token_Valid() const{
    return m_commitment_token_isValid;
}

QList<OAIFields1> OAITransactionDetailsResponse::getFields() const {
    return m_fields;
}
void OAITransactionDetailsResponse::setFields(const QList<OAIFields1> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAITransactionDetailsResponse::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAITransactionDetailsResponse::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAITransactionDetailsResponse::getId() const {
    return m_id;
}
void OAITransactionDetailsResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransactionDetailsResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransactionDetailsResponse::is_id_Valid() const{
    return m_id_isValid;
}

OAIInteractions OAITransactionDetailsResponse::getInteractions() const {
    return m_interactions;
}
void OAITransactionDetailsResponse::setInteractions(const OAIInteractions &interactions) {
    m_interactions = interactions;
    m_interactions_isSet = true;
}

bool OAITransactionDetailsResponse::is_interactions_Set() const{
    return m_interactions_isSet;
}

bool OAITransactionDetailsResponse::is_interactions_Valid() const{
    return m_interactions_isValid;
}

QString OAITransactionDetailsResponse::getIpAddress() const {
    return m_ip_address;
}
void OAITransactionDetailsResponse::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAITransactionDetailsResponse::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAITransactionDetailsResponse::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

bool OAITransactionDetailsResponse::isMarkedForRecurrence() const {
    return m_marked_for_recurrence;
}
void OAITransactionDetailsResponse::setMarkedForRecurrence(const bool &marked_for_recurrence) {
    m_marked_for_recurrence = marked_for_recurrence;
    m_marked_for_recurrence_isSet = true;
}

bool OAITransactionDetailsResponse::is_marked_for_recurrence_Set() const{
    return m_marked_for_recurrence_isSet;
}

bool OAITransactionDetailsResponse::is_marked_for_recurrence_Valid() const{
    return m_marked_for_recurrence_isValid;
}

QString OAITransactionDetailsResponse::getOwner() const {
    return m_owner;
}
void OAITransactionDetailsResponse::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAITransactionDetailsResponse::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAITransactionDetailsResponse::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIPayments OAITransactionDetailsResponse::getPayments() const {
    return m_payments;
}
void OAITransactionDetailsResponse::setPayments(const OAIPayments &payments) {
    m_payments = payments;
    m_payments_isSet = true;
}

bool OAITransactionDetailsResponse::is_payments_Set() const{
    return m_payments_isSet;
}

bool OAITransactionDetailsResponse::is_payments_Valid() const{
    return m_payments_isValid;
}

QString OAITransactionDetailsResponse::getReceiverUri() const {
    return m_receiver_uri;
}
void OAITransactionDetailsResponse::setReceiverUri(const QString &receiver_uri) {
    m_receiver_uri = receiver_uri;
    m_receiver_uri_isSet = true;
}

bool OAITransactionDetailsResponse::is_receiver_uri_Set() const{
    return m_receiver_uri_isSet;
}

bool OAITransactionDetailsResponse::is_receiver_uri_Valid() const{
    return m_receiver_uri_isValid;
}

QString OAITransactionDetailsResponse::getReferenceKey() const {
    return m_reference_key;
}
void OAITransactionDetailsResponse::setReferenceKey(const QString &reference_key) {
    m_reference_key = reference_key;
    m_reference_key_isSet = true;
}

bool OAITransactionDetailsResponse::is_reference_key_Set() const{
    return m_reference_key_isSet;
}

bool OAITransactionDetailsResponse::is_reference_key_Valid() const{
    return m_reference_key_isValid;
}

QString OAITransactionDetailsResponse::getRefundingDate() const {
    return m_refunding_date;
}
void OAITransactionDetailsResponse::setRefundingDate(const QString &refunding_date) {
    m_refunding_date = refunding_date;
    m_refunding_date_isSet = true;
}

bool OAITransactionDetailsResponse::is_refunding_date_Set() const{
    return m_refunding_date_isSet;
}

bool OAITransactionDetailsResponse::is_refunding_date_Valid() const{
    return m_refunding_date_isValid;
}

QString OAITransactionDetailsResponse::getRefundingToken() const {
    return m_refunding_token;
}
void OAITransactionDetailsResponse::setRefundingToken(const QString &refunding_token) {
    m_refunding_token = refunding_token;
    m_refunding_token_isSet = true;
}

bool OAITransactionDetailsResponse::is_refunding_token_Set() const{
    return m_refunding_token_isSet;
}

bool OAITransactionDetailsResponse::is_refunding_token_Valid() const{
    return m_refunding_token_isValid;
}

OAIRefunds OAITransactionDetailsResponse::getRefunds() const {
    return m_refunds;
}
void OAITransactionDetailsResponse::setRefunds(const OAIRefunds &refunds) {
    m_refunds = refunds;
    m_refunds_isSet = true;
}

bool OAITransactionDetailsResponse::is_refunds_Set() const{
    return m_refunds_isSet;
}

bool OAITransactionDetailsResponse::is_refunds_Valid() const{
    return m_refunds_isValid;
}

QString OAITransactionDetailsResponse::getSalesChannel() const {
    return m_sales_channel;
}
void OAITransactionDetailsResponse::setSalesChannel(const QString &sales_channel) {
    m_sales_channel = sales_channel;
    m_sales_channel_isSet = true;
}

bool OAITransactionDetailsResponse::is_sales_channel_Set() const{
    return m_sales_channel_isSet;
}

bool OAITransactionDetailsResponse::is_sales_channel_Valid() const{
    return m_sales_channel_isValid;
}

OAISettlements OAITransactionDetailsResponse::getSettlements() const {
    return m_settlements;
}
void OAITransactionDetailsResponse::setSettlements(const OAISettlements &settlements) {
    m_settlements = settlements;
    m_settlements_isSet = true;
}

bool OAITransactionDetailsResponse::is_settlements_Set() const{
    return m_settlements_isSet;
}

bool OAITransactionDetailsResponse::is_settlements_Valid() const{
    return m_settlements_isValid;
}

QString OAITransactionDetailsResponse::getSoftDescriptor() const {
    return m_soft_descriptor;
}
void OAITransactionDetailsResponse::setSoftDescriptor(const QString &soft_descriptor) {
    m_soft_descriptor = soft_descriptor;
    m_soft_descriptor_isSet = true;
}

bool OAITransactionDetailsResponse::is_soft_descriptor_Set() const{
    return m_soft_descriptor_isSet;
}

bool OAITransactionDetailsResponse::is_soft_descriptor_Valid() const{
    return m_soft_descriptor_isValid;
}

QString OAITransactionDetailsResponse::getStartDate() const {
    return m_start_date;
}
void OAITransactionDetailsResponse::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAITransactionDetailsResponse::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAITransactionDetailsResponse::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAITransactionDetailsResponse::getStatus() const {
    return m_status;
}
void OAITransactionDetailsResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITransactionDetailsResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAITransactionDetailsResponse::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAITransactionDetailsResponse::getTimeoutStatus() const {
    return m_timeout_status;
}
void OAITransactionDetailsResponse::setTimeoutStatus(const qint32 &timeout_status) {
    m_timeout_status = timeout_status;
    m_timeout_status_isSet = true;
}

bool OAITransactionDetailsResponse::is_timeout_status_Set() const{
    return m_timeout_status_isSet;
}

bool OAITransactionDetailsResponse::is_timeout_status_Valid() const{
    return m_timeout_status_isValid;
}

double OAITransactionDetailsResponse::getTotalRefunds() const {
    return m_total_refunds;
}
void OAITransactionDetailsResponse::setTotalRefunds(const double &total_refunds) {
    m_total_refunds = total_refunds;
    m_total_refunds_isSet = true;
}

bool OAITransactionDetailsResponse::is_total_refunds_Set() const{
    return m_total_refunds_isSet;
}

bool OAITransactionDetailsResponse::is_total_refunds_Valid() const{
    return m_total_refunds_isValid;
}

QString OAITransactionDetailsResponse::getTransactionId() const {
    return m_transaction_id;
}
void OAITransactionDetailsResponse::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAITransactionDetailsResponse::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAITransactionDetailsResponse::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

QString OAITransactionDetailsResponse::getUrn() const {
    return m_urn;
}
void OAITransactionDetailsResponse::setUrn(const QString &urn) {
    m_urn = urn;
    m_urn_isSet = true;
}

bool OAITransactionDetailsResponse::is_urn_Set() const{
    return m_urn_isSet;
}

bool OAITransactionDetailsResponse::is_urn_Valid() const{
    return m_urn_isValid;
}

QString OAITransactionDetailsResponse::getUserAgent() const {
    return m_user_agent;
}
void OAITransactionDetailsResponse::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAITransactionDetailsResponse::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAITransactionDetailsResponse::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

qint32 OAITransactionDetailsResponse::getValue() const {
    return m_value;
}
void OAITransactionDetailsResponse::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAITransactionDetailsResponse::is_value_Set() const{
    return m_value_isSet;
}

bool OAITransactionDetailsResponse::is_value_Valid() const{
    return m_value_isValid;
}

bool OAITransactionDetailsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_antifraud_affiliation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_antifraud_tid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancelation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancelation_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commitment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commitment_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interactions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marked_for_recurrence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunding_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunding_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settlements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_soft_descriptor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_refunds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionDetailsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_accept_header_isValid && m_antifraud_affiliation_id_isValid && m_antifraud_tid_isValid && m_authorization_date_isValid && m_authorization_token_isValid && m_buyer_isValid && m_cancelation_date_isValid && m_cancelation_token_isValid && m_cancellations_isValid && m_channel_isValid && m_commitment_date_isValid && m_commitment_token_isValid && m_fields_isValid && m_id_isValid && m_interactions_isValid && m_ip_address_isValid && m_marked_for_recurrence_isValid && m_owner_isValid && m_payments_isValid && m_receiver_uri_isValid && m_reference_key_isValid && m_refunding_date_isValid && m_refunding_token_isValid && m_refunds_isValid && m_sales_channel_isValid && m_settlements_isValid && m_soft_descriptor_isValid && m_start_date_isValid && m_status_isValid && m_timeout_status_isValid && m_total_refunds_isValid && m_transaction_id_isValid && m_urn_isValid && m_user_agent_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
