/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRefundthetransactionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRefundthetransactionRequest::OAIRefundthetransactionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRefundthetransactionRequest::OAIRefundthetransactionRequest() {
    this->initializeModel();
}

OAIRefundthetransactionRequest::~OAIRefundthetransactionRequest() {}

void OAIRefundthetransactionRequest::initializeModel() {

    m_minicart_isSet = false;
    m_minicart_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIRefundthetransactionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRefundthetransactionRequest::fromJsonObject(QJsonObject json) {

    m_minicart_isValid = ::OpenAPI::fromJsonValue(m_minicart, json[QString("minicart")]);
    m_minicart_isSet = !json[QString("minicart")].isNull() && m_minicart_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIRefundthetransactionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRefundthetransactionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_minicart.isSet()) {
        obj.insert(QString("minicart"), ::OpenAPI::toJsonValue(m_minicart));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAICancelthetransactionRequest_minicart OAIRefundthetransactionRequest::getMinicart() const {
    return m_minicart;
}
void OAIRefundthetransactionRequest::setMinicart(const OAICancelthetransactionRequest_minicart &minicart) {
    m_minicart = minicart;
    m_minicart_isSet = true;
}

bool OAIRefundthetransactionRequest::is_minicart_Set() const{
    return m_minicart_isSet;
}

bool OAIRefundthetransactionRequest::is_minicart_Valid() const{
    return m_minicart_isValid;
}

qint32 OAIRefundthetransactionRequest::getValue() const {
    return m_value;
}
void OAIRefundthetransactionRequest::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIRefundthetransactionRequest::is_value_Set() const{
    return m_value_isSet;
}

bool OAIRefundthetransactionRequest::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIRefundthetransactionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_minicart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRefundthetransactionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid && true;
}

} // namespace OpenAPI
