/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidRequest::OAIValidRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidRequest::OAIValidRequest() {
    this->initializeModel();
}

OAIValidRequest::~OAIValidRequest() {}

void OAIValidRequest::initializeModel() {

    m_installments_isSet = false;
    m_installments_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIValidRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidRequest::fromJsonObject(QJsonObject json) {

    m_installments_isValid = ::OpenAPI::fromJsonValue(m_installments, json[QString("installments")]);
    m_installments_isSet = !json[QString("installments")].isNull() && m_installments_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIValidRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_installments.size() > 0) {
        obj.insert(QString("installments"), ::OpenAPI::toJsonValue(m_installments));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QList<OAIInstallment> OAIValidRequest::getInstallments() const {
    return m_installments;
}
void OAIValidRequest::setInstallments(const QList<OAIInstallment> &installments) {
    m_installments = installments;
    m_installments_isSet = true;
}

bool OAIValidRequest::is_installments_Set() const{
    return m_installments_isSet;
}

bool OAIValidRequest::is_installments_Valid() const{
    return m_installments_isValid;
}

double OAIValidRequest::getValue() const {
    return m_value;
}
void OAIValidRequest::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIValidRequest::is_value_Set() const{
    return m_value_isSet;
}

bool OAIValidRequest::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIValidRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_installments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_installments_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
