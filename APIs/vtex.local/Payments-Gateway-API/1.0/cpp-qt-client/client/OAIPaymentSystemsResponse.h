/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPaymentSystemsResponse.h
 *
 * 
 */

#ifndef OAIPaymentSystemsResponse_H
#define OAIPaymentSystemsResponse_H

#include <QJsonObject>

#include "OAIRule.h"
#include "OAIValidator.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRule;
class OAIValidator;

class OAIPaymentSystemsResponse : public OAIObject {
public:
    OAIPaymentSystemsResponse();
    OAIPaymentSystemsResponse(QString json);
    ~OAIPaymentSystemsResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAffiliationId() const;
    void setAffiliationId(const QString &affiliation_id);
    bool is_affiliation_id_Set() const;
    bool is_affiliation_id_Valid() const;

    bool isAllowCommercialCondition() const;
    void setAllowCommercialCondition(const bool &allow_commercial_condition);
    bool is_allow_commercial_condition_Set() const;
    bool is_allow_commercial_condition_Valid() const;

    bool isAllowCommercialPolicy() const;
    void setAllowCommercialPolicy(const bool &allow_commercial_policy);
    bool is_allow_commercial_policy_Set() const;
    bool is_allow_commercial_policy_Valid() const;

    bool isAllowCountry() const;
    void setAllowCountry(const bool &allow_country);
    bool is_allow_country_Set() const;
    bool is_allow_country_Valid() const;

    bool isAllowInstallments() const;
    void setAllowInstallments(const bool &allow_installments);
    bool is_allow_installments_Set() const;
    bool is_allow_installments_Valid() const;

    bool isAllowIssuer() const;
    void setAllowIssuer(const bool &allow_issuer);
    bool is_allow_issuer_Set() const;
    bool is_allow_issuer_Valid() const;

    bool isAllowMultiple() const;
    void setAllowMultiple(const bool &allow_multiple);
    bool is_allow_multiple_Set() const;
    bool is_allow_multiple_Valid() const;

    bool isAllowNotification() const;
    void setAllowNotification(const bool &allow_notification);
    bool is_allow_notification_Set() const;
    bool is_allow_notification_Valid() const;

    bool isAllowPeriod() const;
    void setAllowPeriod(const bool &allow_period);
    bool is_allow_period_Set() const;
    bool is_allow_period_Valid() const;

    QString getAntifraudConnectorImplementation() const;
    void setAntifraudConnectorImplementation(const QString &antifraud_connector_implementation);
    bool is_antifraud_connector_implementation_Set() const;
    bool is_antifraud_connector_implementation_Valid() const;

    qint32 getConnectorId() const;
    void setConnectorId(const qint32 &connector_id);
    bool is_connector_id_Set() const;
    bool is_connector_id_Valid() const;

    QString getConnectorImplementation() const;
    void setConnectorImplementation(const QString &connector_implementation);
    bool is_connector_implementation_Set() const;
    bool is_connector_implementation_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDueDate() const;
    void setDueDate(const QString &due_date);
    bool is_due_date_Set() const;
    bool is_due_date_Valid() const;

    QString getFields() const;
    void setFields(const QString &fields);
    bool is_fields_Set() const;
    bool is_fields_Valid() const;

    QString getGroupName() const;
    void setGroupName(const QString &group_name);
    bool is_group_name_Set() const;
    bool is_group_name_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getImplementation() const;
    void setImplementation(const QString &implementation);
    bool is_implementation_Set() const;
    bool is_implementation_Valid() const;

    bool isIsAvailable() const;
    void setIsAvailable(const bool &is_available);
    bool is_is_available_Set() const;
    bool is_is_available_Valid() const;

    bool isIsCustom() const;
    void setIsCustom(const bool &is_custom);
    bool is_is_custom_Set() const;
    bool is_is_custom_Valid() const;

    bool isIsSelfAuthorized() const;
    void setIsSelfAuthorized(const bool &is_self_authorized);
    bool is_is_self_authorized_Set() const;
    bool is_is_self_authorized_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isRequiresDocument() const;
    void setRequiresDocument(const bool &requires_document);
    bool is_requires_document_Set() const;
    bool is_requires_document_Valid() const;

    bool isRequiresPhone() const;
    void setRequiresPhone(const bool &requires_phone);
    bool is_requires_phone_Set() const;
    bool is_requires_phone_Valid() const;

    QList<OAIRule> getRules() const;
    void setRules(const QList<OAIRule> &rules);
    bool is_rules_Set() const;
    bool is_rules_Valid() const;

    OAIValidator getValidator() const;
    void setValidator(const OAIValidator &validator);
    bool is_validator_Set() const;
    bool is_validator_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_affiliation_id;
    bool m_affiliation_id_isSet;
    bool m_affiliation_id_isValid;

    bool m_allow_commercial_condition;
    bool m_allow_commercial_condition_isSet;
    bool m_allow_commercial_condition_isValid;

    bool m_allow_commercial_policy;
    bool m_allow_commercial_policy_isSet;
    bool m_allow_commercial_policy_isValid;

    bool m_allow_country;
    bool m_allow_country_isSet;
    bool m_allow_country_isValid;

    bool m_allow_installments;
    bool m_allow_installments_isSet;
    bool m_allow_installments_isValid;

    bool m_allow_issuer;
    bool m_allow_issuer_isSet;
    bool m_allow_issuer_isValid;

    bool m_allow_multiple;
    bool m_allow_multiple_isSet;
    bool m_allow_multiple_isValid;

    bool m_allow_notification;
    bool m_allow_notification_isSet;
    bool m_allow_notification_isValid;

    bool m_allow_period;
    bool m_allow_period_isSet;
    bool m_allow_period_isValid;

    QString m_antifraud_connector_implementation;
    bool m_antifraud_connector_implementation_isSet;
    bool m_antifraud_connector_implementation_isValid;

    qint32 m_connector_id;
    bool m_connector_id_isSet;
    bool m_connector_id_isValid;

    QString m_connector_implementation;
    bool m_connector_implementation_isSet;
    bool m_connector_implementation_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_due_date;
    bool m_due_date_isSet;
    bool m_due_date_isValid;

    QString m_fields;
    bool m_fields_isSet;
    bool m_fields_isValid;

    QString m_group_name;
    bool m_group_name_isSet;
    bool m_group_name_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_implementation;
    bool m_implementation_isSet;
    bool m_implementation_isValid;

    bool m_is_available;
    bool m_is_available_isSet;
    bool m_is_available_isValid;

    bool m_is_custom;
    bool m_is_custom_isSet;
    bool m_is_custom_isValid;

    bool m_is_self_authorized;
    bool m_is_self_authorized_isSet;
    bool m_is_self_authorized_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_requires_document;
    bool m_requires_document_isSet;
    bool m_requires_document_isValid;

    bool m_requires_phone;
    bool m_requires_phone_isSet;
    bool m_requires_phone_isValid;

    QList<OAIRule> m_rules;
    bool m_rules_isSet;
    bool m_rules_isValid;

    OAIValidator m_validator;
    bool m_validator_isSet;
    bool m_validator_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPaymentSystemsResponse)

#endif // OAIPaymentSystemsResponse_H
