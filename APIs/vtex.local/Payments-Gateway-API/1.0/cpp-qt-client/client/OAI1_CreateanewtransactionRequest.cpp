/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI1_CreateanewtransactionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI1_CreateanewtransactionRequest::OAI1_CreateanewtransactionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI1_CreateanewtransactionRequest::OAI1_CreateanewtransactionRequest() {
    this->initializeModel();
}

OAI1_CreateanewtransactionRequest::~OAI1_CreateanewtransactionRequest() {}

void OAI1_CreateanewtransactionRequest::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_sales_channel_isSet = false;
    m_sales_channel_isValid = false;

    m_urn_isSet = false;
    m_urn_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAI1_CreateanewtransactionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI1_CreateanewtransactionRequest::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("referenceId")]);
    m_reference_id_isSet = !json[QString("referenceId")].isNull() && m_reference_id_isValid;

    m_sales_channel_isValid = ::OpenAPI::fromJsonValue(m_sales_channel, json[QString("salesChannel")]);
    m_sales_channel_isSet = !json[QString("salesChannel")].isNull() && m_sales_channel_isValid;

    m_urn_isValid = ::OpenAPI::fromJsonValue(m_urn, json[QString("urn")]);
    m_urn_isSet = !json[QString("urn")].isNull() && m_urn_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAI1_CreateanewtransactionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI1_CreateanewtransactionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("referenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_sales_channel_isSet) {
        obj.insert(QString("salesChannel"), ::OpenAPI::toJsonValue(m_sales_channel));
    }
    if (m_urn_isSet) {
        obj.insert(QString("urn"), ::OpenAPI::toJsonValue(m_urn));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAI1_CreateanewtransactionRequest::getChannel() const {
    return m_channel;
}
void OAI1_CreateanewtransactionRequest::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAI1_CreateanewtransactionRequest::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAI1_CreateanewtransactionRequest::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAI1_CreateanewtransactionRequest::getReferenceId() const {
    return m_reference_id;
}
void OAI1_CreateanewtransactionRequest::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAI1_CreateanewtransactionRequest::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAI1_CreateanewtransactionRequest::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QString OAI1_CreateanewtransactionRequest::getSalesChannel() const {
    return m_sales_channel;
}
void OAI1_CreateanewtransactionRequest::setSalesChannel(const QString &sales_channel) {
    m_sales_channel = sales_channel;
    m_sales_channel_isSet = true;
}

bool OAI1_CreateanewtransactionRequest::is_sales_channel_Set() const{
    return m_sales_channel_isSet;
}

bool OAI1_CreateanewtransactionRequest::is_sales_channel_Valid() const{
    return m_sales_channel_isValid;
}

QString OAI1_CreateanewtransactionRequest::getUrn() const {
    return m_urn;
}
void OAI1_CreateanewtransactionRequest::setUrn(const QString &urn) {
    m_urn = urn;
    m_urn_isSet = true;
}

bool OAI1_CreateanewtransactionRequest::is_urn_Set() const{
    return m_urn_isSet;
}

bool OAI1_CreateanewtransactionRequest::is_urn_Valid() const{
    return m_urn_isValid;
}

qint32 OAI1_CreateanewtransactionRequest::getValue() const {
    return m_value;
}
void OAI1_CreateanewtransactionRequest::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAI1_CreateanewtransactionRequest::is_value_Set() const{
    return m_value_isSet;
}

bool OAI1_CreateanewtransactionRequest::is_value_Valid() const{
    return m_value_isValid;
}

bool OAI1_CreateanewtransactionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI1_CreateanewtransactionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_isValid && m_reference_id_isValid && m_sales_channel_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
