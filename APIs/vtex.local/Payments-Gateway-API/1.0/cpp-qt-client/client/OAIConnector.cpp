/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnector::OAIConnector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnector::OAIConnector() {
    this->initializeModel();
}

OAIConnector::~OAIConnector() {}

void OAIConnector::initializeModel() {

    m_affiliation_id_isSet = false;
    m_affiliation_id_isValid = false;

    m_implementation_isSet = false;
    m_implementation_isValid = false;
}

void OAIConnector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnector::fromJsonObject(QJsonObject json) {

    m_affiliation_id_isValid = ::OpenAPI::fromJsonValue(m_affiliation_id, json[QString("affiliationId")]);
    m_affiliation_id_isSet = !json[QString("affiliationId")].isNull() && m_affiliation_id_isValid;

    m_implementation_isValid = ::OpenAPI::fromJsonValue(m_implementation, json[QString("implementation")]);
    m_implementation_isSet = !json[QString("implementation")].isNull() && m_implementation_isValid;
}

QString OAIConnector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnector::asJsonObject() const {
    QJsonObject obj;
    if (m_affiliation_id_isSet) {
        obj.insert(QString("affiliationId"), ::OpenAPI::toJsonValue(m_affiliation_id));
    }
    if (m_implementation_isSet) {
        obj.insert(QString("implementation"), ::OpenAPI::toJsonValue(m_implementation));
    }
    return obj;
}

QString OAIConnector::getAffiliationId() const {
    return m_affiliation_id;
}
void OAIConnector::setAffiliationId(const QString &affiliation_id) {
    m_affiliation_id = affiliation_id;
    m_affiliation_id_isSet = true;
}

bool OAIConnector::is_affiliation_id_Set() const{
    return m_affiliation_id_isSet;
}

bool OAIConnector::is_affiliation_id_Valid() const{
    return m_affiliation_id_isValid;
}

QString OAIConnector::getImplementation() const {
    return m_implementation;
}
void OAIConnector::setImplementation(const QString &implementation) {
    m_implementation = implementation;
    m_implementation_isSet = true;
}

bool OAIConnector::is_implementation_Set() const{
    return m_implementation_isSet;
}

bool OAIConnector::is_implementation_Valid() const{
    return m_implementation_isValid;
}

bool OAIConnector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affiliation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_implementation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnector::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_affiliation_id_isValid && m_implementation_isValid && true;
}

} // namespace OpenAPI
