/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentSystemsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentSystemsResponse::OAIPaymentSystemsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentSystemsResponse::OAIPaymentSystemsResponse() {
    this->initializeModel();
}

OAIPaymentSystemsResponse::~OAIPaymentSystemsResponse() {}

void OAIPaymentSystemsResponse::initializeModel() {

    m_affiliation_id_isSet = false;
    m_affiliation_id_isValid = false;

    m_allow_commercial_condition_isSet = false;
    m_allow_commercial_condition_isValid = false;

    m_allow_commercial_policy_isSet = false;
    m_allow_commercial_policy_isValid = false;

    m_allow_country_isSet = false;
    m_allow_country_isValid = false;

    m_allow_installments_isSet = false;
    m_allow_installments_isValid = false;

    m_allow_issuer_isSet = false;
    m_allow_issuer_isValid = false;

    m_allow_multiple_isSet = false;
    m_allow_multiple_isValid = false;

    m_allow_notification_isSet = false;
    m_allow_notification_isValid = false;

    m_allow_period_isSet = false;
    m_allow_period_isValid = false;

    m_antifraud_connector_implementation_isSet = false;
    m_antifraud_connector_implementation_isValid = false;

    m_connector_id_isSet = false;
    m_connector_id_isValid = false;

    m_connector_implementation_isSet = false;
    m_connector_implementation_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_implementation_isSet = false;
    m_implementation_isValid = false;

    m_is_available_isSet = false;
    m_is_available_isValid = false;

    m_is_custom_isSet = false;
    m_is_custom_isValid = false;

    m_is_self_authorized_isSet = false;
    m_is_self_authorized_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_requires_document_isSet = false;
    m_requires_document_isValid = false;

    m_requires_phone_isSet = false;
    m_requires_phone_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_validator_isSet = false;
    m_validator_isValid = false;
}

void OAIPaymentSystemsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentSystemsResponse::fromJsonObject(QJsonObject json) {

    m_affiliation_id_isValid = ::OpenAPI::fromJsonValue(m_affiliation_id, json[QString("affiliationId")]);
    m_affiliation_id_isSet = !json[QString("affiliationId")].isNull() && m_affiliation_id_isValid;

    m_allow_commercial_condition_isValid = ::OpenAPI::fromJsonValue(m_allow_commercial_condition, json[QString("allowCommercialCondition")]);
    m_allow_commercial_condition_isSet = !json[QString("allowCommercialCondition")].isNull() && m_allow_commercial_condition_isValid;

    m_allow_commercial_policy_isValid = ::OpenAPI::fromJsonValue(m_allow_commercial_policy, json[QString("allowCommercialPolicy")]);
    m_allow_commercial_policy_isSet = !json[QString("allowCommercialPolicy")].isNull() && m_allow_commercial_policy_isValid;

    m_allow_country_isValid = ::OpenAPI::fromJsonValue(m_allow_country, json[QString("allowCountry")]);
    m_allow_country_isSet = !json[QString("allowCountry")].isNull() && m_allow_country_isValid;

    m_allow_installments_isValid = ::OpenAPI::fromJsonValue(m_allow_installments, json[QString("allowInstallments")]);
    m_allow_installments_isSet = !json[QString("allowInstallments")].isNull() && m_allow_installments_isValid;

    m_allow_issuer_isValid = ::OpenAPI::fromJsonValue(m_allow_issuer, json[QString("allowIssuer")]);
    m_allow_issuer_isSet = !json[QString("allowIssuer")].isNull() && m_allow_issuer_isValid;

    m_allow_multiple_isValid = ::OpenAPI::fromJsonValue(m_allow_multiple, json[QString("allowMultiple")]);
    m_allow_multiple_isSet = !json[QString("allowMultiple")].isNull() && m_allow_multiple_isValid;

    m_allow_notification_isValid = ::OpenAPI::fromJsonValue(m_allow_notification, json[QString("allowNotification")]);
    m_allow_notification_isSet = !json[QString("allowNotification")].isNull() && m_allow_notification_isValid;

    m_allow_period_isValid = ::OpenAPI::fromJsonValue(m_allow_period, json[QString("allowPeriod")]);
    m_allow_period_isSet = !json[QString("allowPeriod")].isNull() && m_allow_period_isValid;

    m_antifraud_connector_implementation_isValid = ::OpenAPI::fromJsonValue(m_antifraud_connector_implementation, json[QString("antifraudConnectorImplementation")]);
    m_antifraud_connector_implementation_isSet = !json[QString("antifraudConnectorImplementation")].isNull() && m_antifraud_connector_implementation_isValid;

    m_connector_id_isValid = ::OpenAPI::fromJsonValue(m_connector_id, json[QString("connectorId")]);
    m_connector_id_isSet = !json[QString("connectorId")].isNull() && m_connector_id_isValid;

    m_connector_implementation_isValid = ::OpenAPI::fromJsonValue(m_connector_implementation, json[QString("connectorImplementation")]);
    m_connector_implementation_isSet = !json[QString("connectorImplementation")].isNull() && m_connector_implementation_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("groupName")]);
    m_group_name_isSet = !json[QString("groupName")].isNull() && m_group_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_implementation_isValid = ::OpenAPI::fromJsonValue(m_implementation, json[QString("implementation")]);
    m_implementation_isSet = !json[QString("implementation")].isNull() && m_implementation_isValid;

    m_is_available_isValid = ::OpenAPI::fromJsonValue(m_is_available, json[QString("isAvailable")]);
    m_is_available_isSet = !json[QString("isAvailable")].isNull() && m_is_available_isValid;

    m_is_custom_isValid = ::OpenAPI::fromJsonValue(m_is_custom, json[QString("isCustom")]);
    m_is_custom_isSet = !json[QString("isCustom")].isNull() && m_is_custom_isValid;

    m_is_self_authorized_isValid = ::OpenAPI::fromJsonValue(m_is_self_authorized, json[QString("isSelfAuthorized")]);
    m_is_self_authorized_isSet = !json[QString("isSelfAuthorized")].isNull() && m_is_self_authorized_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_requires_document_isValid = ::OpenAPI::fromJsonValue(m_requires_document, json[QString("requiresDocument")]);
    m_requires_document_isSet = !json[QString("requiresDocument")].isNull() && m_requires_document_isValid;

    m_requires_phone_isValid = ::OpenAPI::fromJsonValue(m_requires_phone, json[QString("requiresPhone")]);
    m_requires_phone_isSet = !json[QString("requiresPhone")].isNull() && m_requires_phone_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;

    m_validator_isValid = ::OpenAPI::fromJsonValue(m_validator, json[QString("validator")]);
    m_validator_isSet = !json[QString("validator")].isNull() && m_validator_isValid;
}

QString OAIPaymentSystemsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentSystemsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_affiliation_id_isSet) {
        obj.insert(QString("affiliationId"), ::OpenAPI::toJsonValue(m_affiliation_id));
    }
    if (m_allow_commercial_condition_isSet) {
        obj.insert(QString("allowCommercialCondition"), ::OpenAPI::toJsonValue(m_allow_commercial_condition));
    }
    if (m_allow_commercial_policy_isSet) {
        obj.insert(QString("allowCommercialPolicy"), ::OpenAPI::toJsonValue(m_allow_commercial_policy));
    }
    if (m_allow_country_isSet) {
        obj.insert(QString("allowCountry"), ::OpenAPI::toJsonValue(m_allow_country));
    }
    if (m_allow_installments_isSet) {
        obj.insert(QString("allowInstallments"), ::OpenAPI::toJsonValue(m_allow_installments));
    }
    if (m_allow_issuer_isSet) {
        obj.insert(QString("allowIssuer"), ::OpenAPI::toJsonValue(m_allow_issuer));
    }
    if (m_allow_multiple_isSet) {
        obj.insert(QString("allowMultiple"), ::OpenAPI::toJsonValue(m_allow_multiple));
    }
    if (m_allow_notification_isSet) {
        obj.insert(QString("allowNotification"), ::OpenAPI::toJsonValue(m_allow_notification));
    }
    if (m_allow_period_isSet) {
        obj.insert(QString("allowPeriod"), ::OpenAPI::toJsonValue(m_allow_period));
    }
    if (m_antifraud_connector_implementation_isSet) {
        obj.insert(QString("antifraudConnectorImplementation"), ::OpenAPI::toJsonValue(m_antifraud_connector_implementation));
    }
    if (m_connector_id_isSet) {
        obj.insert(QString("connectorId"), ::OpenAPI::toJsonValue(m_connector_id));
    }
    if (m_connector_implementation_isSet) {
        obj.insert(QString("connectorImplementation"), ::OpenAPI::toJsonValue(m_connector_implementation));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_fields_isSet) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("groupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_implementation_isSet) {
        obj.insert(QString("implementation"), ::OpenAPI::toJsonValue(m_implementation));
    }
    if (m_is_available_isSet) {
        obj.insert(QString("isAvailable"), ::OpenAPI::toJsonValue(m_is_available));
    }
    if (m_is_custom_isSet) {
        obj.insert(QString("isCustom"), ::OpenAPI::toJsonValue(m_is_custom));
    }
    if (m_is_self_authorized_isSet) {
        obj.insert(QString("isSelfAuthorized"), ::OpenAPI::toJsonValue(m_is_self_authorized));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_requires_document_isSet) {
        obj.insert(QString("requiresDocument"), ::OpenAPI::toJsonValue(m_requires_document));
    }
    if (m_requires_phone_isSet) {
        obj.insert(QString("requiresPhone"), ::OpenAPI::toJsonValue(m_requires_phone));
    }
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_validator.isSet()) {
        obj.insert(QString("validator"), ::OpenAPI::toJsonValue(m_validator));
    }
    return obj;
}

QString OAIPaymentSystemsResponse::getAffiliationId() const {
    return m_affiliation_id;
}
void OAIPaymentSystemsResponse::setAffiliationId(const QString &affiliation_id) {
    m_affiliation_id = affiliation_id;
    m_affiliation_id_isSet = true;
}

bool OAIPaymentSystemsResponse::is_affiliation_id_Set() const{
    return m_affiliation_id_isSet;
}

bool OAIPaymentSystemsResponse::is_affiliation_id_Valid() const{
    return m_affiliation_id_isValid;
}

bool OAIPaymentSystemsResponse::isAllowCommercialCondition() const {
    return m_allow_commercial_condition;
}
void OAIPaymentSystemsResponse::setAllowCommercialCondition(const bool &allow_commercial_condition) {
    m_allow_commercial_condition = allow_commercial_condition;
    m_allow_commercial_condition_isSet = true;
}

bool OAIPaymentSystemsResponse::is_allow_commercial_condition_Set() const{
    return m_allow_commercial_condition_isSet;
}

bool OAIPaymentSystemsResponse::is_allow_commercial_condition_Valid() const{
    return m_allow_commercial_condition_isValid;
}

bool OAIPaymentSystemsResponse::isAllowCommercialPolicy() const {
    return m_allow_commercial_policy;
}
void OAIPaymentSystemsResponse::setAllowCommercialPolicy(const bool &allow_commercial_policy) {
    m_allow_commercial_policy = allow_commercial_policy;
    m_allow_commercial_policy_isSet = true;
}

bool OAIPaymentSystemsResponse::is_allow_commercial_policy_Set() const{
    return m_allow_commercial_policy_isSet;
}

bool OAIPaymentSystemsResponse::is_allow_commercial_policy_Valid() const{
    return m_allow_commercial_policy_isValid;
}

bool OAIPaymentSystemsResponse::isAllowCountry() const {
    return m_allow_country;
}
void OAIPaymentSystemsResponse::setAllowCountry(const bool &allow_country) {
    m_allow_country = allow_country;
    m_allow_country_isSet = true;
}

bool OAIPaymentSystemsResponse::is_allow_country_Set() const{
    return m_allow_country_isSet;
}

bool OAIPaymentSystemsResponse::is_allow_country_Valid() const{
    return m_allow_country_isValid;
}

bool OAIPaymentSystemsResponse::isAllowInstallments() const {
    return m_allow_installments;
}
void OAIPaymentSystemsResponse::setAllowInstallments(const bool &allow_installments) {
    m_allow_installments = allow_installments;
    m_allow_installments_isSet = true;
}

bool OAIPaymentSystemsResponse::is_allow_installments_Set() const{
    return m_allow_installments_isSet;
}

bool OAIPaymentSystemsResponse::is_allow_installments_Valid() const{
    return m_allow_installments_isValid;
}

bool OAIPaymentSystemsResponse::isAllowIssuer() const {
    return m_allow_issuer;
}
void OAIPaymentSystemsResponse::setAllowIssuer(const bool &allow_issuer) {
    m_allow_issuer = allow_issuer;
    m_allow_issuer_isSet = true;
}

bool OAIPaymentSystemsResponse::is_allow_issuer_Set() const{
    return m_allow_issuer_isSet;
}

bool OAIPaymentSystemsResponse::is_allow_issuer_Valid() const{
    return m_allow_issuer_isValid;
}

bool OAIPaymentSystemsResponse::isAllowMultiple() const {
    return m_allow_multiple;
}
void OAIPaymentSystemsResponse::setAllowMultiple(const bool &allow_multiple) {
    m_allow_multiple = allow_multiple;
    m_allow_multiple_isSet = true;
}

bool OAIPaymentSystemsResponse::is_allow_multiple_Set() const{
    return m_allow_multiple_isSet;
}

bool OAIPaymentSystemsResponse::is_allow_multiple_Valid() const{
    return m_allow_multiple_isValid;
}

bool OAIPaymentSystemsResponse::isAllowNotification() const {
    return m_allow_notification;
}
void OAIPaymentSystemsResponse::setAllowNotification(const bool &allow_notification) {
    m_allow_notification = allow_notification;
    m_allow_notification_isSet = true;
}

bool OAIPaymentSystemsResponse::is_allow_notification_Set() const{
    return m_allow_notification_isSet;
}

bool OAIPaymentSystemsResponse::is_allow_notification_Valid() const{
    return m_allow_notification_isValid;
}

bool OAIPaymentSystemsResponse::isAllowPeriod() const {
    return m_allow_period;
}
void OAIPaymentSystemsResponse::setAllowPeriod(const bool &allow_period) {
    m_allow_period = allow_period;
    m_allow_period_isSet = true;
}

bool OAIPaymentSystemsResponse::is_allow_period_Set() const{
    return m_allow_period_isSet;
}

bool OAIPaymentSystemsResponse::is_allow_period_Valid() const{
    return m_allow_period_isValid;
}

QString OAIPaymentSystemsResponse::getAntifraudConnectorImplementation() const {
    return m_antifraud_connector_implementation;
}
void OAIPaymentSystemsResponse::setAntifraudConnectorImplementation(const QString &antifraud_connector_implementation) {
    m_antifraud_connector_implementation = antifraud_connector_implementation;
    m_antifraud_connector_implementation_isSet = true;
}

bool OAIPaymentSystemsResponse::is_antifraud_connector_implementation_Set() const{
    return m_antifraud_connector_implementation_isSet;
}

bool OAIPaymentSystemsResponse::is_antifraud_connector_implementation_Valid() const{
    return m_antifraud_connector_implementation_isValid;
}

qint32 OAIPaymentSystemsResponse::getConnectorId() const {
    return m_connector_id;
}
void OAIPaymentSystemsResponse::setConnectorId(const qint32 &connector_id) {
    m_connector_id = connector_id;
    m_connector_id_isSet = true;
}

bool OAIPaymentSystemsResponse::is_connector_id_Set() const{
    return m_connector_id_isSet;
}

bool OAIPaymentSystemsResponse::is_connector_id_Valid() const{
    return m_connector_id_isValid;
}

QString OAIPaymentSystemsResponse::getConnectorImplementation() const {
    return m_connector_implementation;
}
void OAIPaymentSystemsResponse::setConnectorImplementation(const QString &connector_implementation) {
    m_connector_implementation = connector_implementation;
    m_connector_implementation_isSet = true;
}

bool OAIPaymentSystemsResponse::is_connector_implementation_Set() const{
    return m_connector_implementation_isSet;
}

bool OAIPaymentSystemsResponse::is_connector_implementation_Valid() const{
    return m_connector_implementation_isValid;
}

QString OAIPaymentSystemsResponse::getDescription() const {
    return m_description;
}
void OAIPaymentSystemsResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPaymentSystemsResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPaymentSystemsResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPaymentSystemsResponse::getDueDate() const {
    return m_due_date;
}
void OAIPaymentSystemsResponse::setDueDate(const QString &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIPaymentSystemsResponse::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIPaymentSystemsResponse::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QString OAIPaymentSystemsResponse::getFields() const {
    return m_fields;
}
void OAIPaymentSystemsResponse::setFields(const QString &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIPaymentSystemsResponse::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIPaymentSystemsResponse::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAIPaymentSystemsResponse::getGroupName() const {
    return m_group_name;
}
void OAIPaymentSystemsResponse::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIPaymentSystemsResponse::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIPaymentSystemsResponse::is_group_name_Valid() const{
    return m_group_name_isValid;
}

qint32 OAIPaymentSystemsResponse::getId() const {
    return m_id;
}
void OAIPaymentSystemsResponse::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPaymentSystemsResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPaymentSystemsResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPaymentSystemsResponse::getImplementation() const {
    return m_implementation;
}
void OAIPaymentSystemsResponse::setImplementation(const QString &implementation) {
    m_implementation = implementation;
    m_implementation_isSet = true;
}

bool OAIPaymentSystemsResponse::is_implementation_Set() const{
    return m_implementation_isSet;
}

bool OAIPaymentSystemsResponse::is_implementation_Valid() const{
    return m_implementation_isValid;
}

bool OAIPaymentSystemsResponse::isIsAvailable() const {
    return m_is_available;
}
void OAIPaymentSystemsResponse::setIsAvailable(const bool &is_available) {
    m_is_available = is_available;
    m_is_available_isSet = true;
}

bool OAIPaymentSystemsResponse::is_is_available_Set() const{
    return m_is_available_isSet;
}

bool OAIPaymentSystemsResponse::is_is_available_Valid() const{
    return m_is_available_isValid;
}

bool OAIPaymentSystemsResponse::isIsCustom() const {
    return m_is_custom;
}
void OAIPaymentSystemsResponse::setIsCustom(const bool &is_custom) {
    m_is_custom = is_custom;
    m_is_custom_isSet = true;
}

bool OAIPaymentSystemsResponse::is_is_custom_Set() const{
    return m_is_custom_isSet;
}

bool OAIPaymentSystemsResponse::is_is_custom_Valid() const{
    return m_is_custom_isValid;
}

bool OAIPaymentSystemsResponse::isIsSelfAuthorized() const {
    return m_is_self_authorized;
}
void OAIPaymentSystemsResponse::setIsSelfAuthorized(const bool &is_self_authorized) {
    m_is_self_authorized = is_self_authorized;
    m_is_self_authorized_isSet = true;
}

bool OAIPaymentSystemsResponse::is_is_self_authorized_Set() const{
    return m_is_self_authorized_isSet;
}

bool OAIPaymentSystemsResponse::is_is_self_authorized_Valid() const{
    return m_is_self_authorized_isValid;
}

QString OAIPaymentSystemsResponse::getName() const {
    return m_name;
}
void OAIPaymentSystemsResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPaymentSystemsResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPaymentSystemsResponse::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPaymentSystemsResponse::isRequiresDocument() const {
    return m_requires_document;
}
void OAIPaymentSystemsResponse::setRequiresDocument(const bool &requires_document) {
    m_requires_document = requires_document;
    m_requires_document_isSet = true;
}

bool OAIPaymentSystemsResponse::is_requires_document_Set() const{
    return m_requires_document_isSet;
}

bool OAIPaymentSystemsResponse::is_requires_document_Valid() const{
    return m_requires_document_isValid;
}

bool OAIPaymentSystemsResponse::isRequiresPhone() const {
    return m_requires_phone;
}
void OAIPaymentSystemsResponse::setRequiresPhone(const bool &requires_phone) {
    m_requires_phone = requires_phone;
    m_requires_phone_isSet = true;
}

bool OAIPaymentSystemsResponse::is_requires_phone_Set() const{
    return m_requires_phone_isSet;
}

bool OAIPaymentSystemsResponse::is_requires_phone_Valid() const{
    return m_requires_phone_isValid;
}

QList<OAIRule> OAIPaymentSystemsResponse::getRules() const {
    return m_rules;
}
void OAIPaymentSystemsResponse::setRules(const QList<OAIRule> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIPaymentSystemsResponse::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIPaymentSystemsResponse::is_rules_Valid() const{
    return m_rules_isValid;
}

OAIValidator OAIPaymentSystemsResponse::getValidator() const {
    return m_validator;
}
void OAIPaymentSystemsResponse::setValidator(const OAIValidator &validator) {
    m_validator = validator;
    m_validator_isSet = true;
}

bool OAIPaymentSystemsResponse::is_validator_Set() const{
    return m_validator_isSet;
}

bool OAIPaymentSystemsResponse::is_validator_Valid() const{
    return m_validator_isValid;
}

bool OAIPaymentSystemsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affiliation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_commercial_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_commercial_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_installments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_multiple_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_antifraud_connector_implementation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_implementation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_implementation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_custom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_self_authorized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_validator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentSystemsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_affiliation_id_isValid && m_allow_commercial_condition_isValid && m_allow_commercial_policy_isValid && m_allow_country_isValid && m_allow_installments_isValid && m_allow_issuer_isValid && m_allow_multiple_isValid && m_allow_notification_isValid && m_allow_period_isValid && m_antifraud_connector_implementation_isValid && m_connector_id_isValid && m_connector_implementation_isValid && m_description_isValid && m_due_date_isValid && m_fields_isValid && m_group_name_isValid && m_id_isValid && m_implementation_isValid && m_is_available_isValid && m_is_custom_isValid && m_is_self_authorized_isValid && m_name_isValid && m_requires_document_isValid && m_requires_phone_isValid && m_rules_isValid && m_validator_isValid && true;
}

} // namespace OpenAPI
