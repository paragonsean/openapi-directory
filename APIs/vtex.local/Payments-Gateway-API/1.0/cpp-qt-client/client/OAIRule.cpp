/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRule::OAIRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRule::OAIRule() {
    this->initializeModel();
}

OAIRule::~OAIRule() {}

void OAIRule::initializeModel() {

    m_antifraud_implementation_isSet = false;
    m_antifraud_implementation_isValid = false;

    m_connector_implementation_isSet = false;
    m_connector_implementation_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRule::fromJsonObject(QJsonObject json) {

    m_antifraud_implementation_isValid = ::OpenAPI::fromJsonValue(m_antifraud_implementation, json[QString("antifraudImplementation")]);
    m_antifraud_implementation_isSet = !json[QString("antifraudImplementation")].isNull() && m_antifraud_implementation_isValid;

    m_connector_implementation_isValid = ::OpenAPI::fromJsonValue(m_connector_implementation, json[QString("connectorImplementation")]);
    m_connector_implementation_isSet = !json[QString("connectorImplementation")].isNull() && m_connector_implementation_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRule::asJsonObject() const {
    QJsonObject obj;
    if (m_antifraud_implementation_isSet) {
        obj.insert(QString("antifraudImplementation"), ::OpenAPI::toJsonValue(m_antifraud_implementation));
    }
    if (m_connector_implementation_isSet) {
        obj.insert(QString("connectorImplementation"), ::OpenAPI::toJsonValue(m_connector_implementation));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIRule::getAntifraudImplementation() const {
    return m_antifraud_implementation;
}
void OAIRule::setAntifraudImplementation(const QString &antifraud_implementation) {
    m_antifraud_implementation = antifraud_implementation;
    m_antifraud_implementation_isSet = true;
}

bool OAIRule::is_antifraud_implementation_Set() const{
    return m_antifraud_implementation_isSet;
}

bool OAIRule::is_antifraud_implementation_Valid() const{
    return m_antifraud_implementation_isValid;
}

QString OAIRule::getConnectorImplementation() const {
    return m_connector_implementation;
}
void OAIRule::setConnectorImplementation(const QString &connector_implementation) {
    m_connector_implementation = connector_implementation;
    m_connector_implementation_isSet = true;
}

bool OAIRule::is_connector_implementation_Set() const{
    return m_connector_implementation_isSet;
}

bool OAIRule::is_connector_implementation_Valid() const{
    return m_connector_implementation_isValid;
}

QString OAIRule::getId() const {
    return m_id;
}
void OAIRule::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRule::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRule::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_antifraud_implementation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_implementation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_antifraud_implementation_isValid && m_connector_implementation_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
