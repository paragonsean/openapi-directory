/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction::OAIAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction::OAIAction() {
    this->initializeModel();
}

OAIAction::~OAIAction() {}

void OAIAction::initializeModel() {

    m_connector_response_isSet = false;
    m_connector_response_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_payment_isSet = false;
    m_payment_isValid = false;

    m_payment_id_isSet = false;
    m_payment_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAction::fromJsonObject(QJsonObject json) {

    m_connector_response_isValid = ::OpenAPI::fromJsonValue(m_connector_response, json[QString("connectorResponse")]);
    m_connector_response_isSet = !json[QString("connectorResponse")].isNull() && m_connector_response_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_payment_isValid = ::OpenAPI::fromJsonValue(m_payment, json[QString("payment")]);
    m_payment_isSet = !json[QString("payment")].isNull() && m_payment_isValid;

    m_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payment_id, json[QString("paymentId")]);
    m_payment_id_isSet = !json[QString("paymentId")].isNull() && m_payment_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAction::asJsonObject() const {
    QJsonObject obj;
    if (m_connector_response_isSet) {
        obj.insert(QString("connectorResponse"), ::OpenAPI::toJsonValue(m_connector_response));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_payment.isSet()) {
        obj.insert(QString("payment"), ::OpenAPI::toJsonValue(m_payment));
    }
    if (m_payment_id_isSet) {
        obj.insert(QString("paymentId"), ::OpenAPI::toJsonValue(m_payment_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIAction::getConnectorResponse() const {
    return m_connector_response;
}
void OAIAction::setConnectorResponse(const QString &connector_response) {
    m_connector_response = connector_response;
    m_connector_response_isSet = true;
}

bool OAIAction::is_connector_response_Set() const{
    return m_connector_response_isSet;
}

bool OAIAction::is_connector_response_Valid() const{
    return m_connector_response_isValid;
}

QString OAIAction::getDate() const {
    return m_date;
}
void OAIAction::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIAction::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAction::is_date_Valid() const{
    return m_date_isValid;
}

OAIPayment1 OAIAction::getPayment() const {
    return m_payment;
}
void OAIAction::setPayment(const OAIPayment1 &payment) {
    m_payment = payment;
    m_payment_isSet = true;
}

bool OAIAction::is_payment_Set() const{
    return m_payment_isSet;
}

bool OAIAction::is_payment_Valid() const{
    return m_payment_isValid;
}

QString OAIAction::getPaymentId() const {
    return m_payment_id;
}
void OAIAction::setPaymentId(const QString &payment_id) {
    m_payment_id = payment_id;
    m_payment_id_isSet = true;
}

bool OAIAction::is_payment_id_Set() const{
    return m_payment_id_isSet;
}

bool OAIAction::is_payment_id_Valid() const{
    return m_payment_id_isValid;
}

QString OAIAction::getType() const {
    return m_type;
}
void OAIAction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAction::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIAction::getValue() const {
    return m_value;
}
void OAIAction::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIAction::is_value_Set() const{
    return m_value_isSet;
}

bool OAIAction::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connector_response_isValid && m_date_isValid && m_payment_isValid && m_payment_id_isValid && m_type_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
