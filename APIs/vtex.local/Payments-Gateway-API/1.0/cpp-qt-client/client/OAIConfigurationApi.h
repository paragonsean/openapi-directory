/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConfigurationApi_H
#define OAI_OAIConfigurationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIInsertAffiliationRequest.h"
#include "OAIInsertRuleRequest.h"
#include "OAIPaymentSystemsResponse.h"
#include "OAIRuleByIdRequest.h"
#include "OAIUpdateAffiliationRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConfigurationApi : public QObject {
    Q_OBJECT

public:
    OAIConfigurationApi(const int timeOut = 0);
    ~OAIConfigurationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  affiliation_id QString [required]
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void affiliationById(const QString &affiliation_id, const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &content_type, const QString &accept);

    /**
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void affiliations(const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &content_type, const QString &accept);

    /**
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void availablePaymentMethods(const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &content_type, const QString &accept);

    /**
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_insert_affiliation_request OAIInsertAffiliationRequest [required]
    */
    virtual void insertAffiliation(const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &content_type, const QString &accept, const OAIInsertAffiliationRequest &oai_insert_affiliation_request);

    /**
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_insert_rule_request OAIInsertRuleRequest [required]
    */
    virtual void insertRule(const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &accept, const QString &content_type, const OAIInsertRuleRequest &oai_insert_rule_request);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  rule_id QString [required]
    * @param[in]  oai_rule_by_id_request OAIRuleByIdRequest [required]
    */
    virtual void putRuleById(const QString &accept, const QString &content_type, const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &rule_id, const OAIRuleByIdRequest &oai_rule_by_id_request);

    /**
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  rule_id QString [required]
    */
    virtual void rule(const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &content_type, const QString &accept, const QString &rule_id);

    /**
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  rule_id QString [required]
    */
    virtual void ruleById(const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &content_type, const QString &accept, const QString &rule_id);

    /**
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void rules(const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &content_type, const QString &accept);

    /**
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  affiliation_id QString [required]
    * @param[in]  oai_update_affiliation_request OAIUpdateAffiliationRequest [required]
    */
    virtual void updateAffiliation(const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &accept, const QString &content_type, const QString &affiliation_id, const OAIUpdateAffiliationRequest &oai_update_affiliation_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void affiliationByIdCallback(OAIHttpRequestWorker *worker);
    void affiliationsCallback(OAIHttpRequestWorker *worker);
    void availablePaymentMethodsCallback(OAIHttpRequestWorker *worker);
    void insertAffiliationCallback(OAIHttpRequestWorker *worker);
    void insertRuleCallback(OAIHttpRequestWorker *worker);
    void putRuleByIdCallback(OAIHttpRequestWorker *worker);
    void ruleCallback(OAIHttpRequestWorker *worker);
    void ruleByIdCallback(OAIHttpRequestWorker *worker);
    void rulesCallback(OAIHttpRequestWorker *worker);
    void updateAffiliationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void affiliationByIdSignal();
    void affiliationsSignal();
    void availablePaymentMethodsSignal(QList<OAIPaymentSystemsResponse> summary);
    void insertAffiliationSignal();
    void insertRuleSignal();
    void putRuleByIdSignal();
    void ruleSignal();
    void ruleByIdSignal();
    void rulesSignal();
    void updateAffiliationSignal();


    void affiliationByIdSignalFull(OAIHttpRequestWorker *worker);
    void affiliationsSignalFull(OAIHttpRequestWorker *worker);
    void availablePaymentMethodsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPaymentSystemsResponse> summary);
    void insertAffiliationSignalFull(OAIHttpRequestWorker *worker);
    void insertRuleSignalFull(OAIHttpRequestWorker *worker);
    void putRuleByIdSignalFull(OAIHttpRequestWorker *worker);
    void ruleSignalFull(OAIHttpRequestWorker *worker);
    void ruleByIdSignalFull(OAIHttpRequestWorker *worker);
    void rulesSignalFull(OAIHttpRequestWorker *worker);
    void updateAffiliationSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use affiliationByIdSignalError() instead")
    void affiliationByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void affiliationByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use affiliationsSignalError() instead")
    void affiliationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void affiliationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use availablePaymentMethodsSignalError() instead")
    void availablePaymentMethodsSignalE(QList<OAIPaymentSystemsResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void availablePaymentMethodsSignalError(QList<OAIPaymentSystemsResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use insertAffiliationSignalError() instead")
    void insertAffiliationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void insertAffiliationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use insertRuleSignalError() instead")
    void insertRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void insertRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putRuleByIdSignalError() instead")
    void putRuleByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putRuleByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ruleSignalError() instead")
    void ruleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ruleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ruleByIdSignalError() instead")
    void ruleByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ruleByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rulesSignalError() instead")
    void rulesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rulesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAffiliationSignalError() instead")
    void updateAffiliationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateAffiliationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use affiliationByIdSignalErrorFull() instead")
    void affiliationByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void affiliationByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use affiliationsSignalErrorFull() instead")
    void affiliationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void affiliationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use availablePaymentMethodsSignalErrorFull() instead")
    void availablePaymentMethodsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void availablePaymentMethodsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use insertAffiliationSignalErrorFull() instead")
    void insertAffiliationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void insertAffiliationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use insertRuleSignalErrorFull() instead")
    void insertRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void insertRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putRuleByIdSignalErrorFull() instead")
    void putRuleByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putRuleByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ruleSignalErrorFull() instead")
    void ruleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ruleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ruleByIdSignalErrorFull() instead")
    void ruleByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ruleByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rulesSignalErrorFull() instead")
    void rulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAffiliationSignalErrorFull() instead")
    void updateAffiliationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAffiliationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
