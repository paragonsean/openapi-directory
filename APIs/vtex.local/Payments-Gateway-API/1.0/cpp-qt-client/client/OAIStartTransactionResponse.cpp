/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartTransactionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartTransactionResponse::OAIStartTransactionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartTransactionResponse::OAIStartTransactionResponse() {
    this->initializeModel();
}

OAIStartTransactionResponse::~OAIStartTransactionResponse() {}

void OAIStartTransactionResponse::initializeModel() {

    m_accept_header_isSet = false;
    m_accept_header_isValid = false;

    m_antifraud_affiliation_id_isSet = false;
    m_antifraud_affiliation_id_isValid = false;

    m_antifraud_tid_isSet = false;
    m_antifraud_tid_isValid = false;

    m_authorization_date_isSet = false;
    m_authorization_date_isValid = false;

    m_authorization_token_isSet = false;
    m_authorization_token_isValid = false;

    m_buyer_isSet = false;
    m_buyer_isValid = false;

    m_cancelation_date_isSet = false;
    m_cancelation_date_isValid = false;

    m_cancelation_token_isSet = false;
    m_cancelation_token_isValid = false;

    m_cancellations_isSet = false;
    m_cancellations_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_commitment_date_isSet = false;
    m_commitment_date_isValid = false;

    m_commitment_token_isSet = false;
    m_commitment_token_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interactions_isSet = false;
    m_interactions_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_marked_for_recurrence_isSet = false;
    m_marked_for_recurrence_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_payments_isSet = false;
    m_payments_isValid = false;

    m_receiver_uri_isSet = false;
    m_receiver_uri_isValid = false;

    m_reference_key_isSet = false;
    m_reference_key_isValid = false;

    m_refunding_date_isSet = false;
    m_refunding_date_isValid = false;

    m_refunding_token_isSet = false;
    m_refunding_token_isValid = false;

    m_refunds_isSet = false;
    m_refunds_isValid = false;

    m_sales_channel_isSet = false;
    m_sales_channel_isValid = false;

    m_settlements_isSet = false;
    m_settlements_isValid = false;

    m_soft_descriptor_isSet = false;
    m_soft_descriptor_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timeout_status_isSet = false;
    m_timeout_status_isValid = false;

    m_total_refunds_isSet = false;
    m_total_refunds_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_urn_isSet = false;
    m_urn_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIStartTransactionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartTransactionResponse::fromJsonObject(QJsonObject json) {

    m_accept_header_isValid = ::OpenAPI::fromJsonValue(m_accept_header, json[QString("acceptHeader")]);
    m_accept_header_isSet = !json[QString("acceptHeader")].isNull() && m_accept_header_isValid;

    m_antifraud_affiliation_id_isValid = ::OpenAPI::fromJsonValue(m_antifraud_affiliation_id, json[QString("antifraudAffiliationId")]);
    m_antifraud_affiliation_id_isSet = !json[QString("antifraudAffiliationId")].isNull() && m_antifraud_affiliation_id_isValid;

    m_antifraud_tid_isValid = ::OpenAPI::fromJsonValue(m_antifraud_tid, json[QString("antifraudTid")]);
    m_antifraud_tid_isSet = !json[QString("antifraudTid")].isNull() && m_antifraud_tid_isValid;

    m_authorization_date_isValid = ::OpenAPI::fromJsonValue(m_authorization_date, json[QString("authorizationDate")]);
    m_authorization_date_isSet = !json[QString("authorizationDate")].isNull() && m_authorization_date_isValid;

    m_authorization_token_isValid = ::OpenAPI::fromJsonValue(m_authorization_token, json[QString("authorizationToken")]);
    m_authorization_token_isSet = !json[QString("authorizationToken")].isNull() && m_authorization_token_isValid;

    m_buyer_isValid = ::OpenAPI::fromJsonValue(m_buyer, json[QString("buyer")]);
    m_buyer_isSet = !json[QString("buyer")].isNull() && m_buyer_isValid;

    m_cancelation_date_isValid = ::OpenAPI::fromJsonValue(m_cancelation_date, json[QString("cancelationDate")]);
    m_cancelation_date_isSet = !json[QString("cancelationDate")].isNull() && m_cancelation_date_isValid;

    m_cancelation_token_isValid = ::OpenAPI::fromJsonValue(m_cancelation_token, json[QString("cancelationToken")]);
    m_cancelation_token_isSet = !json[QString("cancelationToken")].isNull() && m_cancelation_token_isValid;

    m_cancellations_isValid = ::OpenAPI::fromJsonValue(m_cancellations, json[QString("cancellations")]);
    m_cancellations_isSet = !json[QString("cancellations")].isNull() && m_cancellations_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_commitment_date_isValid = ::OpenAPI::fromJsonValue(m_commitment_date, json[QString("commitmentDate")]);
    m_commitment_date_isSet = !json[QString("commitmentDate")].isNull() && m_commitment_date_isValid;

    m_commitment_token_isValid = ::OpenAPI::fromJsonValue(m_commitment_token, json[QString("commitmentToken")]);
    m_commitment_token_isSet = !json[QString("commitmentToken")].isNull() && m_commitment_token_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interactions_isValid = ::OpenAPI::fromJsonValue(m_interactions, json[QString("interactions")]);
    m_interactions_isSet = !json[QString("interactions")].isNull() && m_interactions_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_marked_for_recurrence_isValid = ::OpenAPI::fromJsonValue(m_marked_for_recurrence, json[QString("markedForRecurrence")]);
    m_marked_for_recurrence_isSet = !json[QString("markedForRecurrence")].isNull() && m_marked_for_recurrence_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_payments_isValid = ::OpenAPI::fromJsonValue(m_payments, json[QString("payments")]);
    m_payments_isSet = !json[QString("payments")].isNull() && m_payments_isValid;

    m_receiver_uri_isValid = ::OpenAPI::fromJsonValue(m_receiver_uri, json[QString("receiverUri")]);
    m_receiver_uri_isSet = !json[QString("receiverUri")].isNull() && m_receiver_uri_isValid;

    m_reference_key_isValid = ::OpenAPI::fromJsonValue(m_reference_key, json[QString("referenceKey")]);
    m_reference_key_isSet = !json[QString("referenceKey")].isNull() && m_reference_key_isValid;

    m_refunding_date_isValid = ::OpenAPI::fromJsonValue(m_refunding_date, json[QString("refundingDate")]);
    m_refunding_date_isSet = !json[QString("refundingDate")].isNull() && m_refunding_date_isValid;

    m_refunding_token_isValid = ::OpenAPI::fromJsonValue(m_refunding_token, json[QString("refundingToken")]);
    m_refunding_token_isSet = !json[QString("refundingToken")].isNull() && m_refunding_token_isValid;

    m_refunds_isValid = ::OpenAPI::fromJsonValue(m_refunds, json[QString("refunds")]);
    m_refunds_isSet = !json[QString("refunds")].isNull() && m_refunds_isValid;

    m_sales_channel_isValid = ::OpenAPI::fromJsonValue(m_sales_channel, json[QString("salesChannel")]);
    m_sales_channel_isSet = !json[QString("salesChannel")].isNull() && m_sales_channel_isValid;

    m_settlements_isValid = ::OpenAPI::fromJsonValue(m_settlements, json[QString("settlements")]);
    m_settlements_isSet = !json[QString("settlements")].isNull() && m_settlements_isValid;

    m_soft_descriptor_isValid = ::OpenAPI::fromJsonValue(m_soft_descriptor, json[QString("softDescriptor")]);
    m_soft_descriptor_isSet = !json[QString("softDescriptor")].isNull() && m_soft_descriptor_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timeout_status_isValid = ::OpenAPI::fromJsonValue(m_timeout_status, json[QString("timeoutStatus")]);
    m_timeout_status_isSet = !json[QString("timeoutStatus")].isNull() && m_timeout_status_isValid;

    m_total_refunds_isValid = ::OpenAPI::fromJsonValue(m_total_refunds, json[QString("totalRefunds")]);
    m_total_refunds_isSet = !json[QString("totalRefunds")].isNull() && m_total_refunds_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transactionId")]);
    m_transaction_id_isSet = !json[QString("transactionId")].isNull() && m_transaction_id_isValid;

    m_urn_isValid = ::OpenAPI::fromJsonValue(m_urn, json[QString("urn")]);
    m_urn_isSet = !json[QString("urn")].isNull() && m_urn_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("userAgent")]);
    m_user_agent_isSet = !json[QString("userAgent")].isNull() && m_user_agent_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIStartTransactionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartTransactionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_header_isSet) {
        obj.insert(QString("acceptHeader"), ::OpenAPI::toJsonValue(m_accept_header));
    }
    if (m_antifraud_affiliation_id_isSet) {
        obj.insert(QString("antifraudAffiliationId"), ::OpenAPI::toJsonValue(m_antifraud_affiliation_id));
    }
    if (m_antifraud_tid_isSet) {
        obj.insert(QString("antifraudTid"), ::OpenAPI::toJsonValue(m_antifraud_tid));
    }
    if (m_authorization_date_isSet) {
        obj.insert(QString("authorizationDate"), ::OpenAPI::toJsonValue(m_authorization_date));
    }
    if (m_authorization_token_isSet) {
        obj.insert(QString("authorizationToken"), ::OpenAPI::toJsonValue(m_authorization_token));
    }
    if (m_buyer_isSet) {
        obj.insert(QString("buyer"), ::OpenAPI::toJsonValue(m_buyer));
    }
    if (m_cancelation_date_isSet) {
        obj.insert(QString("cancelationDate"), ::OpenAPI::toJsonValue(m_cancelation_date));
    }
    if (m_cancelation_token_isSet) {
        obj.insert(QString("cancelationToken"), ::OpenAPI::toJsonValue(m_cancelation_token));
    }
    if (m_cancellations.isSet()) {
        obj.insert(QString("cancellations"), ::OpenAPI::toJsonValue(m_cancellations));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_commitment_date_isSet) {
        obj.insert(QString("commitmentDate"), ::OpenAPI::toJsonValue(m_commitment_date));
    }
    if (m_commitment_token_isSet) {
        obj.insert(QString("commitmentToken"), ::OpenAPI::toJsonValue(m_commitment_token));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interactions.isSet()) {
        obj.insert(QString("interactions"), ::OpenAPI::toJsonValue(m_interactions));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_marked_for_recurrence_isSet) {
        obj.insert(QString("markedForRecurrence"), ::OpenAPI::toJsonValue(m_marked_for_recurrence));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_payments.isSet()) {
        obj.insert(QString("payments"), ::OpenAPI::toJsonValue(m_payments));
    }
    if (m_receiver_uri_isSet) {
        obj.insert(QString("receiverUri"), ::OpenAPI::toJsonValue(m_receiver_uri));
    }
    if (m_reference_key_isSet) {
        obj.insert(QString("referenceKey"), ::OpenAPI::toJsonValue(m_reference_key));
    }
    if (m_refunding_date_isSet) {
        obj.insert(QString("refundingDate"), ::OpenAPI::toJsonValue(m_refunding_date));
    }
    if (m_refunding_token_isSet) {
        obj.insert(QString("refundingToken"), ::OpenAPI::toJsonValue(m_refunding_token));
    }
    if (m_refunds.isSet()) {
        obj.insert(QString("refunds"), ::OpenAPI::toJsonValue(m_refunds));
    }
    if (m_sales_channel_isSet) {
        obj.insert(QString("salesChannel"), ::OpenAPI::toJsonValue(m_sales_channel));
    }
    if (m_settlements.isSet()) {
        obj.insert(QString("settlements"), ::OpenAPI::toJsonValue(m_settlements));
    }
    if (m_soft_descriptor_isSet) {
        obj.insert(QString("softDescriptor"), ::OpenAPI::toJsonValue(m_soft_descriptor));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timeout_status_isSet) {
        obj.insert(QString("timeoutStatus"), ::OpenAPI::toJsonValue(m_timeout_status));
    }
    if (m_total_refunds_isSet) {
        obj.insert(QString("totalRefunds"), ::OpenAPI::toJsonValue(m_total_refunds));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_urn_isSet) {
        obj.insert(QString("urn"), ::OpenAPI::toJsonValue(m_urn));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("userAgent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIStartTransactionResponse::getAcceptHeader() const {
    return m_accept_header;
}
void OAIStartTransactionResponse::setAcceptHeader(const QString &accept_header) {
    m_accept_header = accept_header;
    m_accept_header_isSet = true;
}

bool OAIStartTransactionResponse::is_accept_header_Set() const{
    return m_accept_header_isSet;
}

bool OAIStartTransactionResponse::is_accept_header_Valid() const{
    return m_accept_header_isValid;
}

QString OAIStartTransactionResponse::getAntifraudAffiliationId() const {
    return m_antifraud_affiliation_id;
}
void OAIStartTransactionResponse::setAntifraudAffiliationId(const QString &antifraud_affiliation_id) {
    m_antifraud_affiliation_id = antifraud_affiliation_id;
    m_antifraud_affiliation_id_isSet = true;
}

bool OAIStartTransactionResponse::is_antifraud_affiliation_id_Set() const{
    return m_antifraud_affiliation_id_isSet;
}

bool OAIStartTransactionResponse::is_antifraud_affiliation_id_Valid() const{
    return m_antifraud_affiliation_id_isValid;
}

QString OAIStartTransactionResponse::getAntifraudTid() const {
    return m_antifraud_tid;
}
void OAIStartTransactionResponse::setAntifraudTid(const QString &antifraud_tid) {
    m_antifraud_tid = antifraud_tid;
    m_antifraud_tid_isSet = true;
}

bool OAIStartTransactionResponse::is_antifraud_tid_Set() const{
    return m_antifraud_tid_isSet;
}

bool OAIStartTransactionResponse::is_antifraud_tid_Valid() const{
    return m_antifraud_tid_isValid;
}

QString OAIStartTransactionResponse::getAuthorizationDate() const {
    return m_authorization_date;
}
void OAIStartTransactionResponse::setAuthorizationDate(const QString &authorization_date) {
    m_authorization_date = authorization_date;
    m_authorization_date_isSet = true;
}

bool OAIStartTransactionResponse::is_authorization_date_Set() const{
    return m_authorization_date_isSet;
}

bool OAIStartTransactionResponse::is_authorization_date_Valid() const{
    return m_authorization_date_isValid;
}

QString OAIStartTransactionResponse::getAuthorizationToken() const {
    return m_authorization_token;
}
void OAIStartTransactionResponse::setAuthorizationToken(const QString &authorization_token) {
    m_authorization_token = authorization_token;
    m_authorization_token_isSet = true;
}

bool OAIStartTransactionResponse::is_authorization_token_Set() const{
    return m_authorization_token_isSet;
}

bool OAIStartTransactionResponse::is_authorization_token_Valid() const{
    return m_authorization_token_isValid;
}

QString OAIStartTransactionResponse::getBuyer() const {
    return m_buyer;
}
void OAIStartTransactionResponse::setBuyer(const QString &buyer) {
    m_buyer = buyer;
    m_buyer_isSet = true;
}

bool OAIStartTransactionResponse::is_buyer_Set() const{
    return m_buyer_isSet;
}

bool OAIStartTransactionResponse::is_buyer_Valid() const{
    return m_buyer_isValid;
}

QString OAIStartTransactionResponse::getCancelationDate() const {
    return m_cancelation_date;
}
void OAIStartTransactionResponse::setCancelationDate(const QString &cancelation_date) {
    m_cancelation_date = cancelation_date;
    m_cancelation_date_isSet = true;
}

bool OAIStartTransactionResponse::is_cancelation_date_Set() const{
    return m_cancelation_date_isSet;
}

bool OAIStartTransactionResponse::is_cancelation_date_Valid() const{
    return m_cancelation_date_isValid;
}

QString OAIStartTransactionResponse::getCancelationToken() const {
    return m_cancelation_token;
}
void OAIStartTransactionResponse::setCancelationToken(const QString &cancelation_token) {
    m_cancelation_token = cancelation_token;
    m_cancelation_token_isSet = true;
}

bool OAIStartTransactionResponse::is_cancelation_token_Set() const{
    return m_cancelation_token_isSet;
}

bool OAIStartTransactionResponse::is_cancelation_token_Valid() const{
    return m_cancelation_token_isValid;
}

OAICancellations OAIStartTransactionResponse::getCancellations() const {
    return m_cancellations;
}
void OAIStartTransactionResponse::setCancellations(const OAICancellations &cancellations) {
    m_cancellations = cancellations;
    m_cancellations_isSet = true;
}

bool OAIStartTransactionResponse::is_cancellations_Set() const{
    return m_cancellations_isSet;
}

bool OAIStartTransactionResponse::is_cancellations_Valid() const{
    return m_cancellations_isValid;
}

QString OAIStartTransactionResponse::getChannel() const {
    return m_channel;
}
void OAIStartTransactionResponse::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIStartTransactionResponse::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIStartTransactionResponse::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIStartTransactionResponse::getCommitmentDate() const {
    return m_commitment_date;
}
void OAIStartTransactionResponse::setCommitmentDate(const QString &commitment_date) {
    m_commitment_date = commitment_date;
    m_commitment_date_isSet = true;
}

bool OAIStartTransactionResponse::is_commitment_date_Set() const{
    return m_commitment_date_isSet;
}

bool OAIStartTransactionResponse::is_commitment_date_Valid() const{
    return m_commitment_date_isValid;
}

QString OAIStartTransactionResponse::getCommitmentToken() const {
    return m_commitment_token;
}
void OAIStartTransactionResponse::setCommitmentToken(const QString &commitment_token) {
    m_commitment_token = commitment_token;
    m_commitment_token_isSet = true;
}

bool OAIStartTransactionResponse::is_commitment_token_Set() const{
    return m_commitment_token_isSet;
}

bool OAIStartTransactionResponse::is_commitment_token_Valid() const{
    return m_commitment_token_isValid;
}

QList<OAIField> OAIStartTransactionResponse::getFields() const {
    return m_fields;
}
void OAIStartTransactionResponse::setFields(const QList<OAIField> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIStartTransactionResponse::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIStartTransactionResponse::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAIStartTransactionResponse::getId() const {
    return m_id;
}
void OAIStartTransactionResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStartTransactionResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStartTransactionResponse::is_id_Valid() const{
    return m_id_isValid;
}

OAIInteractions OAIStartTransactionResponse::getInteractions() const {
    return m_interactions;
}
void OAIStartTransactionResponse::setInteractions(const OAIInteractions &interactions) {
    m_interactions = interactions;
    m_interactions_isSet = true;
}

bool OAIStartTransactionResponse::is_interactions_Set() const{
    return m_interactions_isSet;
}

bool OAIStartTransactionResponse::is_interactions_Valid() const{
    return m_interactions_isValid;
}

QString OAIStartTransactionResponse::getIpAddress() const {
    return m_ip_address;
}
void OAIStartTransactionResponse::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIStartTransactionResponse::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIStartTransactionResponse::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

bool OAIStartTransactionResponse::isMarkedForRecurrence() const {
    return m_marked_for_recurrence;
}
void OAIStartTransactionResponse::setMarkedForRecurrence(const bool &marked_for_recurrence) {
    m_marked_for_recurrence = marked_for_recurrence;
    m_marked_for_recurrence_isSet = true;
}

bool OAIStartTransactionResponse::is_marked_for_recurrence_Set() const{
    return m_marked_for_recurrence_isSet;
}

bool OAIStartTransactionResponse::is_marked_for_recurrence_Valid() const{
    return m_marked_for_recurrence_isValid;
}

QString OAIStartTransactionResponse::getOwner() const {
    return m_owner;
}
void OAIStartTransactionResponse::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIStartTransactionResponse::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIStartTransactionResponse::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIPayments OAIStartTransactionResponse::getPayments() const {
    return m_payments;
}
void OAIStartTransactionResponse::setPayments(const OAIPayments &payments) {
    m_payments = payments;
    m_payments_isSet = true;
}

bool OAIStartTransactionResponse::is_payments_Set() const{
    return m_payments_isSet;
}

bool OAIStartTransactionResponse::is_payments_Valid() const{
    return m_payments_isValid;
}

QString OAIStartTransactionResponse::getReceiverUri() const {
    return m_receiver_uri;
}
void OAIStartTransactionResponse::setReceiverUri(const QString &receiver_uri) {
    m_receiver_uri = receiver_uri;
    m_receiver_uri_isSet = true;
}

bool OAIStartTransactionResponse::is_receiver_uri_Set() const{
    return m_receiver_uri_isSet;
}

bool OAIStartTransactionResponse::is_receiver_uri_Valid() const{
    return m_receiver_uri_isValid;
}

QString OAIStartTransactionResponse::getReferenceKey() const {
    return m_reference_key;
}
void OAIStartTransactionResponse::setReferenceKey(const QString &reference_key) {
    m_reference_key = reference_key;
    m_reference_key_isSet = true;
}

bool OAIStartTransactionResponse::is_reference_key_Set() const{
    return m_reference_key_isSet;
}

bool OAIStartTransactionResponse::is_reference_key_Valid() const{
    return m_reference_key_isValid;
}

QString OAIStartTransactionResponse::getRefundingDate() const {
    return m_refunding_date;
}
void OAIStartTransactionResponse::setRefundingDate(const QString &refunding_date) {
    m_refunding_date = refunding_date;
    m_refunding_date_isSet = true;
}

bool OAIStartTransactionResponse::is_refunding_date_Set() const{
    return m_refunding_date_isSet;
}

bool OAIStartTransactionResponse::is_refunding_date_Valid() const{
    return m_refunding_date_isValid;
}

QString OAIStartTransactionResponse::getRefundingToken() const {
    return m_refunding_token;
}
void OAIStartTransactionResponse::setRefundingToken(const QString &refunding_token) {
    m_refunding_token = refunding_token;
    m_refunding_token_isSet = true;
}

bool OAIStartTransactionResponse::is_refunding_token_Set() const{
    return m_refunding_token_isSet;
}

bool OAIStartTransactionResponse::is_refunding_token_Valid() const{
    return m_refunding_token_isValid;
}

OAIRefunds OAIStartTransactionResponse::getRefunds() const {
    return m_refunds;
}
void OAIStartTransactionResponse::setRefunds(const OAIRefunds &refunds) {
    m_refunds = refunds;
    m_refunds_isSet = true;
}

bool OAIStartTransactionResponse::is_refunds_Set() const{
    return m_refunds_isSet;
}

bool OAIStartTransactionResponse::is_refunds_Valid() const{
    return m_refunds_isValid;
}

QString OAIStartTransactionResponse::getSalesChannel() const {
    return m_sales_channel;
}
void OAIStartTransactionResponse::setSalesChannel(const QString &sales_channel) {
    m_sales_channel = sales_channel;
    m_sales_channel_isSet = true;
}

bool OAIStartTransactionResponse::is_sales_channel_Set() const{
    return m_sales_channel_isSet;
}

bool OAIStartTransactionResponse::is_sales_channel_Valid() const{
    return m_sales_channel_isValid;
}

OAISettlements OAIStartTransactionResponse::getSettlements() const {
    return m_settlements;
}
void OAIStartTransactionResponse::setSettlements(const OAISettlements &settlements) {
    m_settlements = settlements;
    m_settlements_isSet = true;
}

bool OAIStartTransactionResponse::is_settlements_Set() const{
    return m_settlements_isSet;
}

bool OAIStartTransactionResponse::is_settlements_Valid() const{
    return m_settlements_isValid;
}

QString OAIStartTransactionResponse::getSoftDescriptor() const {
    return m_soft_descriptor;
}
void OAIStartTransactionResponse::setSoftDescriptor(const QString &soft_descriptor) {
    m_soft_descriptor = soft_descriptor;
    m_soft_descriptor_isSet = true;
}

bool OAIStartTransactionResponse::is_soft_descriptor_Set() const{
    return m_soft_descriptor_isSet;
}

bool OAIStartTransactionResponse::is_soft_descriptor_Valid() const{
    return m_soft_descriptor_isValid;
}

QString OAIStartTransactionResponse::getStartDate() const {
    return m_start_date;
}
void OAIStartTransactionResponse::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIStartTransactionResponse::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIStartTransactionResponse::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIStartTransactionResponse::getStatus() const {
    return m_status;
}
void OAIStartTransactionResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStartTransactionResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStartTransactionResponse::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIStartTransactionResponse::getTimeoutStatus() const {
    return m_timeout_status;
}
void OAIStartTransactionResponse::setTimeoutStatus(const qint32 &timeout_status) {
    m_timeout_status = timeout_status;
    m_timeout_status_isSet = true;
}

bool OAIStartTransactionResponse::is_timeout_status_Set() const{
    return m_timeout_status_isSet;
}

bool OAIStartTransactionResponse::is_timeout_status_Valid() const{
    return m_timeout_status_isValid;
}

double OAIStartTransactionResponse::getTotalRefunds() const {
    return m_total_refunds;
}
void OAIStartTransactionResponse::setTotalRefunds(const double &total_refunds) {
    m_total_refunds = total_refunds;
    m_total_refunds_isSet = true;
}

bool OAIStartTransactionResponse::is_total_refunds_Set() const{
    return m_total_refunds_isSet;
}

bool OAIStartTransactionResponse::is_total_refunds_Valid() const{
    return m_total_refunds_isValid;
}

QString OAIStartTransactionResponse::getTransactionId() const {
    return m_transaction_id;
}
void OAIStartTransactionResponse::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIStartTransactionResponse::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIStartTransactionResponse::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

QString OAIStartTransactionResponse::getUrn() const {
    return m_urn;
}
void OAIStartTransactionResponse::setUrn(const QString &urn) {
    m_urn = urn;
    m_urn_isSet = true;
}

bool OAIStartTransactionResponse::is_urn_Set() const{
    return m_urn_isSet;
}

bool OAIStartTransactionResponse::is_urn_Valid() const{
    return m_urn_isValid;
}

QString OAIStartTransactionResponse::getUserAgent() const {
    return m_user_agent;
}
void OAIStartTransactionResponse::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAIStartTransactionResponse::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAIStartTransactionResponse::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

qint32 OAIStartTransactionResponse::getValue() const {
    return m_value;
}
void OAIStartTransactionResponse::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIStartTransactionResponse::is_value_Set() const{
    return m_value_isSet;
}

bool OAIStartTransactionResponse::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIStartTransactionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_antifraud_affiliation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_antifraud_tid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancelation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancelation_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commitment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commitment_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interactions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marked_for_recurrence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunding_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunding_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settlements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_soft_descriptor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_refunds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartTransactionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_accept_header_isValid && m_antifraud_affiliation_id_isValid && m_antifraud_tid_isValid && m_authorization_date_isValid && m_authorization_token_isValid && m_buyer_isValid && m_cancelation_date_isValid && m_cancelation_token_isValid && m_cancellations_isValid && m_channel_isValid && m_commitment_date_isValid && m_commitment_token_isValid && m_fields_isValid && m_id_isValid && m_interactions_isValid && m_ip_address_isValid && m_marked_for_recurrence_isValid && m_owner_isValid && m_payments_isValid && m_receiver_uri_isValid && m_reference_key_isValid && m_refunding_date_isValid && m_refunding_token_isValid && m_refunds_isValid && m_sales_channel_isValid && m_settlements_isValid && m_soft_descriptor_isValid && m_start_date_isValid && m_status_isValid && m_timeout_status_isValid && m_total_refunds_isValid && m_transaction_id_isValid && m_urn_isValid && m_user_agent_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
