/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentSystem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentSystem::OAIPaymentSystem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentSystem::OAIPaymentSystem() {
    this->initializeModel();
}

OAIPaymentSystem::~OAIPaymentSystem() {}

void OAIPaymentSystem::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_implementation_isSet = false;
    m_implementation_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIPaymentSystem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentSystem::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_implementation_isValid = ::OpenAPI::fromJsonValue(m_implementation, json[QString("implementation")]);
    m_implementation_isSet = !json[QString("implementation")].isNull() && m_implementation_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIPaymentSystem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentSystem::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_implementation_isSet) {
        obj.insert(QString("implementation"), ::OpenAPI::toJsonValue(m_implementation));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

qint32 OAIPaymentSystem::getId() const {
    return m_id;
}
void OAIPaymentSystem::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPaymentSystem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPaymentSystem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPaymentSystem::getImplementation() const {
    return m_implementation;
}
void OAIPaymentSystem::setImplementation(const QString &implementation) {
    m_implementation = implementation;
    m_implementation_isSet = true;
}

bool OAIPaymentSystem::is_implementation_Set() const{
    return m_implementation_isSet;
}

bool OAIPaymentSystem::is_implementation_Valid() const{
    return m_implementation_isValid;
}

QString OAIPaymentSystem::getName() const {
    return m_name;
}
void OAIPaymentSystem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPaymentSystem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPaymentSystem::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPaymentSystem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_implementation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentSystem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_implementation_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
