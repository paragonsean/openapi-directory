/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFields::OAIFields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFields::OAIFields() {
    this->initializeModel();
}

OAIFields::~OAIFields() {}

void OAIFields::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_callback_url_isSet = false;
    m_callback_url_isValid = false;

    m_card_number_isSet = false;
    m_card_number_isValid = false;

    m_document_isSet = false;
    m_document_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_holder_name_isSet = false;
    m_holder_name_isValid = false;

    m_validation_code_isSet = false;
    m_validation_code_isValid = false;
}

void OAIFields::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFields::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_callback_url_isValid = ::OpenAPI::fromJsonValue(m_callback_url, json[QString("callbackUrl")]);
    m_callback_url_isSet = !json[QString("callbackUrl")].isNull() && m_callback_url_isValid;

    m_card_number_isValid = ::OpenAPI::fromJsonValue(m_card_number, json[QString("cardNumber")]);
    m_card_number_isSet = !json[QString("cardNumber")].isNull() && m_card_number_isValid;

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_holder_name_isValid = ::OpenAPI::fromJsonValue(m_holder_name, json[QString("holderName")]);
    m_holder_name_isSet = !json[QString("holderName")].isNull() && m_holder_name_isValid;

    m_validation_code_isValid = ::OpenAPI::fromJsonValue(m_validation_code, json[QString("validationCode")]);
    m_validation_code_isSet = !json[QString("validationCode")].isNull() && m_validation_code_isValid;
}

QString OAIFields::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFields::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_callback_url_isSet) {
        obj.insert(QString("callbackUrl"), ::OpenAPI::toJsonValue(m_callback_url));
    }
    if (m_card_number_isSet) {
        obj.insert(QString("cardNumber"), ::OpenAPI::toJsonValue(m_card_number));
    }
    if (m_document_isSet) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_holder_name_isSet) {
        obj.insert(QString("holderName"), ::OpenAPI::toJsonValue(m_holder_name));
    }
    if (m_validation_code_isSet) {
        obj.insert(QString("validationCode"), ::OpenAPI::toJsonValue(m_validation_code));
    }
    return obj;
}

QString OAIFields::getAccountId() const {
    return m_account_id;
}
void OAIFields::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIFields::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIFields::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIFields::getAddress() const {
    return m_address;
}
void OAIFields::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIFields::is_address_Set() const{
    return m_address_isSet;
}

bool OAIFields::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIFields::getCallbackUrl() const {
    return m_callback_url;
}
void OAIFields::setCallbackUrl(const QString &callback_url) {
    m_callback_url = callback_url;
    m_callback_url_isSet = true;
}

bool OAIFields::is_callback_url_Set() const{
    return m_callback_url_isSet;
}

bool OAIFields::is_callback_url_Valid() const{
    return m_callback_url_isValid;
}

QString OAIFields::getCardNumber() const {
    return m_card_number;
}
void OAIFields::setCardNumber(const QString &card_number) {
    m_card_number = card_number;
    m_card_number_isSet = true;
}

bool OAIFields::is_card_number_Set() const{
    return m_card_number_isSet;
}

bool OAIFields::is_card_number_Valid() const{
    return m_card_number_isValid;
}

QString OAIFields::getDocument() const {
    return m_document;
}
void OAIFields::setDocument(const QString &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIFields::is_document_Set() const{
    return m_document_isSet;
}

bool OAIFields::is_document_Valid() const{
    return m_document_isValid;
}

QString OAIFields::getDueDate() const {
    return m_due_date;
}
void OAIFields::setDueDate(const QString &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIFields::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIFields::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QString OAIFields::getHolderName() const {
    return m_holder_name;
}
void OAIFields::setHolderName(const QString &holder_name) {
    m_holder_name = holder_name;
    m_holder_name_isSet = true;
}

bool OAIFields::is_holder_name_Set() const{
    return m_holder_name_isSet;
}

bool OAIFields::is_holder_name_Valid() const{
    return m_holder_name_isValid;
}

QString OAIFields::getValidationCode() const {
    return m_validation_code;
}
void OAIFields::setValidationCode(const QString &validation_code) {
    m_validation_code = validation_code;
    m_validation_code_isSet = true;
}

bool OAIFields::is_validation_code_Set() const{
    return m_validation_code_isSet;
}

bool OAIFields::is_validation_code_Valid() const{
    return m_validation_code_isValid;
}

bool OAIFields::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holder_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFields::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_address_isValid && m_callback_url_isValid && m_card_number_isValid && m_document_isValid && m_due_date_isValid && m_holder_name_isValid && m_validation_code_isValid && true;
}

} // namespace OpenAPI
