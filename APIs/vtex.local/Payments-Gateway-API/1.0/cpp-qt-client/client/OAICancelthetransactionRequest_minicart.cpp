/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICancelthetransactionRequest_minicart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICancelthetransactionRequest_minicart::OAICancelthetransactionRequest_minicart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICancelthetransactionRequest_minicart::OAICancelthetransactionRequest_minicart() {
    this->initializeModel();
}

OAICancelthetransactionRequest_minicart::~OAICancelthetransactionRequest_minicart() {}

void OAICancelthetransactionRequest_minicart::initializeModel() {

    m_freight_isSet = false;
    m_freight_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;
}

void OAICancelthetransactionRequest_minicart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICancelthetransactionRequest_minicart::fromJsonObject(QJsonObject json) {

    m_freight_isValid = ::OpenAPI::fromJsonValue(m_freight, json[QString("freight")]);
    m_freight_isSet = !json[QString("freight")].isNull() && m_freight_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;
}

QString OAICancelthetransactionRequest_minicart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICancelthetransactionRequest_minicart::asJsonObject() const {
    QJsonObject obj;
    if (m_freight_isSet) {
        obj.insert(QString("freight"), ::OpenAPI::toJsonValue(m_freight));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_tax_isSet) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    return obj;
}

qint32 OAICancelthetransactionRequest_minicart::getFreight() const {
    return m_freight;
}
void OAICancelthetransactionRequest_minicart::setFreight(const qint32 &freight) {
    m_freight = freight;
    m_freight_isSet = true;
}

bool OAICancelthetransactionRequest_minicart::is_freight_Set() const{
    return m_freight_isSet;
}

bool OAICancelthetransactionRequest_minicart::is_freight_Valid() const{
    return m_freight_isValid;
}

QList<QJsonValue> OAICancelthetransactionRequest_minicart::getItems() const {
    return m_items;
}
void OAICancelthetransactionRequest_minicart::setItems(const QList<QJsonValue> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAICancelthetransactionRequest_minicart::is_items_Set() const{
    return m_items_isSet;
}

bool OAICancelthetransactionRequest_minicart::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAICancelthetransactionRequest_minicart::getTax() const {
    return m_tax;
}
void OAICancelthetransactionRequest_minicart::setTax(const qint32 &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAICancelthetransactionRequest_minicart::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAICancelthetransactionRequest_minicart::is_tax_Valid() const{
    return m_tax_isValid;
}

bool OAICancelthetransactionRequest_minicart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_freight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICancelthetransactionRequest_minicart::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
