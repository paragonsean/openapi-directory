/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsertRuleRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsertRuleRequest::OAIInsertRuleRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsertRuleRequest::OAIInsertRuleRequest() {
    this->initializeModel();
}

OAIInsertRuleRequest::~OAIInsertRuleRequest() {}

void OAIInsertRuleRequest::initializeModel() {

    m_antifraud_isSet = false;
    m_antifraud_isValid = false;

    m_begin_date_isSet = false;
    m_begin_date_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_connector_isSet = false;
    m_connector_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_date_intervals_isSet = false;
    m_date_intervals_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_installment_options_isSet = false;
    m_installment_options_isValid = false;

    m_installments_service_isSet = false;
    m_installments_service_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_is_self_authorized_isSet = false;
    m_is_self_authorized_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_multi_merchant_list_isSet = false;
    m_multi_merchant_list_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_payment_system_isSet = false;
    m_payment_system_isValid = false;

    m_requires_authentication_isSet = false;
    m_requires_authentication_isValid = false;

    m_sales_channels_isSet = false;
    m_sales_channels_isValid = false;
}

void OAIInsertRuleRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsertRuleRequest::fromJsonObject(QJsonObject json) {

    m_antifraud_isValid = ::OpenAPI::fromJsonValue(m_antifraud, json[QString("antifraud")]);
    m_antifraud_isSet = !json[QString("antifraud")].isNull() && m_antifraud_isValid;

    m_begin_date_isValid = ::OpenAPI::fromJsonValue(m_begin_date, json[QString("beginDate")]);
    m_begin_date_isSet = !json[QString("beginDate")].isNull() && m_begin_date_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_connector_isValid = ::OpenAPI::fromJsonValue(m_connector, json[QString("connector")]);
    m_connector_isSet = !json[QString("connector")].isNull() && m_connector_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_date_intervals_isValid = ::OpenAPI::fromJsonValue(m_date_intervals, json[QString("dateIntervals")]);
    m_date_intervals_isSet = !json[QString("dateIntervals")].isNull() && m_date_intervals_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_installment_options_isValid = ::OpenAPI::fromJsonValue(m_installment_options, json[QString("installmentOptions")]);
    m_installment_options_isSet = !json[QString("installmentOptions")].isNull() && m_installment_options_isValid;

    m_installments_service_isValid = ::OpenAPI::fromJsonValue(m_installments_service, json[QString("installmentsService")]);
    m_installments_service_isSet = !json[QString("installmentsService")].isNull() && m_installments_service_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_is_self_authorized_isValid = ::OpenAPI::fromJsonValue(m_is_self_authorized, json[QString("isSelfAuthorized")]);
    m_is_self_authorized_isSet = !json[QString("isSelfAuthorized")].isNull() && m_is_self_authorized_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_multi_merchant_list_isValid = ::OpenAPI::fromJsonValue(m_multi_merchant_list, json[QString("multiMerchantList")]);
    m_multi_merchant_list_isSet = !json[QString("multiMerchantList")].isNull() && m_multi_merchant_list_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_payment_system_isValid = ::OpenAPI::fromJsonValue(m_payment_system, json[QString("paymentSystem")]);
    m_payment_system_isSet = !json[QString("paymentSystem")].isNull() && m_payment_system_isValid;

    m_requires_authentication_isValid = ::OpenAPI::fromJsonValue(m_requires_authentication, json[QString("requiresAuthentication")]);
    m_requires_authentication_isSet = !json[QString("requiresAuthentication")].isNull() && m_requires_authentication_isValid;

    m_sales_channels_isValid = ::OpenAPI::fromJsonValue(m_sales_channels, json[QString("salesChannels")]);
    m_sales_channels_isSet = !json[QString("salesChannels")].isNull() && m_sales_channels_isValid;
}

QString OAIInsertRuleRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsertRuleRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_antifraud.isSet()) {
        obj.insert(QString("antifraud"), ::OpenAPI::toJsonValue(m_antifraud));
    }
    if (m_begin_date_isSet) {
        obj.insert(QString("beginDate"), ::OpenAPI::toJsonValue(m_begin_date));
    }
    if (m_condition_isSet) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_connector.isSet()) {
        obj.insert(QString("connector"), ::OpenAPI::toJsonValue(m_connector));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_date_intervals_isSet) {
        obj.insert(QString("dateIntervals"), ::OpenAPI::toJsonValue(m_date_intervals));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_installment_options_isSet) {
        obj.insert(QString("installmentOptions"), ::OpenAPI::toJsonValue(m_installment_options));
    }
    if (m_installments_service_isSet) {
        obj.insert(QString("installmentsService"), ::OpenAPI::toJsonValue(m_installments_service));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_is_self_authorized_isSet) {
        obj.insert(QString("isSelfAuthorized"), ::OpenAPI::toJsonValue(m_is_self_authorized));
    }
    if (m_issuer.isSet()) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_multi_merchant_list_isSet) {
        obj.insert(QString("multiMerchantList"), ::OpenAPI::toJsonValue(m_multi_merchant_list));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_payment_system.isSet()) {
        obj.insert(QString("paymentSystem"), ::OpenAPI::toJsonValue(m_payment_system));
    }
    if (m_requires_authentication_isSet) {
        obj.insert(QString("requiresAuthentication"), ::OpenAPI::toJsonValue(m_requires_authentication));
    }
    if (m_sales_channels.size() > 0) {
        obj.insert(QString("salesChannels"), ::OpenAPI::toJsonValue(m_sales_channels));
    }
    return obj;
}

OAIAntifraud OAIInsertRuleRequest::getAntifraud() const {
    return m_antifraud;
}
void OAIInsertRuleRequest::setAntifraud(const OAIAntifraud &antifraud) {
    m_antifraud = antifraud;
    m_antifraud_isSet = true;
}

bool OAIInsertRuleRequest::is_antifraud_Set() const{
    return m_antifraud_isSet;
}

bool OAIInsertRuleRequest::is_antifraud_Valid() const{
    return m_antifraud_isValid;
}

QString OAIInsertRuleRequest::getBeginDate() const {
    return m_begin_date;
}
void OAIInsertRuleRequest::setBeginDate(const QString &begin_date) {
    m_begin_date = begin_date;
    m_begin_date_isSet = true;
}

bool OAIInsertRuleRequest::is_begin_date_Set() const{
    return m_begin_date_isSet;
}

bool OAIInsertRuleRequest::is_begin_date_Valid() const{
    return m_begin_date_isValid;
}

QString OAIInsertRuleRequest::getCondition() const {
    return m_condition;
}
void OAIInsertRuleRequest::setCondition(const QString &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIInsertRuleRequest::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIInsertRuleRequest::is_condition_Valid() const{
    return m_condition_isValid;
}

OAIConnector OAIInsertRuleRequest::getConnector() const {
    return m_connector;
}
void OAIInsertRuleRequest::setConnector(const OAIConnector &connector) {
    m_connector = connector;
    m_connector_isSet = true;
}

bool OAIInsertRuleRequest::is_connector_Set() const{
    return m_connector_isSet;
}

bool OAIInsertRuleRequest::is_connector_Valid() const{
    return m_connector_isValid;
}

QString OAIInsertRuleRequest::getCountry() const {
    return m_country;
}
void OAIInsertRuleRequest::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIInsertRuleRequest::is_country_Set() const{
    return m_country_isSet;
}

bool OAIInsertRuleRequest::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIInsertRuleRequest::getDateIntervals() const {
    return m_date_intervals;
}
void OAIInsertRuleRequest::setDateIntervals(const QString &date_intervals) {
    m_date_intervals = date_intervals;
    m_date_intervals_isSet = true;
}

bool OAIInsertRuleRequest::is_date_intervals_Set() const{
    return m_date_intervals_isSet;
}

bool OAIInsertRuleRequest::is_date_intervals_Valid() const{
    return m_date_intervals_isValid;
}

bool OAIInsertRuleRequest::isEnabled() const {
    return m_enabled;
}
void OAIInsertRuleRequest::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIInsertRuleRequest::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIInsertRuleRequest::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIInsertRuleRequest::getEndDate() const {
    return m_end_date;
}
void OAIInsertRuleRequest::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIInsertRuleRequest::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIInsertRuleRequest::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIInsertRuleRequest::getInstallmentOptions() const {
    return m_installment_options;
}
void OAIInsertRuleRequest::setInstallmentOptions(const QString &installment_options) {
    m_installment_options = installment_options;
    m_installment_options_isSet = true;
}

bool OAIInsertRuleRequest::is_installment_options_Set() const{
    return m_installment_options_isSet;
}

bool OAIInsertRuleRequest::is_installment_options_Valid() const{
    return m_installment_options_isValid;
}

QString OAIInsertRuleRequest::getInstallmentsService() const {
    return m_installments_service;
}
void OAIInsertRuleRequest::setInstallmentsService(const QString &installments_service) {
    m_installments_service = installments_service;
    m_installments_service_isSet = true;
}

bool OAIInsertRuleRequest::is_installments_service_Set() const{
    return m_installments_service_isSet;
}

bool OAIInsertRuleRequest::is_installments_service_Valid() const{
    return m_installments_service_isValid;
}

bool OAIInsertRuleRequest::isIsDefault() const {
    return m_is_default;
}
void OAIInsertRuleRequest::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIInsertRuleRequest::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIInsertRuleRequest::is_is_default_Valid() const{
    return m_is_default_isValid;
}

QString OAIInsertRuleRequest::getIsSelfAuthorized() const {
    return m_is_self_authorized;
}
void OAIInsertRuleRequest::setIsSelfAuthorized(const QString &is_self_authorized) {
    m_is_self_authorized = is_self_authorized;
    m_is_self_authorized_isSet = true;
}

bool OAIInsertRuleRequest::is_is_self_authorized_Set() const{
    return m_is_self_authorized_isSet;
}

bool OAIInsertRuleRequest::is_is_self_authorized_Valid() const{
    return m_is_self_authorized_isValid;
}

OAIIssuer OAIInsertRuleRequest::getIssuer() const {
    return m_issuer;
}
void OAIInsertRuleRequest::setIssuer(const OAIIssuer &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIInsertRuleRequest::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIInsertRuleRequest::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAIInsertRuleRequest::getMultiMerchantList() const {
    return m_multi_merchant_list;
}
void OAIInsertRuleRequest::setMultiMerchantList(const QString &multi_merchant_list) {
    m_multi_merchant_list = multi_merchant_list;
    m_multi_merchant_list_isSet = true;
}

bool OAIInsertRuleRequest::is_multi_merchant_list_Set() const{
    return m_multi_merchant_list_isSet;
}

bool OAIInsertRuleRequest::is_multi_merchant_list_Valid() const{
    return m_multi_merchant_list_isValid;
}

QString OAIInsertRuleRequest::getName() const {
    return m_name;
}
void OAIInsertRuleRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInsertRuleRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInsertRuleRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAIPaymentSystem OAIInsertRuleRequest::getPaymentSystem() const {
    return m_payment_system;
}
void OAIInsertRuleRequest::setPaymentSystem(const OAIPaymentSystem &payment_system) {
    m_payment_system = payment_system;
    m_payment_system_isSet = true;
}

bool OAIInsertRuleRequest::is_payment_system_Set() const{
    return m_payment_system_isSet;
}

bool OAIInsertRuleRequest::is_payment_system_Valid() const{
    return m_payment_system_isValid;
}

QString OAIInsertRuleRequest::getRequiresAuthentication() const {
    return m_requires_authentication;
}
void OAIInsertRuleRequest::setRequiresAuthentication(const QString &requires_authentication) {
    m_requires_authentication = requires_authentication;
    m_requires_authentication_isSet = true;
}

bool OAIInsertRuleRequest::is_requires_authentication_Set() const{
    return m_requires_authentication_isSet;
}

bool OAIInsertRuleRequest::is_requires_authentication_Valid() const{
    return m_requires_authentication_isValid;
}

QList<OAISalesChannel> OAIInsertRuleRequest::getSalesChannels() const {
    return m_sales_channels;
}
void OAIInsertRuleRequest::setSalesChannels(const QList<OAISalesChannel> &sales_channels) {
    m_sales_channels = sales_channels;
    m_sales_channels_isSet = true;
}

bool OAIInsertRuleRequest::is_sales_channels_Set() const{
    return m_sales_channels_isSet;
}

bool OAIInsertRuleRequest::is_sales_channels_Valid() const{
    return m_sales_channels_isValid;
}

bool OAIInsertRuleRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_antifraud.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_begin_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_intervals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installment_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installments_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_self_authorized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_merchant_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_system.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsertRuleRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_antifraud_isValid && m_begin_date_isValid && m_condition_isValid && m_connector_isValid && m_country_isValid && m_date_intervals_isValid && m_enabled_isValid && m_end_date_isValid && m_installment_options_isValid && m_installments_service_isValid && m_is_default_isValid && m_is_self_authorized_isValid && m_issuer_isValid && m_multi_merchant_list_isValid && m_name_isValid && m_payment_system_isValid && m_requires_authentication_isValid && m_sales_channels_isValid && true;
}

} // namespace OpenAPI
