/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI4_DoauthorizationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI4_DoauthorizationRequest::OAI4_DoauthorizationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI4_DoauthorizationRequest::OAI4_DoauthorizationRequest() {
    this->initializeModel();
}

OAI4_DoauthorizationRequest::~OAI4_DoauthorizationRequest() {}

void OAI4_DoauthorizationRequest::initializeModel() {

    m_prepare_for_recurrency_isSet = false;
    m_prepare_for_recurrency_isValid = false;

    m_soft_descriptor_isSet = false;
    m_soft_descriptor_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;
}

void OAI4_DoauthorizationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI4_DoauthorizationRequest::fromJsonObject(QJsonObject json) {

    m_prepare_for_recurrency_isValid = ::OpenAPI::fromJsonValue(m_prepare_for_recurrency, json[QString("prepareForRecurrency")]);
    m_prepare_for_recurrency_isSet = !json[QString("prepareForRecurrency")].isNull() && m_prepare_for_recurrency_isValid;

    m_soft_descriptor_isValid = ::OpenAPI::fromJsonValue(m_soft_descriptor, json[QString("softDescriptor")]);
    m_soft_descriptor_isSet = !json[QString("softDescriptor")].isNull() && m_soft_descriptor_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transactionId")]);
    m_transaction_id_isSet = !json[QString("transactionId")].isNull() && m_transaction_id_isValid;
}

QString OAI4_DoauthorizationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI4_DoauthorizationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_prepare_for_recurrency_isSet) {
        obj.insert(QString("prepareForRecurrency"), ::OpenAPI::toJsonValue(m_prepare_for_recurrency));
    }
    if (m_soft_descriptor_isSet) {
        obj.insert(QString("softDescriptor"), ::OpenAPI::toJsonValue(m_soft_descriptor));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    return obj;
}

bool OAI4_DoauthorizationRequest::isPrepareForRecurrency() const {
    return m_prepare_for_recurrency;
}
void OAI4_DoauthorizationRequest::setPrepareForRecurrency(const bool &prepare_for_recurrency) {
    m_prepare_for_recurrency = prepare_for_recurrency;
    m_prepare_for_recurrency_isSet = true;
}

bool OAI4_DoauthorizationRequest::is_prepare_for_recurrency_Set() const{
    return m_prepare_for_recurrency_isSet;
}

bool OAI4_DoauthorizationRequest::is_prepare_for_recurrency_Valid() const{
    return m_prepare_for_recurrency_isValid;
}

QString OAI4_DoauthorizationRequest::getSoftDescriptor() const {
    return m_soft_descriptor;
}
void OAI4_DoauthorizationRequest::setSoftDescriptor(const QString &soft_descriptor) {
    m_soft_descriptor = soft_descriptor;
    m_soft_descriptor_isSet = true;
}

bool OAI4_DoauthorizationRequest::is_soft_descriptor_Set() const{
    return m_soft_descriptor_isSet;
}

bool OAI4_DoauthorizationRequest::is_soft_descriptor_Valid() const{
    return m_soft_descriptor_isValid;
}

QString OAI4_DoauthorizationRequest::getTransactionId() const {
    return m_transaction_id;
}
void OAI4_DoauthorizationRequest::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAI4_DoauthorizationRequest::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAI4_DoauthorizationRequest::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

bool OAI4_DoauthorizationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_prepare_for_recurrency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_soft_descriptor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI4_DoauthorizationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_prepare_for_recurrency_isValid && m_soft_descriptor_isValid && m_transaction_id_isValid && true;
}

} // namespace OpenAPI
