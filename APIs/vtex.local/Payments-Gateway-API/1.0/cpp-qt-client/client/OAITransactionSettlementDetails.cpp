/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionSettlementDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionSettlementDetails::OAITransactionSettlementDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionSettlementDetails::OAITransactionSettlementDetails() {
    this->initializeModel();
}

OAITransactionSettlementDetails::~OAITransactionSettlementDetails() {}

void OAITransactionSettlementDetails::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_requests_isSet = false;
    m_requests_isValid = false;
}

void OAITransactionSettlementDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionSettlementDetails::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_requests_isValid = ::OpenAPI::fromJsonValue(m_requests, json[QString("requests")]);
    m_requests_isSet = !json[QString("requests")].isNull() && m_requests_isValid;
}

QString OAITransactionSettlementDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionSettlementDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_requests.size() > 0) {
        obj.insert(QString("requests"), ::OpenAPI::toJsonValue(m_requests));
    }
    return obj;
}

QList<OAIAction> OAITransactionSettlementDetails::getActions() const {
    return m_actions;
}
void OAITransactionSettlementDetails::setActions(const QList<OAIAction> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAITransactionSettlementDetails::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAITransactionSettlementDetails::is_actions_Valid() const{
    return m_actions_isValid;
}

QList<OAIRequest> OAITransactionSettlementDetails::getRequests() const {
    return m_requests;
}
void OAITransactionSettlementDetails::setRequests(const QList<OAIRequest> &requests) {
    m_requests = requests;
    m_requests_isSet = true;
}

bool OAITransactionSettlementDetails::is_requests_Set() const{
    return m_requests_isSet;
}

bool OAITransactionSettlementDetails::is_requests_Valid() const{
    return m_requests_isValid;
}

bool OAITransactionSettlementDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionSettlementDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_actions_isValid && m_requests_isValid && true;
}

} // namespace OpenAPI
