/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsertAffiliationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsertAffiliationRequest::OAIInsertAffiliationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsertAffiliationRequest::OAIInsertAffiliationRequest() {
    this->initializeModel();
}

OAIInsertAffiliationRequest::~OAIInsertAffiliationRequest() {}

void OAIInsertAffiliationRequest::initializeModel() {

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_implementation_isSet = false;
    m_implementation_isValid = false;

    m_is_configured_isSet = false;
    m_is_configured_isValid = false;

    m_isdelivered_isSet = false;
    m_isdelivered_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIInsertAffiliationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsertAffiliationRequest::fromJsonObject(QJsonObject json) {

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_implementation_isValid = ::OpenAPI::fromJsonValue(m_implementation, json[QString("implementation")]);
    m_implementation_isSet = !json[QString("implementation")].isNull() && m_implementation_isValid;

    m_is_configured_isValid = ::OpenAPI::fromJsonValue(m_is_configured, json[QString("isConfigured")]);
    m_is_configured_isSet = !json[QString("isConfigured")].isNull() && m_is_configured_isValid;

    m_isdelivered_isValid = ::OpenAPI::fromJsonValue(m_isdelivered, json[QString("isdelivered")]);
    m_isdelivered_isSet = !json[QString("isdelivered")].isNull() && m_isdelivered_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIInsertAffiliationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsertAffiliationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration.size() > 0) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_implementation_isSet) {
        obj.insert(QString("implementation"), ::OpenAPI::toJsonValue(m_implementation));
    }
    if (m_is_configured_isSet) {
        obj.insert(QString("isConfigured"), ::OpenAPI::toJsonValue(m_is_configured));
    }
    if (m_isdelivered_isSet) {
        obj.insert(QString("isdelivered"), ::OpenAPI::toJsonValue(m_isdelivered));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<OAIConfiguration> OAIInsertAffiliationRequest::getConfiguration() const {
    return m_configuration;
}
void OAIInsertAffiliationRequest::setConfiguration(const QList<OAIConfiguration> &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIInsertAffiliationRequest::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIInsertAffiliationRequest::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAIInsertAffiliationRequest::getImplementation() const {
    return m_implementation;
}
void OAIInsertAffiliationRequest::setImplementation(const QString &implementation) {
    m_implementation = implementation;
    m_implementation_isSet = true;
}

bool OAIInsertAffiliationRequest::is_implementation_Set() const{
    return m_implementation_isSet;
}

bool OAIInsertAffiliationRequest::is_implementation_Valid() const{
    return m_implementation_isValid;
}

bool OAIInsertAffiliationRequest::isIsConfigured() const {
    return m_is_configured;
}
void OAIInsertAffiliationRequest::setIsConfigured(const bool &is_configured) {
    m_is_configured = is_configured;
    m_is_configured_isSet = true;
}

bool OAIInsertAffiliationRequest::is_is_configured_Set() const{
    return m_is_configured_isSet;
}

bool OAIInsertAffiliationRequest::is_is_configured_Valid() const{
    return m_is_configured_isValid;
}

bool OAIInsertAffiliationRequest::isIsdelivered() const {
    return m_isdelivered;
}
void OAIInsertAffiliationRequest::setIsdelivered(const bool &isdelivered) {
    m_isdelivered = isdelivered;
    m_isdelivered_isSet = true;
}

bool OAIInsertAffiliationRequest::is_isdelivered_Set() const{
    return m_isdelivered_isSet;
}

bool OAIInsertAffiliationRequest::is_isdelivered_Valid() const{
    return m_isdelivered_isValid;
}

QString OAIInsertAffiliationRequest::getName() const {
    return m_name;
}
void OAIInsertAffiliationRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInsertAffiliationRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInsertAffiliationRequest::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIInsertAffiliationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_implementation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_configured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isdelivered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsertAffiliationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_configuration_isValid && m_implementation_isValid && m_is_configured_isValid && m_isdelivered_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
