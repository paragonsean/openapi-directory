/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICancelthetransactionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICancelthetransactionRequest::OAICancelthetransactionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICancelthetransactionRequest::OAICancelthetransactionRequest() {
    this->initializeModel();
}

OAICancelthetransactionRequest::~OAICancelthetransactionRequest() {}

void OAICancelthetransactionRequest::initializeModel() {

    m_minicart_isSet = false;
    m_minicart_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAICancelthetransactionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICancelthetransactionRequest::fromJsonObject(QJsonObject json) {

    m_minicart_isValid = ::OpenAPI::fromJsonValue(m_minicart, json[QString("minicart")]);
    m_minicart_isSet = !json[QString("minicart")].isNull() && m_minicart_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAICancelthetransactionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICancelthetransactionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_minicart.isSet()) {
        obj.insert(QString("minicart"), ::OpenAPI::toJsonValue(m_minicart));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAICancelthetransactionRequest_minicart OAICancelthetransactionRequest::getMinicart() const {
    return m_minicart;
}
void OAICancelthetransactionRequest::setMinicart(const OAICancelthetransactionRequest_minicart &minicart) {
    m_minicart = minicart;
    m_minicart_isSet = true;
}

bool OAICancelthetransactionRequest::is_minicart_Set() const{
    return m_minicart_isSet;
}

bool OAICancelthetransactionRequest::is_minicart_Valid() const{
    return m_minicart_isValid;
}

qint32 OAICancelthetransactionRequest::getValue() const {
    return m_value;
}
void OAICancelthetransactionRequest::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAICancelthetransactionRequest::is_value_Set() const{
    return m_value_isSet;
}

bool OAICancelthetransactionRequest::is_value_Valid() const{
    return m_value_isValid;
}

bool OAICancelthetransactionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_minicart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICancelthetransactionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid && true;
}

} // namespace OpenAPI
