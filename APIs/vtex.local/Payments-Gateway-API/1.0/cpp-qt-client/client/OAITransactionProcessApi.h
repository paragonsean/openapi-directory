/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransactionProcessApi_H
#define OAI_OAITransactionProcessApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI1_CreateanewtransactionRequest.h"
#include "OAI2_SendPaymentsPublicRequest.h"
#include "OAI2_SendPaymentsWithSavedCreditCardRequest.h"
#include "OAI4_DoauthorizationRequest.h"
#include "OAIPaymentDetailsResponse.h"
#include "OAIStartTransactionResponse.h"
#include "OAITransactionDetailsResponse.h"
#include "OAITransactionSettlementDetails.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransactionProcessApi : public QObject {
    Q_OBJECT

public:
    OAITransactionProcessApi(const int timeOut = 0);
    ~OAITransactionProcessApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai1_createanewtransaction_request OAI1_CreateanewtransactionRequest [required]
    */
    virtual void 1_Createanewtransaction(const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &accept, const QString &content_type, const OAI1_CreateanewtransactionRequest &oai1_createanewtransaction_request);

    /**
    * @param[in]  order_id QString [required]
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  transaction_id QString [required]
    * @param[in]  oai2_send_payments_public_request QList<OAI2_SendPaymentsPublicRequest> [required]
    */
    virtual void 2_SendPaymentsPublic(const QString &order_id, const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &accept, const QString &content_type, const QString &transaction_id, const QList<OAI2_SendPaymentsPublicRequest> &oai2_send_payments_public_request);

    /**
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  transaction_id QString [required]
    * @param[in]  oai2_send_payments_with_saved_credit_card_request QList<OAI2_SendPaymentsWithSavedCreditCardRequest> [required]
    */
    virtual void 2_SendPaymentsWithSavedCreditCard(const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &accept, const QString &content_type, const QString &transaction_id, const QList<OAI2_SendPaymentsWithSavedCreditCardRequest> &oai2_send_payments_with_saved_credit_card_request);

    /**
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  transaction_id QString [required]
    * @param[in]  request_body QList<QList> [required]
    */
    virtual void 3_SendAdditionalData(const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &accept, const QString &content_type, const QString &transaction_id, const QList<QList> &request_body);

    /**
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  transaction_id QString [required]
    * @param[in]  oai4_doauthorization_request OAI4_DoauthorizationRequest [required]
    */
    virtual void 4_Doauthorization(const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &accept, const QString &content_type, const QString &transaction_id, const OAI4_DoauthorizationRequest &oai4_doauthorization_request);

    /**
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  transaction_id QString [required]
    * @param[in]  payment_id QString [required]
    */
    virtual void paymentDetails(const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &content_type, const QString &accept, const QString &transaction_id, const QString &payment_id);

    /**
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  transaction_id QString [required]
    */
    virtual void transactionDetails(const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &content_type, const QString &accept, const QString &transaction_id);

    /**
    * @param[in]  x_provider_api_app_key QString [required]
    * @param[in]  x_provider_api_app_token QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  transaction_id QString [required]
    */
    virtual void transactionSettlementDetails(const QString &x_provider_api_app_key, const QString &x_provider_api_app_token, const QString &content_type, const QString &accept, const QString &transaction_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void 1_CreateanewtransactionCallback(OAIHttpRequestWorker *worker);
    void 2_SendPaymentsPublicCallback(OAIHttpRequestWorker *worker);
    void 2_SendPaymentsWithSavedCreditCardCallback(OAIHttpRequestWorker *worker);
    void 3_SendAdditionalDataCallback(OAIHttpRequestWorker *worker);
    void 4_DoauthorizationCallback(OAIHttpRequestWorker *worker);
    void paymentDetailsCallback(OAIHttpRequestWorker *worker);
    void transactionDetailsCallback(OAIHttpRequestWorker *worker);
    void transactionSettlementDetailsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void 1_CreateanewtransactionSignal(OAIStartTransactionResponse summary);
    void 2_SendPaymentsPublicSignal();
    void 2_SendPaymentsWithSavedCreditCardSignal();
    void 3_SendAdditionalDataSignal();
    void 4_DoauthorizationSignal();
    void paymentDetailsSignal(OAIPaymentDetailsResponse summary);
    void transactionDetailsSignal(OAITransactionDetailsResponse summary);
    void transactionSettlementDetailsSignal(OAITransactionSettlementDetails summary);


    void 1_CreateanewtransactionSignalFull(OAIHttpRequestWorker *worker, OAIStartTransactionResponse summary);
    void 2_SendPaymentsPublicSignalFull(OAIHttpRequestWorker *worker);
    void 2_SendPaymentsWithSavedCreditCardSignalFull(OAIHttpRequestWorker *worker);
    void 3_SendAdditionalDataSignalFull(OAIHttpRequestWorker *worker);
    void 4_DoauthorizationSignalFull(OAIHttpRequestWorker *worker);
    void paymentDetailsSignalFull(OAIHttpRequestWorker *worker, OAIPaymentDetailsResponse summary);
    void transactionDetailsSignalFull(OAIHttpRequestWorker *worker, OAITransactionDetailsResponse summary);
    void transactionSettlementDetailsSignalFull(OAIHttpRequestWorker *worker, OAITransactionSettlementDetails summary);

    Q_DECL_DEPRECATED_X("Use 1_CreateanewtransactionSignalError() instead")
    void 1_CreateanewtransactionSignalE(OAIStartTransactionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void 1_CreateanewtransactionSignalError(OAIStartTransactionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 2_SendPaymentsPublicSignalError() instead")
    void 2_SendPaymentsPublicSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void 2_SendPaymentsPublicSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 2_SendPaymentsWithSavedCreditCardSignalError() instead")
    void 2_SendPaymentsWithSavedCreditCardSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void 2_SendPaymentsWithSavedCreditCardSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 3_SendAdditionalDataSignalError() instead")
    void 3_SendAdditionalDataSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void 3_SendAdditionalDataSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4_DoauthorizationSignalError() instead")
    void 4_DoauthorizationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void 4_DoauthorizationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentDetailsSignalError() instead")
    void paymentDetailsSignalE(OAIPaymentDetailsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentDetailsSignalError(OAIPaymentDetailsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionDetailsSignalError() instead")
    void transactionDetailsSignalE(OAITransactionDetailsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionDetailsSignalError(OAITransactionDetailsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionSettlementDetailsSignalError() instead")
    void transactionSettlementDetailsSignalE(OAITransactionSettlementDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionSettlementDetailsSignalError(OAITransactionSettlementDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use 1_CreateanewtransactionSignalErrorFull() instead")
    void 1_CreateanewtransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 1_CreateanewtransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 2_SendPaymentsPublicSignalErrorFull() instead")
    void 2_SendPaymentsPublicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 2_SendPaymentsPublicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 2_SendPaymentsWithSavedCreditCardSignalErrorFull() instead")
    void 2_SendPaymentsWithSavedCreditCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 2_SendPaymentsWithSavedCreditCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 3_SendAdditionalDataSignalErrorFull() instead")
    void 3_SendAdditionalDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 3_SendAdditionalDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 4_DoauthorizationSignalErrorFull() instead")
    void 4_DoauthorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 4_DoauthorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentDetailsSignalErrorFull() instead")
    void paymentDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionDetailsSignalErrorFull() instead")
    void transactionDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionSettlementDetailsSignalErrorFull() instead")
    void transactionSettlementDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionSettlementDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
