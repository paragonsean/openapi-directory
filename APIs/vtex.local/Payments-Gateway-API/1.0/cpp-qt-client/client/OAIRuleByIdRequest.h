/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRuleByIdRequest.h
 *
 * 
 */

#ifndef OAIRuleByIdRequest_H
#define OAIRuleByIdRequest_H

#include <QJsonObject>

#include "OAIAntifraud1.h"
#include "OAIConnector.h"
#include "OAIInstallmentOptions.h"
#include "OAIIssuer.h"
#include "OAIPaymentSystem.h"
#include "OAISalesChannel.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAntifraud1;
class OAIConnector;
class OAIInstallmentOptions;
class OAIIssuer;
class OAIPaymentSystem;
class OAISalesChannel;

class OAIRuleByIdRequest : public OAIObject {
public:
    OAIRuleByIdRequest();
    OAIRuleByIdRequest(QString json);
    ~OAIRuleByIdRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAntifraud1 getAntifraud() const;
    void setAntifraud(const OAIAntifraud1 &antifraud);
    bool is_antifraud_Set() const;
    bool is_antifraud_Valid() const;

    QString getBeginDate() const;
    void setBeginDate(const QString &begin_date);
    bool is_begin_date_Set() const;
    bool is_begin_date_Valid() const;

    QString getCondition() const;
    void setCondition(const QString &condition);
    bool is_condition_Set() const;
    bool is_condition_Valid() const;

    OAIConnector getConnector() const;
    void setConnector(const OAIConnector &connector);
    bool is_connector_Set() const;
    bool is_connector_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    QString getDateIntervals() const;
    void setDateIntervals(const QString &date_intervals);
    bool is_date_intervals_Set() const;
    bool is_date_intervals_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QString getEndDate() const;
    void setEndDate(const QString &end_date);
    bool is_end_date_Set() const;
    bool is_end_date_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIInstallmentOptions getInstallmentOptions() const;
    void setInstallmentOptions(const OAIInstallmentOptions &installment_options);
    bool is_installment_options_Set() const;
    bool is_installment_options_Valid() const;

    QString getIsDefault() const;
    void setIsDefault(const QString &is_default);
    bool is_is_default_Set() const;
    bool is_is_default_Valid() const;

    QString getIsSelfAuthorized() const;
    void setIsSelfAuthorized(const QString &is_self_authorized);
    bool is_is_self_authorized_Set() const;
    bool is_is_self_authorized_Valid() const;

    OAIIssuer getIssuer() const;
    void setIssuer(const OAIIssuer &issuer);
    bool is_issuer_Set() const;
    bool is_issuer_Valid() const;

    QString getMultiMerchantList() const;
    void setMultiMerchantList(const QString &multi_merchant_list);
    bool is_multi_merchant_list_Set() const;
    bool is_multi_merchant_list_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIPaymentSystem getPaymentSystem() const;
    void setPaymentSystem(const OAIPaymentSystem &payment_system);
    bool is_payment_system_Set() const;
    bool is_payment_system_Valid() const;

    QList<OAISalesChannel> getSalesChannels() const;
    void setSalesChannels(const QList<OAISalesChannel> &sales_channels);
    bool is_sales_channels_Set() const;
    bool is_sales_channels_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAntifraud1 m_antifraud;
    bool m_antifraud_isSet;
    bool m_antifraud_isValid;

    QString m_begin_date;
    bool m_begin_date_isSet;
    bool m_begin_date_isValid;

    QString m_condition;
    bool m_condition_isSet;
    bool m_condition_isValid;

    OAIConnector m_connector;
    bool m_connector_isSet;
    bool m_connector_isValid;

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    QString m_date_intervals;
    bool m_date_intervals_isSet;
    bool m_date_intervals_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QString m_end_date;
    bool m_end_date_isSet;
    bool m_end_date_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIInstallmentOptions m_installment_options;
    bool m_installment_options_isSet;
    bool m_installment_options_isValid;

    QString m_is_default;
    bool m_is_default_isSet;
    bool m_is_default_isValid;

    QString m_is_self_authorized;
    bool m_is_self_authorized_isSet;
    bool m_is_self_authorized_isValid;

    OAIIssuer m_issuer;
    bool m_issuer_isSet;
    bool m_issuer_isValid;

    QString m_multi_merchant_list;
    bool m_multi_merchant_list_isSet;
    bool m_multi_merchant_list_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIPaymentSystem m_payment_system;
    bool m_payment_system_isSet;
    bool m_payment_system_isValid;

    QList<OAISalesChannel> m_sales_channels;
    bool m_sales_channels_isSet;
    bool m_sales_channels_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRuleByIdRequest)

#endif // OAIRuleByIdRequest_H
