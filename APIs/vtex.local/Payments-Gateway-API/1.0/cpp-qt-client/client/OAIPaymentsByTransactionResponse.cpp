/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentsByTransactionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentsByTransactionResponse::OAIPaymentsByTransactionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentsByTransactionResponse::OAIPaymentsByTransactionResponse() {
    this->initializeModel();
}

OAIPaymentsByTransactionResponse::~OAIPaymentsByTransactionResponse() {}

void OAIPaymentsByTransactionResponse::initializeModel() {

    m_connector_responses_isSet = false;
    m_connector_responses_isValid = false;

    m_show_connector_responses_isSet = false;
    m_show_connector_responses_isValid = false;

    m_allow_installments_isSet = false;
    m_allow_installments_isValid = false;

    m_allow_issuer_isSet = false;
    m_allow_issuer_isValid = false;

    m_allow_notification_isSet = false;
    m_allow_notification_isValid = false;

    m_connector_isSet = false;
    m_connector_isValid = false;

    m_connector_response_isSet = false;
    m_connector_response_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_installments_isSet = false;
    m_installments_isValid = false;

    m_installments_interest_rate_isSet = false;
    m_installments_interest_rate_isValid = false;

    m_installments_value_isSet = false;
    m_installments_value_isValid = false;

    m_is_available_isSet = false;
    m_is_available_isValid = false;

    m_is_custom_isSet = false;
    m_is_custom_isValid = false;

    m_merchant_name_isSet = false;
    m_merchant_name_isValid = false;

    m_payment_system_isSet = false;
    m_payment_system_isValid = false;

    m_payment_system_name_isSet = false;
    m_payment_system_name_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_reference_value_isSet = false;
    m_reference_value_isValid = false;

    m_return_code_isSet = false;
    m_return_code_isValid = false;

    m_return_message_isSet = false;
    m_return_message_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_sheets_isSet = false;
    m_sheets_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tid_isSet = false;
    m_tid_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPaymentsByTransactionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentsByTransactionResponse::fromJsonObject(QJsonObject json) {

    m_connector_responses_isValid = ::OpenAPI::fromJsonValue(m_connector_responses, json[QString("ConnectorResponses")]);
    m_connector_responses_isSet = !json[QString("ConnectorResponses")].isNull() && m_connector_responses_isValid;

    m_show_connector_responses_isValid = ::OpenAPI::fromJsonValue(m_show_connector_responses, json[QString("ShowConnectorResponses")]);
    m_show_connector_responses_isSet = !json[QString("ShowConnectorResponses")].isNull() && m_show_connector_responses_isValid;

    m_allow_installments_isValid = ::OpenAPI::fromJsonValue(m_allow_installments, json[QString("allowInstallments")]);
    m_allow_installments_isSet = !json[QString("allowInstallments")].isNull() && m_allow_installments_isValid;

    m_allow_issuer_isValid = ::OpenAPI::fromJsonValue(m_allow_issuer, json[QString("allowIssuer")]);
    m_allow_issuer_isSet = !json[QString("allowIssuer")].isNull() && m_allow_issuer_isValid;

    m_allow_notification_isValid = ::OpenAPI::fromJsonValue(m_allow_notification, json[QString("allowNotification")]);
    m_allow_notification_isSet = !json[QString("allowNotification")].isNull() && m_allow_notification_isValid;

    m_connector_isValid = ::OpenAPI::fromJsonValue(m_connector, json[QString("connector")]);
    m_connector_isSet = !json[QString("connector")].isNull() && m_connector_isValid;

    m_connector_response_isValid = ::OpenAPI::fromJsonValue(m_connector_response, json[QString("connectorResponse")]);
    m_connector_response_isSet = !json[QString("connectorResponse")].isNull() && m_connector_response_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_installments_isValid = ::OpenAPI::fromJsonValue(m_installments, json[QString("installments")]);
    m_installments_isSet = !json[QString("installments")].isNull() && m_installments_isValid;

    m_installments_interest_rate_isValid = ::OpenAPI::fromJsonValue(m_installments_interest_rate, json[QString("installmentsInterestRate")]);
    m_installments_interest_rate_isSet = !json[QString("installmentsInterestRate")].isNull() && m_installments_interest_rate_isValid;

    m_installments_value_isValid = ::OpenAPI::fromJsonValue(m_installments_value, json[QString("installmentsValue")]);
    m_installments_value_isSet = !json[QString("installmentsValue")].isNull() && m_installments_value_isValid;

    m_is_available_isValid = ::OpenAPI::fromJsonValue(m_is_available, json[QString("isAvailable")]);
    m_is_available_isSet = !json[QString("isAvailable")].isNull() && m_is_available_isValid;

    m_is_custom_isValid = ::OpenAPI::fromJsonValue(m_is_custom, json[QString("isCustom")]);
    m_is_custom_isSet = !json[QString("isCustom")].isNull() && m_is_custom_isValid;

    m_merchant_name_isValid = ::OpenAPI::fromJsonValue(m_merchant_name, json[QString("merchantName")]);
    m_merchant_name_isSet = !json[QString("merchantName")].isNull() && m_merchant_name_isValid;

    m_payment_system_isValid = ::OpenAPI::fromJsonValue(m_payment_system, json[QString("paymentSystem")]);
    m_payment_system_isSet = !json[QString("paymentSystem")].isNull() && m_payment_system_isValid;

    m_payment_system_name_isValid = ::OpenAPI::fromJsonValue(m_payment_system_name, json[QString("paymentSystemName")]);
    m_payment_system_name_isSet = !json[QString("paymentSystemName")].isNull() && m_payment_system_name_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_reference_value_isValid = ::OpenAPI::fromJsonValue(m_reference_value, json[QString("referenceValue")]);
    m_reference_value_isSet = !json[QString("referenceValue")].isNull() && m_reference_value_isValid;

    m_return_code_isValid = ::OpenAPI::fromJsonValue(m_return_code, json[QString("returnCode")]);
    m_return_code_isSet = !json[QString("returnCode")].isNull() && m_return_code_isValid;

    m_return_message_isValid = ::OpenAPI::fromJsonValue(m_return_message, json[QString("returnMessage")]);
    m_return_message_isSet = !json[QString("returnMessage")].isNull() && m_return_message_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_sheets_isValid = ::OpenAPI::fromJsonValue(m_sheets, json[QString("sheets")]);
    m_sheets_isSet = !json[QString("sheets")].isNull() && m_sheets_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tid_isValid = ::OpenAPI::fromJsonValue(m_tid, json[QString("tid")]);
    m_tid_isSet = !json[QString("tid")].isNull() && m_tid_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIPaymentsByTransactionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentsByTransactionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_connector_responses_isSet) {
        obj.insert(QString("ConnectorResponses"), ::OpenAPI::toJsonValue(m_connector_responses));
    }
    if (m_show_connector_responses_isSet) {
        obj.insert(QString("ShowConnectorResponses"), ::OpenAPI::toJsonValue(m_show_connector_responses));
    }
    if (m_allow_installments_isSet) {
        obj.insert(QString("allowInstallments"), ::OpenAPI::toJsonValue(m_allow_installments));
    }
    if (m_allow_issuer_isSet) {
        obj.insert(QString("allowIssuer"), ::OpenAPI::toJsonValue(m_allow_issuer));
    }
    if (m_allow_notification_isSet) {
        obj.insert(QString("allowNotification"), ::OpenAPI::toJsonValue(m_allow_notification));
    }
    if (m_connector_isSet) {
        obj.insert(QString("connector"), ::OpenAPI::toJsonValue(m_connector));
    }
    if (m_connector_response_isSet) {
        obj.insert(QString("connectorResponse"), ::OpenAPI::toJsonValue(m_connector_response));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_installments_isSet) {
        obj.insert(QString("installments"), ::OpenAPI::toJsonValue(m_installments));
    }
    if (m_installments_interest_rate_isSet) {
        obj.insert(QString("installmentsInterestRate"), ::OpenAPI::toJsonValue(m_installments_interest_rate));
    }
    if (m_installments_value_isSet) {
        obj.insert(QString("installmentsValue"), ::OpenAPI::toJsonValue(m_installments_value));
    }
    if (m_is_available_isSet) {
        obj.insert(QString("isAvailable"), ::OpenAPI::toJsonValue(m_is_available));
    }
    if (m_is_custom_isSet) {
        obj.insert(QString("isCustom"), ::OpenAPI::toJsonValue(m_is_custom));
    }
    if (m_merchant_name_isSet) {
        obj.insert(QString("merchantName"), ::OpenAPI::toJsonValue(m_merchant_name));
    }
    if (m_payment_system_isSet) {
        obj.insert(QString("paymentSystem"), ::OpenAPI::toJsonValue(m_payment_system));
    }
    if (m_payment_system_name_isSet) {
        obj.insert(QString("paymentSystemName"), ::OpenAPI::toJsonValue(m_payment_system_name));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_reference_value_isSet) {
        obj.insert(QString("referenceValue"), ::OpenAPI::toJsonValue(m_reference_value));
    }
    if (m_return_code_isSet) {
        obj.insert(QString("returnCode"), ::OpenAPI::toJsonValue(m_return_code));
    }
    if (m_return_message_isSet) {
        obj.insert(QString("returnMessage"), ::OpenAPI::toJsonValue(m_return_message));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_sheets_isSet) {
        obj.insert(QString("sheets"), ::OpenAPI::toJsonValue(m_sheets));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tid_isSet) {
        obj.insert(QString("tid"), ::OpenAPI::toJsonValue(m_tid));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIPaymentsByTransactionResponse::getConnectorResponses() const {
    return m_connector_responses;
}
void OAIPaymentsByTransactionResponse::setConnectorResponses(const QString &connector_responses) {
    m_connector_responses = connector_responses;
    m_connector_responses_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_connector_responses_Set() const{
    return m_connector_responses_isSet;
}

bool OAIPaymentsByTransactionResponse::is_connector_responses_Valid() const{
    return m_connector_responses_isValid;
}

bool OAIPaymentsByTransactionResponse::isShowConnectorResponses() const {
    return m_show_connector_responses;
}
void OAIPaymentsByTransactionResponse::setShowConnectorResponses(const bool &show_connector_responses) {
    m_show_connector_responses = show_connector_responses;
    m_show_connector_responses_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_show_connector_responses_Set() const{
    return m_show_connector_responses_isSet;
}

bool OAIPaymentsByTransactionResponse::is_show_connector_responses_Valid() const{
    return m_show_connector_responses_isValid;
}

bool OAIPaymentsByTransactionResponse::isAllowInstallments() const {
    return m_allow_installments;
}
void OAIPaymentsByTransactionResponse::setAllowInstallments(const bool &allow_installments) {
    m_allow_installments = allow_installments;
    m_allow_installments_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_allow_installments_Set() const{
    return m_allow_installments_isSet;
}

bool OAIPaymentsByTransactionResponse::is_allow_installments_Valid() const{
    return m_allow_installments_isValid;
}

bool OAIPaymentsByTransactionResponse::isAllowIssuer() const {
    return m_allow_issuer;
}
void OAIPaymentsByTransactionResponse::setAllowIssuer(const bool &allow_issuer) {
    m_allow_issuer = allow_issuer;
    m_allow_issuer_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_allow_issuer_Set() const{
    return m_allow_issuer_isSet;
}

bool OAIPaymentsByTransactionResponse::is_allow_issuer_Valid() const{
    return m_allow_issuer_isValid;
}

bool OAIPaymentsByTransactionResponse::isAllowNotification() const {
    return m_allow_notification;
}
void OAIPaymentsByTransactionResponse::setAllowNotification(const bool &allow_notification) {
    m_allow_notification = allow_notification;
    m_allow_notification_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_allow_notification_Set() const{
    return m_allow_notification_isSet;
}

bool OAIPaymentsByTransactionResponse::is_allow_notification_Valid() const{
    return m_allow_notification_isValid;
}

QString OAIPaymentsByTransactionResponse::getConnector() const {
    return m_connector;
}
void OAIPaymentsByTransactionResponse::setConnector(const QString &connector) {
    m_connector = connector;
    m_connector_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_connector_Set() const{
    return m_connector_isSet;
}

bool OAIPaymentsByTransactionResponse::is_connector_Valid() const{
    return m_connector_isValid;
}

QString OAIPaymentsByTransactionResponse::getConnectorResponse() const {
    return m_connector_response;
}
void OAIPaymentsByTransactionResponse::setConnectorResponse(const QString &connector_response) {
    m_connector_response = connector_response;
    m_connector_response_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_connector_response_Set() const{
    return m_connector_response_isSet;
}

bool OAIPaymentsByTransactionResponse::is_connector_response_Valid() const{
    return m_connector_response_isValid;
}

QString OAIPaymentsByTransactionResponse::getCurrencyCode() const {
    return m_currency_code;
}
void OAIPaymentsByTransactionResponse::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIPaymentsByTransactionResponse::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIPaymentsByTransactionResponse::getDescription() const {
    return m_description;
}
void OAIPaymentsByTransactionResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPaymentsByTransactionResponse::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIFields1> OAIPaymentsByTransactionResponse::getFields() const {
    return m_fields;
}
void OAIPaymentsByTransactionResponse::setFields(const QList<OAIFields1> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIPaymentsByTransactionResponse::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAIPaymentsByTransactionResponse::getGroup() const {
    return m_group;
}
void OAIPaymentsByTransactionResponse::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_group_Set() const{
    return m_group_isSet;
}

bool OAIPaymentsByTransactionResponse::is_group_Valid() const{
    return m_group_isValid;
}

QString OAIPaymentsByTransactionResponse::getId() const {
    return m_id;
}
void OAIPaymentsByTransactionResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPaymentsByTransactionResponse::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIPaymentsByTransactionResponse::getInstallments() const {
    return m_installments;
}
void OAIPaymentsByTransactionResponse::setInstallments(const qint32 &installments) {
    m_installments = installments;
    m_installments_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_installments_Set() const{
    return m_installments_isSet;
}

bool OAIPaymentsByTransactionResponse::is_installments_Valid() const{
    return m_installments_isValid;
}

qint32 OAIPaymentsByTransactionResponse::getInstallmentsInterestRate() const {
    return m_installments_interest_rate;
}
void OAIPaymentsByTransactionResponse::setInstallmentsInterestRate(const qint32 &installments_interest_rate) {
    m_installments_interest_rate = installments_interest_rate;
    m_installments_interest_rate_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_installments_interest_rate_Set() const{
    return m_installments_interest_rate_isSet;
}

bool OAIPaymentsByTransactionResponse::is_installments_interest_rate_Valid() const{
    return m_installments_interest_rate_isValid;
}

qint32 OAIPaymentsByTransactionResponse::getInstallmentsValue() const {
    return m_installments_value;
}
void OAIPaymentsByTransactionResponse::setInstallmentsValue(const qint32 &installments_value) {
    m_installments_value = installments_value;
    m_installments_value_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_installments_value_Set() const{
    return m_installments_value_isSet;
}

bool OAIPaymentsByTransactionResponse::is_installments_value_Valid() const{
    return m_installments_value_isValid;
}

bool OAIPaymentsByTransactionResponse::isIsAvailable() const {
    return m_is_available;
}
void OAIPaymentsByTransactionResponse::setIsAvailable(const bool &is_available) {
    m_is_available = is_available;
    m_is_available_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_is_available_Set() const{
    return m_is_available_isSet;
}

bool OAIPaymentsByTransactionResponse::is_is_available_Valid() const{
    return m_is_available_isValid;
}

bool OAIPaymentsByTransactionResponse::isIsCustom() const {
    return m_is_custom;
}
void OAIPaymentsByTransactionResponse::setIsCustom(const bool &is_custom) {
    m_is_custom = is_custom;
    m_is_custom_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_is_custom_Set() const{
    return m_is_custom_isSet;
}

bool OAIPaymentsByTransactionResponse::is_is_custom_Valid() const{
    return m_is_custom_isValid;
}

QString OAIPaymentsByTransactionResponse::getMerchantName() const {
    return m_merchant_name;
}
void OAIPaymentsByTransactionResponse::setMerchantName(const QString &merchant_name) {
    m_merchant_name = merchant_name;
    m_merchant_name_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_merchant_name_Set() const{
    return m_merchant_name_isSet;
}

bool OAIPaymentsByTransactionResponse::is_merchant_name_Valid() const{
    return m_merchant_name_isValid;
}

qint32 OAIPaymentsByTransactionResponse::getPaymentSystem() const {
    return m_payment_system;
}
void OAIPaymentsByTransactionResponse::setPaymentSystem(const qint32 &payment_system) {
    m_payment_system = payment_system;
    m_payment_system_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_payment_system_Set() const{
    return m_payment_system_isSet;
}

bool OAIPaymentsByTransactionResponse::is_payment_system_Valid() const{
    return m_payment_system_isValid;
}

QString OAIPaymentsByTransactionResponse::getPaymentSystemName() const {
    return m_payment_system_name;
}
void OAIPaymentsByTransactionResponse::setPaymentSystemName(const QString &payment_system_name) {
    m_payment_system_name = payment_system_name;
    m_payment_system_name_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_payment_system_name_Set() const{
    return m_payment_system_name_isSet;
}

bool OAIPaymentsByTransactionResponse::is_payment_system_name_Valid() const{
    return m_payment_system_name_isValid;
}

QString OAIPaymentsByTransactionResponse::getProvider() const {
    return m_provider;
}
void OAIPaymentsByTransactionResponse::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIPaymentsByTransactionResponse::is_provider_Valid() const{
    return m_provider_isValid;
}

qint32 OAIPaymentsByTransactionResponse::getReferenceValue() const {
    return m_reference_value;
}
void OAIPaymentsByTransactionResponse::setReferenceValue(const qint32 &reference_value) {
    m_reference_value = reference_value;
    m_reference_value_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_reference_value_Set() const{
    return m_reference_value_isSet;
}

bool OAIPaymentsByTransactionResponse::is_reference_value_Valid() const{
    return m_reference_value_isValid;
}

QString OAIPaymentsByTransactionResponse::getReturnCode() const {
    return m_return_code;
}
void OAIPaymentsByTransactionResponse::setReturnCode(const QString &return_code) {
    m_return_code = return_code;
    m_return_code_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_return_code_Set() const{
    return m_return_code_isSet;
}

bool OAIPaymentsByTransactionResponse::is_return_code_Valid() const{
    return m_return_code_isValid;
}

QString OAIPaymentsByTransactionResponse::getReturnMessage() const {
    return m_return_message;
}
void OAIPaymentsByTransactionResponse::setReturnMessage(const QString &return_message) {
    m_return_message = return_message;
    m_return_message_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_return_message_Set() const{
    return m_return_message_isSet;
}

bool OAIPaymentsByTransactionResponse::is_return_message_Valid() const{
    return m_return_message_isValid;
}

OAISelf OAIPaymentsByTransactionResponse::getSelf() const {
    return m_self;
}
void OAIPaymentsByTransactionResponse::setSelf(const OAISelf &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_self_Set() const{
    return m_self_isSet;
}

bool OAIPaymentsByTransactionResponse::is_self_Valid() const{
    return m_self_isValid;
}

QString OAIPaymentsByTransactionResponse::getSheets() const {
    return m_sheets;
}
void OAIPaymentsByTransactionResponse::setSheets(const QString &sheets) {
    m_sheets = sheets;
    m_sheets_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_sheets_Set() const{
    return m_sheets_isSet;
}

bool OAIPaymentsByTransactionResponse::is_sheets_Valid() const{
    return m_sheets_isValid;
}

QString OAIPaymentsByTransactionResponse::getStatus() const {
    return m_status;
}
void OAIPaymentsByTransactionResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPaymentsByTransactionResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPaymentsByTransactionResponse::getTid() const {
    return m_tid;
}
void OAIPaymentsByTransactionResponse::setTid(const QString &tid) {
    m_tid = tid;
    m_tid_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_tid_Set() const{
    return m_tid_isSet;
}

bool OAIPaymentsByTransactionResponse::is_tid_Valid() const{
    return m_tid_isValid;
}

qint32 OAIPaymentsByTransactionResponse::getValue() const {
    return m_value;
}
void OAIPaymentsByTransactionResponse::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPaymentsByTransactionResponse::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPaymentsByTransactionResponse::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPaymentsByTransactionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector_responses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_connector_responses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_installments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installments_interest_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installments_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_custom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_system_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentsByTransactionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connector_responses_isValid && m_show_connector_responses_isValid && m_allow_installments_isValid && m_allow_issuer_isValid && m_allow_notification_isValid && m_connector_isValid && m_connector_response_isValid && m_currency_code_isValid && m_description_isValid && m_fields_isValid && m_group_isValid && m_id_isValid && m_installments_isValid && m_installments_interest_rate_isValid && m_installments_value_isValid && m_is_available_isValid && m_is_custom_isValid && m_merchant_name_isValid && m_payment_system_isValid && m_payment_system_name_isValid && m_provider_isValid && m_reference_value_isValid && m_return_code_isValid && m_return_message_isValid && m_self_isValid && m_sheets_isValid && m_status_isValid && m_tid_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
