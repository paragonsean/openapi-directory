# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Option(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interest_rate: float=None, quantity: int=None, value: float=None):
        """Option - a model defined in OpenAPI

        :param interest_rate: The interest_rate of this Option.
        :param quantity: The quantity of this Option.
        :param value: The value of this Option.
        """
        self.openapi_types = {
            'interest_rate': float,
            'quantity': int,
            'value': float
        }

        self.attribute_map = {
            'interest_rate': 'interestRate',
            'quantity': 'quantity',
            'value': 'value'
        }

        self._interest_rate = interest_rate
        self._quantity = quantity
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Option':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Option of this Option.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interest_rate(self):
        """Gets the interest_rate of this Option.


        :return: The interest_rate of this Option.
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this Option.


        :param interest_rate: The interest_rate of this Option.
        :type interest_rate: float
        """
        if interest_rate is None:
            raise ValueError("Invalid value for `interest_rate`, must not be `None`")

        self._interest_rate = interest_rate

    @property
    def quantity(self):
        """Gets the quantity of this Option.


        :return: The quantity of this Option.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Option.


        :param quantity: The quantity of this Option.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def value(self):
        """Gets the value of this Option.


        :return: The value of this Option.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Option.


        :param value: The value of this Option.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
