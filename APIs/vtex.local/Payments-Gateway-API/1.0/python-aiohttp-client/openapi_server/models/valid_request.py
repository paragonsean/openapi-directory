# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.installment import Installment
from openapi_server import util


class ValidRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, installments: List[Installment]=None, value: float=None):
        """ValidRequest - a model defined in OpenAPI

        :param installments: The installments of this ValidRequest.
        :param value: The value of this ValidRequest.
        """
        self.openapi_types = {
            'installments': List[Installment],
            'value': float
        }

        self.attribute_map = {
            'installments': 'installments',
            'value': 'value'
        }

        self._installments = installments
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValidRequest of this ValidRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def installments(self):
        """Gets the installments of this ValidRequest.

        

        :return: The installments of this ValidRequest.
        :rtype: List[Installment]
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this ValidRequest.

        

        :param installments: The installments of this ValidRequest.
        :type installments: List[Installment]
        """
        if installments is None:
            raise ValueError("Invalid value for `installments`, must not be `None`")

        self._installments = installments

    @property
    def value(self):
        """Gets the value of this ValidRequest.


        :return: The value of this ValidRequest.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ValidRequest.


        :param value: The value of this ValidRequest.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
