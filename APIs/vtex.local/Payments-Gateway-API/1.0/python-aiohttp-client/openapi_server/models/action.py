# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment1 import Payment1
from openapi_server import util


class Action(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_response: str=None, _date: str=None, payment: Payment1=None, payment_id: str=None, type: str=None, value: int=None):
        """Action - a model defined in OpenAPI

        :param connector_response: The connector_response of this Action.
        :param _date: The _date of this Action.
        :param payment: The payment of this Action.
        :param payment_id: The payment_id of this Action.
        :param type: The type of this Action.
        :param value: The value of this Action.
        """
        self.openapi_types = {
            'connector_response': str,
            '_date': str,
            'payment': Payment1,
            'payment_id': str,
            'type': str,
            'value': int
        }

        self.attribute_map = {
            'connector_response': 'connectorResponse',
            '_date': 'date',
            'payment': 'payment',
            'payment_id': 'paymentId',
            'type': 'type',
            'value': 'value'
        }

        self._connector_response = connector_response
        self.__date = _date
        self._payment = payment
        self._payment_id = payment_id
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Action':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Action of this Action.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_response(self):
        """Gets the connector_response of this Action.


        :return: The connector_response of this Action.
        :rtype: str
        """
        return self._connector_response

    @connector_response.setter
    def connector_response(self, connector_response):
        """Sets the connector_response of this Action.


        :param connector_response: The connector_response of this Action.
        :type connector_response: str
        """
        if connector_response is None:
            raise ValueError("Invalid value for `connector_response`, must not be `None`")

        self._connector_response = connector_response

    @property
    def _date(self):
        """Gets the _date of this Action.


        :return: The _date of this Action.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Action.


        :param _date: The _date of this Action.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def payment(self):
        """Gets the payment of this Action.


        :return: The payment of this Action.
        :rtype: Payment1
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this Action.


        :param payment: The payment of this Action.
        :type payment: Payment1
        """
        if payment is None:
            raise ValueError("Invalid value for `payment`, must not be `None`")

        self._payment = payment

    @property
    def payment_id(self):
        """Gets the payment_id of this Action.


        :return: The payment_id of this Action.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this Action.


        :param payment_id: The payment_id of this Action.
        :type payment_id: str
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")

        self._payment_id = payment_id

    @property
    def type(self):
        """Gets the type of this Action.


        :return: The type of this Action.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Action.


        :param type: The type of this Action.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def value(self):
        """Gets the value of this Action.


        :return: The value of this Action.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Action.


        :param value: The value of this Action.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
