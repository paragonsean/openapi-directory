# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fields import Fields
from openapi_server.models.transaction import Transaction
from openapi_server import util


class Model2SendPaymentsPublicRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, fields: Fields=None, installments: int=None, installments_interest_rate: int=None, installments_value: int=None, payment_system: int=None, reference_value: int=None, transaction: Transaction=None, value: int=None):
        """Model2SendPaymentsPublicRequest - a model defined in OpenAPI

        :param currency_code: The currency_code of this Model2SendPaymentsPublicRequest.
        :param fields: The fields of this Model2SendPaymentsPublicRequest.
        :param installments: The installments of this Model2SendPaymentsPublicRequest.
        :param installments_interest_rate: The installments_interest_rate of this Model2SendPaymentsPublicRequest.
        :param installments_value: The installments_value of this Model2SendPaymentsPublicRequest.
        :param payment_system: The payment_system of this Model2SendPaymentsPublicRequest.
        :param reference_value: The reference_value of this Model2SendPaymentsPublicRequest.
        :param transaction: The transaction of this Model2SendPaymentsPublicRequest.
        :param value: The value of this Model2SendPaymentsPublicRequest.
        """
        self.openapi_types = {
            'currency_code': str,
            'fields': Fields,
            'installments': int,
            'installments_interest_rate': int,
            'installments_value': int,
            'payment_system': int,
            'reference_value': int,
            'transaction': Transaction,
            'value': int
        }

        self.attribute_map = {
            'currency_code': 'currencyCode',
            'fields': 'fields',
            'installments': 'installments',
            'installments_interest_rate': 'installmentsInterestRate',
            'installments_value': 'installmentsValue',
            'payment_system': 'paymentSystem',
            'reference_value': 'referenceValue',
            'transaction': 'transaction',
            'value': 'value'
        }

        self._currency_code = currency_code
        self._fields = fields
        self._installments = installments
        self._installments_interest_rate = installments_interest_rate
        self._installments_value = installments_value
        self._payment_system = payment_system
        self._reference_value = reference_value
        self._transaction = transaction
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Model2SendPaymentsPublicRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The 2.SendPaymentsPublicRequest of this Model2SendPaymentsPublicRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this Model2SendPaymentsPublicRequest.


        :return: The currency_code of this Model2SendPaymentsPublicRequest.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Model2SendPaymentsPublicRequest.


        :param currency_code: The currency_code of this Model2SendPaymentsPublicRequest.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def fields(self):
        """Gets the fields of this Model2SendPaymentsPublicRequest.


        :return: The fields of this Model2SendPaymentsPublicRequest.
        :rtype: Fields
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Model2SendPaymentsPublicRequest.


        :param fields: The fields of this Model2SendPaymentsPublicRequest.
        :type fields: Fields
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def installments(self):
        """Gets the installments of this Model2SendPaymentsPublicRequest.


        :return: The installments of this Model2SendPaymentsPublicRequest.
        :rtype: int
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this Model2SendPaymentsPublicRequest.


        :param installments: The installments of this Model2SendPaymentsPublicRequest.
        :type installments: int
        """
        if installments is None:
            raise ValueError("Invalid value for `installments`, must not be `None`")

        self._installments = installments

    @property
    def installments_interest_rate(self):
        """Gets the installments_interest_rate of this Model2SendPaymentsPublicRequest.


        :return: The installments_interest_rate of this Model2SendPaymentsPublicRequest.
        :rtype: int
        """
        return self._installments_interest_rate

    @installments_interest_rate.setter
    def installments_interest_rate(self, installments_interest_rate):
        """Sets the installments_interest_rate of this Model2SendPaymentsPublicRequest.


        :param installments_interest_rate: The installments_interest_rate of this Model2SendPaymentsPublicRequest.
        :type installments_interest_rate: int
        """
        if installments_interest_rate is None:
            raise ValueError("Invalid value for `installments_interest_rate`, must not be `None`")

        self._installments_interest_rate = installments_interest_rate

    @property
    def installments_value(self):
        """Gets the installments_value of this Model2SendPaymentsPublicRequest.


        :return: The installments_value of this Model2SendPaymentsPublicRequest.
        :rtype: int
        """
        return self._installments_value

    @installments_value.setter
    def installments_value(self, installments_value):
        """Sets the installments_value of this Model2SendPaymentsPublicRequest.


        :param installments_value: The installments_value of this Model2SendPaymentsPublicRequest.
        :type installments_value: int
        """
        if installments_value is None:
            raise ValueError("Invalid value for `installments_value`, must not be `None`")

        self._installments_value = installments_value

    @property
    def payment_system(self):
        """Gets the payment_system of this Model2SendPaymentsPublicRequest.


        :return: The payment_system of this Model2SendPaymentsPublicRequest.
        :rtype: int
        """
        return self._payment_system

    @payment_system.setter
    def payment_system(self, payment_system):
        """Sets the payment_system of this Model2SendPaymentsPublicRequest.


        :param payment_system: The payment_system of this Model2SendPaymentsPublicRequest.
        :type payment_system: int
        """
        if payment_system is None:
            raise ValueError("Invalid value for `payment_system`, must not be `None`")

        self._payment_system = payment_system

    @property
    def reference_value(self):
        """Gets the reference_value of this Model2SendPaymentsPublicRequest.


        :return: The reference_value of this Model2SendPaymentsPublicRequest.
        :rtype: int
        """
        return self._reference_value

    @reference_value.setter
    def reference_value(self, reference_value):
        """Sets the reference_value of this Model2SendPaymentsPublicRequest.


        :param reference_value: The reference_value of this Model2SendPaymentsPublicRequest.
        :type reference_value: int
        """
        if reference_value is None:
            raise ValueError("Invalid value for `reference_value`, must not be `None`")

        self._reference_value = reference_value

    @property
    def transaction(self):
        """Gets the transaction of this Model2SendPaymentsPublicRequest.


        :return: The transaction of this Model2SendPaymentsPublicRequest.
        :rtype: Transaction
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this Model2SendPaymentsPublicRequest.


        :param transaction: The transaction of this Model2SendPaymentsPublicRequest.
        :type transaction: Transaction
        """
        if transaction is None:
            raise ValueError("Invalid value for `transaction`, must not be `None`")

        self._transaction = transaction

    @property
    def value(self):
        """Gets the value of this Model2SendPaymentsPublicRequest.


        :return: The value of this Model2SendPaymentsPublicRequest.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Model2SendPaymentsPublicRequest.


        :param value: The value of this Model2SendPaymentsPublicRequest.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
