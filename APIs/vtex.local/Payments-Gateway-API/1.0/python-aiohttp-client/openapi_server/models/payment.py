# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_self import ModelSelf
from openapi_server import util


class Payment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bin: str=None, id: int=None, is_default: bool=None, name: str=None, _self: ModelSelf=None, value: float=None):
        """Payment - a model defined in OpenAPI

        :param bin: The bin of this Payment.
        :param id: The id of this Payment.
        :param is_default: The is_default of this Payment.
        :param name: The name of this Payment.
        :param _self: The _self of this Payment.
        :param value: The value of this Payment.
        """
        self.openapi_types = {
            'bin': str,
            'id': int,
            'is_default': bool,
            'name': str,
            '_self': ModelSelf,
            'value': float
        }

        self.attribute_map = {
            'bin': 'bin',
            'id': 'id',
            'is_default': 'isDefault',
            'name': 'name',
            '_self': 'self',
            'value': 'value'
        }

        self._bin = bin
        self._id = id
        self._is_default = is_default
        self._name = name
        self.__self = _self
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Payment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Payment of this Payment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bin(self):
        """Gets the bin of this Payment.


        :return: The bin of this Payment.
        :rtype: str
        """
        return self._bin

    @bin.setter
    def bin(self, bin):
        """Sets the bin of this Payment.


        :param bin: The bin of this Payment.
        :type bin: str
        """
        if bin is None:
            raise ValueError("Invalid value for `bin`, must not be `None`")

        self._bin = bin

    @property
    def id(self):
        """Gets the id of this Payment.


        :return: The id of this Payment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Payment.


        :param id: The id of this Payment.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this Payment.


        :return: The is_default of this Payment.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this Payment.


        :param is_default: The is_default of this Payment.
        :type is_default: bool
        """
        if is_default is None:
            raise ValueError("Invalid value for `is_default`, must not be `None`")

        self._is_default = is_default

    @property
    def name(self):
        """Gets the name of this Payment.


        :return: The name of this Payment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Payment.


        :param name: The name of this Payment.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def _self(self):
        """Gets the _self of this Payment.


        :return: The _self of this Payment.
        :rtype: ModelSelf
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this Payment.


        :param _self: The _self of this Payment.
        :type _self: ModelSelf
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def value(self):
        """Gets the value of this Payment.


        :return: The value of this Payment.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Payment.


        :param value: The value of this Payment.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
