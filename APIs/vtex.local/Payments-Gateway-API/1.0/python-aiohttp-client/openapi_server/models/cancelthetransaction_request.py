# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cancelthetransaction_request_minicart import CancelthetransactionRequestMinicart
from openapi_server import util


class CancelthetransactionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, minicart: CancelthetransactionRequestMinicart=None, value: int=None):
        """CancelthetransactionRequest - a model defined in OpenAPI

        :param minicart: The minicart of this CancelthetransactionRequest.
        :param value: The value of this CancelthetransactionRequest.
        """
        self.openapi_types = {
            'minicart': CancelthetransactionRequestMinicart,
            'value': int
        }

        self.attribute_map = {
            'minicart': 'minicart',
            'value': 'value'
        }

        self._minicart = minicart
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CancelthetransactionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CancelthetransactionRequest of this CancelthetransactionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def minicart(self):
        """Gets the minicart of this CancelthetransactionRequest.


        :return: The minicart of this CancelthetransactionRequest.
        :rtype: CancelthetransactionRequestMinicart
        """
        return self._minicart

    @minicart.setter
    def minicart(self, minicart):
        """Sets the minicart of this CancelthetransactionRequest.


        :param minicart: The minicart of this CancelthetransactionRequest.
        :type minicart: CancelthetransactionRequestMinicart
        """

        self._minicart = minicart

    @property
    def value(self):
        """Gets the value of this CancelthetransactionRequest.

        Value of the purchase.

        :return: The value of this CancelthetransactionRequest.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CancelthetransactionRequest.

        Value of the purchase.

        :param value: The value of this CancelthetransactionRequest.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
