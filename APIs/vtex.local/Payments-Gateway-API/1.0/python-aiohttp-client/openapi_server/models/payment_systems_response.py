# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule import Rule
from openapi_server.models.validator import Validator
from openapi_server import util


class PaymentSystemsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affiliation_id: str=None, allow_commercial_condition: bool=None, allow_commercial_policy: bool=None, allow_country: bool=None, allow_installments: bool=None, allow_issuer: bool=None, allow_multiple: bool=None, allow_notification: bool=None, allow_period: bool=None, antifraud_connector_implementation: str=None, connector_id: int=None, connector_implementation: str=None, description: str=None, due_date: str=None, fields: str=None, group_name: str=None, id: int=None, implementation: str=None, is_available: bool=None, is_custom: bool=None, is_self_authorized: bool=None, name: str=None, requires_document: bool=None, requires_phone: bool=None, rules: List[Rule]=None, validator: Validator=None):
        """PaymentSystemsResponse - a model defined in OpenAPI

        :param affiliation_id: The affiliation_id of this PaymentSystemsResponse.
        :param allow_commercial_condition: The allow_commercial_condition of this PaymentSystemsResponse.
        :param allow_commercial_policy: The allow_commercial_policy of this PaymentSystemsResponse.
        :param allow_country: The allow_country of this PaymentSystemsResponse.
        :param allow_installments: The allow_installments of this PaymentSystemsResponse.
        :param allow_issuer: The allow_issuer of this PaymentSystemsResponse.
        :param allow_multiple: The allow_multiple of this PaymentSystemsResponse.
        :param allow_notification: The allow_notification of this PaymentSystemsResponse.
        :param allow_period: The allow_period of this PaymentSystemsResponse.
        :param antifraud_connector_implementation: The antifraud_connector_implementation of this PaymentSystemsResponse.
        :param connector_id: The connector_id of this PaymentSystemsResponse.
        :param connector_implementation: The connector_implementation of this PaymentSystemsResponse.
        :param description: The description of this PaymentSystemsResponse.
        :param due_date: The due_date of this PaymentSystemsResponse.
        :param fields: The fields of this PaymentSystemsResponse.
        :param group_name: The group_name of this PaymentSystemsResponse.
        :param id: The id of this PaymentSystemsResponse.
        :param implementation: The implementation of this PaymentSystemsResponse.
        :param is_available: The is_available of this PaymentSystemsResponse.
        :param is_custom: The is_custom of this PaymentSystemsResponse.
        :param is_self_authorized: The is_self_authorized of this PaymentSystemsResponse.
        :param name: The name of this PaymentSystemsResponse.
        :param requires_document: The requires_document of this PaymentSystemsResponse.
        :param requires_phone: The requires_phone of this PaymentSystemsResponse.
        :param rules: The rules of this PaymentSystemsResponse.
        :param validator: The validator of this PaymentSystemsResponse.
        """
        self.openapi_types = {
            'affiliation_id': str,
            'allow_commercial_condition': bool,
            'allow_commercial_policy': bool,
            'allow_country': bool,
            'allow_installments': bool,
            'allow_issuer': bool,
            'allow_multiple': bool,
            'allow_notification': bool,
            'allow_period': bool,
            'antifraud_connector_implementation': str,
            'connector_id': int,
            'connector_implementation': str,
            'description': str,
            'due_date': str,
            'fields': str,
            'group_name': str,
            'id': int,
            'implementation': str,
            'is_available': bool,
            'is_custom': bool,
            'is_self_authorized': bool,
            'name': str,
            'requires_document': bool,
            'requires_phone': bool,
            'rules': List[Rule],
            'validator': Validator
        }

        self.attribute_map = {
            'affiliation_id': 'affiliationId',
            'allow_commercial_condition': 'allowCommercialCondition',
            'allow_commercial_policy': 'allowCommercialPolicy',
            'allow_country': 'allowCountry',
            'allow_installments': 'allowInstallments',
            'allow_issuer': 'allowIssuer',
            'allow_multiple': 'allowMultiple',
            'allow_notification': 'allowNotification',
            'allow_period': 'allowPeriod',
            'antifraud_connector_implementation': 'antifraudConnectorImplementation',
            'connector_id': 'connectorId',
            'connector_implementation': 'connectorImplementation',
            'description': 'description',
            'due_date': 'dueDate',
            'fields': 'fields',
            'group_name': 'groupName',
            'id': 'id',
            'implementation': 'implementation',
            'is_available': 'isAvailable',
            'is_custom': 'isCustom',
            'is_self_authorized': 'isSelfAuthorized',
            'name': 'name',
            'requires_document': 'requiresDocument',
            'requires_phone': 'requiresPhone',
            'rules': 'rules',
            'validator': 'validator'
        }

        self._affiliation_id = affiliation_id
        self._allow_commercial_condition = allow_commercial_condition
        self._allow_commercial_policy = allow_commercial_policy
        self._allow_country = allow_country
        self._allow_installments = allow_installments
        self._allow_issuer = allow_issuer
        self._allow_multiple = allow_multiple
        self._allow_notification = allow_notification
        self._allow_period = allow_period
        self._antifraud_connector_implementation = antifraud_connector_implementation
        self._connector_id = connector_id
        self._connector_implementation = connector_implementation
        self._description = description
        self._due_date = due_date
        self._fields = fields
        self._group_name = group_name
        self._id = id
        self._implementation = implementation
        self._is_available = is_available
        self._is_custom = is_custom
        self._is_self_authorized = is_self_authorized
        self._name = name
        self._requires_document = requires_document
        self._requires_phone = requires_phone
        self._rules = rules
        self._validator = validator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentSystemsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentSystemsResponse of this PaymentSystemsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affiliation_id(self):
        """Gets the affiliation_id of this PaymentSystemsResponse.


        :return: The affiliation_id of this PaymentSystemsResponse.
        :rtype: str
        """
        return self._affiliation_id

    @affiliation_id.setter
    def affiliation_id(self, affiliation_id):
        """Sets the affiliation_id of this PaymentSystemsResponse.


        :param affiliation_id: The affiliation_id of this PaymentSystemsResponse.
        :type affiliation_id: str
        """
        if affiliation_id is None:
            raise ValueError("Invalid value for `affiliation_id`, must not be `None`")

        self._affiliation_id = affiliation_id

    @property
    def allow_commercial_condition(self):
        """Gets the allow_commercial_condition of this PaymentSystemsResponse.


        :return: The allow_commercial_condition of this PaymentSystemsResponse.
        :rtype: bool
        """
        return self._allow_commercial_condition

    @allow_commercial_condition.setter
    def allow_commercial_condition(self, allow_commercial_condition):
        """Sets the allow_commercial_condition of this PaymentSystemsResponse.


        :param allow_commercial_condition: The allow_commercial_condition of this PaymentSystemsResponse.
        :type allow_commercial_condition: bool
        """
        if allow_commercial_condition is None:
            raise ValueError("Invalid value for `allow_commercial_condition`, must not be `None`")

        self._allow_commercial_condition = allow_commercial_condition

    @property
    def allow_commercial_policy(self):
        """Gets the allow_commercial_policy of this PaymentSystemsResponse.


        :return: The allow_commercial_policy of this PaymentSystemsResponse.
        :rtype: bool
        """
        return self._allow_commercial_policy

    @allow_commercial_policy.setter
    def allow_commercial_policy(self, allow_commercial_policy):
        """Sets the allow_commercial_policy of this PaymentSystemsResponse.


        :param allow_commercial_policy: The allow_commercial_policy of this PaymentSystemsResponse.
        :type allow_commercial_policy: bool
        """
        if allow_commercial_policy is None:
            raise ValueError("Invalid value for `allow_commercial_policy`, must not be `None`")

        self._allow_commercial_policy = allow_commercial_policy

    @property
    def allow_country(self):
        """Gets the allow_country of this PaymentSystemsResponse.


        :return: The allow_country of this PaymentSystemsResponse.
        :rtype: bool
        """
        return self._allow_country

    @allow_country.setter
    def allow_country(self, allow_country):
        """Sets the allow_country of this PaymentSystemsResponse.


        :param allow_country: The allow_country of this PaymentSystemsResponse.
        :type allow_country: bool
        """
        if allow_country is None:
            raise ValueError("Invalid value for `allow_country`, must not be `None`")

        self._allow_country = allow_country

    @property
    def allow_installments(self):
        """Gets the allow_installments of this PaymentSystemsResponse.


        :return: The allow_installments of this PaymentSystemsResponse.
        :rtype: bool
        """
        return self._allow_installments

    @allow_installments.setter
    def allow_installments(self, allow_installments):
        """Sets the allow_installments of this PaymentSystemsResponse.


        :param allow_installments: The allow_installments of this PaymentSystemsResponse.
        :type allow_installments: bool
        """
        if allow_installments is None:
            raise ValueError("Invalid value for `allow_installments`, must not be `None`")

        self._allow_installments = allow_installments

    @property
    def allow_issuer(self):
        """Gets the allow_issuer of this PaymentSystemsResponse.


        :return: The allow_issuer of this PaymentSystemsResponse.
        :rtype: bool
        """
        return self._allow_issuer

    @allow_issuer.setter
    def allow_issuer(self, allow_issuer):
        """Sets the allow_issuer of this PaymentSystemsResponse.


        :param allow_issuer: The allow_issuer of this PaymentSystemsResponse.
        :type allow_issuer: bool
        """
        if allow_issuer is None:
            raise ValueError("Invalid value for `allow_issuer`, must not be `None`")

        self._allow_issuer = allow_issuer

    @property
    def allow_multiple(self):
        """Gets the allow_multiple of this PaymentSystemsResponse.


        :return: The allow_multiple of this PaymentSystemsResponse.
        :rtype: bool
        """
        return self._allow_multiple

    @allow_multiple.setter
    def allow_multiple(self, allow_multiple):
        """Sets the allow_multiple of this PaymentSystemsResponse.


        :param allow_multiple: The allow_multiple of this PaymentSystemsResponse.
        :type allow_multiple: bool
        """
        if allow_multiple is None:
            raise ValueError("Invalid value for `allow_multiple`, must not be `None`")

        self._allow_multiple = allow_multiple

    @property
    def allow_notification(self):
        """Gets the allow_notification of this PaymentSystemsResponse.


        :return: The allow_notification of this PaymentSystemsResponse.
        :rtype: bool
        """
        return self._allow_notification

    @allow_notification.setter
    def allow_notification(self, allow_notification):
        """Sets the allow_notification of this PaymentSystemsResponse.


        :param allow_notification: The allow_notification of this PaymentSystemsResponse.
        :type allow_notification: bool
        """
        if allow_notification is None:
            raise ValueError("Invalid value for `allow_notification`, must not be `None`")

        self._allow_notification = allow_notification

    @property
    def allow_period(self):
        """Gets the allow_period of this PaymentSystemsResponse.


        :return: The allow_period of this PaymentSystemsResponse.
        :rtype: bool
        """
        return self._allow_period

    @allow_period.setter
    def allow_period(self, allow_period):
        """Sets the allow_period of this PaymentSystemsResponse.


        :param allow_period: The allow_period of this PaymentSystemsResponse.
        :type allow_period: bool
        """
        if allow_period is None:
            raise ValueError("Invalid value for `allow_period`, must not be `None`")

        self._allow_period = allow_period

    @property
    def antifraud_connector_implementation(self):
        """Gets the antifraud_connector_implementation of this PaymentSystemsResponse.


        :return: The antifraud_connector_implementation of this PaymentSystemsResponse.
        :rtype: str
        """
        return self._antifraud_connector_implementation

    @antifraud_connector_implementation.setter
    def antifraud_connector_implementation(self, antifraud_connector_implementation):
        """Sets the antifraud_connector_implementation of this PaymentSystemsResponse.


        :param antifraud_connector_implementation: The antifraud_connector_implementation of this PaymentSystemsResponse.
        :type antifraud_connector_implementation: str
        """
        if antifraud_connector_implementation is None:
            raise ValueError("Invalid value for `antifraud_connector_implementation`, must not be `None`")

        self._antifraud_connector_implementation = antifraud_connector_implementation

    @property
    def connector_id(self):
        """Gets the connector_id of this PaymentSystemsResponse.


        :return: The connector_id of this PaymentSystemsResponse.
        :rtype: int
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this PaymentSystemsResponse.


        :param connector_id: The connector_id of this PaymentSystemsResponse.
        :type connector_id: int
        """
        if connector_id is None:
            raise ValueError("Invalid value for `connector_id`, must not be `None`")

        self._connector_id = connector_id

    @property
    def connector_implementation(self):
        """Gets the connector_implementation of this PaymentSystemsResponse.


        :return: The connector_implementation of this PaymentSystemsResponse.
        :rtype: str
        """
        return self._connector_implementation

    @connector_implementation.setter
    def connector_implementation(self, connector_implementation):
        """Sets the connector_implementation of this PaymentSystemsResponse.


        :param connector_implementation: The connector_implementation of this PaymentSystemsResponse.
        :type connector_implementation: str
        """
        if connector_implementation is None:
            raise ValueError("Invalid value for `connector_implementation`, must not be `None`")

        self._connector_implementation = connector_implementation

    @property
    def description(self):
        """Gets the description of this PaymentSystemsResponse.


        :return: The description of this PaymentSystemsResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentSystemsResponse.


        :param description: The description of this PaymentSystemsResponse.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def due_date(self):
        """Gets the due_date of this PaymentSystemsResponse.


        :return: The due_date of this PaymentSystemsResponse.
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this PaymentSystemsResponse.


        :param due_date: The due_date of this PaymentSystemsResponse.
        :type due_date: str
        """
        if due_date is None:
            raise ValueError("Invalid value for `due_date`, must not be `None`")

        self._due_date = due_date

    @property
    def fields(self):
        """Gets the fields of this PaymentSystemsResponse.


        :return: The fields of this PaymentSystemsResponse.
        :rtype: str
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this PaymentSystemsResponse.


        :param fields: The fields of this PaymentSystemsResponse.
        :type fields: str
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def group_name(self):
        """Gets the group_name of this PaymentSystemsResponse.


        :return: The group_name of this PaymentSystemsResponse.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this PaymentSystemsResponse.


        :param group_name: The group_name of this PaymentSystemsResponse.
        :type group_name: str
        """
        if group_name is None:
            raise ValueError("Invalid value for `group_name`, must not be `None`")

        self._group_name = group_name

    @property
    def id(self):
        """Gets the id of this PaymentSystemsResponse.


        :return: The id of this PaymentSystemsResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentSystemsResponse.


        :param id: The id of this PaymentSystemsResponse.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def implementation(self):
        """Gets the implementation of this PaymentSystemsResponse.


        :return: The implementation of this PaymentSystemsResponse.
        :rtype: str
        """
        return self._implementation

    @implementation.setter
    def implementation(self, implementation):
        """Sets the implementation of this PaymentSystemsResponse.


        :param implementation: The implementation of this PaymentSystemsResponse.
        :type implementation: str
        """
        if implementation is None:
            raise ValueError("Invalid value for `implementation`, must not be `None`")

        self._implementation = implementation

    @property
    def is_available(self):
        """Gets the is_available of this PaymentSystemsResponse.


        :return: The is_available of this PaymentSystemsResponse.
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this PaymentSystemsResponse.


        :param is_available: The is_available of this PaymentSystemsResponse.
        :type is_available: bool
        """
        if is_available is None:
            raise ValueError("Invalid value for `is_available`, must not be `None`")

        self._is_available = is_available

    @property
    def is_custom(self):
        """Gets the is_custom of this PaymentSystemsResponse.


        :return: The is_custom of this PaymentSystemsResponse.
        :rtype: bool
        """
        return self._is_custom

    @is_custom.setter
    def is_custom(self, is_custom):
        """Sets the is_custom of this PaymentSystemsResponse.


        :param is_custom: The is_custom of this PaymentSystemsResponse.
        :type is_custom: bool
        """
        if is_custom is None:
            raise ValueError("Invalid value for `is_custom`, must not be `None`")

        self._is_custom = is_custom

    @property
    def is_self_authorized(self):
        """Gets the is_self_authorized of this PaymentSystemsResponse.


        :return: The is_self_authorized of this PaymentSystemsResponse.
        :rtype: bool
        """
        return self._is_self_authorized

    @is_self_authorized.setter
    def is_self_authorized(self, is_self_authorized):
        """Sets the is_self_authorized of this PaymentSystemsResponse.


        :param is_self_authorized: The is_self_authorized of this PaymentSystemsResponse.
        :type is_self_authorized: bool
        """
        if is_self_authorized is None:
            raise ValueError("Invalid value for `is_self_authorized`, must not be `None`")

        self._is_self_authorized = is_self_authorized

    @property
    def name(self):
        """Gets the name of this PaymentSystemsResponse.


        :return: The name of this PaymentSystemsResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PaymentSystemsResponse.


        :param name: The name of this PaymentSystemsResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def requires_document(self):
        """Gets the requires_document of this PaymentSystemsResponse.


        :return: The requires_document of this PaymentSystemsResponse.
        :rtype: bool
        """
        return self._requires_document

    @requires_document.setter
    def requires_document(self, requires_document):
        """Sets the requires_document of this PaymentSystemsResponse.


        :param requires_document: The requires_document of this PaymentSystemsResponse.
        :type requires_document: bool
        """
        if requires_document is None:
            raise ValueError("Invalid value for `requires_document`, must not be `None`")

        self._requires_document = requires_document

    @property
    def requires_phone(self):
        """Gets the requires_phone of this PaymentSystemsResponse.


        :return: The requires_phone of this PaymentSystemsResponse.
        :rtype: bool
        """
        return self._requires_phone

    @requires_phone.setter
    def requires_phone(self, requires_phone):
        """Sets the requires_phone of this PaymentSystemsResponse.


        :param requires_phone: The requires_phone of this PaymentSystemsResponse.
        :type requires_phone: bool
        """
        if requires_phone is None:
            raise ValueError("Invalid value for `requires_phone`, must not be `None`")

        self._requires_phone = requires_phone

    @property
    def rules(self):
        """Gets the rules of this PaymentSystemsResponse.

        

        :return: The rules of this PaymentSystemsResponse.
        :rtype: List[Rule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this PaymentSystemsResponse.

        

        :param rules: The rules of this PaymentSystemsResponse.
        :type rules: List[Rule]
        """
        if rules is None:
            raise ValueError("Invalid value for `rules`, must not be `None`")

        self._rules = rules

    @property
    def validator(self):
        """Gets the validator of this PaymentSystemsResponse.


        :return: The validator of this PaymentSystemsResponse.
        :rtype: Validator
        """
        return self._validator

    @validator.setter
    def validator(self, validator):
        """Sets the validator of this PaymentSystemsResponse.


        :param validator: The validator of this PaymentSystemsResponse.
        :type validator: Validator
        """
        if validator is None:
            raise ValueError("Invalid value for `validator`, must not be `None`")

        self._validator = validator
