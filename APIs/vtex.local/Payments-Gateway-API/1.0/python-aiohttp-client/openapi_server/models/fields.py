# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Fields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, address: str=None, callback_url: str=None, card_number: str=None, document: str=None, due_date: str=None, holder_name: str=None, validation_code: str=None):
        """Fields - a model defined in OpenAPI

        :param account_id: The account_id of this Fields.
        :param address: The address of this Fields.
        :param callback_url: The callback_url of this Fields.
        :param card_number: The card_number of this Fields.
        :param document: The document of this Fields.
        :param due_date: The due_date of this Fields.
        :param holder_name: The holder_name of this Fields.
        :param validation_code: The validation_code of this Fields.
        """
        self.openapi_types = {
            'account_id': str,
            'address': str,
            'callback_url': str,
            'card_number': str,
            'document': str,
            'due_date': str,
            'holder_name': str,
            'validation_code': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'address': 'address',
            'callback_url': 'callbackUrl',
            'card_number': 'cardNumber',
            'document': 'document',
            'due_date': 'dueDate',
            'holder_name': 'holderName',
            'validation_code': 'validationCode'
        }

        self._account_id = account_id
        self._address = address
        self._callback_url = callback_url
        self._card_number = card_number
        self._document = document
        self._due_date = due_date
        self._holder_name = holder_name
        self._validation_code = validation_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Fields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Fields of this Fields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Fields.


        :return: The account_id of this Fields.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Fields.


        :param account_id: The account_id of this Fields.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def address(self):
        """Gets the address of this Fields.


        :return: The address of this Fields.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Fields.


        :param address: The address of this Fields.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def callback_url(self):
        """Gets the callback_url of this Fields.


        :return: The callback_url of this Fields.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this Fields.


        :param callback_url: The callback_url of this Fields.
        :type callback_url: str
        """
        if callback_url is None:
            raise ValueError("Invalid value for `callback_url`, must not be `None`")

        self._callback_url = callback_url

    @property
    def card_number(self):
        """Gets the card_number of this Fields.


        :return: The card_number of this Fields.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this Fields.


        :param card_number: The card_number of this Fields.
        :type card_number: str
        """
        if card_number is None:
            raise ValueError("Invalid value for `card_number`, must not be `None`")

        self._card_number = card_number

    @property
    def document(self):
        """Gets the document of this Fields.


        :return: The document of this Fields.
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this Fields.


        :param document: The document of this Fields.
        :type document: str
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")

        self._document = document

    @property
    def due_date(self):
        """Gets the due_date of this Fields.


        :return: The due_date of this Fields.
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Fields.


        :param due_date: The due_date of this Fields.
        :type due_date: str
        """
        if due_date is None:
            raise ValueError("Invalid value for `due_date`, must not be `None`")

        self._due_date = due_date

    @property
    def holder_name(self):
        """Gets the holder_name of this Fields.


        :return: The holder_name of this Fields.
        :rtype: str
        """
        return self._holder_name

    @holder_name.setter
    def holder_name(self, holder_name):
        """Sets the holder_name of this Fields.


        :param holder_name: The holder_name of this Fields.
        :type holder_name: str
        """
        if holder_name is None:
            raise ValueError("Invalid value for `holder_name`, must not be `None`")

        self._holder_name = holder_name

    @property
    def validation_code(self):
        """Gets the validation_code of this Fields.


        :return: The validation_code of this Fields.
        :rtype: str
        """
        return self._validation_code

    @validation_code.setter
    def validation_code(self, validation_code):
        """Sets the validation_code of this Fields.


        :param validation_code: The validation_code of this Fields.
        :type validation_code: str
        """
        if validation_code is None:
            raise ValueError("Invalid value for `validation_code`, must not be `None`")

        self._validation_code = validation_code
