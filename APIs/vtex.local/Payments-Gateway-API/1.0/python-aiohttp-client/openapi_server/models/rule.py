# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Rule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, antifraud_implementation: str=None, connector_implementation: str=None, id: str=None):
        """Rule - a model defined in OpenAPI

        :param antifraud_implementation: The antifraud_implementation of this Rule.
        :param connector_implementation: The connector_implementation of this Rule.
        :param id: The id of this Rule.
        """
        self.openapi_types = {
            'antifraud_implementation': str,
            'connector_implementation': str,
            'id': str
        }

        self.attribute_map = {
            'antifraud_implementation': 'antifraudImplementation',
            'connector_implementation': 'connectorImplementation',
            'id': 'id'
        }

        self._antifraud_implementation = antifraud_implementation
        self._connector_implementation = connector_implementation
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rule of this Rule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def antifraud_implementation(self):
        """Gets the antifraud_implementation of this Rule.


        :return: The antifraud_implementation of this Rule.
        :rtype: str
        """
        return self._antifraud_implementation

    @antifraud_implementation.setter
    def antifraud_implementation(self, antifraud_implementation):
        """Sets the antifraud_implementation of this Rule.


        :param antifraud_implementation: The antifraud_implementation of this Rule.
        :type antifraud_implementation: str
        """
        if antifraud_implementation is None:
            raise ValueError("Invalid value for `antifraud_implementation`, must not be `None`")

        self._antifraud_implementation = antifraud_implementation

    @property
    def connector_implementation(self):
        """Gets the connector_implementation of this Rule.


        :return: The connector_implementation of this Rule.
        :rtype: str
        """
        return self._connector_implementation

    @connector_implementation.setter
    def connector_implementation(self, connector_implementation):
        """Sets the connector_implementation of this Rule.


        :param connector_implementation: The connector_implementation of this Rule.
        :type connector_implementation: str
        """
        if connector_implementation is None:
            raise ValueError("Invalid value for `connector_implementation`, must not be `None`")

        self._connector_implementation = connector_implementation

    @property
    def id(self):
        """Gets the id of this Rule.


        :return: The id of this Rule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Rule.


        :param id: The id of this Rule.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id
