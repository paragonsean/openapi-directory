# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.option import Option
from openapi_server.models.payment import Payment
from openapi_server import util


class Installment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, options: List[Option]=None, payment: Payment=None):
        """Installment - a model defined in OpenAPI

        :param options: The options of this Installment.
        :param payment: The payment of this Installment.
        """
        self.openapi_types = {
            'options': List[Option],
            'payment': Payment
        }

        self.attribute_map = {
            'options': 'options',
            'payment': 'payment'
        }

        self._options = options
        self._payment = payment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Installment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Installment of this Installment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def options(self):
        """Gets the options of this Installment.

        

        :return: The options of this Installment.
        :rtype: List[Option]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Installment.

        

        :param options: The options of this Installment.
        :type options: List[Option]
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")

        self._options = options

    @property
    def payment(self):
        """Gets the payment of this Installment.


        :return: The payment of this Installment.
        :rtype: Payment
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this Installment.


        :param payment: The payment of this Installment.
        :type payment: Payment
        """
        if payment is None:
            raise ValueError("Invalid value for `payment`, must not be `None`")

        self._payment = payment
