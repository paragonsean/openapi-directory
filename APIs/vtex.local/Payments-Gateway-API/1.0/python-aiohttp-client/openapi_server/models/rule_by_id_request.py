# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.antifraud1 import Antifraud1
from openapi_server.models.connector import Connector
from openapi_server.models.installment_options import InstallmentOptions
from openapi_server.models.issuer import Issuer
from openapi_server.models.payment_system import PaymentSystem
from openapi_server.models.sales_channel import SalesChannel
from openapi_server import util


class RuleByIdRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, antifraud: Antifraud1=None, begin_date: str=None, condition: str=None, connector: Connector=None, country: str=None, date_intervals: str=None, enabled: bool=None, end_date: str=None, id: str=None, installment_options: InstallmentOptions=None, is_default: str=None, is_self_authorized: str=None, issuer: Issuer=None, multi_merchant_list: str=None, name: str=None, payment_system: PaymentSystem=None, sales_channels: List[SalesChannel]=None):
        """RuleByIdRequest - a model defined in OpenAPI

        :param antifraud: The antifraud of this RuleByIdRequest.
        :param begin_date: The begin_date of this RuleByIdRequest.
        :param condition: The condition of this RuleByIdRequest.
        :param connector: The connector of this RuleByIdRequest.
        :param country: The country of this RuleByIdRequest.
        :param date_intervals: The date_intervals of this RuleByIdRequest.
        :param enabled: The enabled of this RuleByIdRequest.
        :param end_date: The end_date of this RuleByIdRequest.
        :param id: The id of this RuleByIdRequest.
        :param installment_options: The installment_options of this RuleByIdRequest.
        :param is_default: The is_default of this RuleByIdRequest.
        :param is_self_authorized: The is_self_authorized of this RuleByIdRequest.
        :param issuer: The issuer of this RuleByIdRequest.
        :param multi_merchant_list: The multi_merchant_list of this RuleByIdRequest.
        :param name: The name of this RuleByIdRequest.
        :param payment_system: The payment_system of this RuleByIdRequest.
        :param sales_channels: The sales_channels of this RuleByIdRequest.
        """
        self.openapi_types = {
            'antifraud': Antifraud1,
            'begin_date': str,
            'condition': str,
            'connector': Connector,
            'country': str,
            'date_intervals': str,
            'enabled': bool,
            'end_date': str,
            'id': str,
            'installment_options': InstallmentOptions,
            'is_default': str,
            'is_self_authorized': str,
            'issuer': Issuer,
            'multi_merchant_list': str,
            'name': str,
            'payment_system': PaymentSystem,
            'sales_channels': List[SalesChannel]
        }

        self.attribute_map = {
            'antifraud': 'antifraud',
            'begin_date': 'beginDate',
            'condition': 'condition',
            'connector': 'connector',
            'country': 'country',
            'date_intervals': 'dateIntervals',
            'enabled': 'enabled',
            'end_date': 'endDate',
            'id': 'id',
            'installment_options': 'installmentOptions',
            'is_default': 'isDefault',
            'is_self_authorized': 'isSelfAuthorized',
            'issuer': 'issuer',
            'multi_merchant_list': 'multiMerchantList',
            'name': 'name',
            'payment_system': 'paymentSystem',
            'sales_channels': 'salesChannels'
        }

        self._antifraud = antifraud
        self._begin_date = begin_date
        self._condition = condition
        self._connector = connector
        self._country = country
        self._date_intervals = date_intervals
        self._enabled = enabled
        self._end_date = end_date
        self._id = id
        self._installment_options = installment_options
        self._is_default = is_default
        self._is_self_authorized = is_self_authorized
        self._issuer = issuer
        self._multi_merchant_list = multi_merchant_list
        self._name = name
        self._payment_system = payment_system
        self._sales_channels = sales_channels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleByIdRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleByIdRequest of this RuleByIdRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def antifraud(self):
        """Gets the antifraud of this RuleByIdRequest.


        :return: The antifraud of this RuleByIdRequest.
        :rtype: Antifraud1
        """
        return self._antifraud

    @antifraud.setter
    def antifraud(self, antifraud):
        """Sets the antifraud of this RuleByIdRequest.


        :param antifraud: The antifraud of this RuleByIdRequest.
        :type antifraud: Antifraud1
        """
        if antifraud is None:
            raise ValueError("Invalid value for `antifraud`, must not be `None`")

        self._antifraud = antifraud

    @property
    def begin_date(self):
        """Gets the begin_date of this RuleByIdRequest.


        :return: The begin_date of this RuleByIdRequest.
        :rtype: str
        """
        return self._begin_date

    @begin_date.setter
    def begin_date(self, begin_date):
        """Sets the begin_date of this RuleByIdRequest.


        :param begin_date: The begin_date of this RuleByIdRequest.
        :type begin_date: str
        """
        if begin_date is None:
            raise ValueError("Invalid value for `begin_date`, must not be `None`")

        self._begin_date = begin_date

    @property
    def condition(self):
        """Gets the condition of this RuleByIdRequest.


        :return: The condition of this RuleByIdRequest.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this RuleByIdRequest.


        :param condition: The condition of this RuleByIdRequest.
        :type condition: str
        """
        if condition is None:
            raise ValueError("Invalid value for `condition`, must not be `None`")

        self._condition = condition

    @property
    def connector(self):
        """Gets the connector of this RuleByIdRequest.


        :return: The connector of this RuleByIdRequest.
        :rtype: Connector
        """
        return self._connector

    @connector.setter
    def connector(self, connector):
        """Sets the connector of this RuleByIdRequest.


        :param connector: The connector of this RuleByIdRequest.
        :type connector: Connector
        """
        if connector is None:
            raise ValueError("Invalid value for `connector`, must not be `None`")

        self._connector = connector

    @property
    def country(self):
        """Gets the country of this RuleByIdRequest.


        :return: The country of this RuleByIdRequest.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this RuleByIdRequest.


        :param country: The country of this RuleByIdRequest.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def date_intervals(self):
        """Gets the date_intervals of this RuleByIdRequest.


        :return: The date_intervals of this RuleByIdRequest.
        :rtype: str
        """
        return self._date_intervals

    @date_intervals.setter
    def date_intervals(self, date_intervals):
        """Sets the date_intervals of this RuleByIdRequest.


        :param date_intervals: The date_intervals of this RuleByIdRequest.
        :type date_intervals: str
        """
        if date_intervals is None:
            raise ValueError("Invalid value for `date_intervals`, must not be `None`")

        self._date_intervals = date_intervals

    @property
    def enabled(self):
        """Gets the enabled of this RuleByIdRequest.


        :return: The enabled of this RuleByIdRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this RuleByIdRequest.


        :param enabled: The enabled of this RuleByIdRequest.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def end_date(self):
        """Gets the end_date of this RuleByIdRequest.


        :return: The end_date of this RuleByIdRequest.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this RuleByIdRequest.


        :param end_date: The end_date of this RuleByIdRequest.
        :type end_date: str
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")

        self._end_date = end_date

    @property
    def id(self):
        """Gets the id of this RuleByIdRequest.


        :return: The id of this RuleByIdRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RuleByIdRequest.


        :param id: The id of this RuleByIdRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def installment_options(self):
        """Gets the installment_options of this RuleByIdRequest.


        :return: The installment_options of this RuleByIdRequest.
        :rtype: InstallmentOptions
        """
        return self._installment_options

    @installment_options.setter
    def installment_options(self, installment_options):
        """Sets the installment_options of this RuleByIdRequest.


        :param installment_options: The installment_options of this RuleByIdRequest.
        :type installment_options: InstallmentOptions
        """
        if installment_options is None:
            raise ValueError("Invalid value for `installment_options`, must not be `None`")

        self._installment_options = installment_options

    @property
    def is_default(self):
        """Gets the is_default of this RuleByIdRequest.


        :return: The is_default of this RuleByIdRequest.
        :rtype: str
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this RuleByIdRequest.


        :param is_default: The is_default of this RuleByIdRequest.
        :type is_default: str
        """
        if is_default is None:
            raise ValueError("Invalid value for `is_default`, must not be `None`")

        self._is_default = is_default

    @property
    def is_self_authorized(self):
        """Gets the is_self_authorized of this RuleByIdRequest.


        :return: The is_self_authorized of this RuleByIdRequest.
        :rtype: str
        """
        return self._is_self_authorized

    @is_self_authorized.setter
    def is_self_authorized(self, is_self_authorized):
        """Sets the is_self_authorized of this RuleByIdRequest.


        :param is_self_authorized: The is_self_authorized of this RuleByIdRequest.
        :type is_self_authorized: str
        """
        if is_self_authorized is None:
            raise ValueError("Invalid value for `is_self_authorized`, must not be `None`")

        self._is_self_authorized = is_self_authorized

    @property
    def issuer(self):
        """Gets the issuer of this RuleByIdRequest.


        :return: The issuer of this RuleByIdRequest.
        :rtype: Issuer
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this RuleByIdRequest.


        :param issuer: The issuer of this RuleByIdRequest.
        :type issuer: Issuer
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")

        self._issuer = issuer

    @property
    def multi_merchant_list(self):
        """Gets the multi_merchant_list of this RuleByIdRequest.


        :return: The multi_merchant_list of this RuleByIdRequest.
        :rtype: str
        """
        return self._multi_merchant_list

    @multi_merchant_list.setter
    def multi_merchant_list(self, multi_merchant_list):
        """Sets the multi_merchant_list of this RuleByIdRequest.


        :param multi_merchant_list: The multi_merchant_list of this RuleByIdRequest.
        :type multi_merchant_list: str
        """
        if multi_merchant_list is None:
            raise ValueError("Invalid value for `multi_merchant_list`, must not be `None`")

        self._multi_merchant_list = multi_merchant_list

    @property
    def name(self):
        """Gets the name of this RuleByIdRequest.


        :return: The name of this RuleByIdRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RuleByIdRequest.


        :param name: The name of this RuleByIdRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def payment_system(self):
        """Gets the payment_system of this RuleByIdRequest.


        :return: The payment_system of this RuleByIdRequest.
        :rtype: PaymentSystem
        """
        return self._payment_system

    @payment_system.setter
    def payment_system(self, payment_system):
        """Sets the payment_system of this RuleByIdRequest.


        :param payment_system: The payment_system of this RuleByIdRequest.
        :type payment_system: PaymentSystem
        """
        if payment_system is None:
            raise ValueError("Invalid value for `payment_system`, must not be `None`")

        self._payment_system = payment_system

    @property
    def sales_channels(self):
        """Gets the sales_channels of this RuleByIdRequest.

        

        :return: The sales_channels of this RuleByIdRequest.
        :rtype: List[SalesChannel]
        """
        return self._sales_channels

    @sales_channels.setter
    def sales_channels(self, sales_channels):
        """Sets the sales_channels of this RuleByIdRequest.

        

        :param sales_channels: The sales_channels of this RuleByIdRequest.
        :type sales_channels: List[SalesChannel]
        """
        if sales_channels is None:
            raise ValueError("Invalid value for `sales_channels`, must not be `None`")

        self._sales_channels = sales_channels
