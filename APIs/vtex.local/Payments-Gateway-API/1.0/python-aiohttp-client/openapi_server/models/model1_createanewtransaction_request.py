# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Model1CreateanewtransactionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: str=None, reference_id: str=None, sales_channel: str=None, urn: str=None, value: int=None):
        """Model1CreateanewtransactionRequest - a model defined in OpenAPI

        :param channel: The channel of this Model1CreateanewtransactionRequest.
        :param reference_id: The reference_id of this Model1CreateanewtransactionRequest.
        :param sales_channel: The sales_channel of this Model1CreateanewtransactionRequest.
        :param urn: The urn of this Model1CreateanewtransactionRequest.
        :param value: The value of this Model1CreateanewtransactionRequest.
        """
        self.openapi_types = {
            'channel': str,
            'reference_id': str,
            'sales_channel': str,
            'urn': str,
            'value': int
        }

        self.attribute_map = {
            'channel': 'channel',
            'reference_id': 'referenceId',
            'sales_channel': 'salesChannel',
            'urn': 'urn',
            'value': 'value'
        }

        self._channel = channel
        self._reference_id = reference_id
        self._sales_channel = sales_channel
        self._urn = urn
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Model1CreateanewtransactionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The 1.CreateanewtransactionRequest of this Model1CreateanewtransactionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this Model1CreateanewtransactionRequest.


        :return: The channel of this Model1CreateanewtransactionRequest.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this Model1CreateanewtransactionRequest.


        :param channel: The channel of this Model1CreateanewtransactionRequest.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def reference_id(self):
        """Gets the reference_id of this Model1CreateanewtransactionRequest.


        :return: The reference_id of this Model1CreateanewtransactionRequest.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this Model1CreateanewtransactionRequest.


        :param reference_id: The reference_id of this Model1CreateanewtransactionRequest.
        :type reference_id: str
        """
        if reference_id is None:
            raise ValueError("Invalid value for `reference_id`, must not be `None`")

        self._reference_id = reference_id

    @property
    def sales_channel(self):
        """Gets the sales_channel of this Model1CreateanewtransactionRequest.


        :return: The sales_channel of this Model1CreateanewtransactionRequest.
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this Model1CreateanewtransactionRequest.


        :param sales_channel: The sales_channel of this Model1CreateanewtransactionRequest.
        :type sales_channel: str
        """
        if sales_channel is None:
            raise ValueError("Invalid value for `sales_channel`, must not be `None`")

        self._sales_channel = sales_channel

    @property
    def urn(self):
        """Gets the urn of this Model1CreateanewtransactionRequest.


        :return: The urn of this Model1CreateanewtransactionRequest.
        :rtype: str
        """
        return self._urn

    @urn.setter
    def urn(self, urn):
        """Sets the urn of this Model1CreateanewtransactionRequest.


        :param urn: The urn of this Model1CreateanewtransactionRequest.
        :type urn: str
        """

        self._urn = urn

    @property
    def value(self):
        """Gets the value of this Model1CreateanewtransactionRequest.


        :return: The value of this Model1CreateanewtransactionRequest.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Model1CreateanewtransactionRequest.


        :param value: The value of this Model1CreateanewtransactionRequest.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
