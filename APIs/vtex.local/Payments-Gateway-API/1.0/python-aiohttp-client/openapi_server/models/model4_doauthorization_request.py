# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Model4DoauthorizationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, prepare_for_recurrency: bool=None, soft_descriptor: str=None, transaction_id: str=None):
        """Model4DoauthorizationRequest - a model defined in OpenAPI

        :param prepare_for_recurrency: The prepare_for_recurrency of this Model4DoauthorizationRequest.
        :param soft_descriptor: The soft_descriptor of this Model4DoauthorizationRequest.
        :param transaction_id: The transaction_id of this Model4DoauthorizationRequest.
        """
        self.openapi_types = {
            'prepare_for_recurrency': bool,
            'soft_descriptor': str,
            'transaction_id': str
        }

        self.attribute_map = {
            'prepare_for_recurrency': 'prepareForRecurrency',
            'soft_descriptor': 'softDescriptor',
            'transaction_id': 'transactionId'
        }

        self._prepare_for_recurrency = prepare_for_recurrency
        self._soft_descriptor = soft_descriptor
        self._transaction_id = transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Model4DoauthorizationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The 4.DoauthorizationRequest of this Model4DoauthorizationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def prepare_for_recurrency(self):
        """Gets the prepare_for_recurrency of this Model4DoauthorizationRequest.


        :return: The prepare_for_recurrency of this Model4DoauthorizationRequest.
        :rtype: bool
        """
        return self._prepare_for_recurrency

    @prepare_for_recurrency.setter
    def prepare_for_recurrency(self, prepare_for_recurrency):
        """Sets the prepare_for_recurrency of this Model4DoauthorizationRequest.


        :param prepare_for_recurrency: The prepare_for_recurrency of this Model4DoauthorizationRequest.
        :type prepare_for_recurrency: bool
        """
        if prepare_for_recurrency is None:
            raise ValueError("Invalid value for `prepare_for_recurrency`, must not be `None`")

        self._prepare_for_recurrency = prepare_for_recurrency

    @property
    def soft_descriptor(self):
        """Gets the soft_descriptor of this Model4DoauthorizationRequest.


        :return: The soft_descriptor of this Model4DoauthorizationRequest.
        :rtype: str
        """
        return self._soft_descriptor

    @soft_descriptor.setter
    def soft_descriptor(self, soft_descriptor):
        """Sets the soft_descriptor of this Model4DoauthorizationRequest.


        :param soft_descriptor: The soft_descriptor of this Model4DoauthorizationRequest.
        :type soft_descriptor: str
        """
        if soft_descriptor is None:
            raise ValueError("Invalid value for `soft_descriptor`, must not be `None`")

        self._soft_descriptor = soft_descriptor

    @property
    def transaction_id(self):
        """Gets the transaction_id of this Model4DoauthorizationRequest.


        :return: The transaction_id of this Model4DoauthorizationRequest.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this Model4DoauthorizationRequest.


        :param transaction_id: The transaction_id of this Model4DoauthorizationRequest.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id
