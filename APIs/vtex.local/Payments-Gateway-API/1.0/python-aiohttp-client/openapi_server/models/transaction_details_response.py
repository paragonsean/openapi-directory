# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cancellations import Cancellations
from openapi_server.models.fields1 import Fields1
from openapi_server.models.interactions import Interactions
from openapi_server.models.payments import Payments
from openapi_server.models.refunds import Refunds
from openapi_server.models.settlements import Settlements
from openapi_server import util


class TransactionDetailsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_header: str=None, antifraud_affiliation_id: str=None, antifraud_tid: str=None, authorization_date: str=None, authorization_token: str=None, buyer: str=None, cancelation_date: str=None, cancelation_token: str=None, cancellations: Cancellations=None, channel: str=None, commitment_date: str=None, commitment_token: str=None, fields: List[Fields1]=None, id: str=None, interactions: Interactions=None, ip_address: str=None, marked_for_recurrence: bool=None, owner: str=None, payments: Payments=None, receiver_uri: str=None, reference_key: str=None, refunding_date: str=None, refunding_token: str=None, refunds: Refunds=None, sales_channel: str=None, settlements: Settlements=None, soft_descriptor: str=None, start_date: str=None, status: str=None, timeout_status: int=None, total_refunds: float=None, transaction_id: str=None, urn: str=None, user_agent: str=None, value: int=None):
        """TransactionDetailsResponse - a model defined in OpenAPI

        :param accept_header: The accept_header of this TransactionDetailsResponse.
        :param antifraud_affiliation_id: The antifraud_affiliation_id of this TransactionDetailsResponse.
        :param antifraud_tid: The antifraud_tid of this TransactionDetailsResponse.
        :param authorization_date: The authorization_date of this TransactionDetailsResponse.
        :param authorization_token: The authorization_token of this TransactionDetailsResponse.
        :param buyer: The buyer of this TransactionDetailsResponse.
        :param cancelation_date: The cancelation_date of this TransactionDetailsResponse.
        :param cancelation_token: The cancelation_token of this TransactionDetailsResponse.
        :param cancellations: The cancellations of this TransactionDetailsResponse.
        :param channel: The channel of this TransactionDetailsResponse.
        :param commitment_date: The commitment_date of this TransactionDetailsResponse.
        :param commitment_token: The commitment_token of this TransactionDetailsResponse.
        :param fields: The fields of this TransactionDetailsResponse.
        :param id: The id of this TransactionDetailsResponse.
        :param interactions: The interactions of this TransactionDetailsResponse.
        :param ip_address: The ip_address of this TransactionDetailsResponse.
        :param marked_for_recurrence: The marked_for_recurrence of this TransactionDetailsResponse.
        :param owner: The owner of this TransactionDetailsResponse.
        :param payments: The payments of this TransactionDetailsResponse.
        :param receiver_uri: The receiver_uri of this TransactionDetailsResponse.
        :param reference_key: The reference_key of this TransactionDetailsResponse.
        :param refunding_date: The refunding_date of this TransactionDetailsResponse.
        :param refunding_token: The refunding_token of this TransactionDetailsResponse.
        :param refunds: The refunds of this TransactionDetailsResponse.
        :param sales_channel: The sales_channel of this TransactionDetailsResponse.
        :param settlements: The settlements of this TransactionDetailsResponse.
        :param soft_descriptor: The soft_descriptor of this TransactionDetailsResponse.
        :param start_date: The start_date of this TransactionDetailsResponse.
        :param status: The status of this TransactionDetailsResponse.
        :param timeout_status: The timeout_status of this TransactionDetailsResponse.
        :param total_refunds: The total_refunds of this TransactionDetailsResponse.
        :param transaction_id: The transaction_id of this TransactionDetailsResponse.
        :param urn: The urn of this TransactionDetailsResponse.
        :param user_agent: The user_agent of this TransactionDetailsResponse.
        :param value: The value of this TransactionDetailsResponse.
        """
        self.openapi_types = {
            'accept_header': str,
            'antifraud_affiliation_id': str,
            'antifraud_tid': str,
            'authorization_date': str,
            'authorization_token': str,
            'buyer': str,
            'cancelation_date': str,
            'cancelation_token': str,
            'cancellations': Cancellations,
            'channel': str,
            'commitment_date': str,
            'commitment_token': str,
            'fields': List[Fields1],
            'id': str,
            'interactions': Interactions,
            'ip_address': str,
            'marked_for_recurrence': bool,
            'owner': str,
            'payments': Payments,
            'receiver_uri': str,
            'reference_key': str,
            'refunding_date': str,
            'refunding_token': str,
            'refunds': Refunds,
            'sales_channel': str,
            'settlements': Settlements,
            'soft_descriptor': str,
            'start_date': str,
            'status': str,
            'timeout_status': int,
            'total_refunds': float,
            'transaction_id': str,
            'urn': str,
            'user_agent': str,
            'value': int
        }

        self.attribute_map = {
            'accept_header': 'acceptHeader',
            'antifraud_affiliation_id': 'antifraudAffiliationId',
            'antifraud_tid': 'antifraudTid',
            'authorization_date': 'authorizationDate',
            'authorization_token': 'authorizationToken',
            'buyer': 'buyer',
            'cancelation_date': 'cancelationDate',
            'cancelation_token': 'cancelationToken',
            'cancellations': 'cancellations',
            'channel': 'channel',
            'commitment_date': 'commitmentDate',
            'commitment_token': 'commitmentToken',
            'fields': 'fields',
            'id': 'id',
            'interactions': 'interactions',
            'ip_address': 'ipAddress',
            'marked_for_recurrence': 'markedForRecurrence',
            'owner': 'owner',
            'payments': 'payments',
            'receiver_uri': 'receiverUri',
            'reference_key': 'referenceKey',
            'refunding_date': 'refundingDate',
            'refunding_token': 'refundingToken',
            'refunds': 'refunds',
            'sales_channel': 'salesChannel',
            'settlements': 'settlements',
            'soft_descriptor': 'softDescriptor',
            'start_date': 'startDate',
            'status': 'status',
            'timeout_status': 'timeoutStatus',
            'total_refunds': 'totalRefunds',
            'transaction_id': 'transactionId',
            'urn': 'urn',
            'user_agent': 'userAgent',
            'value': 'value'
        }

        self._accept_header = accept_header
        self._antifraud_affiliation_id = antifraud_affiliation_id
        self._antifraud_tid = antifraud_tid
        self._authorization_date = authorization_date
        self._authorization_token = authorization_token
        self._buyer = buyer
        self._cancelation_date = cancelation_date
        self._cancelation_token = cancelation_token
        self._cancellations = cancellations
        self._channel = channel
        self._commitment_date = commitment_date
        self._commitment_token = commitment_token
        self._fields = fields
        self._id = id
        self._interactions = interactions
        self._ip_address = ip_address
        self._marked_for_recurrence = marked_for_recurrence
        self._owner = owner
        self._payments = payments
        self._receiver_uri = receiver_uri
        self._reference_key = reference_key
        self._refunding_date = refunding_date
        self._refunding_token = refunding_token
        self._refunds = refunds
        self._sales_channel = sales_channel
        self._settlements = settlements
        self._soft_descriptor = soft_descriptor
        self._start_date = start_date
        self._status = status
        self._timeout_status = timeout_status
        self._total_refunds = total_refunds
        self._transaction_id = transaction_id
        self._urn = urn
        self._user_agent = user_agent
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionDetailsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionDetailsResponse of this TransactionDetailsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_header(self):
        """Gets the accept_header of this TransactionDetailsResponse.


        :return: The accept_header of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._accept_header

    @accept_header.setter
    def accept_header(self, accept_header):
        """Sets the accept_header of this TransactionDetailsResponse.


        :param accept_header: The accept_header of this TransactionDetailsResponse.
        :type accept_header: str
        """
        if accept_header is None:
            raise ValueError("Invalid value for `accept_header`, must not be `None`")

        self._accept_header = accept_header

    @property
    def antifraud_affiliation_id(self):
        """Gets the antifraud_affiliation_id of this TransactionDetailsResponse.


        :return: The antifraud_affiliation_id of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._antifraud_affiliation_id

    @antifraud_affiliation_id.setter
    def antifraud_affiliation_id(self, antifraud_affiliation_id):
        """Sets the antifraud_affiliation_id of this TransactionDetailsResponse.


        :param antifraud_affiliation_id: The antifraud_affiliation_id of this TransactionDetailsResponse.
        :type antifraud_affiliation_id: str
        """
        if antifraud_affiliation_id is None:
            raise ValueError("Invalid value for `antifraud_affiliation_id`, must not be `None`")

        self._antifraud_affiliation_id = antifraud_affiliation_id

    @property
    def antifraud_tid(self):
        """Gets the antifraud_tid of this TransactionDetailsResponse.


        :return: The antifraud_tid of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._antifraud_tid

    @antifraud_tid.setter
    def antifraud_tid(self, antifraud_tid):
        """Sets the antifraud_tid of this TransactionDetailsResponse.


        :param antifraud_tid: The antifraud_tid of this TransactionDetailsResponse.
        :type antifraud_tid: str
        """
        if antifraud_tid is None:
            raise ValueError("Invalid value for `antifraud_tid`, must not be `None`")

        self._antifraud_tid = antifraud_tid

    @property
    def authorization_date(self):
        """Gets the authorization_date of this TransactionDetailsResponse.


        :return: The authorization_date of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._authorization_date

    @authorization_date.setter
    def authorization_date(self, authorization_date):
        """Sets the authorization_date of this TransactionDetailsResponse.


        :param authorization_date: The authorization_date of this TransactionDetailsResponse.
        :type authorization_date: str
        """
        if authorization_date is None:
            raise ValueError("Invalid value for `authorization_date`, must not be `None`")

        self._authorization_date = authorization_date

    @property
    def authorization_token(self):
        """Gets the authorization_token of this TransactionDetailsResponse.


        :return: The authorization_token of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._authorization_token

    @authorization_token.setter
    def authorization_token(self, authorization_token):
        """Sets the authorization_token of this TransactionDetailsResponse.


        :param authorization_token: The authorization_token of this TransactionDetailsResponse.
        :type authorization_token: str
        """
        if authorization_token is None:
            raise ValueError("Invalid value for `authorization_token`, must not be `None`")

        self._authorization_token = authorization_token

    @property
    def buyer(self):
        """Gets the buyer of this TransactionDetailsResponse.


        :return: The buyer of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._buyer

    @buyer.setter
    def buyer(self, buyer):
        """Sets the buyer of this TransactionDetailsResponse.


        :param buyer: The buyer of this TransactionDetailsResponse.
        :type buyer: str
        """
        if buyer is None:
            raise ValueError("Invalid value for `buyer`, must not be `None`")

        self._buyer = buyer

    @property
    def cancelation_date(self):
        """Gets the cancelation_date of this TransactionDetailsResponse.


        :return: The cancelation_date of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._cancelation_date

    @cancelation_date.setter
    def cancelation_date(self, cancelation_date):
        """Sets the cancelation_date of this TransactionDetailsResponse.


        :param cancelation_date: The cancelation_date of this TransactionDetailsResponse.
        :type cancelation_date: str
        """
        if cancelation_date is None:
            raise ValueError("Invalid value for `cancelation_date`, must not be `None`")

        self._cancelation_date = cancelation_date

    @property
    def cancelation_token(self):
        """Gets the cancelation_token of this TransactionDetailsResponse.


        :return: The cancelation_token of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._cancelation_token

    @cancelation_token.setter
    def cancelation_token(self, cancelation_token):
        """Sets the cancelation_token of this TransactionDetailsResponse.


        :param cancelation_token: The cancelation_token of this TransactionDetailsResponse.
        :type cancelation_token: str
        """
        if cancelation_token is None:
            raise ValueError("Invalid value for `cancelation_token`, must not be `None`")

        self._cancelation_token = cancelation_token

    @property
    def cancellations(self):
        """Gets the cancellations of this TransactionDetailsResponse.


        :return: The cancellations of this TransactionDetailsResponse.
        :rtype: Cancellations
        """
        return self._cancellations

    @cancellations.setter
    def cancellations(self, cancellations):
        """Sets the cancellations of this TransactionDetailsResponse.


        :param cancellations: The cancellations of this TransactionDetailsResponse.
        :type cancellations: Cancellations
        """
        if cancellations is None:
            raise ValueError("Invalid value for `cancellations`, must not be `None`")

        self._cancellations = cancellations

    @property
    def channel(self):
        """Gets the channel of this TransactionDetailsResponse.


        :return: The channel of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this TransactionDetailsResponse.


        :param channel: The channel of this TransactionDetailsResponse.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def commitment_date(self):
        """Gets the commitment_date of this TransactionDetailsResponse.


        :return: The commitment_date of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._commitment_date

    @commitment_date.setter
    def commitment_date(self, commitment_date):
        """Sets the commitment_date of this TransactionDetailsResponse.


        :param commitment_date: The commitment_date of this TransactionDetailsResponse.
        :type commitment_date: str
        """
        if commitment_date is None:
            raise ValueError("Invalid value for `commitment_date`, must not be `None`")

        self._commitment_date = commitment_date

    @property
    def commitment_token(self):
        """Gets the commitment_token of this TransactionDetailsResponse.


        :return: The commitment_token of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._commitment_token

    @commitment_token.setter
    def commitment_token(self, commitment_token):
        """Sets the commitment_token of this TransactionDetailsResponse.


        :param commitment_token: The commitment_token of this TransactionDetailsResponse.
        :type commitment_token: str
        """
        if commitment_token is None:
            raise ValueError("Invalid value for `commitment_token`, must not be `None`")

        self._commitment_token = commitment_token

    @property
    def fields(self):
        """Gets the fields of this TransactionDetailsResponse.

        

        :return: The fields of this TransactionDetailsResponse.
        :rtype: List[Fields1]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this TransactionDetailsResponse.

        

        :param fields: The fields of this TransactionDetailsResponse.
        :type fields: List[Fields1]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def id(self):
        """Gets the id of this TransactionDetailsResponse.


        :return: The id of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransactionDetailsResponse.


        :param id: The id of this TransactionDetailsResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def interactions(self):
        """Gets the interactions of this TransactionDetailsResponse.


        :return: The interactions of this TransactionDetailsResponse.
        :rtype: Interactions
        """
        return self._interactions

    @interactions.setter
    def interactions(self, interactions):
        """Sets the interactions of this TransactionDetailsResponse.


        :param interactions: The interactions of this TransactionDetailsResponse.
        :type interactions: Interactions
        """
        if interactions is None:
            raise ValueError("Invalid value for `interactions`, must not be `None`")

        self._interactions = interactions

    @property
    def ip_address(self):
        """Gets the ip_address of this TransactionDetailsResponse.


        :return: The ip_address of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this TransactionDetailsResponse.


        :param ip_address: The ip_address of this TransactionDetailsResponse.
        :type ip_address: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")

        self._ip_address = ip_address

    @property
    def marked_for_recurrence(self):
        """Gets the marked_for_recurrence of this TransactionDetailsResponse.


        :return: The marked_for_recurrence of this TransactionDetailsResponse.
        :rtype: bool
        """
        return self._marked_for_recurrence

    @marked_for_recurrence.setter
    def marked_for_recurrence(self, marked_for_recurrence):
        """Sets the marked_for_recurrence of this TransactionDetailsResponse.


        :param marked_for_recurrence: The marked_for_recurrence of this TransactionDetailsResponse.
        :type marked_for_recurrence: bool
        """
        if marked_for_recurrence is None:
            raise ValueError("Invalid value for `marked_for_recurrence`, must not be `None`")

        self._marked_for_recurrence = marked_for_recurrence

    @property
    def owner(self):
        """Gets the owner of this TransactionDetailsResponse.


        :return: The owner of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this TransactionDetailsResponse.


        :param owner: The owner of this TransactionDetailsResponse.
        :type owner: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")

        self._owner = owner

    @property
    def payments(self):
        """Gets the payments of this TransactionDetailsResponse.


        :return: The payments of this TransactionDetailsResponse.
        :rtype: Payments
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this TransactionDetailsResponse.


        :param payments: The payments of this TransactionDetailsResponse.
        :type payments: Payments
        """
        if payments is None:
            raise ValueError("Invalid value for `payments`, must not be `None`")

        self._payments = payments

    @property
    def receiver_uri(self):
        """Gets the receiver_uri of this TransactionDetailsResponse.


        :return: The receiver_uri of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._receiver_uri

    @receiver_uri.setter
    def receiver_uri(self, receiver_uri):
        """Sets the receiver_uri of this TransactionDetailsResponse.


        :param receiver_uri: The receiver_uri of this TransactionDetailsResponse.
        :type receiver_uri: str
        """
        if receiver_uri is None:
            raise ValueError("Invalid value for `receiver_uri`, must not be `None`")

        self._receiver_uri = receiver_uri

    @property
    def reference_key(self):
        """Gets the reference_key of this TransactionDetailsResponse.


        :return: The reference_key of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._reference_key

    @reference_key.setter
    def reference_key(self, reference_key):
        """Sets the reference_key of this TransactionDetailsResponse.


        :param reference_key: The reference_key of this TransactionDetailsResponse.
        :type reference_key: str
        """
        if reference_key is None:
            raise ValueError("Invalid value for `reference_key`, must not be `None`")

        self._reference_key = reference_key

    @property
    def refunding_date(self):
        """Gets the refunding_date of this TransactionDetailsResponse.


        :return: The refunding_date of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._refunding_date

    @refunding_date.setter
    def refunding_date(self, refunding_date):
        """Sets the refunding_date of this TransactionDetailsResponse.


        :param refunding_date: The refunding_date of this TransactionDetailsResponse.
        :type refunding_date: str
        """
        if refunding_date is None:
            raise ValueError("Invalid value for `refunding_date`, must not be `None`")

        self._refunding_date = refunding_date

    @property
    def refunding_token(self):
        """Gets the refunding_token of this TransactionDetailsResponse.


        :return: The refunding_token of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._refunding_token

    @refunding_token.setter
    def refunding_token(self, refunding_token):
        """Sets the refunding_token of this TransactionDetailsResponse.


        :param refunding_token: The refunding_token of this TransactionDetailsResponse.
        :type refunding_token: str
        """
        if refunding_token is None:
            raise ValueError("Invalid value for `refunding_token`, must not be `None`")

        self._refunding_token = refunding_token

    @property
    def refunds(self):
        """Gets the refunds of this TransactionDetailsResponse.


        :return: The refunds of this TransactionDetailsResponse.
        :rtype: Refunds
        """
        return self._refunds

    @refunds.setter
    def refunds(self, refunds):
        """Sets the refunds of this TransactionDetailsResponse.


        :param refunds: The refunds of this TransactionDetailsResponse.
        :type refunds: Refunds
        """
        if refunds is None:
            raise ValueError("Invalid value for `refunds`, must not be `None`")

        self._refunds = refunds

    @property
    def sales_channel(self):
        """Gets the sales_channel of this TransactionDetailsResponse.


        :return: The sales_channel of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this TransactionDetailsResponse.


        :param sales_channel: The sales_channel of this TransactionDetailsResponse.
        :type sales_channel: str
        """
        if sales_channel is None:
            raise ValueError("Invalid value for `sales_channel`, must not be `None`")

        self._sales_channel = sales_channel

    @property
    def settlements(self):
        """Gets the settlements of this TransactionDetailsResponse.


        :return: The settlements of this TransactionDetailsResponse.
        :rtype: Settlements
        """
        return self._settlements

    @settlements.setter
    def settlements(self, settlements):
        """Sets the settlements of this TransactionDetailsResponse.


        :param settlements: The settlements of this TransactionDetailsResponse.
        :type settlements: Settlements
        """
        if settlements is None:
            raise ValueError("Invalid value for `settlements`, must not be `None`")

        self._settlements = settlements

    @property
    def soft_descriptor(self):
        """Gets the soft_descriptor of this TransactionDetailsResponse.


        :return: The soft_descriptor of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._soft_descriptor

    @soft_descriptor.setter
    def soft_descriptor(self, soft_descriptor):
        """Sets the soft_descriptor of this TransactionDetailsResponse.


        :param soft_descriptor: The soft_descriptor of this TransactionDetailsResponse.
        :type soft_descriptor: str
        """
        if soft_descriptor is None:
            raise ValueError("Invalid value for `soft_descriptor`, must not be `None`")

        self._soft_descriptor = soft_descriptor

    @property
    def start_date(self):
        """Gets the start_date of this TransactionDetailsResponse.


        :return: The start_date of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this TransactionDetailsResponse.


        :param start_date: The start_date of this TransactionDetailsResponse.
        :type start_date: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this TransactionDetailsResponse.


        :return: The status of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TransactionDetailsResponse.


        :param status: The status of this TransactionDetailsResponse.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def timeout_status(self):
        """Gets the timeout_status of this TransactionDetailsResponse.


        :return: The timeout_status of this TransactionDetailsResponse.
        :rtype: int
        """
        return self._timeout_status

    @timeout_status.setter
    def timeout_status(self, timeout_status):
        """Sets the timeout_status of this TransactionDetailsResponse.


        :param timeout_status: The timeout_status of this TransactionDetailsResponse.
        :type timeout_status: int
        """
        if timeout_status is None:
            raise ValueError("Invalid value for `timeout_status`, must not be `None`")

        self._timeout_status = timeout_status

    @property
    def total_refunds(self):
        """Gets the total_refunds of this TransactionDetailsResponse.


        :return: The total_refunds of this TransactionDetailsResponse.
        :rtype: float
        """
        return self._total_refunds

    @total_refunds.setter
    def total_refunds(self, total_refunds):
        """Sets the total_refunds of this TransactionDetailsResponse.


        :param total_refunds: The total_refunds of this TransactionDetailsResponse.
        :type total_refunds: float
        """
        if total_refunds is None:
            raise ValueError("Invalid value for `total_refunds`, must not be `None`")

        self._total_refunds = total_refunds

    @property
    def transaction_id(self):
        """Gets the transaction_id of this TransactionDetailsResponse.


        :return: The transaction_id of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this TransactionDetailsResponse.


        :param transaction_id: The transaction_id of this TransactionDetailsResponse.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def urn(self):
        """Gets the urn of this TransactionDetailsResponse.


        :return: The urn of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._urn

    @urn.setter
    def urn(self, urn):
        """Sets the urn of this TransactionDetailsResponse.


        :param urn: The urn of this TransactionDetailsResponse.
        :type urn: str
        """
        if urn is None:
            raise ValueError("Invalid value for `urn`, must not be `None`")

        self._urn = urn

    @property
    def user_agent(self):
        """Gets the user_agent of this TransactionDetailsResponse.


        :return: The user_agent of this TransactionDetailsResponse.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this TransactionDetailsResponse.


        :param user_agent: The user_agent of this TransactionDetailsResponse.
        :type user_agent: str
        """
        if user_agent is None:
            raise ValueError("Invalid value for `user_agent`, must not be `None`")

        self._user_agent = user_agent

    @property
    def value(self):
        """Gets the value of this TransactionDetailsResponse.


        :return: The value of this TransactionDetailsResponse.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TransactionDetailsResponse.


        :param value: The value of this TransactionDetailsResponse.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
