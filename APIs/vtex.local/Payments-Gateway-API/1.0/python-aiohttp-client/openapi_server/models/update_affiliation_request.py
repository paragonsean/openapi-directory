# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configuration import Configuration
from openapi_server import util


class UpdateAffiliationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: List[Configuration]=None, id: str=None, implementation: str=None, is_configured: bool=None, isdelivered: bool=None, name: str=None):
        """UpdateAffiliationRequest - a model defined in OpenAPI

        :param configuration: The configuration of this UpdateAffiliationRequest.
        :param id: The id of this UpdateAffiliationRequest.
        :param implementation: The implementation of this UpdateAffiliationRequest.
        :param is_configured: The is_configured of this UpdateAffiliationRequest.
        :param isdelivered: The isdelivered of this UpdateAffiliationRequest.
        :param name: The name of this UpdateAffiliationRequest.
        """
        self.openapi_types = {
            'configuration': List[Configuration],
            'id': str,
            'implementation': str,
            'is_configured': bool,
            'isdelivered': bool,
            'name': str
        }

        self.attribute_map = {
            'configuration': 'configuration',
            'id': 'id',
            'implementation': 'implementation',
            'is_configured': 'isConfigured',
            'isdelivered': 'isdelivered',
            'name': 'name'
        }

        self._configuration = configuration
        self._id = id
        self._implementation = implementation
        self._is_configured = is_configured
        self._isdelivered = isdelivered
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAffiliationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAffiliationRequest of this UpdateAffiliationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this UpdateAffiliationRequest.

        

        :return: The configuration of this UpdateAffiliationRequest.
        :rtype: List[Configuration]
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this UpdateAffiliationRequest.

        

        :param configuration: The configuration of this UpdateAffiliationRequest.
        :type configuration: List[Configuration]
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")

        self._configuration = configuration

    @property
    def id(self):
        """Gets the id of this UpdateAffiliationRequest.


        :return: The id of this UpdateAffiliationRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateAffiliationRequest.


        :param id: The id of this UpdateAffiliationRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def implementation(self):
        """Gets the implementation of this UpdateAffiliationRequest.


        :return: The implementation of this UpdateAffiliationRequest.
        :rtype: str
        """
        return self._implementation

    @implementation.setter
    def implementation(self, implementation):
        """Sets the implementation of this UpdateAffiliationRequest.


        :param implementation: The implementation of this UpdateAffiliationRequest.
        :type implementation: str
        """
        if implementation is None:
            raise ValueError("Invalid value for `implementation`, must not be `None`")

        self._implementation = implementation

    @property
    def is_configured(self):
        """Gets the is_configured of this UpdateAffiliationRequest.


        :return: The is_configured of this UpdateAffiliationRequest.
        :rtype: bool
        """
        return self._is_configured

    @is_configured.setter
    def is_configured(self, is_configured):
        """Sets the is_configured of this UpdateAffiliationRequest.


        :param is_configured: The is_configured of this UpdateAffiliationRequest.
        :type is_configured: bool
        """
        if is_configured is None:
            raise ValueError("Invalid value for `is_configured`, must not be `None`")

        self._is_configured = is_configured

    @property
    def isdelivered(self):
        """Gets the isdelivered of this UpdateAffiliationRequest.


        :return: The isdelivered of this UpdateAffiliationRequest.
        :rtype: bool
        """
        return self._isdelivered

    @isdelivered.setter
    def isdelivered(self, isdelivered):
        """Sets the isdelivered of this UpdateAffiliationRequest.


        :param isdelivered: The isdelivered of this UpdateAffiliationRequest.
        :type isdelivered: bool
        """
        if isdelivered is None:
            raise ValueError("Invalid value for `isdelivered`, must not be `None`")

        self._isdelivered = isdelivered

    @property
    def name(self):
        """Gets the name of this UpdateAffiliationRequest.


        :return: The name of this UpdateAffiliationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateAffiliationRequest.


        :param name: The name of this UpdateAffiliationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
