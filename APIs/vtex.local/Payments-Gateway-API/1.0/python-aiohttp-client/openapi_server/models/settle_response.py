# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SettleResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancelled_value: int=None, connector_refunded_value: int=None, message: str=None, processing_date: str=None, refunded_token: str=None, refunded_value: int=None, status: int=None, status_detail: str=None, token: str=None):
        """SettleResponse - a model defined in OpenAPI

        :param cancelled_value: The cancelled_value of this SettleResponse.
        :param connector_refunded_value: The connector_refunded_value of this SettleResponse.
        :param message: The message of this SettleResponse.
        :param processing_date: The processing_date of this SettleResponse.
        :param refunded_token: The refunded_token of this SettleResponse.
        :param refunded_value: The refunded_value of this SettleResponse.
        :param status: The status of this SettleResponse.
        :param status_detail: The status_detail of this SettleResponse.
        :param token: The token of this SettleResponse.
        """
        self.openapi_types = {
            'cancelled_value': int,
            'connector_refunded_value': int,
            'message': str,
            'processing_date': str,
            'refunded_token': str,
            'refunded_value': int,
            'status': int,
            'status_detail': str,
            'token': str
        }

        self.attribute_map = {
            'cancelled_value': 'cancelledValue',
            'connector_refunded_value': 'connectorRefundedValue',
            'message': 'message',
            'processing_date': 'processingDate',
            'refunded_token': 'refundedToken',
            'refunded_value': 'refundedValue',
            'status': 'status',
            'status_detail': 'statusDetail',
            'token': 'token'
        }

        self._cancelled_value = cancelled_value
        self._connector_refunded_value = connector_refunded_value
        self._message = message
        self._processing_date = processing_date
        self._refunded_token = refunded_token
        self._refunded_value = refunded_value
        self._status = status
        self._status_detail = status_detail
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SettleResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SettleResponse of this SettleResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancelled_value(self):
        """Gets the cancelled_value of this SettleResponse.


        :return: The cancelled_value of this SettleResponse.
        :rtype: int
        """
        return self._cancelled_value

    @cancelled_value.setter
    def cancelled_value(self, cancelled_value):
        """Sets the cancelled_value of this SettleResponse.


        :param cancelled_value: The cancelled_value of this SettleResponse.
        :type cancelled_value: int
        """
        if cancelled_value is None:
            raise ValueError("Invalid value for `cancelled_value`, must not be `None`")

        self._cancelled_value = cancelled_value

    @property
    def connector_refunded_value(self):
        """Gets the connector_refunded_value of this SettleResponse.


        :return: The connector_refunded_value of this SettleResponse.
        :rtype: int
        """
        return self._connector_refunded_value

    @connector_refunded_value.setter
    def connector_refunded_value(self, connector_refunded_value):
        """Sets the connector_refunded_value of this SettleResponse.


        :param connector_refunded_value: The connector_refunded_value of this SettleResponse.
        :type connector_refunded_value: int
        """
        if connector_refunded_value is None:
            raise ValueError("Invalid value for `connector_refunded_value`, must not be `None`")

        self._connector_refunded_value = connector_refunded_value

    @property
    def message(self):
        """Gets the message of this SettleResponse.


        :return: The message of this SettleResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SettleResponse.


        :param message: The message of this SettleResponse.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def processing_date(self):
        """Gets the processing_date of this SettleResponse.


        :return: The processing_date of this SettleResponse.
        :rtype: str
        """
        return self._processing_date

    @processing_date.setter
    def processing_date(self, processing_date):
        """Sets the processing_date of this SettleResponse.


        :param processing_date: The processing_date of this SettleResponse.
        :type processing_date: str
        """
        if processing_date is None:
            raise ValueError("Invalid value for `processing_date`, must not be `None`")

        self._processing_date = processing_date

    @property
    def refunded_token(self):
        """Gets the refunded_token of this SettleResponse.


        :return: The refunded_token of this SettleResponse.
        :rtype: str
        """
        return self._refunded_token

    @refunded_token.setter
    def refunded_token(self, refunded_token):
        """Sets the refunded_token of this SettleResponse.


        :param refunded_token: The refunded_token of this SettleResponse.
        :type refunded_token: str
        """
        if refunded_token is None:
            raise ValueError("Invalid value for `refunded_token`, must not be `None`")

        self._refunded_token = refunded_token

    @property
    def refunded_value(self):
        """Gets the refunded_value of this SettleResponse.


        :return: The refunded_value of this SettleResponse.
        :rtype: int
        """
        return self._refunded_value

    @refunded_value.setter
    def refunded_value(self, refunded_value):
        """Sets the refunded_value of this SettleResponse.


        :param refunded_value: The refunded_value of this SettleResponse.
        :type refunded_value: int
        """
        if refunded_value is None:
            raise ValueError("Invalid value for `refunded_value`, must not be `None`")

        self._refunded_value = refunded_value

    @property
    def status(self):
        """Gets the status of this SettleResponse.


        :return: The status of this SettleResponse.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SettleResponse.


        :param status: The status of this SettleResponse.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_detail(self):
        """Gets the status_detail of this SettleResponse.


        :return: The status_detail of this SettleResponse.
        :rtype: str
        """
        return self._status_detail

    @status_detail.setter
    def status_detail(self, status_detail):
        """Sets the status_detail of this SettleResponse.


        :param status_detail: The status_detail of this SettleResponse.
        :type status_detail: str
        """
        if status_detail is None:
            raise ValueError("Invalid value for `status_detail`, must not be `None`")

        self._status_detail = status_detail

    @property
    def token(self):
        """Gets the token of this SettleResponse.


        :return: The token of this SettleResponse.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this SettleResponse.


        :param token: The token of this SettleResponse.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
