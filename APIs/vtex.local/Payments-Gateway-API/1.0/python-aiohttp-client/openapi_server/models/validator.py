# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Validator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_code_mask: str=None, card_code_regex: str=None, mask: str=None, regex: str=None, use_billing_address: bool=None, use_card_holder_name: bool=None, use_cvv: bool=None, use_expiration_date: bool=None, valid_card_lengths: str=None, weights: List[int]=None):
        """Validator - a model defined in OpenAPI

        :param card_code_mask: The card_code_mask of this Validator.
        :param card_code_regex: The card_code_regex of this Validator.
        :param mask: The mask of this Validator.
        :param regex: The regex of this Validator.
        :param use_billing_address: The use_billing_address of this Validator.
        :param use_card_holder_name: The use_card_holder_name of this Validator.
        :param use_cvv: The use_cvv of this Validator.
        :param use_expiration_date: The use_expiration_date of this Validator.
        :param valid_card_lengths: The valid_card_lengths of this Validator.
        :param weights: The weights of this Validator.
        """
        self.openapi_types = {
            'card_code_mask': str,
            'card_code_regex': str,
            'mask': str,
            'regex': str,
            'use_billing_address': bool,
            'use_card_holder_name': bool,
            'use_cvv': bool,
            'use_expiration_date': bool,
            'valid_card_lengths': str,
            'weights': List[int]
        }

        self.attribute_map = {
            'card_code_mask': 'cardCodeMask',
            'card_code_regex': 'cardCodeRegex',
            'mask': 'mask',
            'regex': 'regex',
            'use_billing_address': 'useBillingAddress',
            'use_card_holder_name': 'useCardHolderName',
            'use_cvv': 'useCvv',
            'use_expiration_date': 'useExpirationDate',
            'valid_card_lengths': 'validCardLengths',
            'weights': 'weights'
        }

        self._card_code_mask = card_code_mask
        self._card_code_regex = card_code_regex
        self._mask = mask
        self._regex = regex
        self._use_billing_address = use_billing_address
        self._use_card_holder_name = use_card_holder_name
        self._use_cvv = use_cvv
        self._use_expiration_date = use_expiration_date
        self._valid_card_lengths = valid_card_lengths
        self._weights = weights

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Validator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Validator of this Validator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_code_mask(self):
        """Gets the card_code_mask of this Validator.


        :return: The card_code_mask of this Validator.
        :rtype: str
        """
        return self._card_code_mask

    @card_code_mask.setter
    def card_code_mask(self, card_code_mask):
        """Sets the card_code_mask of this Validator.


        :param card_code_mask: The card_code_mask of this Validator.
        :type card_code_mask: str
        """
        if card_code_mask is None:
            raise ValueError("Invalid value for `card_code_mask`, must not be `None`")

        self._card_code_mask = card_code_mask

    @property
    def card_code_regex(self):
        """Gets the card_code_regex of this Validator.


        :return: The card_code_regex of this Validator.
        :rtype: str
        """
        return self._card_code_regex

    @card_code_regex.setter
    def card_code_regex(self, card_code_regex):
        """Sets the card_code_regex of this Validator.


        :param card_code_regex: The card_code_regex of this Validator.
        :type card_code_regex: str
        """
        if card_code_regex is None:
            raise ValueError("Invalid value for `card_code_regex`, must not be `None`")

        self._card_code_regex = card_code_regex

    @property
    def mask(self):
        """Gets the mask of this Validator.


        :return: The mask of this Validator.
        :rtype: str
        """
        return self._mask

    @mask.setter
    def mask(self, mask):
        """Sets the mask of this Validator.


        :param mask: The mask of this Validator.
        :type mask: str
        """
        if mask is None:
            raise ValueError("Invalid value for `mask`, must not be `None`")

        self._mask = mask

    @property
    def regex(self):
        """Gets the regex of this Validator.


        :return: The regex of this Validator.
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this Validator.


        :param regex: The regex of this Validator.
        :type regex: str
        """
        if regex is None:
            raise ValueError("Invalid value for `regex`, must not be `None`")

        self._regex = regex

    @property
    def use_billing_address(self):
        """Gets the use_billing_address of this Validator.


        :return: The use_billing_address of this Validator.
        :rtype: bool
        """
        return self._use_billing_address

    @use_billing_address.setter
    def use_billing_address(self, use_billing_address):
        """Sets the use_billing_address of this Validator.


        :param use_billing_address: The use_billing_address of this Validator.
        :type use_billing_address: bool
        """
        if use_billing_address is None:
            raise ValueError("Invalid value for `use_billing_address`, must not be `None`")

        self._use_billing_address = use_billing_address

    @property
    def use_card_holder_name(self):
        """Gets the use_card_holder_name of this Validator.


        :return: The use_card_holder_name of this Validator.
        :rtype: bool
        """
        return self._use_card_holder_name

    @use_card_holder_name.setter
    def use_card_holder_name(self, use_card_holder_name):
        """Sets the use_card_holder_name of this Validator.


        :param use_card_holder_name: The use_card_holder_name of this Validator.
        :type use_card_holder_name: bool
        """
        if use_card_holder_name is None:
            raise ValueError("Invalid value for `use_card_holder_name`, must not be `None`")

        self._use_card_holder_name = use_card_holder_name

    @property
    def use_cvv(self):
        """Gets the use_cvv of this Validator.


        :return: The use_cvv of this Validator.
        :rtype: bool
        """
        return self._use_cvv

    @use_cvv.setter
    def use_cvv(self, use_cvv):
        """Sets the use_cvv of this Validator.


        :param use_cvv: The use_cvv of this Validator.
        :type use_cvv: bool
        """
        if use_cvv is None:
            raise ValueError("Invalid value for `use_cvv`, must not be `None`")

        self._use_cvv = use_cvv

    @property
    def use_expiration_date(self):
        """Gets the use_expiration_date of this Validator.


        :return: The use_expiration_date of this Validator.
        :rtype: bool
        """
        return self._use_expiration_date

    @use_expiration_date.setter
    def use_expiration_date(self, use_expiration_date):
        """Sets the use_expiration_date of this Validator.


        :param use_expiration_date: The use_expiration_date of this Validator.
        :type use_expiration_date: bool
        """
        if use_expiration_date is None:
            raise ValueError("Invalid value for `use_expiration_date`, must not be `None`")

        self._use_expiration_date = use_expiration_date

    @property
    def valid_card_lengths(self):
        """Gets the valid_card_lengths of this Validator.


        :return: The valid_card_lengths of this Validator.
        :rtype: str
        """
        return self._valid_card_lengths

    @valid_card_lengths.setter
    def valid_card_lengths(self, valid_card_lengths):
        """Sets the valid_card_lengths of this Validator.


        :param valid_card_lengths: The valid_card_lengths of this Validator.
        :type valid_card_lengths: str
        """
        if valid_card_lengths is None:
            raise ValueError("Invalid value for `valid_card_lengths`, must not be `None`")

        self._valid_card_lengths = valid_card_lengths

    @property
    def weights(self):
        """Gets the weights of this Validator.

        

        :return: The weights of this Validator.
        :rtype: List[int]
        """
        return self._weights

    @weights.setter
    def weights(self, weights):
        """Sets the weights of this Validator.

        

        :param weights: The weights of this Validator.
        :type weights: List[int]
        """
        if weights is None:
            raise ValueError("Invalid value for `weights`, must not be `None`")

        self._weights = weights
