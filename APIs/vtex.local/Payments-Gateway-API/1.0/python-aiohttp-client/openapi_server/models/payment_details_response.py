# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fields1 import Fields1
from openapi_server.models.model_self import ModelSelf
from openapi_server import util


class PaymentDetailsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_responses: str=None, show_connector_responses: bool=None, allow_installments: bool=None, allow_issuer: bool=None, allow_notification: bool=None, connector: str=None, connector_response: str=None, currency_code: str=None, description: str=None, fields: List[Fields1]=None, group: str=None, id: str=None, installments: int=None, installments_interest_rate: int=None, installments_value: int=None, is_available: bool=None, is_custom: bool=None, merchant_name: str=None, payment_system: int=None, payment_system_name: str=None, provider: str=None, reference_value: int=None, return_code: str=None, return_message: str=None, _self: ModelSelf=None, sheets: str=None, status: str=None, tid: str=None, value: int=None):
        """PaymentDetailsResponse - a model defined in OpenAPI

        :param connector_responses: The connector_responses of this PaymentDetailsResponse.
        :param show_connector_responses: The show_connector_responses of this PaymentDetailsResponse.
        :param allow_installments: The allow_installments of this PaymentDetailsResponse.
        :param allow_issuer: The allow_issuer of this PaymentDetailsResponse.
        :param allow_notification: The allow_notification of this PaymentDetailsResponse.
        :param connector: The connector of this PaymentDetailsResponse.
        :param connector_response: The connector_response of this PaymentDetailsResponse.
        :param currency_code: The currency_code of this PaymentDetailsResponse.
        :param description: The description of this PaymentDetailsResponse.
        :param fields: The fields of this PaymentDetailsResponse.
        :param group: The group of this PaymentDetailsResponse.
        :param id: The id of this PaymentDetailsResponse.
        :param installments: The installments of this PaymentDetailsResponse.
        :param installments_interest_rate: The installments_interest_rate of this PaymentDetailsResponse.
        :param installments_value: The installments_value of this PaymentDetailsResponse.
        :param is_available: The is_available of this PaymentDetailsResponse.
        :param is_custom: The is_custom of this PaymentDetailsResponse.
        :param merchant_name: The merchant_name of this PaymentDetailsResponse.
        :param payment_system: The payment_system of this PaymentDetailsResponse.
        :param payment_system_name: The payment_system_name of this PaymentDetailsResponse.
        :param provider: The provider of this PaymentDetailsResponse.
        :param reference_value: The reference_value of this PaymentDetailsResponse.
        :param return_code: The return_code of this PaymentDetailsResponse.
        :param return_message: The return_message of this PaymentDetailsResponse.
        :param _self: The _self of this PaymentDetailsResponse.
        :param sheets: The sheets of this PaymentDetailsResponse.
        :param status: The status of this PaymentDetailsResponse.
        :param tid: The tid of this PaymentDetailsResponse.
        :param value: The value of this PaymentDetailsResponse.
        """
        self.openapi_types = {
            'connector_responses': str,
            'show_connector_responses': bool,
            'allow_installments': bool,
            'allow_issuer': bool,
            'allow_notification': bool,
            'connector': str,
            'connector_response': str,
            'currency_code': str,
            'description': str,
            'fields': List[Fields1],
            'group': str,
            'id': str,
            'installments': int,
            'installments_interest_rate': int,
            'installments_value': int,
            'is_available': bool,
            'is_custom': bool,
            'merchant_name': str,
            'payment_system': int,
            'payment_system_name': str,
            'provider': str,
            'reference_value': int,
            'return_code': str,
            'return_message': str,
            '_self': ModelSelf,
            'sheets': str,
            'status': str,
            'tid': str,
            'value': int
        }

        self.attribute_map = {
            'connector_responses': 'ConnectorResponses',
            'show_connector_responses': 'ShowConnectorResponses',
            'allow_installments': 'allowInstallments',
            'allow_issuer': 'allowIssuer',
            'allow_notification': 'allowNotification',
            'connector': 'connector',
            'connector_response': 'connectorResponse',
            'currency_code': 'currencyCode',
            'description': 'description',
            'fields': 'fields',
            'group': 'group',
            'id': 'id',
            'installments': 'installments',
            'installments_interest_rate': 'installmentsInterestRate',
            'installments_value': 'installmentsValue',
            'is_available': 'isAvailable',
            'is_custom': 'isCustom',
            'merchant_name': 'merchantName',
            'payment_system': 'paymentSystem',
            'payment_system_name': 'paymentSystemName',
            'provider': 'provider',
            'reference_value': 'referenceValue',
            'return_code': 'returnCode',
            'return_message': 'returnMessage',
            '_self': 'self',
            'sheets': 'sheets',
            'status': 'status',
            'tid': 'tid',
            'value': 'value'
        }

        self._connector_responses = connector_responses
        self._show_connector_responses = show_connector_responses
        self._allow_installments = allow_installments
        self._allow_issuer = allow_issuer
        self._allow_notification = allow_notification
        self._connector = connector
        self._connector_response = connector_response
        self._currency_code = currency_code
        self._description = description
        self._fields = fields
        self._group = group
        self._id = id
        self._installments = installments
        self._installments_interest_rate = installments_interest_rate
        self._installments_value = installments_value
        self._is_available = is_available
        self._is_custom = is_custom
        self._merchant_name = merchant_name
        self._payment_system = payment_system
        self._payment_system_name = payment_system_name
        self._provider = provider
        self._reference_value = reference_value
        self._return_code = return_code
        self._return_message = return_message
        self.__self = _self
        self._sheets = sheets
        self._status = status
        self._tid = tid
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentDetailsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentDetailsResponse of this PaymentDetailsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_responses(self):
        """Gets the connector_responses of this PaymentDetailsResponse.


        :return: The connector_responses of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._connector_responses

    @connector_responses.setter
    def connector_responses(self, connector_responses):
        """Sets the connector_responses of this PaymentDetailsResponse.


        :param connector_responses: The connector_responses of this PaymentDetailsResponse.
        :type connector_responses: str
        """
        if connector_responses is None:
            raise ValueError("Invalid value for `connector_responses`, must not be `None`")

        self._connector_responses = connector_responses

    @property
    def show_connector_responses(self):
        """Gets the show_connector_responses of this PaymentDetailsResponse.


        :return: The show_connector_responses of this PaymentDetailsResponse.
        :rtype: bool
        """
        return self._show_connector_responses

    @show_connector_responses.setter
    def show_connector_responses(self, show_connector_responses):
        """Sets the show_connector_responses of this PaymentDetailsResponse.


        :param show_connector_responses: The show_connector_responses of this PaymentDetailsResponse.
        :type show_connector_responses: bool
        """
        if show_connector_responses is None:
            raise ValueError("Invalid value for `show_connector_responses`, must not be `None`")

        self._show_connector_responses = show_connector_responses

    @property
    def allow_installments(self):
        """Gets the allow_installments of this PaymentDetailsResponse.


        :return: The allow_installments of this PaymentDetailsResponse.
        :rtype: bool
        """
        return self._allow_installments

    @allow_installments.setter
    def allow_installments(self, allow_installments):
        """Sets the allow_installments of this PaymentDetailsResponse.


        :param allow_installments: The allow_installments of this PaymentDetailsResponse.
        :type allow_installments: bool
        """
        if allow_installments is None:
            raise ValueError("Invalid value for `allow_installments`, must not be `None`")

        self._allow_installments = allow_installments

    @property
    def allow_issuer(self):
        """Gets the allow_issuer of this PaymentDetailsResponse.


        :return: The allow_issuer of this PaymentDetailsResponse.
        :rtype: bool
        """
        return self._allow_issuer

    @allow_issuer.setter
    def allow_issuer(self, allow_issuer):
        """Sets the allow_issuer of this PaymentDetailsResponse.


        :param allow_issuer: The allow_issuer of this PaymentDetailsResponse.
        :type allow_issuer: bool
        """
        if allow_issuer is None:
            raise ValueError("Invalid value for `allow_issuer`, must not be `None`")

        self._allow_issuer = allow_issuer

    @property
    def allow_notification(self):
        """Gets the allow_notification of this PaymentDetailsResponse.


        :return: The allow_notification of this PaymentDetailsResponse.
        :rtype: bool
        """
        return self._allow_notification

    @allow_notification.setter
    def allow_notification(self, allow_notification):
        """Sets the allow_notification of this PaymentDetailsResponse.


        :param allow_notification: The allow_notification of this PaymentDetailsResponse.
        :type allow_notification: bool
        """
        if allow_notification is None:
            raise ValueError("Invalid value for `allow_notification`, must not be `None`")

        self._allow_notification = allow_notification

    @property
    def connector(self):
        """Gets the connector of this PaymentDetailsResponse.


        :return: The connector of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._connector

    @connector.setter
    def connector(self, connector):
        """Sets the connector of this PaymentDetailsResponse.


        :param connector: The connector of this PaymentDetailsResponse.
        :type connector: str
        """
        if connector is None:
            raise ValueError("Invalid value for `connector`, must not be `None`")

        self._connector = connector

    @property
    def connector_response(self):
        """Gets the connector_response of this PaymentDetailsResponse.


        :return: The connector_response of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._connector_response

    @connector_response.setter
    def connector_response(self, connector_response):
        """Sets the connector_response of this PaymentDetailsResponse.


        :param connector_response: The connector_response of this PaymentDetailsResponse.
        :type connector_response: str
        """
        if connector_response is None:
            raise ValueError("Invalid value for `connector_response`, must not be `None`")

        self._connector_response = connector_response

    @property
    def currency_code(self):
        """Gets the currency_code of this PaymentDetailsResponse.


        :return: The currency_code of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this PaymentDetailsResponse.


        :param currency_code: The currency_code of this PaymentDetailsResponse.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def description(self):
        """Gets the description of this PaymentDetailsResponse.


        :return: The description of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentDetailsResponse.


        :param description: The description of this PaymentDetailsResponse.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def fields(self):
        """Gets the fields of this PaymentDetailsResponse.

        

        :return: The fields of this PaymentDetailsResponse.
        :rtype: List[Fields1]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this PaymentDetailsResponse.

        

        :param fields: The fields of this PaymentDetailsResponse.
        :type fields: List[Fields1]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def group(self):
        """Gets the group of this PaymentDetailsResponse.


        :return: The group of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this PaymentDetailsResponse.


        :param group: The group of this PaymentDetailsResponse.
        :type group: str
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")

        self._group = group

    @property
    def id(self):
        """Gets the id of this PaymentDetailsResponse.


        :return: The id of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentDetailsResponse.


        :param id: The id of this PaymentDetailsResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def installments(self):
        """Gets the installments of this PaymentDetailsResponse.


        :return: The installments of this PaymentDetailsResponse.
        :rtype: int
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this PaymentDetailsResponse.


        :param installments: The installments of this PaymentDetailsResponse.
        :type installments: int
        """
        if installments is None:
            raise ValueError("Invalid value for `installments`, must not be `None`")

        self._installments = installments

    @property
    def installments_interest_rate(self):
        """Gets the installments_interest_rate of this PaymentDetailsResponse.


        :return: The installments_interest_rate of this PaymentDetailsResponse.
        :rtype: int
        """
        return self._installments_interest_rate

    @installments_interest_rate.setter
    def installments_interest_rate(self, installments_interest_rate):
        """Sets the installments_interest_rate of this PaymentDetailsResponse.


        :param installments_interest_rate: The installments_interest_rate of this PaymentDetailsResponse.
        :type installments_interest_rate: int
        """
        if installments_interest_rate is None:
            raise ValueError("Invalid value for `installments_interest_rate`, must not be `None`")

        self._installments_interest_rate = installments_interest_rate

    @property
    def installments_value(self):
        """Gets the installments_value of this PaymentDetailsResponse.


        :return: The installments_value of this PaymentDetailsResponse.
        :rtype: int
        """
        return self._installments_value

    @installments_value.setter
    def installments_value(self, installments_value):
        """Sets the installments_value of this PaymentDetailsResponse.


        :param installments_value: The installments_value of this PaymentDetailsResponse.
        :type installments_value: int
        """
        if installments_value is None:
            raise ValueError("Invalid value for `installments_value`, must not be `None`")

        self._installments_value = installments_value

    @property
    def is_available(self):
        """Gets the is_available of this PaymentDetailsResponse.


        :return: The is_available of this PaymentDetailsResponse.
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this PaymentDetailsResponse.


        :param is_available: The is_available of this PaymentDetailsResponse.
        :type is_available: bool
        """
        if is_available is None:
            raise ValueError("Invalid value for `is_available`, must not be `None`")

        self._is_available = is_available

    @property
    def is_custom(self):
        """Gets the is_custom of this PaymentDetailsResponse.


        :return: The is_custom of this PaymentDetailsResponse.
        :rtype: bool
        """
        return self._is_custom

    @is_custom.setter
    def is_custom(self, is_custom):
        """Sets the is_custom of this PaymentDetailsResponse.


        :param is_custom: The is_custom of this PaymentDetailsResponse.
        :type is_custom: bool
        """
        if is_custom is None:
            raise ValueError("Invalid value for `is_custom`, must not be `None`")

        self._is_custom = is_custom

    @property
    def merchant_name(self):
        """Gets the merchant_name of this PaymentDetailsResponse.


        :return: The merchant_name of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this PaymentDetailsResponse.


        :param merchant_name: The merchant_name of this PaymentDetailsResponse.
        :type merchant_name: str
        """
        if merchant_name is None:
            raise ValueError("Invalid value for `merchant_name`, must not be `None`")

        self._merchant_name = merchant_name

    @property
    def payment_system(self):
        """Gets the payment_system of this PaymentDetailsResponse.


        :return: The payment_system of this PaymentDetailsResponse.
        :rtype: int
        """
        return self._payment_system

    @payment_system.setter
    def payment_system(self, payment_system):
        """Sets the payment_system of this PaymentDetailsResponse.


        :param payment_system: The payment_system of this PaymentDetailsResponse.
        :type payment_system: int
        """
        if payment_system is None:
            raise ValueError("Invalid value for `payment_system`, must not be `None`")

        self._payment_system = payment_system

    @property
    def payment_system_name(self):
        """Gets the payment_system_name of this PaymentDetailsResponse.


        :return: The payment_system_name of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._payment_system_name

    @payment_system_name.setter
    def payment_system_name(self, payment_system_name):
        """Sets the payment_system_name of this PaymentDetailsResponse.


        :param payment_system_name: The payment_system_name of this PaymentDetailsResponse.
        :type payment_system_name: str
        """
        if payment_system_name is None:
            raise ValueError("Invalid value for `payment_system_name`, must not be `None`")

        self._payment_system_name = payment_system_name

    @property
    def provider(self):
        """Gets the provider of this PaymentDetailsResponse.


        :return: The provider of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this PaymentDetailsResponse.


        :param provider: The provider of this PaymentDetailsResponse.
        :type provider: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def reference_value(self):
        """Gets the reference_value of this PaymentDetailsResponse.


        :return: The reference_value of this PaymentDetailsResponse.
        :rtype: int
        """
        return self._reference_value

    @reference_value.setter
    def reference_value(self, reference_value):
        """Sets the reference_value of this PaymentDetailsResponse.


        :param reference_value: The reference_value of this PaymentDetailsResponse.
        :type reference_value: int
        """
        if reference_value is None:
            raise ValueError("Invalid value for `reference_value`, must not be `None`")

        self._reference_value = reference_value

    @property
    def return_code(self):
        """Gets the return_code of this PaymentDetailsResponse.


        :return: The return_code of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._return_code

    @return_code.setter
    def return_code(self, return_code):
        """Sets the return_code of this PaymentDetailsResponse.


        :param return_code: The return_code of this PaymentDetailsResponse.
        :type return_code: str
        """
        if return_code is None:
            raise ValueError("Invalid value for `return_code`, must not be `None`")

        self._return_code = return_code

    @property
    def return_message(self):
        """Gets the return_message of this PaymentDetailsResponse.


        :return: The return_message of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._return_message

    @return_message.setter
    def return_message(self, return_message):
        """Sets the return_message of this PaymentDetailsResponse.


        :param return_message: The return_message of this PaymentDetailsResponse.
        :type return_message: str
        """
        if return_message is None:
            raise ValueError("Invalid value for `return_message`, must not be `None`")

        self._return_message = return_message

    @property
    def _self(self):
        """Gets the _self of this PaymentDetailsResponse.


        :return: The _self of this PaymentDetailsResponse.
        :rtype: ModelSelf
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this PaymentDetailsResponse.


        :param _self: The _self of this PaymentDetailsResponse.
        :type _self: ModelSelf
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def sheets(self):
        """Gets the sheets of this PaymentDetailsResponse.


        :return: The sheets of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._sheets

    @sheets.setter
    def sheets(self, sheets):
        """Sets the sheets of this PaymentDetailsResponse.


        :param sheets: The sheets of this PaymentDetailsResponse.
        :type sheets: str
        """
        if sheets is None:
            raise ValueError("Invalid value for `sheets`, must not be `None`")

        self._sheets = sheets

    @property
    def status(self):
        """Gets the status of this PaymentDetailsResponse.


        :return: The status of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentDetailsResponse.


        :param status: The status of this PaymentDetailsResponse.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tid(self):
        """Gets the tid of this PaymentDetailsResponse.


        :return: The tid of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._tid

    @tid.setter
    def tid(self, tid):
        """Sets the tid of this PaymentDetailsResponse.


        :param tid: The tid of this PaymentDetailsResponse.
        :type tid: str
        """
        if tid is None:
            raise ValueError("Invalid value for `tid`, must not be `None`")

        self._tid = tid

    @property
    def value(self):
        """Gets the value of this PaymentDetailsResponse.


        :return: The value of this PaymentDetailsResponse.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PaymentDetailsResponse.


        :param value: The value of this PaymentDetailsResponse.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
