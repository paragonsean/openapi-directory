/*
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Cancellations;
import org.openapitools.client.model.Fields1;
import org.openapitools.client.model.Interactions;
import org.openapitools.client.model.Payments;
import org.openapitools.client.model.Refunds;
import org.openapitools.client.model.Settlements;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransactionDetailsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:23.786494-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransactionDetailsResponse {
  public static final String SERIALIZED_NAME_ACCEPT_HEADER = "acceptHeader";
  @SerializedName(SERIALIZED_NAME_ACCEPT_HEADER)
  private String acceptHeader;

  public static final String SERIALIZED_NAME_ANTIFRAUD_AFFILIATION_ID = "antifraudAffiliationId";
  @SerializedName(SERIALIZED_NAME_ANTIFRAUD_AFFILIATION_ID)
  private String antifraudAffiliationId;

  public static final String SERIALIZED_NAME_ANTIFRAUD_TID = "antifraudTid";
  @SerializedName(SERIALIZED_NAME_ANTIFRAUD_TID)
  private String antifraudTid;

  public static final String SERIALIZED_NAME_AUTHORIZATION_DATE = "authorizationDate";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_DATE)
  private String authorizationDate;

  public static final String SERIALIZED_NAME_AUTHORIZATION_TOKEN = "authorizationToken";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_TOKEN)
  private String authorizationToken;

  public static final String SERIALIZED_NAME_BUYER = "buyer";
  @SerializedName(SERIALIZED_NAME_BUYER)
  private String buyer;

  public static final String SERIALIZED_NAME_CANCELATION_DATE = "cancelationDate";
  @SerializedName(SERIALIZED_NAME_CANCELATION_DATE)
  private String cancelationDate;

  public static final String SERIALIZED_NAME_CANCELATION_TOKEN = "cancelationToken";
  @SerializedName(SERIALIZED_NAME_CANCELATION_TOKEN)
  private String cancelationToken;

  public static final String SERIALIZED_NAME_CANCELLATIONS = "cancellations";
  @SerializedName(SERIALIZED_NAME_CANCELLATIONS)
  private Cancellations cancellations;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_COMMITMENT_DATE = "commitmentDate";
  @SerializedName(SERIALIZED_NAME_COMMITMENT_DATE)
  private String commitmentDate;

  public static final String SERIALIZED_NAME_COMMITMENT_TOKEN = "commitmentToken";
  @SerializedName(SERIALIZED_NAME_COMMITMENT_TOKEN)
  private String commitmentToken;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<Fields1> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTERACTIONS = "interactions";
  @SerializedName(SERIALIZED_NAME_INTERACTIONS)
  private Interactions interactions;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_MARKED_FOR_RECURRENCE = "markedForRecurrence";
  @SerializedName(SERIALIZED_NAME_MARKED_FOR_RECURRENCE)
  private Boolean markedForRecurrence;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_PAYMENTS = "payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  private Payments payments;

  public static final String SERIALIZED_NAME_RECEIVER_URI = "receiverUri";
  @SerializedName(SERIALIZED_NAME_RECEIVER_URI)
  private String receiverUri;

  public static final String SERIALIZED_NAME_REFERENCE_KEY = "referenceKey";
  @SerializedName(SERIALIZED_NAME_REFERENCE_KEY)
  private String referenceKey;

  public static final String SERIALIZED_NAME_REFUNDING_DATE = "refundingDate";
  @SerializedName(SERIALIZED_NAME_REFUNDING_DATE)
  private String refundingDate;

  public static final String SERIALIZED_NAME_REFUNDING_TOKEN = "refundingToken";
  @SerializedName(SERIALIZED_NAME_REFUNDING_TOKEN)
  private String refundingToken;

  public static final String SERIALIZED_NAME_REFUNDS = "refunds";
  @SerializedName(SERIALIZED_NAME_REFUNDS)
  private Refunds refunds;

  public static final String SERIALIZED_NAME_SALES_CHANNEL = "salesChannel";
  @SerializedName(SERIALIZED_NAME_SALES_CHANNEL)
  private String salesChannel;

  public static final String SERIALIZED_NAME_SETTLEMENTS = "settlements";
  @SerializedName(SERIALIZED_NAME_SETTLEMENTS)
  private Settlements settlements;

  public static final String SERIALIZED_NAME_SOFT_DESCRIPTOR = "softDescriptor";
  @SerializedName(SERIALIZED_NAME_SOFT_DESCRIPTOR)
  private String softDescriptor;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TIMEOUT_STATUS = "timeoutStatus";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_STATUS)
  private Integer timeoutStatus;

  public static final String SERIALIZED_NAME_TOTAL_REFUNDS = "totalRefunds";
  @SerializedName(SERIALIZED_NAME_TOTAL_REFUNDS)
  private BigDecimal totalRefunds;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_URN = "urn";
  @SerializedName(SERIALIZED_NAME_URN)
  private String urn;

  public static final String SERIALIZED_NAME_USER_AGENT = "userAgent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private String userAgent;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Integer value;

  public TransactionDetailsResponse() {
  }

  public TransactionDetailsResponse acceptHeader(String acceptHeader) {
    this.acceptHeader = acceptHeader;
    return this;
  }

  /**
   * Get acceptHeader
   * @return acceptHeader
   */
  @javax.annotation.Nonnull
  public String getAcceptHeader() {
    return acceptHeader;
  }

  public void setAcceptHeader(String acceptHeader) {
    this.acceptHeader = acceptHeader;
  }


  public TransactionDetailsResponse antifraudAffiliationId(String antifraudAffiliationId) {
    this.antifraudAffiliationId = antifraudAffiliationId;
    return this;
  }

  /**
   * Get antifraudAffiliationId
   * @return antifraudAffiliationId
   */
  @javax.annotation.Nullable
  public String getAntifraudAffiliationId() {
    return antifraudAffiliationId;
  }

  public void setAntifraudAffiliationId(String antifraudAffiliationId) {
    this.antifraudAffiliationId = antifraudAffiliationId;
  }


  public TransactionDetailsResponse antifraudTid(String antifraudTid) {
    this.antifraudTid = antifraudTid;
    return this;
  }

  /**
   * Get antifraudTid
   * @return antifraudTid
   */
  @javax.annotation.Nullable
  public String getAntifraudTid() {
    return antifraudTid;
  }

  public void setAntifraudTid(String antifraudTid) {
    this.antifraudTid = antifraudTid;
  }


  public TransactionDetailsResponse authorizationDate(String authorizationDate) {
    this.authorizationDate = authorizationDate;
    return this;
  }

  /**
   * Get authorizationDate
   * @return authorizationDate
   */
  @javax.annotation.Nullable
  public String getAuthorizationDate() {
    return authorizationDate;
  }

  public void setAuthorizationDate(String authorizationDate) {
    this.authorizationDate = authorizationDate;
  }


  public TransactionDetailsResponse authorizationToken(String authorizationToken) {
    this.authorizationToken = authorizationToken;
    return this;
  }

  /**
   * Get authorizationToken
   * @return authorizationToken
   */
  @javax.annotation.Nullable
  public String getAuthorizationToken() {
    return authorizationToken;
  }

  public void setAuthorizationToken(String authorizationToken) {
    this.authorizationToken = authorizationToken;
  }


  public TransactionDetailsResponse buyer(String buyer) {
    this.buyer = buyer;
    return this;
  }

  /**
   * Get buyer
   * @return buyer
   */
  @javax.annotation.Nullable
  public String getBuyer() {
    return buyer;
  }

  public void setBuyer(String buyer) {
    this.buyer = buyer;
  }


  public TransactionDetailsResponse cancelationDate(String cancelationDate) {
    this.cancelationDate = cancelationDate;
    return this;
  }

  /**
   * Get cancelationDate
   * @return cancelationDate
   */
  @javax.annotation.Nullable
  public String getCancelationDate() {
    return cancelationDate;
  }

  public void setCancelationDate(String cancelationDate) {
    this.cancelationDate = cancelationDate;
  }


  public TransactionDetailsResponse cancelationToken(String cancelationToken) {
    this.cancelationToken = cancelationToken;
    return this;
  }

  /**
   * Get cancelationToken
   * @return cancelationToken
   */
  @javax.annotation.Nullable
  public String getCancelationToken() {
    return cancelationToken;
  }

  public void setCancelationToken(String cancelationToken) {
    this.cancelationToken = cancelationToken;
  }


  public TransactionDetailsResponse cancellations(Cancellations cancellations) {
    this.cancellations = cancellations;
    return this;
  }

  /**
   * Get cancellations
   * @return cancellations
   */
  @javax.annotation.Nonnull
  public Cancellations getCancellations() {
    return cancellations;
  }

  public void setCancellations(Cancellations cancellations) {
    this.cancellations = cancellations;
  }


  public TransactionDetailsResponse channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Get channel
   * @return channel
   */
  @javax.annotation.Nonnull
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public TransactionDetailsResponse commitmentDate(String commitmentDate) {
    this.commitmentDate = commitmentDate;
    return this;
  }

  /**
   * Get commitmentDate
   * @return commitmentDate
   */
  @javax.annotation.Nullable
  public String getCommitmentDate() {
    return commitmentDate;
  }

  public void setCommitmentDate(String commitmentDate) {
    this.commitmentDate = commitmentDate;
  }


  public TransactionDetailsResponse commitmentToken(String commitmentToken) {
    this.commitmentToken = commitmentToken;
    return this;
  }

  /**
   * Get commitmentToken
   * @return commitmentToken
   */
  @javax.annotation.Nullable
  public String getCommitmentToken() {
    return commitmentToken;
  }

  public void setCommitmentToken(String commitmentToken) {
    this.commitmentToken = commitmentToken;
  }


  public TransactionDetailsResponse fields(List<Fields1> fields) {
    this.fields = fields;
    return this;
  }

  public TransactionDetailsResponse addFieldsItem(Fields1 fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * 
   * @return fields
   */
  @javax.annotation.Nonnull
  public List<Fields1> getFields() {
    return fields;
  }

  public void setFields(List<Fields1> fields) {
    this.fields = fields;
  }


  public TransactionDetailsResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TransactionDetailsResponse interactions(Interactions interactions) {
    this.interactions = interactions;
    return this;
  }

  /**
   * Get interactions
   * @return interactions
   */
  @javax.annotation.Nonnull
  public Interactions getInteractions() {
    return interactions;
  }

  public void setInteractions(Interactions interactions) {
    this.interactions = interactions;
  }


  public TransactionDetailsResponse ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nonnull
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public TransactionDetailsResponse markedForRecurrence(Boolean markedForRecurrence) {
    this.markedForRecurrence = markedForRecurrence;
    return this;
  }

  /**
   * Get markedForRecurrence
   * @return markedForRecurrence
   */
  @javax.annotation.Nonnull
  public Boolean getMarkedForRecurrence() {
    return markedForRecurrence;
  }

  public void setMarkedForRecurrence(Boolean markedForRecurrence) {
    this.markedForRecurrence = markedForRecurrence;
  }


  public TransactionDetailsResponse owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nonnull
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public TransactionDetailsResponse payments(Payments payments) {
    this.payments = payments;
    return this;
  }

  /**
   * Get payments
   * @return payments
   */
  @javax.annotation.Nonnull
  public Payments getPayments() {
    return payments;
  }

  public void setPayments(Payments payments) {
    this.payments = payments;
  }


  public TransactionDetailsResponse receiverUri(String receiverUri) {
    this.receiverUri = receiverUri;
    return this;
  }

  /**
   * Get receiverUri
   * @return receiverUri
   */
  @javax.annotation.Nullable
  public String getReceiverUri() {
    return receiverUri;
  }

  public void setReceiverUri(String receiverUri) {
    this.receiverUri = receiverUri;
  }


  public TransactionDetailsResponse referenceKey(String referenceKey) {
    this.referenceKey = referenceKey;
    return this;
  }

  /**
   * Get referenceKey
   * @return referenceKey
   */
  @javax.annotation.Nonnull
  public String getReferenceKey() {
    return referenceKey;
  }

  public void setReferenceKey(String referenceKey) {
    this.referenceKey = referenceKey;
  }


  public TransactionDetailsResponse refundingDate(String refundingDate) {
    this.refundingDate = refundingDate;
    return this;
  }

  /**
   * Get refundingDate
   * @return refundingDate
   */
  @javax.annotation.Nullable
  public String getRefundingDate() {
    return refundingDate;
  }

  public void setRefundingDate(String refundingDate) {
    this.refundingDate = refundingDate;
  }


  public TransactionDetailsResponse refundingToken(String refundingToken) {
    this.refundingToken = refundingToken;
    return this;
  }

  /**
   * Get refundingToken
   * @return refundingToken
   */
  @javax.annotation.Nullable
  public String getRefundingToken() {
    return refundingToken;
  }

  public void setRefundingToken(String refundingToken) {
    this.refundingToken = refundingToken;
  }


  public TransactionDetailsResponse refunds(Refunds refunds) {
    this.refunds = refunds;
    return this;
  }

  /**
   * Get refunds
   * @return refunds
   */
  @javax.annotation.Nonnull
  public Refunds getRefunds() {
    return refunds;
  }

  public void setRefunds(Refunds refunds) {
    this.refunds = refunds;
  }


  public TransactionDetailsResponse salesChannel(String salesChannel) {
    this.salesChannel = salesChannel;
    return this;
  }

  /**
   * Get salesChannel
   * @return salesChannel
   */
  @javax.annotation.Nonnull
  public String getSalesChannel() {
    return salesChannel;
  }

  public void setSalesChannel(String salesChannel) {
    this.salesChannel = salesChannel;
  }


  public TransactionDetailsResponse settlements(Settlements settlements) {
    this.settlements = settlements;
    return this;
  }

  /**
   * Get settlements
   * @return settlements
   */
  @javax.annotation.Nonnull
  public Settlements getSettlements() {
    return settlements;
  }

  public void setSettlements(Settlements settlements) {
    this.settlements = settlements;
  }


  public TransactionDetailsResponse softDescriptor(String softDescriptor) {
    this.softDescriptor = softDescriptor;
    return this;
  }

  /**
   * Get softDescriptor
   * @return softDescriptor
   */
  @javax.annotation.Nullable
  public String getSoftDescriptor() {
    return softDescriptor;
  }

  public void setSoftDescriptor(String softDescriptor) {
    this.softDescriptor = softDescriptor;
  }


  public TransactionDetailsResponse startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nonnull
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public TransactionDetailsResponse status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public TransactionDetailsResponse timeoutStatus(Integer timeoutStatus) {
    this.timeoutStatus = timeoutStatus;
    return this;
  }

  /**
   * Get timeoutStatus
   * @return timeoutStatus
   */
  @javax.annotation.Nonnull
  public Integer getTimeoutStatus() {
    return timeoutStatus;
  }

  public void setTimeoutStatus(Integer timeoutStatus) {
    this.timeoutStatus = timeoutStatus;
  }


  public TransactionDetailsResponse totalRefunds(BigDecimal totalRefunds) {
    this.totalRefunds = totalRefunds;
    return this;
  }

  /**
   * Get totalRefunds
   * @return totalRefunds
   */
  @javax.annotation.Nonnull
  public BigDecimal getTotalRefunds() {
    return totalRefunds;
  }

  public void setTotalRefunds(BigDecimal totalRefunds) {
    this.totalRefunds = totalRefunds;
  }


  public TransactionDetailsResponse transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * Get transactionId
   * @return transactionId
   */
  @javax.annotation.Nonnull
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public TransactionDetailsResponse urn(String urn) {
    this.urn = urn;
    return this;
  }

  /**
   * Get urn
   * @return urn
   */
  @javax.annotation.Nullable
  public String getUrn() {
    return urn;
  }

  public void setUrn(String urn) {
    this.urn = urn;
  }


  public TransactionDetailsResponse userAgent(String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  /**
   * Get userAgent
   * @return userAgent
   */
  @javax.annotation.Nonnull
  public String getUserAgent() {
    return userAgent;
  }

  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }


  public TransactionDetailsResponse value(Integer value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nonnull
  public Integer getValue() {
    return value;
  }

  public void setValue(Integer value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionDetailsResponse transactionDetailsResponse = (TransactionDetailsResponse) o;
    return Objects.equals(this.acceptHeader, transactionDetailsResponse.acceptHeader) &&
        Objects.equals(this.antifraudAffiliationId, transactionDetailsResponse.antifraudAffiliationId) &&
        Objects.equals(this.antifraudTid, transactionDetailsResponse.antifraudTid) &&
        Objects.equals(this.authorizationDate, transactionDetailsResponse.authorizationDate) &&
        Objects.equals(this.authorizationToken, transactionDetailsResponse.authorizationToken) &&
        Objects.equals(this.buyer, transactionDetailsResponse.buyer) &&
        Objects.equals(this.cancelationDate, transactionDetailsResponse.cancelationDate) &&
        Objects.equals(this.cancelationToken, transactionDetailsResponse.cancelationToken) &&
        Objects.equals(this.cancellations, transactionDetailsResponse.cancellations) &&
        Objects.equals(this.channel, transactionDetailsResponse.channel) &&
        Objects.equals(this.commitmentDate, transactionDetailsResponse.commitmentDate) &&
        Objects.equals(this.commitmentToken, transactionDetailsResponse.commitmentToken) &&
        Objects.equals(this.fields, transactionDetailsResponse.fields) &&
        Objects.equals(this.id, transactionDetailsResponse.id) &&
        Objects.equals(this.interactions, transactionDetailsResponse.interactions) &&
        Objects.equals(this.ipAddress, transactionDetailsResponse.ipAddress) &&
        Objects.equals(this.markedForRecurrence, transactionDetailsResponse.markedForRecurrence) &&
        Objects.equals(this.owner, transactionDetailsResponse.owner) &&
        Objects.equals(this.payments, transactionDetailsResponse.payments) &&
        Objects.equals(this.receiverUri, transactionDetailsResponse.receiverUri) &&
        Objects.equals(this.referenceKey, transactionDetailsResponse.referenceKey) &&
        Objects.equals(this.refundingDate, transactionDetailsResponse.refundingDate) &&
        Objects.equals(this.refundingToken, transactionDetailsResponse.refundingToken) &&
        Objects.equals(this.refunds, transactionDetailsResponse.refunds) &&
        Objects.equals(this.salesChannel, transactionDetailsResponse.salesChannel) &&
        Objects.equals(this.settlements, transactionDetailsResponse.settlements) &&
        Objects.equals(this.softDescriptor, transactionDetailsResponse.softDescriptor) &&
        Objects.equals(this.startDate, transactionDetailsResponse.startDate) &&
        Objects.equals(this.status, transactionDetailsResponse.status) &&
        Objects.equals(this.timeoutStatus, transactionDetailsResponse.timeoutStatus) &&
        Objects.equals(this.totalRefunds, transactionDetailsResponse.totalRefunds) &&
        Objects.equals(this.transactionId, transactionDetailsResponse.transactionId) &&
        Objects.equals(this.urn, transactionDetailsResponse.urn) &&
        Objects.equals(this.userAgent, transactionDetailsResponse.userAgent) &&
        Objects.equals(this.value, transactionDetailsResponse.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptHeader, antifraudAffiliationId, antifraudTid, authorizationDate, authorizationToken, buyer, cancelationDate, cancelationToken, cancellations, channel, commitmentDate, commitmentToken, fields, id, interactions, ipAddress, markedForRecurrence, owner, payments, receiverUri, referenceKey, refundingDate, refundingToken, refunds, salesChannel, settlements, softDescriptor, startDate, status, timeoutStatus, totalRefunds, transactionId, urn, userAgent, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionDetailsResponse {\n");
    sb.append("    acceptHeader: ").append(toIndentedString(acceptHeader)).append("\n");
    sb.append("    antifraudAffiliationId: ").append(toIndentedString(antifraudAffiliationId)).append("\n");
    sb.append("    antifraudTid: ").append(toIndentedString(antifraudTid)).append("\n");
    sb.append("    authorizationDate: ").append(toIndentedString(authorizationDate)).append("\n");
    sb.append("    authorizationToken: ").append(toIndentedString(authorizationToken)).append("\n");
    sb.append("    buyer: ").append(toIndentedString(buyer)).append("\n");
    sb.append("    cancelationDate: ").append(toIndentedString(cancelationDate)).append("\n");
    sb.append("    cancelationToken: ").append(toIndentedString(cancelationToken)).append("\n");
    sb.append("    cancellations: ").append(toIndentedString(cancellations)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    commitmentDate: ").append(toIndentedString(commitmentDate)).append("\n");
    sb.append("    commitmentToken: ").append(toIndentedString(commitmentToken)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interactions: ").append(toIndentedString(interactions)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    markedForRecurrence: ").append(toIndentedString(markedForRecurrence)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    receiverUri: ").append(toIndentedString(receiverUri)).append("\n");
    sb.append("    referenceKey: ").append(toIndentedString(referenceKey)).append("\n");
    sb.append("    refundingDate: ").append(toIndentedString(refundingDate)).append("\n");
    sb.append("    refundingToken: ").append(toIndentedString(refundingToken)).append("\n");
    sb.append("    refunds: ").append(toIndentedString(refunds)).append("\n");
    sb.append("    salesChannel: ").append(toIndentedString(salesChannel)).append("\n");
    sb.append("    settlements: ").append(toIndentedString(settlements)).append("\n");
    sb.append("    softDescriptor: ").append(toIndentedString(softDescriptor)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timeoutStatus: ").append(toIndentedString(timeoutStatus)).append("\n");
    sb.append("    totalRefunds: ").append(toIndentedString(totalRefunds)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    urn: ").append(toIndentedString(urn)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceptHeader");
    openapiFields.add("antifraudAffiliationId");
    openapiFields.add("antifraudTid");
    openapiFields.add("authorizationDate");
    openapiFields.add("authorizationToken");
    openapiFields.add("buyer");
    openapiFields.add("cancelationDate");
    openapiFields.add("cancelationToken");
    openapiFields.add("cancellations");
    openapiFields.add("channel");
    openapiFields.add("commitmentDate");
    openapiFields.add("commitmentToken");
    openapiFields.add("fields");
    openapiFields.add("id");
    openapiFields.add("interactions");
    openapiFields.add("ipAddress");
    openapiFields.add("markedForRecurrence");
    openapiFields.add("owner");
    openapiFields.add("payments");
    openapiFields.add("receiverUri");
    openapiFields.add("referenceKey");
    openapiFields.add("refundingDate");
    openapiFields.add("refundingToken");
    openapiFields.add("refunds");
    openapiFields.add("salesChannel");
    openapiFields.add("settlements");
    openapiFields.add("softDescriptor");
    openapiFields.add("startDate");
    openapiFields.add("status");
    openapiFields.add("timeoutStatus");
    openapiFields.add("totalRefunds");
    openapiFields.add("transactionId");
    openapiFields.add("urn");
    openapiFields.add("userAgent");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("acceptHeader");
    openapiRequiredFields.add("antifraudAffiliationId");
    openapiRequiredFields.add("antifraudTid");
    openapiRequiredFields.add("authorizationDate");
    openapiRequiredFields.add("authorizationToken");
    openapiRequiredFields.add("buyer");
    openapiRequiredFields.add("cancelationDate");
    openapiRequiredFields.add("cancelationToken");
    openapiRequiredFields.add("cancellations");
    openapiRequiredFields.add("channel");
    openapiRequiredFields.add("commitmentDate");
    openapiRequiredFields.add("commitmentToken");
    openapiRequiredFields.add("fields");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("interactions");
    openapiRequiredFields.add("ipAddress");
    openapiRequiredFields.add("markedForRecurrence");
    openapiRequiredFields.add("owner");
    openapiRequiredFields.add("payments");
    openapiRequiredFields.add("receiverUri");
    openapiRequiredFields.add("referenceKey");
    openapiRequiredFields.add("refundingDate");
    openapiRequiredFields.add("refundingToken");
    openapiRequiredFields.add("refunds");
    openapiRequiredFields.add("salesChannel");
    openapiRequiredFields.add("settlements");
    openapiRequiredFields.add("softDescriptor");
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("timeoutStatus");
    openapiRequiredFields.add("totalRefunds");
    openapiRequiredFields.add("transactionId");
    openapiRequiredFields.add("urn");
    openapiRequiredFields.add("userAgent");
    openapiRequiredFields.add("value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactionDetailsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionDetailsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionDetailsResponse is not found in the empty JSON string", TransactionDetailsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionDetailsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionDetailsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionDetailsResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("acceptHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acceptHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acceptHeader").toString()));
      }
      if ((jsonObj.get("antifraudAffiliationId") != null && !jsonObj.get("antifraudAffiliationId").isJsonNull()) && !jsonObj.get("antifraudAffiliationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `antifraudAffiliationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("antifraudAffiliationId").toString()));
      }
      if ((jsonObj.get("antifraudTid") != null && !jsonObj.get("antifraudTid").isJsonNull()) && !jsonObj.get("antifraudTid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `antifraudTid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("antifraudTid").toString()));
      }
      if ((jsonObj.get("authorizationDate") != null && !jsonObj.get("authorizationDate").isJsonNull()) && !jsonObj.get("authorizationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationDate").toString()));
      }
      if ((jsonObj.get("authorizationToken") != null && !jsonObj.get("authorizationToken").isJsonNull()) && !jsonObj.get("authorizationToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationToken").toString()));
      }
      if ((jsonObj.get("buyer") != null && !jsonObj.get("buyer").isJsonNull()) && !jsonObj.get("buyer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer").toString()));
      }
      if ((jsonObj.get("cancelationDate") != null && !jsonObj.get("cancelationDate").isJsonNull()) && !jsonObj.get("cancelationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancelationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancelationDate").toString()));
      }
      if ((jsonObj.get("cancelationToken") != null && !jsonObj.get("cancelationToken").isJsonNull()) && !jsonObj.get("cancelationToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancelationToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancelationToken").toString()));
      }
      // validate the required field `cancellations`
      Cancellations.validateJsonElement(jsonObj.get("cancellations"));
      if (!jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if ((jsonObj.get("commitmentDate") != null && !jsonObj.get("commitmentDate").isJsonNull()) && !jsonObj.get("commitmentDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitmentDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitmentDate").toString()));
      }
      if ((jsonObj.get("commitmentToken") != null && !jsonObj.get("commitmentToken").isJsonNull()) && !jsonObj.get("commitmentToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitmentToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitmentToken").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }

      JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
      // validate the required field `fields` (array)
      for (int i = 0; i < jsonArrayfields.size(); i++) {
        Fields1.validateJsonElement(jsonArrayfields.get(i));
      };
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `interactions`
      Interactions.validateJsonElement(jsonObj.get("interactions"));
      if (!jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if (!jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      // validate the required field `payments`
      Payments.validateJsonElement(jsonObj.get("payments"));
      if ((jsonObj.get("receiverUri") != null && !jsonObj.get("receiverUri").isJsonNull()) && !jsonObj.get("receiverUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverUri").toString()));
      }
      if (!jsonObj.get("referenceKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceKey").toString()));
      }
      if ((jsonObj.get("refundingDate") != null && !jsonObj.get("refundingDate").isJsonNull()) && !jsonObj.get("refundingDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundingDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundingDate").toString()));
      }
      if ((jsonObj.get("refundingToken") != null && !jsonObj.get("refundingToken").isJsonNull()) && !jsonObj.get("refundingToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundingToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundingToken").toString()));
      }
      // validate the required field `refunds`
      Refunds.validateJsonElement(jsonObj.get("refunds"));
      if (!jsonObj.get("salesChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesChannel").toString()));
      }
      // validate the required field `settlements`
      Settlements.validateJsonElement(jsonObj.get("settlements"));
      if ((jsonObj.get("softDescriptor") != null && !jsonObj.get("softDescriptor").isJsonNull()) && !jsonObj.get("softDescriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `softDescriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("softDescriptor").toString()));
      }
      if (!jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if ((jsonObj.get("urn") != null && !jsonObj.get("urn").isJsonNull()) && !jsonObj.get("urn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urn").toString()));
      }
      if (!jsonObj.get("userAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userAgent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionDetailsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionDetailsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionDetailsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionDetailsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionDetailsResponse>() {
           @Override
           public void write(JsonWriter out, TransactionDetailsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionDetailsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactionDetailsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionDetailsResponse
   * @throws IOException if the JSON string is invalid with respect to TransactionDetailsResponse
   */
  public static TransactionDetailsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionDetailsResponse.class);
  }

  /**
   * Convert an instance of TransactionDetailsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

