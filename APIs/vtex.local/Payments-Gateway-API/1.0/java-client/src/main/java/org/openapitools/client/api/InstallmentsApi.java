/*
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InvalidRequestValue;
import org.openapitools.client.model.ValidRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InstallmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InstallmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InstallmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for installmentsoptions
     * @param requestValue  (required)
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param requestSalesChannel  (optional)
     * @param requestPaymentDetails0Id  (optional)
     * @param requestPaymentDetails0Value  (optional)
     * @param requestPaymentDetails0Bin  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-Accel-Expires -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call installmentsoptionsCall(Integer requestValue, String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, Integer requestSalesChannel, Integer requestPaymentDetails0Id, Integer requestPaymentDetails0Value, Integer requestPaymentDetails0Bin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvt/installments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (requestValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("request.value", requestValue));
        }

        if (requestSalesChannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("request.salesChannel", requestSalesChannel));
        }

        if (requestPaymentDetails0Id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("request.paymentDetails[0].id", requestPaymentDetails0Id));
        }

        if (requestPaymentDetails0Value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("request.paymentDetails[0].value", requestPaymentDetails0Value));
        }

        if (requestPaymentDetails0Bin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("request.paymentDetails[0].bin", requestPaymentDetails0Bin));
        }

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call installmentsoptionsValidateBeforeCall(Integer requestValue, String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, Integer requestSalesChannel, Integer requestPaymentDetails0Id, Integer requestPaymentDetails0Value, Integer requestPaymentDetails0Bin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestValue' is set
        if (requestValue == null) {
            throw new ApiException("Missing the required parameter 'requestValue' when calling installmentsoptions(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling installmentsoptions(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling installmentsoptions(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling installmentsoptions(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling installmentsoptions(Async)");
        }

        return installmentsoptionsCall(requestValue, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, requestSalesChannel, requestPaymentDetails0Id, requestPaymentDetails0Value, requestPaymentDetails0Bin, _callback);

    }

    /**
     * Installments options
     * Returns the best installment options according to the informed params.
     * @param requestValue  (required)
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param requestSalesChannel  (optional)
     * @param requestPaymentDetails0Id  (optional)
     * @param requestPaymentDetails0Value  (optional)
     * @param requestPaymentDetails0Bin  (optional)
     * @return ValidRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-Accel-Expires -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ValidRequest installmentsoptions(Integer requestValue, String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, Integer requestSalesChannel, Integer requestPaymentDetails0Id, Integer requestPaymentDetails0Value, Integer requestPaymentDetails0Bin) throws ApiException {
        ApiResponse<ValidRequest> localVarResp = installmentsoptionsWithHttpInfo(requestValue, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, requestSalesChannel, requestPaymentDetails0Id, requestPaymentDetails0Value, requestPaymentDetails0Bin);
        return localVarResp.getData();
    }

    /**
     * Installments options
     * Returns the best installment options according to the informed params.
     * @param requestValue  (required)
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param requestSalesChannel  (optional)
     * @param requestPaymentDetails0Id  (optional)
     * @param requestPaymentDetails0Value  (optional)
     * @param requestPaymentDetails0Bin  (optional)
     * @return ApiResponse&lt;ValidRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-Accel-Expires -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidRequest> installmentsoptionsWithHttpInfo(Integer requestValue, String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, Integer requestSalesChannel, Integer requestPaymentDetails0Id, Integer requestPaymentDetails0Value, Integer requestPaymentDetails0Bin) throws ApiException {
        okhttp3.Call localVarCall = installmentsoptionsValidateBeforeCall(requestValue, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, requestSalesChannel, requestPaymentDetails0Id, requestPaymentDetails0Value, requestPaymentDetails0Bin, null);
        Type localVarReturnType = new TypeToken<ValidRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Installments options (asynchronously)
     * Returns the best installment options according to the informed params.
     * @param requestValue  (required)
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param requestSalesChannel  (optional)
     * @param requestPaymentDetails0Id  (optional)
     * @param requestPaymentDetails0Value  (optional)
     * @param requestPaymentDetails0Bin  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * X-Accel-Expires -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call installmentsoptionsAsync(Integer requestValue, String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, Integer requestSalesChannel, Integer requestPaymentDetails0Id, Integer requestPaymentDetails0Value, Integer requestPaymentDetails0Bin, final ApiCallback<ValidRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = installmentsoptionsValidateBeforeCall(requestValue, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, requestSalesChannel, requestPaymentDetails0Id, requestPaymentDetails0Value, requestPaymentDetails0Bin, _callback);
        Type localVarReturnType = new TypeToken<ValidRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
