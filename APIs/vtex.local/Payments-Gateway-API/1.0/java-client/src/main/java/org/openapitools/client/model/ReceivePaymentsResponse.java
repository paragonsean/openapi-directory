/*
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Fields1;
import org.openapitools.client.model.Self;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReceivePaymentsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:23.786494-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReceivePaymentsResponse {
  public static final String SERIALIZED_NAME_CONNECTOR_RESPONSES = "ConnectorResponses";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_RESPONSES)
  private String connectorResponses;

  public static final String SERIALIZED_NAME_SHOW_CONNECTOR_RESPONSES = "ShowConnectorResponses";
  @SerializedName(SERIALIZED_NAME_SHOW_CONNECTOR_RESPONSES)
  private Boolean showConnectorResponses;

  public static final String SERIALIZED_NAME_ALLOW_INSTALLMENTS = "allowInstallments";
  @SerializedName(SERIALIZED_NAME_ALLOW_INSTALLMENTS)
  private Boolean allowInstallments;

  public static final String SERIALIZED_NAME_ALLOW_ISSUER = "allowIssuer";
  @SerializedName(SERIALIZED_NAME_ALLOW_ISSUER)
  private Boolean allowIssuer;

  public static final String SERIALIZED_NAME_ALLOW_NOTIFICATION = "allowNotification";
  @SerializedName(SERIALIZED_NAME_ALLOW_NOTIFICATION)
  private Boolean allowNotification;

  public static final String SERIALIZED_NAME_CONNECTOR = "connector";
  @SerializedName(SERIALIZED_NAME_CONNECTOR)
  private String connector;

  public static final String SERIALIZED_NAME_CONNECTOR_RESPONSE = "connectorResponse";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_RESPONSE)
  private String connectorResponse;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<Fields1> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTALLMENTS = "installments";
  @SerializedName(SERIALIZED_NAME_INSTALLMENTS)
  private Integer installments;

  public static final String SERIALIZED_NAME_INSTALLMENTS_INTEREST_RATE = "installmentsInterestRate";
  @SerializedName(SERIALIZED_NAME_INSTALLMENTS_INTEREST_RATE)
  private Integer installmentsInterestRate;

  public static final String SERIALIZED_NAME_INSTALLMENTS_VALUE = "installmentsValue";
  @SerializedName(SERIALIZED_NAME_INSTALLMENTS_VALUE)
  private Integer installmentsValue;

  public static final String SERIALIZED_NAME_IS_AVAILABLE = "isAvailable";
  @SerializedName(SERIALIZED_NAME_IS_AVAILABLE)
  private Boolean isAvailable;

  public static final String SERIALIZED_NAME_IS_CUSTOM = "isCustom";
  @SerializedName(SERIALIZED_NAME_IS_CUSTOM)
  private Boolean isCustom;

  public static final String SERIALIZED_NAME_MERCHANT_NAME = "merchantName";
  @SerializedName(SERIALIZED_NAME_MERCHANT_NAME)
  private String merchantName;

  public static final String SERIALIZED_NAME_PAYMENT_SYSTEM = "paymentSystem";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SYSTEM)
  private Integer paymentSystem;

  public static final String SERIALIZED_NAME_PAYMENT_SYSTEM_NAME = "paymentSystemName";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SYSTEM_NAME)
  private String paymentSystemName;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_REFERENCE_VALUE = "referenceValue";
  @SerializedName(SERIALIZED_NAME_REFERENCE_VALUE)
  private Integer referenceValue;

  public static final String SERIALIZED_NAME_RETURN_CODE = "returnCode";
  @SerializedName(SERIALIZED_NAME_RETURN_CODE)
  private String returnCode;

  public static final String SERIALIZED_NAME_RETURN_MESSAGE = "returnMessage";
  @SerializedName(SERIALIZED_NAME_RETURN_MESSAGE)
  private String returnMessage;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private Self self;

  public static final String SERIALIZED_NAME_SHEETS = "sheets";
  @SerializedName(SERIALIZED_NAME_SHEETS)
  private String sheets;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TID = "tid";
  @SerializedName(SERIALIZED_NAME_TID)
  private String tid;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Integer value;

  public ReceivePaymentsResponse() {
  }

  public ReceivePaymentsResponse connectorResponses(String connectorResponses) {
    this.connectorResponses = connectorResponses;
    return this;
  }

  /**
   * Get connectorResponses
   * @return connectorResponses
   */
  @javax.annotation.Nullable
  public String getConnectorResponses() {
    return connectorResponses;
  }

  public void setConnectorResponses(String connectorResponses) {
    this.connectorResponses = connectorResponses;
  }


  public ReceivePaymentsResponse showConnectorResponses(Boolean showConnectorResponses) {
    this.showConnectorResponses = showConnectorResponses;
    return this;
  }

  /**
   * Get showConnectorResponses
   * @return showConnectorResponses
   */
  @javax.annotation.Nonnull
  public Boolean getShowConnectorResponses() {
    return showConnectorResponses;
  }

  public void setShowConnectorResponses(Boolean showConnectorResponses) {
    this.showConnectorResponses = showConnectorResponses;
  }


  public ReceivePaymentsResponse allowInstallments(Boolean allowInstallments) {
    this.allowInstallments = allowInstallments;
    return this;
  }

  /**
   * Get allowInstallments
   * @return allowInstallments
   */
  @javax.annotation.Nonnull
  public Boolean getAllowInstallments() {
    return allowInstallments;
  }

  public void setAllowInstallments(Boolean allowInstallments) {
    this.allowInstallments = allowInstallments;
  }


  public ReceivePaymentsResponse allowIssuer(Boolean allowIssuer) {
    this.allowIssuer = allowIssuer;
    return this;
  }

  /**
   * Get allowIssuer
   * @return allowIssuer
   */
  @javax.annotation.Nonnull
  public Boolean getAllowIssuer() {
    return allowIssuer;
  }

  public void setAllowIssuer(Boolean allowIssuer) {
    this.allowIssuer = allowIssuer;
  }


  public ReceivePaymentsResponse allowNotification(Boolean allowNotification) {
    this.allowNotification = allowNotification;
    return this;
  }

  /**
   * Get allowNotification
   * @return allowNotification
   */
  @javax.annotation.Nonnull
  public Boolean getAllowNotification() {
    return allowNotification;
  }

  public void setAllowNotification(Boolean allowNotification) {
    this.allowNotification = allowNotification;
  }


  public ReceivePaymentsResponse connector(String connector) {
    this.connector = connector;
    return this;
  }

  /**
   * Get connector
   * @return connector
   */
  @javax.annotation.Nonnull
  public String getConnector() {
    return connector;
  }

  public void setConnector(String connector) {
    this.connector = connector;
  }


  public ReceivePaymentsResponse connectorResponse(String connectorResponse) {
    this.connectorResponse = connectorResponse;
    return this;
  }

  /**
   * Get connectorResponse
   * @return connectorResponse
   */
  @javax.annotation.Nullable
  public String getConnectorResponse() {
    return connectorResponse;
  }

  public void setConnectorResponse(String connectorResponse) {
    this.connectorResponse = connectorResponse;
  }


  public ReceivePaymentsResponse currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public ReceivePaymentsResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ReceivePaymentsResponse fields(List<Fields1> fields) {
    this.fields = fields;
    return this;
  }

  public ReceivePaymentsResponse addFieldsItem(Fields1 fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * 
   * @return fields
   */
  @javax.annotation.Nonnull
  public List<Fields1> getFields() {
    return fields;
  }

  public void setFields(List<Fields1> fields) {
    this.fields = fields;
  }


  public ReceivePaymentsResponse group(String group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nonnull
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }


  public ReceivePaymentsResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ReceivePaymentsResponse installments(Integer installments) {
    this.installments = installments;
    return this;
  }

  /**
   * Get installments
   * @return installments
   */
  @javax.annotation.Nonnull
  public Integer getInstallments() {
    return installments;
  }

  public void setInstallments(Integer installments) {
    this.installments = installments;
  }


  public ReceivePaymentsResponse installmentsInterestRate(Integer installmentsInterestRate) {
    this.installmentsInterestRate = installmentsInterestRate;
    return this;
  }

  /**
   * Get installmentsInterestRate
   * @return installmentsInterestRate
   */
  @javax.annotation.Nonnull
  public Integer getInstallmentsInterestRate() {
    return installmentsInterestRate;
  }

  public void setInstallmentsInterestRate(Integer installmentsInterestRate) {
    this.installmentsInterestRate = installmentsInterestRate;
  }


  public ReceivePaymentsResponse installmentsValue(Integer installmentsValue) {
    this.installmentsValue = installmentsValue;
    return this;
  }

  /**
   * Get installmentsValue
   * @return installmentsValue
   */
  @javax.annotation.Nonnull
  public Integer getInstallmentsValue() {
    return installmentsValue;
  }

  public void setInstallmentsValue(Integer installmentsValue) {
    this.installmentsValue = installmentsValue;
  }


  public ReceivePaymentsResponse isAvailable(Boolean isAvailable) {
    this.isAvailable = isAvailable;
    return this;
  }

  /**
   * Get isAvailable
   * @return isAvailable
   */
  @javax.annotation.Nonnull
  public Boolean getIsAvailable() {
    return isAvailable;
  }

  public void setIsAvailable(Boolean isAvailable) {
    this.isAvailable = isAvailable;
  }


  public ReceivePaymentsResponse isCustom(Boolean isCustom) {
    this.isCustom = isCustom;
    return this;
  }

  /**
   * Get isCustom
   * @return isCustom
   */
  @javax.annotation.Nonnull
  public Boolean getIsCustom() {
    return isCustom;
  }

  public void setIsCustom(Boolean isCustom) {
    this.isCustom = isCustom;
  }


  public ReceivePaymentsResponse merchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  /**
   * Get merchantName
   * @return merchantName
   */
  @javax.annotation.Nullable
  public String getMerchantName() {
    return merchantName;
  }

  public void setMerchantName(String merchantName) {
    this.merchantName = merchantName;
  }


  public ReceivePaymentsResponse paymentSystem(Integer paymentSystem) {
    this.paymentSystem = paymentSystem;
    return this;
  }

  /**
   * Get paymentSystem
   * @return paymentSystem
   */
  @javax.annotation.Nonnull
  public Integer getPaymentSystem() {
    return paymentSystem;
  }

  public void setPaymentSystem(Integer paymentSystem) {
    this.paymentSystem = paymentSystem;
  }


  public ReceivePaymentsResponse paymentSystemName(String paymentSystemName) {
    this.paymentSystemName = paymentSystemName;
    return this;
  }

  /**
   * Get paymentSystemName
   * @return paymentSystemName
   */
  @javax.annotation.Nonnull
  public String getPaymentSystemName() {
    return paymentSystemName;
  }

  public void setPaymentSystemName(String paymentSystemName) {
    this.paymentSystemName = paymentSystemName;
  }


  public ReceivePaymentsResponse provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Get provider
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }


  public ReceivePaymentsResponse referenceValue(Integer referenceValue) {
    this.referenceValue = referenceValue;
    return this;
  }

  /**
   * Get referenceValue
   * @return referenceValue
   */
  @javax.annotation.Nonnull
  public Integer getReferenceValue() {
    return referenceValue;
  }

  public void setReferenceValue(Integer referenceValue) {
    this.referenceValue = referenceValue;
  }


  public ReceivePaymentsResponse returnCode(String returnCode) {
    this.returnCode = returnCode;
    return this;
  }

  /**
   * Get returnCode
   * @return returnCode
   */
  @javax.annotation.Nullable
  public String getReturnCode() {
    return returnCode;
  }

  public void setReturnCode(String returnCode) {
    this.returnCode = returnCode;
  }


  public ReceivePaymentsResponse returnMessage(String returnMessage) {
    this.returnMessage = returnMessage;
    return this;
  }

  /**
   * Get returnMessage
   * @return returnMessage
   */
  @javax.annotation.Nullable
  public String getReturnMessage() {
    return returnMessage;
  }

  public void setReturnMessage(String returnMessage) {
    this.returnMessage = returnMessage;
  }


  public ReceivePaymentsResponse self(Self self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nonnull
  public Self getSelf() {
    return self;
  }

  public void setSelf(Self self) {
    this.self = self;
  }


  public ReceivePaymentsResponse sheets(String sheets) {
    this.sheets = sheets;
    return this;
  }

  /**
   * Get sheets
   * @return sheets
   */
  @javax.annotation.Nullable
  public String getSheets() {
    return sheets;
  }

  public void setSheets(String sheets) {
    this.sheets = sheets;
  }


  public ReceivePaymentsResponse status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ReceivePaymentsResponse tid(String tid) {
    this.tid = tid;
    return this;
  }

  /**
   * Get tid
   * @return tid
   */
  @javax.annotation.Nullable
  public String getTid() {
    return tid;
  }

  public void setTid(String tid) {
    this.tid = tid;
  }


  public ReceivePaymentsResponse value(Integer value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nonnull
  public Integer getValue() {
    return value;
  }

  public void setValue(Integer value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReceivePaymentsResponse receivePaymentsResponse = (ReceivePaymentsResponse) o;
    return Objects.equals(this.connectorResponses, receivePaymentsResponse.connectorResponses) &&
        Objects.equals(this.showConnectorResponses, receivePaymentsResponse.showConnectorResponses) &&
        Objects.equals(this.allowInstallments, receivePaymentsResponse.allowInstallments) &&
        Objects.equals(this.allowIssuer, receivePaymentsResponse.allowIssuer) &&
        Objects.equals(this.allowNotification, receivePaymentsResponse.allowNotification) &&
        Objects.equals(this.connector, receivePaymentsResponse.connector) &&
        Objects.equals(this.connectorResponse, receivePaymentsResponse.connectorResponse) &&
        Objects.equals(this.currencyCode, receivePaymentsResponse.currencyCode) &&
        Objects.equals(this.description, receivePaymentsResponse.description) &&
        Objects.equals(this.fields, receivePaymentsResponse.fields) &&
        Objects.equals(this.group, receivePaymentsResponse.group) &&
        Objects.equals(this.id, receivePaymentsResponse.id) &&
        Objects.equals(this.installments, receivePaymentsResponse.installments) &&
        Objects.equals(this.installmentsInterestRate, receivePaymentsResponse.installmentsInterestRate) &&
        Objects.equals(this.installmentsValue, receivePaymentsResponse.installmentsValue) &&
        Objects.equals(this.isAvailable, receivePaymentsResponse.isAvailable) &&
        Objects.equals(this.isCustom, receivePaymentsResponse.isCustom) &&
        Objects.equals(this.merchantName, receivePaymentsResponse.merchantName) &&
        Objects.equals(this.paymentSystem, receivePaymentsResponse.paymentSystem) &&
        Objects.equals(this.paymentSystemName, receivePaymentsResponse.paymentSystemName) &&
        Objects.equals(this.provider, receivePaymentsResponse.provider) &&
        Objects.equals(this.referenceValue, receivePaymentsResponse.referenceValue) &&
        Objects.equals(this.returnCode, receivePaymentsResponse.returnCode) &&
        Objects.equals(this.returnMessage, receivePaymentsResponse.returnMessage) &&
        Objects.equals(this.self, receivePaymentsResponse.self) &&
        Objects.equals(this.sheets, receivePaymentsResponse.sheets) &&
        Objects.equals(this.status, receivePaymentsResponse.status) &&
        Objects.equals(this.tid, receivePaymentsResponse.tid) &&
        Objects.equals(this.value, receivePaymentsResponse.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorResponses, showConnectorResponses, allowInstallments, allowIssuer, allowNotification, connector, connectorResponse, currencyCode, description, fields, group, id, installments, installmentsInterestRate, installmentsValue, isAvailable, isCustom, merchantName, paymentSystem, paymentSystemName, provider, referenceValue, returnCode, returnMessage, self, sheets, status, tid, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReceivePaymentsResponse {\n");
    sb.append("    connectorResponses: ").append(toIndentedString(connectorResponses)).append("\n");
    sb.append("    showConnectorResponses: ").append(toIndentedString(showConnectorResponses)).append("\n");
    sb.append("    allowInstallments: ").append(toIndentedString(allowInstallments)).append("\n");
    sb.append("    allowIssuer: ").append(toIndentedString(allowIssuer)).append("\n");
    sb.append("    allowNotification: ").append(toIndentedString(allowNotification)).append("\n");
    sb.append("    connector: ").append(toIndentedString(connector)).append("\n");
    sb.append("    connectorResponse: ").append(toIndentedString(connectorResponse)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    installments: ").append(toIndentedString(installments)).append("\n");
    sb.append("    installmentsInterestRate: ").append(toIndentedString(installmentsInterestRate)).append("\n");
    sb.append("    installmentsValue: ").append(toIndentedString(installmentsValue)).append("\n");
    sb.append("    isAvailable: ").append(toIndentedString(isAvailable)).append("\n");
    sb.append("    isCustom: ").append(toIndentedString(isCustom)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    paymentSystem: ").append(toIndentedString(paymentSystem)).append("\n");
    sb.append("    paymentSystemName: ").append(toIndentedString(paymentSystemName)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    referenceValue: ").append(toIndentedString(referenceValue)).append("\n");
    sb.append("    returnCode: ").append(toIndentedString(returnCode)).append("\n");
    sb.append("    returnMessage: ").append(toIndentedString(returnMessage)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    sheets: ").append(toIndentedString(sheets)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tid: ").append(toIndentedString(tid)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConnectorResponses");
    openapiFields.add("ShowConnectorResponses");
    openapiFields.add("allowInstallments");
    openapiFields.add("allowIssuer");
    openapiFields.add("allowNotification");
    openapiFields.add("connector");
    openapiFields.add("connectorResponse");
    openapiFields.add("currencyCode");
    openapiFields.add("description");
    openapiFields.add("fields");
    openapiFields.add("group");
    openapiFields.add("id");
    openapiFields.add("installments");
    openapiFields.add("installmentsInterestRate");
    openapiFields.add("installmentsValue");
    openapiFields.add("isAvailable");
    openapiFields.add("isCustom");
    openapiFields.add("merchantName");
    openapiFields.add("paymentSystem");
    openapiFields.add("paymentSystemName");
    openapiFields.add("provider");
    openapiFields.add("referenceValue");
    openapiFields.add("returnCode");
    openapiFields.add("returnMessage");
    openapiFields.add("self");
    openapiFields.add("sheets");
    openapiFields.add("status");
    openapiFields.add("tid");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ConnectorResponses");
    openapiRequiredFields.add("ShowConnectorResponses");
    openapiRequiredFields.add("allowInstallments");
    openapiRequiredFields.add("allowIssuer");
    openapiRequiredFields.add("allowNotification");
    openapiRequiredFields.add("connector");
    openapiRequiredFields.add("connectorResponse");
    openapiRequiredFields.add("currencyCode");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("fields");
    openapiRequiredFields.add("group");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("installments");
    openapiRequiredFields.add("installmentsInterestRate");
    openapiRequiredFields.add("installmentsValue");
    openapiRequiredFields.add("isAvailable");
    openapiRequiredFields.add("isCustom");
    openapiRequiredFields.add("merchantName");
    openapiRequiredFields.add("paymentSystem");
    openapiRequiredFields.add("paymentSystemName");
    openapiRequiredFields.add("provider");
    openapiRequiredFields.add("referenceValue");
    openapiRequiredFields.add("returnCode");
    openapiRequiredFields.add("returnMessage");
    openapiRequiredFields.add("self");
    openapiRequiredFields.add("sheets");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("tid");
    openapiRequiredFields.add("value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReceivePaymentsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReceivePaymentsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReceivePaymentsResponse is not found in the empty JSON string", ReceivePaymentsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReceivePaymentsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReceivePaymentsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReceivePaymentsResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ConnectorResponses") != null && !jsonObj.get("ConnectorResponses").isJsonNull()) && !jsonObj.get("ConnectorResponses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConnectorResponses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConnectorResponses").toString()));
      }
      if (!jsonObj.get("connector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connector").toString()));
      }
      if ((jsonObj.get("connectorResponse") != null && !jsonObj.get("connectorResponse").isJsonNull()) && !jsonObj.get("connectorResponse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorResponse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorResponse").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }

      JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
      // validate the required field `fields` (array)
      for (int i = 0; i < jsonArrayfields.size(); i++) {
        Fields1.validateJsonElement(jsonArrayfields.get(i));
      };
      if (!jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("merchantName") != null && !jsonObj.get("merchantName").isJsonNull()) && !jsonObj.get("merchantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantName").toString()));
      }
      if (!jsonObj.get("paymentSystemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentSystemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentSystemName").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("returnCode") != null && !jsonObj.get("returnCode").isJsonNull()) && !jsonObj.get("returnCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnCode").toString()));
      }
      if ((jsonObj.get("returnMessage") != null && !jsonObj.get("returnMessage").isJsonNull()) && !jsonObj.get("returnMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnMessage").toString()));
      }
      // validate the required field `self`
      Self.validateJsonElement(jsonObj.get("self"));
      if ((jsonObj.get("sheets") != null && !jsonObj.get("sheets").isJsonNull()) && !jsonObj.get("sheets").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sheets` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sheets").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("tid") != null && !jsonObj.get("tid").isJsonNull()) && !jsonObj.get("tid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReceivePaymentsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReceivePaymentsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReceivePaymentsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReceivePaymentsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ReceivePaymentsResponse>() {
           @Override
           public void write(JsonWriter out, ReceivePaymentsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReceivePaymentsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReceivePaymentsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReceivePaymentsResponse
   * @throws IOException if the JSON string is invalid with respect to ReceivePaymentsResponse
   */
  public static ReceivePaymentsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReceivePaymentsResponse.class);
  }

  /**
   * Convert an instance of ReceivePaymentsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

