/*
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Validator
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:23.786494-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Validator {
  public static final String SERIALIZED_NAME_CARD_CODE_MASK = "cardCodeMask";
  @SerializedName(SERIALIZED_NAME_CARD_CODE_MASK)
  private String cardCodeMask;

  public static final String SERIALIZED_NAME_CARD_CODE_REGEX = "cardCodeRegex";
  @SerializedName(SERIALIZED_NAME_CARD_CODE_REGEX)
  private String cardCodeRegex;

  public static final String SERIALIZED_NAME_MASK = "mask";
  @SerializedName(SERIALIZED_NAME_MASK)
  private String mask;

  public static final String SERIALIZED_NAME_REGEX = "regex";
  @SerializedName(SERIALIZED_NAME_REGEX)
  private String regex;

  public static final String SERIALIZED_NAME_USE_BILLING_ADDRESS = "useBillingAddress";
  @SerializedName(SERIALIZED_NAME_USE_BILLING_ADDRESS)
  private Boolean useBillingAddress;

  public static final String SERIALIZED_NAME_USE_CARD_HOLDER_NAME = "useCardHolderName";
  @SerializedName(SERIALIZED_NAME_USE_CARD_HOLDER_NAME)
  private Boolean useCardHolderName;

  public static final String SERIALIZED_NAME_USE_CVV = "useCvv";
  @SerializedName(SERIALIZED_NAME_USE_CVV)
  private Boolean useCvv;

  public static final String SERIALIZED_NAME_USE_EXPIRATION_DATE = "useExpirationDate";
  @SerializedName(SERIALIZED_NAME_USE_EXPIRATION_DATE)
  private Boolean useExpirationDate;

  public static final String SERIALIZED_NAME_VALID_CARD_LENGTHS = "validCardLengths";
  @SerializedName(SERIALIZED_NAME_VALID_CARD_LENGTHS)
  private String validCardLengths;

  public static final String SERIALIZED_NAME_WEIGHTS = "weights";
  @SerializedName(SERIALIZED_NAME_WEIGHTS)
  private List<Integer> weights;

  public Validator() {
  }

  public Validator cardCodeMask(String cardCodeMask) {
    this.cardCodeMask = cardCodeMask;
    return this;
  }

  /**
   * Get cardCodeMask
   * @return cardCodeMask
   */
  @javax.annotation.Nullable
  public String getCardCodeMask() {
    return cardCodeMask;
  }

  public void setCardCodeMask(String cardCodeMask) {
    this.cardCodeMask = cardCodeMask;
  }


  public Validator cardCodeRegex(String cardCodeRegex) {
    this.cardCodeRegex = cardCodeRegex;
    return this;
  }

  /**
   * Get cardCodeRegex
   * @return cardCodeRegex
   */
  @javax.annotation.Nullable
  public String getCardCodeRegex() {
    return cardCodeRegex;
  }

  public void setCardCodeRegex(String cardCodeRegex) {
    this.cardCodeRegex = cardCodeRegex;
  }


  public Validator mask(String mask) {
    this.mask = mask;
    return this;
  }

  /**
   * Get mask
   * @return mask
   */
  @javax.annotation.Nullable
  public String getMask() {
    return mask;
  }

  public void setMask(String mask) {
    this.mask = mask;
  }


  public Validator regex(String regex) {
    this.regex = regex;
    return this;
  }

  /**
   * Get regex
   * @return regex
   */
  @javax.annotation.Nullable
  public String getRegex() {
    return regex;
  }

  public void setRegex(String regex) {
    this.regex = regex;
  }


  public Validator useBillingAddress(Boolean useBillingAddress) {
    this.useBillingAddress = useBillingAddress;
    return this;
  }

  /**
   * Get useBillingAddress
   * @return useBillingAddress
   */
  @javax.annotation.Nonnull
  public Boolean getUseBillingAddress() {
    return useBillingAddress;
  }

  public void setUseBillingAddress(Boolean useBillingAddress) {
    this.useBillingAddress = useBillingAddress;
  }


  public Validator useCardHolderName(Boolean useCardHolderName) {
    this.useCardHolderName = useCardHolderName;
    return this;
  }

  /**
   * Get useCardHolderName
   * @return useCardHolderName
   */
  @javax.annotation.Nonnull
  public Boolean getUseCardHolderName() {
    return useCardHolderName;
  }

  public void setUseCardHolderName(Boolean useCardHolderName) {
    this.useCardHolderName = useCardHolderName;
  }


  public Validator useCvv(Boolean useCvv) {
    this.useCvv = useCvv;
    return this;
  }

  /**
   * Get useCvv
   * @return useCvv
   */
  @javax.annotation.Nonnull
  public Boolean getUseCvv() {
    return useCvv;
  }

  public void setUseCvv(Boolean useCvv) {
    this.useCvv = useCvv;
  }


  public Validator useExpirationDate(Boolean useExpirationDate) {
    this.useExpirationDate = useExpirationDate;
    return this;
  }

  /**
   * Get useExpirationDate
   * @return useExpirationDate
   */
  @javax.annotation.Nonnull
  public Boolean getUseExpirationDate() {
    return useExpirationDate;
  }

  public void setUseExpirationDate(Boolean useExpirationDate) {
    this.useExpirationDate = useExpirationDate;
  }


  public Validator validCardLengths(String validCardLengths) {
    this.validCardLengths = validCardLengths;
    return this;
  }

  /**
   * Get validCardLengths
   * @return validCardLengths
   */
  @javax.annotation.Nullable
  public String getValidCardLengths() {
    return validCardLengths;
  }

  public void setValidCardLengths(String validCardLengths) {
    this.validCardLengths = validCardLengths;
  }


  public Validator weights(List<Integer> weights) {
    this.weights = weights;
    return this;
  }

  public Validator addWeightsItem(Integer weightsItem) {
    if (this.weights == null) {
      this.weights = new ArrayList<>();
    }
    this.weights.add(weightsItem);
    return this;
  }

  /**
   * 
   * @return weights
   */
  @javax.annotation.Nullable
  public List<Integer> getWeights() {
    return weights;
  }

  public void setWeights(List<Integer> weights) {
    this.weights = weights;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Validator validator = (Validator) o;
    return Objects.equals(this.cardCodeMask, validator.cardCodeMask) &&
        Objects.equals(this.cardCodeRegex, validator.cardCodeRegex) &&
        Objects.equals(this.mask, validator.mask) &&
        Objects.equals(this.regex, validator.regex) &&
        Objects.equals(this.useBillingAddress, validator.useBillingAddress) &&
        Objects.equals(this.useCardHolderName, validator.useCardHolderName) &&
        Objects.equals(this.useCvv, validator.useCvv) &&
        Objects.equals(this.useExpirationDate, validator.useExpirationDate) &&
        Objects.equals(this.validCardLengths, validator.validCardLengths) &&
        Objects.equals(this.weights, validator.weights);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardCodeMask, cardCodeRegex, mask, regex, useBillingAddress, useCardHolderName, useCvv, useExpirationDate, validCardLengths, weights);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Validator {\n");
    sb.append("    cardCodeMask: ").append(toIndentedString(cardCodeMask)).append("\n");
    sb.append("    cardCodeRegex: ").append(toIndentedString(cardCodeRegex)).append("\n");
    sb.append("    mask: ").append(toIndentedString(mask)).append("\n");
    sb.append("    regex: ").append(toIndentedString(regex)).append("\n");
    sb.append("    useBillingAddress: ").append(toIndentedString(useBillingAddress)).append("\n");
    sb.append("    useCardHolderName: ").append(toIndentedString(useCardHolderName)).append("\n");
    sb.append("    useCvv: ").append(toIndentedString(useCvv)).append("\n");
    sb.append("    useExpirationDate: ").append(toIndentedString(useExpirationDate)).append("\n");
    sb.append("    validCardLengths: ").append(toIndentedString(validCardLengths)).append("\n");
    sb.append("    weights: ").append(toIndentedString(weights)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cardCodeMask");
    openapiFields.add("cardCodeRegex");
    openapiFields.add("mask");
    openapiFields.add("regex");
    openapiFields.add("useBillingAddress");
    openapiFields.add("useCardHolderName");
    openapiFields.add("useCvv");
    openapiFields.add("useExpirationDate");
    openapiFields.add("validCardLengths");
    openapiFields.add("weights");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cardCodeMask");
    openapiRequiredFields.add("cardCodeRegex");
    openapiRequiredFields.add("mask");
    openapiRequiredFields.add("regex");
    openapiRequiredFields.add("useBillingAddress");
    openapiRequiredFields.add("useCardHolderName");
    openapiRequiredFields.add("useCvv");
    openapiRequiredFields.add("useExpirationDate");
    openapiRequiredFields.add("validCardLengths");
    openapiRequiredFields.add("weights");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Validator
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Validator.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Validator is not found in the empty JSON string", Validator.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Validator.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Validator` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Validator.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cardCodeMask") != null && !jsonObj.get("cardCodeMask").isJsonNull()) && !jsonObj.get("cardCodeMask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardCodeMask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardCodeMask").toString()));
      }
      if ((jsonObj.get("cardCodeRegex") != null && !jsonObj.get("cardCodeRegex").isJsonNull()) && !jsonObj.get("cardCodeRegex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardCodeRegex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardCodeRegex").toString()));
      }
      if ((jsonObj.get("mask") != null && !jsonObj.get("mask").isJsonNull()) && !jsonObj.get("mask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mask").toString()));
      }
      if ((jsonObj.get("regex") != null && !jsonObj.get("regex").isJsonNull()) && !jsonObj.get("regex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regex").toString()));
      }
      if ((jsonObj.get("validCardLengths") != null && !jsonObj.get("validCardLengths").isJsonNull()) && !jsonObj.get("validCardLengths").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validCardLengths` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validCardLengths").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("weights") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("weights").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `weights` to be an array in the JSON string but got `%s`", jsonObj.get("weights").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Validator.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Validator' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Validator> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Validator.class));

       return (TypeAdapter<T>) new TypeAdapter<Validator>() {
           @Override
           public void write(JsonWriter out, Validator value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Validator read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Validator given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Validator
   * @throws IOException if the JSON string is invalid with respect to Validator
   */
  public static Validator fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Validator.class);
  }

  /**
   * Convert an instance of Validator to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

