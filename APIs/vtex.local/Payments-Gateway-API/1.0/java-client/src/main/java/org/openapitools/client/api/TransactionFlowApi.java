/*
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CancelthetransactionRequest;
import org.openapitools.client.model.RefundthetransactionRequest;
import org.openapitools.client.model.SettleResponse;
import org.openapitools.client.model.SettlethetransactionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionFlowApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionFlowApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionFlowApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelthetransaction
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param cancelthetransactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelthetransactionCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, CancelthetransactionRequest cancelthetransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelthetransactionRequest;

        // create path and map variables
        String localVarPath = "/api/pvt/transactions/{transactionId}/cancellation-request"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelthetransactionValidateBeforeCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, CancelthetransactionRequest cancelthetransactionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling cancelthetransaction(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling cancelthetransaction(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling cancelthetransaction(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling cancelthetransaction(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling cancelthetransaction(Async)");
        }

        // verify the required parameter 'cancelthetransactionRequest' is set
        if (cancelthetransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'cancelthetransactionRequest' when calling cancelthetransaction(Async)");
        }

        return cancelthetransactionCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, cancelthetransactionRequest, _callback);

    }

    /**
     * Cancel the transaction
     * Cancel&#39;s transaction that was previously approved, but not settled.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param cancelthetransactionRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void cancelthetransaction(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, CancelthetransactionRequest cancelthetransactionRequest) throws ApiException {
        cancelthetransactionWithHttpInfo(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, cancelthetransactionRequest);
    }

    /**
     * Cancel the transaction
     * Cancel&#39;s transaction that was previously approved, but not settled.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param cancelthetransactionRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelthetransactionWithHttpInfo(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, CancelthetransactionRequest cancelthetransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = cancelthetransactionValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, cancelthetransactionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel the transaction (asynchronously)
     * Cancel&#39;s transaction that was previously approved, but not settled.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param cancelthetransactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelthetransactionAsync(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, CancelthetransactionRequest cancelthetransactionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelthetransactionValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, cancelthetransactionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for refundthetransaction
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param refundthetransactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refundthetransactionCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, RefundthetransactionRequest refundthetransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = refundthetransactionRequest;

        // create path and map variables
        String localVarPath = "/api/pvt/transactions/{transactionId}/refunding-request"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refundthetransactionValidateBeforeCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, RefundthetransactionRequest refundthetransactionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling refundthetransaction(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling refundthetransaction(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling refundthetransaction(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling refundthetransaction(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling refundthetransaction(Async)");
        }

        // verify the required parameter 'refundthetransactionRequest' is set
        if (refundthetransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'refundthetransactionRequest' when calling refundthetransaction(Async)");
        }

        return refundthetransactionCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, refundthetransactionRequest, _callback);

    }

    /**
     * Refund the transaction
     * Refunds transaction&#39;s value that was previously settled.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param refundthetransactionRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void refundthetransaction(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, RefundthetransactionRequest refundthetransactionRequest) throws ApiException {
        refundthetransactionWithHttpInfo(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, refundthetransactionRequest);
    }

    /**
     * Refund the transaction
     * Refunds transaction&#39;s value that was previously settled.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param refundthetransactionRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> refundthetransactionWithHttpInfo(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, RefundthetransactionRequest refundthetransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = refundthetransactionValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, refundthetransactionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Refund the transaction (asynchronously)
     * Refunds transaction&#39;s value that was previously settled.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param refundthetransactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refundthetransactionAsync(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, RefundthetransactionRequest refundthetransactionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = refundthetransactionValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, refundthetransactionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for settlethetransaction
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param settlethetransactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * cache-control -  <br>  * connection -  <br>  * content-length -  <br>  * content-type -  <br>  * date -  <br>  * expires -  <br>  * pragma -  <br>  * server -  <br>  * x-aspnet-version -  <br>  * x-powered-by -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call settlethetransactionCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, SettlethetransactionRequest settlethetransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = settlethetransactionRequest;

        // create path and map variables
        String localVarPath = "/api/pvt/transactions/{transactionId}/settlement-request"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settlethetransactionValidateBeforeCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, SettlethetransactionRequest settlethetransactionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling settlethetransaction(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling settlethetransaction(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling settlethetransaction(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling settlethetransaction(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling settlethetransaction(Async)");
        }

        // verify the required parameter 'settlethetransactionRequest' is set
        if (settlethetransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'settlethetransactionRequest' when calling settlethetransaction(Async)");
        }

        return settlethetransactionCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, settlethetransactionRequest, _callback);

    }

    /**
     * Settle the transaction
     * Settles transaction&#39;s value.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param settlethetransactionRequest  (required)
     * @return SettleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * cache-control -  <br>  * connection -  <br>  * content-length -  <br>  * content-type -  <br>  * date -  <br>  * expires -  <br>  * pragma -  <br>  * server -  <br>  * x-aspnet-version -  <br>  * x-powered-by -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public SettleResponse settlethetransaction(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, SettlethetransactionRequest settlethetransactionRequest) throws ApiException {
        ApiResponse<SettleResponse> localVarResp = settlethetransactionWithHttpInfo(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, settlethetransactionRequest);
        return localVarResp.getData();
    }

    /**
     * Settle the transaction
     * Settles transaction&#39;s value.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param settlethetransactionRequest  (required)
     * @return ApiResponse&lt;SettleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * cache-control -  <br>  * connection -  <br>  * content-length -  <br>  * content-type -  <br>  * date -  <br>  * expires -  <br>  * pragma -  <br>  * server -  <br>  * x-aspnet-version -  <br>  * x-powered-by -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<SettleResponse> settlethetransactionWithHttpInfo(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, SettlethetransactionRequest settlethetransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = settlethetransactionValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, settlethetransactionRequest, null);
        Type localVarReturnType = new TypeToken<SettleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Settle the transaction (asynchronously)
     * Settles transaction&#39;s value.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param settlethetransactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * access-control-allow-credentials -  <br>  * access-control-allow-origin -  <br>  * cache-control -  <br>  * connection -  <br>  * content-length -  <br>  * content-type -  <br>  * date -  <br>  * expires -  <br>  * pragma -  <br>  * server -  <br>  * x-aspnet-version -  <br>  * x-powered-by -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call settlethetransactionAsync(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, SettlethetransactionRequest settlethetransactionRequest, final ApiCallback<SettleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = settlethetransactionValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, settlethetransactionRequest, _callback);
        Type localVarReturnType = new TypeToken<SettleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
