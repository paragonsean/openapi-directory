/*
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InsertAffiliationRequest;
import org.openapitools.client.model.InsertRuleRequest;
import org.openapitools.client.model.PaymentSystemsResponse;
import org.openapitools.client.model.RuleByIdRequest;
import org.openapitools.client.model.UpdateAffiliationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigurationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConfigurationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfigurationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for affiliationById
     * @param affiliationId  (required)
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call affiliationByIdCall(String affiliationId, String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvt/affiliations/{affiliationId}"
            .replace("{" + "affiliationId" + "}", localVarApiClient.escapeString(affiliationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call affiliationByIdValidateBeforeCall(String affiliationId, String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'affiliationId' is set
        if (affiliationId == null) {
            throw new ApiException("Missing the required parameter 'affiliationId' when calling affiliationById(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling affiliationById(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling affiliationById(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling affiliationById(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling affiliationById(Async)");
        }

        return affiliationByIdCall(affiliationId, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, _callback);

    }

    /**
     * Affiliation By Id
     * Returns associated data for the specified affiliation Id, like name and implementation, for example.
     * @param affiliationId  (required)
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void affiliationById(String affiliationId, String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept) throws ApiException {
        affiliationByIdWithHttpInfo(affiliationId, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept);
    }

    /**
     * Affiliation By Id
     * Returns associated data for the specified affiliation Id, like name and implementation, for example.
     * @param affiliationId  (required)
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> affiliationByIdWithHttpInfo(String affiliationId, String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = affiliationByIdValidateBeforeCall(affiliationId, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Affiliation By Id (asynchronously)
     * Returns associated data for the specified affiliation Id, like name and implementation, for example.
     * @param affiliationId  (required)
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call affiliationByIdAsync(String affiliationId, String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = affiliationByIdValidateBeforeCall(affiliationId, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for affiliations
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call affiliationsCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvt/affiliations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call affiliationsValidateBeforeCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling affiliations(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling affiliations(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling affiliations(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling affiliations(Async)");
        }

        return affiliationsCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, _callback);

    }

    /**
     * Affiliations
     * Returns all affiliations that your provider can handle.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void affiliations(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept) throws ApiException {
        affiliationsWithHttpInfo(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept);
    }

    /**
     * Affiliations
     * Returns all affiliations that your provider can handle.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> affiliationsWithHttpInfo(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = affiliationsValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Affiliations (asynchronously)
     * Returns all affiliations that your provider can handle.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call affiliationsAsync(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = affiliationsValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for availablePaymentMethods
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call availablePaymentMethodsCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvt/merchants/payment-systems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call availablePaymentMethodsValidateBeforeCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling availablePaymentMethods(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling availablePaymentMethods(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling availablePaymentMethods(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling availablePaymentMethods(Async)");
        }

        return availablePaymentMethodsCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, _callback);

    }

    /**
     * Available Payment Methods
     * Returns enabled payment methods, like visa, master, bankissueinvoice that are shown for the final user and enabled to receive payment.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @return List&lt;PaymentSystemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public List<PaymentSystemsResponse> availablePaymentMethods(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept) throws ApiException {
        ApiResponse<List<PaymentSystemsResponse>> localVarResp = availablePaymentMethodsWithHttpInfo(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept);
        return localVarResp.getData();
    }

    /**
     * Available Payment Methods
     * Returns enabled payment methods, like visa, master, bankissueinvoice that are shown for the final user and enabled to receive payment.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @return ApiResponse&lt;List&lt;PaymentSystemsResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<PaymentSystemsResponse>> availablePaymentMethodsWithHttpInfo(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = availablePaymentMethodsValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, null);
        Type localVarReturnType = new TypeToken<List<PaymentSystemsResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Available Payment Methods (asynchronously)
     * Returns enabled payment methods, like visa, master, bankissueinvoice that are shown for the final user and enabled to receive payment.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call availablePaymentMethodsAsync(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, final ApiCallback<List<PaymentSystemsResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = availablePaymentMethodsValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, _callback);
        Type localVarReturnType = new TypeToken<List<PaymentSystemsResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for insertAffiliation
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param insertAffiliationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insertAffiliationCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, InsertAffiliationRequest insertAffiliationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = insertAffiliationRequest;

        // create path and map variables
        String localVarPath = "/api/pvt/affiliations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call insertAffiliationValidateBeforeCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, InsertAffiliationRequest insertAffiliationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling insertAffiliation(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling insertAffiliation(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling insertAffiliation(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling insertAffiliation(Async)");
        }

        // verify the required parameter 'insertAffiliationRequest' is set
        if (insertAffiliationRequest == null) {
            throw new ApiException("Missing the required parameter 'insertAffiliationRequest' when calling insertAffiliation(Async)");
        }

        return insertAffiliationCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, insertAffiliationRequest, _callback);

    }

    /**
     * Insert Affiliation
     * Creates a new affiliation and returns a successful response.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param insertAffiliationRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void insertAffiliation(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, InsertAffiliationRequest insertAffiliationRequest) throws ApiException {
        insertAffiliationWithHttpInfo(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, insertAffiliationRequest);
    }

    /**
     * Insert Affiliation
     * Creates a new affiliation and returns a successful response.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param insertAffiliationRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> insertAffiliationWithHttpInfo(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, InsertAffiliationRequest insertAffiliationRequest) throws ApiException {
        okhttp3.Call localVarCall = insertAffiliationValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, insertAffiliationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Insert Affiliation (asynchronously)
     * Creates a new affiliation and returns a successful response.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param insertAffiliationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insertAffiliationAsync(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, InsertAffiliationRequest insertAffiliationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = insertAffiliationValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, insertAffiliationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for insertRule
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param insertRuleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insertRuleCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, InsertRuleRequest insertRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = insertRuleRequest;

        // create path and map variables
        String localVarPath = "/api/pvt/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call insertRuleValidateBeforeCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, InsertRuleRequest insertRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling insertRule(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling insertRule(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling insertRule(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling insertRule(Async)");
        }

        // verify the required parameter 'insertRuleRequest' is set
        if (insertRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'insertRuleRequest' when calling insertRule(Async)");
        }

        return insertRuleCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, insertRuleRequest, _callback);

    }

    /**
     * Insert Rule
     * Creates a new rule and returns a successful response.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param insertRuleRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void insertRule(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, InsertRuleRequest insertRuleRequest) throws ApiException {
        insertRuleWithHttpInfo(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, insertRuleRequest);
    }

    /**
     * Insert Rule
     * Creates a new rule and returns a successful response.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param insertRuleRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> insertRuleWithHttpInfo(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, InsertRuleRequest insertRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = insertRuleValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, insertRuleRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Insert Rule (asynchronously)
     * Creates a new rule and returns a successful response.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param insertRuleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insertRuleAsync(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, InsertRuleRequest insertRuleRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = insertRuleValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, insertRuleRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putRuleById
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param ruleId  (required)
     * @param ruleByIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putRuleByIdCall(String accept, String contentType, String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String ruleId, RuleByIdRequest ruleByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ruleByIdRequest;

        // create path and map variables
        String localVarPath = "/api/pvt/rules/{ruleId}"
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putRuleByIdValidateBeforeCall(String accept, String contentType, String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String ruleId, RuleByIdRequest ruleByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling putRuleById(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling putRuleById(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling putRuleById(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling putRuleById(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling putRuleById(Async)");
        }

        // verify the required parameter 'ruleByIdRequest' is set
        if (ruleByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'ruleByIdRequest' when calling putRuleById(Async)");
        }

        return putRuleByIdCall(accept, contentType, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, ruleId, ruleByIdRequest, _callback);

    }

    /**
     * Rule By Id
     * Update Rule.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param ruleId  (required)
     * @param ruleByIdRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void putRuleById(String accept, String contentType, String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String ruleId, RuleByIdRequest ruleByIdRequest) throws ApiException {
        putRuleByIdWithHttpInfo(accept, contentType, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, ruleId, ruleByIdRequest);
    }

    /**
     * Rule By Id
     * Update Rule.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param ruleId  (required)
     * @param ruleByIdRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putRuleByIdWithHttpInfo(String accept, String contentType, String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String ruleId, RuleByIdRequest ruleByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = putRuleByIdValidateBeforeCall(accept, contentType, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, ruleId, ruleByIdRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Rule By Id (asynchronously)
     * Update Rule.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param ruleId  (required)
     * @param ruleByIdRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putRuleByIdAsync(String accept, String contentType, String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String ruleId, RuleByIdRequest ruleByIdRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putRuleByIdValidateBeforeCall(accept, contentType, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, ruleId, ruleByIdRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for rule
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param ruleId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvt/rules/{ruleId}"
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleValidateBeforeCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling rule(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling rule(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling rule(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling rule(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling rule(Async)");
        }

        return ruleCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, ruleId, _callback);

    }

    /**
     * Delete Rule
     * Deletes rules by specified Id.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param ruleId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void rule(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String ruleId) throws ApiException {
        ruleWithHttpInfo(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, ruleId);
    }

    /**
     * Delete Rule
     * Deletes rules by specified Id.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param ruleId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ruleWithHttpInfo(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String ruleId) throws ApiException {
        okhttp3.Call localVarCall = ruleValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, ruleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Rule (asynchronously)
     * Deletes rules by specified Id.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param ruleId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleAsync(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String ruleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, ruleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ruleById
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param ruleId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleByIdCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvt/rules/{ruleId}"
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ruleByIdValidateBeforeCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling ruleById(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling ruleById(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling ruleById(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling ruleById(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling ruleById(Async)");
        }

        return ruleByIdCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, ruleId, _callback);

    }

    /**
     * Rule By Id
     * Returns rule by specified RuleId.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param ruleId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ruleById(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String ruleId) throws ApiException {
        ruleByIdWithHttpInfo(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, ruleId);
    }

    /**
     * Rule By Id
     * Returns rule by specified RuleId.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param ruleId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ruleByIdWithHttpInfo(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String ruleId) throws ApiException {
        okhttp3.Call localVarCall = ruleByIdValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, ruleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Rule By Id (asynchronously)
     * Returns rule by specified RuleId.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param ruleId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ruleByIdAsync(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String ruleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ruleByIdValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, ruleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for rules
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvt/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulesValidateBeforeCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling rules(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling rules(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling rules(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling rules(Async)");
        }

        return rulesCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, _callback);

    }

    /**
     * Rules
     * Returns all rules conditions your provider can handle.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void rules(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept) throws ApiException {
        rulesWithHttpInfo(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept);
    }

    /**
     * Rules
     * Returns all rules conditions your provider can handle.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rulesWithHttpInfo(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = rulesValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Rules (asynchronously)
     * Returns all rules conditions your provider can handle.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesAsync(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulesValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAffiliation
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param affiliationId  (required)
     * @param updateAffiliationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAffiliationCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String affiliationId, UpdateAffiliationRequest updateAffiliationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAffiliationRequest;

        // create path and map variables
        String localVarPath = "/api/pvt/affiliations/{affiliationId}"
            .replace("{" + "affiliationId" + "}", localVarApiClient.escapeString(affiliationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAffiliationValidateBeforeCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String affiliationId, UpdateAffiliationRequest updateAffiliationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling updateAffiliation(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling updateAffiliation(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updateAffiliation(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateAffiliation(Async)");
        }

        // verify the required parameter 'affiliationId' is set
        if (affiliationId == null) {
            throw new ApiException("Missing the required parameter 'affiliationId' when calling updateAffiliation(Async)");
        }

        // verify the required parameter 'updateAffiliationRequest' is set
        if (updateAffiliationRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAffiliationRequest' when calling updateAffiliation(Async)");
        }

        return updateAffiliationCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, affiliationId, updateAffiliationRequest, _callback);

    }

    /**
     * Update Affiliation
     * Returns all affiliations.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param affiliationId  (required)
     * @param updateAffiliationRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void updateAffiliation(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String affiliationId, UpdateAffiliationRequest updateAffiliationRequest) throws ApiException {
        updateAffiliationWithHttpInfo(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, affiliationId, updateAffiliationRequest);
    }

    /**
     * Update Affiliation
     * Returns all affiliations.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param affiliationId  (required)
     * @param updateAffiliationRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateAffiliationWithHttpInfo(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String affiliationId, UpdateAffiliationRequest updateAffiliationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAffiliationValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, affiliationId, updateAffiliationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Affiliation (asynchronously)
     * Returns all affiliations.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param affiliationId  (required)
     * @param updateAffiliationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAffiliationAsync(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String affiliationId, UpdateAffiliationRequest updateAffiliationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAffiliationValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, affiliationId, updateAffiliationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
