/*
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModelConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InsertAffiliationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:23.786494-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InsertAffiliationRequest {
  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private List<ModelConfiguration> _configuration = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMPLEMENTATION = "implementation";
  @SerializedName(SERIALIZED_NAME_IMPLEMENTATION)
  private String implementation;

  public static final String SERIALIZED_NAME_IS_CONFIGURED = "isConfigured";
  @SerializedName(SERIALIZED_NAME_IS_CONFIGURED)
  private Boolean isConfigured;

  public static final String SERIALIZED_NAME_ISDELIVERED = "isdelivered";
  @SerializedName(SERIALIZED_NAME_ISDELIVERED)
  private Boolean isdelivered;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public InsertAffiliationRequest() {
  }

  public InsertAffiliationRequest _configuration(List<ModelConfiguration> _configuration) {
    this._configuration = _configuration;
    return this;
  }

  public InsertAffiliationRequest addConfigurationItem(ModelConfiguration _configurationItem) {
    if (this._configuration == null) {
      this._configuration = new ArrayList<>();
    }
    this._configuration.add(_configurationItem);
    return this;
  }

  /**
   * 
   * @return _configuration
   */
  @javax.annotation.Nonnull
  public List<ModelConfiguration> getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(List<ModelConfiguration> _configuration) {
    this._configuration = _configuration;
  }


  public InsertAffiliationRequest implementation(String implementation) {
    this.implementation = implementation;
    return this;
  }

  /**
   * Get implementation
   * @return implementation
   */
  @javax.annotation.Nonnull
  public String getImplementation() {
    return implementation;
  }

  public void setImplementation(String implementation) {
    this.implementation = implementation;
  }


  public InsertAffiliationRequest isConfigured(Boolean isConfigured) {
    this.isConfigured = isConfigured;
    return this;
  }

  /**
   * Get isConfigured
   * @return isConfigured
   */
  @javax.annotation.Nonnull
  public Boolean getIsConfigured() {
    return isConfigured;
  }

  public void setIsConfigured(Boolean isConfigured) {
    this.isConfigured = isConfigured;
  }


  public InsertAffiliationRequest isdelivered(Boolean isdelivered) {
    this.isdelivered = isdelivered;
    return this;
  }

  /**
   * Get isdelivered
   * @return isdelivered
   */
  @javax.annotation.Nonnull
  public Boolean getIsdelivered() {
    return isdelivered;
  }

  public void setIsdelivered(Boolean isdelivered) {
    this.isdelivered = isdelivered;
  }


  public InsertAffiliationRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InsertAffiliationRequest insertAffiliationRequest = (InsertAffiliationRequest) o;
    return Objects.equals(this._configuration, insertAffiliationRequest._configuration) &&
        Objects.equals(this.implementation, insertAffiliationRequest.implementation) &&
        Objects.equals(this.isConfigured, insertAffiliationRequest.isConfigured) &&
        Objects.equals(this.isdelivered, insertAffiliationRequest.isdelivered) &&
        Objects.equals(this.name, insertAffiliationRequest.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_configuration, implementation, isConfigured, isdelivered, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InsertAffiliationRequest {\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    implementation: ").append(toIndentedString(implementation)).append("\n");
    sb.append("    isConfigured: ").append(toIndentedString(isConfigured)).append("\n");
    sb.append("    isdelivered: ").append(toIndentedString(isdelivered)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configuration");
    openapiFields.add("implementation");
    openapiFields.add("isConfigured");
    openapiFields.add("isdelivered");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("configuration");
    openapiRequiredFields.add("implementation");
    openapiRequiredFields.add("isConfigured");
    openapiRequiredFields.add("isdelivered");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InsertAffiliationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InsertAffiliationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InsertAffiliationRequest is not found in the empty JSON string", InsertAffiliationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InsertAffiliationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InsertAffiliationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InsertAffiliationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("configuration").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `configuration` to be an array in the JSON string but got `%s`", jsonObj.get("configuration").toString()));
      }

      JsonArray jsonArray_configuration = jsonObj.getAsJsonArray("configuration");
      // validate the required field `configuration` (array)
      for (int i = 0; i < jsonArray_configuration.size(); i++) {
        ModelConfiguration.validateJsonElement(jsonArray_configuration.get(i));
      };
      if (!jsonObj.get("implementation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `implementation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("implementation").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InsertAffiliationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InsertAffiliationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InsertAffiliationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InsertAffiliationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<InsertAffiliationRequest>() {
           @Override
           public void write(JsonWriter out, InsertAffiliationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InsertAffiliationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InsertAffiliationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InsertAffiliationRequest
   * @throws IOException if the JSON string is invalid with respect to InsertAffiliationRequest
   */
  public static InsertAffiliationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InsertAffiliationRequest.class);
  }

  /**
   * Convert an instance of InsertAffiliationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

