/*
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CancelthetransactionRequestMinicart;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CancelthetransactionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:23.786494-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CancelthetransactionRequest {
  public static final String SERIALIZED_NAME_MINICART = "minicart";
  @SerializedName(SERIALIZED_NAME_MINICART)
  private CancelthetransactionRequestMinicart minicart = {"minicart":{"freight":200,"items":[{"discount":50,"id":"122323","name":"Tenis Preto I","quantity":1,"shippingDiscount":0,"value":1000},{"discount":50,"id":"122324","name":"Tenis Nike Azul","quantity":1,"shippingDiscount":0,"value":1100}],"tax":0},"value":2300};

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Integer value;

  public CancelthetransactionRequest() {
  }

  public CancelthetransactionRequest minicart(CancelthetransactionRequestMinicart minicart) {
    this.minicart = minicart;
    return this;
  }

  /**
   * Get minicart
   * @return minicart
   */
  @javax.annotation.Nullable
  public CancelthetransactionRequestMinicart getMinicart() {
    return minicart;
  }

  public void setMinicart(CancelthetransactionRequestMinicart minicart) {
    this.minicart = minicart;
  }


  public CancelthetransactionRequest value(Integer value) {
    this.value = value;
    return this;
  }

  /**
   * Value of the purchase.
   * @return value
   */
  @javax.annotation.Nonnull
  public Integer getValue() {
    return value;
  }

  public void setValue(Integer value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CancelthetransactionRequest cancelthetransactionRequest = (CancelthetransactionRequest) o;
    return Objects.equals(this.minicart, cancelthetransactionRequest.minicart) &&
        Objects.equals(this.value, cancelthetransactionRequest.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minicart, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CancelthetransactionRequest {\n");
    sb.append("    minicart: ").append(toIndentedString(minicart)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("minicart");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CancelthetransactionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CancelthetransactionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CancelthetransactionRequest is not found in the empty JSON string", CancelthetransactionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CancelthetransactionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CancelthetransactionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CancelthetransactionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `minicart`
      if (jsonObj.get("minicart") != null && !jsonObj.get("minicart").isJsonNull()) {
        CancelthetransactionRequestMinicart.validateJsonElement(jsonObj.get("minicart"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CancelthetransactionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CancelthetransactionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CancelthetransactionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CancelthetransactionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CancelthetransactionRequest>() {
           @Override
           public void write(JsonWriter out, CancelthetransactionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CancelthetransactionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CancelthetransactionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CancelthetransactionRequest
   * @throws IOException if the JSON string is invalid with respect to CancelthetransactionRequest
   */
  public static CancelthetransactionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CancelthetransactionRequest.class);
  }

  /**
   * Convert an instance of CancelthetransactionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

