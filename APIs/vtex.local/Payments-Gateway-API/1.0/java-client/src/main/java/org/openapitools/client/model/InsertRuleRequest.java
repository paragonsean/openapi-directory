/*
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Antifraud;
import org.openapitools.client.model.Connector;
import org.openapitools.client.model.Issuer;
import org.openapitools.client.model.PaymentSystem;
import org.openapitools.client.model.SalesChannel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InsertRuleRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:23.786494-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InsertRuleRequest {
  public static final String SERIALIZED_NAME_ANTIFRAUD = "antifraud";
  @SerializedName(SERIALIZED_NAME_ANTIFRAUD)
  private Antifraud antifraud;

  public static final String SERIALIZED_NAME_BEGIN_DATE = "beginDate";
  @SerializedName(SERIALIZED_NAME_BEGIN_DATE)
  private String beginDate;

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private String condition;

  public static final String SERIALIZED_NAME_CONNECTOR = "connector";
  @SerializedName(SERIALIZED_NAME_CONNECTOR)
  private Connector connector;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DATE_INTERVALS = "dateIntervals";
  @SerializedName(SERIALIZED_NAME_DATE_INTERVALS)
  private String dateIntervals;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_INSTALLMENT_OPTIONS = "installmentOptions";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_OPTIONS)
  private String installmentOptions;

  public static final String SERIALIZED_NAME_INSTALLMENTS_SERVICE = "installmentsService";
  @SerializedName(SERIALIZED_NAME_INSTALLMENTS_SERVICE)
  private String installmentsService;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_IS_SELF_AUTHORIZED = "isSelfAuthorized";
  @SerializedName(SERIALIZED_NAME_IS_SELF_AUTHORIZED)
  private String isSelfAuthorized;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private Issuer issuer;

  public static final String SERIALIZED_NAME_MULTI_MERCHANT_LIST = "multiMerchantList";
  @SerializedName(SERIALIZED_NAME_MULTI_MERCHANT_LIST)
  private String multiMerchantList;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PAYMENT_SYSTEM = "paymentSystem";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SYSTEM)
  private PaymentSystem paymentSystem;

  public static final String SERIALIZED_NAME_REQUIRES_AUTHENTICATION = "requiresAuthentication";
  @SerializedName(SERIALIZED_NAME_REQUIRES_AUTHENTICATION)
  private String requiresAuthentication;

  public static final String SERIALIZED_NAME_SALES_CHANNELS = "salesChannels";
  @SerializedName(SERIALIZED_NAME_SALES_CHANNELS)
  private List<SalesChannel> salesChannels = new ArrayList<>();

  public InsertRuleRequest() {
  }

  public InsertRuleRequest antifraud(Antifraud antifraud) {
    this.antifraud = antifraud;
    return this;
  }

  /**
   * Get antifraud
   * @return antifraud
   */
  @javax.annotation.Nonnull
  public Antifraud getAntifraud() {
    return antifraud;
  }

  public void setAntifraud(Antifraud antifraud) {
    this.antifraud = antifraud;
  }


  public InsertRuleRequest beginDate(String beginDate) {
    this.beginDate = beginDate;
    return this;
  }

  /**
   * Get beginDate
   * @return beginDate
   */
  @javax.annotation.Nullable
  public String getBeginDate() {
    return beginDate;
  }

  public void setBeginDate(String beginDate) {
    this.beginDate = beginDate;
  }


  public InsertRuleRequest condition(String condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Get condition
   * @return condition
   */
  @javax.annotation.Nullable
  public String getCondition() {
    return condition;
  }

  public void setCondition(String condition) {
    this.condition = condition;
  }


  public InsertRuleRequest connector(Connector connector) {
    this.connector = connector;
    return this;
  }

  /**
   * Get connector
   * @return connector
   */
  @javax.annotation.Nonnull
  public Connector getConnector() {
    return connector;
  }

  public void setConnector(Connector connector) {
    this.connector = connector;
  }


  public InsertRuleRequest country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public InsertRuleRequest dateIntervals(String dateIntervals) {
    this.dateIntervals = dateIntervals;
    return this;
  }

  /**
   * Get dateIntervals
   * @return dateIntervals
   */
  @javax.annotation.Nullable
  public String getDateIntervals() {
    return dateIntervals;
  }

  public void setDateIntervals(String dateIntervals) {
    this.dateIntervals = dateIntervals;
  }


  public InsertRuleRequest enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public InsertRuleRequest endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public InsertRuleRequest installmentOptions(String installmentOptions) {
    this.installmentOptions = installmentOptions;
    return this;
  }

  /**
   * Get installmentOptions
   * @return installmentOptions
   */
  @javax.annotation.Nullable
  public String getInstallmentOptions() {
    return installmentOptions;
  }

  public void setInstallmentOptions(String installmentOptions) {
    this.installmentOptions = installmentOptions;
  }


  public InsertRuleRequest installmentsService(String installmentsService) {
    this.installmentsService = installmentsService;
    return this;
  }

  /**
   * Get installmentsService
   * @return installmentsService
   */
  @javax.annotation.Nullable
  public String getInstallmentsService() {
    return installmentsService;
  }

  public void setInstallmentsService(String installmentsService) {
    this.installmentsService = installmentsService;
  }


  public InsertRuleRequest isDefault(Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * Get isDefault
   * @return isDefault
   */
  @javax.annotation.Nonnull
  public Boolean getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public InsertRuleRequest isSelfAuthorized(String isSelfAuthorized) {
    this.isSelfAuthorized = isSelfAuthorized;
    return this;
  }

  /**
   * Get isSelfAuthorized
   * @return isSelfAuthorized
   */
  @javax.annotation.Nullable
  public String getIsSelfAuthorized() {
    return isSelfAuthorized;
  }

  public void setIsSelfAuthorized(String isSelfAuthorized) {
    this.isSelfAuthorized = isSelfAuthorized;
  }


  public InsertRuleRequest issuer(Issuer issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Get issuer
   * @return issuer
   */
  @javax.annotation.Nonnull
  public Issuer getIssuer() {
    return issuer;
  }

  public void setIssuer(Issuer issuer) {
    this.issuer = issuer;
  }


  public InsertRuleRequest multiMerchantList(String multiMerchantList) {
    this.multiMerchantList = multiMerchantList;
    return this;
  }

  /**
   * Get multiMerchantList
   * @return multiMerchantList
   */
  @javax.annotation.Nullable
  public String getMultiMerchantList() {
    return multiMerchantList;
  }

  public void setMultiMerchantList(String multiMerchantList) {
    this.multiMerchantList = multiMerchantList;
  }


  public InsertRuleRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public InsertRuleRequest paymentSystem(PaymentSystem paymentSystem) {
    this.paymentSystem = paymentSystem;
    return this;
  }

  /**
   * Get paymentSystem
   * @return paymentSystem
   */
  @javax.annotation.Nonnull
  public PaymentSystem getPaymentSystem() {
    return paymentSystem;
  }

  public void setPaymentSystem(PaymentSystem paymentSystem) {
    this.paymentSystem = paymentSystem;
  }


  public InsertRuleRequest requiresAuthentication(String requiresAuthentication) {
    this.requiresAuthentication = requiresAuthentication;
    return this;
  }

  /**
   * Get requiresAuthentication
   * @return requiresAuthentication
   */
  @javax.annotation.Nullable
  public String getRequiresAuthentication() {
    return requiresAuthentication;
  }

  public void setRequiresAuthentication(String requiresAuthentication) {
    this.requiresAuthentication = requiresAuthentication;
  }


  public InsertRuleRequest salesChannels(List<SalesChannel> salesChannels) {
    this.salesChannels = salesChannels;
    return this;
  }

  public InsertRuleRequest addSalesChannelsItem(SalesChannel salesChannelsItem) {
    if (this.salesChannels == null) {
      this.salesChannels = new ArrayList<>();
    }
    this.salesChannels.add(salesChannelsItem);
    return this;
  }

  /**
   * 
   * @return salesChannels
   */
  @javax.annotation.Nonnull
  public List<SalesChannel> getSalesChannels() {
    return salesChannels;
  }

  public void setSalesChannels(List<SalesChannel> salesChannels) {
    this.salesChannels = salesChannels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InsertRuleRequest insertRuleRequest = (InsertRuleRequest) o;
    return Objects.equals(this.antifraud, insertRuleRequest.antifraud) &&
        Objects.equals(this.beginDate, insertRuleRequest.beginDate) &&
        Objects.equals(this.condition, insertRuleRequest.condition) &&
        Objects.equals(this.connector, insertRuleRequest.connector) &&
        Objects.equals(this.country, insertRuleRequest.country) &&
        Objects.equals(this.dateIntervals, insertRuleRequest.dateIntervals) &&
        Objects.equals(this.enabled, insertRuleRequest.enabled) &&
        Objects.equals(this.endDate, insertRuleRequest.endDate) &&
        Objects.equals(this.installmentOptions, insertRuleRequest.installmentOptions) &&
        Objects.equals(this.installmentsService, insertRuleRequest.installmentsService) &&
        Objects.equals(this.isDefault, insertRuleRequest.isDefault) &&
        Objects.equals(this.isSelfAuthorized, insertRuleRequest.isSelfAuthorized) &&
        Objects.equals(this.issuer, insertRuleRequest.issuer) &&
        Objects.equals(this.multiMerchantList, insertRuleRequest.multiMerchantList) &&
        Objects.equals(this.name, insertRuleRequest.name) &&
        Objects.equals(this.paymentSystem, insertRuleRequest.paymentSystem) &&
        Objects.equals(this.requiresAuthentication, insertRuleRequest.requiresAuthentication) &&
        Objects.equals(this.salesChannels, insertRuleRequest.salesChannels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(antifraud, beginDate, condition, connector, country, dateIntervals, enabled, endDate, installmentOptions, installmentsService, isDefault, isSelfAuthorized, issuer, multiMerchantList, name, paymentSystem, requiresAuthentication, salesChannels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InsertRuleRequest {\n");
    sb.append("    antifraud: ").append(toIndentedString(antifraud)).append("\n");
    sb.append("    beginDate: ").append(toIndentedString(beginDate)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    connector: ").append(toIndentedString(connector)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    dateIntervals: ").append(toIndentedString(dateIntervals)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    installmentOptions: ").append(toIndentedString(installmentOptions)).append("\n");
    sb.append("    installmentsService: ").append(toIndentedString(installmentsService)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    isSelfAuthorized: ").append(toIndentedString(isSelfAuthorized)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    multiMerchantList: ").append(toIndentedString(multiMerchantList)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    paymentSystem: ").append(toIndentedString(paymentSystem)).append("\n");
    sb.append("    requiresAuthentication: ").append(toIndentedString(requiresAuthentication)).append("\n");
    sb.append("    salesChannels: ").append(toIndentedString(salesChannels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("antifraud");
    openapiFields.add("beginDate");
    openapiFields.add("condition");
    openapiFields.add("connector");
    openapiFields.add("country");
    openapiFields.add("dateIntervals");
    openapiFields.add("enabled");
    openapiFields.add("endDate");
    openapiFields.add("installmentOptions");
    openapiFields.add("installmentsService");
    openapiFields.add("isDefault");
    openapiFields.add("isSelfAuthorized");
    openapiFields.add("issuer");
    openapiFields.add("multiMerchantList");
    openapiFields.add("name");
    openapiFields.add("paymentSystem");
    openapiFields.add("requiresAuthentication");
    openapiFields.add("salesChannels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("antifraud");
    openapiRequiredFields.add("beginDate");
    openapiRequiredFields.add("condition");
    openapiRequiredFields.add("connector");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("dateIntervals");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("endDate");
    openapiRequiredFields.add("installmentOptions");
    openapiRequiredFields.add("installmentsService");
    openapiRequiredFields.add("isDefault");
    openapiRequiredFields.add("isSelfAuthorized");
    openapiRequiredFields.add("issuer");
    openapiRequiredFields.add("multiMerchantList");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("paymentSystem");
    openapiRequiredFields.add("requiresAuthentication");
    openapiRequiredFields.add("salesChannels");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InsertRuleRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InsertRuleRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InsertRuleRequest is not found in the empty JSON string", InsertRuleRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InsertRuleRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InsertRuleRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InsertRuleRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `antifraud`
      Antifraud.validateJsonElement(jsonObj.get("antifraud"));
      if ((jsonObj.get("beginDate") != null && !jsonObj.get("beginDate").isJsonNull()) && !jsonObj.get("beginDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beginDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beginDate").toString()));
      }
      if ((jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) && !jsonObj.get("condition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition").toString()));
      }
      // validate the required field `connector`
      Connector.validateJsonElement(jsonObj.get("connector"));
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("dateIntervals") != null && !jsonObj.get("dateIntervals").isJsonNull()) && !jsonObj.get("dateIntervals").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateIntervals` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateIntervals").toString()));
      }
      if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) && !jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      if ((jsonObj.get("installmentOptions") != null && !jsonObj.get("installmentOptions").isJsonNull()) && !jsonObj.get("installmentOptions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installmentOptions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installmentOptions").toString()));
      }
      if ((jsonObj.get("installmentsService") != null && !jsonObj.get("installmentsService").isJsonNull()) && !jsonObj.get("installmentsService").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installmentsService` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installmentsService").toString()));
      }
      if ((jsonObj.get("isSelfAuthorized") != null && !jsonObj.get("isSelfAuthorized").isJsonNull()) && !jsonObj.get("isSelfAuthorized").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isSelfAuthorized` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isSelfAuthorized").toString()));
      }
      // validate the required field `issuer`
      Issuer.validateJsonElement(jsonObj.get("issuer"));
      if ((jsonObj.get("multiMerchantList") != null && !jsonObj.get("multiMerchantList").isJsonNull()) && !jsonObj.get("multiMerchantList").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `multiMerchantList` to be a primitive type in the JSON string but got `%s`", jsonObj.get("multiMerchantList").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `paymentSystem`
      PaymentSystem.validateJsonElement(jsonObj.get("paymentSystem"));
      if ((jsonObj.get("requiresAuthentication") != null && !jsonObj.get("requiresAuthentication").isJsonNull()) && !jsonObj.get("requiresAuthentication").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiresAuthentication` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requiresAuthentication").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("salesChannels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesChannels` to be an array in the JSON string but got `%s`", jsonObj.get("salesChannels").toString()));
      }

      JsonArray jsonArraysalesChannels = jsonObj.getAsJsonArray("salesChannels");
      // validate the required field `salesChannels` (array)
      for (int i = 0; i < jsonArraysalesChannels.size(); i++) {
        SalesChannel.validateJsonElement(jsonArraysalesChannels.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InsertRuleRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InsertRuleRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InsertRuleRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InsertRuleRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<InsertRuleRequest>() {
           @Override
           public void write(JsonWriter out, InsertRuleRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InsertRuleRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InsertRuleRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InsertRuleRequest
   * @throws IOException if the JSON string is invalid with respect to InsertRuleRequest
   */
  public static InsertRuleRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InsertRuleRequest.class);
  }

  /**
   * Convert an instance of InsertRuleRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

