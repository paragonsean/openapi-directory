/*
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Model1CreateanewtransactionRequest;
import org.openapitools.client.model.Model2SendPaymentsPublicRequest;
import org.openapitools.client.model.Model2SendPaymentsWithSavedCreditCardRequest;
import org.openapitools.client.model.Model4DoauthorizationRequest;
import org.openapitools.client.model.PaymentDetailsResponse;
import org.openapitools.client.model.StartTransactionResponse;
import org.openapitools.client.model.TransactionDetailsResponse;
import org.openapitools.client.model.TransactionSettlementDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionProcessApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionProcessApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionProcessApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for call1createanewtransaction
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param model1CreateanewtransactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call call1createanewtransactionCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, Model1CreateanewtransactionRequest model1CreateanewtransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model1CreateanewtransactionRequest;

        // create path and map variables
        String localVarPath = "/api/pvt/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call1createanewtransactionValidateBeforeCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, Model1CreateanewtransactionRequest model1CreateanewtransactionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling call1createanewtransaction(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling call1createanewtransaction(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling call1createanewtransaction(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling call1createanewtransaction(Async)");
        }

        // verify the required parameter 'model1CreateanewtransactionRequest' is set
        if (model1CreateanewtransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'model1CreateanewtransactionRequest' when calling call1createanewtransaction(Async)");
        }

        return call1createanewtransactionCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, model1CreateanewtransactionRequest, _callback);

    }

    /**
     * 1. Starts a new transaction
     * This request is the first step to create a new transaction.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param model1CreateanewtransactionRequest  (required)
     * @return StartTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public StartTransactionResponse call1createanewtransaction(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, Model1CreateanewtransactionRequest model1CreateanewtransactionRequest) throws ApiException {
        ApiResponse<StartTransactionResponse> localVarResp = call1createanewtransactionWithHttpInfo(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, model1CreateanewtransactionRequest);
        return localVarResp.getData();
    }

    /**
     * 1. Starts a new transaction
     * This request is the first step to create a new transaction.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param model1CreateanewtransactionRequest  (required)
     * @return ApiResponse&lt;StartTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<StartTransactionResponse> call1createanewtransactionWithHttpInfo(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, Model1CreateanewtransactionRequest model1CreateanewtransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = call1createanewtransactionValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, model1CreateanewtransactionRequest, null);
        Type localVarReturnType = new TypeToken<StartTransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 1. Starts a new transaction (asynchronously)
     * This request is the first step to create a new transaction.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param model1CreateanewtransactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Access-Control-Allow-Credentials -  <br>  * Access-Control-Allow-Origin -  <br>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call call1createanewtransactionAsync(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, Model1CreateanewtransactionRequest model1CreateanewtransactionRequest, final ApiCallback<StartTransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = call1createanewtransactionValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, model1CreateanewtransactionRequest, _callback);
        Type localVarReturnType = new TypeToken<StartTransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for call2sendPaymentsPublic
     * @param orderId  (required)
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param model2SendPaymentsPublicRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call2sendPaymentsPublicCall(String orderId, String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, List<Model2SendPaymentsPublicRequest> model2SendPaymentsPublicRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model2SendPaymentsPublicRequest;

        // create path and map variables
        String localVarPath = "/api/pub/transactions/{transactionId}/payments"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderId", orderId));
        }

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call2sendPaymentsPublicValidateBeforeCall(String orderId, String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, List<Model2SendPaymentsPublicRequest> model2SendPaymentsPublicRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling call2sendPaymentsPublic(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling call2sendPaymentsPublic(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling call2sendPaymentsPublic(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling call2sendPaymentsPublic(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling call2sendPaymentsPublic(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling call2sendPaymentsPublic(Async)");
        }

        // verify the required parameter 'model2SendPaymentsPublicRequest' is set
        if (model2SendPaymentsPublicRequest == null) {
            throw new ApiException("Missing the required parameter 'model2SendPaymentsPublicRequest' when calling call2sendPaymentsPublic(Async)");
        }

        return call2sendPaymentsPublicCall(orderId, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, model2SendPaymentsPublicRequest, _callback);

    }

    /**
     * 2.1 Send Payments Information Public
     * The second step to create a new transaction. Here, you have the option to send the data in three diferent ways: doing a private request, a public request or a private request that uses a saved Credit Card. 
     * @param orderId  (required)
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param model2SendPaymentsPublicRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void call2sendPaymentsPublic(String orderId, String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, List<Model2SendPaymentsPublicRequest> model2SendPaymentsPublicRequest) throws ApiException {
        call2sendPaymentsPublicWithHttpInfo(orderId, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, model2SendPaymentsPublicRequest);
    }

    /**
     * 2.1 Send Payments Information Public
     * The second step to create a new transaction. Here, you have the option to send the data in three diferent ways: doing a private request, a public request or a private request that uses a saved Credit Card. 
     * @param orderId  (required)
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param model2SendPaymentsPublicRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call2sendPaymentsPublicWithHttpInfo(String orderId, String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, List<Model2SendPaymentsPublicRequest> model2SendPaymentsPublicRequest) throws ApiException {
        okhttp3.Call localVarCall = call2sendPaymentsPublicValidateBeforeCall(orderId, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, model2SendPaymentsPublicRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * 2.1 Send Payments Information Public (asynchronously)
     * The second step to create a new transaction. Here, you have the option to send the data in three diferent ways: doing a private request, a public request or a private request that uses a saved Credit Card. 
     * @param orderId  (required)
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param model2SendPaymentsPublicRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call2sendPaymentsPublicAsync(String orderId, String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, List<Model2SendPaymentsPublicRequest> model2SendPaymentsPublicRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call2sendPaymentsPublicValidateBeforeCall(orderId, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, model2SendPaymentsPublicRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call2sendPaymentsWithSavedCreditCard
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param model2SendPaymentsWithSavedCreditCardRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call2sendPaymentsWithSavedCreditCardCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, List<Model2SendPaymentsWithSavedCreditCardRequest> model2SendPaymentsWithSavedCreditCardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model2SendPaymentsWithSavedCreditCardRequest;

        // create path and map variables
        String localVarPath = "/api/pvt/transactions/{transactionId}/payments"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call2sendPaymentsWithSavedCreditCardValidateBeforeCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, List<Model2SendPaymentsWithSavedCreditCardRequest> model2SendPaymentsWithSavedCreditCardRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling call2sendPaymentsWithSavedCreditCard(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling call2sendPaymentsWithSavedCreditCard(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling call2sendPaymentsWithSavedCreditCard(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling call2sendPaymentsWithSavedCreditCard(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling call2sendPaymentsWithSavedCreditCard(Async)");
        }

        // verify the required parameter 'model2SendPaymentsWithSavedCreditCardRequest' is set
        if (model2SendPaymentsWithSavedCreditCardRequest == null) {
            throw new ApiException("Missing the required parameter 'model2SendPaymentsWithSavedCreditCardRequest' when calling call2sendPaymentsWithSavedCreditCard(Async)");
        }

        return call2sendPaymentsWithSavedCreditCardCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, model2SendPaymentsWithSavedCreditCardRequest, _callback);

    }

    /**
     * 2.2 Send Payments With Saved Credit Card
     * The second step to create a new transaction. Here, you have the option to send the data in three diferent ways: doing a private request, a public request or a private request that uses a saved Credit Card.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param model2SendPaymentsWithSavedCreditCardRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void call2sendPaymentsWithSavedCreditCard(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, List<Model2SendPaymentsWithSavedCreditCardRequest> model2SendPaymentsWithSavedCreditCardRequest) throws ApiException {
        call2sendPaymentsWithSavedCreditCardWithHttpInfo(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, model2SendPaymentsWithSavedCreditCardRequest);
    }

    /**
     * 2.2 Send Payments With Saved Credit Card
     * The second step to create a new transaction. Here, you have the option to send the data in three diferent ways: doing a private request, a public request or a private request that uses a saved Credit Card.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param model2SendPaymentsWithSavedCreditCardRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call2sendPaymentsWithSavedCreditCardWithHttpInfo(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, List<Model2SendPaymentsWithSavedCreditCardRequest> model2SendPaymentsWithSavedCreditCardRequest) throws ApiException {
        okhttp3.Call localVarCall = call2sendPaymentsWithSavedCreditCardValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, model2SendPaymentsWithSavedCreditCardRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * 2.2 Send Payments With Saved Credit Card (asynchronously)
     * The second step to create a new transaction. Here, you have the option to send the data in three diferent ways: doing a private request, a public request or a private request that uses a saved Credit Card.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param model2SendPaymentsWithSavedCreditCardRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call2sendPaymentsWithSavedCreditCardAsync(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, List<Model2SendPaymentsWithSavedCreditCardRequest> model2SendPaymentsWithSavedCreditCardRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call2sendPaymentsWithSavedCreditCardValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, model2SendPaymentsWithSavedCreditCardRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call3sendAdditionalData
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId Transaction identification. (required)
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call3sendAdditionalDataCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, List<List<Object>> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/pvt/transactions/{transactionId}/additional-data"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call3sendAdditionalDataValidateBeforeCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, List<List<Object>> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling call3sendAdditionalData(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling call3sendAdditionalData(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling call3sendAdditionalData(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling call3sendAdditionalData(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling call3sendAdditionalData(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling call3sendAdditionalData(Async)");
        }

        return call3sendAdditionalDataCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, requestBody, _callback);

    }

    /**
     * 3. Send Additional Data
     * The third step to create a new transaction. It will send the additional related data to the transaction, like billig and shipping adress.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId Transaction identification. (required)
     * @param requestBody  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void call3sendAdditionalData(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, List<List<Object>> requestBody) throws ApiException {
        call3sendAdditionalDataWithHttpInfo(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, requestBody);
    }

    /**
     * 3. Send Additional Data
     * The third step to create a new transaction. It will send the additional related data to the transaction, like billig and shipping adress.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId Transaction identification. (required)
     * @param requestBody  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call3sendAdditionalDataWithHttpInfo(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, List<List<Object>> requestBody) throws ApiException {
        okhttp3.Call localVarCall = call3sendAdditionalDataValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * 3. Send Additional Data (asynchronously)
     * The third step to create a new transaction. It will send the additional related data to the transaction, like billig and shipping adress.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId Transaction identification. (required)
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call3sendAdditionalDataAsync(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, List<List<Object>> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call3sendAdditionalDataValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call4doauthorization
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param model4DoauthorizationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4doauthorizationCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, Model4DoauthorizationRequest model4DoauthorizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model4DoauthorizationRequest;

        // create path and map variables
        String localVarPath = "/api/pvt/transactions/{transactionId}/authorization-request"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call4doauthorizationValidateBeforeCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, Model4DoauthorizationRequest model4DoauthorizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling call4doauthorization(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling call4doauthorization(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling call4doauthorization(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling call4doauthorization(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling call4doauthorization(Async)");
        }

        // verify the required parameter 'model4DoauthorizationRequest' is set
        if (model4DoauthorizationRequest == null) {
            throw new ApiException("Missing the required parameter 'model4DoauthorizationRequest' when calling call4doauthorization(Async)");
        }

        return call4doauthorizationCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, model4DoauthorizationRequest, _callback);

    }

    /**
     * Do authorization
     * The fouth and last step to create a new transaction. It will authorized the new transction creation acorrdint to the data previously informed in the latests requests.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param model4DoauthorizationRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void call4doauthorization(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, Model4DoauthorizationRequest model4DoauthorizationRequest) throws ApiException {
        call4doauthorizationWithHttpInfo(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, model4DoauthorizationRequest);
    }

    /**
     * Do authorization
     * The fouth and last step to create a new transaction. It will authorized the new transction creation acorrdint to the data previously informed in the latests requests.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param model4DoauthorizationRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call4doauthorizationWithHttpInfo(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, Model4DoauthorizationRequest model4DoauthorizationRequest) throws ApiException {
        okhttp3.Call localVarCall = call4doauthorizationValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, model4DoauthorizationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Do authorization (asynchronously)
     * The fouth and last step to create a new transaction. It will authorized the new transction creation acorrdint to the data previously informed in the latests requests.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param model4DoauthorizationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call4doauthorizationAsync(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String accept, String contentType, String transactionId, Model4DoauthorizationRequest model4DoauthorizationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call4doauthorizationValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, model4DoauthorizationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentDetails
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param paymentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call paymentDetailsCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String transactionId, String paymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvt/transactions/{transactionId}/payments/{paymentId}"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()))
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentDetailsValidateBeforeCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String transactionId, String paymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling paymentDetails(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling paymentDetails(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling paymentDetails(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling paymentDetails(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling paymentDetails(Async)");
        }

        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling paymentDetails(Async)");
        }

        return paymentDetailsCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, transactionId, paymentId, _callback);

    }

    /**
     * Payment Details
     * Returns associated information details for the specified payment id.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param paymentId  (required)
     * @return PaymentDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public PaymentDetailsResponse paymentDetails(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String transactionId, String paymentId) throws ApiException {
        ApiResponse<PaymentDetailsResponse> localVarResp = paymentDetailsWithHttpInfo(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, transactionId, paymentId);
        return localVarResp.getData();
    }

    /**
     * Payment Details
     * Returns associated information details for the specified payment id.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param paymentId  (required)
     * @return ApiResponse&lt;PaymentDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<PaymentDetailsResponse> paymentDetailsWithHttpInfo(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String transactionId, String paymentId) throws ApiException {
        okhttp3.Call localVarCall = paymentDetailsValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, transactionId, paymentId, null);
        Type localVarReturnType = new TypeToken<PaymentDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Payment Details (asynchronously)
     * Returns associated information details for the specified payment id.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param paymentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call paymentDetailsAsync(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String transactionId, String paymentId, final ApiCallback<PaymentDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentDetailsValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, transactionId, paymentId, _callback);
        Type localVarReturnType = new TypeToken<PaymentDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionDetails
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transactionDetailsCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvt/transactions/{transactionId}"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionDetailsValidateBeforeCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String transactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling transactionDetails(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling transactionDetails(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling transactionDetails(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling transactionDetails(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling transactionDetails(Async)");
        }

        return transactionDetailsCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, transactionId, _callback);

    }

    /**
     * Transaction Details
     * Returns associated data for the specified transaction id, like value and status, for exemple.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @return TransactionDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public TransactionDetailsResponse transactionDetails(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String transactionId) throws ApiException {
        ApiResponse<TransactionDetailsResponse> localVarResp = transactionDetailsWithHttpInfo(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, transactionId);
        return localVarResp.getData();
    }

    /**
     * Transaction Details
     * Returns associated data for the specified transaction id, like value and status, for exemple.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @return ApiResponse&lt;TransactionDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<TransactionDetailsResponse> transactionDetailsWithHttpInfo(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String transactionId) throws ApiException {
        okhttp3.Call localVarCall = transactionDetailsValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, transactionId, null);
        Type localVarReturnType = new TypeToken<TransactionDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transaction Details (asynchronously)
     * Returns associated data for the specified transaction id, like value and status, for exemple.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transactionDetailsAsync(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String transactionId, final ApiCallback<TransactionDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionDetailsValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, transactionId, _callback);
        Type localVarReturnType = new TypeToken<TransactionDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionSettlementDetails
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * cache-control -  <br>  * connection -  <br>  * content-length -  <br>  * content-type -  <br>  * date -  <br>  * expires -  <br>  * pragma -  <br>  * server -  <br>  * x-aspnet-version -  <br>  * x-powered-by -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transactionSettlementDetailsCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pvt/transactions/{transactionId}/settlements"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPROVIDERAPIAppKey != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppKey", localVarApiClient.parameterToString(xPROVIDERAPIAppKey));
        }

        if (xPROVIDERAPIAppToken != null) {
            localVarHeaderParams.put("X-PROVIDER-API-AppToken", localVarApiClient.parameterToString(xPROVIDERAPIAppToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionSettlementDetailsValidateBeforeCall(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String transactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xPROVIDERAPIAppKey' is set
        if (xPROVIDERAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppKey' when calling transactionSettlementDetails(Async)");
        }

        // verify the required parameter 'xPROVIDERAPIAppToken' is set
        if (xPROVIDERAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xPROVIDERAPIAppToken' when calling transactionSettlementDetails(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling transactionSettlementDetails(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling transactionSettlementDetails(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling transactionSettlementDetails(Async)");
        }

        return transactionSettlementDetailsCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, transactionId, _callback);

    }

    /**
     * Transaction Settlement  Details
     * Returns associated settlements data for the specified transaction id.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @return TransactionSettlementDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * cache-control -  <br>  * connection -  <br>  * content-length -  <br>  * content-type -  <br>  * date -  <br>  * expires -  <br>  * pragma -  <br>  * server -  <br>  * x-aspnet-version -  <br>  * x-powered-by -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public TransactionSettlementDetails transactionSettlementDetails(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String transactionId) throws ApiException {
        ApiResponse<TransactionSettlementDetails> localVarResp = transactionSettlementDetailsWithHttpInfo(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, transactionId);
        return localVarResp.getData();
    }

    /**
     * Transaction Settlement  Details
     * Returns associated settlements data for the specified transaction id.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @return ApiResponse&lt;TransactionSettlementDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * cache-control -  <br>  * connection -  <br>  * content-length -  <br>  * content-type -  <br>  * date -  <br>  * expires -  <br>  * pragma -  <br>  * server -  <br>  * x-aspnet-version -  <br>  * x-powered-by -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<TransactionSettlementDetails> transactionSettlementDetailsWithHttpInfo(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String transactionId) throws ApiException {
        okhttp3.Call localVarCall = transactionSettlementDetailsValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, transactionId, null);
        Type localVarReturnType = new TypeToken<TransactionSettlementDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transaction Settlement  Details (asynchronously)
     * Returns associated settlements data for the specified transaction id.
     * @param xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration) (required)
     * @param xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration) (required)
     * @param contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param transactionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * cache-control -  <br>  * connection -  <br>  * content-length -  <br>  * content-type -  <br>  * date -  <br>  * expires -  <br>  * pragma -  <br>  * server -  <br>  * x-aspnet-version -  <br>  * x-powered-by -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transactionSettlementDetailsAsync(String xPROVIDERAPIAppKey, String xPROVIDERAPIAppToken, String contentType, String accept, String transactionId, final ApiCallback<TransactionSettlementDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionSettlementDetailsValidateBeforeCall(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, transactionId, _callback);
        Type localVarReturnType = new TypeToken<TransactionSettlementDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
