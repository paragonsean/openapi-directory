/*
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.InsertAffiliationRequest;
import org.openapitools.client.model.InsertRuleRequest;
import org.openapitools.client.model.PaymentSystemsResponse;
import org.openapitools.client.model.RuleByIdRequest;
import org.openapitools.client.model.UpdateAffiliationRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConfigurationApi
 */
@Disabled
public class ConfigurationApiTest {

    private final ConfigurationApi api = new ConfigurationApi();

    /**
     * Affiliation By Id
     *
     * Returns associated data for the specified affiliation Id, like name and implementation, for example.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void affiliationByIdTest() throws ApiException {
        String affiliationId = null;
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String contentType = null;
        String accept = null;
        api.affiliationById(affiliationId, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept);
        // TODO: test validations
    }

    /**
     * Affiliations
     *
     * Returns all affiliations that your provider can handle.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void affiliationsTest() throws ApiException {
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String contentType = null;
        String accept = null;
        api.affiliations(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept);
        // TODO: test validations
    }

    /**
     * Available Payment Methods
     *
     * Returns enabled payment methods, like visa, master, bankissueinvoice that are shown for the final user and enabled to receive payment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void availablePaymentMethodsTest() throws ApiException {
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String contentType = null;
        String accept = null;
        List<PaymentSystemsResponse> response = api.availablePaymentMethods(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept);
        // TODO: test validations
    }

    /**
     * Insert Affiliation
     *
     * Creates a new affiliation and returns a successful response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void insertAffiliationTest() throws ApiException {
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String contentType = null;
        String accept = null;
        InsertAffiliationRequest insertAffiliationRequest = null;
        api.insertAffiliation(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, insertAffiliationRequest);
        // TODO: test validations
    }

    /**
     * Insert Rule
     *
     * Creates a new rule and returns a successful response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void insertRuleTest() throws ApiException {
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String accept = null;
        String contentType = null;
        InsertRuleRequest insertRuleRequest = null;
        api.insertRule(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, insertRuleRequest);
        // TODO: test validations
    }

    /**
     * Rule By Id
     *
     * Update Rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putRuleByIdTest() throws ApiException {
        String accept = null;
        String contentType = null;
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String ruleId = null;
        RuleByIdRequest ruleByIdRequest = null;
        api.putRuleById(accept, contentType, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, ruleId, ruleByIdRequest);
        // TODO: test validations
    }

    /**
     * Delete Rule
     *
     * Deletes rules by specified Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleTest() throws ApiException {
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String contentType = null;
        String accept = null;
        String ruleId = null;
        api.rule(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, ruleId);
        // TODO: test validations
    }

    /**
     * Rule By Id
     *
     * Returns rule by specified RuleId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ruleByIdTest() throws ApiException {
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String contentType = null;
        String accept = null;
        String ruleId = null;
        api.ruleById(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, ruleId);
        // TODO: test validations
    }

    /**
     * Rules
     *
     * Returns all rules conditions your provider can handle.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rulesTest() throws ApiException {
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String contentType = null;
        String accept = null;
        api.rules(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept);
        // TODO: test validations
    }

    /**
     * Update Affiliation
     *
     * Returns all affiliations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAffiliationTest() throws ApiException {
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String accept = null;
        String contentType = null;
        String affiliationId = null;
        UpdateAffiliationRequest updateAffiliationRequest = null;
        api.updateAffiliation(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, affiliationId, updateAffiliationRequest);
        // TODO: test validations
    }

}
