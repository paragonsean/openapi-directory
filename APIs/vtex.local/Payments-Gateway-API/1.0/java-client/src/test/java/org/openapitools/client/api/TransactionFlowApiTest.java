/*
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CancelthetransactionRequest;
import org.openapitools.client.model.RefundthetransactionRequest;
import org.openapitools.client.model.SettleResponse;
import org.openapitools.client.model.SettlethetransactionRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionFlowApi
 */
@Disabled
public class TransactionFlowApiTest {

    private final TransactionFlowApi api = new TransactionFlowApi();

    /**
     * Cancel the transaction
     *
     * Cancel&#39;s transaction that was previously approved, but not settled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelthetransactionTest() throws ApiException {
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String accept = null;
        String contentType = null;
        String transactionId = null;
        CancelthetransactionRequest cancelthetransactionRequest = null;
        api.cancelthetransaction(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, cancelthetransactionRequest);
        // TODO: test validations
    }

    /**
     * Refund the transaction
     *
     * Refunds transaction&#39;s value that was previously settled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refundthetransactionTest() throws ApiException {
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String accept = null;
        String contentType = null;
        String transactionId = null;
        RefundthetransactionRequest refundthetransactionRequest = null;
        api.refundthetransaction(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, refundthetransactionRequest);
        // TODO: test validations
    }

    /**
     * Settle the transaction
     *
     * Settles transaction&#39;s value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void settlethetransactionTest() throws ApiException {
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String accept = null;
        String contentType = null;
        String transactionId = null;
        SettlethetransactionRequest settlethetransactionRequest = null;
        SettleResponse response = api.settlethetransaction(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, settlethetransactionRequest);
        // TODO: test validations
    }

}
