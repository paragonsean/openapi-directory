/*
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Model1CreateanewtransactionRequest;
import org.openapitools.client.model.Model2SendPaymentsPublicRequest;
import org.openapitools.client.model.Model2SendPaymentsWithSavedCreditCardRequest;
import org.openapitools.client.model.Model4DoauthorizationRequest;
import org.openapitools.client.model.PaymentDetailsResponse;
import org.openapitools.client.model.StartTransactionResponse;
import org.openapitools.client.model.TransactionDetailsResponse;
import org.openapitools.client.model.TransactionSettlementDetails;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionProcessApi
 */
@Disabled
public class TransactionProcessApiTest {

    private final TransactionProcessApi api = new TransactionProcessApi();

    /**
     * 1. Starts a new transaction
     *
     * This request is the first step to create a new transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void call1createanewtransactionTest() throws ApiException {
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String accept = null;
        String contentType = null;
        Model1CreateanewtransactionRequest model1CreateanewtransactionRequest = null;
        StartTransactionResponse response = api.call1createanewtransaction(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, model1CreateanewtransactionRequest);
        // TODO: test validations
    }

    /**
     * 2.1 Send Payments Information Public
     *
     * The second step to create a new transaction. Here, you have the option to send the data in three diferent ways: doing a private request, a public request or a private request that uses a saved Credit Card. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void call2sendPaymentsPublicTest() throws ApiException {
        String orderId = null;
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String accept = null;
        String contentType = null;
        String transactionId = null;
        List<Model2SendPaymentsPublicRequest> model2SendPaymentsPublicRequest = null;
        api.call2sendPaymentsPublic(orderId, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, model2SendPaymentsPublicRequest);
        // TODO: test validations
    }

    /**
     * 2.2 Send Payments With Saved Credit Card
     *
     * The second step to create a new transaction. Here, you have the option to send the data in three diferent ways: doing a private request, a public request or a private request that uses a saved Credit Card.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void call2sendPaymentsWithSavedCreditCardTest() throws ApiException {
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String accept = null;
        String contentType = null;
        String transactionId = null;
        List<Model2SendPaymentsWithSavedCreditCardRequest> model2SendPaymentsWithSavedCreditCardRequest = null;
        api.call2sendPaymentsWithSavedCreditCard(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, model2SendPaymentsWithSavedCreditCardRequest);
        // TODO: test validations
    }

    /**
     * 3. Send Additional Data
     *
     * The third step to create a new transaction. It will send the additional related data to the transaction, like billig and shipping adress.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void call3sendAdditionalDataTest() throws ApiException {
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String accept = null;
        String contentType = null;
        String transactionId = null;
        List<List<Object>> requestBody = null;
        api.call3sendAdditionalData(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, requestBody);
        // TODO: test validations
    }

    /**
     * Do authorization
     *
     * The fouth and last step to create a new transaction. It will authorized the new transction creation acorrdint to the data previously informed in the latests requests.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void call4doauthorizationTest() throws ApiException {
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String accept = null;
        String contentType = null;
        String transactionId = null;
        Model4DoauthorizationRequest model4DoauthorizationRequest = null;
        api.call4doauthorization(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, model4DoauthorizationRequest);
        // TODO: test validations
    }

    /**
     * Payment Details
     *
     * Returns associated information details for the specified payment id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentDetailsTest() throws ApiException {
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String contentType = null;
        String accept = null;
        String transactionId = null;
        String paymentId = null;
        PaymentDetailsResponse response = api.paymentDetails(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, transactionId, paymentId);
        // TODO: test validations
    }

    /**
     * Transaction Details
     *
     * Returns associated data for the specified transaction id, like value and status, for exemple.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionDetailsTest() throws ApiException {
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String contentType = null;
        String accept = null;
        String transactionId = null;
        TransactionDetailsResponse response = api.transactionDetails(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, transactionId);
        // TODO: test validations
    }

    /**
     * Transaction Settlement  Details
     *
     * Returns associated settlements data for the specified transaction id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionSettlementDetailsTest() throws ApiException {
        String xPROVIDERAPIAppKey = null;
        String xPROVIDERAPIAppToken = null;
        String contentType = null;
        String accept = null;
        String transactionId = null;
        TransactionSettlementDetails response = api.transactionSettlementDetails(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, transactionId);
        // TODO: test validations
    }

}
