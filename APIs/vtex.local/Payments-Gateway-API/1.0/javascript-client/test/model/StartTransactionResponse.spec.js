/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PaymentsGatewayApi);
  }
}(this, function(expect, PaymentsGatewayApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PaymentsGatewayApi.StartTransactionResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StartTransactionResponse', function() {
    it('should create an instance of StartTransactionResponse', function() {
      // uncomment below and update the code to test StartTransactionResponse
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be.a(PaymentsGatewayApi.StartTransactionResponse);
    });

    it('should have the property acceptHeader (base name: "acceptHeader")', function() {
      // uncomment below and update the code to test the property acceptHeader
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property antifraudAffiliationId (base name: "antifraudAffiliationId")', function() {
      // uncomment below and update the code to test the property antifraudAffiliationId
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property antifraudTid (base name: "antifraudTid")', function() {
      // uncomment below and update the code to test the property antifraudTid
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property authorizationDate (base name: "authorizationDate")', function() {
      // uncomment below and update the code to test the property authorizationDate
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property authorizationToken (base name: "authorizationToken")', function() {
      // uncomment below and update the code to test the property authorizationToken
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property buyer (base name: "buyer")', function() {
      // uncomment below and update the code to test the property buyer
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property cancelationDate (base name: "cancelationDate")', function() {
      // uncomment below and update the code to test the property cancelationDate
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property cancelationToken (base name: "cancelationToken")', function() {
      // uncomment below and update the code to test the property cancelationToken
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property cancellations (base name: "cancellations")', function() {
      // uncomment below and update the code to test the property cancellations
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property channel (base name: "channel")', function() {
      // uncomment below and update the code to test the property channel
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property commitmentDate (base name: "commitmentDate")', function() {
      // uncomment below and update the code to test the property commitmentDate
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property commitmentToken (base name: "commitmentToken")', function() {
      // uncomment below and update the code to test the property commitmentToken
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property fields (base name: "fields")', function() {
      // uncomment below and update the code to test the property fields
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property interactions (base name: "interactions")', function() {
      // uncomment below and update the code to test the property interactions
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property ipAddress (base name: "ipAddress")', function() {
      // uncomment below and update the code to test the property ipAddress
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property markedForRecurrence (base name: "markedForRecurrence")', function() {
      // uncomment below and update the code to test the property markedForRecurrence
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property payments (base name: "payments")', function() {
      // uncomment below and update the code to test the property payments
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property receiverUri (base name: "receiverUri")', function() {
      // uncomment below and update the code to test the property receiverUri
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property referenceKey (base name: "referenceKey")', function() {
      // uncomment below and update the code to test the property referenceKey
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property refundingDate (base name: "refundingDate")', function() {
      // uncomment below and update the code to test the property refundingDate
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property refundingToken (base name: "refundingToken")', function() {
      // uncomment below and update the code to test the property refundingToken
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property refunds (base name: "refunds")', function() {
      // uncomment below and update the code to test the property refunds
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property salesChannel (base name: "salesChannel")', function() {
      // uncomment below and update the code to test the property salesChannel
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property settlements (base name: "settlements")', function() {
      // uncomment below and update the code to test the property settlements
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property softDescriptor (base name: "softDescriptor")', function() {
      // uncomment below and update the code to test the property softDescriptor
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "startDate")', function() {
      // uncomment below and update the code to test the property startDate
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property timeoutStatus (base name: "timeoutStatus")', function() {
      // uncomment below and update the code to test the property timeoutStatus
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property totalRefunds (base name: "totalRefunds")', function() {
      // uncomment below and update the code to test the property totalRefunds
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property transactionId (base name: "transactionId")', function() {
      // uncomment below and update the code to test the property transactionId
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property urn (base name: "urn")', function() {
      // uncomment below and update the code to test the property urn
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property userAgent (base name: "userAgent")', function() {
      // uncomment below and update the code to test the property userAgent
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

    it('should have the property value (base name: "value")', function() {
      // uncomment below and update the code to test the property value
      //var instance = new PaymentsGatewayApi.StartTransactionResponse();
      //expect(instance).to.be();
    });

  });

}));
