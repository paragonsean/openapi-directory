/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PaymentsGatewayApi);
  }
}(this, function(expect, PaymentsGatewayApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PaymentsGatewayApi.Validator();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Validator', function() {
    it('should create an instance of Validator', function() {
      // uncomment below and update the code to test Validator
      //var instance = new PaymentsGatewayApi.Validator();
      //expect(instance).to.be.a(PaymentsGatewayApi.Validator);
    });

    it('should have the property cardCodeMask (base name: "cardCodeMask")', function() {
      // uncomment below and update the code to test the property cardCodeMask
      //var instance = new PaymentsGatewayApi.Validator();
      //expect(instance).to.be();
    });

    it('should have the property cardCodeRegex (base name: "cardCodeRegex")', function() {
      // uncomment below and update the code to test the property cardCodeRegex
      //var instance = new PaymentsGatewayApi.Validator();
      //expect(instance).to.be();
    });

    it('should have the property mask (base name: "mask")', function() {
      // uncomment below and update the code to test the property mask
      //var instance = new PaymentsGatewayApi.Validator();
      //expect(instance).to.be();
    });

    it('should have the property regex (base name: "regex")', function() {
      // uncomment below and update the code to test the property regex
      //var instance = new PaymentsGatewayApi.Validator();
      //expect(instance).to.be();
    });

    it('should have the property useBillingAddress (base name: "useBillingAddress")', function() {
      // uncomment below and update the code to test the property useBillingAddress
      //var instance = new PaymentsGatewayApi.Validator();
      //expect(instance).to.be();
    });

    it('should have the property useCardHolderName (base name: "useCardHolderName")', function() {
      // uncomment below and update the code to test the property useCardHolderName
      //var instance = new PaymentsGatewayApi.Validator();
      //expect(instance).to.be();
    });

    it('should have the property useCvv (base name: "useCvv")', function() {
      // uncomment below and update the code to test the property useCvv
      //var instance = new PaymentsGatewayApi.Validator();
      //expect(instance).to.be();
    });

    it('should have the property useExpirationDate (base name: "useExpirationDate")', function() {
      // uncomment below and update the code to test the property useExpirationDate
      //var instance = new PaymentsGatewayApi.Validator();
      //expect(instance).to.be();
    });

    it('should have the property validCardLengths (base name: "validCardLengths")', function() {
      // uncomment below and update the code to test the property validCardLengths
      //var instance = new PaymentsGatewayApi.Validator();
      //expect(instance).to.be();
    });

    it('should have the property weights (base name: "weights")', function() {
      // uncomment below and update the code to test the property weights
      //var instance = new PaymentsGatewayApi.Validator();
      //expect(instance).to.be();
    });

  });

}));
