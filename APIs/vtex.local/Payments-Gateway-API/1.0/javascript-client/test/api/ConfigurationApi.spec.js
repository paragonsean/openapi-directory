/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PaymentsGatewayApi);
  }
}(this, function(expect, PaymentsGatewayApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PaymentsGatewayApi.ConfigurationApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ConfigurationApi', function() {
    describe('affiliationById', function() {
      it('should call affiliationById successfully', function(done) {
        //uncomment below and update the code to test affiliationById
        //instance.affiliationById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('affiliations', function() {
      it('should call affiliations successfully', function(done) {
        //uncomment below and update the code to test affiliations
        //instance.affiliations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('availablePaymentMethods', function() {
      it('should call availablePaymentMethods successfully', function(done) {
        //uncomment below and update the code to test availablePaymentMethods
        //instance.availablePaymentMethods(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('insertAffiliation', function() {
      it('should call insertAffiliation successfully', function(done) {
        //uncomment below and update the code to test insertAffiliation
        //instance.insertAffiliation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('insertRule', function() {
      it('should call insertRule successfully', function(done) {
        //uncomment below and update the code to test insertRule
        //instance.insertRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putRuleById', function() {
      it('should call putRuleById successfully', function(done) {
        //uncomment below and update the code to test putRuleById
        //instance.putRuleById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rule', function() {
      it('should call rule successfully', function(done) {
        //uncomment below and update the code to test rule
        //instance.rule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleById', function() {
      it('should call ruleById successfully', function(done) {
        //uncomment below and update the code to test ruleById
        //instance.ruleById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rules', function() {
      it('should call rules successfully', function(done) {
        //uncomment below and update the code to test rules
        //instance.rules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAffiliation', function() {
      it('should call updateAffiliation successfully', function(done) {
        //uncomment below and update the code to test updateAffiliation
        //instance.updateAffiliation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
