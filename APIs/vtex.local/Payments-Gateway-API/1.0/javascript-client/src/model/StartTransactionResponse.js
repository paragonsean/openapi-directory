/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Cancellations from './Cancellations';
import Field from './Field';
import Interactions from './Interactions';
import Payments from './Payments';
import Refunds from './Refunds';
import Settlements from './Settlements';

/**
 * The StartTransactionResponse model module.
 * @module model/StartTransactionResponse
 * @version 1.0
 */
class StartTransactionResponse {
    /**
     * Constructs a new <code>StartTransactionResponse</code>.
     * @alias module:model/StartTransactionResponse
     * @param acceptHeader {String} 
     * @param antifraudAffiliationId {String} 
     * @param antifraudTid {String} 
     * @param authorizationDate {String} 
     * @param authorizationToken {String} 
     * @param buyer {String} 
     * @param cancelationDate {String} 
     * @param cancelationToken {String} 
     * @param cancellations {module:model/Cancellations} 
     * @param channel {String} 
     * @param commitmentDate {String} 
     * @param commitmentToken {String} 
     * @param fields {Array.<module:model/Field>} 
     * @param id {String} 
     * @param interactions {module:model/Interactions} 
     * @param ipAddress {String} 
     * @param markedForRecurrence {Boolean} 
     * @param owner {String} 
     * @param payments {module:model/Payments} 
     * @param receiverUri {String} 
     * @param referenceKey {String} 
     * @param refundingDate {String} 
     * @param refundingToken {String} 
     * @param refunds {module:model/Refunds} 
     * @param salesChannel {String} 
     * @param settlements {module:model/Settlements} 
     * @param softDescriptor {String} 
     * @param startDate {String} 
     * @param status {String} 
     * @param timeoutStatus {Number} 
     * @param totalRefunds {Number} 
     * @param transactionId {String} 
     * @param urn {String} 
     * @param userAgent {String} 
     * @param value {Number} 
     */
    constructor(acceptHeader, antifraudAffiliationId, antifraudTid, authorizationDate, authorizationToken, buyer, cancelationDate, cancelationToken, cancellations, channel, commitmentDate, commitmentToken, fields, id, interactions, ipAddress, markedForRecurrence, owner, payments, receiverUri, referenceKey, refundingDate, refundingToken, refunds, salesChannel, settlements, softDescriptor, startDate, status, timeoutStatus, totalRefunds, transactionId, urn, userAgent, value) { 
        
        StartTransactionResponse.initialize(this, acceptHeader, antifraudAffiliationId, antifraudTid, authorizationDate, authorizationToken, buyer, cancelationDate, cancelationToken, cancellations, channel, commitmentDate, commitmentToken, fields, id, interactions, ipAddress, markedForRecurrence, owner, payments, receiverUri, referenceKey, refundingDate, refundingToken, refunds, salesChannel, settlements, softDescriptor, startDate, status, timeoutStatus, totalRefunds, transactionId, urn, userAgent, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, acceptHeader, antifraudAffiliationId, antifraudTid, authorizationDate, authorizationToken, buyer, cancelationDate, cancelationToken, cancellations, channel, commitmentDate, commitmentToken, fields, id, interactions, ipAddress, markedForRecurrence, owner, payments, receiverUri, referenceKey, refundingDate, refundingToken, refunds, salesChannel, settlements, softDescriptor, startDate, status, timeoutStatus, totalRefunds, transactionId, urn, userAgent, value) { 
        obj['acceptHeader'] = acceptHeader;
        obj['antifraudAffiliationId'] = antifraudAffiliationId;
        obj['antifraudTid'] = antifraudTid;
        obj['authorizationDate'] = authorizationDate;
        obj['authorizationToken'] = authorizationToken;
        obj['buyer'] = buyer;
        obj['cancelationDate'] = cancelationDate;
        obj['cancelationToken'] = cancelationToken;
        obj['cancellations'] = cancellations;
        obj['channel'] = channel;
        obj['commitmentDate'] = commitmentDate;
        obj['commitmentToken'] = commitmentToken;
        obj['fields'] = fields;
        obj['id'] = id;
        obj['interactions'] = interactions;
        obj['ipAddress'] = ipAddress;
        obj['markedForRecurrence'] = markedForRecurrence;
        obj['owner'] = owner;
        obj['payments'] = payments;
        obj['receiverUri'] = receiverUri;
        obj['referenceKey'] = referenceKey;
        obj['refundingDate'] = refundingDate;
        obj['refundingToken'] = refundingToken;
        obj['refunds'] = refunds;
        obj['salesChannel'] = salesChannel;
        obj['settlements'] = settlements;
        obj['softDescriptor'] = softDescriptor;
        obj['startDate'] = startDate;
        obj['status'] = status;
        obj['timeoutStatus'] = timeoutStatus;
        obj['totalRefunds'] = totalRefunds;
        obj['transactionId'] = transactionId;
        obj['urn'] = urn;
        obj['userAgent'] = userAgent;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>StartTransactionResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartTransactionResponse} obj Optional instance to populate.
     * @return {module:model/StartTransactionResponse} The populated <code>StartTransactionResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartTransactionResponse();

            if (data.hasOwnProperty('acceptHeader')) {
                obj['acceptHeader'] = ApiClient.convertToType(data['acceptHeader'], 'String');
            }
            if (data.hasOwnProperty('antifraudAffiliationId')) {
                obj['antifraudAffiliationId'] = ApiClient.convertToType(data['antifraudAffiliationId'], 'String');
            }
            if (data.hasOwnProperty('antifraudTid')) {
                obj['antifraudTid'] = ApiClient.convertToType(data['antifraudTid'], 'String');
            }
            if (data.hasOwnProperty('authorizationDate')) {
                obj['authorizationDate'] = ApiClient.convertToType(data['authorizationDate'], 'String');
            }
            if (data.hasOwnProperty('authorizationToken')) {
                obj['authorizationToken'] = ApiClient.convertToType(data['authorizationToken'], 'String');
            }
            if (data.hasOwnProperty('buyer')) {
                obj['buyer'] = ApiClient.convertToType(data['buyer'], 'String');
            }
            if (data.hasOwnProperty('cancelationDate')) {
                obj['cancelationDate'] = ApiClient.convertToType(data['cancelationDate'], 'String');
            }
            if (data.hasOwnProperty('cancelationToken')) {
                obj['cancelationToken'] = ApiClient.convertToType(data['cancelationToken'], 'String');
            }
            if (data.hasOwnProperty('cancellations')) {
                obj['cancellations'] = Cancellations.constructFromObject(data['cancellations']);
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('commitmentDate')) {
                obj['commitmentDate'] = ApiClient.convertToType(data['commitmentDate'], 'String');
            }
            if (data.hasOwnProperty('commitmentToken')) {
                obj['commitmentToken'] = ApiClient.convertToType(data['commitmentToken'], 'String');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [Field]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('interactions')) {
                obj['interactions'] = Interactions.constructFromObject(data['interactions']);
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('markedForRecurrence')) {
                obj['markedForRecurrence'] = ApiClient.convertToType(data['markedForRecurrence'], 'Boolean');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('payments')) {
                obj['payments'] = Payments.constructFromObject(data['payments']);
            }
            if (data.hasOwnProperty('receiverUri')) {
                obj['receiverUri'] = ApiClient.convertToType(data['receiverUri'], 'String');
            }
            if (data.hasOwnProperty('referenceKey')) {
                obj['referenceKey'] = ApiClient.convertToType(data['referenceKey'], 'String');
            }
            if (data.hasOwnProperty('refundingDate')) {
                obj['refundingDate'] = ApiClient.convertToType(data['refundingDate'], 'String');
            }
            if (data.hasOwnProperty('refundingToken')) {
                obj['refundingToken'] = ApiClient.convertToType(data['refundingToken'], 'String');
            }
            if (data.hasOwnProperty('refunds')) {
                obj['refunds'] = Refunds.constructFromObject(data['refunds']);
            }
            if (data.hasOwnProperty('salesChannel')) {
                obj['salesChannel'] = ApiClient.convertToType(data['salesChannel'], 'String');
            }
            if (data.hasOwnProperty('settlements')) {
                obj['settlements'] = Settlements.constructFromObject(data['settlements']);
            }
            if (data.hasOwnProperty('softDescriptor')) {
                obj['softDescriptor'] = ApiClient.convertToType(data['softDescriptor'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('timeoutStatus')) {
                obj['timeoutStatus'] = ApiClient.convertToType(data['timeoutStatus'], 'Number');
            }
            if (data.hasOwnProperty('totalRefunds')) {
                obj['totalRefunds'] = ApiClient.convertToType(data['totalRefunds'], 'Number');
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
            if (data.hasOwnProperty('urn')) {
                obj['urn'] = ApiClient.convertToType(data['urn'], 'String');
            }
            if (data.hasOwnProperty('userAgent')) {
                obj['userAgent'] = ApiClient.convertToType(data['userAgent'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartTransactionResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartTransactionResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StartTransactionResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['acceptHeader'] && !(typeof data['acceptHeader'] === 'string' || data['acceptHeader'] instanceof String)) {
            throw new Error("Expected the field `acceptHeader` to be a primitive type in the JSON string but got " + data['acceptHeader']);
        }
        // ensure the json data is a string
        if (data['antifraudAffiliationId'] && !(typeof data['antifraudAffiliationId'] === 'string' || data['antifraudAffiliationId'] instanceof String)) {
            throw new Error("Expected the field `antifraudAffiliationId` to be a primitive type in the JSON string but got " + data['antifraudAffiliationId']);
        }
        // ensure the json data is a string
        if (data['antifraudTid'] && !(typeof data['antifraudTid'] === 'string' || data['antifraudTid'] instanceof String)) {
            throw new Error("Expected the field `antifraudTid` to be a primitive type in the JSON string but got " + data['antifraudTid']);
        }
        // ensure the json data is a string
        if (data['authorizationDate'] && !(typeof data['authorizationDate'] === 'string' || data['authorizationDate'] instanceof String)) {
            throw new Error("Expected the field `authorizationDate` to be a primitive type in the JSON string but got " + data['authorizationDate']);
        }
        // ensure the json data is a string
        if (data['authorizationToken'] && !(typeof data['authorizationToken'] === 'string' || data['authorizationToken'] instanceof String)) {
            throw new Error("Expected the field `authorizationToken` to be a primitive type in the JSON string but got " + data['authorizationToken']);
        }
        // ensure the json data is a string
        if (data['buyer'] && !(typeof data['buyer'] === 'string' || data['buyer'] instanceof String)) {
            throw new Error("Expected the field `buyer` to be a primitive type in the JSON string but got " + data['buyer']);
        }
        // ensure the json data is a string
        if (data['cancelationDate'] && !(typeof data['cancelationDate'] === 'string' || data['cancelationDate'] instanceof String)) {
            throw new Error("Expected the field `cancelationDate` to be a primitive type in the JSON string but got " + data['cancelationDate']);
        }
        // ensure the json data is a string
        if (data['cancelationToken'] && !(typeof data['cancelationToken'] === 'string' || data['cancelationToken'] instanceof String)) {
            throw new Error("Expected the field `cancelationToken` to be a primitive type in the JSON string but got " + data['cancelationToken']);
        }
        // validate the optional field `cancellations`
        if (data['cancellations']) { // data not null
          Cancellations.validateJSON(data['cancellations']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // ensure the json data is a string
        if (data['commitmentDate'] && !(typeof data['commitmentDate'] === 'string' || data['commitmentDate'] instanceof String)) {
            throw new Error("Expected the field `commitmentDate` to be a primitive type in the JSON string but got " + data['commitmentDate']);
        }
        // ensure the json data is a string
        if (data['commitmentToken'] && !(typeof data['commitmentToken'] === 'string' || data['commitmentToken'] instanceof String)) {
            throw new Error("Expected the field `commitmentToken` to be a primitive type in the JSON string but got " + data['commitmentToken']);
        }
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                Field.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `interactions`
        if (data['interactions']) { // data not null
          Interactions.validateJSON(data['interactions']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // validate the optional field `payments`
        if (data['payments']) { // data not null
          Payments.validateJSON(data['payments']);
        }
        // ensure the json data is a string
        if (data['receiverUri'] && !(typeof data['receiverUri'] === 'string' || data['receiverUri'] instanceof String)) {
            throw new Error("Expected the field `receiverUri` to be a primitive type in the JSON string but got " + data['receiverUri']);
        }
        // ensure the json data is a string
        if (data['referenceKey'] && !(typeof data['referenceKey'] === 'string' || data['referenceKey'] instanceof String)) {
            throw new Error("Expected the field `referenceKey` to be a primitive type in the JSON string but got " + data['referenceKey']);
        }
        // ensure the json data is a string
        if (data['refundingDate'] && !(typeof data['refundingDate'] === 'string' || data['refundingDate'] instanceof String)) {
            throw new Error("Expected the field `refundingDate` to be a primitive type in the JSON string but got " + data['refundingDate']);
        }
        // ensure the json data is a string
        if (data['refundingToken'] && !(typeof data['refundingToken'] === 'string' || data['refundingToken'] instanceof String)) {
            throw new Error("Expected the field `refundingToken` to be a primitive type in the JSON string but got " + data['refundingToken']);
        }
        // validate the optional field `refunds`
        if (data['refunds']) { // data not null
          Refunds.validateJSON(data['refunds']);
        }
        // ensure the json data is a string
        if (data['salesChannel'] && !(typeof data['salesChannel'] === 'string' || data['salesChannel'] instanceof String)) {
            throw new Error("Expected the field `salesChannel` to be a primitive type in the JSON string but got " + data['salesChannel']);
        }
        // validate the optional field `settlements`
        if (data['settlements']) { // data not null
          Settlements.validateJSON(data['settlements']);
        }
        // ensure the json data is a string
        if (data['softDescriptor'] && !(typeof data['softDescriptor'] === 'string' || data['softDescriptor'] instanceof String)) {
            throw new Error("Expected the field `softDescriptor` to be a primitive type in the JSON string but got " + data['softDescriptor']);
        }
        // ensure the json data is a string
        if (data['startDate'] && !(typeof data['startDate'] === 'string' || data['startDate'] instanceof String)) {
            throw new Error("Expected the field `startDate` to be a primitive type in the JSON string but got " + data['startDate']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['transactionId'] && !(typeof data['transactionId'] === 'string' || data['transactionId'] instanceof String)) {
            throw new Error("Expected the field `transactionId` to be a primitive type in the JSON string but got " + data['transactionId']);
        }
        // ensure the json data is a string
        if (data['urn'] && !(typeof data['urn'] === 'string' || data['urn'] instanceof String)) {
            throw new Error("Expected the field `urn` to be a primitive type in the JSON string but got " + data['urn']);
        }
        // ensure the json data is a string
        if (data['userAgent'] && !(typeof data['userAgent'] === 'string' || data['userAgent'] instanceof String)) {
            throw new Error("Expected the field `userAgent` to be a primitive type in the JSON string but got " + data['userAgent']);
        }

        return true;
    }


}

StartTransactionResponse.RequiredProperties = ["acceptHeader", "antifraudAffiliationId", "antifraudTid", "authorizationDate", "authorizationToken", "buyer", "cancelationDate", "cancelationToken", "cancellations", "channel", "commitmentDate", "commitmentToken", "fields", "id", "interactions", "ipAddress", "markedForRecurrence", "owner", "payments", "receiverUri", "referenceKey", "refundingDate", "refundingToken", "refunds", "salesChannel", "settlements", "softDescriptor", "startDate", "status", "timeoutStatus", "totalRefunds", "transactionId", "urn", "userAgent", "value"];

/**
 * @member {String} acceptHeader
 */
StartTransactionResponse.prototype['acceptHeader'] = undefined;

/**
 * @member {String} antifraudAffiliationId
 */
StartTransactionResponse.prototype['antifraudAffiliationId'] = undefined;

/**
 * @member {String} antifraudTid
 */
StartTransactionResponse.prototype['antifraudTid'] = undefined;

/**
 * @member {String} authorizationDate
 */
StartTransactionResponse.prototype['authorizationDate'] = undefined;

/**
 * @member {String} authorizationToken
 */
StartTransactionResponse.prototype['authorizationToken'] = undefined;

/**
 * @member {String} buyer
 */
StartTransactionResponse.prototype['buyer'] = undefined;

/**
 * @member {String} cancelationDate
 */
StartTransactionResponse.prototype['cancelationDate'] = undefined;

/**
 * @member {String} cancelationToken
 */
StartTransactionResponse.prototype['cancelationToken'] = undefined;

/**
 * @member {module:model/Cancellations} cancellations
 */
StartTransactionResponse.prototype['cancellations'] = undefined;

/**
 * @member {String} channel
 */
StartTransactionResponse.prototype['channel'] = undefined;

/**
 * @member {String} commitmentDate
 */
StartTransactionResponse.prototype['commitmentDate'] = undefined;

/**
 * @member {String} commitmentToken
 */
StartTransactionResponse.prototype['commitmentToken'] = undefined;

/**
 * 
 * @member {Array.<module:model/Field>} fields
 */
StartTransactionResponse.prototype['fields'] = undefined;

/**
 * @member {String} id
 */
StartTransactionResponse.prototype['id'] = undefined;

/**
 * @member {module:model/Interactions} interactions
 */
StartTransactionResponse.prototype['interactions'] = undefined;

/**
 * @member {String} ipAddress
 */
StartTransactionResponse.prototype['ipAddress'] = undefined;

/**
 * @member {Boolean} markedForRecurrence
 */
StartTransactionResponse.prototype['markedForRecurrence'] = undefined;

/**
 * @member {String} owner
 */
StartTransactionResponse.prototype['owner'] = undefined;

/**
 * @member {module:model/Payments} payments
 */
StartTransactionResponse.prototype['payments'] = undefined;

/**
 * @member {String} receiverUri
 */
StartTransactionResponse.prototype['receiverUri'] = undefined;

/**
 * @member {String} referenceKey
 */
StartTransactionResponse.prototype['referenceKey'] = undefined;

/**
 * @member {String} refundingDate
 */
StartTransactionResponse.prototype['refundingDate'] = undefined;

/**
 * @member {String} refundingToken
 */
StartTransactionResponse.prototype['refundingToken'] = undefined;

/**
 * @member {module:model/Refunds} refunds
 */
StartTransactionResponse.prototype['refunds'] = undefined;

/**
 * @member {String} salesChannel
 */
StartTransactionResponse.prototype['salesChannel'] = undefined;

/**
 * @member {module:model/Settlements} settlements
 */
StartTransactionResponse.prototype['settlements'] = undefined;

/**
 * @member {String} softDescriptor
 */
StartTransactionResponse.prototype['softDescriptor'] = undefined;

/**
 * @member {String} startDate
 */
StartTransactionResponse.prototype['startDate'] = undefined;

/**
 * @member {String} status
 */
StartTransactionResponse.prototype['status'] = undefined;

/**
 * @member {Number} timeoutStatus
 */
StartTransactionResponse.prototype['timeoutStatus'] = undefined;

/**
 * @member {Number} totalRefunds
 */
StartTransactionResponse.prototype['totalRefunds'] = undefined;

/**
 * @member {String} transactionId
 */
StartTransactionResponse.prototype['transactionId'] = undefined;

/**
 * @member {String} urn
 */
StartTransactionResponse.prototype['urn'] = undefined;

/**
 * @member {String} userAgent
 */
StartTransactionResponse.prototype['userAgent'] = undefined;

/**
 * @member {Number} value
 */
StartTransactionResponse.prototype['value'] = undefined;






export default StartTransactionResponse;

