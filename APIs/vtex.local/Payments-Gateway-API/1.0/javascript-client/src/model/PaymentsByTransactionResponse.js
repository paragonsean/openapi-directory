/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Fields1 from './Fields1';
import Self from './Self';

/**
 * The PaymentsByTransactionResponse model module.
 * @module model/PaymentsByTransactionResponse
 * @version 1.0
 */
class PaymentsByTransactionResponse {
    /**
     * Constructs a new <code>PaymentsByTransactionResponse</code>.
     * @alias module:model/PaymentsByTransactionResponse
     * @param connectorResponses {String} 
     * @param showConnectorResponses {Boolean} 
     * @param allowInstallments {Boolean} 
     * @param allowIssuer {Boolean} 
     * @param allowNotification {Boolean} 
     * @param connector {String} 
     * @param connectorResponse {String} 
     * @param currencyCode {String} 
     * @param description {String} 
     * @param fields {Array.<module:model/Fields1>} 
     * @param group {String} 
     * @param id {String} 
     * @param installments {Number} 
     * @param installmentsInterestRate {Number} 
     * @param installmentsValue {Number} 
     * @param isAvailable {Boolean} 
     * @param isCustom {Boolean} 
     * @param merchantName {String} 
     * @param paymentSystem {Number} 
     * @param paymentSystemName {String} 
     * @param provider {String} 
     * @param referenceValue {Number} 
     * @param returnCode {String} 
     * @param returnMessage {String} 
     * @param self {module:model/Self} 
     * @param sheets {String} 
     * @param status {String} 
     * @param tid {String} 
     * @param value {Number} 
     */
    constructor(connectorResponses, showConnectorResponses, allowInstallments, allowIssuer, allowNotification, connector, connectorResponse, currencyCode, description, fields, group, id, installments, installmentsInterestRate, installmentsValue, isAvailable, isCustom, merchantName, paymentSystem, paymentSystemName, provider, referenceValue, returnCode, returnMessage, self, sheets, status, tid, value) { 
        
        PaymentsByTransactionResponse.initialize(this, connectorResponses, showConnectorResponses, allowInstallments, allowIssuer, allowNotification, connector, connectorResponse, currencyCode, description, fields, group, id, installments, installmentsInterestRate, installmentsValue, isAvailable, isCustom, merchantName, paymentSystem, paymentSystemName, provider, referenceValue, returnCode, returnMessage, self, sheets, status, tid, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, connectorResponses, showConnectorResponses, allowInstallments, allowIssuer, allowNotification, connector, connectorResponse, currencyCode, description, fields, group, id, installments, installmentsInterestRate, installmentsValue, isAvailable, isCustom, merchantName, paymentSystem, paymentSystemName, provider, referenceValue, returnCode, returnMessage, self, sheets, status, tid, value) { 
        obj['ConnectorResponses'] = connectorResponses;
        obj['ShowConnectorResponses'] = showConnectorResponses;
        obj['allowInstallments'] = allowInstallments;
        obj['allowIssuer'] = allowIssuer;
        obj['allowNotification'] = allowNotification;
        obj['connector'] = connector;
        obj['connectorResponse'] = connectorResponse;
        obj['currencyCode'] = currencyCode;
        obj['description'] = description;
        obj['fields'] = fields;
        obj['group'] = group;
        obj['id'] = id;
        obj['installments'] = installments;
        obj['installmentsInterestRate'] = installmentsInterestRate;
        obj['installmentsValue'] = installmentsValue;
        obj['isAvailable'] = isAvailable;
        obj['isCustom'] = isCustom;
        obj['merchantName'] = merchantName;
        obj['paymentSystem'] = paymentSystem;
        obj['paymentSystemName'] = paymentSystemName;
        obj['provider'] = provider;
        obj['referenceValue'] = referenceValue;
        obj['returnCode'] = returnCode;
        obj['returnMessage'] = returnMessage;
        obj['self'] = self;
        obj['sheets'] = sheets;
        obj['status'] = status;
        obj['tid'] = tid;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>PaymentsByTransactionResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentsByTransactionResponse} obj Optional instance to populate.
     * @return {module:model/PaymentsByTransactionResponse} The populated <code>PaymentsByTransactionResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentsByTransactionResponse();

            if (data.hasOwnProperty('ConnectorResponses')) {
                obj['ConnectorResponses'] = ApiClient.convertToType(data['ConnectorResponses'], 'String');
            }
            if (data.hasOwnProperty('ShowConnectorResponses')) {
                obj['ShowConnectorResponses'] = ApiClient.convertToType(data['ShowConnectorResponses'], 'Boolean');
            }
            if (data.hasOwnProperty('allowInstallments')) {
                obj['allowInstallments'] = ApiClient.convertToType(data['allowInstallments'], 'Boolean');
            }
            if (data.hasOwnProperty('allowIssuer')) {
                obj['allowIssuer'] = ApiClient.convertToType(data['allowIssuer'], 'Boolean');
            }
            if (data.hasOwnProperty('allowNotification')) {
                obj['allowNotification'] = ApiClient.convertToType(data['allowNotification'], 'Boolean');
            }
            if (data.hasOwnProperty('connector')) {
                obj['connector'] = ApiClient.convertToType(data['connector'], 'String');
            }
            if (data.hasOwnProperty('connectorResponse')) {
                obj['connectorResponse'] = ApiClient.convertToType(data['connectorResponse'], 'String');
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [Fields1]);
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('installments')) {
                obj['installments'] = ApiClient.convertToType(data['installments'], 'Number');
            }
            if (data.hasOwnProperty('installmentsInterestRate')) {
                obj['installmentsInterestRate'] = ApiClient.convertToType(data['installmentsInterestRate'], 'Number');
            }
            if (data.hasOwnProperty('installmentsValue')) {
                obj['installmentsValue'] = ApiClient.convertToType(data['installmentsValue'], 'Number');
            }
            if (data.hasOwnProperty('isAvailable')) {
                obj['isAvailable'] = ApiClient.convertToType(data['isAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('isCustom')) {
                obj['isCustom'] = ApiClient.convertToType(data['isCustom'], 'Boolean');
            }
            if (data.hasOwnProperty('merchantName')) {
                obj['merchantName'] = ApiClient.convertToType(data['merchantName'], 'String');
            }
            if (data.hasOwnProperty('paymentSystem')) {
                obj['paymentSystem'] = ApiClient.convertToType(data['paymentSystem'], 'Number');
            }
            if (data.hasOwnProperty('paymentSystemName')) {
                obj['paymentSystemName'] = ApiClient.convertToType(data['paymentSystemName'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('referenceValue')) {
                obj['referenceValue'] = ApiClient.convertToType(data['referenceValue'], 'Number');
            }
            if (data.hasOwnProperty('returnCode')) {
                obj['returnCode'] = ApiClient.convertToType(data['returnCode'], 'String');
            }
            if (data.hasOwnProperty('returnMessage')) {
                obj['returnMessage'] = ApiClient.convertToType(data['returnMessage'], 'String');
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = Self.constructFromObject(data['self']);
            }
            if (data.hasOwnProperty('sheets')) {
                obj['sheets'] = ApiClient.convertToType(data['sheets'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tid')) {
                obj['tid'] = ApiClient.convertToType(data['tid'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentsByTransactionResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentsByTransactionResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentsByTransactionResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ConnectorResponses'] && !(typeof data['ConnectorResponses'] === 'string' || data['ConnectorResponses'] instanceof String)) {
            throw new Error("Expected the field `ConnectorResponses` to be a primitive type in the JSON string but got " + data['ConnectorResponses']);
        }
        // ensure the json data is a string
        if (data['connector'] && !(typeof data['connector'] === 'string' || data['connector'] instanceof String)) {
            throw new Error("Expected the field `connector` to be a primitive type in the JSON string but got " + data['connector']);
        }
        // ensure the json data is a string
        if (data['connectorResponse'] && !(typeof data['connectorResponse'] === 'string' || data['connectorResponse'] instanceof String)) {
            throw new Error("Expected the field `connectorResponse` to be a primitive type in the JSON string but got " + data['connectorResponse']);
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                Fields1.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['group'] && !(typeof data['group'] === 'string' || data['group'] instanceof String)) {
            throw new Error("Expected the field `group` to be a primitive type in the JSON string but got " + data['group']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['merchantName'] && !(typeof data['merchantName'] === 'string' || data['merchantName'] instanceof String)) {
            throw new Error("Expected the field `merchantName` to be a primitive type in the JSON string but got " + data['merchantName']);
        }
        // ensure the json data is a string
        if (data['paymentSystemName'] && !(typeof data['paymentSystemName'] === 'string' || data['paymentSystemName'] instanceof String)) {
            throw new Error("Expected the field `paymentSystemName` to be a primitive type in the JSON string but got " + data['paymentSystemName']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        // ensure the json data is a string
        if (data['returnCode'] && !(typeof data['returnCode'] === 'string' || data['returnCode'] instanceof String)) {
            throw new Error("Expected the field `returnCode` to be a primitive type in the JSON string but got " + data['returnCode']);
        }
        // ensure the json data is a string
        if (data['returnMessage'] && !(typeof data['returnMessage'] === 'string' || data['returnMessage'] instanceof String)) {
            throw new Error("Expected the field `returnMessage` to be a primitive type in the JSON string but got " + data['returnMessage']);
        }
        // validate the optional field `self`
        if (data['self']) { // data not null
          Self.validateJSON(data['self']);
        }
        // ensure the json data is a string
        if (data['sheets'] && !(typeof data['sheets'] === 'string' || data['sheets'] instanceof String)) {
            throw new Error("Expected the field `sheets` to be a primitive type in the JSON string but got " + data['sheets']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['tid'] && !(typeof data['tid'] === 'string' || data['tid'] instanceof String)) {
            throw new Error("Expected the field `tid` to be a primitive type in the JSON string but got " + data['tid']);
        }

        return true;
    }


}

PaymentsByTransactionResponse.RequiredProperties = ["ConnectorResponses", "ShowConnectorResponses", "allowInstallments", "allowIssuer", "allowNotification", "connector", "connectorResponse", "currencyCode", "description", "fields", "group", "id", "installments", "installmentsInterestRate", "installmentsValue", "isAvailable", "isCustom", "merchantName", "paymentSystem", "paymentSystemName", "provider", "referenceValue", "returnCode", "returnMessage", "self", "sheets", "status", "tid", "value"];

/**
 * @member {String} ConnectorResponses
 */
PaymentsByTransactionResponse.prototype['ConnectorResponses'] = undefined;

/**
 * @member {Boolean} ShowConnectorResponses
 */
PaymentsByTransactionResponse.prototype['ShowConnectorResponses'] = undefined;

/**
 * @member {Boolean} allowInstallments
 */
PaymentsByTransactionResponse.prototype['allowInstallments'] = undefined;

/**
 * @member {Boolean} allowIssuer
 */
PaymentsByTransactionResponse.prototype['allowIssuer'] = undefined;

/**
 * @member {Boolean} allowNotification
 */
PaymentsByTransactionResponse.prototype['allowNotification'] = undefined;

/**
 * @member {String} connector
 */
PaymentsByTransactionResponse.prototype['connector'] = undefined;

/**
 * @member {String} connectorResponse
 */
PaymentsByTransactionResponse.prototype['connectorResponse'] = undefined;

/**
 * @member {String} currencyCode
 */
PaymentsByTransactionResponse.prototype['currencyCode'] = undefined;

/**
 * @member {String} description
 */
PaymentsByTransactionResponse.prototype['description'] = undefined;

/**
 * 
 * @member {Array.<module:model/Fields1>} fields
 */
PaymentsByTransactionResponse.prototype['fields'] = undefined;

/**
 * @member {String} group
 */
PaymentsByTransactionResponse.prototype['group'] = undefined;

/**
 * @member {String} id
 */
PaymentsByTransactionResponse.prototype['id'] = undefined;

/**
 * @member {Number} installments
 */
PaymentsByTransactionResponse.prototype['installments'] = undefined;

/**
 * @member {Number} installmentsInterestRate
 */
PaymentsByTransactionResponse.prototype['installmentsInterestRate'] = undefined;

/**
 * @member {Number} installmentsValue
 */
PaymentsByTransactionResponse.prototype['installmentsValue'] = undefined;

/**
 * @member {Boolean} isAvailable
 */
PaymentsByTransactionResponse.prototype['isAvailable'] = undefined;

/**
 * @member {Boolean} isCustom
 */
PaymentsByTransactionResponse.prototype['isCustom'] = undefined;

/**
 * @member {String} merchantName
 */
PaymentsByTransactionResponse.prototype['merchantName'] = undefined;

/**
 * @member {Number} paymentSystem
 */
PaymentsByTransactionResponse.prototype['paymentSystem'] = undefined;

/**
 * @member {String} paymentSystemName
 */
PaymentsByTransactionResponse.prototype['paymentSystemName'] = undefined;

/**
 * @member {String} provider
 */
PaymentsByTransactionResponse.prototype['provider'] = undefined;

/**
 * @member {Number} referenceValue
 */
PaymentsByTransactionResponse.prototype['referenceValue'] = undefined;

/**
 * @member {String} returnCode
 */
PaymentsByTransactionResponse.prototype['returnCode'] = undefined;

/**
 * @member {String} returnMessage
 */
PaymentsByTransactionResponse.prototype['returnMessage'] = undefined;

/**
 * @member {module:model/Self} self
 */
PaymentsByTransactionResponse.prototype['self'] = undefined;

/**
 * @member {String} sheets
 */
PaymentsByTransactionResponse.prototype['sheets'] = undefined;

/**
 * @member {String} status
 */
PaymentsByTransactionResponse.prototype['status'] = undefined;

/**
 * @member {String} tid
 */
PaymentsByTransactionResponse.prototype['tid'] = undefined;

/**
 * @member {Number} value
 */
PaymentsByTransactionResponse.prototype['value'] = undefined;






export default PaymentsByTransactionResponse;

