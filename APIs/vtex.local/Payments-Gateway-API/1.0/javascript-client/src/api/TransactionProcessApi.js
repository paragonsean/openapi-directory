/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Model1CreateanewtransactionRequest from '../model/Model1CreateanewtransactionRequest';
import Model2SendPaymentsPublicRequest from '../model/Model2SendPaymentsPublicRequest';
import Model2SendPaymentsWithSavedCreditCardRequest from '../model/Model2SendPaymentsWithSavedCreditCardRequest';
import Model4DoauthorizationRequest from '../model/Model4DoauthorizationRequest';
import PaymentDetailsResponse from '../model/PaymentDetailsResponse';
import StartTransactionResponse from '../model/StartTransactionResponse';
import TransactionDetailsResponse from '../model/TransactionDetailsResponse';
import TransactionSettlementDetails from '../model/TransactionSettlementDetails';

/**
* TransactionProcess service.
* @module api/TransactionProcessApi
* @version 1.0
*/
export default class TransactionProcessApi {

    /**
    * Constructs a new TransactionProcessApi. 
    * @alias module:api/TransactionProcessApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the call1createanewtransaction operation.
     * @callback module:api/TransactionProcessApi~call1createanewtransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 1. Starts a new transaction
     * This request is the first step to create a new transaction.
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {module:model/Model1CreateanewtransactionRequest} model1CreateanewtransactionRequest 
     * @param {module:api/TransactionProcessApi~call1createanewtransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartTransactionResponse}
     */
    call1createanewtransaction(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, model1CreateanewtransactionRequest, callback) {
      let postBody = model1CreateanewtransactionRequest;
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling call1createanewtransaction");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling call1createanewtransaction");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling call1createanewtransaction");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling call1createanewtransaction");
      }
      // verify the required parameter 'model1CreateanewtransactionRequest' is set
      if (model1CreateanewtransactionRequest === undefined || model1CreateanewtransactionRequest === null) {
        throw new Error("Missing the required parameter 'model1CreateanewtransactionRequest' when calling call1createanewtransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = StartTransactionResponse;
      return this.apiClient.callApi(
        '/api/pvt/transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call2sendPaymentsPublic operation.
     * @callback module:api/TransactionProcessApi~call2sendPaymentsPublicCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2.1 Send Payments Information Public
     * The second step to create a new transaction. Here, you have the option to send the data in three diferent ways: doing a private request, a public request or a private request that uses a saved Credit Card. 
     * @param {String} orderId 
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {String} transactionId 
     * @param {Array.<module:model/Model2SendPaymentsPublicRequest>} model2SendPaymentsPublicRequest 
     * @param {module:api/TransactionProcessApi~call2sendPaymentsPublicCallback} callback The callback function, accepting three arguments: error, data, response
     */
    call2sendPaymentsPublic(orderId, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, model2SendPaymentsPublicRequest, callback) {
      let postBody = model2SendPaymentsPublicRequest;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling call2sendPaymentsPublic");
      }
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling call2sendPaymentsPublic");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling call2sendPaymentsPublic");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling call2sendPaymentsPublic");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling call2sendPaymentsPublic");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling call2sendPaymentsPublic");
      }
      // verify the required parameter 'model2SendPaymentsPublicRequest' is set
      if (model2SendPaymentsPublicRequest === undefined || model2SendPaymentsPublicRequest === null) {
        throw new Error("Missing the required parameter 'model2SendPaymentsPublicRequest' when calling call2sendPaymentsPublic");
      }

      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
        'orderId': orderId
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pub/transactions/{transactionId}/payments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call2sendPaymentsWithSavedCreditCard operation.
     * @callback module:api/TransactionProcessApi~call2sendPaymentsWithSavedCreditCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 2.2 Send Payments With Saved Credit Card
     * The second step to create a new transaction. Here, you have the option to send the data in three diferent ways: doing a private request, a public request or a private request that uses a saved Credit Card.
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {String} transactionId 
     * @param {Array.<module:model/Model2SendPaymentsWithSavedCreditCardRequest>} model2SendPaymentsWithSavedCreditCardRequest 
     * @param {module:api/TransactionProcessApi~call2sendPaymentsWithSavedCreditCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    call2sendPaymentsWithSavedCreditCard(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, model2SendPaymentsWithSavedCreditCardRequest, callback) {
      let postBody = model2SendPaymentsWithSavedCreditCardRequest;
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling call2sendPaymentsWithSavedCreditCard");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling call2sendPaymentsWithSavedCreditCard");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling call2sendPaymentsWithSavedCreditCard");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling call2sendPaymentsWithSavedCreditCard");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling call2sendPaymentsWithSavedCreditCard");
      }
      // verify the required parameter 'model2SendPaymentsWithSavedCreditCardRequest' is set
      if (model2SendPaymentsWithSavedCreditCardRequest === undefined || model2SendPaymentsWithSavedCreditCardRequest === null) {
        throw new Error("Missing the required parameter 'model2SendPaymentsWithSavedCreditCardRequest' when calling call2sendPaymentsWithSavedCreditCard");
      }

      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvt/transactions/{transactionId}/payments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call3sendAdditionalData operation.
     * @callback module:api/TransactionProcessApi~call3sendAdditionalDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 3. Send Additional Data
     * The third step to create a new transaction. It will send the additional related data to the transaction, like billig and shipping adress.
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {String} transactionId Transaction identification.
     * @param {Array} requestBody 
     * @param {module:api/TransactionProcessApi~call3sendAdditionalDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    call3sendAdditionalData(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling call3sendAdditionalData");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling call3sendAdditionalData");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling call3sendAdditionalData");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling call3sendAdditionalData");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling call3sendAdditionalData");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling call3sendAdditionalData");
      }

      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvt/transactions/{transactionId}/additional-data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4doauthorization operation.
     * @callback module:api/TransactionProcessApi~call4doauthorizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Do authorization
     * The fouth and last step to create a new transaction. It will authorized the new transction creation acorrdint to the data previously informed in the latests requests.
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {String} transactionId 
     * @param {module:model/Model4DoauthorizationRequest} model4DoauthorizationRequest 
     * @param {module:api/TransactionProcessApi~call4doauthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    call4doauthorization(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, model4DoauthorizationRequest, callback) {
      let postBody = model4DoauthorizationRequest;
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling call4doauthorization");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling call4doauthorization");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling call4doauthorization");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling call4doauthorization");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling call4doauthorization");
      }
      // verify the required parameter 'model4DoauthorizationRequest' is set
      if (model4DoauthorizationRequest === undefined || model4DoauthorizationRequest === null) {
        throw new Error("Missing the required parameter 'model4DoauthorizationRequest' when calling call4doauthorization");
      }

      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvt/transactions/{transactionId}/authorization-request', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentDetails operation.
     * @callback module:api/TransactionProcessApi~paymentDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Payment Details
     * Returns associated information details for the specified payment id.
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} transactionId 
     * @param {String} paymentId 
     * @param {module:api/TransactionProcessApi~paymentDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentDetailsResponse}
     */
    paymentDetails(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, transactionId, paymentId, callback) {
      let postBody = null;
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling paymentDetails");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling paymentDetails");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling paymentDetails");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling paymentDetails");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling paymentDetails");
      }
      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling paymentDetails");
      }

      let pathParams = {
        'transactionId': transactionId,
        'paymentId': paymentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = PaymentDetailsResponse;
      return this.apiClient.callApi(
        '/api/pvt/transactions/{transactionId}/payments/{paymentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionDetails operation.
     * @callback module:api/TransactionProcessApi~transactionDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transaction Details
     * Returns associated data for the specified transaction id, like value and status, for exemple.
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} transactionId 
     * @param {module:api/TransactionProcessApi~transactionDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionDetailsResponse}
     */
    transactionDetails(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, transactionId, callback) {
      let postBody = null;
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling transactionDetails");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling transactionDetails");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling transactionDetails");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling transactionDetails");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling transactionDetails");
      }

      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = TransactionDetailsResponse;
      return this.apiClient.callApi(
        '/api/pvt/transactions/{transactionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionSettlementDetails operation.
     * @callback module:api/TransactionProcessApi~transactionSettlementDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionSettlementDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transaction Settlement  Details
     * Returns associated settlements data for the specified transaction id.
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} transactionId 
     * @param {module:api/TransactionProcessApi~transactionSettlementDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionSettlementDetails}
     */
    transactionSettlementDetails(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, transactionId, callback) {
      let postBody = null;
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling transactionSettlementDetails");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling transactionSettlementDetails");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling transactionSettlementDetails");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling transactionSettlementDetails");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling transactionSettlementDetails");
      }

      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionSettlementDetails;
      return this.apiClient.callApi(
        '/api/pvt/transactions/{transactionId}/settlements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
