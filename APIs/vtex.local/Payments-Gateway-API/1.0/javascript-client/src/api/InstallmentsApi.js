/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InvalidRequestValue from '../model/InvalidRequestValue';
import ValidRequest from '../model/ValidRequest';

/**
* Installments service.
* @module api/InstallmentsApi
* @version 1.0
*/
export default class InstallmentsApi {

    /**
    * Constructs a new InstallmentsApi. 
    * @alias module:api/InstallmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the installmentsoptions operation.
     * @callback module:api/InstallmentsApi~installmentsoptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Installments options
     * Returns the best installment options according to the informed params.
     * @param {Number} requestValue 
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {Object} opts Optional parameters
     * @param {Number} [requestSalesChannel] 
     * @param {Number} [requestPaymentDetails0Id] 
     * @param {Number} [requestPaymentDetails0Value] 
     * @param {Number} [requestPaymentDetails0Bin] 
     * @param {module:api/InstallmentsApi~installmentsoptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidRequest}
     */
    installmentsoptions(requestValue, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'requestValue' is set
      if (requestValue === undefined || requestValue === null) {
        throw new Error("Missing the required parameter 'requestValue' when calling installmentsoptions");
      }
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling installmentsoptions");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling installmentsoptions");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling installmentsoptions");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling installmentsoptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'request.value': requestValue,
        'request.salesChannel': opts['requestSalesChannel'],
        'request.paymentDetails[0].id': opts['requestPaymentDetails0Id'],
        'request.paymentDetails[0].value': opts['requestPaymentDetails0Value'],
        'request.paymentDetails[0].bin': opts['requestPaymentDetails0Bin']
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8', 'application/json'];
      let returnType = ValidRequest;
      return this.apiClient.callApi(
        '/api/pvt/installments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
