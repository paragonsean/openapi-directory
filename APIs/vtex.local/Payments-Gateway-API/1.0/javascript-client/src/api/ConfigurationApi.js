/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InsertAffiliationRequest from '../model/InsertAffiliationRequest';
import InsertRuleRequest from '../model/InsertRuleRequest';
import PaymentSystemsResponse from '../model/PaymentSystemsResponse';
import RuleByIdRequest from '../model/RuleByIdRequest';
import UpdateAffiliationRequest from '../model/UpdateAffiliationRequest';

/**
* Configuration service.
* @module api/ConfigurationApi
* @version 1.0
*/
export default class ConfigurationApi {

    /**
    * Constructs a new ConfigurationApi. 
    * @alias module:api/ConfigurationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the affiliationById operation.
     * @callback module:api/ConfigurationApi~affiliationByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Affiliation By Id
     * Returns associated data for the specified affiliation Id, like name and implementation, for example.
     * @param {String} affiliationId 
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {module:api/ConfigurationApi~affiliationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    affiliationById(affiliationId, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'affiliationId' is set
      if (affiliationId === undefined || affiliationId === null) {
        throw new Error("Missing the required parameter 'affiliationId' when calling affiliationById");
      }
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling affiliationById");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling affiliationById");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling affiliationById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling affiliationById");
      }

      let pathParams = {
        'affiliationId': affiliationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvt/affiliations/{affiliationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the affiliations operation.
     * @callback module:api/ConfigurationApi~affiliationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Affiliations
     * Returns all affiliations that your provider can handle.
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {module:api/ConfigurationApi~affiliationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    affiliations(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling affiliations");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling affiliations");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling affiliations");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling affiliations");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvt/affiliations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the availablePaymentMethods operation.
     * @callback module:api/ConfigurationApi~availablePaymentMethodsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PaymentSystemsResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Available Payment Methods
     * Returns enabled payment methods, like visa, master, bankissueinvoice that are shown for the final user and enabled to receive payment.
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {module:api/ConfigurationApi~availablePaymentMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PaymentSystemsResponse>}
     */
    availablePaymentMethods(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling availablePaymentMethods");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling availablePaymentMethods");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling availablePaymentMethods");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling availablePaymentMethods");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [PaymentSystemsResponse];
      return this.apiClient.callApi(
        '/api/pvt/merchants/payment-systems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertAffiliation operation.
     * @callback module:api/ConfigurationApi~insertAffiliationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert Affiliation
     * Creates a new affiliation and returns a successful response.
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {module:model/InsertAffiliationRequest} insertAffiliationRequest 
     * @param {module:api/ConfigurationApi~insertAffiliationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    insertAffiliation(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, insertAffiliationRequest, callback) {
      let postBody = insertAffiliationRequest;
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling insertAffiliation");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling insertAffiliation");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling insertAffiliation");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling insertAffiliation");
      }
      // verify the required parameter 'insertAffiliationRequest' is set
      if (insertAffiliationRequest === undefined || insertAffiliationRequest === null) {
        throw new Error("Missing the required parameter 'insertAffiliationRequest' when calling insertAffiliation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvt/affiliations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertRule operation.
     * @callback module:api/ConfigurationApi~insertRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert Rule
     * Creates a new rule and returns a successful response.
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {module:model/InsertRuleRequest} insertRuleRequest 
     * @param {module:api/ConfigurationApi~insertRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    insertRule(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, insertRuleRequest, callback) {
      let postBody = insertRuleRequest;
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling insertRule");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling insertRule");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling insertRule");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling insertRule");
      }
      // verify the required parameter 'insertRuleRequest' is set
      if (insertRuleRequest === undefined || insertRuleRequest === null) {
        throw new Error("Missing the required parameter 'insertRuleRequest' when calling insertRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvt/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRuleById operation.
     * @callback module:api/ConfigurationApi~putRuleByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rule By Id
     * Update Rule.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} ruleId 
     * @param {module:model/RuleByIdRequest} ruleByIdRequest 
     * @param {module:api/ConfigurationApi~putRuleByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putRuleById(accept, contentType, xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, ruleId, ruleByIdRequest, callback) {
      let postBody = ruleByIdRequest;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling putRuleById");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling putRuleById");
      }
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling putRuleById");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling putRuleById");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling putRuleById");
      }
      // verify the required parameter 'ruleByIdRequest' is set
      if (ruleByIdRequest === undefined || ruleByIdRequest === null) {
        throw new Error("Missing the required parameter 'ruleByIdRequest' when calling putRuleById");
      }

      let pathParams = {
        'ruleId': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType,
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvt/rules/{ruleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rule operation.
     * @callback module:api/ConfigurationApi~ruleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Rule
     * Deletes rules by specified Id.
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} ruleId 
     * @param {module:api/ConfigurationApi~ruleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rule(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, ruleId, callback) {
      let postBody = null;
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling rule");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling rule");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling rule");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling rule");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling rule");
      }

      let pathParams = {
        'ruleId': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvt/rules/{ruleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ruleById operation.
     * @callback module:api/ConfigurationApi~ruleByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rule By Id
     * Returns rule by specified RuleId.
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} ruleId 
     * @param {module:api/ConfigurationApi~ruleByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ruleById(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, ruleId, callback) {
      let postBody = null;
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling ruleById");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling ruleById");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling ruleById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling ruleById");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling ruleById");
      }

      let pathParams = {
        'ruleId': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvt/rules/{ruleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rules operation.
     * @callback module:api/ConfigurationApi~rulesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rules
     * Returns all rules conditions your provider can handle.
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {module:api/ConfigurationApi~rulesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rules(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling rules");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling rules");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling rules");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling rules");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvt/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAffiliation operation.
     * @callback module:api/ConfigurationApi~updateAffiliationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Affiliation
     * Returns all affiliations.
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {String} affiliationId 
     * @param {module:model/UpdateAffiliationRequest} updateAffiliationRequest 
     * @param {module:api/ConfigurationApi~updateAffiliationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateAffiliation(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, affiliationId, updateAffiliationRequest, callback) {
      let postBody = updateAffiliationRequest;
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling updateAffiliation");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling updateAffiliation");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling updateAffiliation");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updateAffiliation");
      }
      // verify the required parameter 'affiliationId' is set
      if (affiliationId === undefined || affiliationId === null) {
        throw new Error("Missing the required parameter 'affiliationId' when calling updateAffiliation");
      }
      // verify the required parameter 'updateAffiliationRequest' is set
      if (updateAffiliationRequest === undefined || updateAffiliationRequest === null) {
        throw new Error("Missing the required parameter 'updateAffiliationRequest' when calling updateAffiliation");
      }

      let pathParams = {
        'affiliationId': affiliationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvt/affiliations/{affiliationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
