/**
 * Payments Gateway API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Payments Gateway API allows you to get payment data and process your store's transactions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancelthetransactionRequest from '../model/CancelthetransactionRequest';
import RefundthetransactionRequest from '../model/RefundthetransactionRequest';
import SettleResponse from '../model/SettleResponse';
import SettlethetransactionRequest from '../model/SettlethetransactionRequest';

/**
* TransactionFlow service.
* @module api/TransactionFlowApi
* @version 1.0
*/
export default class TransactionFlowApi {

    /**
    * Constructs a new TransactionFlowApi. 
    * @alias module:api/TransactionFlowApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelthetransaction operation.
     * @callback module:api/TransactionFlowApi~cancelthetransactionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel the transaction
     * Cancel's transaction that was previously approved, but not settled.
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {String} transactionId 
     * @param {module:model/CancelthetransactionRequest} cancelthetransactionRequest 
     * @param {module:api/TransactionFlowApi~cancelthetransactionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelthetransaction(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, cancelthetransactionRequest, callback) {
      let postBody = cancelthetransactionRequest;
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling cancelthetransaction");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling cancelthetransaction");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling cancelthetransaction");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling cancelthetransaction");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling cancelthetransaction");
      }
      // verify the required parameter 'cancelthetransactionRequest' is set
      if (cancelthetransactionRequest === undefined || cancelthetransactionRequest === null) {
        throw new Error("Missing the required parameter 'cancelthetransactionRequest' when calling cancelthetransaction");
      }

      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvt/transactions/{transactionId}/cancellation-request', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refundthetransaction operation.
     * @callback module:api/TransactionFlowApi~refundthetransactionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refund the transaction
     * Refunds transaction's value that was previously settled.
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {String} transactionId 
     * @param {module:model/RefundthetransactionRequest} refundthetransactionRequest 
     * @param {module:api/TransactionFlowApi~refundthetransactionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    refundthetransaction(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, refundthetransactionRequest, callback) {
      let postBody = refundthetransactionRequest;
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling refundthetransaction");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling refundthetransaction");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling refundthetransaction");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling refundthetransaction");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling refundthetransaction");
      }
      // verify the required parameter 'refundthetransactionRequest' is set
      if (refundthetransactionRequest === undefined || refundthetransactionRequest === null) {
        throw new Error("Missing the required parameter 'refundthetransactionRequest' when calling refundthetransaction");
      }

      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvt/transactions/{transactionId}/refunding-request', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settlethetransaction operation.
     * @callback module:api/TransactionFlowApi~settlethetransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SettleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Settle the transaction
     * Settles transaction's value.
     * @param {String} xPROVIDERAPIAppKey The AppKey configured by the merchant (optional configuration)
     * @param {String} xPROVIDERAPIAppToken The AppToken configured by the merchant (optional configuration)
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request.  Default value for payment provider protocol is application/json
     * @param {String} transactionId 
     * @param {module:model/SettlethetransactionRequest} settlethetransactionRequest 
     * @param {module:api/TransactionFlowApi~settlethetransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SettleResponse}
     */
    settlethetransaction(xPROVIDERAPIAppKey, xPROVIDERAPIAppToken, accept, contentType, transactionId, settlethetransactionRequest, callback) {
      let postBody = settlethetransactionRequest;
      // verify the required parameter 'xPROVIDERAPIAppKey' is set
      if (xPROVIDERAPIAppKey === undefined || xPROVIDERAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppKey' when calling settlethetransaction");
      }
      // verify the required parameter 'xPROVIDERAPIAppToken' is set
      if (xPROVIDERAPIAppToken === undefined || xPROVIDERAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xPROVIDERAPIAppToken' when calling settlethetransaction");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling settlethetransaction");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling settlethetransaction");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling settlethetransaction");
      }
      // verify the required parameter 'settlethetransactionRequest' is set
      if (settlethetransactionRequest === undefined || settlethetransactionRequest === null) {
        throw new Error("Missing the required parameter 'settlethetransactionRequest' when calling settlethetransaction");
      }

      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-PROVIDER-API-AppKey': xPROVIDERAPIAppKey,
        'X-PROVIDER-API-AppToken': xPROVIDERAPIAppToken,
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SettleResponse;
      return this.apiClient.callApi(
        '/api/pvt/transactions/{transactionId}/settlement-request', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
