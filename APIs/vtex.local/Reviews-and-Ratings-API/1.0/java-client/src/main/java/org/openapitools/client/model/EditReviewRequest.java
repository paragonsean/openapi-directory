/*
 * Reviews and Ratings API
 *   Reviews & Ratings is a [VTEX IO native solution](https://developers.vtex.com/vtex-developer-docs/docs/vtex-reviews-and-ratings) that allows shoppers to submit reviews and ratings for products, as well as see them while navigating the store.    ## Rating    - [Get Product Rating](https://developers.vtex.com/vtex-rest-api/reference/getproductrating)    ## Review    - [Get Review by Review ID](https://developers.vtex.com/vtex-rest-api/reference/getreviewbyreviewid)  - [Delete Review](https://developers.vtex.com/vtex-rest-api/reference/deletereview)  - [Update a Review](https://developers.vtex.com/vtex-rest-api/reference/editreview)  - [Get a list of Reviews](https://developers.vtex.com/vtex-rest-api/reference/getalistofreviews)  - [Create Multiple Reviews](https://developers.vtex.com/vtex-rest-api/reference/savemultiplereviews)  - [Delete Multiple Reviews](https://developers.vtex.com/vtex-rest-api/reference/deletemultiplereviews)  - [Create a Review](https://developers.vtex.com/vtex-rest-api/reference/savereview)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:12.505219-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EditReviewRequest {
  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private BigDecimal rating;

  public static final String SERIALIZED_NAME_REVIEWER_NAME = "reviewerName";
  @SerializedName(SERIALIZED_NAME_REVIEWER_NAME)
  private String reviewerName;

  public static final String SERIALIZED_NAME_SHOPPER_ID = "shopperId";
  @SerializedName(SERIALIZED_NAME_SHOPPER_ID)
  private String shopperId;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VERIFIED_PURCHASER = "verifiedPurchaser";
  @SerializedName(SERIALIZED_NAME_VERIFIED_PURCHASER)
  private Boolean verifiedPurchaser;

  public EditReviewRequest() {
  }

  public EditReviewRequest locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Review&#39;s locale.
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public EditReviewRequest productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Product ID.
   * @return productId
   */
  @javax.annotation.Nonnull
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public EditReviewRequest rating(BigDecimal rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Customer rating.
   * @return rating
   */
  @javax.annotation.Nonnull
  public BigDecimal getRating() {
    return rating;
  }

  public void setRating(BigDecimal rating) {
    this.rating = rating;
  }


  public EditReviewRequest reviewerName(String reviewerName) {
    this.reviewerName = reviewerName;
    return this;
  }

  /**
   * Reviewer name.
   * @return reviewerName
   */
  @javax.annotation.Nonnull
  public String getReviewerName() {
    return reviewerName;
  }

  public void setReviewerName(String reviewerName) {
    this.reviewerName = reviewerName;
  }


  public EditReviewRequest shopperId(String shopperId) {
    this.shopperId = shopperId;
    return this;
  }

  /**
   * Shopper email.
   * @return shopperId
   */
  @javax.annotation.Nullable
  public String getShopperId() {
    return shopperId;
  }

  public void setShopperId(String shopperId) {
    this.shopperId = shopperId;
  }


  public EditReviewRequest text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Review&#39;s text.
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public EditReviewRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Review&#39;s title.
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public EditReviewRequest verifiedPurchaser(Boolean verifiedPurchaser) {
    this.verifiedPurchaser = verifiedPurchaser;
    return this;
  }

  /**
   * If the reviewer is a verified purchaser (&#x60;true&#x60;) or not (&#x60;false&#x60;).
   * @return verifiedPurchaser
   */
  @javax.annotation.Nullable
  public Boolean getVerifiedPurchaser() {
    return verifiedPurchaser;
  }

  public void setVerifiedPurchaser(Boolean verifiedPurchaser) {
    this.verifiedPurchaser = verifiedPurchaser;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EditReviewRequest editReviewRequest = (EditReviewRequest) o;
    return Objects.equals(this.locale, editReviewRequest.locale) &&
        Objects.equals(this.productId, editReviewRequest.productId) &&
        Objects.equals(this.rating, editReviewRequest.rating) &&
        Objects.equals(this.reviewerName, editReviewRequest.reviewerName) &&
        Objects.equals(this.shopperId, editReviewRequest.shopperId) &&
        Objects.equals(this.text, editReviewRequest.text) &&
        Objects.equals(this.title, editReviewRequest.title) &&
        Objects.equals(this.verifiedPurchaser, editReviewRequest.verifiedPurchaser);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(locale, productId, rating, reviewerName, shopperId, text, title, verifiedPurchaser);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EditReviewRequest {\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    reviewerName: ").append(toIndentedString(reviewerName)).append("\n");
    sb.append("    shopperId: ").append(toIndentedString(shopperId)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    verifiedPurchaser: ").append(toIndentedString(verifiedPurchaser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("locale");
    openapiFields.add("productId");
    openapiFields.add("rating");
    openapiFields.add("reviewerName");
    openapiFields.add("shopperId");
    openapiFields.add("text");
    openapiFields.add("title");
    openapiFields.add("verifiedPurchaser");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("productId");
    openapiRequiredFields.add("rating");
    openapiRequiredFields.add("reviewerName");
    openapiRequiredFields.add("text");
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EditReviewRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EditReviewRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EditReviewRequest is not found in the empty JSON string", EditReviewRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EditReviewRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EditReviewRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EditReviewRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if (!jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if (!jsonObj.get("reviewerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewerName").toString()));
      }
      if ((jsonObj.get("shopperId") != null && !jsonObj.get("shopperId").isJsonNull()) && !jsonObj.get("shopperId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopperId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopperId").toString()));
      }
      if (!jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EditReviewRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EditReviewRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EditReviewRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EditReviewRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EditReviewRequest>() {
           @Override
           public void write(JsonWriter out, EditReviewRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EditReviewRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EditReviewRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EditReviewRequest
   * @throws IOException if the JSON string is invalid with respect to EditReviewRequest
   */
  public static EditReviewRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EditReviewRequest.class);
  }

  /**
   * Convert an instance of EditReviewRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

