/*
 * Reviews and Ratings API
 *   Reviews & Ratings is a [VTEX IO native solution](https://developers.vtex.com/vtex-developer-docs/docs/vtex-reviews-and-ratings) that allows shoppers to submit reviews and ratings for products, as well as see them while navigating the store.    ## Rating    - [Get Product Rating](https://developers.vtex.com/vtex-rest-api/reference/getproductrating)    ## Review    - [Get Review by Review ID](https://developers.vtex.com/vtex-rest-api/reference/getreviewbyreviewid)  - [Delete Review](https://developers.vtex.com/vtex-rest-api/reference/deletereview)  - [Update a Review](https://developers.vtex.com/vtex-rest-api/reference/editreview)  - [Get a list of Reviews](https://developers.vtex.com/vtex-rest-api/reference/getalistofreviews)  - [Create Multiple Reviews](https://developers.vtex.com/vtex-rest-api/reference/savemultiplereviews)  - [Delete Multiple Reviews](https://developers.vtex.com/vtex-rest-api/reference/deletemultiplereviews)  - [Create a Review](https://developers.vtex.com/vtex-rest-api/reference/savereview)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:12.505219-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SaveReview200Response {
  public static final String SERIALIZED_NAME_APPROVED = "approved";
  @SerializedName(SERIALIZED_NAME_APPROVED)
  private Boolean approved;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_PAST_REVIEWS = "pastReviews";
  @SerializedName(SERIALIZED_NAME_PAST_REVIEWS)
  private String pastReviews;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private BigDecimal rating;

  public static final String SERIALIZED_NAME_REVIEW_DATE_TIME = "reviewDateTime";
  @SerializedName(SERIALIZED_NAME_REVIEW_DATE_TIME)
  private String reviewDateTime;

  public static final String SERIALIZED_NAME_REVIEWER_NAME = "reviewerName";
  @SerializedName(SERIALIZED_NAME_REVIEWER_NAME)
  private String reviewerName;

  public static final String SERIALIZED_NAME_SEARCH_DATE = "searchDate";
  @SerializedName(SERIALIZED_NAME_SEARCH_DATE)
  private String searchDate;

  public static final String SERIALIZED_NAME_SHOPPER_ID = "shopperId";
  @SerializedName(SERIALIZED_NAME_SHOPPER_ID)
  private String shopperId;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VERIFIED_PURCHASER = "verifiedPurchaser";
  @SerializedName(SERIALIZED_NAME_VERIFIED_PURCHASER)
  private Boolean verifiedPurchaser;

  public SaveReview200Response() {
  }

  public SaveReview200Response approved(Boolean approved) {
    this.approved = approved;
    return this;
  }

  /**
   * If the review was approved (&#x60;true&#x60;) or not (&#x60;false&#x60;).
   * @return approved
   */
  @javax.annotation.Nullable
  public Boolean getApproved() {
    return approved;
  }

  public void setApproved(Boolean approved) {
    this.approved = approved;
  }


  public SaveReview200Response id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Review ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SaveReview200Response locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Review&#39;s locale.
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public SaveReview200Response location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Review&#39;s origin location.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public SaveReview200Response pastReviews(String pastReviews) {
    this.pastReviews = pastReviews;
    return this;
  }

  /**
   * Past reviews of the same product.
   * @return pastReviews
   */
  @javax.annotation.Nullable
  public String getPastReviews() {
    return pastReviews;
  }

  public void setPastReviews(String pastReviews) {
    this.pastReviews = pastReviews;
  }


  public SaveReview200Response productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Product ID.
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public SaveReview200Response rating(BigDecimal rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Customer rating.
   * @return rating
   */
  @javax.annotation.Nullable
  public BigDecimal getRating() {
    return rating;
  }

  public void setRating(BigDecimal rating) {
    this.rating = rating;
  }


  public SaveReview200Response reviewDateTime(String reviewDateTime) {
    this.reviewDateTime = reviewDateTime;
    return this;
  }

  /**
   * Review&#39;s date and time.
   * @return reviewDateTime
   */
  @javax.annotation.Nullable
  public String getReviewDateTime() {
    return reviewDateTime;
  }

  public void setReviewDateTime(String reviewDateTime) {
    this.reviewDateTime = reviewDateTime;
  }


  public SaveReview200Response reviewerName(String reviewerName) {
    this.reviewerName = reviewerName;
    return this;
  }

  /**
   * Reviewer name.
   * @return reviewerName
   */
  @javax.annotation.Nullable
  public String getReviewerName() {
    return reviewerName;
  }

  public void setReviewerName(String reviewerName) {
    this.reviewerName = reviewerName;
  }


  public SaveReview200Response searchDate(String searchDate) {
    this.searchDate = searchDate;
    return this;
  }

  /**
   * Review&#39;s search date.
   * @return searchDate
   */
  @javax.annotation.Nullable
  public String getSearchDate() {
    return searchDate;
  }

  public void setSearchDate(String searchDate) {
    this.searchDate = searchDate;
  }


  public SaveReview200Response shopperId(String shopperId) {
    this.shopperId = shopperId;
    return this;
  }

  /**
   * Shopper email.
   * @return shopperId
   */
  @javax.annotation.Nullable
  public String getShopperId() {
    return shopperId;
  }

  public void setShopperId(String shopperId) {
    this.shopperId = shopperId;
  }


  public SaveReview200Response sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * SKU ID.
   * @return sku
   */
  @javax.annotation.Nullable
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public SaveReview200Response text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Review&#39;s text.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public SaveReview200Response title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Review&#39;s title.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public SaveReview200Response verifiedPurchaser(Boolean verifiedPurchaser) {
    this.verifiedPurchaser = verifiedPurchaser;
    return this;
  }

  /**
   * If the reviewer is a verified purchaser (&#x60;true&#x60;) or not (&#x60;false&#x60;).
   * @return verifiedPurchaser
   */
  @javax.annotation.Nullable
  public Boolean getVerifiedPurchaser() {
    return verifiedPurchaser;
  }

  public void setVerifiedPurchaser(Boolean verifiedPurchaser) {
    this.verifiedPurchaser = verifiedPurchaser;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaveReview200Response saveReview200Response = (SaveReview200Response) o;
    return Objects.equals(this.approved, saveReview200Response.approved) &&
        Objects.equals(this.id, saveReview200Response.id) &&
        Objects.equals(this.locale, saveReview200Response.locale) &&
        Objects.equals(this.location, saveReview200Response.location) &&
        Objects.equals(this.pastReviews, saveReview200Response.pastReviews) &&
        Objects.equals(this.productId, saveReview200Response.productId) &&
        Objects.equals(this.rating, saveReview200Response.rating) &&
        Objects.equals(this.reviewDateTime, saveReview200Response.reviewDateTime) &&
        Objects.equals(this.reviewerName, saveReview200Response.reviewerName) &&
        Objects.equals(this.searchDate, saveReview200Response.searchDate) &&
        Objects.equals(this.shopperId, saveReview200Response.shopperId) &&
        Objects.equals(this.sku, saveReview200Response.sku) &&
        Objects.equals(this.text, saveReview200Response.text) &&
        Objects.equals(this.title, saveReview200Response.title) &&
        Objects.equals(this.verifiedPurchaser, saveReview200Response.verifiedPurchaser);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(approved, id, locale, location, pastReviews, productId, rating, reviewDateTime, reviewerName, searchDate, shopperId, sku, text, title, verifiedPurchaser);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaveReview200Response {\n");
    sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    pastReviews: ").append(toIndentedString(pastReviews)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    reviewDateTime: ").append(toIndentedString(reviewDateTime)).append("\n");
    sb.append("    reviewerName: ").append(toIndentedString(reviewerName)).append("\n");
    sb.append("    searchDate: ").append(toIndentedString(searchDate)).append("\n");
    sb.append("    shopperId: ").append(toIndentedString(shopperId)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    verifiedPurchaser: ").append(toIndentedString(verifiedPurchaser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approved");
    openapiFields.add("id");
    openapiFields.add("locale");
    openapiFields.add("location");
    openapiFields.add("pastReviews");
    openapiFields.add("productId");
    openapiFields.add("rating");
    openapiFields.add("reviewDateTime");
    openapiFields.add("reviewerName");
    openapiFields.add("searchDate");
    openapiFields.add("shopperId");
    openapiFields.add("sku");
    openapiFields.add("text");
    openapiFields.add("title");
    openapiFields.add("verifiedPurchaser");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SaveReview200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SaveReview200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SaveReview200Response is not found in the empty JSON string", SaveReview200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SaveReview200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SaveReview200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("pastReviews") != null && !jsonObj.get("pastReviews").isJsonNull()) && !jsonObj.get("pastReviews").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pastReviews` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pastReviews").toString()));
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if ((jsonObj.get("reviewDateTime") != null && !jsonObj.get("reviewDateTime").isJsonNull()) && !jsonObj.get("reviewDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewDateTime").toString()));
      }
      if ((jsonObj.get("reviewerName") != null && !jsonObj.get("reviewerName").isJsonNull()) && !jsonObj.get("reviewerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewerName").toString()));
      }
      if ((jsonObj.get("searchDate") != null && !jsonObj.get("searchDate").isJsonNull()) && !jsonObj.get("searchDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchDate").toString()));
      }
      if ((jsonObj.get("shopperId") != null && !jsonObj.get("shopperId").isJsonNull()) && !jsonObj.get("shopperId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopperId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopperId").toString()));
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SaveReview200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SaveReview200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SaveReview200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SaveReview200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<SaveReview200Response>() {
           @Override
           public void write(JsonWriter out, SaveReview200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SaveReview200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SaveReview200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SaveReview200Response
   * @throws IOException if the JSON string is invalid with respect to SaveReview200Response
   */
  public static SaveReview200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SaveReview200Response.class);
  }

  /**
   * Convert an instance of SaveReview200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

