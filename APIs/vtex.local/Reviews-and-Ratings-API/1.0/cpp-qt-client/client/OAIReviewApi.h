/**
 * Reviews and Ratings API
 *   Reviews & Ratings is a [VTEX IO native solution](https://developers.vtex.com/vtex-developer-docs/docs/vtex-reviews-and-ratings) that allows shoppers to submit reviews and ratings for products, as well as see them while navigating the store.    ## Rating    - [Get Product Rating](https://developers.vtex.com/vtex-rest-api/reference/getproductrating)    ## Review    - [Get Review by Review ID](https://developers.vtex.com/vtex-rest-api/reference/getreviewbyreviewid)  - [Delete Review](https://developers.vtex.com/vtex-rest-api/reference/deletereview)  - [Update a Review](https://developers.vtex.com/vtex-rest-api/reference/editreview)  - [Get a list of Reviews](https://developers.vtex.com/vtex-rest-api/reference/getalistofreviews)  - [Create Multiple Reviews](https://developers.vtex.com/vtex-rest-api/reference/savemultiplereviews)  - [Delete Multiple Reviews](https://developers.vtex.com/vtex-rest-api/reference/deletemultiplereviews)  - [Create a Review](https://developers.vtex.com/vtex-rest-api/reference/savereview)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReviewApi_H
#define OAI_OAIReviewApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEditReview_request.h"
#include "OAIGetReviewbyReviewId_200_response.h"
#include "OAIGetalistofReviews_200_response.h"
#include "OAISaveMultipleReviewsRequest.h"
#include "OAISaveReviewRequest.h"
#include "OAISaveReview_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReviewApi : public QObject {
    Q_OBJECT

public:
    OAIReviewApi(const int timeOut = 0);
    ~OAIReviewApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  request_body QList<QString> [optional]
    */
    virtual void deleteMultipleReviews(const QString &content_type, const QString &accept, const ::OpenAPI::OptionalParam<QList<QString>> &request_body = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  review_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void deleteReview(const QString &review_id, const QString &content_type, const QString &accept);

    /**
    * @param[in]  review_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_edit_review_request OAIEditReview_request [required]
    */
    virtual void editReview(const QString &review_id, const QString &content_type, const QString &accept, const OAIEditReview_request &oai_edit_review_request);

    /**
    * @param[in]  review_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void getReviewbyReviewId(const QString &review_id, const QString &content_type, const QString &accept);

    /**
    * @param[in]  search_term QString [required]
    * @param[in]  from QString [required]
    * @param[in]  to QString [required]
    * @param[in]  order_by QString [required]
    * @param[in]  status bool [required]
    * @param[in]  product_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void getalistofReviews(const QString &search_term, const QString &from, const QString &to, const QString &order_by, const bool &status, const QString &product_id, const QString &content_type, const QString &accept);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_save_multiple_reviews_request QList<OAISaveMultipleReviewsRequest> [required]
    */
    virtual void saveMultipleReviews(const QString &content_type, const QString &accept, const QList<OAISaveMultipleReviewsRequest> &oai_save_multiple_reviews_request);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_save_review_request OAISaveReviewRequest [required]
    */
    virtual void saveReview(const QString &content_type, const QString &accept, const OAISaveReviewRequest &oai_save_review_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteMultipleReviewsCallback(OAIHttpRequestWorker *worker);
    void deleteReviewCallback(OAIHttpRequestWorker *worker);
    void editReviewCallback(OAIHttpRequestWorker *worker);
    void getReviewbyReviewIdCallback(OAIHttpRequestWorker *worker);
    void getalistofReviewsCallback(OAIHttpRequestWorker *worker);
    void saveMultipleReviewsCallback(OAIHttpRequestWorker *worker);
    void saveReviewCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteMultipleReviewsSignal(bool summary);
    void deleteReviewSignal(bool summary);
    void editReviewSignal(OAIGetReviewbyReviewId_200_response summary);
    void getReviewbyReviewIdSignal(OAIGetReviewbyReviewId_200_response summary);
    void getalistofReviewsSignal(OAIGetalistofReviews_200_response summary);
    void saveMultipleReviewsSignal(QList<QString> summary);
    void saveReviewSignal(OAISaveReview_200_response summary);


    void deleteMultipleReviewsSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void deleteReviewSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void editReviewSignalFull(OAIHttpRequestWorker *worker, OAIGetReviewbyReviewId_200_response summary);
    void getReviewbyReviewIdSignalFull(OAIHttpRequestWorker *worker, OAIGetReviewbyReviewId_200_response summary);
    void getalistofReviewsSignalFull(OAIHttpRequestWorker *worker, OAIGetalistofReviews_200_response summary);
    void saveMultipleReviewsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void saveReviewSignalFull(OAIHttpRequestWorker *worker, OAISaveReview_200_response summary);

    Q_DECL_DEPRECATED_X("Use deleteMultipleReviewsSignalError() instead")
    void deleteMultipleReviewsSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMultipleReviewsSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteReviewSignalError() instead")
    void deleteReviewSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReviewSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editReviewSignalError() instead")
    void editReviewSignalE(OAIGetReviewbyReviewId_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editReviewSignalError(OAIGetReviewbyReviewId_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewbyReviewIdSignalError() instead")
    void getReviewbyReviewIdSignalE(OAIGetReviewbyReviewId_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewbyReviewIdSignalError(OAIGetReviewbyReviewId_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getalistofReviewsSignalError() instead")
    void getalistofReviewsSignalE(OAIGetalistofReviews_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getalistofReviewsSignalError(OAIGetalistofReviews_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveMultipleReviewsSignalError() instead")
    void saveMultipleReviewsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void saveMultipleReviewsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveReviewSignalError() instead")
    void saveReviewSignalE(OAISaveReview_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void saveReviewSignalError(OAISaveReview_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteMultipleReviewsSignalErrorFull() instead")
    void deleteMultipleReviewsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMultipleReviewsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteReviewSignalErrorFull() instead")
    void deleteReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editReviewSignalErrorFull() instead")
    void editReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReviewbyReviewIdSignalErrorFull() instead")
    void getReviewbyReviewIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReviewbyReviewIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getalistofReviewsSignalErrorFull() instead")
    void getalistofReviewsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getalistofReviewsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveMultipleReviewsSignalErrorFull() instead")
    void saveMultipleReviewsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveMultipleReviewsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveReviewSignalErrorFull() instead")
    void saveReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
