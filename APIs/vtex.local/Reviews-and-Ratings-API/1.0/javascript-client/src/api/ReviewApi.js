/**
 * Reviews and Ratings API
 *   Reviews & Ratings is a [VTEX IO native solution](https://developers.vtex.com/vtex-developer-docs/docs/vtex-reviews-and-ratings) that allows shoppers to submit reviews and ratings for products, as well as see them while navigating the store.    ## Rating    - [Get Product Rating](https://developers.vtex.com/vtex-rest-api/reference/getproductrating)    ## Review    - [Get Review by Review ID](https://developers.vtex.com/vtex-rest-api/reference/getreviewbyreviewid)  - [Delete Review](https://developers.vtex.com/vtex-rest-api/reference/deletereview)  - [Update a Review](https://developers.vtex.com/vtex-rest-api/reference/editreview)  - [Get a list of Reviews](https://developers.vtex.com/vtex-rest-api/reference/getalistofreviews)  - [Create Multiple Reviews](https://developers.vtex.com/vtex-rest-api/reference/savemultiplereviews)  - [Delete Multiple Reviews](https://developers.vtex.com/vtex-rest-api/reference/deletemultiplereviews)  - [Create a Review](https://developers.vtex.com/vtex-rest-api/reference/savereview)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EditReviewRequest from '../model/EditReviewRequest';
import GetReviewbyReviewId200Response from '../model/GetReviewbyReviewId200Response';
import GetalistofReviews200Response from '../model/GetalistofReviews200Response';
import SaveMultipleReviewsRequest from '../model/SaveMultipleReviewsRequest';
import SaveReview200Response from '../model/SaveReview200Response';
import SaveReviewRequest from '../model/SaveReviewRequest';

/**
* Review service.
* @module api/ReviewApi
* @version 1.0
*/
export default class ReviewApi {

    /**
    * Constructs a new ReviewApi. 
    * @alias module:api/ReviewApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteMultipleReviews operation.
     * @callback module:api/ReviewApi~deleteMultipleReviewsCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Multiple Reviews
     * Deletes multiple reviews at once.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [requestBody] 
     * @param {module:api/ReviewApi~deleteMultipleReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    deleteMultipleReviews(contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deleteMultipleReviews");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteMultipleReviews");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/reviews', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReview operation.
     * @callback module:api/ReviewApi~deleteReviewCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Review
     * Deletes an existing review.
     * @param {String} reviewId Review ID.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {module:api/ReviewApi~deleteReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    deleteReview(reviewId, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling deleteReview");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deleteReview");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteReview");
      }

      let pathParams = {
        'reviewId': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/review/{reviewId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editReview operation.
     * @callback module:api/ReviewApi~editReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReviewbyReviewId200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Review
     * Updates the information of a review.
     * @param {String} reviewId Review ID.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {module:model/EditReviewRequest} editReviewRequest 
     * @param {module:api/ReviewApi~editReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReviewbyReviewId200Response}
     */
    editReview(reviewId, contentType, accept, editReviewRequest, callback) {
      let postBody = editReviewRequest;
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling editReview");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling editReview");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling editReview");
      }
      // verify the required parameter 'editReviewRequest' is set
      if (editReviewRequest === undefined || editReviewRequest === null) {
        throw new Error("Missing the required parameter 'editReviewRequest' when calling editReview");
      }

      let pathParams = {
        'reviewId': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetReviewbyReviewId200Response;
      return this.apiClient.callApi(
        '/review/{reviewId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReviewbyReviewId operation.
     * @callback module:api/ReviewApi~getReviewbyReviewIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReviewbyReviewId200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Review by Review ID
     * Retrieves information of a product review by its ID.
     * @param {String} reviewId Review ID.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {module:api/ReviewApi~getReviewbyReviewIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReviewbyReviewId200Response}
     */
    getReviewbyReviewId(reviewId, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling getReviewbyReviewId");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getReviewbyReviewId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getReviewbyReviewId");
      }

      let pathParams = {
        'reviewId': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReviewbyReviewId200Response;
      return this.apiClient.callApi(
        '/review/{reviewId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getalistofReviews operation.
     * @callback module:api/ReviewApi~getalistofReviewsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetalistofReviews200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Reviews
     * Retrieves a list of reviews.
     * @param {String} searchTerm Returns Reviews that contain the search term in `productId`, `sku`, `shopperId`, or `reviewerName`.
     * @param {String} from Zero base starting record number, `0` is the default value.
     * @param {String} to Zero base ending record number, `3` is the default value.
     * @param {String} orderBy Case-sensitive fieldName to order records (optionally add `:asc` or `:desc`).
     * @param {Boolean} status Status of the review, approved (`true`) or not (`false`).
     * @param {String} productId Filter the reviews by product ID.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {module:api/ReviewApi~getalistofReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetalistofReviews200Response}
     */
    getalistofReviews(searchTerm, from, to, orderBy, status, productId, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'searchTerm' is set
      if (searchTerm === undefined || searchTerm === null) {
        throw new Error("Missing the required parameter 'searchTerm' when calling getalistofReviews");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling getalistofReviews");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling getalistofReviews");
      }
      // verify the required parameter 'orderBy' is set
      if (orderBy === undefined || orderBy === null) {
        throw new Error("Missing the required parameter 'orderBy' when calling getalistofReviews");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling getalistofReviews");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getalistofReviews");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getalistofReviews");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getalistofReviews");
      }

      let pathParams = {
      };
      let queryParams = {
        'search_term': searchTerm,
        'from': from,
        'to': to,
        'order_by': orderBy,
        'status': status,
        'product_id': productId
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetalistofReviews200Response;
      return this.apiClient.callApi(
        '/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveMultipleReviews operation.
     * @callback module:api/ReviewApi~saveMultipleReviewsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Multiple Reviews
     * Creates multiple reviews.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {Array.<module:model/SaveMultipleReviewsRequest>} saveMultipleReviewsRequest 
     * @param {module:api/ReviewApi~saveMultipleReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    saveMultipleReviews(contentType, accept, saveMultipleReviewsRequest, callback) {
      let postBody = saveMultipleReviewsRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling saveMultipleReviews");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling saveMultipleReviews");
      }
      // verify the required parameter 'saveMultipleReviewsRequest' is set
      if (saveMultipleReviewsRequest === undefined || saveMultipleReviewsRequest === null) {
        throw new Error("Missing the required parameter 'saveMultipleReviewsRequest' when calling saveMultipleReviews");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/reviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveReview operation.
     * @callback module:api/ReviewApi~saveReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SaveReview200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Review
     * Creates a single review
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {module:model/SaveReviewRequest} saveReviewRequest 
     * @param {module:api/ReviewApi~saveReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SaveReview200Response}
     */
    saveReview(contentType, accept, saveReviewRequest, callback) {
      let postBody = saveReviewRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling saveReview");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling saveReview");
      }
      // verify the required parameter 'saveReviewRequest' is set
      if (saveReviewRequest === undefined || saveReviewRequest === null) {
        throw new Error("Missing the required parameter 'saveReviewRequest' when calling saveReview");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SaveReview200Response;
      return this.apiClient.callApi(
        '/review', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
