/**
 * Reviews and Ratings API
 *   Reviews & Ratings is a [VTEX IO native solution](https://developers.vtex.com/vtex-developer-docs/docs/vtex-reviews-and-ratings) that allows shoppers to submit reviews and ratings for products, as well as see them while navigating the store.    ## Rating    - [Get Product Rating](https://developers.vtex.com/vtex-rest-api/reference/getproductrating)    ## Review    - [Get Review by Review ID](https://developers.vtex.com/vtex-rest-api/reference/getreviewbyreviewid)  - [Delete Review](https://developers.vtex.com/vtex-rest-api/reference/deletereview)  - [Update a Review](https://developers.vtex.com/vtex-rest-api/reference/editreview)  - [Get a list of Reviews](https://developers.vtex.com/vtex-rest-api/reference/getalistofreviews)  - [Create Multiple Reviews](https://developers.vtex.com/vtex-rest-api/reference/savemultiplereviews)  - [Delete Multiple Reviews](https://developers.vtex.com/vtex-rest-api/reference/deletemultiplereviews)  - [Create a Review](https://developers.vtex.com/vtex-rest-api/reference/savereview)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetProductRating200Response from '../model/GetProductRating200Response';

/**
* Rating service.
* @module api/RatingApi
* @version 1.0
*/
export default class RatingApi {

    /**
    * Constructs a new RatingApi. 
    * @alias module:api/RatingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getProductRating operation.
     * @callback module:api/RatingApi~getProductRatingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProductRating200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product Rating
     * Retrieves the rating of a specific product.
     * @param {String} productId Product ID.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {module:api/RatingApi~getProductRatingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProductRating200Response}
     */
    getProductRating(productId, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductRating");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getProductRating");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getProductRating");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProductRating200Response;
      return this.apiClient.callApi(
        '/rating/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
