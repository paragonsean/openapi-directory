/**
 * Reviews and Ratings API
 *   Reviews & Ratings is a [VTEX IO native solution](https://developers.vtex.com/vtex-developer-docs/docs/vtex-reviews-and-ratings) that allows shoppers to submit reviews and ratings for products, as well as see them while navigating the store.    ## Rating    - [Get Product Rating](https://developers.vtex.com/vtex-rest-api/reference/getproductrating)    ## Review    - [Get Review by Review ID](https://developers.vtex.com/vtex-rest-api/reference/getreviewbyreviewid)  - [Delete Review](https://developers.vtex.com/vtex-rest-api/reference/deletereview)  - [Update a Review](https://developers.vtex.com/vtex-rest-api/reference/editreview)  - [Get a list of Reviews](https://developers.vtex.com/vtex-rest-api/reference/getalistofreviews)  - [Create Multiple Reviews](https://developers.vtex.com/vtex-rest-api/reference/savemultiplereviews)  - [Delete Multiple Reviews](https://developers.vtex.com/vtex-rest-api/reference/deletemultiplereviews)  - [Create a Review](https://developers.vtex.com/vtex-rest-api/reference/savereview)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SaveReview200Response model module.
 * @module model/SaveReview200Response
 * @version 1.0
 */
class SaveReview200Response {
    /**
     * Constructs a new <code>SaveReview200Response</code>.
     * 
     * @alias module:model/SaveReview200Response
     */
    constructor() { 
        
        SaveReview200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SaveReview200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SaveReview200Response} obj Optional instance to populate.
     * @return {module:model/SaveReview200Response} The populated <code>SaveReview200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SaveReview200Response();

            if (data.hasOwnProperty('approved')) {
                obj['approved'] = ApiClient.convertToType(data['approved'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('pastReviews')) {
                obj['pastReviews'] = ApiClient.convertToType(data['pastReviews'], 'String');
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], 'Number');
            }
            if (data.hasOwnProperty('reviewDateTime')) {
                obj['reviewDateTime'] = ApiClient.convertToType(data['reviewDateTime'], 'String');
            }
            if (data.hasOwnProperty('reviewerName')) {
                obj['reviewerName'] = ApiClient.convertToType(data['reviewerName'], 'String');
            }
            if (data.hasOwnProperty('searchDate')) {
                obj['searchDate'] = ApiClient.convertToType(data['searchDate'], 'String');
            }
            if (data.hasOwnProperty('shopperId')) {
                obj['shopperId'] = ApiClient.convertToType(data['shopperId'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('verifiedPurchaser')) {
                obj['verifiedPurchaser'] = ApiClient.convertToType(data['verifiedPurchaser'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SaveReview200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SaveReview200Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['pastReviews'] && !(typeof data['pastReviews'] === 'string' || data['pastReviews'] instanceof String)) {
            throw new Error("Expected the field `pastReviews` to be a primitive type in the JSON string but got " + data['pastReviews']);
        }
        // ensure the json data is a string
        if (data['productId'] && !(typeof data['productId'] === 'string' || data['productId'] instanceof String)) {
            throw new Error("Expected the field `productId` to be a primitive type in the JSON string but got " + data['productId']);
        }
        // ensure the json data is a string
        if (data['reviewDateTime'] && !(typeof data['reviewDateTime'] === 'string' || data['reviewDateTime'] instanceof String)) {
            throw new Error("Expected the field `reviewDateTime` to be a primitive type in the JSON string but got " + data['reviewDateTime']);
        }
        // ensure the json data is a string
        if (data['reviewerName'] && !(typeof data['reviewerName'] === 'string' || data['reviewerName'] instanceof String)) {
            throw new Error("Expected the field `reviewerName` to be a primitive type in the JSON string but got " + data['reviewerName']);
        }
        // ensure the json data is a string
        if (data['searchDate'] && !(typeof data['searchDate'] === 'string' || data['searchDate'] instanceof String)) {
            throw new Error("Expected the field `searchDate` to be a primitive type in the JSON string but got " + data['searchDate']);
        }
        // ensure the json data is a string
        if (data['shopperId'] && !(typeof data['shopperId'] === 'string' || data['shopperId'] instanceof String)) {
            throw new Error("Expected the field `shopperId` to be a primitive type in the JSON string but got " + data['shopperId']);
        }
        // ensure the json data is a string
        if (data['sku'] && !(typeof data['sku'] === 'string' || data['sku'] instanceof String)) {
            throw new Error("Expected the field `sku` to be a primitive type in the JSON string but got " + data['sku']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * If the review was approved (`true`) or not (`false`).
 * @member {Boolean} approved
 */
SaveReview200Response.prototype['approved'] = undefined;

/**
 * Review ID.
 * @member {String} id
 */
SaveReview200Response.prototype['id'] = undefined;

/**
 * Review's locale.
 * @member {String} locale
 */
SaveReview200Response.prototype['locale'] = undefined;

/**
 * Review's origin location.
 * @member {String} location
 */
SaveReview200Response.prototype['location'] = undefined;

/**
 * Past reviews of the same product.
 * @member {String} pastReviews
 */
SaveReview200Response.prototype['pastReviews'] = undefined;

/**
 * Product ID.
 * @member {String} productId
 */
SaveReview200Response.prototype['productId'] = undefined;

/**
 * Customer rating.
 * @member {Number} rating
 */
SaveReview200Response.prototype['rating'] = undefined;

/**
 * Review's date and time.
 * @member {String} reviewDateTime
 */
SaveReview200Response.prototype['reviewDateTime'] = undefined;

/**
 * Reviewer name.
 * @member {String} reviewerName
 */
SaveReview200Response.prototype['reviewerName'] = undefined;

/**
 * Review's search date.
 * @member {String} searchDate
 */
SaveReview200Response.prototype['searchDate'] = undefined;

/**
 * Shopper email.
 * @member {String} shopperId
 */
SaveReview200Response.prototype['shopperId'] = undefined;

/**
 * SKU ID.
 * @member {String} sku
 */
SaveReview200Response.prototype['sku'] = undefined;

/**
 * Review's text.
 * @member {String} text
 */
SaveReview200Response.prototype['text'] = undefined;

/**
 * Review's title.
 * @member {String} title
 */
SaveReview200Response.prototype['title'] = undefined;

/**
 * If the reviewer is a verified purchaser (`true`) or not (`false`).
 * @member {Boolean} verifiedPurchaser
 */
SaveReview200Response.prototype['verifiedPurchaser'] = undefined;






export default SaveReview200Response;

