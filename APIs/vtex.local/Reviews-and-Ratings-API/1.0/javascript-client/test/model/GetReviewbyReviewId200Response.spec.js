/**
 * Reviews and Ratings API
 *   Reviews & Ratings is a [VTEX IO native solution](https://developers.vtex.com/vtex-developer-docs/docs/vtex-reviews-and-ratings) that allows shoppers to submit reviews and ratings for products, as well as see them while navigating the store.    ## Rating    - [Get Product Rating](https://developers.vtex.com/vtex-rest-api/reference/getproductrating)    ## Review    - [Get Review by Review ID](https://developers.vtex.com/vtex-rest-api/reference/getreviewbyreviewid)  - [Delete Review](https://developers.vtex.com/vtex-rest-api/reference/deletereview)  - [Update a Review](https://developers.vtex.com/vtex-rest-api/reference/editreview)  - [Get a list of Reviews](https://developers.vtex.com/vtex-rest-api/reference/getalistofreviews)  - [Create Multiple Reviews](https://developers.vtex.com/vtex-rest-api/reference/savemultiplereviews)  - [Delete Multiple Reviews](https://developers.vtex.com/vtex-rest-api/reference/deletemultiplereviews)  - [Create a Review](https://developers.vtex.com/vtex-rest-api/reference/savereview)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ReviewsAndRatingsApi);
  }
}(this, function(expect, ReviewsAndRatingsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ReviewsAndRatingsApi.GetReviewbyReviewId200Response();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetReviewbyReviewId200Response', function() {
    it('should create an instance of GetReviewbyReviewId200Response', function() {
      // uncomment below and update the code to test GetReviewbyReviewId200Response
      //var instance = new ReviewsAndRatingsApi.GetReviewbyReviewId200Response();
      //expect(instance).to.be.a(ReviewsAndRatingsApi.GetReviewbyReviewId200Response);
    });

    it('should have the property approved (base name: "approved")', function() {
      // uncomment below and update the code to test the property approved
      //var instance = new ReviewsAndRatingsApi.GetReviewbyReviewId200Response();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new ReviewsAndRatingsApi.GetReviewbyReviewId200Response();
      //expect(instance).to.be();
    });

    it('should have the property locale (base name: "locale")', function() {
      // uncomment below and update the code to test the property locale
      //var instance = new ReviewsAndRatingsApi.GetReviewbyReviewId200Response();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instance = new ReviewsAndRatingsApi.GetReviewbyReviewId200Response();
      //expect(instance).to.be();
    });

    it('should have the property pastReviews (base name: "pastReviews")', function() {
      // uncomment below and update the code to test the property pastReviews
      //var instance = new ReviewsAndRatingsApi.GetReviewbyReviewId200Response();
      //expect(instance).to.be();
    });

    it('should have the property productId (base name: "productId")', function() {
      // uncomment below and update the code to test the property productId
      //var instance = new ReviewsAndRatingsApi.GetReviewbyReviewId200Response();
      //expect(instance).to.be();
    });

    it('should have the property rating (base name: "rating")', function() {
      // uncomment below and update the code to test the property rating
      //var instance = new ReviewsAndRatingsApi.GetReviewbyReviewId200Response();
      //expect(instance).to.be();
    });

    it('should have the property reviewDateTime (base name: "reviewDateTime")', function() {
      // uncomment below and update the code to test the property reviewDateTime
      //var instance = new ReviewsAndRatingsApi.GetReviewbyReviewId200Response();
      //expect(instance).to.be();
    });

    it('should have the property reviewerName (base name: "reviewerName")', function() {
      // uncomment below and update the code to test the property reviewerName
      //var instance = new ReviewsAndRatingsApi.GetReviewbyReviewId200Response();
      //expect(instance).to.be();
    });

    it('should have the property searchDate (base name: "searchDate")', function() {
      // uncomment below and update the code to test the property searchDate
      //var instance = new ReviewsAndRatingsApi.GetReviewbyReviewId200Response();
      //expect(instance).to.be();
    });

    it('should have the property shopperId (base name: "shopperId")', function() {
      // uncomment below and update the code to test the property shopperId
      //var instance = new ReviewsAndRatingsApi.GetReviewbyReviewId200Response();
      //expect(instance).to.be();
    });

    it('should have the property sku (base name: "sku")', function() {
      // uncomment below and update the code to test the property sku
      //var instance = new ReviewsAndRatingsApi.GetReviewbyReviewId200Response();
      //expect(instance).to.be();
    });

    it('should have the property text (base name: "text")', function() {
      // uncomment below and update the code to test the property text
      //var instance = new ReviewsAndRatingsApi.GetReviewbyReviewId200Response();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new ReviewsAndRatingsApi.GetReviewbyReviewId200Response();
      //expect(instance).to.be();
    });

    it('should have the property verifiedPurchaser (base name: "verifiedPurchaser")', function() {
      // uncomment below and update the code to test the property verifiedPurchaser
      //var instance = new ReviewsAndRatingsApi.GetReviewbyReviewId200Response();
      //expect(instance).to.be();
    });

  });

}));
