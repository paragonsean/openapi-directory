/*
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getreportstatusbyID
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param reportId Report ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getreportstatusbyIDCall(String contentType, String accept, String reportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/reportStatus/{reportId}"
            .replace("{" + "reportId" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getreportstatusbyIDValidateBeforeCall(String contentType, String accept, String reportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getreportstatusbyID(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getreportstatusbyID(Async)");
        }

        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling getreportstatusbyID(Async)");
        }

        return getreportstatusbyIDCall(contentType, accept, reportId, _callback);

    }

    /**
     * Get report status by ID
     * Retrieves the Subscription&#39;s report status, filtering by its reportId.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param reportId Report ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getreportstatusbyID(String contentType, String accept, String reportId) throws ApiException {
        getreportstatusbyIDWithHttpInfo(contentType, accept, reportId);
    }

    /**
     * Get report status by ID
     * Retrieves the Subscription&#39;s report status, filtering by its reportId.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param reportId Report ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getreportstatusbyIDWithHttpInfo(String contentType, String accept, String reportId) throws ApiException {
        okhttp3.Call localVarCall = getreportstatusbyIDValidateBeforeCall(contentType, accept, reportId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get report status by ID (asynchronously)
     * Retrieves the Subscription&#39;s report status, filtering by its reportId.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param reportId Report ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getreportstatusbyIDAsync(String contentType, String accept, String reportId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getreportstatusbyIDValidateBeforeCall(contentType, accept, reportId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestreportbyStatus
     * @param requesterEmail Email that the report will be sent to (required)
     * @param status Binary OR of the following status: 1 - ACTIVE; 2 - PAUSED; 4 - CANCELED; 8 - EXPIRED (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestreportbyStatusCall(String requesterEmail, Integer status, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/subscriptionsByStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (requesterEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requesterEmail", requesterEmail));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestreportbyStatusValidateBeforeCall(String requesterEmail, Integer status, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requesterEmail' is set
        if (requesterEmail == null) {
            throw new ApiException("Missing the required parameter 'requesterEmail' when calling requestreportbyStatus(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling requestreportbyStatus(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling requestreportbyStatus(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling requestreportbyStatus(Async)");
        }

        return requestreportbyStatusCall(requesterEmail, status, contentType, accept, _callback);

    }

    /**
     * Retrieve Subscription report by Status
     * Retrieves Subscriptions&#39; reports, filtering by status. The report will be sent by email, to the address inserted in the API&#39;s path.
     * @param requesterEmail Email that the report will be sent to (required)
     * @param status Binary OR of the following status: 1 - ACTIVE; 2 - PAUSED; 4 - CANCELED; 8 - EXPIRED (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void requestreportbyStatus(String requesterEmail, Integer status, String contentType, String accept) throws ApiException {
        requestreportbyStatusWithHttpInfo(requesterEmail, status, contentType, accept);
    }

    /**
     * Retrieve Subscription report by Status
     * Retrieves Subscriptions&#39; reports, filtering by status. The report will be sent by email, to the address inserted in the API&#39;s path.
     * @param requesterEmail Email that the report will be sent to (required)
     * @param status Binary OR of the following status: 1 - ACTIVE; 2 - PAUSED; 4 - CANCELED; 8 - EXPIRED (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> requestreportbyStatusWithHttpInfo(String requesterEmail, Integer status, String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = requestreportbyStatusValidateBeforeCall(requesterEmail, status, contentType, accept, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Subscription report by Status (asynchronously)
     * Retrieves Subscriptions&#39; reports, filtering by status. The report will be sent by email, to the address inserted in the API&#39;s path.
     * @param requesterEmail Email that the report will be sent to (required)
     * @param status Binary OR of the following status: 1 - ACTIVE; 2 - PAUSED; 4 - CANCELED; 8 - EXPIRED (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestreportbyStatusAsync(String requesterEmail, Integer status, String contentType, String accept, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestreportbyStatusValidateBeforeCall(requesterEmail, status, contentType, accept, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestreportbydate
     * @param requesterEmail Email that the report will be sent to (required)
     * @param beginDate begin date of report interval, use format yyyyMMdd (required)
     * @param endDate end date of report interval, use format yyyyMMdd (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestreportbydateCall(String requesterEmail, Integer beginDate, Integer endDate, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/subscriptionsByDate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (requesterEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requesterEmail", requesterEmail));
        }

        if (beginDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beginDate", beginDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestreportbydateValidateBeforeCall(String requesterEmail, Integer beginDate, Integer endDate, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requesterEmail' is set
        if (requesterEmail == null) {
            throw new ApiException("Missing the required parameter 'requesterEmail' when calling requestreportbydate(Async)");
        }

        // verify the required parameter 'beginDate' is set
        if (beginDate == null) {
            throw new ApiException("Missing the required parameter 'beginDate' when calling requestreportbydate(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling requestreportbydate(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling requestreportbydate(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling requestreportbydate(Async)");
        }

        return requestreportbydateCall(requesterEmail, beginDate, endDate, contentType, accept, _callback);

    }

    /**
     * Retrieve Subscription report by date
     * Retrieves a report with the subscriptions created at the date interval requested
     * @param requesterEmail Email that the report will be sent to (required)
     * @param beginDate begin date of report interval, use format yyyyMMdd (required)
     * @param endDate end date of report interval, use format yyyyMMdd (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void requestreportbydate(String requesterEmail, Integer beginDate, Integer endDate, String contentType, String accept) throws ApiException {
        requestreportbydateWithHttpInfo(requesterEmail, beginDate, endDate, contentType, accept);
    }

    /**
     * Retrieve Subscription report by date
     * Retrieves a report with the subscriptions created at the date interval requested
     * @param requesterEmail Email that the report will be sent to (required)
     * @param beginDate begin date of report interval, use format yyyyMMdd (required)
     * @param endDate end date of report interval, use format yyyyMMdd (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> requestreportbydateWithHttpInfo(String requesterEmail, Integer beginDate, Integer endDate, String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = requestreportbydateValidateBeforeCall(requesterEmail, beginDate, endDate, contentType, accept, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Subscription report by date (asynchronously)
     * Retrieves a report with the subscriptions created at the date interval requested
     * @param requesterEmail Email that the report will be sent to (required)
     * @param beginDate begin date of report interval, use format yyyyMMdd (required)
     * @param endDate end date of report interval, use format yyyyMMdd (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestreportbydateAsync(String requesterEmail, Integer beginDate, Integer endDate, String contentType, String accept, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestreportbydateValidateBeforeCall(requesterEmail, beginDate, endDate, contentType, accept, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestreportbyorderdate
     * @param requesterEmail Email that the report will be sent to (required)
     * @param beginDate begin date of report interval, use format yyyyMMdd (required)
     * @param endDate end date of report interval, use format yyyyMMdd (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestreportbyorderdateCall(String requesterEmail, Integer beginDate, Integer endDate, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/subscriptionsOrderByDate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (requesterEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requesterEmail", requesterEmail));
        }

        if (beginDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beginDate", beginDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestreportbyorderdateValidateBeforeCall(String requesterEmail, Integer beginDate, Integer endDate, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requesterEmail' is set
        if (requesterEmail == null) {
            throw new ApiException("Missing the required parameter 'requesterEmail' when calling requestreportbyorderdate(Async)");
        }

        // verify the required parameter 'beginDate' is set
        if (beginDate == null) {
            throw new ApiException("Missing the required parameter 'beginDate' when calling requestreportbyorderdate(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling requestreportbyorderdate(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling requestreportbyorderdate(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling requestreportbyorderdate(Async)");
        }

        return requestreportbyorderdateCall(requesterEmail, beginDate, endDate, contentType, accept, _callback);

    }

    /**
     * Retrieve Subscription report by order date
     * Retrieves a report regarding the Subscriptions created during the date interval of orders.
     * @param requesterEmail Email that the report will be sent to (required)
     * @param beginDate begin date of report interval, use format yyyyMMdd (required)
     * @param endDate end date of report interval, use format yyyyMMdd (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void requestreportbyorderdate(String requesterEmail, Integer beginDate, Integer endDate, String contentType, String accept) throws ApiException {
        requestreportbyorderdateWithHttpInfo(requesterEmail, beginDate, endDate, contentType, accept);
    }

    /**
     * Retrieve Subscription report by order date
     * Retrieves a report regarding the Subscriptions created during the date interval of orders.
     * @param requesterEmail Email that the report will be sent to (required)
     * @param beginDate begin date of report interval, use format yyyyMMdd (required)
     * @param endDate end date of report interval, use format yyyyMMdd (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> requestreportbyorderdateWithHttpInfo(String requesterEmail, Integer beginDate, Integer endDate, String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = requestreportbyorderdateValidateBeforeCall(requesterEmail, beginDate, endDate, contentType, accept, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Subscription report by order date (asynchronously)
     * Retrieves a report regarding the Subscriptions created during the date interval of orders.
     * @param requesterEmail Email that the report will be sent to (required)
     * @param beginDate begin date of report interval, use format yyyyMMdd (required)
     * @param endDate end date of report interval, use format yyyyMMdd (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestreportbyorderdateAsync(String requesterEmail, Integer beginDate, Integer endDate, String contentType, String accept, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestreportbyorderdateValidateBeforeCall(requesterEmail, beginDate, endDate, contentType, accept, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestreportbyschedule
     * @param requesterEmail Email that the report will be sent to (required)
     * @param beginDate begin date of report interval, use format yyyyMMdd (required)
     * @param endDate end date of report interval, use format yyyyMMdd (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestreportbyscheduleCall(String requesterEmail, Integer beginDate, Integer endDate, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/subscriptionsScheduled";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (requesterEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requesterEmail", requesterEmail));
        }

        if (beginDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beginDate", beginDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestreportbyscheduleValidateBeforeCall(String requesterEmail, Integer beginDate, Integer endDate, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requesterEmail' is set
        if (requesterEmail == null) {
            throw new ApiException("Missing the required parameter 'requesterEmail' when calling requestreportbyschedule(Async)");
        }

        // verify the required parameter 'beginDate' is set
        if (beginDate == null) {
            throw new ApiException("Missing the required parameter 'beginDate' when calling requestreportbyschedule(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling requestreportbyschedule(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling requestreportbyschedule(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling requestreportbyschedule(Async)");
        }

        return requestreportbyscheduleCall(requesterEmail, beginDate, endDate, contentType, accept, _callback);

    }

    /**
     * Retrieve Subscription report by schedule
     * Retrieves a report regarding the Subscriptions scheduled to execute at the date interval requested
     * @param requesterEmail Email that the report will be sent to (required)
     * @param beginDate begin date of report interval, use format yyyyMMdd (required)
     * @param endDate end date of report interval, use format yyyyMMdd (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void requestreportbyschedule(String requesterEmail, Integer beginDate, Integer endDate, String contentType, String accept) throws ApiException {
        requestreportbyscheduleWithHttpInfo(requesterEmail, beginDate, endDate, contentType, accept);
    }

    /**
     * Retrieve Subscription report by schedule
     * Retrieves a report regarding the Subscriptions scheduled to execute at the date interval requested
     * @param requesterEmail Email that the report will be sent to (required)
     * @param beginDate begin date of report interval, use format yyyyMMdd (required)
     * @param endDate end date of report interval, use format yyyyMMdd (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> requestreportbyscheduleWithHttpInfo(String requesterEmail, Integer beginDate, Integer endDate, String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = requestreportbyscheduleValidateBeforeCall(requesterEmail, beginDate, endDate, contentType, accept, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve Subscription report by schedule (asynchronously)
     * Retrieves a report regarding the Subscriptions scheduled to execute at the date interval requested
     * @param requesterEmail Email that the report will be sent to (required)
     * @param beginDate begin date of report interval, use format yyyyMMdd (required)
     * @param endDate end date of report interval, use format yyyyMMdd (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestreportbyscheduleAsync(String requesterEmail, Integer beginDate, Integer endDate, String contentType, String accept, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestreportbyscheduleValidateBeforeCall(requesterEmail, beginDate, endDate, contentType, accept, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestreportbyupdate
     * @param requesterEmail Email that the report will be sent to (required)
     * @param beginDate begin date of report interval, use format yyyyMMdd (required)
     * @param endDate end date of report interval, use format yyyyMMdd (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestreportbyupdateCall(String requesterEmail, Integer beginDate, Integer endDate, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/report/subscriptionsUpdated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (requesterEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requesterEmail", requesterEmail));
        }

        if (beginDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beginDate", beginDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestreportbyupdateValidateBeforeCall(String requesterEmail, Integer beginDate, Integer endDate, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requesterEmail' is set
        if (requesterEmail == null) {
            throw new ApiException("Missing the required parameter 'requesterEmail' when calling requestreportbyupdate(Async)");
        }

        // verify the required parameter 'beginDate' is set
        if (beginDate == null) {
            throw new ApiException("Missing the required parameter 'beginDate' when calling requestreportbyupdate(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling requestreportbyupdate(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling requestreportbyupdate(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling requestreportbyupdate(Async)");
        }

        return requestreportbyupdateCall(requesterEmail, beginDate, endDate, contentType, accept, _callback);

    }

    /**
     * Request report by update
     * Retrieves a report regarding Subscriptions updated in the date interval chosen. The report will be sent by email, to the address inserted in the API&#39;s path.
     * @param requesterEmail Email that the report will be sent to (required)
     * @param beginDate begin date of report interval, use format yyyyMMdd (required)
     * @param endDate end date of report interval, use format yyyyMMdd (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void requestreportbyupdate(String requesterEmail, Integer beginDate, Integer endDate, String contentType, String accept) throws ApiException {
        requestreportbyupdateWithHttpInfo(requesterEmail, beginDate, endDate, contentType, accept);
    }

    /**
     * Request report by update
     * Retrieves a report regarding Subscriptions updated in the date interval chosen. The report will be sent by email, to the address inserted in the API&#39;s path.
     * @param requesterEmail Email that the report will be sent to (required)
     * @param beginDate begin date of report interval, use format yyyyMMdd (required)
     * @param endDate end date of report interval, use format yyyyMMdd (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> requestreportbyupdateWithHttpInfo(String requesterEmail, Integer beginDate, Integer endDate, String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = requestreportbyupdateValidateBeforeCall(requesterEmail, beginDate, endDate, contentType, accept, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Request report by update (asynchronously)
     * Retrieves a report regarding Subscriptions updated in the date interval chosen. The report will be sent by email, to the address inserted in the API&#39;s path.
     * @param requesterEmail Email that the report will be sent to (required)
     * @param beginDate begin date of report interval, use format yyyyMMdd (required)
     * @param endDate end date of report interval, use format yyyyMMdd (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestreportbyupdateAsync(String requesterEmail, Integer beginDate, Integer endDate, String contentType, String accept, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestreportbyupdateValidateBeforeCall(requesterEmail, beginDate, endDate, contentType, accept, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
