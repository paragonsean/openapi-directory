/*
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdditionalComponent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ShippingAddress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:11.020699-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShippingAddress {
  public static final String SERIALIZED_NAME_ADDITIONAL_COMPONENTS = "additionalComponents";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_COMPONENTS)
  private List<AdditionalComponent> additionalComponents = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDRESS_ID = "addressId";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ID)
  private String addressId;

  public static final String SERIALIZED_NAME_ADDRESS_NAME = "addressName";
  @SerializedName(SERIALIZED_NAME_ADDRESS_NAME)
  private String addressName;

  public static final String SERIALIZED_NAME_ADDRESS_TYPE = "addressType";
  @SerializedName(SERIALIZED_NAME_ADDRESS_TYPE)
  private String addressType;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMPLEMENT = "complement";
  @SerializedName(SERIALIZED_NAME_COMPLEMENT)
  private String complement;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_FORMATTED_ADDRESS = "formattedAddress";
  @SerializedName(SERIALIZED_NAME_FORMATTED_ADDRESS)
  private String formattedAddress;

  public static final String SERIALIZED_NAME_GEO_COORDINATE = "geoCoordinate";
  @SerializedName(SERIALIZED_NAME_GEO_COORDINATE)
  private List<Integer> geoCoordinate = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEIGHBORHOOD = "neighborhood";
  @SerializedName(SERIALIZED_NAME_NEIGHBORHOOD)
  private String neighborhood;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_RECEIVER_NAME = "receiverName";
  @SerializedName(SERIALIZED_NAME_RECEIVER_NAME)
  private String receiverName;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private String street;

  public ShippingAddress() {
  }

  public ShippingAddress additionalComponents(List<AdditionalComponent> additionalComponents) {
    this.additionalComponents = additionalComponents;
    return this;
  }

  public ShippingAddress addAdditionalComponentsItem(AdditionalComponent additionalComponentsItem) {
    if (this.additionalComponents == null) {
      this.additionalComponents = new ArrayList<>();
    }
    this.additionalComponents.add(additionalComponentsItem);
    return this;
  }

  /**
   * 
   * @return additionalComponents
   */
  @javax.annotation.Nonnull
  public List<AdditionalComponent> getAdditionalComponents() {
    return additionalComponents;
  }

  public void setAdditionalComponents(List<AdditionalComponent> additionalComponents) {
    this.additionalComponents = additionalComponents;
  }


  public ShippingAddress addressId(String addressId) {
    this.addressId = addressId;
    return this;
  }

  /**
   * Get addressId
   * @return addressId
   */
  @javax.annotation.Nonnull
  public String getAddressId() {
    return addressId;
  }

  public void setAddressId(String addressId) {
    this.addressId = addressId;
  }


  public ShippingAddress addressName(String addressName) {
    this.addressName = addressName;
    return this;
  }

  /**
   * Get addressName
   * @return addressName
   */
  @javax.annotation.Nonnull
  public String getAddressName() {
    return addressName;
  }

  public void setAddressName(String addressName) {
    this.addressName = addressName;
  }


  public ShippingAddress addressType(String addressType) {
    this.addressType = addressType;
    return this;
  }

  /**
   * Get addressType
   * @return addressType
   */
  @javax.annotation.Nonnull
  public String getAddressType() {
    return addressType;
  }

  public void setAddressType(String addressType) {
    this.addressType = addressType;
  }


  public ShippingAddress city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nonnull
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public ShippingAddress complement(String complement) {
    this.complement = complement;
    return this;
  }

  /**
   * Get complement
   * @return complement
   */
  @javax.annotation.Nonnull
  public String getComplement() {
    return complement;
  }

  public void setComplement(String complement) {
    this.complement = complement;
  }


  public ShippingAddress country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public ShippingAddress formattedAddress(String formattedAddress) {
    this.formattedAddress = formattedAddress;
    return this;
  }

  /**
   * Get formattedAddress
   * @return formattedAddress
   */
  @javax.annotation.Nonnull
  public String getFormattedAddress() {
    return formattedAddress;
  }

  public void setFormattedAddress(String formattedAddress) {
    this.formattedAddress = formattedAddress;
  }


  public ShippingAddress geoCoordinate(List<Integer> geoCoordinate) {
    this.geoCoordinate = geoCoordinate;
    return this;
  }

  public ShippingAddress addGeoCoordinateItem(Integer geoCoordinateItem) {
    if (this.geoCoordinate == null) {
      this.geoCoordinate = new ArrayList<>();
    }
    this.geoCoordinate.add(geoCoordinateItem);
    return this;
  }

  /**
   * 
   * @return geoCoordinate
   */
  @javax.annotation.Nonnull
  public List<Integer> getGeoCoordinate() {
    return geoCoordinate;
  }

  public void setGeoCoordinate(List<Integer> geoCoordinate) {
    this.geoCoordinate = geoCoordinate;
  }


  public ShippingAddress neighborhood(String neighborhood) {
    this.neighborhood = neighborhood;
    return this;
  }

  /**
   * Get neighborhood
   * @return neighborhood
   */
  @javax.annotation.Nonnull
  public String getNeighborhood() {
    return neighborhood;
  }

  public void setNeighborhood(String neighborhood) {
    this.neighborhood = neighborhood;
  }


  public ShippingAddress number(String number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nonnull
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public ShippingAddress postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Get postalCode
   * @return postalCode
   */
  @javax.annotation.Nonnull
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public ShippingAddress receiverName(String receiverName) {
    this.receiverName = receiverName;
    return this;
  }

  /**
   * Get receiverName
   * @return receiverName
   */
  @javax.annotation.Nonnull
  public String getReceiverName() {
    return receiverName;
  }

  public void setReceiverName(String receiverName) {
    this.receiverName = receiverName;
  }


  public ShippingAddress reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Get reference
   * @return reference
   */
  @javax.annotation.Nonnull
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public ShippingAddress state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public ShippingAddress street(String street) {
    this.street = street;
    return this;
  }

  /**
   * Get street
   * @return street
   */
  @javax.annotation.Nonnull
  public String getStreet() {
    return street;
  }

  public void setStreet(String street) {
    this.street = street;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingAddress shippingAddress = (ShippingAddress) o;
    return Objects.equals(this.additionalComponents, shippingAddress.additionalComponents) &&
        Objects.equals(this.addressId, shippingAddress.addressId) &&
        Objects.equals(this.addressName, shippingAddress.addressName) &&
        Objects.equals(this.addressType, shippingAddress.addressType) &&
        Objects.equals(this.city, shippingAddress.city) &&
        Objects.equals(this.complement, shippingAddress.complement) &&
        Objects.equals(this.country, shippingAddress.country) &&
        Objects.equals(this.formattedAddress, shippingAddress.formattedAddress) &&
        Objects.equals(this.geoCoordinate, shippingAddress.geoCoordinate) &&
        Objects.equals(this.neighborhood, shippingAddress.neighborhood) &&
        Objects.equals(this.number, shippingAddress.number) &&
        Objects.equals(this.postalCode, shippingAddress.postalCode) &&
        Objects.equals(this.receiverName, shippingAddress.receiverName) &&
        Objects.equals(this.reference, shippingAddress.reference) &&
        Objects.equals(this.state, shippingAddress.state) &&
        Objects.equals(this.street, shippingAddress.street);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalComponents, addressId, addressName, addressType, city, complement, country, formattedAddress, geoCoordinate, neighborhood, number, postalCode, receiverName, reference, state, street);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingAddress {\n");
    sb.append("    additionalComponents: ").append(toIndentedString(additionalComponents)).append("\n");
    sb.append("    addressId: ").append(toIndentedString(addressId)).append("\n");
    sb.append("    addressName: ").append(toIndentedString(addressName)).append("\n");
    sb.append("    addressType: ").append(toIndentedString(addressType)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    complement: ").append(toIndentedString(complement)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    formattedAddress: ").append(toIndentedString(formattedAddress)).append("\n");
    sb.append("    geoCoordinate: ").append(toIndentedString(geoCoordinate)).append("\n");
    sb.append("    neighborhood: ").append(toIndentedString(neighborhood)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    receiverName: ").append(toIndentedString(receiverName)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalComponents");
    openapiFields.add("addressId");
    openapiFields.add("addressName");
    openapiFields.add("addressType");
    openapiFields.add("city");
    openapiFields.add("complement");
    openapiFields.add("country");
    openapiFields.add("formattedAddress");
    openapiFields.add("geoCoordinate");
    openapiFields.add("neighborhood");
    openapiFields.add("number");
    openapiFields.add("postalCode");
    openapiFields.add("receiverName");
    openapiFields.add("reference");
    openapiFields.add("state");
    openapiFields.add("street");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("additionalComponents");
    openapiRequiredFields.add("addressId");
    openapiRequiredFields.add("addressName");
    openapiRequiredFields.add("addressType");
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("complement");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("formattedAddress");
    openapiRequiredFields.add("geoCoordinate");
    openapiRequiredFields.add("neighborhood");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("postalCode");
    openapiRequiredFields.add("receiverName");
    openapiRequiredFields.add("reference");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("street");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShippingAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShippingAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShippingAddress is not found in the empty JSON string", ShippingAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShippingAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShippingAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShippingAddress.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("additionalComponents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalComponents` to be an array in the JSON string but got `%s`", jsonObj.get("additionalComponents").toString()));
      }

      JsonArray jsonArrayadditionalComponents = jsonObj.getAsJsonArray("additionalComponents");
      // validate the required field `additionalComponents` (array)
      for (int i = 0; i < jsonArrayadditionalComponents.size(); i++) {
        AdditionalComponent.validateJsonElement(jsonArrayadditionalComponents.get(i));
      };
      if (!jsonObj.get("addressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressId").toString()));
      }
      if (!jsonObj.get("addressName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressName").toString()));
      }
      if (!jsonObj.get("addressType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressType").toString()));
      }
      if (!jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("complement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complement").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("formattedAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formattedAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formattedAddress").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("geoCoordinate") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("geoCoordinate").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `geoCoordinate` to be an array in the JSON string but got `%s`", jsonObj.get("geoCoordinate").toString()));
      }
      if (!jsonObj.get("neighborhood").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `neighborhood` to be a primitive type in the JSON string but got `%s`", jsonObj.get("neighborhood").toString()));
      }
      if (!jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if (!jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      if (!jsonObj.get("receiverName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverName").toString()));
      }
      if (!jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (!jsonObj.get("street").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShippingAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShippingAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShippingAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShippingAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<ShippingAddress>() {
           @Override
           public void write(JsonWriter out, ShippingAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShippingAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShippingAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShippingAddress
   * @throws IOException if the JSON string is invalid with respect to ShippingAddress
   */
  public static ShippingAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShippingAddress.class);
  }

  /**
   * Convert an instance of ShippingAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

