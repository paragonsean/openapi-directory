/*
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:11.020699-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Properties {
  public static final String SERIALIZED_NAME_ADDITIONAL_PROP1 = "additionalProp1";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PROP1)
  private String additionalProp1;

  public static final String SERIALIZED_NAME_ADDITIONAL_PROP2 = "additionalProp2";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PROP2)
  private String additionalProp2;

  public static final String SERIALIZED_NAME_ADDITIONAL_PROP3 = "additionalProp3";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PROP3)
  private String additionalProp3;

  public Properties() {
  }

  public Properties additionalProp1(String additionalProp1) {
    this.additionalProp1 = additionalProp1;
    return this;
  }

  /**
   * Get additionalProp1
   * @return additionalProp1
   */
  @javax.annotation.Nonnull
  public String getAdditionalProp1() {
    return additionalProp1;
  }

  public void setAdditionalProp1(String additionalProp1) {
    this.additionalProp1 = additionalProp1;
  }


  public Properties additionalProp2(String additionalProp2) {
    this.additionalProp2 = additionalProp2;
    return this;
  }

  /**
   * Get additionalProp2
   * @return additionalProp2
   */
  @javax.annotation.Nonnull
  public String getAdditionalProp2() {
    return additionalProp2;
  }

  public void setAdditionalProp2(String additionalProp2) {
    this.additionalProp2 = additionalProp2;
  }


  public Properties additionalProp3(String additionalProp3) {
    this.additionalProp3 = additionalProp3;
    return this;
  }

  /**
   * Get additionalProp3
   * @return additionalProp3
   */
  @javax.annotation.Nonnull
  public String getAdditionalProp3() {
    return additionalProp3;
  }

  public void setAdditionalProp3(String additionalProp3) {
    this.additionalProp3 = additionalProp3;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Properties properties = (Properties) o;
    return Objects.equals(this.additionalProp1, properties.additionalProp1) &&
        Objects.equals(this.additionalProp2, properties.additionalProp2) &&
        Objects.equals(this.additionalProp3, properties.additionalProp3);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalProp1, additionalProp2, additionalProp3);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Properties {\n");
    sb.append("    additionalProp1: ").append(toIndentedString(additionalProp1)).append("\n");
    sb.append("    additionalProp2: ").append(toIndentedString(additionalProp2)).append("\n");
    sb.append("    additionalProp3: ").append(toIndentedString(additionalProp3)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalProp1");
    openapiFields.add("additionalProp2");
    openapiFields.add("additionalProp3");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("additionalProp1");
    openapiRequiredFields.add("additionalProp2");
    openapiRequiredFields.add("additionalProp3");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Properties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Properties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Properties is not found in the empty JSON string", Properties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Properties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Properties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Properties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("additionalProp1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalProp1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalProp1").toString()));
      }
      if (!jsonObj.get("additionalProp2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalProp2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalProp2").toString()));
      }
      if (!jsonObj.get("additionalProp3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalProp3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalProp3").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Properties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Properties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Properties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Properties.class));

       return (TypeAdapter<T>) new TypeAdapter<Properties>() {
           @Override
           public void write(JsonWriter out, Properties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Properties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Properties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Properties
   * @throws IOException if the JSON string is invalid with respect to Properties
   */
  public static Properties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Properties.class);
  }

  /**
   * Convert an instance of Properties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

