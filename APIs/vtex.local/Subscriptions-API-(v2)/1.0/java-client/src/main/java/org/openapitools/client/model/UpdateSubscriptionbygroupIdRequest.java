/*
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Item1;
import org.openapitools.client.model.Metadatum;
import org.openapitools.client.model.Plan;
import org.openapitools.client.model.PurchaseSettings;
import org.openapitools.client.model.ShippingAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateSubscriptionbygroupIdRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:11.020699-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateSubscriptionbygroupIdRequest {
  public static final String SERIALIZED_NAME_IS_SKIPPED = "isSkipped";
  @SerializedName(SERIALIZED_NAME_IS_SKIPPED)
  private Boolean isSkipped;

  public static final String SERIALIZED_NAME_ITEM = "item";
  @SerializedName(SERIALIZED_NAME_ITEM)
  private List<Item1> item = new ArrayList<>();

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<Metadatum> metadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private Plan plan;

  public static final String SERIALIZED_NAME_PURCHASE_SETTINGS = "purchaseSettings";
  @SerializedName(SERIALIZED_NAME_PURCHASE_SETTINGS)
  private PurchaseSettings purchaseSettings;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shippingAddress";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private ShippingAddress shippingAddress;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public UpdateSubscriptionbygroupIdRequest() {
  }

  public UpdateSubscriptionbygroupIdRequest isSkipped(Boolean isSkipped) {
    this.isSkipped = isSkipped;
    return this;
  }

  /**
   * Get isSkipped
   * @return isSkipped
   */
  @javax.annotation.Nonnull
  public Boolean getIsSkipped() {
    return isSkipped;
  }

  public void setIsSkipped(Boolean isSkipped) {
    this.isSkipped = isSkipped;
  }


  public UpdateSubscriptionbygroupIdRequest item(List<Item1> item) {
    this.item = item;
    return this;
  }

  public UpdateSubscriptionbygroupIdRequest addItemItem(Item1 itemItem) {
    if (this.item == null) {
      this.item = new ArrayList<>();
    }
    this.item.add(itemItem);
    return this;
  }

  /**
   * 
   * @return item
   */
  @javax.annotation.Nonnull
  public List<Item1> getItem() {
    return item;
  }

  public void setItem(List<Item1> item) {
    this.item = item;
  }


  public UpdateSubscriptionbygroupIdRequest metadata(List<Metadatum> metadata) {
    this.metadata = metadata;
    return this;
  }

  public UpdateSubscriptionbygroupIdRequest addMetadataItem(Metadatum metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * 
   * @return metadata
   */
  @javax.annotation.Nonnull
  public List<Metadatum> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<Metadatum> metadata) {
    this.metadata = metadata;
  }


  public UpdateSubscriptionbygroupIdRequest plan(Plan plan) {
    this.plan = plan;
    return this;
  }

  /**
   * Get plan
   * @return plan
   */
  @javax.annotation.Nonnull
  public Plan getPlan() {
    return plan;
  }

  public void setPlan(Plan plan) {
    this.plan = plan;
  }


  public UpdateSubscriptionbygroupIdRequest purchaseSettings(PurchaseSettings purchaseSettings) {
    this.purchaseSettings = purchaseSettings;
    return this;
  }

  /**
   * Get purchaseSettings
   * @return purchaseSettings
   */
  @javax.annotation.Nonnull
  public PurchaseSettings getPurchaseSettings() {
    return purchaseSettings;
  }

  public void setPurchaseSettings(PurchaseSettings purchaseSettings) {
    this.purchaseSettings = purchaseSettings;
  }


  public UpdateSubscriptionbygroupIdRequest shippingAddress(ShippingAddress shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

  /**
   * Get shippingAddress
   * @return shippingAddress
   */
  @javax.annotation.Nonnull
  public ShippingAddress getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(ShippingAddress shippingAddress) {
    this.shippingAddress = shippingAddress;
  }


  public UpdateSubscriptionbygroupIdRequest status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSubscriptionbygroupIdRequest updateSubscriptionbygroupIdRequest = (UpdateSubscriptionbygroupIdRequest) o;
    return Objects.equals(this.isSkipped, updateSubscriptionbygroupIdRequest.isSkipped) &&
        Objects.equals(this.item, updateSubscriptionbygroupIdRequest.item) &&
        Objects.equals(this.metadata, updateSubscriptionbygroupIdRequest.metadata) &&
        Objects.equals(this.plan, updateSubscriptionbygroupIdRequest.plan) &&
        Objects.equals(this.purchaseSettings, updateSubscriptionbygroupIdRequest.purchaseSettings) &&
        Objects.equals(this.shippingAddress, updateSubscriptionbygroupIdRequest.shippingAddress) &&
        Objects.equals(this.status, updateSubscriptionbygroupIdRequest.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isSkipped, item, metadata, plan, purchaseSettings, shippingAddress, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSubscriptionbygroupIdRequest {\n");
    sb.append("    isSkipped: ").append(toIndentedString(isSkipped)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    purchaseSettings: ").append(toIndentedString(purchaseSettings)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isSkipped");
    openapiFields.add("item");
    openapiFields.add("metadata");
    openapiFields.add("plan");
    openapiFields.add("purchaseSettings");
    openapiFields.add("shippingAddress");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("isSkipped");
    openapiRequiredFields.add("item");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("plan");
    openapiRequiredFields.add("purchaseSettings");
    openapiRequiredFields.add("shippingAddress");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSubscriptionbygroupIdRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSubscriptionbygroupIdRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSubscriptionbygroupIdRequest is not found in the empty JSON string", UpdateSubscriptionbygroupIdRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSubscriptionbygroupIdRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSubscriptionbygroupIdRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateSubscriptionbygroupIdRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("item").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `item` to be an array in the JSON string but got `%s`", jsonObj.get("item").toString()));
      }

      JsonArray jsonArrayitem = jsonObj.getAsJsonArray("item");
      // validate the required field `item` (array)
      for (int i = 0; i < jsonArrayitem.size(); i++) {
        Item1.validateJsonElement(jsonArrayitem.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("metadata").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }

      JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
      // validate the required field `metadata` (array)
      for (int i = 0; i < jsonArraymetadata.size(); i++) {
        Metadatum.validateJsonElement(jsonArraymetadata.get(i));
      };
      // validate the required field `plan`
      Plan.validateJsonElement(jsonObj.get("plan"));
      // validate the required field `purchaseSettings`
      PurchaseSettings.validateJsonElement(jsonObj.get("purchaseSettings"));
      // validate the required field `shippingAddress`
      ShippingAddress.validateJsonElement(jsonObj.get("shippingAddress"));
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSubscriptionbygroupIdRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSubscriptionbygroupIdRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSubscriptionbygroupIdRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSubscriptionbygroupIdRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSubscriptionbygroupIdRequest>() {
           @Override
           public void write(JsonWriter out, UpdateSubscriptionbygroupIdRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSubscriptionbygroupIdRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSubscriptionbygroupIdRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSubscriptionbygroupIdRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateSubscriptionbygroupIdRequest
   */
  public static UpdateSubscriptionbygroupIdRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSubscriptionbygroupIdRequest.class);
  }

  /**
   * Convert an instance of UpdateSubscriptionbygroupIdRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

