/*
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Metadatum;
import org.openapitools.client.model.Sku;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Item1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:11.020699-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Item1 {
  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "SubscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CYCLE_COUNT = "cycleCount";
  @SerializedName(SERIALIZED_NAME_CYCLE_COUNT)
  private Integer cycleCount;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public static final String SERIALIZED_NAME_IS_SKIPPED = "isSkipped";
  @SerializedName(SERIALIZED_NAME_IS_SKIPPED)
  private Boolean isSkipped;

  public static final String SERIALIZED_NAME_LAST_UPDATE = "lastUpdate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE)
  private String lastUpdate;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<Metadatum> metadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORIGINAL_ITEM_INDEX = "originalItemIndex";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_ITEM_INDEX)
  private Integer originalItemIndex;

  public static final String SERIALIZED_NAME_ORIGINAL_ORDER_ID = "originalOrderId";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_ORDER_ID)
  private String originalOrderId;

  public static final String SERIALIZED_NAME_PRICE_AT_SUBSCRIPTION_DATE = "priceAtSubscriptionDate";
  @SerializedName(SERIALIZED_NAME_PRICE_AT_SUBSCRIPTION_DATE)
  private Integer priceAtSubscriptionDate;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_SELLING_PRICE = "sellingPrice";
  @SerializedName(SERIALIZED_NAME_SELLING_PRICE)
  private Integer sellingPrice;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private Sku sku;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public Item1() {
  }

  public Item1 subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * Get subscriptionId
   * @return subscriptionId
   */
  @javax.annotation.Nonnull
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public Item1 createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Item1 cycleCount(Integer cycleCount) {
    this.cycleCount = cycleCount;
    return this;
  }

  /**
   * Get cycleCount
   * @return cycleCount
   */
  @javax.annotation.Nonnull
  public Integer getCycleCount() {
    return cycleCount;
  }

  public void setCycleCount(Integer cycleCount) {
    this.cycleCount = cycleCount;
  }


  public Item1 endpoint(String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * Get endpoint
   * @return endpoint
   */
  @javax.annotation.Nonnull
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }


  public Item1 isSkipped(Boolean isSkipped) {
    this.isSkipped = isSkipped;
    return this;
  }

  /**
   * Get isSkipped
   * @return isSkipped
   */
  @javax.annotation.Nonnull
  public Boolean getIsSkipped() {
    return isSkipped;
  }

  public void setIsSkipped(Boolean isSkipped) {
    this.isSkipped = isSkipped;
  }


  public Item1 lastUpdate(String lastUpdate) {
    this.lastUpdate = lastUpdate;
    return this;
  }

  /**
   * Get lastUpdate
   * @return lastUpdate
   */
  @javax.annotation.Nonnull
  public String getLastUpdate() {
    return lastUpdate;
  }

  public void setLastUpdate(String lastUpdate) {
    this.lastUpdate = lastUpdate;
  }


  public Item1 metadata(List<Metadatum> metadata) {
    this.metadata = metadata;
    return this;
  }

  public Item1 addMetadataItem(Metadatum metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * 
   * @return metadata
   */
  @javax.annotation.Nonnull
  public List<Metadatum> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<Metadatum> metadata) {
    this.metadata = metadata;
  }


  public Item1 originalItemIndex(Integer originalItemIndex) {
    this.originalItemIndex = originalItemIndex;
    return this;
  }

  /**
   * Get originalItemIndex
   * @return originalItemIndex
   */
  @javax.annotation.Nonnull
  public Integer getOriginalItemIndex() {
    return originalItemIndex;
  }

  public void setOriginalItemIndex(Integer originalItemIndex) {
    this.originalItemIndex = originalItemIndex;
  }


  public Item1 originalOrderId(String originalOrderId) {
    this.originalOrderId = originalOrderId;
    return this;
  }

  /**
   * Get originalOrderId
   * @return originalOrderId
   */
  @javax.annotation.Nonnull
  public String getOriginalOrderId() {
    return originalOrderId;
  }

  public void setOriginalOrderId(String originalOrderId) {
    this.originalOrderId = originalOrderId;
  }


  public Item1 priceAtSubscriptionDate(Integer priceAtSubscriptionDate) {
    this.priceAtSubscriptionDate = priceAtSubscriptionDate;
    return this;
  }

  /**
   * Get priceAtSubscriptionDate
   * @return priceAtSubscriptionDate
   */
  @javax.annotation.Nonnull
  public Integer getPriceAtSubscriptionDate() {
    return priceAtSubscriptionDate;
  }

  public void setPriceAtSubscriptionDate(Integer priceAtSubscriptionDate) {
    this.priceAtSubscriptionDate = priceAtSubscriptionDate;
  }


  public Item1 quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nonnull
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public Item1 sellingPrice(Integer sellingPrice) {
    this.sellingPrice = sellingPrice;
    return this;
  }

  /**
   * Get sellingPrice
   * @return sellingPrice
   */
  @javax.annotation.Nonnull
  public Integer getSellingPrice() {
    return sellingPrice;
  }

  public void setSellingPrice(Integer sellingPrice) {
    this.sellingPrice = sellingPrice;
  }


  public Item1 sku(Sku sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Get sku
   * @return sku
   */
  @javax.annotation.Nonnull
  public Sku getSku() {
    return sku;
  }

  public void setSku(Sku sku) {
    this.sku = sku;
  }


  public Item1 status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Item1 item1 = (Item1) o;
    return Objects.equals(this.subscriptionId, item1.subscriptionId) &&
        Objects.equals(this.createdAt, item1.createdAt) &&
        Objects.equals(this.cycleCount, item1.cycleCount) &&
        Objects.equals(this.endpoint, item1.endpoint) &&
        Objects.equals(this.isSkipped, item1.isSkipped) &&
        Objects.equals(this.lastUpdate, item1.lastUpdate) &&
        Objects.equals(this.metadata, item1.metadata) &&
        Objects.equals(this.originalItemIndex, item1.originalItemIndex) &&
        Objects.equals(this.originalOrderId, item1.originalOrderId) &&
        Objects.equals(this.priceAtSubscriptionDate, item1.priceAtSubscriptionDate) &&
        Objects.equals(this.quantity, item1.quantity) &&
        Objects.equals(this.sellingPrice, item1.sellingPrice) &&
        Objects.equals(this.sku, item1.sku) &&
        Objects.equals(this.status, item1.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subscriptionId, createdAt, cycleCount, endpoint, isSkipped, lastUpdate, metadata, originalItemIndex, originalOrderId, priceAtSubscriptionDate, quantity, sellingPrice, sku, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Item1 {\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    cycleCount: ").append(toIndentedString(cycleCount)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    isSkipped: ").append(toIndentedString(isSkipped)).append("\n");
    sb.append("    lastUpdate: ").append(toIndentedString(lastUpdate)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    originalItemIndex: ").append(toIndentedString(originalItemIndex)).append("\n");
    sb.append("    originalOrderId: ").append(toIndentedString(originalOrderId)).append("\n");
    sb.append("    priceAtSubscriptionDate: ").append(toIndentedString(priceAtSubscriptionDate)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    sellingPrice: ").append(toIndentedString(sellingPrice)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SubscriptionId");
    openapiFields.add("createdAt");
    openapiFields.add("cycleCount");
    openapiFields.add("endpoint");
    openapiFields.add("isSkipped");
    openapiFields.add("lastUpdate");
    openapiFields.add("metadata");
    openapiFields.add("originalItemIndex");
    openapiFields.add("originalOrderId");
    openapiFields.add("priceAtSubscriptionDate");
    openapiFields.add("quantity");
    openapiFields.add("sellingPrice");
    openapiFields.add("sku");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SubscriptionId");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("cycleCount");
    openapiRequiredFields.add("endpoint");
    openapiRequiredFields.add("isSkipped");
    openapiRequiredFields.add("lastUpdate");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("originalItemIndex");
    openapiRequiredFields.add("originalOrderId");
    openapiRequiredFields.add("priceAtSubscriptionDate");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("sellingPrice");
    openapiRequiredFields.add("sku");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Item1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Item1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Item1 is not found in the empty JSON string", Item1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Item1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Item1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Item1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("SubscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SubscriptionId").toString()));
      }
      if (!jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if (!jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      if (!jsonObj.get("lastUpdate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdate").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("metadata").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }

      JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
      // validate the required field `metadata` (array)
      for (int i = 0; i < jsonArraymetadata.size(); i++) {
        Metadatum.validateJsonElement(jsonArraymetadata.get(i));
      };
      if (!jsonObj.get("originalOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalOrderId").toString()));
      }
      // validate the required field `sku`
      Sku.validateJsonElement(jsonObj.get("sku"));
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Item1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Item1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Item1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Item1.class));

       return (TypeAdapter<T>) new TypeAdapter<Item1>() {
           @Override
           public void write(JsonWriter out, Item1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Item1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Item1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Item1
   * @throws IOException if the JSON string is invalid with respect to Item1
   */
  public static Item1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Item1.class);
  }

  /**
   * Convert an instance of Item1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

