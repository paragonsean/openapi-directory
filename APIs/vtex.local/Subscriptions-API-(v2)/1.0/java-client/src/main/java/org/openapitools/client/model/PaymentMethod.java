/*
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentMethod
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:11.020699-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentMethod {
  public static final String SERIALIZED_NAME_PAYMENT_ACCOUNT_ID = "paymentAccountId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ACCOUNT_ID)
  private String paymentAccountId;

  public static final String SERIALIZED_NAME_PAYMENT_SYSTEM = "paymentSystem";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SYSTEM)
  private String paymentSystem;

  public PaymentMethod() {
  }

  public PaymentMethod paymentAccountId(String paymentAccountId) {
    this.paymentAccountId = paymentAccountId;
    return this;
  }

  /**
   * Get paymentAccountId
   * @return paymentAccountId
   */
  @javax.annotation.Nonnull
  public String getPaymentAccountId() {
    return paymentAccountId;
  }

  public void setPaymentAccountId(String paymentAccountId) {
    this.paymentAccountId = paymentAccountId;
  }


  public PaymentMethod paymentSystem(String paymentSystem) {
    this.paymentSystem = paymentSystem;
    return this;
  }

  /**
   * Get paymentSystem
   * @return paymentSystem
   */
  @javax.annotation.Nonnull
  public String getPaymentSystem() {
    return paymentSystem;
  }

  public void setPaymentSystem(String paymentSystem) {
    this.paymentSystem = paymentSystem;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentMethod paymentMethod = (PaymentMethod) o;
    return Objects.equals(this.paymentAccountId, paymentMethod.paymentAccountId) &&
        Objects.equals(this.paymentSystem, paymentMethod.paymentSystem);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentAccountId, paymentSystem);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentMethod {\n");
    sb.append("    paymentAccountId: ").append(toIndentedString(paymentAccountId)).append("\n");
    sb.append("    paymentSystem: ").append(toIndentedString(paymentSystem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("paymentAccountId");
    openapiFields.add("paymentSystem");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("paymentAccountId");
    openapiRequiredFields.add("paymentSystem");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentMethod
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentMethod.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentMethod is not found in the empty JSON string", PaymentMethod.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentMethod.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentMethod` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentMethod.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("paymentAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentAccountId").toString()));
      }
      if (!jsonObj.get("paymentSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentSystem").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentMethod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentMethod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentMethod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentMethod.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentMethod>() {
           @Override
           public void write(JsonWriter out, PaymentMethod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentMethod read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentMethod given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentMethod
   * @throws IOException if the JSON string is invalid with respect to PaymentMethod
   */
  public static PaymentMethod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentMethod.class);
  }

  /**
   * Convert an instance of PaymentMethod to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

