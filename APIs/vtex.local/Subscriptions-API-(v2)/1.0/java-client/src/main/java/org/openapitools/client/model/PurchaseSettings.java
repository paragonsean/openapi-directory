/*
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PaymentMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PurchaseSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:11.020699-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PurchaseSettings {
  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "paymentMethod";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private PaymentMethod paymentMethod;

  public static final String SERIALIZED_NAME_PURCHASE_DAY = "purchaseDay";
  @SerializedName(SERIALIZED_NAME_PURCHASE_DAY)
  private String purchaseDay;

  public static final String SERIALIZED_NAME_SALES_CHANNEL = "salesChannel";
  @SerializedName(SERIALIZED_NAME_SALES_CHANNEL)
  private String salesChannel;

  public static final String SERIALIZED_NAME_SELECTED_SLA = "selectedSla";
  @SerializedName(SERIALIZED_NAME_SELECTED_SLA)
  private String selectedSla;

  public static final String SERIALIZED_NAME_SELLER = "seller";
  @SerializedName(SERIALIZED_NAME_SELLER)
  private String seller;

  public PurchaseSettings() {
  }

  public PurchaseSettings currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nonnull
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public PurchaseSettings paymentMethod(PaymentMethod paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  /**
   * Get paymentMethod
   * @return paymentMethod
   */
  @javax.annotation.Nonnull
  public PaymentMethod getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(PaymentMethod paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public PurchaseSettings purchaseDay(String purchaseDay) {
    this.purchaseDay = purchaseDay;
    return this;
  }

  /**
   * Get purchaseDay
   * @return purchaseDay
   */
  @javax.annotation.Nonnull
  public String getPurchaseDay() {
    return purchaseDay;
  }

  public void setPurchaseDay(String purchaseDay) {
    this.purchaseDay = purchaseDay;
  }


  public PurchaseSettings salesChannel(String salesChannel) {
    this.salesChannel = salesChannel;
    return this;
  }

  /**
   * Get salesChannel
   * @return salesChannel
   */
  @javax.annotation.Nonnull
  public String getSalesChannel() {
    return salesChannel;
  }

  public void setSalesChannel(String salesChannel) {
    this.salesChannel = salesChannel;
  }


  public PurchaseSettings selectedSla(String selectedSla) {
    this.selectedSla = selectedSla;
    return this;
  }

  /**
   * Get selectedSla
   * @return selectedSla
   */
  @javax.annotation.Nonnull
  public String getSelectedSla() {
    return selectedSla;
  }

  public void setSelectedSla(String selectedSla) {
    this.selectedSla = selectedSla;
  }


  public PurchaseSettings seller(String seller) {
    this.seller = seller;
    return this;
  }

  /**
   * Get seller
   * @return seller
   */
  @javax.annotation.Nonnull
  public String getSeller() {
    return seller;
  }

  public void setSeller(String seller) {
    this.seller = seller;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PurchaseSettings purchaseSettings = (PurchaseSettings) o;
    return Objects.equals(this.currencyCode, purchaseSettings.currencyCode) &&
        Objects.equals(this.paymentMethod, purchaseSettings.paymentMethod) &&
        Objects.equals(this.purchaseDay, purchaseSettings.purchaseDay) &&
        Objects.equals(this.salesChannel, purchaseSettings.salesChannel) &&
        Objects.equals(this.selectedSla, purchaseSettings.selectedSla) &&
        Objects.equals(this.seller, purchaseSettings.seller);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyCode, paymentMethod, purchaseDay, salesChannel, selectedSla, seller);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PurchaseSettings {\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    purchaseDay: ").append(toIndentedString(purchaseDay)).append("\n");
    sb.append("    salesChannel: ").append(toIndentedString(salesChannel)).append("\n");
    sb.append("    selectedSla: ").append(toIndentedString(selectedSla)).append("\n");
    sb.append("    seller: ").append(toIndentedString(seller)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currencyCode");
    openapiFields.add("paymentMethod");
    openapiFields.add("purchaseDay");
    openapiFields.add("salesChannel");
    openapiFields.add("selectedSla");
    openapiFields.add("seller");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currencyCode");
    openapiRequiredFields.add("paymentMethod");
    openapiRequiredFields.add("purchaseDay");
    openapiRequiredFields.add("salesChannel");
    openapiRequiredFields.add("selectedSla");
    openapiRequiredFields.add("seller");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PurchaseSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PurchaseSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PurchaseSettings is not found in the empty JSON string", PurchaseSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PurchaseSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PurchaseSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PurchaseSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      // validate the required field `paymentMethod`
      PaymentMethod.validateJsonElement(jsonObj.get("paymentMethod"));
      if (!jsonObj.get("purchaseDay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseDay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseDay").toString()));
      }
      if (!jsonObj.get("salesChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesChannel").toString()));
      }
      if (!jsonObj.get("selectedSla").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectedSla` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectedSla").toString()));
      }
      if (!jsonObj.get("seller").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seller` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PurchaseSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PurchaseSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PurchaseSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PurchaseSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<PurchaseSettings>() {
           @Override
           public void write(JsonWriter out, PurchaseSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PurchaseSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PurchaseSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PurchaseSettings
   * @throws IOException if the JSON string is invalid with respect to PurchaseSettings
   */
  public static PurchaseSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PurchaseSettings.class);
  }

  /**
   * Convert an instance of PurchaseSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

