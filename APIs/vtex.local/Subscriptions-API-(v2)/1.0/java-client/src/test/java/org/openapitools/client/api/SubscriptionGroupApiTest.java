/*
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AdditemsubscriptionGroupIdRequest;
import org.openapitools.client.model.InsertAddressesbygroupIdRequest;
import org.openapitools.client.model.UpdateSubscriptionbygroupIdRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubscriptionGroupApi
 */
@Disabled
public class SubscriptionGroupApiTest {

    private final SubscriptionGroupApi api = new SubscriptionGroupApi();

    /**
     * Add Subscription item by groupId
     *
     * Adds an SKU to a given Subscription, filtering by groupId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void additemsubscriptionGroupIdTest() throws ApiException {
        String groupId = null;
        String accept = null;
        String contentType = null;
        AdditemsubscriptionGroupIdRequest additemsubscriptionGroupIdRequest = null;
        api.additemsubscriptionGroupId(groupId, accept, contentType, additemsubscriptionGroupIdRequest);
        // TODO: test validations
    }

    /**
     * Cancel Subscription by groupId
     *
     * Cancels Subscription by &#x60;groupId&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelSubscriptionbygroupIdTest() throws ApiException {
        String accept = null;
        String contentType = null;
        String groupId = null;
        api.cancelSubscriptionbygroupId(accept, contentType, groupId);
        // TODO: test validations
    }

    /**
     * List All subscription groups
     *
     * Retrieves all subscription groups in your store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllsubscriptiongroupTest() throws ApiException {
        String contentType = null;
        String accept = null;
        api.getAllsubscriptiongroup(contentType, accept);
        // TODO: test validations
    }

    /**
     * List Subscription group&#39;s Configuration
     *
     * Retrieves details about a given subscription group&#39;s configuration, filtering by groupId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigsubscriptionsgroupTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String groupId = null;
        api.getConfigsubscriptionsgroup(contentType, accept, groupId);
        // TODO: test validations
    }

    /**
     * Get Conversation Message by groupId
     *
     * Retrieves the conversation of a given Subscription group, filtering by groupId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConversationMessagebygroupIdTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String groupId = null;
        api.getConversationMessagebygroupId(contentType, accept, groupId);
        // TODO: test validations
    }

    /**
     * Get Next purchase
     *
     * Lists details of a given subscription group&#39;s next purchase, filtering by dateStr.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNextpurchaseTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String dateStr = null;
        api.getNextpurchase(contentType, accept, dateStr);
        // TODO: test validations
    }

    /**
     * Get Simulation by subscription-group
     *
     * Retrieves Subscription simulations, filtering by groupId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSimulatebysubscriptionGroupTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String groupId = null;
        api.getSimulatebysubscriptionGroup(contentType, accept, groupId);
        // TODO: test validations
    }

    /**
     * Get Subscription by groupId
     *
     * Lists Subscription details, filtering by &#x60;groupId&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionbygroupIdTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String groupId = null;
        api.getSubscriptionbygroupId(contentType, accept, groupId);
        // TODO: test validations
    }

    /**
     * Get addresses by groupId
     *
     * Lists addresses linked to a given Subscription group, filtering by groupId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getaddressesbygroupIdTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String groupId = null;
        api.getaddressesbygroupId(contentType, accept, groupId);
        // TODO: test validations
    }

    /**
     * Get frequency options by groupId
     *
     * Lists frequency options of a given Subscription group, filtering by groupId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getfrequencyoptionsbygroupIdTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String groupId = null;
        api.getfrequencyoptionsbygroupId(contentType, accept, groupId);
        // TODO: test validations
    }

    /**
     * Get payment System by groupId
     *
     * Retrieves payment system&#39;s information of a given Subscription group, filtering by groupId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getpaymentSystembygroupIdTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String groupId = null;
        api.getpaymentSystembygroupId(contentType, accept, groupId);
        // TODO: test validations
    }

    /**
     * Get subscription group list
     *
     * Retrieves a list of Subscription groups in your store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getsubscriptiongrouplistTest() throws ApiException {
        String contentType = null;
        String accept = null;
        api.getsubscriptiongrouplist(contentType, accept);
        // TODO: test validations
    }

    /**
     * List &#39;Will create&#39; by groupId
     *
     * Retrieves Subscription groups listed as &#39;will create&#39;, filtering by groupId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getwillcreatebygroupIdTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String groupId = null;
        api.getwillcreatebygroupId(contentType, accept, groupId);
        // TODO: test validations
    }

    /**
     * Insert Addresses by groupId
     *
     * Insert address information of a given Subscription group, filtering by groupId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void insertAddressesbygroupIdTest() throws ApiException {
        String groupId = null;
        String accept = null;
        String contentType = null;
        InsertAddressesbygroupIdRequest insertAddressesbygroupIdRequest = null;
        api.insertAddressesbygroupId(groupId, accept, contentType, insertAddressesbygroupIdRequest);
        // TODO: test validations
    }

    /**
     * Retry subscription by groupId
     *
     * Permits the retry of a Subscription group, via API, filtering by groupId and instanceId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrysubscriptionbygroupIdTest() throws ApiException {
        String groupid = null;
        String instanceId = null;
        String accept = null;
        String contentType = null;
        api.retrysubscriptionbygroupId(groupid, instanceId, accept, contentType);
        // TODO: test validations
    }

    /**
     * Update Subscription by groupId
     *
     * Updates a Subscription by &#x60;groupId&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionbygroupIdTest() throws ApiException {
        String groupId = null;
        UpdateSubscriptionbygroupIdRequest updateSubscriptionbygroupIdRequest = null;
        api.updateSubscriptionbygroupId(groupId, updateSubscriptionbygroupIdRequest);
        // TODO: test validations
    }

}
