/*
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.InsertAddressesforSubscriptionRequest;
import org.openapitools.client.model.UpdateSubscriptionsbySubscriptionIdRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubscriptionsApi
 */
@Disabled
public class SubscriptionsApiTest {

    private final SubscriptionsApi api = new SubscriptionsApi();

    /**
     * Cancel Subscriptions by SubscriptionId
     *
     * Cancels all Subscriptions of a subscription group. This operation does not have a rollback. Once cancelled, it cannot be re-activated
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelSubscriptionsbySubscriptionIdTest() throws ApiException {
        String accept = null;
        String contentType = null;
        String subscriptionId = null;
        api.cancelSubscriptionsbySubscriptionId(accept, contentType, subscriptionId);
        // TODO: test validations
    }

    /**
     * Get Subscription List
     *
     * Retrieves a list of Subscriptions linked to your store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionListTest() throws ApiException {
        String contentType = null;
        String accept = null;
        api.getSubscriptionList(contentType, accept);
        // TODO: test validations
    }

    /**
     * Get frequency options by subscriptionId
     *
     * Lists frequency options for the Subscription, filtering by &#x60;subscriptionId&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getfrequencyoptionsbysubscriptionIdTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String subscriptionId = null;
        api.getfrequencyoptionsbysubscriptionId(contentType, accept, subscriptionId);
        // TODO: test validations
    }

    /**
     * Retrieve subscription by ID
     *
     * Lists Subscription&#39;s details, searching by &#x60;subscriptionId&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getsubscriptionbyIdTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String subscriptionId = null;
        api.getsubscriptionbyId(contentType, accept, subscriptionId);
        // TODO: test validations
    }

    /**
     * Retrieve customer&#39;s subscriptions
     *
     * Retrieves details of a given customer&#39;s subscriptions, searching by that customer&#39;s &#x60;customerId&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getsubscriptionstocustomerTest() throws ApiException {
        String customerId = null;
        String contentType = null;
        String accept = null;
        api.getsubscriptionstocustomer(customerId, contentType, accept);
        // TODO: test validations
    }

    /**
     * Insert Addresses for Subscription
     *
     * Inserts address&#39;s information to complement the Subscription details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void insertAddressesforSubscriptionTest() throws ApiException {
        String subscriptionId = null;
        String contentType = null;
        String accept = null;
        List<InsertAddressesforSubscriptionRequest> insertAddressesforSubscriptionRequest = null;
        api.insertAddressesforSubscription(subscriptionId, contentType, accept, insertAddressesforSubscriptionRequest);
        // TODO: test validations
    }

    /**
     * Update Subscriptions by SubscriptionId
     *
     * Update, add or alter information of a given Subscription, filtering by &#x60;subscriptionId&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionsbySubscriptionIdTest() throws ApiException {
        String subscriptionId = null;
        String contentType = null;
        String accept = null;
        UpdateSubscriptionsbySubscriptionIdRequest updateSubscriptionsbySubscriptionIdRequest = null;
        api.updateSubscriptionsbySubscriptionId(subscriptionId, contentType, accept, updateSubscriptionsbySubscriptionIdRequest);
        // TODO: test validations
    }

}
