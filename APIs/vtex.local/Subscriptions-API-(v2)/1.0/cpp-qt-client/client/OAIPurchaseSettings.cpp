/**
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseSettings::OAIPurchaseSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseSettings::OAIPurchaseSettings() {
    this->initializeModel();
}

OAIPurchaseSettings::~OAIPurchaseSettings() {}

void OAIPurchaseSettings::initializeModel() {

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_purchase_day_isSet = false;
    m_purchase_day_isValid = false;

    m_sales_channel_isSet = false;
    m_sales_channel_isValid = false;

    m_selected_sla_isSet = false;
    m_selected_sla_isValid = false;

    m_seller_isSet = false;
    m_seller_isValid = false;
}

void OAIPurchaseSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseSettings::fromJsonObject(QJsonObject json) {

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_purchase_day_isValid = ::OpenAPI::fromJsonValue(m_purchase_day, json[QString("purchaseDay")]);
    m_purchase_day_isSet = !json[QString("purchaseDay")].isNull() && m_purchase_day_isValid;

    m_sales_channel_isValid = ::OpenAPI::fromJsonValue(m_sales_channel, json[QString("salesChannel")]);
    m_sales_channel_isSet = !json[QString("salesChannel")].isNull() && m_sales_channel_isValid;

    m_selected_sla_isValid = ::OpenAPI::fromJsonValue(m_selected_sla, json[QString("selectedSla")]);
    m_selected_sla_isSet = !json[QString("selectedSla")].isNull() && m_selected_sla_isValid;

    m_seller_isValid = ::OpenAPI::fromJsonValue(m_seller, json[QString("seller")]);
    m_seller_isSet = !json[QString("seller")].isNull() && m_seller_isValid;
}

QString OAIPurchaseSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_purchase_day_isSet) {
        obj.insert(QString("purchaseDay"), ::OpenAPI::toJsonValue(m_purchase_day));
    }
    if (m_sales_channel_isSet) {
        obj.insert(QString("salesChannel"), ::OpenAPI::toJsonValue(m_sales_channel));
    }
    if (m_selected_sla_isSet) {
        obj.insert(QString("selectedSla"), ::OpenAPI::toJsonValue(m_selected_sla));
    }
    if (m_seller_isSet) {
        obj.insert(QString("seller"), ::OpenAPI::toJsonValue(m_seller));
    }
    return obj;
}

QString OAIPurchaseSettings::getCurrencyCode() const {
    return m_currency_code;
}
void OAIPurchaseSettings::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIPurchaseSettings::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIPurchaseSettings::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

OAIPaymentMethod OAIPurchaseSettings::getPaymentMethod() const {
    return m_payment_method;
}
void OAIPurchaseSettings::setPaymentMethod(const OAIPaymentMethod &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIPurchaseSettings::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIPurchaseSettings::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAIPurchaseSettings::getPurchaseDay() const {
    return m_purchase_day;
}
void OAIPurchaseSettings::setPurchaseDay(const QString &purchase_day) {
    m_purchase_day = purchase_day;
    m_purchase_day_isSet = true;
}

bool OAIPurchaseSettings::is_purchase_day_Set() const{
    return m_purchase_day_isSet;
}

bool OAIPurchaseSettings::is_purchase_day_Valid() const{
    return m_purchase_day_isValid;
}

QString OAIPurchaseSettings::getSalesChannel() const {
    return m_sales_channel;
}
void OAIPurchaseSettings::setSalesChannel(const QString &sales_channel) {
    m_sales_channel = sales_channel;
    m_sales_channel_isSet = true;
}

bool OAIPurchaseSettings::is_sales_channel_Set() const{
    return m_sales_channel_isSet;
}

bool OAIPurchaseSettings::is_sales_channel_Valid() const{
    return m_sales_channel_isValid;
}

QString OAIPurchaseSettings::getSelectedSla() const {
    return m_selected_sla;
}
void OAIPurchaseSettings::setSelectedSla(const QString &selected_sla) {
    m_selected_sla = selected_sla;
    m_selected_sla_isSet = true;
}

bool OAIPurchaseSettings::is_selected_sla_Set() const{
    return m_selected_sla_isSet;
}

bool OAIPurchaseSettings::is_selected_sla_Valid() const{
    return m_selected_sla_isValid;
}

QString OAIPurchaseSettings::getSeller() const {
    return m_seller;
}
void OAIPurchaseSettings::setSeller(const QString &seller) {
    m_seller = seller;
    m_seller_isSet = true;
}

bool OAIPurchaseSettings::is_seller_Set() const{
    return m_seller_isSet;
}

bool OAIPurchaseSettings::is_seller_Valid() const{
    return m_seller_isValid;
}

bool OAIPurchaseSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_sla_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_code_isValid && m_payment_method_isValid && m_purchase_day_isValid && m_sales_channel_isValid && m_selected_sla_isValid && m_seller_isValid && true;
}

} // namespace OpenAPI
