/**
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadatum.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetadatum::OAIMetadatum(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetadatum::OAIMetadatum() {
    this->initializeModel();
}

OAIMetadatum::~OAIMetadatum() {}

void OAIMetadatum::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIMetadatum::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetadatum::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAIMetadatum::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetadatum::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

QString OAIMetadatum::getName() const {
    return m_name;
}
void OAIMetadatum::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMetadatum::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMetadatum::is_name_Valid() const{
    return m_name_isValid;
}

OAIProperties OAIMetadatum::getProperties() const {
    return m_properties;
}
void OAIMetadatum::setProperties(const OAIProperties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIMetadatum::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIMetadatum::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIMetadatum::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetadatum::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_properties_isValid && true;
}

} // namespace OpenAPI
