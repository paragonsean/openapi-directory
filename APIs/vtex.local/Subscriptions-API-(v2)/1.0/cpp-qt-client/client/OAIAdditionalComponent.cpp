/**
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdditionalComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdditionalComponent::OAIAdditionalComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdditionalComponent::OAIAdditionalComponent() {
    this->initializeModel();
}

OAIAdditionalComponent::~OAIAdditionalComponent() {}

void OAIAdditionalComponent::initializeModel() {

    m_long_name_isSet = false;
    m_long_name_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;
}

void OAIAdditionalComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdditionalComponent::fromJsonObject(QJsonObject json) {

    m_long_name_isValid = ::OpenAPI::fromJsonValue(m_long_name, json[QString("longName")]);
    m_long_name_isSet = !json[QString("longName")].isNull() && m_long_name_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("shortName")]);
    m_short_name_isSet = !json[QString("shortName")].isNull() && m_short_name_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;
}

QString OAIAdditionalComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdditionalComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_long_name_isSet) {
        obj.insert(QString("longName"), ::OpenAPI::toJsonValue(m_long_name));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("shortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    return obj;
}

QString OAIAdditionalComponent::getLongName() const {
    return m_long_name;
}
void OAIAdditionalComponent::setLongName(const QString &long_name) {
    m_long_name = long_name;
    m_long_name_isSet = true;
}

bool OAIAdditionalComponent::is_long_name_Set() const{
    return m_long_name_isSet;
}

bool OAIAdditionalComponent::is_long_name_Valid() const{
    return m_long_name_isValid;
}

QString OAIAdditionalComponent::getShortName() const {
    return m_short_name;
}
void OAIAdditionalComponent::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIAdditionalComponent::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIAdditionalComponent::is_short_name_Valid() const{
    return m_short_name_isValid;
}

QList<QString> OAIAdditionalComponent::getTypes() const {
    return m_types;
}
void OAIAdditionalComponent::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIAdditionalComponent::is_types_Set() const{
    return m_types_isSet;
}

bool OAIAdditionalComponent::is_types_Valid() const{
    return m_types_isValid;
}

bool OAIAdditionalComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_long_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdditionalComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_long_name_isValid && m_short_name_isValid && m_types_isValid && true;
}

} // namespace OpenAPI
