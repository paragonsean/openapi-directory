/**
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReportApi_H
#define OAI_OAIReportApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReportApi : public QObject {
    Q_OBJECT

public:
    OAIReportApi(const int timeOut = 0);
    ~OAIReportApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  report_id QString [required]
    */
    virtual void getreportstatusbyID(const QString &content_type, const QString &accept, const QString &report_id);

    /**
    * @param[in]  requester_email QString [required]
    * @param[in]  status qint32 [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void requestreportbyStatus(const QString &requester_email, const qint32 &status, const QString &content_type, const QString &accept);

    /**
    * @param[in]  requester_email QString [required]
    * @param[in]  begin_date qint32 [required]
    * @param[in]  end_date qint32 [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void requestreportbydate(const QString &requester_email, const qint32 &begin_date, const qint32 &end_date, const QString &content_type, const QString &accept);

    /**
    * @param[in]  requester_email QString [required]
    * @param[in]  begin_date qint32 [required]
    * @param[in]  end_date qint32 [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void requestreportbyorderdate(const QString &requester_email, const qint32 &begin_date, const qint32 &end_date, const QString &content_type, const QString &accept);

    /**
    * @param[in]  requester_email QString [required]
    * @param[in]  begin_date qint32 [required]
    * @param[in]  end_date qint32 [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void requestreportbyschedule(const QString &requester_email, const qint32 &begin_date, const qint32 &end_date, const QString &content_type, const QString &accept);

    /**
    * @param[in]  requester_email QString [required]
    * @param[in]  begin_date qint32 [required]
    * @param[in]  end_date qint32 [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void requestreportbyupdate(const QString &requester_email, const qint32 &begin_date, const qint32 &end_date, const QString &content_type, const QString &accept);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getreportstatusbyIDCallback(OAIHttpRequestWorker *worker);
    void requestreportbyStatusCallback(OAIHttpRequestWorker *worker);
    void requestreportbydateCallback(OAIHttpRequestWorker *worker);
    void requestreportbyorderdateCallback(OAIHttpRequestWorker *worker);
    void requestreportbyscheduleCallback(OAIHttpRequestWorker *worker);
    void requestreportbyupdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getreportstatusbyIDSignal();
    void requestreportbyStatusSignal();
    void requestreportbydateSignal();
    void requestreportbyorderdateSignal();
    void requestreportbyscheduleSignal();
    void requestreportbyupdateSignal();


    void getreportstatusbyIDSignalFull(OAIHttpRequestWorker *worker);
    void requestreportbyStatusSignalFull(OAIHttpRequestWorker *worker);
    void requestreportbydateSignalFull(OAIHttpRequestWorker *worker);
    void requestreportbyorderdateSignalFull(OAIHttpRequestWorker *worker);
    void requestreportbyscheduleSignalFull(OAIHttpRequestWorker *worker);
    void requestreportbyupdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getreportstatusbyIDSignalError() instead")
    void getreportstatusbyIDSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getreportstatusbyIDSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestreportbyStatusSignalError() instead")
    void requestreportbyStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void requestreportbyStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestreportbydateSignalError() instead")
    void requestreportbydateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void requestreportbydateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestreportbyorderdateSignalError() instead")
    void requestreportbyorderdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void requestreportbyorderdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestreportbyscheduleSignalError() instead")
    void requestreportbyscheduleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void requestreportbyscheduleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestreportbyupdateSignalError() instead")
    void requestreportbyupdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void requestreportbyupdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getreportstatusbyIDSignalErrorFull() instead")
    void getreportstatusbyIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getreportstatusbyIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestreportbyStatusSignalErrorFull() instead")
    void requestreportbyStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestreportbyStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestreportbydateSignalErrorFull() instead")
    void requestreportbydateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestreportbydateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestreportbyorderdateSignalErrorFull() instead")
    void requestreportbyorderdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestreportbyorderdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestreportbyscheduleSignalErrorFull() instead")
    void requestreportbyscheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestreportbyscheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestreportbyupdateSignalErrorFull() instead")
    void requestreportbyupdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestreportbyupdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
