/**
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsertAddressesforSubscriptionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsertAddressesforSubscriptionRequest::OAIInsertAddressesforSubscriptionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsertAddressesforSubscriptionRequest::OAIInsertAddressesforSubscriptionRequest() {
    this->initializeModel();
}

OAIInsertAddressesforSubscriptionRequest::~OAIInsertAddressesforSubscriptionRequest() {}

void OAIInsertAddressesforSubscriptionRequest::initializeModel() {

    m_additional_components_isSet = false;
    m_additional_components_isValid = false;

    m_address_id_isSet = false;
    m_address_id_isValid = false;

    m_address_name_isSet = false;
    m_address_name_isValid = false;

    m_address_type_isSet = false;
    m_address_type_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_complement_isSet = false;
    m_complement_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_formatted_address_isSet = false;
    m_formatted_address_isValid = false;

    m_geo_coordinate_isSet = false;
    m_geo_coordinate_isValid = false;

    m_neighborhood_isSet = false;
    m_neighborhood_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_receiver_name_isSet = false;
    m_receiver_name_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;
}

void OAIInsertAddressesforSubscriptionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsertAddressesforSubscriptionRequest::fromJsonObject(QJsonObject json) {

    m_additional_components_isValid = ::OpenAPI::fromJsonValue(m_additional_components, json[QString("additionalComponents")]);
    m_additional_components_isSet = !json[QString("additionalComponents")].isNull() && m_additional_components_isValid;

    m_address_id_isValid = ::OpenAPI::fromJsonValue(m_address_id, json[QString("addressId")]);
    m_address_id_isSet = !json[QString("addressId")].isNull() && m_address_id_isValid;

    m_address_name_isValid = ::OpenAPI::fromJsonValue(m_address_name, json[QString("addressName")]);
    m_address_name_isSet = !json[QString("addressName")].isNull() && m_address_name_isValid;

    m_address_type_isValid = ::OpenAPI::fromJsonValue(m_address_type, json[QString("addressType")]);
    m_address_type_isSet = !json[QString("addressType")].isNull() && m_address_type_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_complement_isValid = ::OpenAPI::fromJsonValue(m_complement, json[QString("complement")]);
    m_complement_isSet = !json[QString("complement")].isNull() && m_complement_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_formatted_address_isValid = ::OpenAPI::fromJsonValue(m_formatted_address, json[QString("formattedAddress")]);
    m_formatted_address_isSet = !json[QString("formattedAddress")].isNull() && m_formatted_address_isValid;

    m_geo_coordinate_isValid = ::OpenAPI::fromJsonValue(m_geo_coordinate, json[QString("geoCoordinate")]);
    m_geo_coordinate_isSet = !json[QString("geoCoordinate")].isNull() && m_geo_coordinate_isValid;

    m_neighborhood_isValid = ::OpenAPI::fromJsonValue(m_neighborhood, json[QString("neighborhood")]);
    m_neighborhood_isSet = !json[QString("neighborhood")].isNull() && m_neighborhood_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_receiver_name_isValid = ::OpenAPI::fromJsonValue(m_receiver_name, json[QString("receiverName")]);
    m_receiver_name_isSet = !json[QString("receiverName")].isNull() && m_receiver_name_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;
}

QString OAIInsertAddressesforSubscriptionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsertAddressesforSubscriptionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_components_isSet) {
        obj.insert(QString("additionalComponents"), ::OpenAPI::toJsonValue(m_additional_components));
    }
    if (m_address_id_isSet) {
        obj.insert(QString("addressId"), ::OpenAPI::toJsonValue(m_address_id));
    }
    if (m_address_name_isSet) {
        obj.insert(QString("addressName"), ::OpenAPI::toJsonValue(m_address_name));
    }
    if (m_address_type_isSet) {
        obj.insert(QString("addressType"), ::OpenAPI::toJsonValue(m_address_type));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_complement_isSet) {
        obj.insert(QString("complement"), ::OpenAPI::toJsonValue(m_complement));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_formatted_address_isSet) {
        obj.insert(QString("formattedAddress"), ::OpenAPI::toJsonValue(m_formatted_address));
    }
    if (m_geo_coordinate_isSet) {
        obj.insert(QString("geoCoordinate"), ::OpenAPI::toJsonValue(m_geo_coordinate));
    }
    if (m_neighborhood_isSet) {
        obj.insert(QString("neighborhood"), ::OpenAPI::toJsonValue(m_neighborhood));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_receiver_name_isSet) {
        obj.insert(QString("receiverName"), ::OpenAPI::toJsonValue(m_receiver_name));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    return obj;
}

QString OAIInsertAddressesforSubscriptionRequest::getAdditionalComponents() const {
    return m_additional_components;
}
void OAIInsertAddressesforSubscriptionRequest::setAdditionalComponents(const QString &additional_components) {
    m_additional_components = additional_components;
    m_additional_components_isSet = true;
}

bool OAIInsertAddressesforSubscriptionRequest::is_additional_components_Set() const{
    return m_additional_components_isSet;
}

bool OAIInsertAddressesforSubscriptionRequest::is_additional_components_Valid() const{
    return m_additional_components_isValid;
}

QString OAIInsertAddressesforSubscriptionRequest::getAddressId() const {
    return m_address_id;
}
void OAIInsertAddressesforSubscriptionRequest::setAddressId(const QString &address_id) {
    m_address_id = address_id;
    m_address_id_isSet = true;
}

bool OAIInsertAddressesforSubscriptionRequest::is_address_id_Set() const{
    return m_address_id_isSet;
}

bool OAIInsertAddressesforSubscriptionRequest::is_address_id_Valid() const{
    return m_address_id_isValid;
}

QString OAIInsertAddressesforSubscriptionRequest::getAddressName() const {
    return m_address_name;
}
void OAIInsertAddressesforSubscriptionRequest::setAddressName(const QString &address_name) {
    m_address_name = address_name;
    m_address_name_isSet = true;
}

bool OAIInsertAddressesforSubscriptionRequest::is_address_name_Set() const{
    return m_address_name_isSet;
}

bool OAIInsertAddressesforSubscriptionRequest::is_address_name_Valid() const{
    return m_address_name_isValid;
}

QString OAIInsertAddressesforSubscriptionRequest::getAddressType() const {
    return m_address_type;
}
void OAIInsertAddressesforSubscriptionRequest::setAddressType(const QString &address_type) {
    m_address_type = address_type;
    m_address_type_isSet = true;
}

bool OAIInsertAddressesforSubscriptionRequest::is_address_type_Set() const{
    return m_address_type_isSet;
}

bool OAIInsertAddressesforSubscriptionRequest::is_address_type_Valid() const{
    return m_address_type_isValid;
}

QString OAIInsertAddressesforSubscriptionRequest::getCity() const {
    return m_city;
}
void OAIInsertAddressesforSubscriptionRequest::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIInsertAddressesforSubscriptionRequest::is_city_Set() const{
    return m_city_isSet;
}

bool OAIInsertAddressesforSubscriptionRequest::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIInsertAddressesforSubscriptionRequest::getComplement() const {
    return m_complement;
}
void OAIInsertAddressesforSubscriptionRequest::setComplement(const QString &complement) {
    m_complement = complement;
    m_complement_isSet = true;
}

bool OAIInsertAddressesforSubscriptionRequest::is_complement_Set() const{
    return m_complement_isSet;
}

bool OAIInsertAddressesforSubscriptionRequest::is_complement_Valid() const{
    return m_complement_isValid;
}

QString OAIInsertAddressesforSubscriptionRequest::getCountry() const {
    return m_country;
}
void OAIInsertAddressesforSubscriptionRequest::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIInsertAddressesforSubscriptionRequest::is_country_Set() const{
    return m_country_isSet;
}

bool OAIInsertAddressesforSubscriptionRequest::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIInsertAddressesforSubscriptionRequest::getFormattedAddress() const {
    return m_formatted_address;
}
void OAIInsertAddressesforSubscriptionRequest::setFormattedAddress(const QString &formatted_address) {
    m_formatted_address = formatted_address;
    m_formatted_address_isSet = true;
}

bool OAIInsertAddressesforSubscriptionRequest::is_formatted_address_Set() const{
    return m_formatted_address_isSet;
}

bool OAIInsertAddressesforSubscriptionRequest::is_formatted_address_Valid() const{
    return m_formatted_address_isValid;
}

QString OAIInsertAddressesforSubscriptionRequest::getGeoCoordinate() const {
    return m_geo_coordinate;
}
void OAIInsertAddressesforSubscriptionRequest::setGeoCoordinate(const QString &geo_coordinate) {
    m_geo_coordinate = geo_coordinate;
    m_geo_coordinate_isSet = true;
}

bool OAIInsertAddressesforSubscriptionRequest::is_geo_coordinate_Set() const{
    return m_geo_coordinate_isSet;
}

bool OAIInsertAddressesforSubscriptionRequest::is_geo_coordinate_Valid() const{
    return m_geo_coordinate_isValid;
}

QString OAIInsertAddressesforSubscriptionRequest::getNeighborhood() const {
    return m_neighborhood;
}
void OAIInsertAddressesforSubscriptionRequest::setNeighborhood(const QString &neighborhood) {
    m_neighborhood = neighborhood;
    m_neighborhood_isSet = true;
}

bool OAIInsertAddressesforSubscriptionRequest::is_neighborhood_Set() const{
    return m_neighborhood_isSet;
}

bool OAIInsertAddressesforSubscriptionRequest::is_neighborhood_Valid() const{
    return m_neighborhood_isValid;
}

QString OAIInsertAddressesforSubscriptionRequest::getNumber() const {
    return m_number;
}
void OAIInsertAddressesforSubscriptionRequest::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIInsertAddressesforSubscriptionRequest::is_number_Set() const{
    return m_number_isSet;
}

bool OAIInsertAddressesforSubscriptionRequest::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIInsertAddressesforSubscriptionRequest::getPostalCode() const {
    return m_postal_code;
}
void OAIInsertAddressesforSubscriptionRequest::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIInsertAddressesforSubscriptionRequest::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIInsertAddressesforSubscriptionRequest::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIInsertAddressesforSubscriptionRequest::getReceiverName() const {
    return m_receiver_name;
}
void OAIInsertAddressesforSubscriptionRequest::setReceiverName(const QString &receiver_name) {
    m_receiver_name = receiver_name;
    m_receiver_name_isSet = true;
}

bool OAIInsertAddressesforSubscriptionRequest::is_receiver_name_Set() const{
    return m_receiver_name_isSet;
}

bool OAIInsertAddressesforSubscriptionRequest::is_receiver_name_Valid() const{
    return m_receiver_name_isValid;
}

QString OAIInsertAddressesforSubscriptionRequest::getReference() const {
    return m_reference;
}
void OAIInsertAddressesforSubscriptionRequest::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIInsertAddressesforSubscriptionRequest::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIInsertAddressesforSubscriptionRequest::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIInsertAddressesforSubscriptionRequest::getState() const {
    return m_state;
}
void OAIInsertAddressesforSubscriptionRequest::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIInsertAddressesforSubscriptionRequest::is_state_Set() const{
    return m_state_isSet;
}

bool OAIInsertAddressesforSubscriptionRequest::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIInsertAddressesforSubscriptionRequest::getStreet() const {
    return m_street;
}
void OAIInsertAddressesforSubscriptionRequest::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIInsertAddressesforSubscriptionRequest::is_street_Set() const{
    return m_street_isSet;
}

bool OAIInsertAddressesforSubscriptionRequest::is_street_Valid() const{
    return m_street_isValid;
}

bool OAIInsertAddressesforSubscriptionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_components_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_coordinate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neighborhood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsertAddressesforSubscriptionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_additional_components_isValid && m_address_id_isValid && m_address_name_isValid && m_address_type_isValid && m_city_isValid && m_complement_isValid && m_country_isValid && m_formatted_address_isValid && m_geo_coordinate_isValid && m_neighborhood_isValid && m_number_isValid && m_postal_code_isValid && m_receiver_name_isValid && m_reference_isValid && m_state_isValid && m_street_isValid && true;
}

} // namespace OpenAPI
