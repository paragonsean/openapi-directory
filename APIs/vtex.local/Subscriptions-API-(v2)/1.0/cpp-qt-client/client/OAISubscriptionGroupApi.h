/**
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISubscriptionGroupApi_H
#define OAI_OAISubscriptionGroupApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdditemsubscription_groupIdRequest.h"
#include "OAIInsertAddressesbygroupIdRequest.h"
#include "OAIUpdateSubscriptionbygroupIdRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISubscriptionGroupApi : public QObject {
    Q_OBJECT

public:
    OAISubscriptionGroupApi(const int timeOut = 0);
    ~OAISubscriptionGroupApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_additemsubscription_group_id_request OAIAdditemsubscription_groupIdRequest [required]
    */
    virtual void additemsubscriptionGroupId(const QString &group_id, const QString &accept, const QString &content_type, const OAIAdditemsubscription_groupIdRequest &oai_additemsubscription_group_id_request);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void cancelSubscriptionbygroupId(const QString &accept, const QString &content_type, const QString &group_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void getAllsubscriptiongroup(const QString &content_type, const QString &accept);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void getConfigsubscriptionsgroup(const QString &content_type, const QString &accept, const QString &group_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void getConversationMessagebygroupId(const QString &content_type, const QString &accept, const QString &group_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  date_str QString [required]
    */
    virtual void getNextpurchase(const QString &content_type, const QString &accept, const QString &date_str);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void getSimulatebysubscriptionGroup(const QString &content_type, const QString &accept, const QString &group_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void getSubscriptionbygroupId(const QString &content_type, const QString &accept, const QString &group_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void getaddressesbygroupId(const QString &content_type, const QString &accept, const QString &group_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void getfrequencyoptionsbygroupId(const QString &content_type, const QString &accept, const QString &group_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void getpaymentSystembygroupId(const QString &content_type, const QString &accept, const QString &group_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void getsubscriptiongrouplist(const QString &content_type, const QString &accept);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void getwillcreatebygroupId(const QString &content_type, const QString &accept, const QString &group_id);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_insert_addressesbygroup_id_request OAIInsertAddressesbygroupIdRequest [required]
    */
    virtual void insertAddressesbygroupId(const QString &group_id, const QString &accept, const QString &content_type, const OAIInsertAddressesbygroupIdRequest &oai_insert_addressesbygroup_id_request);

    /**
    * @param[in]  groupid QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void retrysubscriptionbygroupId(const QString &groupid, const QString &instance_id, const QString &accept, const QString &content_type);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  oai_update_subscriptionbygroup_id_request OAIUpdateSubscriptionbygroupIdRequest [required]
    */
    virtual void updateSubscriptionbygroupId(const QString &group_id, const OAIUpdateSubscriptionbygroupIdRequest &oai_update_subscriptionbygroup_id_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void additemsubscriptionGroupIdCallback(OAIHttpRequestWorker *worker);
    void cancelSubscriptionbygroupIdCallback(OAIHttpRequestWorker *worker);
    void getAllsubscriptiongroupCallback(OAIHttpRequestWorker *worker);
    void getConfigsubscriptionsgroupCallback(OAIHttpRequestWorker *worker);
    void getConversationMessagebygroupIdCallback(OAIHttpRequestWorker *worker);
    void getNextpurchaseCallback(OAIHttpRequestWorker *worker);
    void getSimulatebysubscriptionGroupCallback(OAIHttpRequestWorker *worker);
    void getSubscriptionbygroupIdCallback(OAIHttpRequestWorker *worker);
    void getaddressesbygroupIdCallback(OAIHttpRequestWorker *worker);
    void getfrequencyoptionsbygroupIdCallback(OAIHttpRequestWorker *worker);
    void getpaymentSystembygroupIdCallback(OAIHttpRequestWorker *worker);
    void getsubscriptiongrouplistCallback(OAIHttpRequestWorker *worker);
    void getwillcreatebygroupIdCallback(OAIHttpRequestWorker *worker);
    void insertAddressesbygroupIdCallback(OAIHttpRequestWorker *worker);
    void retrysubscriptionbygroupIdCallback(OAIHttpRequestWorker *worker);
    void updateSubscriptionbygroupIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void additemsubscriptionGroupIdSignal();
    void cancelSubscriptionbygroupIdSignal();
    void getAllsubscriptiongroupSignal();
    void getConfigsubscriptionsgroupSignal();
    void getConversationMessagebygroupIdSignal();
    void getNextpurchaseSignal();
    void getSimulatebysubscriptionGroupSignal();
    void getSubscriptionbygroupIdSignal();
    void getaddressesbygroupIdSignal();
    void getfrequencyoptionsbygroupIdSignal();
    void getpaymentSystembygroupIdSignal();
    void getsubscriptiongrouplistSignal();
    void getwillcreatebygroupIdSignal();
    void insertAddressesbygroupIdSignal();
    void retrysubscriptionbygroupIdSignal();
    void updateSubscriptionbygroupIdSignal();


    void additemsubscriptionGroupIdSignalFull(OAIHttpRequestWorker *worker);
    void cancelSubscriptionbygroupIdSignalFull(OAIHttpRequestWorker *worker);
    void getAllsubscriptiongroupSignalFull(OAIHttpRequestWorker *worker);
    void getConfigsubscriptionsgroupSignalFull(OAIHttpRequestWorker *worker);
    void getConversationMessagebygroupIdSignalFull(OAIHttpRequestWorker *worker);
    void getNextpurchaseSignalFull(OAIHttpRequestWorker *worker);
    void getSimulatebysubscriptionGroupSignalFull(OAIHttpRequestWorker *worker);
    void getSubscriptionbygroupIdSignalFull(OAIHttpRequestWorker *worker);
    void getaddressesbygroupIdSignalFull(OAIHttpRequestWorker *worker);
    void getfrequencyoptionsbygroupIdSignalFull(OAIHttpRequestWorker *worker);
    void getpaymentSystembygroupIdSignalFull(OAIHttpRequestWorker *worker);
    void getsubscriptiongrouplistSignalFull(OAIHttpRequestWorker *worker);
    void getwillcreatebygroupIdSignalFull(OAIHttpRequestWorker *worker);
    void insertAddressesbygroupIdSignalFull(OAIHttpRequestWorker *worker);
    void retrysubscriptionbygroupIdSignalFull(OAIHttpRequestWorker *worker);
    void updateSubscriptionbygroupIdSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use additemsubscriptionGroupIdSignalError() instead")
    void additemsubscriptionGroupIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void additemsubscriptionGroupIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelSubscriptionbygroupIdSignalError() instead")
    void cancelSubscriptionbygroupIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelSubscriptionbygroupIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllsubscriptiongroupSignalError() instead")
    void getAllsubscriptiongroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllsubscriptiongroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigsubscriptionsgroupSignalError() instead")
    void getConfigsubscriptionsgroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigsubscriptionsgroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConversationMessagebygroupIdSignalError() instead")
    void getConversationMessagebygroupIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getConversationMessagebygroupIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNextpurchaseSignalError() instead")
    void getNextpurchaseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNextpurchaseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimulatebysubscriptionGroupSignalError() instead")
    void getSimulatebysubscriptionGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSimulatebysubscriptionGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscriptionbygroupIdSignalError() instead")
    void getSubscriptionbygroupIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscriptionbygroupIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getaddressesbygroupIdSignalError() instead")
    void getaddressesbygroupIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getaddressesbygroupIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getfrequencyoptionsbygroupIdSignalError() instead")
    void getfrequencyoptionsbygroupIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getfrequencyoptionsbygroupIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getpaymentSystembygroupIdSignalError() instead")
    void getpaymentSystembygroupIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getpaymentSystembygroupIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getsubscriptiongrouplistSignalError() instead")
    void getsubscriptiongrouplistSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getsubscriptiongrouplistSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getwillcreatebygroupIdSignalError() instead")
    void getwillcreatebygroupIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getwillcreatebygroupIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use insertAddressesbygroupIdSignalError() instead")
    void insertAddressesbygroupIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void insertAddressesbygroupIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrysubscriptionbygroupIdSignalError() instead")
    void retrysubscriptionbygroupIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void retrysubscriptionbygroupIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscriptionbygroupIdSignalError() instead")
    void updateSubscriptionbygroupIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscriptionbygroupIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use additemsubscriptionGroupIdSignalErrorFull() instead")
    void additemsubscriptionGroupIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void additemsubscriptionGroupIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelSubscriptionbygroupIdSignalErrorFull() instead")
    void cancelSubscriptionbygroupIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelSubscriptionbygroupIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllsubscriptiongroupSignalErrorFull() instead")
    void getAllsubscriptiongroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllsubscriptiongroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigsubscriptionsgroupSignalErrorFull() instead")
    void getConfigsubscriptionsgroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigsubscriptionsgroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConversationMessagebygroupIdSignalErrorFull() instead")
    void getConversationMessagebygroupIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConversationMessagebygroupIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNextpurchaseSignalErrorFull() instead")
    void getNextpurchaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNextpurchaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimulatebysubscriptionGroupSignalErrorFull() instead")
    void getSimulatebysubscriptionGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimulatebysubscriptionGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscriptionbygroupIdSignalErrorFull() instead")
    void getSubscriptionbygroupIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscriptionbygroupIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getaddressesbygroupIdSignalErrorFull() instead")
    void getaddressesbygroupIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getaddressesbygroupIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getfrequencyoptionsbygroupIdSignalErrorFull() instead")
    void getfrequencyoptionsbygroupIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getfrequencyoptionsbygroupIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getpaymentSystembygroupIdSignalErrorFull() instead")
    void getpaymentSystembygroupIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getpaymentSystembygroupIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getsubscriptiongrouplistSignalErrorFull() instead")
    void getsubscriptiongrouplistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getsubscriptiongrouplistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getwillcreatebygroupIdSignalErrorFull() instead")
    void getwillcreatebygroupIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getwillcreatebygroupIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use insertAddressesbygroupIdSignalErrorFull() instead")
    void insertAddressesbygroupIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void insertAddressesbygroupIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrysubscriptionbygroupIdSignalErrorFull() instead")
    void retrysubscriptionbygroupIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrysubscriptionbygroupIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscriptionbygroupIdSignalErrorFull() instead")
    void updateSubscriptionbygroupIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscriptionbygroupIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
