/**
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSubscriptionsbySubscriptionIdRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSubscriptionsbySubscriptionIdRequest::OAIUpdateSubscriptionsbySubscriptionIdRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSubscriptionsbySubscriptionIdRequest::OAIUpdateSubscriptionsbySubscriptionIdRequest() {
    this->initializeModel();
}

OAIUpdateSubscriptionsbySubscriptionIdRequest::~OAIUpdateSubscriptionsbySubscriptionIdRequest() {}

void OAIUpdateSubscriptionsbySubscriptionIdRequest::initializeModel() {

    m_is_skipped_isSet = false;
    m_is_skipped_isValid = false;

    m_item_isSet = false;
    m_item_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_purchase_settings_isSet = false;
    m_purchase_settings_isValid = false;

    m_shipping_address_isSet = false;
    m_shipping_address_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIUpdateSubscriptionsbySubscriptionIdRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSubscriptionsbySubscriptionIdRequest::fromJsonObject(QJsonObject json) {

    m_is_skipped_isValid = ::OpenAPI::fromJsonValue(m_is_skipped, json[QString("isSkipped")]);
    m_is_skipped_isSet = !json[QString("isSkipped")].isNull() && m_is_skipped_isValid;

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("item")]);
    m_item_isSet = !json[QString("item")].isNull() && m_item_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_purchase_settings_isValid = ::OpenAPI::fromJsonValue(m_purchase_settings, json[QString("purchaseSettings")]);
    m_purchase_settings_isSet = !json[QString("purchaseSettings")].isNull() && m_purchase_settings_isValid;

    m_shipping_address_isValid = ::OpenAPI::fromJsonValue(m_shipping_address, json[QString("shippingAddress")]);
    m_shipping_address_isSet = !json[QString("shippingAddress")].isNull() && m_shipping_address_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIUpdateSubscriptionsbySubscriptionIdRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSubscriptionsbySubscriptionIdRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_is_skipped_isSet) {
        obj.insert(QString("isSkipped"), ::OpenAPI::toJsonValue(m_is_skipped));
    }
    if (m_item.isSet()) {
        obj.insert(QString("item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_plan.isSet()) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_purchase_settings.isSet()) {
        obj.insert(QString("purchaseSettings"), ::OpenAPI::toJsonValue(m_purchase_settings));
    }
    if (m_shipping_address.isSet()) {
        obj.insert(QString("shippingAddress"), ::OpenAPI::toJsonValue(m_shipping_address));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

bool OAIUpdateSubscriptionsbySubscriptionIdRequest::isIsSkipped() const {
    return m_is_skipped;
}
void OAIUpdateSubscriptionsbySubscriptionIdRequest::setIsSkipped(const bool &is_skipped) {
    m_is_skipped = is_skipped;
    m_is_skipped_isSet = true;
}

bool OAIUpdateSubscriptionsbySubscriptionIdRequest::is_is_skipped_Set() const{
    return m_is_skipped_isSet;
}

bool OAIUpdateSubscriptionsbySubscriptionIdRequest::is_is_skipped_Valid() const{
    return m_is_skipped_isValid;
}

OAIItem OAIUpdateSubscriptionsbySubscriptionIdRequest::getItem() const {
    return m_item;
}
void OAIUpdateSubscriptionsbySubscriptionIdRequest::setItem(const OAIItem &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIUpdateSubscriptionsbySubscriptionIdRequest::is_item_Set() const{
    return m_item_isSet;
}

bool OAIUpdateSubscriptionsbySubscriptionIdRequest::is_item_Valid() const{
    return m_item_isValid;
}

QList<OAIMetadatum> OAIUpdateSubscriptionsbySubscriptionIdRequest::getMetadata() const {
    return m_metadata;
}
void OAIUpdateSubscriptionsbySubscriptionIdRequest::setMetadata(const QList<OAIMetadatum> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIUpdateSubscriptionsbySubscriptionIdRequest::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIUpdateSubscriptionsbySubscriptionIdRequest::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIPlan OAIUpdateSubscriptionsbySubscriptionIdRequest::getPlan() const {
    return m_plan;
}
void OAIUpdateSubscriptionsbySubscriptionIdRequest::setPlan(const OAIPlan &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIUpdateSubscriptionsbySubscriptionIdRequest::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIUpdateSubscriptionsbySubscriptionIdRequest::is_plan_Valid() const{
    return m_plan_isValid;
}

OAIPurchaseSettings OAIUpdateSubscriptionsbySubscriptionIdRequest::getPurchaseSettings() const {
    return m_purchase_settings;
}
void OAIUpdateSubscriptionsbySubscriptionIdRequest::setPurchaseSettings(const OAIPurchaseSettings &purchase_settings) {
    m_purchase_settings = purchase_settings;
    m_purchase_settings_isSet = true;
}

bool OAIUpdateSubscriptionsbySubscriptionIdRequest::is_purchase_settings_Set() const{
    return m_purchase_settings_isSet;
}

bool OAIUpdateSubscriptionsbySubscriptionIdRequest::is_purchase_settings_Valid() const{
    return m_purchase_settings_isValid;
}

OAIShippingAddress OAIUpdateSubscriptionsbySubscriptionIdRequest::getShippingAddress() const {
    return m_shipping_address;
}
void OAIUpdateSubscriptionsbySubscriptionIdRequest::setShippingAddress(const OAIShippingAddress &shipping_address) {
    m_shipping_address = shipping_address;
    m_shipping_address_isSet = true;
}

bool OAIUpdateSubscriptionsbySubscriptionIdRequest::is_shipping_address_Set() const{
    return m_shipping_address_isSet;
}

bool OAIUpdateSubscriptionsbySubscriptionIdRequest::is_shipping_address_Valid() const{
    return m_shipping_address_isValid;
}

QString OAIUpdateSubscriptionsbySubscriptionIdRequest::getStatus() const {
    return m_status;
}
void OAIUpdateSubscriptionsbySubscriptionIdRequest::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateSubscriptionsbySubscriptionIdRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateSubscriptionsbySubscriptionIdRequest::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIUpdateSubscriptionsbySubscriptionIdRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_skipped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSubscriptionsbySubscriptionIdRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_skipped_isValid && m_item_isValid && m_metadata_isValid && m_plan_isValid && m_purchase_settings_isValid && m_shipping_address_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
