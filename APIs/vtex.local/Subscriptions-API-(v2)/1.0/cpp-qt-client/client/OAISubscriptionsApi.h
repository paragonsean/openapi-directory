/**
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISubscriptionsApi_H
#define OAI_OAISubscriptionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIInsertAddressesforSubscriptionRequest.h"
#include "OAIUpdateSubscriptionsbySubscriptionIdRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISubscriptionsApi : public QObject {
    Q_OBJECT

public:
    OAISubscriptionsApi(const int timeOut = 0);
    ~OAISubscriptionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void cancelSubscriptionsbySubscriptionId(const QString &accept, const QString &content_type, const QString &subscription_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void getSubscriptionList(const QString &content_type, const QString &accept);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void getfrequencyoptionsbysubscriptionId(const QString &content_type, const QString &accept, const QString &subscription_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void getsubscriptionbyId(const QString &content_type, const QString &accept, const QString &subscription_id);

    /**
    * @param[in]  customer_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void getsubscriptionstocustomer(const QString &customer_id, const QString &content_type, const QString &accept);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_insert_addressesfor_subscription_request QList<OAIInsertAddressesforSubscriptionRequest> [required]
    */
    virtual void insertAddressesforSubscription(const QString &subscription_id, const QString &content_type, const QString &accept, const QList<OAIInsertAddressesforSubscriptionRequest> &oai_insert_addressesfor_subscription_request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_update_subscriptionsby_subscription_id_request OAIUpdateSubscriptionsbySubscriptionIdRequest [required]
    */
    virtual void updateSubscriptionsbySubscriptionId(const QString &subscription_id, const QString &content_type, const QString &accept, const OAIUpdateSubscriptionsbySubscriptionIdRequest &oai_update_subscriptionsby_subscription_id_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelSubscriptionsbySubscriptionIdCallback(OAIHttpRequestWorker *worker);
    void getSubscriptionListCallback(OAIHttpRequestWorker *worker);
    void getfrequencyoptionsbysubscriptionIdCallback(OAIHttpRequestWorker *worker);
    void getsubscriptionbyIdCallback(OAIHttpRequestWorker *worker);
    void getsubscriptionstocustomerCallback(OAIHttpRequestWorker *worker);
    void insertAddressesforSubscriptionCallback(OAIHttpRequestWorker *worker);
    void updateSubscriptionsbySubscriptionIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelSubscriptionsbySubscriptionIdSignal();
    void getSubscriptionListSignal();
    void getfrequencyoptionsbysubscriptionIdSignal();
    void getsubscriptionbyIdSignal();
    void getsubscriptionstocustomerSignal();
    void insertAddressesforSubscriptionSignal();
    void updateSubscriptionsbySubscriptionIdSignal();


    void cancelSubscriptionsbySubscriptionIdSignalFull(OAIHttpRequestWorker *worker);
    void getSubscriptionListSignalFull(OAIHttpRequestWorker *worker);
    void getfrequencyoptionsbysubscriptionIdSignalFull(OAIHttpRequestWorker *worker);
    void getsubscriptionbyIdSignalFull(OAIHttpRequestWorker *worker);
    void getsubscriptionstocustomerSignalFull(OAIHttpRequestWorker *worker);
    void insertAddressesforSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void updateSubscriptionsbySubscriptionIdSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use cancelSubscriptionsbySubscriptionIdSignalError() instead")
    void cancelSubscriptionsbySubscriptionIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelSubscriptionsbySubscriptionIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscriptionListSignalError() instead")
    void getSubscriptionListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscriptionListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getfrequencyoptionsbysubscriptionIdSignalError() instead")
    void getfrequencyoptionsbysubscriptionIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getfrequencyoptionsbysubscriptionIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getsubscriptionbyIdSignalError() instead")
    void getsubscriptionbyIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getsubscriptionbyIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getsubscriptionstocustomerSignalError() instead")
    void getsubscriptionstocustomerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getsubscriptionstocustomerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use insertAddressesforSubscriptionSignalError() instead")
    void insertAddressesforSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void insertAddressesforSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscriptionsbySubscriptionIdSignalError() instead")
    void updateSubscriptionsbySubscriptionIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscriptionsbySubscriptionIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelSubscriptionsbySubscriptionIdSignalErrorFull() instead")
    void cancelSubscriptionsbySubscriptionIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelSubscriptionsbySubscriptionIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscriptionListSignalErrorFull() instead")
    void getSubscriptionListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscriptionListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getfrequencyoptionsbysubscriptionIdSignalErrorFull() instead")
    void getfrequencyoptionsbysubscriptionIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getfrequencyoptionsbysubscriptionIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getsubscriptionbyIdSignalErrorFull() instead")
    void getsubscriptionbyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getsubscriptionbyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getsubscriptionstocustomerSignalErrorFull() instead")
    void getsubscriptionstocustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getsubscriptionstocustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use insertAddressesforSubscriptionSignalErrorFull() instead")
    void insertAddressesforSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void insertAddressesforSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscriptionsbySubscriptionIdSignalErrorFull() instead")
    void updateSubscriptionsbySubscriptionIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscriptionsbySubscriptionIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
