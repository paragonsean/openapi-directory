/**
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem1::OAIItem1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem1::OAIItem1() {
    this->initializeModel();
}

OAIItem1::~OAIItem1() {}

void OAIItem1::initializeModel() {

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_cycle_count_isSet = false;
    m_cycle_count_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_is_skipped_isSet = false;
    m_is_skipped_isValid = false;

    m_last_update_isSet = false;
    m_last_update_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_original_item_index_isSet = false;
    m_original_item_index_isValid = false;

    m_original_order_id_isSet = false;
    m_original_order_id_isValid = false;

    m_price_at_subscription_date_isSet = false;
    m_price_at_subscription_date_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_selling_price_isSet = false;
    m_selling_price_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIItem1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem1::fromJsonObject(QJsonObject json) {

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("SubscriptionId")]);
    m_subscription_id_isSet = !json[QString("SubscriptionId")].isNull() && m_subscription_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_cycle_count_isValid = ::OpenAPI::fromJsonValue(m_cycle_count, json[QString("cycleCount")]);
    m_cycle_count_isSet = !json[QString("cycleCount")].isNull() && m_cycle_count_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_is_skipped_isValid = ::OpenAPI::fromJsonValue(m_is_skipped, json[QString("isSkipped")]);
    m_is_skipped_isSet = !json[QString("isSkipped")].isNull() && m_is_skipped_isValid;

    m_last_update_isValid = ::OpenAPI::fromJsonValue(m_last_update, json[QString("lastUpdate")]);
    m_last_update_isSet = !json[QString("lastUpdate")].isNull() && m_last_update_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_original_item_index_isValid = ::OpenAPI::fromJsonValue(m_original_item_index, json[QString("originalItemIndex")]);
    m_original_item_index_isSet = !json[QString("originalItemIndex")].isNull() && m_original_item_index_isValid;

    m_original_order_id_isValid = ::OpenAPI::fromJsonValue(m_original_order_id, json[QString("originalOrderId")]);
    m_original_order_id_isSet = !json[QString("originalOrderId")].isNull() && m_original_order_id_isValid;

    m_price_at_subscription_date_isValid = ::OpenAPI::fromJsonValue(m_price_at_subscription_date, json[QString("priceAtSubscriptionDate")]);
    m_price_at_subscription_date_isSet = !json[QString("priceAtSubscriptionDate")].isNull() && m_price_at_subscription_date_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_selling_price_isValid = ::OpenAPI::fromJsonValue(m_selling_price, json[QString("sellingPrice")]);
    m_selling_price_isSet = !json[QString("sellingPrice")].isNull() && m_selling_price_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIItem1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem1::asJsonObject() const {
    QJsonObject obj;
    if (m_subscription_id_isSet) {
        obj.insert(QString("SubscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_cycle_count_isSet) {
        obj.insert(QString("cycleCount"), ::OpenAPI::toJsonValue(m_cycle_count));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_is_skipped_isSet) {
        obj.insert(QString("isSkipped"), ::OpenAPI::toJsonValue(m_is_skipped));
    }
    if (m_last_update_isSet) {
        obj.insert(QString("lastUpdate"), ::OpenAPI::toJsonValue(m_last_update));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_original_item_index_isSet) {
        obj.insert(QString("originalItemIndex"), ::OpenAPI::toJsonValue(m_original_item_index));
    }
    if (m_original_order_id_isSet) {
        obj.insert(QString("originalOrderId"), ::OpenAPI::toJsonValue(m_original_order_id));
    }
    if (m_price_at_subscription_date_isSet) {
        obj.insert(QString("priceAtSubscriptionDate"), ::OpenAPI::toJsonValue(m_price_at_subscription_date));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_selling_price_isSet) {
        obj.insert(QString("sellingPrice"), ::OpenAPI::toJsonValue(m_selling_price));
    }
    if (m_sku.isSet()) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIItem1::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIItem1::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIItem1::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIItem1::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAIItem1::getCreatedAt() const {
    return m_created_at;
}
void OAIItem1::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIItem1::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIItem1::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIItem1::getCycleCount() const {
    return m_cycle_count;
}
void OAIItem1::setCycleCount(const qint32 &cycle_count) {
    m_cycle_count = cycle_count;
    m_cycle_count_isSet = true;
}

bool OAIItem1::is_cycle_count_Set() const{
    return m_cycle_count_isSet;
}

bool OAIItem1::is_cycle_count_Valid() const{
    return m_cycle_count_isValid;
}

QString OAIItem1::getEndpoint() const {
    return m_endpoint;
}
void OAIItem1::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIItem1::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIItem1::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

bool OAIItem1::isIsSkipped() const {
    return m_is_skipped;
}
void OAIItem1::setIsSkipped(const bool &is_skipped) {
    m_is_skipped = is_skipped;
    m_is_skipped_isSet = true;
}

bool OAIItem1::is_is_skipped_Set() const{
    return m_is_skipped_isSet;
}

bool OAIItem1::is_is_skipped_Valid() const{
    return m_is_skipped_isValid;
}

QString OAIItem1::getLastUpdate() const {
    return m_last_update;
}
void OAIItem1::setLastUpdate(const QString &last_update) {
    m_last_update = last_update;
    m_last_update_isSet = true;
}

bool OAIItem1::is_last_update_Set() const{
    return m_last_update_isSet;
}

bool OAIItem1::is_last_update_Valid() const{
    return m_last_update_isValid;
}

QList<OAIMetadatum> OAIItem1::getMetadata() const {
    return m_metadata;
}
void OAIItem1::setMetadata(const QList<OAIMetadatum> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIItem1::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIItem1::is_metadata_Valid() const{
    return m_metadata_isValid;
}

qint32 OAIItem1::getOriginalItemIndex() const {
    return m_original_item_index;
}
void OAIItem1::setOriginalItemIndex(const qint32 &original_item_index) {
    m_original_item_index = original_item_index;
    m_original_item_index_isSet = true;
}

bool OAIItem1::is_original_item_index_Set() const{
    return m_original_item_index_isSet;
}

bool OAIItem1::is_original_item_index_Valid() const{
    return m_original_item_index_isValid;
}

QString OAIItem1::getOriginalOrderId() const {
    return m_original_order_id;
}
void OAIItem1::setOriginalOrderId(const QString &original_order_id) {
    m_original_order_id = original_order_id;
    m_original_order_id_isSet = true;
}

bool OAIItem1::is_original_order_id_Set() const{
    return m_original_order_id_isSet;
}

bool OAIItem1::is_original_order_id_Valid() const{
    return m_original_order_id_isValid;
}

qint32 OAIItem1::getPriceAtSubscriptionDate() const {
    return m_price_at_subscription_date;
}
void OAIItem1::setPriceAtSubscriptionDate(const qint32 &price_at_subscription_date) {
    m_price_at_subscription_date = price_at_subscription_date;
    m_price_at_subscription_date_isSet = true;
}

bool OAIItem1::is_price_at_subscription_date_Set() const{
    return m_price_at_subscription_date_isSet;
}

bool OAIItem1::is_price_at_subscription_date_Valid() const{
    return m_price_at_subscription_date_isValid;
}

qint32 OAIItem1::getQuantity() const {
    return m_quantity;
}
void OAIItem1::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIItem1::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIItem1::is_quantity_Valid() const{
    return m_quantity_isValid;
}

qint32 OAIItem1::getSellingPrice() const {
    return m_selling_price;
}
void OAIItem1::setSellingPrice(const qint32 &selling_price) {
    m_selling_price = selling_price;
    m_selling_price_isSet = true;
}

bool OAIItem1::is_selling_price_Set() const{
    return m_selling_price_isSet;
}

bool OAIItem1::is_selling_price_Valid() const{
    return m_selling_price_isValid;
}

OAISku OAIItem1::getSku() const {
    return m_sku;
}
void OAIItem1::setSku(const OAISku &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIItem1::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIItem1::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIItem1::getStatus() const {
    return m_status;
}
void OAIItem1::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIItem1::is_status_Set() const{
    return m_status_isSet;
}

bool OAIItem1::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIItem1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycle_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_skipped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_item_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_at_subscription_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selling_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_subscription_id_isValid && m_created_at_isValid && m_cycle_count_isValid && m_endpoint_isValid && m_is_skipped_isValid && m_last_update_isValid && m_metadata_isValid && m_original_item_index_isValid && m_original_order_id_isValid && m_price_at_subscription_date_isValid && m_quantity_isValid && m_selling_price_isValid && m_sku_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
