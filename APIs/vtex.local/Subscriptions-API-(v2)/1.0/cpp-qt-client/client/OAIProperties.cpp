/**
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProperties::OAIProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProperties::OAIProperties() {
    this->initializeModel();
}

OAIProperties::~OAIProperties() {}

void OAIProperties::initializeModel() {

    m_additional_prop1_isSet = false;
    m_additional_prop1_isValid = false;

    m_additional_prop2_isSet = false;
    m_additional_prop2_isValid = false;

    m_additional_prop3_isSet = false;
    m_additional_prop3_isValid = false;
}

void OAIProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProperties::fromJsonObject(QJsonObject json) {

    m_additional_prop1_isValid = ::OpenAPI::fromJsonValue(m_additional_prop1, json[QString("additionalProp1")]);
    m_additional_prop1_isSet = !json[QString("additionalProp1")].isNull() && m_additional_prop1_isValid;

    m_additional_prop2_isValid = ::OpenAPI::fromJsonValue(m_additional_prop2, json[QString("additionalProp2")]);
    m_additional_prop2_isSet = !json[QString("additionalProp2")].isNull() && m_additional_prop2_isValid;

    m_additional_prop3_isValid = ::OpenAPI::fromJsonValue(m_additional_prop3, json[QString("additionalProp3")]);
    m_additional_prop3_isSet = !json[QString("additionalProp3")].isNull() && m_additional_prop3_isValid;
}

QString OAIProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_prop1_isSet) {
        obj.insert(QString("additionalProp1"), ::OpenAPI::toJsonValue(m_additional_prop1));
    }
    if (m_additional_prop2_isSet) {
        obj.insert(QString("additionalProp2"), ::OpenAPI::toJsonValue(m_additional_prop2));
    }
    if (m_additional_prop3_isSet) {
        obj.insert(QString("additionalProp3"), ::OpenAPI::toJsonValue(m_additional_prop3));
    }
    return obj;
}

QString OAIProperties::getAdditionalProp1() const {
    return m_additional_prop1;
}
void OAIProperties::setAdditionalProp1(const QString &additional_prop1) {
    m_additional_prop1 = additional_prop1;
    m_additional_prop1_isSet = true;
}

bool OAIProperties::is_additional_prop1_Set() const{
    return m_additional_prop1_isSet;
}

bool OAIProperties::is_additional_prop1_Valid() const{
    return m_additional_prop1_isValid;
}

QString OAIProperties::getAdditionalProp2() const {
    return m_additional_prop2;
}
void OAIProperties::setAdditionalProp2(const QString &additional_prop2) {
    m_additional_prop2 = additional_prop2;
    m_additional_prop2_isSet = true;
}

bool OAIProperties::is_additional_prop2_Set() const{
    return m_additional_prop2_isSet;
}

bool OAIProperties::is_additional_prop2_Valid() const{
    return m_additional_prop2_isValid;
}

QString OAIProperties::getAdditionalProp3() const {
    return m_additional_prop3;
}
void OAIProperties::setAdditionalProp3(const QString &additional_prop3) {
    m_additional_prop3 = additional_prop3;
    m_additional_prop3_isSet = true;
}

bool OAIProperties::is_additional_prop3_Set() const{
    return m_additional_prop3_isSet;
}

bool OAIProperties::is_additional_prop3_Valid() const{
    return m_additional_prop3_isValid;
}

bool OAIProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_prop1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_prop2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_prop3_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_additional_prop1_isValid && m_additional_prop2_isValid && m_additional_prop3_isValid && true;
}

} // namespace OpenAPI
