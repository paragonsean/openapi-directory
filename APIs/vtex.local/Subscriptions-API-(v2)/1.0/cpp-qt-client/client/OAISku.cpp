/**
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISku.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISku::OAISku(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISku::OAISku() {
    this->initializeModel();
}

OAISku::~OAISku() {}

void OAISku::initializeModel() {

    m_detail_url_isSet = false;
    m_detail_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_name_complete_isSet = false;
    m_name_complete_isValid = false;

    m_product_name_isSet = false;
    m_product_name_isValid = false;
}

void OAISku::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISku::fromJsonObject(QJsonObject json) {

    m_detail_url_isValid = ::OpenAPI::fromJsonValue(m_detail_url, json[QString("detailUrl")]);
    m_detail_url_isSet = !json[QString("detailUrl")].isNull() && m_detail_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_name_complete_isValid = ::OpenAPI::fromJsonValue(m_name_complete, json[QString("nameComplete")]);
    m_name_complete_isSet = !json[QString("nameComplete")].isNull() && m_name_complete_isValid;

    m_product_name_isValid = ::OpenAPI::fromJsonValue(m_product_name, json[QString("productName")]);
    m_product_name_isSet = !json[QString("productName")].isNull() && m_product_name_isValid;
}

QString OAISku::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISku::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_url_isSet) {
        obj.insert(QString("detailUrl"), ::OpenAPI::toJsonValue(m_detail_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_name_complete_isSet) {
        obj.insert(QString("nameComplete"), ::OpenAPI::toJsonValue(m_name_complete));
    }
    if (m_product_name_isSet) {
        obj.insert(QString("productName"), ::OpenAPI::toJsonValue(m_product_name));
    }
    return obj;
}

QString OAISku::getDetailUrl() const {
    return m_detail_url;
}
void OAISku::setDetailUrl(const QString &detail_url) {
    m_detail_url = detail_url;
    m_detail_url_isSet = true;
}

bool OAISku::is_detail_url_Set() const{
    return m_detail_url_isSet;
}

bool OAISku::is_detail_url_Valid() const{
    return m_detail_url_isValid;
}

QString OAISku::getId() const {
    return m_id;
}
void OAISku::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISku::is_id_Set() const{
    return m_id_isSet;
}

bool OAISku::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISku::getImageUrl() const {
    return m_image_url;
}
void OAISku::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAISku::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAISku::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAISku::getName() const {
    return m_name;
}
void OAISku::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISku::is_name_Set() const{
    return m_name_isSet;
}

bool OAISku::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISku::getNameComplete() const {
    return m_name_complete;
}
void OAISku::setNameComplete(const QString &name_complete) {
    m_name_complete = name_complete;
    m_name_complete_isSet = true;
}

bool OAISku::is_name_complete_Set() const{
    return m_name_complete_isSet;
}

bool OAISku::is_name_complete_Valid() const{
    return m_name_complete_isValid;
}

QString OAISku::getProductName() const {
    return m_product_name;
}
void OAISku::setProductName(const QString &product_name) {
    m_product_name = product_name;
    m_product_name_isSet = true;
}

bool OAISku::is_product_name_Set() const{
    return m_product_name_isSet;
}

bool OAISku::is_product_name_Valid() const{
    return m_product_name_isValid;
}

bool OAISku::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISku::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_detail_url_isValid && m_id_isValid && m_image_url_isValid && m_name_isValid && m_name_complete_isValid && m_product_name_isValid && true;
}

} // namespace OpenAPI
