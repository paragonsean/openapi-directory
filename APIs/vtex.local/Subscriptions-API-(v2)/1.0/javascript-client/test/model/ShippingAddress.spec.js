/**
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SubscriptionsApiV2Deprecated);
  }
}(this, function(expect, SubscriptionsApiV2Deprecated) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SubscriptionsApiV2Deprecated.ShippingAddress();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ShippingAddress', function() {
    it('should create an instance of ShippingAddress', function() {
      // uncomment below and update the code to test ShippingAddress
      //var instance = new SubscriptionsApiV2Deprecated.ShippingAddress();
      //expect(instance).to.be.a(SubscriptionsApiV2Deprecated.ShippingAddress);
    });

    it('should have the property additionalComponents (base name: "additionalComponents")', function() {
      // uncomment below and update the code to test the property additionalComponents
      //var instance = new SubscriptionsApiV2Deprecated.ShippingAddress();
      //expect(instance).to.be();
    });

    it('should have the property addressId (base name: "addressId")', function() {
      // uncomment below and update the code to test the property addressId
      //var instance = new SubscriptionsApiV2Deprecated.ShippingAddress();
      //expect(instance).to.be();
    });

    it('should have the property addressName (base name: "addressName")', function() {
      // uncomment below and update the code to test the property addressName
      //var instance = new SubscriptionsApiV2Deprecated.ShippingAddress();
      //expect(instance).to.be();
    });

    it('should have the property addressType (base name: "addressType")', function() {
      // uncomment below and update the code to test the property addressType
      //var instance = new SubscriptionsApiV2Deprecated.ShippingAddress();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instance = new SubscriptionsApiV2Deprecated.ShippingAddress();
      //expect(instance).to.be();
    });

    it('should have the property complement (base name: "complement")', function() {
      // uncomment below and update the code to test the property complement
      //var instance = new SubscriptionsApiV2Deprecated.ShippingAddress();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "country")', function() {
      // uncomment below and update the code to test the property country
      //var instance = new SubscriptionsApiV2Deprecated.ShippingAddress();
      //expect(instance).to.be();
    });

    it('should have the property formattedAddress (base name: "formattedAddress")', function() {
      // uncomment below and update the code to test the property formattedAddress
      //var instance = new SubscriptionsApiV2Deprecated.ShippingAddress();
      //expect(instance).to.be();
    });

    it('should have the property geoCoordinate (base name: "geoCoordinate")', function() {
      // uncomment below and update the code to test the property geoCoordinate
      //var instance = new SubscriptionsApiV2Deprecated.ShippingAddress();
      //expect(instance).to.be();
    });

    it('should have the property neighborhood (base name: "neighborhood")', function() {
      // uncomment below and update the code to test the property neighborhood
      //var instance = new SubscriptionsApiV2Deprecated.ShippingAddress();
      //expect(instance).to.be();
    });

    it('should have the property number (base name: "number")', function() {
      // uncomment below and update the code to test the property number
      //var instance = new SubscriptionsApiV2Deprecated.ShippingAddress();
      //expect(instance).to.be();
    });

    it('should have the property postalCode (base name: "postalCode")', function() {
      // uncomment below and update the code to test the property postalCode
      //var instance = new SubscriptionsApiV2Deprecated.ShippingAddress();
      //expect(instance).to.be();
    });

    it('should have the property receiverName (base name: "receiverName")', function() {
      // uncomment below and update the code to test the property receiverName
      //var instance = new SubscriptionsApiV2Deprecated.ShippingAddress();
      //expect(instance).to.be();
    });

    it('should have the property reference (base name: "reference")', function() {
      // uncomment below and update the code to test the property reference
      //var instance = new SubscriptionsApiV2Deprecated.ShippingAddress();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new SubscriptionsApiV2Deprecated.ShippingAddress();
      //expect(instance).to.be();
    });

    it('should have the property street (base name: "street")', function() {
      // uncomment below and update the code to test the property street
      //var instance = new SubscriptionsApiV2Deprecated.ShippingAddress();
      //expect(instance).to.be();
    });

  });

}));
