/**
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SubscriptionsApiV2Deprecated);
  }
}(this, function(expect, SubscriptionsApiV2Deprecated) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SubscriptionsApiV2Deprecated.Item1();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Item1', function() {
    it('should create an instance of Item1', function() {
      // uncomment below and update the code to test Item1
      //var instance = new SubscriptionsApiV2Deprecated.Item1();
      //expect(instance).to.be.a(SubscriptionsApiV2Deprecated.Item1);
    });

    it('should have the property subscriptionId (base name: "SubscriptionId")', function() {
      // uncomment below and update the code to test the property subscriptionId
      //var instance = new SubscriptionsApiV2Deprecated.Item1();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "createdAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new SubscriptionsApiV2Deprecated.Item1();
      //expect(instance).to.be();
    });

    it('should have the property cycleCount (base name: "cycleCount")', function() {
      // uncomment below and update the code to test the property cycleCount
      //var instance = new SubscriptionsApiV2Deprecated.Item1();
      //expect(instance).to.be();
    });

    it('should have the property endpoint (base name: "endpoint")', function() {
      // uncomment below and update the code to test the property endpoint
      //var instance = new SubscriptionsApiV2Deprecated.Item1();
      //expect(instance).to.be();
    });

    it('should have the property isSkipped (base name: "isSkipped")', function() {
      // uncomment below and update the code to test the property isSkipped
      //var instance = new SubscriptionsApiV2Deprecated.Item1();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdate (base name: "lastUpdate")', function() {
      // uncomment below and update the code to test the property lastUpdate
      //var instance = new SubscriptionsApiV2Deprecated.Item1();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new SubscriptionsApiV2Deprecated.Item1();
      //expect(instance).to.be();
    });

    it('should have the property originalItemIndex (base name: "originalItemIndex")', function() {
      // uncomment below and update the code to test the property originalItemIndex
      //var instance = new SubscriptionsApiV2Deprecated.Item1();
      //expect(instance).to.be();
    });

    it('should have the property originalOrderId (base name: "originalOrderId")', function() {
      // uncomment below and update the code to test the property originalOrderId
      //var instance = new SubscriptionsApiV2Deprecated.Item1();
      //expect(instance).to.be();
    });

    it('should have the property priceAtSubscriptionDate (base name: "priceAtSubscriptionDate")', function() {
      // uncomment below and update the code to test the property priceAtSubscriptionDate
      //var instance = new SubscriptionsApiV2Deprecated.Item1();
      //expect(instance).to.be();
    });

    it('should have the property quantity (base name: "quantity")', function() {
      // uncomment below and update the code to test the property quantity
      //var instance = new SubscriptionsApiV2Deprecated.Item1();
      //expect(instance).to.be();
    });

    it('should have the property sellingPrice (base name: "sellingPrice")', function() {
      // uncomment below and update the code to test the property sellingPrice
      //var instance = new SubscriptionsApiV2Deprecated.Item1();
      //expect(instance).to.be();
    });

    it('should have the property sku (base name: "sku")', function() {
      // uncomment below and update the code to test the property sku
      //var instance = new SubscriptionsApiV2Deprecated.Item1();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new SubscriptionsApiV2Deprecated.Item1();
      //expect(instance).to.be();
    });

  });

}));
