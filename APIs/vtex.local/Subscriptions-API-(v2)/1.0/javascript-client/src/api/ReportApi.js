/**
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Report service.
* @module api/ReportApi
* @version 1.0
*/
export default class ReportApi {

    /**
    * Constructs a new ReportApi. 
    * @alias module:api/ReportApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getreportstatusbyID operation.
     * @callback module:api/ReportApi~getreportstatusbyIDCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get report status by ID
     * Retrieves the Subscription's report status, filtering by its reportId.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} reportId Report ID.
     * @param {module:api/ReportApi~getreportstatusbyIDCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getreportstatusbyID(contentType, accept, reportId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getreportstatusbyID");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getreportstatusbyID");
      }
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling getreportstatusbyID");
      }

      let pathParams = {
        'reportId': reportId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report/reportStatus/{reportId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestreportbyStatus operation.
     * @callback module:api/ReportApi~requestreportbyStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Subscription report by Status
     * Retrieves Subscriptions' reports, filtering by status. The report will be sent by email, to the address inserted in the API's path.
     * @param {String} requesterEmail Email that the report will be sent to
     * @param {Number} status Binary OR of the following status: 1 - ACTIVE; 2 - PAUSED; 4 - CANCELED; 8 - EXPIRED
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/ReportApi~requestreportbyStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    requestreportbyStatus(requesterEmail, status, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'requesterEmail' is set
      if (requesterEmail === undefined || requesterEmail === null) {
        throw new Error("Missing the required parameter 'requesterEmail' when calling requestreportbyStatus");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling requestreportbyStatus");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling requestreportbyStatus");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling requestreportbyStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'requesterEmail': requesterEmail,
        'status': status
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report/subscriptionsByStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestreportbydate operation.
     * @callback module:api/ReportApi~requestreportbydateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Subscription report by date
     * Retrieves a report with the subscriptions created at the date interval requested
     * @param {String} requesterEmail Email that the report will be sent to
     * @param {Number} beginDate begin date of report interval, use format yyyyMMdd
     * @param {Number} endDate end date of report interval, use format yyyyMMdd
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/ReportApi~requestreportbydateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    requestreportbydate(requesterEmail, beginDate, endDate, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'requesterEmail' is set
      if (requesterEmail === undefined || requesterEmail === null) {
        throw new Error("Missing the required parameter 'requesterEmail' when calling requestreportbydate");
      }
      // verify the required parameter 'beginDate' is set
      if (beginDate === undefined || beginDate === null) {
        throw new Error("Missing the required parameter 'beginDate' when calling requestreportbydate");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling requestreportbydate");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling requestreportbydate");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling requestreportbydate");
      }

      let pathParams = {
      };
      let queryParams = {
        'requesterEmail': requesterEmail,
        'beginDate': beginDate,
        'endDate': endDate
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report/subscriptionsByDate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestreportbyorderdate operation.
     * @callback module:api/ReportApi~requestreportbyorderdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Subscription report by order date
     * Retrieves a report regarding the Subscriptions created during the date interval of orders.
     * @param {String} requesterEmail Email that the report will be sent to
     * @param {Number} beginDate begin date of report interval, use format yyyyMMdd
     * @param {Number} endDate end date of report interval, use format yyyyMMdd
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/ReportApi~requestreportbyorderdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    requestreportbyorderdate(requesterEmail, beginDate, endDate, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'requesterEmail' is set
      if (requesterEmail === undefined || requesterEmail === null) {
        throw new Error("Missing the required parameter 'requesterEmail' when calling requestreportbyorderdate");
      }
      // verify the required parameter 'beginDate' is set
      if (beginDate === undefined || beginDate === null) {
        throw new Error("Missing the required parameter 'beginDate' when calling requestreportbyorderdate");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling requestreportbyorderdate");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling requestreportbyorderdate");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling requestreportbyorderdate");
      }

      let pathParams = {
      };
      let queryParams = {
        'requesterEmail': requesterEmail,
        'beginDate': beginDate,
        'endDate': endDate
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report/subscriptionsOrderByDate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestreportbyschedule operation.
     * @callback module:api/ReportApi~requestreportbyscheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Subscription report by schedule
     * Retrieves a report regarding the Subscriptions scheduled to execute at the date interval requested
     * @param {String} requesterEmail Email that the report will be sent to
     * @param {Number} beginDate begin date of report interval, use format yyyyMMdd
     * @param {Number} endDate end date of report interval, use format yyyyMMdd
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/ReportApi~requestreportbyscheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    requestreportbyschedule(requesterEmail, beginDate, endDate, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'requesterEmail' is set
      if (requesterEmail === undefined || requesterEmail === null) {
        throw new Error("Missing the required parameter 'requesterEmail' when calling requestreportbyschedule");
      }
      // verify the required parameter 'beginDate' is set
      if (beginDate === undefined || beginDate === null) {
        throw new Error("Missing the required parameter 'beginDate' when calling requestreportbyschedule");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling requestreportbyschedule");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling requestreportbyschedule");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling requestreportbyschedule");
      }

      let pathParams = {
      };
      let queryParams = {
        'requesterEmail': requesterEmail,
        'beginDate': beginDate,
        'endDate': endDate
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report/subscriptionsScheduled', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestreportbyupdate operation.
     * @callback module:api/ReportApi~requestreportbyupdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request report by update
     * Retrieves a report regarding Subscriptions updated in the date interval chosen. The report will be sent by email, to the address inserted in the API's path.
     * @param {String} requesterEmail Email that the report will be sent to
     * @param {Number} beginDate begin date of report interval, use format yyyyMMdd
     * @param {Number} endDate end date of report interval, use format yyyyMMdd
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/ReportApi~requestreportbyupdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    requestreportbyupdate(requesterEmail, beginDate, endDate, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'requesterEmail' is set
      if (requesterEmail === undefined || requesterEmail === null) {
        throw new Error("Missing the required parameter 'requesterEmail' when calling requestreportbyupdate");
      }
      // verify the required parameter 'beginDate' is set
      if (beginDate === undefined || beginDate === null) {
        throw new Error("Missing the required parameter 'beginDate' when calling requestreportbyupdate");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling requestreportbyupdate");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling requestreportbyupdate");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling requestreportbyupdate");
      }

      let pathParams = {
      };
      let queryParams = {
        'requesterEmail': requesterEmail,
        'beginDate': beginDate,
        'endDate': endDate
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/report/subscriptionsUpdated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
