/**
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InsertAddressesforSubscriptionRequest from '../model/InsertAddressesforSubscriptionRequest';
import UpdateSubscriptionsbySubscriptionIdRequest from '../model/UpdateSubscriptionsbySubscriptionIdRequest';

/**
* Subscriptions service.
* @module api/SubscriptionsApi
* @version 1.0
*/
export default class SubscriptionsApi {

    /**
    * Constructs a new SubscriptionsApi. 
    * @alias module:api/SubscriptionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelSubscriptionsbySubscriptionId operation.
     * @callback module:api/SubscriptionsApi~cancelSubscriptionsbySubscriptionIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Subscriptions by SubscriptionId
     * Cancels all Subscriptions of a subscription group. This operation does not have a rollback. Once cancelled, it cannot be re-activated
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Type of the content being sent.
     * @param {String} subscriptionId Subscription ID.
     * @param {module:api/SubscriptionsApi~cancelSubscriptionsbySubscriptionIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelSubscriptionsbySubscriptionId(accept, contentType, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling cancelSubscriptionsbySubscriptionId");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling cancelSubscriptionsbySubscriptionId");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling cancelSubscriptionsbySubscriptionId");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/cancel', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubscriptionList operation.
     * @callback module:api/SubscriptionsApi~getSubscriptionListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Subscription List
     * Retrieves a list of Subscriptions linked to your store.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/SubscriptionsApi~getSubscriptionListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSubscriptionList(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getSubscriptionList");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getSubscriptionList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getfrequencyoptionsbysubscriptionId operation.
     * @callback module:api/SubscriptionsApi~getfrequencyoptionsbysubscriptionIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get frequency options by subscriptionId
     * Lists frequency options for the Subscription, filtering by `subscriptionId`.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} subscriptionId Subscription ID.
     * @param {module:api/SubscriptionsApi~getfrequencyoptionsbysubscriptionIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getfrequencyoptionsbysubscriptionId(contentType, accept, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getfrequencyoptionsbysubscriptionId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getfrequencyoptionsbysubscriptionId");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling getfrequencyoptionsbysubscriptionId");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/frequency-options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getsubscriptionbyId operation.
     * @callback module:api/SubscriptionsApi~getsubscriptionbyIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve subscription by ID
     * Lists Subscription's details, searching by `subscriptionId`.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} subscriptionId Subscription ID.
     * @param {module:api/SubscriptionsApi~getsubscriptionbyIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getsubscriptionbyId(contentType, accept, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getsubscriptionbyId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getsubscriptionbyId");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling getsubscriptionbyId");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getsubscriptionstocustomer operation.
     * @callback module:api/SubscriptionsApi~getsubscriptionstocustomerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve customer's subscriptions
     * Retrieves details of a given customer's subscriptions, searching by that customer's `customerId`.
     * @param {String} customerId Customer ID.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/SubscriptionsApi~getsubscriptionstocustomerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getsubscriptionstocustomer(customerId, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getsubscriptionstocustomer");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getsubscriptionstocustomer");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getsubscriptionstocustomer");
      }

      let pathParams = {
      };
      let queryParams = {
        'customerId': customerId
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertAddressesforSubscription operation.
     * @callback module:api/SubscriptionsApi~insertAddressesforSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert Addresses for Subscription
     * Inserts address's information to complement the Subscription details.
     * @param {String} subscriptionId Subscription ID.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {Array.<module:model/InsertAddressesforSubscriptionRequest>} insertAddressesforSubscriptionRequest 
     * @param {module:api/SubscriptionsApi~insertAddressesforSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    insertAddressesforSubscription(subscriptionId, contentType, accept, insertAddressesforSubscriptionRequest, callback) {
      let postBody = insertAddressesforSubscriptionRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling insertAddressesforSubscription");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling insertAddressesforSubscription");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling insertAddressesforSubscription");
      }
      // verify the required parameter 'insertAddressesforSubscriptionRequest' is set
      if (insertAddressesforSubscriptionRequest === undefined || insertAddressesforSubscriptionRequest === null) {
        throw new Error("Missing the required parameter 'insertAddressesforSubscriptionRequest' when calling insertAddressesforSubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSubscriptionsbySubscriptionId operation.
     * @callback module:api/SubscriptionsApi~updateSubscriptionsbySubscriptionIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Subscriptions by SubscriptionId
     * Update, add or alter information of a given Subscription, filtering by `subscriptionId`.
     * @param {String} subscriptionId Subscription ID.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:model/UpdateSubscriptionsbySubscriptionIdRequest} updateSubscriptionsbySubscriptionIdRequest 
     * @param {module:api/SubscriptionsApi~updateSubscriptionsbySubscriptionIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSubscriptionsbySubscriptionId(subscriptionId, contentType, accept, updateSubscriptionsbySubscriptionIdRequest, callback) {
      let postBody = updateSubscriptionsbySubscriptionIdRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling updateSubscriptionsbySubscriptionId");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updateSubscriptionsbySubscriptionId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling updateSubscriptionsbySubscriptionId");
      }
      // verify the required parameter 'updateSubscriptionsbySubscriptionIdRequest' is set
      if (updateSubscriptionsbySubscriptionIdRequest === undefined || updateSubscriptionsbySubscriptionIdRequest === null) {
        throw new Error("Missing the required parameter 'updateSubscriptionsbySubscriptionIdRequest' when calling updateSubscriptionsbySubscriptionId");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
