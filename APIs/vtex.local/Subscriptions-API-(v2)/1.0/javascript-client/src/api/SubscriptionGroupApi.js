/**
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdditemsubscriptionGroupIdRequest from '../model/AdditemsubscriptionGroupIdRequest';
import InsertAddressesbygroupIdRequest from '../model/InsertAddressesbygroupIdRequest';
import UpdateSubscriptionbygroupIdRequest from '../model/UpdateSubscriptionbygroupIdRequest';

/**
* SubscriptionGroup service.
* @module api/SubscriptionGroupApi
* @version 1.0
*/
export default class SubscriptionGroupApi {

    /**
    * Constructs a new SubscriptionGroupApi. 
    * @alias module:api/SubscriptionGroupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the additemsubscriptionGroupId operation.
     * @callback module:api/SubscriptionGroupApi~additemsubscriptionGroupIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Subscription item by groupId
     * Adds an SKU to a given Subscription, filtering by groupId.
     * @param {String} groupId Group ID.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Type of the content being sent.
     * @param {module:model/AdditemsubscriptionGroupIdRequest} additemsubscriptionGroupIdRequest 
     * @param {module:api/SubscriptionGroupApi~additemsubscriptionGroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    additemsubscriptionGroupId(groupId, accept, contentType, additemsubscriptionGroupIdRequest, callback) {
      let postBody = additemsubscriptionGroupIdRequest;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling additemsubscriptionGroupId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling additemsubscriptionGroupId");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling additemsubscriptionGroupId");
      }
      // verify the required parameter 'additemsubscriptionGroupIdRequest' is set
      if (additemsubscriptionGroupIdRequest === undefined || additemsubscriptionGroupIdRequest === null) {
        throw new Error("Missing the required parameter 'additemsubscriptionGroupIdRequest' when calling additemsubscriptionGroupId");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions-group/{groupId}/additem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelSubscriptionbygroupId operation.
     * @callback module:api/SubscriptionGroupApi~cancelSubscriptionbygroupIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Subscription by groupId
     * Cancels Subscription by `groupId`
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Type of the content being sent.
     * @param {String} groupId Group ID.
     * @param {module:api/SubscriptionGroupApi~cancelSubscriptionbygroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelSubscriptionbygroupId(accept, contentType, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling cancelSubscriptionbygroupId");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling cancelSubscriptionbygroupId");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling cancelSubscriptionbygroupId");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions-group/{groupId}/cancel', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllsubscriptiongroup operation.
     * @callback module:api/SubscriptionGroupApi~getAllsubscriptiongroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All subscription groups
     * Retrieves all subscription groups in your store.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/SubscriptionGroupApi~getAllsubscriptiongroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllsubscriptiongroup(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getAllsubscriptiongroup");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getAllsubscriptiongroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions-group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigsubscriptionsgroup operation.
     * @callback module:api/SubscriptionGroupApi~getConfigsubscriptionsgroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Subscription group's Configuration
     * Retrieves details about a given subscription group's configuration, filtering by groupId.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} groupId Group ID.
     * @param {module:api/SubscriptionGroupApi~getConfigsubscriptionsgroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getConfigsubscriptionsgroup(contentType, accept, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getConfigsubscriptionsgroup");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getConfigsubscriptionsgroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getConfigsubscriptionsgroup");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions-group/{groupId}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationMessagebygroupId operation.
     * @callback module:api/SubscriptionGroupApi~getConversationMessagebygroupIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Conversation Message by groupId
     * Retrieves the conversation of a given Subscription group, filtering by groupId.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} groupId Group ID.
     * @param {module:api/SubscriptionGroupApi~getConversationMessagebygroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getConversationMessagebygroupId(contentType, accept, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getConversationMessagebygroupId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getConversationMessagebygroupId");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getConversationMessagebygroupId");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions-group/{groupId}/conversation-message', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNextpurchase operation.
     * @callback module:api/SubscriptionGroupApi~getNextpurchaseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Next purchase
     * Lists details of a given subscription group's next purchase, filtering by dateStr.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} dateStr Reference date that retrieves all next purchases, starting from the dateStr inserted. Must be in the format of {{yyyyMMdd}}
     * @param {module:api/SubscriptionGroupApi~getNextpurchaseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNextpurchase(contentType, accept, dateStr, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getNextpurchase");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getNextpurchase");
      }
      // verify the required parameter 'dateStr' is set
      if (dateStr === undefined || dateStr === null) {
        throw new Error("Missing the required parameter 'dateStr' when calling getNextpurchase");
      }

      let pathParams = {
        'dateStr': dateStr
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions-group/nextPurchase/{dateStr}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSimulatebysubscriptionGroup operation.
     * @callback module:api/SubscriptionGroupApi~getSimulatebysubscriptionGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Simulation by subscription-group
     * Retrieves Subscription simulations, filtering by groupId.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} groupId Group ID.
     * @param {module:api/SubscriptionGroupApi~getSimulatebysubscriptionGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSimulatebysubscriptionGroup(contentType, accept, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getSimulatebysubscriptionGroup");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getSimulatebysubscriptionGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getSimulatebysubscriptionGroup");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions-group/simulate/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubscriptionbygroupId operation.
     * @callback module:api/SubscriptionGroupApi~getSubscriptionbygroupIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Subscription by groupId
     * Lists Subscription details, filtering by `groupId`.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} groupId Group ID.
     * @param {module:api/SubscriptionGroupApi~getSubscriptionbygroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSubscriptionbygroupId(contentType, accept, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getSubscriptionbygroupId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getSubscriptionbygroupId");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getSubscriptionbygroupId");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions-group/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getaddressesbygroupId operation.
     * @callback module:api/SubscriptionGroupApi~getaddressesbygroupIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get addresses by groupId
     * Lists addresses linked to a given Subscription group, filtering by groupId.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} groupId 
     * @param {module:api/SubscriptionGroupApi~getaddressesbygroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getaddressesbygroupId(contentType, accept, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getaddressesbygroupId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getaddressesbygroupId");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getaddressesbygroupId");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions-group/{groupId}/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getfrequencyoptionsbygroupId operation.
     * @callback module:api/SubscriptionGroupApi~getfrequencyoptionsbygroupIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get frequency options by groupId
     * Lists frequency options of a given Subscription group, filtering by groupId.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} groupId Group ID.
     * @param {module:api/SubscriptionGroupApi~getfrequencyoptionsbygroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getfrequencyoptionsbygroupId(contentType, accept, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getfrequencyoptionsbygroupId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getfrequencyoptionsbygroupId");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getfrequencyoptionsbygroupId");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions-group/{groupId}/frequency-options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getpaymentSystembygroupId operation.
     * @callback module:api/SubscriptionGroupApi~getpaymentSystembygroupIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payment System by groupId
     * Retrieves payment system's information of a given Subscription group, filtering by groupId.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} groupId Group ID.
     * @param {module:api/SubscriptionGroupApi~getpaymentSystembygroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getpaymentSystembygroupId(contentType, accept, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getpaymentSystembygroupId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getpaymentSystembygroupId");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getpaymentSystembygroupId");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions-group/{groupId}/payment-systems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getsubscriptiongrouplist operation.
     * @callback module:api/SubscriptionGroupApi~getsubscriptiongrouplistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get subscription group list
     * Retrieves a list of Subscription groups in your store.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/SubscriptionGroupApi~getsubscriptiongrouplistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getsubscriptiongrouplist(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getsubscriptiongrouplist");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getsubscriptiongrouplist");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions-group/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getwillcreatebygroupId operation.
     * @callback module:api/SubscriptionGroupApi~getwillcreatebygroupIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List 'Will create' by groupId
     * Retrieves Subscription groups listed as 'will create', filtering by groupId.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} groupId Group ID.
     * @param {module:api/SubscriptionGroupApi~getwillcreatebygroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getwillcreatebygroupId(contentType, accept, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getwillcreatebygroupId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getwillcreatebygroupId");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getwillcreatebygroupId");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions-group/{groupId}/will-create', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertAddressesbygroupId operation.
     * @callback module:api/SubscriptionGroupApi~insertAddressesbygroupIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert Addresses by groupId
     * Insert address information of a given Subscription group, filtering by groupId.
     * @param {String} groupId Group ID.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Type of the content being sent.
     * @param {module:model/InsertAddressesbygroupIdRequest} insertAddressesbygroupIdRequest 
     * @param {module:api/SubscriptionGroupApi~insertAddressesbygroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    insertAddressesbygroupId(groupId, accept, contentType, insertAddressesbygroupIdRequest, callback) {
      let postBody = insertAddressesbygroupIdRequest;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling insertAddressesbygroupId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling insertAddressesbygroupId");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling insertAddressesbygroupId");
      }
      // verify the required parameter 'insertAddressesbygroupIdRequest' is set
      if (insertAddressesbygroupIdRequest === undefined || insertAddressesbygroupIdRequest === null) {
        throw new Error("Missing the required parameter 'insertAddressesbygroupIdRequest' when calling insertAddressesbygroupId");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions-group/{groupId}/addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrysubscriptionbygroupId operation.
     * @callback module:api/SubscriptionGroupApi~retrysubscriptionbygroupIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retry subscription by groupId
     * Permits the retry of a Subscription group, via API, filtering by groupId and instanceId.
     * @param {String} groupid Group ID.
     * @param {String} instanceId Instance ID.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Type of the content being sent.
     * @param {module:api/SubscriptionGroupApi~retrysubscriptionbygroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    retrysubscriptionbygroupId(groupid, instanceId, accept, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling retrysubscriptionbygroupId");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling retrysubscriptionbygroupId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling retrysubscriptionbygroupId");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling retrysubscriptionbygroupId");
      }

      let pathParams = {
        'groupid': groupid,
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions-group/{groupid}/instances/{instanceId}/retry', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSubscriptionbygroupId operation.
     * @callback module:api/SubscriptionGroupApi~updateSubscriptionbygroupIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Subscription by groupId
     * Updates a Subscription by `groupId`.
     * @param {String} groupId Group ID.
     * @param {module:model/UpdateSubscriptionbygroupIdRequest} updateSubscriptionbygroupIdRequest 
     * @param {module:api/SubscriptionGroupApi~updateSubscriptionbygroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSubscriptionbygroupId(groupId, updateSubscriptionbygroupIdRequest, callback) {
      let postBody = updateSubscriptionbygroupIdRequest;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling updateSubscriptionbygroupId");
      }
      // verify the required parameter 'updateSubscriptionbygroupIdRequest' is set
      if (updateSubscriptionbygroupIdRequest === undefined || updateSubscriptionbygroupIdRequest === null) {
        throw new Error("Missing the required parameter 'updateSubscriptionbygroupIdRequest' when calling updateSubscriptionbygroupId");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions-group/{groupId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
