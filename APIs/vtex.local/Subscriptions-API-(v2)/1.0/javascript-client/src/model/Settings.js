/**
 * Subscriptions API (v2 - DEPRECATED)
 * VTEX Subscriptions REST API Documentation  This documentation describes the available REST APIs for VTEX Subscription System.  With Subscriptions you can set up regularly scheduled deliveries.  All requests need authorization (VTEX Id authentication token or VTEX Appkey and Apptoken headers)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Settings model module.
 * @module model/Settings
 * @version 1.0
 */
class Settings {
    /**
     * Constructs a new <code>Settings</code>.
     * Subscriptions settings
     * @alias module:model/Settings
     * @param defaultSla {String} Default delivery method.
     * @param deliveryChannels {Array.<String>} Array containing delivery channels.
     * @param executionHourInUtc {Number} Indicates the time future subscription orders will be generated.
     * @param isMultipleInstallmentsEnabledOnCreation {Boolean} Defines whether or not multiple installments are enabled when a subscription is created.
     * @param isMultipleInstallmentsEnabledOnUpdate {Boolean} Defines whether or not multiple installments are enabled when a subscription is updated.
     * @param isUsingV3 {Boolean} Indicates whether or not Subscriptions V3 is enabled.
     * @param manualPriceAllowed {Boolean} When set to `true`, this property enables manual price configuration in subscription items. This is valid for all existing subscriptions, provided that there is a manual price configured and that `isUsingV3` is `true`.
     * @param onMigrationProcess {Boolean} Indicates whether or not the account is in the migration process to Subscriptions V3.
     * @param orderCustomDataAppId {String} When filled, this field passes along the `customData` infomration in the order to the future recurrent subscription orders.
     * @param postponeExpiration {Boolean} Defines whether or not the expiration of subscriptions can be postponed.
     * @param randomIdGeneration {Boolean} Defines whether or not the subscription order IDs will be randomly generated.
     * @param slaOption {String} Delivery method.
     * @param useItemPriceFromOriginalOrder {Boolean} When set to `true`, this property enables using the manual price for each item from the original subscription order. This is only valid for new subscriptions, created from the moment this configuration is enabled. For this to work, it is mandatory that the `manualPriceAllowed` property is set to `true` and that `isUsingV3` is `true`.
     * @param workflowVersion {String} Workflow version.
     */
    constructor(defaultSla, deliveryChannels, executionHourInUtc, isMultipleInstallmentsEnabledOnCreation, isMultipleInstallmentsEnabledOnUpdate, isUsingV3, manualPriceAllowed, onMigrationProcess, orderCustomDataAppId, postponeExpiration, randomIdGeneration, slaOption, useItemPriceFromOriginalOrder, workflowVersion) { 
        
        Settings.initialize(this, defaultSla, deliveryChannels, executionHourInUtc, isMultipleInstallmentsEnabledOnCreation, isMultipleInstallmentsEnabledOnUpdate, isUsingV3, manualPriceAllowed, onMigrationProcess, orderCustomDataAppId, postponeExpiration, randomIdGeneration, slaOption, useItemPriceFromOriginalOrder, workflowVersion);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, defaultSla, deliveryChannels, executionHourInUtc, isMultipleInstallmentsEnabledOnCreation, isMultipleInstallmentsEnabledOnUpdate, isUsingV3, manualPriceAllowed, onMigrationProcess, orderCustomDataAppId, postponeExpiration, randomIdGeneration, slaOption, useItemPriceFromOriginalOrder, workflowVersion) { 
        obj['defaultSla'] = defaultSla;
        obj['deliveryChannels'] = deliveryChannels;
        obj['executionHourInUtc'] = executionHourInUtc || 0;
        obj['isMultipleInstallmentsEnabledOnCreation'] = isMultipleInstallmentsEnabledOnCreation || false;
        obj['isMultipleInstallmentsEnabledOnUpdate'] = isMultipleInstallmentsEnabledOnUpdate || false;
        obj['isUsingV3'] = isUsingV3 || false;
        obj['manualPriceAllowed'] = manualPriceAllowed || false;
        obj['onMigrationProcess'] = onMigrationProcess || false;
        obj['orderCustomDataAppId'] = orderCustomDataAppId;
        obj['postponeExpiration'] = postponeExpiration || false;
        obj['randomIdGeneration'] = randomIdGeneration || false;
        obj['slaOption'] = slaOption || '';
        obj['useItemPriceFromOriginalOrder'] = useItemPriceFromOriginalOrder || false;
        obj['workflowVersion'] = workflowVersion || '';
    }

    /**
     * Constructs a <code>Settings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Settings} obj Optional instance to populate.
     * @return {module:model/Settings} The populated <code>Settings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Settings();

            if (data.hasOwnProperty('defaultSla')) {
                obj['defaultSla'] = ApiClient.convertToType(data['defaultSla'], 'String');
            }
            if (data.hasOwnProperty('deliveryChannels')) {
                obj['deliveryChannels'] = ApiClient.convertToType(data['deliveryChannels'], ['String']);
            }
            if (data.hasOwnProperty('executionHourInUtc')) {
                obj['executionHourInUtc'] = ApiClient.convertToType(data['executionHourInUtc'], 'Number');
            }
            if (data.hasOwnProperty('isMultipleInstallmentsEnabledOnCreation')) {
                obj['isMultipleInstallmentsEnabledOnCreation'] = ApiClient.convertToType(data['isMultipleInstallmentsEnabledOnCreation'], 'Boolean');
            }
            if (data.hasOwnProperty('isMultipleInstallmentsEnabledOnUpdate')) {
                obj['isMultipleInstallmentsEnabledOnUpdate'] = ApiClient.convertToType(data['isMultipleInstallmentsEnabledOnUpdate'], 'Boolean');
            }
            if (data.hasOwnProperty('isUsingV3')) {
                obj['isUsingV3'] = ApiClient.convertToType(data['isUsingV3'], 'Boolean');
            }
            if (data.hasOwnProperty('manualPriceAllowed')) {
                obj['manualPriceAllowed'] = ApiClient.convertToType(data['manualPriceAllowed'], 'Boolean');
            }
            if (data.hasOwnProperty('onMigrationProcess')) {
                obj['onMigrationProcess'] = ApiClient.convertToType(data['onMigrationProcess'], 'Boolean');
            }
            if (data.hasOwnProperty('orderCustomDataAppId')) {
                obj['orderCustomDataAppId'] = ApiClient.convertToType(data['orderCustomDataAppId'], 'String');
            }
            if (data.hasOwnProperty('postponeExpiration')) {
                obj['postponeExpiration'] = ApiClient.convertToType(data['postponeExpiration'], 'Boolean');
            }
            if (data.hasOwnProperty('randomIdGeneration')) {
                obj['randomIdGeneration'] = ApiClient.convertToType(data['randomIdGeneration'], 'Boolean');
            }
            if (data.hasOwnProperty('slaOption')) {
                obj['slaOption'] = ApiClient.convertToType(data['slaOption'], 'String');
            }
            if (data.hasOwnProperty('useItemPriceFromOriginalOrder')) {
                obj['useItemPriceFromOriginalOrder'] = ApiClient.convertToType(data['useItemPriceFromOriginalOrder'], 'Boolean');
            }
            if (data.hasOwnProperty('workflowVersion')) {
                obj['workflowVersion'] = ApiClient.convertToType(data['workflowVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Settings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Settings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Settings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['defaultSla'] && !(typeof data['defaultSla'] === 'string' || data['defaultSla'] instanceof String)) {
            throw new Error("Expected the field `defaultSla` to be a primitive type in the JSON string but got " + data['defaultSla']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['deliveryChannels'])) {
            throw new Error("Expected the field `deliveryChannels` to be an array in the JSON data but got " + data['deliveryChannels']);
        }
        // ensure the json data is a string
        if (data['orderCustomDataAppId'] && !(typeof data['orderCustomDataAppId'] === 'string' || data['orderCustomDataAppId'] instanceof String)) {
            throw new Error("Expected the field `orderCustomDataAppId` to be a primitive type in the JSON string but got " + data['orderCustomDataAppId']);
        }
        // ensure the json data is a string
        if (data['slaOption'] && !(typeof data['slaOption'] === 'string' || data['slaOption'] instanceof String)) {
            throw new Error("Expected the field `slaOption` to be a primitive type in the JSON string but got " + data['slaOption']);
        }
        // ensure the json data is a string
        if (data['workflowVersion'] && !(typeof data['workflowVersion'] === 'string' || data['workflowVersion'] instanceof String)) {
            throw new Error("Expected the field `workflowVersion` to be a primitive type in the JSON string but got " + data['workflowVersion']);
        }

        return true;
    }


}

Settings.RequiredProperties = ["defaultSla", "deliveryChannels", "executionHourInUtc", "isMultipleInstallmentsEnabledOnCreation", "isMultipleInstallmentsEnabledOnUpdate", "isUsingV3", "manualPriceAllowed", "onMigrationProcess", "orderCustomDataAppId", "postponeExpiration", "randomIdGeneration", "slaOption", "useItemPriceFromOriginalOrder", "workflowVersion"];

/**
 * Default delivery method.
 * @member {String} defaultSla
 */
Settings.prototype['defaultSla'] = undefined;

/**
 * Array containing delivery channels.
 * @member {Array.<String>} deliveryChannels
 */
Settings.prototype['deliveryChannels'] = undefined;

/**
 * Indicates the time future subscription orders will be generated.
 * @member {Number} executionHourInUtc
 * @default 0
 */
Settings.prototype['executionHourInUtc'] = 0;

/**
 * Defines whether or not multiple installments are enabled when a subscription is created.
 * @member {Boolean} isMultipleInstallmentsEnabledOnCreation
 * @default false
 */
Settings.prototype['isMultipleInstallmentsEnabledOnCreation'] = false;

/**
 * Defines whether or not multiple installments are enabled when a subscription is updated.
 * @member {Boolean} isMultipleInstallmentsEnabledOnUpdate
 * @default false
 */
Settings.prototype['isMultipleInstallmentsEnabledOnUpdate'] = false;

/**
 * Indicates whether or not Subscriptions V3 is enabled.
 * @member {Boolean} isUsingV3
 * @default false
 */
Settings.prototype['isUsingV3'] = false;

/**
 * When set to `true`, this property enables manual price configuration in subscription items. This is valid for all existing subscriptions, provided that there is a manual price configured and that `isUsingV3` is `true`.
 * @member {Boolean} manualPriceAllowed
 * @default false
 */
Settings.prototype['manualPriceAllowed'] = false;

/**
 * Indicates whether or not the account is in the migration process to Subscriptions V3.
 * @member {Boolean} onMigrationProcess
 * @default false
 */
Settings.prototype['onMigrationProcess'] = false;

/**
 * When filled, this field passes along the `customData` infomration in the order to the future recurrent subscription orders.
 * @member {String} orderCustomDataAppId
 */
Settings.prototype['orderCustomDataAppId'] = undefined;

/**
 * Defines whether or not the expiration of subscriptions can be postponed.
 * @member {Boolean} postponeExpiration
 * @default false
 */
Settings.prototype['postponeExpiration'] = false;

/**
 * Defines whether or not the subscription order IDs will be randomly generated.
 * @member {Boolean} randomIdGeneration
 * @default false
 */
Settings.prototype['randomIdGeneration'] = false;

/**
 * Delivery method.
 * @member {String} slaOption
 * @default ''
 */
Settings.prototype['slaOption'] = '';

/**
 * When set to `true`, this property enables using the manual price for each item from the original subscription order. This is only valid for new subscriptions, created from the moment this configuration is enabled. For this to work, it is mandatory that the `manualPriceAllowed` property is set to `true` and that `isUsingV3` is `true`.
 * @member {Boolean} useItemPriceFromOriginalOrder
 * @default false
 */
Settings.prototype['useItemPriceFromOriginalOrder'] = false;

/**
 * Workflow version.
 * @member {String} workflowVersion
 * @default ''
 */
Settings.prototype['workflowVersion'] = '';






export default Settings;

