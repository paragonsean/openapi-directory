# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sku import Sku
from openapi_server import util


class AdditemsubscriptionGroupIdRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint: str=None, price_at_subscription_date: int=None, quantity: int=None, selling_price: int=None, sku: Sku=None):
        """AdditemsubscriptionGroupIdRequest - a model defined in OpenAPI

        :param endpoint: The endpoint of this AdditemsubscriptionGroupIdRequest.
        :param price_at_subscription_date: The price_at_subscription_date of this AdditemsubscriptionGroupIdRequest.
        :param quantity: The quantity of this AdditemsubscriptionGroupIdRequest.
        :param selling_price: The selling_price of this AdditemsubscriptionGroupIdRequest.
        :param sku: The sku of this AdditemsubscriptionGroupIdRequest.
        """
        self.openapi_types = {
            'endpoint': str,
            'price_at_subscription_date': int,
            'quantity': int,
            'selling_price': int,
            'sku': Sku
        }

        self.attribute_map = {
            'endpoint': 'endpoint',
            'price_at_subscription_date': 'priceAtSubscriptionDate',
            'quantity': 'quantity',
            'selling_price': 'sellingPrice',
            'sku': 'sku'
        }

        self._endpoint = endpoint
        self._price_at_subscription_date = price_at_subscription_date
        self._quantity = quantity
        self._selling_price = selling_price
        self._sku = sku

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditemsubscriptionGroupIdRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Additemsubscription-groupIdRequest of this AdditemsubscriptionGroupIdRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint(self):
        """Gets the endpoint of this AdditemsubscriptionGroupIdRequest.


        :return: The endpoint of this AdditemsubscriptionGroupIdRequest.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this AdditemsubscriptionGroupIdRequest.


        :param endpoint: The endpoint of this AdditemsubscriptionGroupIdRequest.
        :type endpoint: str
        """
        if endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")

        self._endpoint = endpoint

    @property
    def price_at_subscription_date(self):
        """Gets the price_at_subscription_date of this AdditemsubscriptionGroupIdRequest.


        :return: The price_at_subscription_date of this AdditemsubscriptionGroupIdRequest.
        :rtype: int
        """
        return self._price_at_subscription_date

    @price_at_subscription_date.setter
    def price_at_subscription_date(self, price_at_subscription_date):
        """Sets the price_at_subscription_date of this AdditemsubscriptionGroupIdRequest.


        :param price_at_subscription_date: The price_at_subscription_date of this AdditemsubscriptionGroupIdRequest.
        :type price_at_subscription_date: int
        """
        if price_at_subscription_date is None:
            raise ValueError("Invalid value for `price_at_subscription_date`, must not be `None`")

        self._price_at_subscription_date = price_at_subscription_date

    @property
    def quantity(self):
        """Gets the quantity of this AdditemsubscriptionGroupIdRequest.


        :return: The quantity of this AdditemsubscriptionGroupIdRequest.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this AdditemsubscriptionGroupIdRequest.


        :param quantity: The quantity of this AdditemsubscriptionGroupIdRequest.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def selling_price(self):
        """Gets the selling_price of this AdditemsubscriptionGroupIdRequest.


        :return: The selling_price of this AdditemsubscriptionGroupIdRequest.
        :rtype: int
        """
        return self._selling_price

    @selling_price.setter
    def selling_price(self, selling_price):
        """Sets the selling_price of this AdditemsubscriptionGroupIdRequest.


        :param selling_price: The selling_price of this AdditemsubscriptionGroupIdRequest.
        :type selling_price: int
        """
        if selling_price is None:
            raise ValueError("Invalid value for `selling_price`, must not be `None`")

        self._selling_price = selling_price

    @property
    def sku(self):
        """Gets the sku of this AdditemsubscriptionGroupIdRequest.


        :return: The sku of this AdditemsubscriptionGroupIdRequest.
        :rtype: Sku
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this AdditemsubscriptionGroupIdRequest.


        :param sku: The sku of this AdditemsubscriptionGroupIdRequest.
        :type sku: Sku
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku
