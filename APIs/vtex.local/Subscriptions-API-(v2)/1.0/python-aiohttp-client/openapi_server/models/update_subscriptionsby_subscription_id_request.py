# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item import Item
from openapi_server.models.metadatum import Metadatum
from openapi_server.models.plan import Plan
from openapi_server.models.purchase_settings import PurchaseSettings
from openapi_server.models.shipping_address import ShippingAddress
from openapi_server import util


class UpdateSubscriptionsbySubscriptionIdRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_skipped: bool=None, item: Item=None, metadata: List[Metadatum]=None, plan: Plan=None, purchase_settings: PurchaseSettings=None, shipping_address: ShippingAddress=None, status: str=None):
        """UpdateSubscriptionsbySubscriptionIdRequest - a model defined in OpenAPI

        :param is_skipped: The is_skipped of this UpdateSubscriptionsbySubscriptionIdRequest.
        :param item: The item of this UpdateSubscriptionsbySubscriptionIdRequest.
        :param metadata: The metadata of this UpdateSubscriptionsbySubscriptionIdRequest.
        :param plan: The plan of this UpdateSubscriptionsbySubscriptionIdRequest.
        :param purchase_settings: The purchase_settings of this UpdateSubscriptionsbySubscriptionIdRequest.
        :param shipping_address: The shipping_address of this UpdateSubscriptionsbySubscriptionIdRequest.
        :param status: The status of this UpdateSubscriptionsbySubscriptionIdRequest.
        """
        self.openapi_types = {
            'is_skipped': bool,
            'item': Item,
            'metadata': List[Metadatum],
            'plan': Plan,
            'purchase_settings': PurchaseSettings,
            'shipping_address': ShippingAddress,
            'status': str
        }

        self.attribute_map = {
            'is_skipped': 'isSkipped',
            'item': 'item',
            'metadata': 'metadata',
            'plan': 'plan',
            'purchase_settings': 'purchaseSettings',
            'shipping_address': 'shippingAddress',
            'status': 'status'
        }

        self._is_skipped = is_skipped
        self._item = item
        self._metadata = metadata
        self._plan = plan
        self._purchase_settings = purchase_settings
        self._shipping_address = shipping_address
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSubscriptionsbySubscriptionIdRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSubscriptionsbySubscriptionIdRequest of this UpdateSubscriptionsbySubscriptionIdRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_skipped(self):
        """Gets the is_skipped of this UpdateSubscriptionsbySubscriptionIdRequest.


        :return: The is_skipped of this UpdateSubscriptionsbySubscriptionIdRequest.
        :rtype: bool
        """
        return self._is_skipped

    @is_skipped.setter
    def is_skipped(self, is_skipped):
        """Sets the is_skipped of this UpdateSubscriptionsbySubscriptionIdRequest.


        :param is_skipped: The is_skipped of this UpdateSubscriptionsbySubscriptionIdRequest.
        :type is_skipped: bool
        """
        if is_skipped is None:
            raise ValueError("Invalid value for `is_skipped`, must not be `None`")

        self._is_skipped = is_skipped

    @property
    def item(self):
        """Gets the item of this UpdateSubscriptionsbySubscriptionIdRequest.


        :return: The item of this UpdateSubscriptionsbySubscriptionIdRequest.
        :rtype: Item
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this UpdateSubscriptionsbySubscriptionIdRequest.


        :param item: The item of this UpdateSubscriptionsbySubscriptionIdRequest.
        :type item: Item
        """
        if item is None:
            raise ValueError("Invalid value for `item`, must not be `None`")

        self._item = item

    @property
    def metadata(self):
        """Gets the metadata of this UpdateSubscriptionsbySubscriptionIdRequest.

        

        :return: The metadata of this UpdateSubscriptionsbySubscriptionIdRequest.
        :rtype: List[Metadatum]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this UpdateSubscriptionsbySubscriptionIdRequest.

        

        :param metadata: The metadata of this UpdateSubscriptionsbySubscriptionIdRequest.
        :type metadata: List[Metadatum]
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def plan(self):
        """Gets the plan of this UpdateSubscriptionsbySubscriptionIdRequest.


        :return: The plan of this UpdateSubscriptionsbySubscriptionIdRequest.
        :rtype: Plan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this UpdateSubscriptionsbySubscriptionIdRequest.


        :param plan: The plan of this UpdateSubscriptionsbySubscriptionIdRequest.
        :type plan: Plan
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")

        self._plan = plan

    @property
    def purchase_settings(self):
        """Gets the purchase_settings of this UpdateSubscriptionsbySubscriptionIdRequest.


        :return: The purchase_settings of this UpdateSubscriptionsbySubscriptionIdRequest.
        :rtype: PurchaseSettings
        """
        return self._purchase_settings

    @purchase_settings.setter
    def purchase_settings(self, purchase_settings):
        """Sets the purchase_settings of this UpdateSubscriptionsbySubscriptionIdRequest.


        :param purchase_settings: The purchase_settings of this UpdateSubscriptionsbySubscriptionIdRequest.
        :type purchase_settings: PurchaseSettings
        """
        if purchase_settings is None:
            raise ValueError("Invalid value for `purchase_settings`, must not be `None`")

        self._purchase_settings = purchase_settings

    @property
    def shipping_address(self):
        """Gets the shipping_address of this UpdateSubscriptionsbySubscriptionIdRequest.


        :return: The shipping_address of this UpdateSubscriptionsbySubscriptionIdRequest.
        :rtype: ShippingAddress
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this UpdateSubscriptionsbySubscriptionIdRequest.


        :param shipping_address: The shipping_address of this UpdateSubscriptionsbySubscriptionIdRequest.
        :type shipping_address: ShippingAddress
        """
        if shipping_address is None:
            raise ValueError("Invalid value for `shipping_address`, must not be `None`")

        self._shipping_address = shipping_address

    @property
    def status(self):
        """Gets the status of this UpdateSubscriptionsbySubscriptionIdRequest.


        :return: The status of this UpdateSubscriptionsbySubscriptionIdRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateSubscriptionsbySubscriptionIdRequest.


        :param status: The status of this UpdateSubscriptionsbySubscriptionIdRequest.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
