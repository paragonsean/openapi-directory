# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdditionalComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, long_name: str=None, short_name: str=None, types: List[str]=None):
        """AdditionalComponent - a model defined in OpenAPI

        :param long_name: The long_name of this AdditionalComponent.
        :param short_name: The short_name of this AdditionalComponent.
        :param types: The types of this AdditionalComponent.
        """
        self.openapi_types = {
            'long_name': str,
            'short_name': str,
            'types': List[str]
        }

        self.attribute_map = {
            'long_name': 'longName',
            'short_name': 'shortName',
            'types': 'types'
        }

        self._long_name = long_name
        self._short_name = short_name
        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdditionalComponent of this AdditionalComponent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def long_name(self):
        """Gets the long_name of this AdditionalComponent.


        :return: The long_name of this AdditionalComponent.
        :rtype: str
        """
        return self._long_name

    @long_name.setter
    def long_name(self, long_name):
        """Sets the long_name of this AdditionalComponent.


        :param long_name: The long_name of this AdditionalComponent.
        :type long_name: str
        """
        if long_name is None:
            raise ValueError("Invalid value for `long_name`, must not be `None`")

        self._long_name = long_name

    @property
    def short_name(self):
        """Gets the short_name of this AdditionalComponent.


        :return: The short_name of this AdditionalComponent.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this AdditionalComponent.


        :param short_name: The short_name of this AdditionalComponent.
        :type short_name: str
        """
        if short_name is None:
            raise ValueError("Invalid value for `short_name`, must not be `None`")

        self._short_name = short_name

    @property
    def types(self):
        """Gets the types of this AdditionalComponent.

        

        :return: The types of this AdditionalComponent.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this AdditionalComponent.

        

        :param types: The types of this AdditionalComponent.
        :type types: List[str]
        """
        if types is None:
            raise ValueError("Invalid value for `types`, must not be `None`")

        self._types = types
