# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metadatum import Metadatum
from openapi_server.models.sku import Sku
from openapi_server import util


class Item1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subscription_id: str=None, created_at: str=None, cycle_count: int=None, endpoint: str=None, is_skipped: bool=None, last_update: str=None, metadata: List[Metadatum]=None, original_item_index: int=None, original_order_id: str=None, price_at_subscription_date: int=None, quantity: int=None, selling_price: int=None, sku: Sku=None, status: str=None):
        """Item1 - a model defined in OpenAPI

        :param subscription_id: The subscription_id of this Item1.
        :param created_at: The created_at of this Item1.
        :param cycle_count: The cycle_count of this Item1.
        :param endpoint: The endpoint of this Item1.
        :param is_skipped: The is_skipped of this Item1.
        :param last_update: The last_update of this Item1.
        :param metadata: The metadata of this Item1.
        :param original_item_index: The original_item_index of this Item1.
        :param original_order_id: The original_order_id of this Item1.
        :param price_at_subscription_date: The price_at_subscription_date of this Item1.
        :param quantity: The quantity of this Item1.
        :param selling_price: The selling_price of this Item1.
        :param sku: The sku of this Item1.
        :param status: The status of this Item1.
        """
        self.openapi_types = {
            'subscription_id': str,
            'created_at': str,
            'cycle_count': int,
            'endpoint': str,
            'is_skipped': bool,
            'last_update': str,
            'metadata': List[Metadatum],
            'original_item_index': int,
            'original_order_id': str,
            'price_at_subscription_date': int,
            'quantity': int,
            'selling_price': int,
            'sku': Sku,
            'status': str
        }

        self.attribute_map = {
            'subscription_id': 'SubscriptionId',
            'created_at': 'createdAt',
            'cycle_count': 'cycleCount',
            'endpoint': 'endpoint',
            'is_skipped': 'isSkipped',
            'last_update': 'lastUpdate',
            'metadata': 'metadata',
            'original_item_index': 'originalItemIndex',
            'original_order_id': 'originalOrderId',
            'price_at_subscription_date': 'priceAtSubscriptionDate',
            'quantity': 'quantity',
            'selling_price': 'sellingPrice',
            'sku': 'sku',
            'status': 'status'
        }

        self._subscription_id = subscription_id
        self._created_at = created_at
        self._cycle_count = cycle_count
        self._endpoint = endpoint
        self._is_skipped = is_skipped
        self._last_update = last_update
        self._metadata = metadata
        self._original_item_index = original_item_index
        self._original_order_id = original_order_id
        self._price_at_subscription_date = price_at_subscription_date
        self._quantity = quantity
        self._selling_price = selling_price
        self._sku = sku
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Item1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item1 of this Item1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subscription_id(self):
        """Gets the subscription_id of this Item1.


        :return: The subscription_id of this Item1.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this Item1.


        :param subscription_id: The subscription_id of this Item1.
        :type subscription_id: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")

        self._subscription_id = subscription_id

    @property
    def created_at(self):
        """Gets the created_at of this Item1.


        :return: The created_at of this Item1.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Item1.


        :param created_at: The created_at of this Item1.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def cycle_count(self):
        """Gets the cycle_count of this Item1.


        :return: The cycle_count of this Item1.
        :rtype: int
        """
        return self._cycle_count

    @cycle_count.setter
    def cycle_count(self, cycle_count):
        """Sets the cycle_count of this Item1.


        :param cycle_count: The cycle_count of this Item1.
        :type cycle_count: int
        """
        if cycle_count is None:
            raise ValueError("Invalid value for `cycle_count`, must not be `None`")

        self._cycle_count = cycle_count

    @property
    def endpoint(self):
        """Gets the endpoint of this Item1.


        :return: The endpoint of this Item1.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this Item1.


        :param endpoint: The endpoint of this Item1.
        :type endpoint: str
        """
        if endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")

        self._endpoint = endpoint

    @property
    def is_skipped(self):
        """Gets the is_skipped of this Item1.


        :return: The is_skipped of this Item1.
        :rtype: bool
        """
        return self._is_skipped

    @is_skipped.setter
    def is_skipped(self, is_skipped):
        """Sets the is_skipped of this Item1.


        :param is_skipped: The is_skipped of this Item1.
        :type is_skipped: bool
        """
        if is_skipped is None:
            raise ValueError("Invalid value for `is_skipped`, must not be `None`")

        self._is_skipped = is_skipped

    @property
    def last_update(self):
        """Gets the last_update of this Item1.


        :return: The last_update of this Item1.
        :rtype: str
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Item1.


        :param last_update: The last_update of this Item1.
        :type last_update: str
        """
        if last_update is None:
            raise ValueError("Invalid value for `last_update`, must not be `None`")

        self._last_update = last_update

    @property
    def metadata(self):
        """Gets the metadata of this Item1.

        

        :return: The metadata of this Item1.
        :rtype: List[Metadatum]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Item1.

        

        :param metadata: The metadata of this Item1.
        :type metadata: List[Metadatum]
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def original_item_index(self):
        """Gets the original_item_index of this Item1.


        :return: The original_item_index of this Item1.
        :rtype: int
        """
        return self._original_item_index

    @original_item_index.setter
    def original_item_index(self, original_item_index):
        """Sets the original_item_index of this Item1.


        :param original_item_index: The original_item_index of this Item1.
        :type original_item_index: int
        """
        if original_item_index is None:
            raise ValueError("Invalid value for `original_item_index`, must not be `None`")

        self._original_item_index = original_item_index

    @property
    def original_order_id(self):
        """Gets the original_order_id of this Item1.


        :return: The original_order_id of this Item1.
        :rtype: str
        """
        return self._original_order_id

    @original_order_id.setter
    def original_order_id(self, original_order_id):
        """Sets the original_order_id of this Item1.


        :param original_order_id: The original_order_id of this Item1.
        :type original_order_id: str
        """
        if original_order_id is None:
            raise ValueError("Invalid value for `original_order_id`, must not be `None`")

        self._original_order_id = original_order_id

    @property
    def price_at_subscription_date(self):
        """Gets the price_at_subscription_date of this Item1.


        :return: The price_at_subscription_date of this Item1.
        :rtype: int
        """
        return self._price_at_subscription_date

    @price_at_subscription_date.setter
    def price_at_subscription_date(self, price_at_subscription_date):
        """Sets the price_at_subscription_date of this Item1.


        :param price_at_subscription_date: The price_at_subscription_date of this Item1.
        :type price_at_subscription_date: int
        """
        if price_at_subscription_date is None:
            raise ValueError("Invalid value for `price_at_subscription_date`, must not be `None`")

        self._price_at_subscription_date = price_at_subscription_date

    @property
    def quantity(self):
        """Gets the quantity of this Item1.


        :return: The quantity of this Item1.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Item1.


        :param quantity: The quantity of this Item1.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def selling_price(self):
        """Gets the selling_price of this Item1.


        :return: The selling_price of this Item1.
        :rtype: int
        """
        return self._selling_price

    @selling_price.setter
    def selling_price(self, selling_price):
        """Sets the selling_price of this Item1.


        :param selling_price: The selling_price of this Item1.
        :type selling_price: int
        """
        if selling_price is None:
            raise ValueError("Invalid value for `selling_price`, must not be `None`")

        self._selling_price = selling_price

    @property
    def sku(self):
        """Gets the sku of this Item1.


        :return: The sku of this Item1.
        :rtype: Sku
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this Item1.


        :param sku: The sku of this Item1.
        :type sku: Sku
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku

    @property
    def status(self):
        """Gets the status of this Item1.


        :return: The status of this Item1.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Item1.


        :param status: The status of this Item1.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
