# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Sku(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail_url: str=None, id: str=None, image_url: str=None, name: str=None, name_complete: str=None, product_name: str=None):
        """Sku - a model defined in OpenAPI

        :param detail_url: The detail_url of this Sku.
        :param id: The id of this Sku.
        :param image_url: The image_url of this Sku.
        :param name: The name of this Sku.
        :param name_complete: The name_complete of this Sku.
        :param product_name: The product_name of this Sku.
        """
        self.openapi_types = {
            'detail_url': str,
            'id': str,
            'image_url': str,
            'name': str,
            'name_complete': str,
            'product_name': str
        }

        self.attribute_map = {
            'detail_url': 'detailUrl',
            'id': 'id',
            'image_url': 'imageUrl',
            'name': 'name',
            'name_complete': 'nameComplete',
            'product_name': 'productName'
        }

        self._detail_url = detail_url
        self._id = id
        self._image_url = image_url
        self._name = name
        self._name_complete = name_complete
        self._product_name = product_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sku':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sku of this Sku.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail_url(self):
        """Gets the detail_url of this Sku.


        :return: The detail_url of this Sku.
        :rtype: str
        """
        return self._detail_url

    @detail_url.setter
    def detail_url(self, detail_url):
        """Sets the detail_url of this Sku.


        :param detail_url: The detail_url of this Sku.
        :type detail_url: str
        """
        if detail_url is None:
            raise ValueError("Invalid value for `detail_url`, must not be `None`")

        self._detail_url = detail_url

    @property
    def id(self):
        """Gets the id of this Sku.


        :return: The id of this Sku.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Sku.


        :param id: The id of this Sku.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this Sku.


        :return: The image_url of this Sku.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this Sku.


        :param image_url: The image_url of this Sku.
        :type image_url: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")

        self._image_url = image_url

    @property
    def name(self):
        """Gets the name of this Sku.


        :return: The name of this Sku.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sku.


        :param name: The name of this Sku.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def name_complete(self):
        """Gets the name_complete of this Sku.


        :return: The name_complete of this Sku.
        :rtype: str
        """
        return self._name_complete

    @name_complete.setter
    def name_complete(self, name_complete):
        """Sets the name_complete of this Sku.


        :param name_complete: The name_complete of this Sku.
        :type name_complete: str
        """
        if name_complete is None:
            raise ValueError("Invalid value for `name_complete`, must not be `None`")

        self._name_complete = name_complete

    @property
    def product_name(self):
        """Gets the product_name of this Sku.


        :return: The product_name of this Sku.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this Sku.


        :param product_name: The product_name of this Sku.
        :type product_name: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")

        self._product_name = product_name
