# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_method import PaymentMethod
from openapi_server import util


class PurchaseSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, payment_method: PaymentMethod=None, purchase_day: str=None, sales_channel: str=None, selected_sla: str=None, seller: str=None):
        """PurchaseSettings - a model defined in OpenAPI

        :param currency_code: The currency_code of this PurchaseSettings.
        :param payment_method: The payment_method of this PurchaseSettings.
        :param purchase_day: The purchase_day of this PurchaseSettings.
        :param sales_channel: The sales_channel of this PurchaseSettings.
        :param selected_sla: The selected_sla of this PurchaseSettings.
        :param seller: The seller of this PurchaseSettings.
        """
        self.openapi_types = {
            'currency_code': str,
            'payment_method': PaymentMethod,
            'purchase_day': str,
            'sales_channel': str,
            'selected_sla': str,
            'seller': str
        }

        self.attribute_map = {
            'currency_code': 'currencyCode',
            'payment_method': 'paymentMethod',
            'purchase_day': 'purchaseDay',
            'sales_channel': 'salesChannel',
            'selected_sla': 'selectedSla',
            'seller': 'seller'
        }

        self._currency_code = currency_code
        self._payment_method = payment_method
        self._purchase_day = purchase_day
        self._sales_channel = sales_channel
        self._selected_sla = selected_sla
        self._seller = seller

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PurchaseSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PurchaseSettings of this PurchaseSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this PurchaseSettings.


        :return: The currency_code of this PurchaseSettings.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this PurchaseSettings.


        :param currency_code: The currency_code of this PurchaseSettings.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def payment_method(self):
        """Gets the payment_method of this PurchaseSettings.


        :return: The payment_method of this PurchaseSettings.
        :rtype: PaymentMethod
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this PurchaseSettings.


        :param payment_method: The payment_method of this PurchaseSettings.
        :type payment_method: PaymentMethod
        """
        if payment_method is None:
            raise ValueError("Invalid value for `payment_method`, must not be `None`")

        self._payment_method = payment_method

    @property
    def purchase_day(self):
        """Gets the purchase_day of this PurchaseSettings.


        :return: The purchase_day of this PurchaseSettings.
        :rtype: str
        """
        return self._purchase_day

    @purchase_day.setter
    def purchase_day(self, purchase_day):
        """Sets the purchase_day of this PurchaseSettings.


        :param purchase_day: The purchase_day of this PurchaseSettings.
        :type purchase_day: str
        """
        if purchase_day is None:
            raise ValueError("Invalid value for `purchase_day`, must not be `None`")

        self._purchase_day = purchase_day

    @property
    def sales_channel(self):
        """Gets the sales_channel of this PurchaseSettings.


        :return: The sales_channel of this PurchaseSettings.
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this PurchaseSettings.


        :param sales_channel: The sales_channel of this PurchaseSettings.
        :type sales_channel: str
        """
        if sales_channel is None:
            raise ValueError("Invalid value for `sales_channel`, must not be `None`")

        self._sales_channel = sales_channel

    @property
    def selected_sla(self):
        """Gets the selected_sla of this PurchaseSettings.


        :return: The selected_sla of this PurchaseSettings.
        :rtype: str
        """
        return self._selected_sla

    @selected_sla.setter
    def selected_sla(self, selected_sla):
        """Sets the selected_sla of this PurchaseSettings.


        :param selected_sla: The selected_sla of this PurchaseSettings.
        :type selected_sla: str
        """
        if selected_sla is None:
            raise ValueError("Invalid value for `selected_sla`, must not be `None`")

        self._selected_sla = selected_sla

    @property
    def seller(self):
        """Gets the seller of this PurchaseSettings.


        :return: The seller of this PurchaseSettings.
        :rtype: str
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this PurchaseSettings.


        :param seller: The seller of this PurchaseSettings.
        :type seller: str
        """
        if seller is None:
            raise ValueError("Invalid value for `seller`, must not be `None`")

        self._seller = seller
