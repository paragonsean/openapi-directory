# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Properties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_prop1: str=None, additional_prop2: str=None, additional_prop3: str=None):
        """Properties - a model defined in OpenAPI

        :param additional_prop1: The additional_prop1 of this Properties.
        :param additional_prop2: The additional_prop2 of this Properties.
        :param additional_prop3: The additional_prop3 of this Properties.
        """
        self.openapi_types = {
            'additional_prop1': str,
            'additional_prop2': str,
            'additional_prop3': str
        }

        self.attribute_map = {
            'additional_prop1': 'additionalProp1',
            'additional_prop2': 'additionalProp2',
            'additional_prop3': 'additionalProp3'
        }

        self._additional_prop1 = additional_prop1
        self._additional_prop2 = additional_prop2
        self._additional_prop3 = additional_prop3

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Properties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Properties of this Properties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_prop1(self):
        """Gets the additional_prop1 of this Properties.


        :return: The additional_prop1 of this Properties.
        :rtype: str
        """
        return self._additional_prop1

    @additional_prop1.setter
    def additional_prop1(self, additional_prop1):
        """Sets the additional_prop1 of this Properties.


        :param additional_prop1: The additional_prop1 of this Properties.
        :type additional_prop1: str
        """
        if additional_prop1 is None:
            raise ValueError("Invalid value for `additional_prop1`, must not be `None`")

        self._additional_prop1 = additional_prop1

    @property
    def additional_prop2(self):
        """Gets the additional_prop2 of this Properties.


        :return: The additional_prop2 of this Properties.
        :rtype: str
        """
        return self._additional_prop2

    @additional_prop2.setter
    def additional_prop2(self, additional_prop2):
        """Sets the additional_prop2 of this Properties.


        :param additional_prop2: The additional_prop2 of this Properties.
        :type additional_prop2: str
        """
        if additional_prop2 is None:
            raise ValueError("Invalid value for `additional_prop2`, must not be `None`")

        self._additional_prop2 = additional_prop2

    @property
    def additional_prop3(self):
        """Gets the additional_prop3 of this Properties.


        :return: The additional_prop3 of this Properties.
        :rtype: str
        """
        return self._additional_prop3

    @additional_prop3.setter
    def additional_prop3(self, additional_prop3):
        """Sets the additional_prop3 of this Properties.


        :param additional_prop3: The additional_prop3 of this Properties.
        :type additional_prop3: str
        """
        if additional_prop3 is None:
            raise ValueError("Invalid value for `additional_prop3`, must not be `None`")

        self._additional_prop3 = additional_prop3
