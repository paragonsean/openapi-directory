# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SKUServiceTypeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_active: bool=True, is_gift_card: bool=None, is_required: bool=None, name: str='Test API Sku Services', show_on_attachment_front: bool=None, show_on_cart_front: bool=None, show_on_file_upload: bool=None, show_on_product_front: bool=None):
        """SKUServiceTypeRequest - a model defined in OpenAPI

        :param is_active: The is_active of this SKUServiceTypeRequest.
        :param is_gift_card: The is_gift_card of this SKUServiceTypeRequest.
        :param is_required: The is_required of this SKUServiceTypeRequest.
        :param name: The name of this SKUServiceTypeRequest.
        :param show_on_attachment_front: The show_on_attachment_front of this SKUServiceTypeRequest.
        :param show_on_cart_front: The show_on_cart_front of this SKUServiceTypeRequest.
        :param show_on_file_upload: The show_on_file_upload of this SKUServiceTypeRequest.
        :param show_on_product_front: The show_on_product_front of this SKUServiceTypeRequest.
        """
        self.openapi_types = {
            'is_active': bool,
            'is_gift_card': bool,
            'is_required': bool,
            'name': str,
            'show_on_attachment_front': bool,
            'show_on_cart_front': bool,
            'show_on_file_upload': bool,
            'show_on_product_front': bool
        }

        self.attribute_map = {
            'is_active': 'IsActive',
            'is_gift_card': 'IsGiftCard',
            'is_required': 'IsRequired',
            'name': 'Name',
            'show_on_attachment_front': 'ShowOnAttachmentFront',
            'show_on_cart_front': 'ShowOnCartFront',
            'show_on_file_upload': 'ShowOnFileUpload',
            'show_on_product_front': 'ShowOnProductFront'
        }

        self._is_active = is_active
        self._is_gift_card = is_gift_card
        self._is_required = is_required
        self._name = name
        self._show_on_attachment_front = show_on_attachment_front
        self._show_on_cart_front = show_on_cart_front
        self._show_on_file_upload = show_on_file_upload
        self._show_on_product_front = show_on_product_front

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SKUServiceTypeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SKUServiceTypeRequest of this SKUServiceTypeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_active(self):
        """Gets the is_active of this SKUServiceTypeRequest.

        Defines if the SKU Service Type is active or not.

        :return: The is_active of this SKUServiceTypeRequest.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this SKUServiceTypeRequest.

        Defines if the SKU Service Type is active or not.

        :param is_active: The is_active of this SKUServiceTypeRequest.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def is_gift_card(self):
        """Gets the is_gift_card of this SKUServiceTypeRequest.

        Defines if the SKU Service Type is displayed as a Gift Card.

        :return: The is_gift_card of this SKUServiceTypeRequest.
        :rtype: bool
        """
        return self._is_gift_card

    @is_gift_card.setter
    def is_gift_card(self, is_gift_card):
        """Sets the is_gift_card of this SKUServiceTypeRequest.

        Defines if the SKU Service Type is displayed as a Gift Card.

        :param is_gift_card: The is_gift_card of this SKUServiceTypeRequest.
        :type is_gift_card: bool
        """
        if is_gift_card is None:
            raise ValueError("Invalid value for `is_gift_card`, must not be `None`")

        self._is_gift_card = is_gift_card

    @property
    def is_required(self):
        """Gets the is_required of this SKUServiceTypeRequest.

        Defines if the SKU Service type is mandatory.

        :return: The is_required of this SKUServiceTypeRequest.
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this SKUServiceTypeRequest.

        Defines if the SKU Service type is mandatory.

        :param is_required: The is_required of this SKUServiceTypeRequest.
        :type is_required: bool
        """
        if is_required is None:
            raise ValueError("Invalid value for `is_required`, must not be `None`")

        self._is_required = is_required

    @property
    def name(self):
        """Gets the name of this SKUServiceTypeRequest.

        SKU Service Type Name. Maximum of 100 characters.

        :return: The name of this SKUServiceTypeRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SKUServiceTypeRequest.

        SKU Service Type Name. Maximum of 100 characters.

        :param name: The name of this SKUServiceTypeRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def show_on_attachment_front(self):
        """Gets the show_on_attachment_front of this SKUServiceTypeRequest.

        Defines if the SKU Service Type has an attachment.

        :return: The show_on_attachment_front of this SKUServiceTypeRequest.
        :rtype: bool
        """
        return self._show_on_attachment_front

    @show_on_attachment_front.setter
    def show_on_attachment_front(self, show_on_attachment_front):
        """Sets the show_on_attachment_front of this SKUServiceTypeRequest.

        Defines if the SKU Service Type has an attachment.

        :param show_on_attachment_front: The show_on_attachment_front of this SKUServiceTypeRequest.
        :type show_on_attachment_front: bool
        """
        if show_on_attachment_front is None:
            raise ValueError("Invalid value for `show_on_attachment_front`, must not be `None`")

        self._show_on_attachment_front = show_on_attachment_front

    @property
    def show_on_cart_front(self):
        """Gets the show_on_cart_front of this SKUServiceTypeRequest.

        Defines if the SKU Service Type is displayed on the cart screen.

        :return: The show_on_cart_front of this SKUServiceTypeRequest.
        :rtype: bool
        """
        return self._show_on_cart_front

    @show_on_cart_front.setter
    def show_on_cart_front(self, show_on_cart_front):
        """Sets the show_on_cart_front of this SKUServiceTypeRequest.

        Defines if the SKU Service Type is displayed on the cart screen.

        :param show_on_cart_front: The show_on_cart_front of this SKUServiceTypeRequest.
        :type show_on_cart_front: bool
        """
        if show_on_cart_front is None:
            raise ValueError("Invalid value for `show_on_cart_front`, must not be `None`")

        self._show_on_cart_front = show_on_cart_front

    @property
    def show_on_file_upload(self):
        """Gets the show_on_file_upload of this SKUServiceTypeRequest.

        Defines if the SKU Service Type can be associated with an attachment or not.

        :return: The show_on_file_upload of this SKUServiceTypeRequest.
        :rtype: bool
        """
        return self._show_on_file_upload

    @show_on_file_upload.setter
    def show_on_file_upload(self, show_on_file_upload):
        """Sets the show_on_file_upload of this SKUServiceTypeRequest.

        Defines if the SKU Service Type can be associated with an attachment or not.

        :param show_on_file_upload: The show_on_file_upload of this SKUServiceTypeRequest.
        :type show_on_file_upload: bool
        """
        if show_on_file_upload is None:
            raise ValueError("Invalid value for `show_on_file_upload`, must not be `None`")

        self._show_on_file_upload = show_on_file_upload

    @property
    def show_on_product_front(self):
        """Gets the show_on_product_front of this SKUServiceTypeRequest.

        Deprecated

        :return: The show_on_product_front of this SKUServiceTypeRequest.
        :rtype: bool
        """
        return self._show_on_product_front

    @show_on_product_front.setter
    def show_on_product_front(self, show_on_product_front):
        """Sets the show_on_product_front of this SKUServiceTypeRequest.

        Deprecated

        :param show_on_product_front: The show_on_product_front of this SKUServiceTypeRequest.
        :type show_on_product_front: bool
        """
        if show_on_product_front is None:
            raise ValueError("Invalid value for `show_on_product_front`, must not be `None`")

        self._show_on_product_front = show_on_product_front
