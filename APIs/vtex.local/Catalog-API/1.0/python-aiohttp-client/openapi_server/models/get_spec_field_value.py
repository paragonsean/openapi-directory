# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetSpecFieldValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_value_id: int=None, is_active: bool=None, position: int=None, value: str=None):
        """GetSpecFieldValue - a model defined in OpenAPI

        :param field_value_id: The field_value_id of this GetSpecFieldValue.
        :param is_active: The is_active of this GetSpecFieldValue.
        :param position: The position of this GetSpecFieldValue.
        :param value: The value of this GetSpecFieldValue.
        """
        self.openapi_types = {
            'field_value_id': int,
            'is_active': bool,
            'position': int,
            'value': str
        }

        self.attribute_map = {
            'field_value_id': 'FieldValueId',
            'is_active': 'IsActive',
            'position': 'Position',
            'value': 'Value'
        }

        self._field_value_id = field_value_id
        self._is_active = is_active
        self._position = position
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSpecFieldValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetSpecFieldValue of this GetSpecFieldValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_value_id(self):
        """Gets the field_value_id of this GetSpecFieldValue.

        Specification Field Value ID.

        :return: The field_value_id of this GetSpecFieldValue.
        :rtype: int
        """
        return self._field_value_id

    @field_value_id.setter
    def field_value_id(self, field_value_id):
        """Sets the field_value_id of this GetSpecFieldValue.

        Specification Field Value ID.

        :param field_value_id: The field_value_id of this GetSpecFieldValue.
        :type field_value_id: int
        """
        if field_value_id is None:
            raise ValueError("Invalid value for `field_value_id`, must not be `None`")

        self._field_value_id = field_value_id

    @property
    def is_active(self):
        """Gets the is_active of this GetSpecFieldValue.

        Defines if the Specification Field is active (`true`) or inactive (`false`).

        :return: The is_active of this GetSpecFieldValue.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this GetSpecFieldValue.

        Defines if the Specification Field is active (`true`) or inactive (`false`).

        :param is_active: The is_active of this GetSpecFieldValue.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def position(self):
        """Gets the position of this GetSpecFieldValue.

        Specification Field Value Position.

        :return: The position of this GetSpecFieldValue.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this GetSpecFieldValue.

        Specification Field Value Position.

        :param position: The position of this GetSpecFieldValue.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def value(self):
        """Gets the value of this GetSpecFieldValue.

        Specification Field Value.

        :return: The value of this GetSpecFieldValue.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GetSpecFieldValue.

        Specification Field Value.

        :param value: The value of this GetSpecFieldValue.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
