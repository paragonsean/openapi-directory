# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCategoryTreeChild(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meta_tag_description: str=None, title: str=None, children: List[object]=None, has_children: bool=None, id: int=None, name: str=None, url: str=None):
        """GetCategoryTreeChild - a model defined in OpenAPI

        :param meta_tag_description: The meta_tag_description of this GetCategoryTreeChild.
        :param title: The title of this GetCategoryTreeChild.
        :param children: The children of this GetCategoryTreeChild.
        :param has_children: The has_children of this GetCategoryTreeChild.
        :param id: The id of this GetCategoryTreeChild.
        :param name: The name of this GetCategoryTreeChild.
        :param url: The url of this GetCategoryTreeChild.
        """
        self.openapi_types = {
            'meta_tag_description': str,
            'title': str,
            'children': List[object],
            'has_children': bool,
            'id': int,
            'name': str,
            'url': str
        }

        self.attribute_map = {
            'meta_tag_description': 'MetaTagDescription',
            'title': 'Title',
            'children': 'children',
            'has_children': 'hasChildren',
            'id': 'id',
            'name': 'name',
            'url': 'url'
        }

        self._meta_tag_description = meta_tag_description
        self._title = title
        self._children = children
        self._has_children = has_children
        self._id = id
        self._name = name
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCategoryTreeChild':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetCategoryTreeChild of this GetCategoryTreeChild.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meta_tag_description(self):
        """Gets the meta_tag_description of this GetCategoryTreeChild.

        Category page Meta tag description.

        :return: The meta_tag_description of this GetCategoryTreeChild.
        :rtype: str
        """
        return self._meta_tag_description

    @meta_tag_description.setter
    def meta_tag_description(self, meta_tag_description):
        """Sets the meta_tag_description of this GetCategoryTreeChild.

        Category page Meta tag description.

        :param meta_tag_description: The meta_tag_description of this GetCategoryTreeChild.
        :type meta_tag_description: str
        """
        if meta_tag_description is None:
            raise ValueError("Invalid value for `meta_tag_description`, must not be `None`")

        self._meta_tag_description = meta_tag_description

    @property
    def title(self):
        """Gets the title of this GetCategoryTreeChild.

        Category page title.

        :return: The title of this GetCategoryTreeChild.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetCategoryTreeChild.

        Category page title.

        :param title: The title of this GetCategoryTreeChild.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def children(self):
        """Gets the children of this GetCategoryTreeChild.

        Array with information about the category's children.

        :return: The children of this GetCategoryTreeChild.
        :rtype: List[object]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this GetCategoryTreeChild.

        Array with information about the category's children.

        :param children: The children of this GetCategoryTreeChild.
        :type children: List[object]
        """
        if children is None:
            raise ValueError("Invalid value for `children`, must not be `None`")

        self._children = children

    @property
    def has_children(self):
        """Gets the has_children of this GetCategoryTreeChild.

        If the category has a category child (`true`) or not (`false`).

        :return: The has_children of this GetCategoryTreeChild.
        :rtype: bool
        """
        return self._has_children

    @has_children.setter
    def has_children(self, has_children):
        """Sets the has_children of this GetCategoryTreeChild.

        If the category has a category child (`true`) or not (`false`).

        :param has_children: The has_children of this GetCategoryTreeChild.
        :type has_children: bool
        """
        if has_children is None:
            raise ValueError("Invalid value for `has_children`, must not be `None`")

        self._has_children = has_children

    @property
    def id(self):
        """Gets the id of this GetCategoryTreeChild.

        Category ID.

        :return: The id of this GetCategoryTreeChild.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetCategoryTreeChild.

        Category ID.

        :param id: The id of this GetCategoryTreeChild.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this GetCategoryTreeChild.

        Category name.

        :return: The name of this GetCategoryTreeChild.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetCategoryTreeChild.

        Category name.

        :param name: The name of this GetCategoryTreeChild.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def url(self):
        """Gets the url of this GetCategoryTreeChild.

        Category URL.

        :return: The url of this GetCategoryTreeChild.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GetCategoryTreeChild.

        Category URL.

        :param url: The url of this GetCategoryTreeChild.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
