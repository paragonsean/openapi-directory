# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SkulistbyProductId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activate_if_possible: bool=None, commercial_condition_id: int=None, cubic_weight: float=None, date_updated: str=None, estimated_date_arrival: str=None, flag_kit_itens_sell_apart: bool=None, height: float=None, id: int=None, internal_note: str=None, is_active: bool=None, is_dynamic_kit: str=None, is_gift_card_recharge: bool=None, is_inventoried: bool=None, is_kit: bool=None, is_persisted: bool=None, is_removed: bool=None, is_transported: bool=None, length: float=None, manufacturer_code: str=None, measurement_unit: str=None, modal_id: int=None, modal_type: str=None, name: str=None, position: int=None, product_id: int=None, real_height: float=None, real_length: float=None, real_weight_kg: float=None, real_width: float=None, ref_id: str=None, reference_stock_keeping_unit_id: str=None, reward_value: float=None, unit_multiplier: float=None, weight_kg: float=None, width: float=None, is_kit_optimized: bool=None):
        """SkulistbyProductId - a model defined in OpenAPI

        :param activate_if_possible: The activate_if_possible of this SkulistbyProductId.
        :param commercial_condition_id: The commercial_condition_id of this SkulistbyProductId.
        :param cubic_weight: The cubic_weight of this SkulistbyProductId.
        :param date_updated: The date_updated of this SkulistbyProductId.
        :param estimated_date_arrival: The estimated_date_arrival of this SkulistbyProductId.
        :param flag_kit_itens_sell_apart: The flag_kit_itens_sell_apart of this SkulistbyProductId.
        :param height: The height of this SkulistbyProductId.
        :param id: The id of this SkulistbyProductId.
        :param internal_note: The internal_note of this SkulistbyProductId.
        :param is_active: The is_active of this SkulistbyProductId.
        :param is_dynamic_kit: The is_dynamic_kit of this SkulistbyProductId.
        :param is_gift_card_recharge: The is_gift_card_recharge of this SkulistbyProductId.
        :param is_inventoried: The is_inventoried of this SkulistbyProductId.
        :param is_kit: The is_kit of this SkulistbyProductId.
        :param is_persisted: The is_persisted of this SkulistbyProductId.
        :param is_removed: The is_removed of this SkulistbyProductId.
        :param is_transported: The is_transported of this SkulistbyProductId.
        :param length: The length of this SkulistbyProductId.
        :param manufacturer_code: The manufacturer_code of this SkulistbyProductId.
        :param measurement_unit: The measurement_unit of this SkulistbyProductId.
        :param modal_id: The modal_id of this SkulistbyProductId.
        :param modal_type: The modal_type of this SkulistbyProductId.
        :param name: The name of this SkulistbyProductId.
        :param position: The position of this SkulistbyProductId.
        :param product_id: The product_id of this SkulistbyProductId.
        :param real_height: The real_height of this SkulistbyProductId.
        :param real_length: The real_length of this SkulistbyProductId.
        :param real_weight_kg: The real_weight_kg of this SkulistbyProductId.
        :param real_width: The real_width of this SkulistbyProductId.
        :param ref_id: The ref_id of this SkulistbyProductId.
        :param reference_stock_keeping_unit_id: The reference_stock_keeping_unit_id of this SkulistbyProductId.
        :param reward_value: The reward_value of this SkulistbyProductId.
        :param unit_multiplier: The unit_multiplier of this SkulistbyProductId.
        :param weight_kg: The weight_kg of this SkulistbyProductId.
        :param width: The width of this SkulistbyProductId.
        :param is_kit_optimized: The is_kit_optimized of this SkulistbyProductId.
        """
        self.openapi_types = {
            'activate_if_possible': bool,
            'commercial_condition_id': int,
            'cubic_weight': float,
            'date_updated': str,
            'estimated_date_arrival': str,
            'flag_kit_itens_sell_apart': bool,
            'height': float,
            'id': int,
            'internal_note': str,
            'is_active': bool,
            'is_dynamic_kit': str,
            'is_gift_card_recharge': bool,
            'is_inventoried': bool,
            'is_kit': bool,
            'is_persisted': bool,
            'is_removed': bool,
            'is_transported': bool,
            'length': float,
            'manufacturer_code': str,
            'measurement_unit': str,
            'modal_id': int,
            'modal_type': str,
            'name': str,
            'position': int,
            'product_id': int,
            'real_height': float,
            'real_length': float,
            'real_weight_kg': float,
            'real_width': float,
            'ref_id': str,
            'reference_stock_keeping_unit_id': str,
            'reward_value': float,
            'unit_multiplier': float,
            'weight_kg': float,
            'width': float,
            'is_kit_optimized': bool
        }

        self.attribute_map = {
            'activate_if_possible': 'ActivateIfPossible',
            'commercial_condition_id': 'CommercialConditionId',
            'cubic_weight': 'CubicWeight',
            'date_updated': 'DateUpdated',
            'estimated_date_arrival': 'EstimatedDateArrival',
            'flag_kit_itens_sell_apart': 'FlagKitItensSellApart',
            'height': 'Height',
            'id': 'Id',
            'internal_note': 'InternalNote',
            'is_active': 'IsActive',
            'is_dynamic_kit': 'IsDynamicKit',
            'is_gift_card_recharge': 'IsGiftCardRecharge',
            'is_inventoried': 'IsInventoried',
            'is_kit': 'IsKit',
            'is_persisted': 'IsPersisted',
            'is_removed': 'IsRemoved',
            'is_transported': 'IsTransported',
            'length': 'Length',
            'manufacturer_code': 'ManufacturerCode',
            'measurement_unit': 'MeasurementUnit',
            'modal_id': 'ModalId',
            'modal_type': 'ModalType',
            'name': 'Name',
            'position': 'Position',
            'product_id': 'ProductId',
            'real_height': 'RealHeight',
            'real_length': 'RealLength',
            'real_weight_kg': 'RealWeightKg',
            'real_width': 'RealWidth',
            'ref_id': 'RefId',
            'reference_stock_keeping_unit_id': 'ReferenceStockKeepingUnitId',
            'reward_value': 'RewardValue',
            'unit_multiplier': 'UnitMultiplier',
            'weight_kg': 'WeightKg',
            'width': 'Width',
            'is_kit_optimized': 'isKitOptimized'
        }

        self._activate_if_possible = activate_if_possible
        self._commercial_condition_id = commercial_condition_id
        self._cubic_weight = cubic_weight
        self._date_updated = date_updated
        self._estimated_date_arrival = estimated_date_arrival
        self._flag_kit_itens_sell_apart = flag_kit_itens_sell_apart
        self._height = height
        self._id = id
        self._internal_note = internal_note
        self._is_active = is_active
        self._is_dynamic_kit = is_dynamic_kit
        self._is_gift_card_recharge = is_gift_card_recharge
        self._is_inventoried = is_inventoried
        self._is_kit = is_kit
        self._is_persisted = is_persisted
        self._is_removed = is_removed
        self._is_transported = is_transported
        self._length = length
        self._manufacturer_code = manufacturer_code
        self._measurement_unit = measurement_unit
        self._modal_id = modal_id
        self._modal_type = modal_type
        self._name = name
        self._position = position
        self._product_id = product_id
        self._real_height = real_height
        self._real_length = real_length
        self._real_weight_kg = real_weight_kg
        self._real_width = real_width
        self._ref_id = ref_id
        self._reference_stock_keeping_unit_id = reference_stock_keeping_unit_id
        self._reward_value = reward_value
        self._unit_multiplier = unit_multiplier
        self._weight_kg = weight_kg
        self._width = width
        self._is_kit_optimized = is_kit_optimized

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkulistbyProductId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SkulistbyProductId of this SkulistbyProductId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activate_if_possible(self):
        """Gets the activate_if_possible of this SkulistbyProductId.

        When set to `true`, this attribute will automatically update the SKU as active once associated with an image or an active component.

        :return: The activate_if_possible of this SkulistbyProductId.
        :rtype: bool
        """
        return self._activate_if_possible

    @activate_if_possible.setter
    def activate_if_possible(self, activate_if_possible):
        """Sets the activate_if_possible of this SkulistbyProductId.

        When set to `true`, this attribute will automatically update the SKU as active once associated with an image or an active component.

        :param activate_if_possible: The activate_if_possible of this SkulistbyProductId.
        :type activate_if_possible: bool
        """

        self._activate_if_possible = activate_if_possible

    @property
    def commercial_condition_id(self):
        """Gets the commercial_condition_id of this SkulistbyProductId.

        SKU Commercial Condition ID.

        :return: The commercial_condition_id of this SkulistbyProductId.
        :rtype: int
        """
        return self._commercial_condition_id

    @commercial_condition_id.setter
    def commercial_condition_id(self, commercial_condition_id):
        """Sets the commercial_condition_id of this SkulistbyProductId.

        SKU Commercial Condition ID.

        :param commercial_condition_id: The commercial_condition_id of this SkulistbyProductId.
        :type commercial_condition_id: int
        """

        self._commercial_condition_id = commercial_condition_id

    @property
    def cubic_weight(self):
        """Gets the cubic_weight of this SkulistbyProductId.

        [Cubic weight](https://help.vtex.com/en/tutorial/understanding-the-cubic-weight-factor--tutorials_128).

        :return: The cubic_weight of this SkulistbyProductId.
        :rtype: float
        """
        return self._cubic_weight

    @cubic_weight.setter
    def cubic_weight(self, cubic_weight):
        """Sets the cubic_weight of this SkulistbyProductId.

        [Cubic weight](https://help.vtex.com/en/tutorial/understanding-the-cubic-weight-factor--tutorials_128).

        :param cubic_weight: The cubic_weight of this SkulistbyProductId.
        :type cubic_weight: float
        """

        self._cubic_weight = cubic_weight

    @property
    def date_updated(self):
        """Gets the date_updated of this SkulistbyProductId.

        Date when the product was updated for the most recent time.

        :return: The date_updated of this SkulistbyProductId.
        :rtype: str
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this SkulistbyProductId.

        Date when the product was updated for the most recent time.

        :param date_updated: The date_updated of this SkulistbyProductId.
        :type date_updated: str
        """

        self._date_updated = date_updated

    @property
    def estimated_date_arrival(self):
        """Gets the estimated_date_arrival of this SkulistbyProductId.

        SKU estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, when the product is on pre-sale. You must take into consideration both the launch date and the freight calculation for the arrival date.

        :return: The estimated_date_arrival of this SkulistbyProductId.
        :rtype: str
        """
        return self._estimated_date_arrival

    @estimated_date_arrival.setter
    def estimated_date_arrival(self, estimated_date_arrival):
        """Sets the estimated_date_arrival of this SkulistbyProductId.

        SKU estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, when the product is on pre-sale. You must take into consideration both the launch date and the freight calculation for the arrival date.

        :param estimated_date_arrival: The estimated_date_arrival of this SkulistbyProductId.
        :type estimated_date_arrival: str
        """

        self._estimated_date_arrival = estimated_date_arrival

    @property
    def flag_kit_itens_sell_apart(self):
        """Gets the flag_kit_itens_sell_apart of this SkulistbyProductId.

        Defines if the SKU bundle items can be sold separately.

        :return: The flag_kit_itens_sell_apart of this SkulistbyProductId.
        :rtype: bool
        """
        return self._flag_kit_itens_sell_apart

    @flag_kit_itens_sell_apart.setter
    def flag_kit_itens_sell_apart(self, flag_kit_itens_sell_apart):
        """Sets the flag_kit_itens_sell_apart of this SkulistbyProductId.

        Defines if the SKU bundle items can be sold separately.

        :param flag_kit_itens_sell_apart: The flag_kit_itens_sell_apart of this SkulistbyProductId.
        :type flag_kit_itens_sell_apart: bool
        """

        self._flag_kit_itens_sell_apart = flag_kit_itens_sell_apart

    @property
    def height(self):
        """Gets the height of this SkulistbyProductId.

        SKU Height.

        :return: The height of this SkulistbyProductId.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this SkulistbyProductId.

        SKU Height.

        :param height: The height of this SkulistbyProductId.
        :type height: float
        """

        self._height = height

    @property
    def id(self):
        """Gets the id of this SkulistbyProductId.

        SKU ID.

        :return: The id of this SkulistbyProductId.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SkulistbyProductId.

        SKU ID.

        :param id: The id of this SkulistbyProductId.
        :type id: int
        """

        self._id = id

    @property
    def internal_note(self):
        """Gets the internal_note of this SkulistbyProductId.

        Internal note.

        :return: The internal_note of this SkulistbyProductId.
        :rtype: str
        """
        return self._internal_note

    @internal_note.setter
    def internal_note(self, internal_note):
        """Sets the internal_note of this SkulistbyProductId.

        Internal note.

        :param internal_note: The internal_note of this SkulistbyProductId.
        :type internal_note: str
        """

        self._internal_note = internal_note

    @property
    def is_active(self):
        """Gets the is_active of this SkulistbyProductId.

        Defines if the SKU is active or not.

        :return: The is_active of this SkulistbyProductId.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this SkulistbyProductId.

        Defines if the SKU is active or not.

        :param is_active: The is_active of this SkulistbyProductId.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_dynamic_kit(self):
        """Gets the is_dynamic_kit of this SkulistbyProductId.


        :return: The is_dynamic_kit of this SkulistbyProductId.
        :rtype: str
        """
        return self._is_dynamic_kit

    @is_dynamic_kit.setter
    def is_dynamic_kit(self, is_dynamic_kit):
        """Sets the is_dynamic_kit of this SkulistbyProductId.


        :param is_dynamic_kit: The is_dynamic_kit of this SkulistbyProductId.
        :type is_dynamic_kit: str
        """

        self._is_dynamic_kit = is_dynamic_kit

    @property
    def is_gift_card_recharge(self):
        """Gets the is_gift_card_recharge of this SkulistbyProductId.

        Defines if the purchase of the SKU will generate reward value for the customer.

        :return: The is_gift_card_recharge of this SkulistbyProductId.
        :rtype: bool
        """
        return self._is_gift_card_recharge

    @is_gift_card_recharge.setter
    def is_gift_card_recharge(self, is_gift_card_recharge):
        """Sets the is_gift_card_recharge of this SkulistbyProductId.

        Defines if the purchase of the SKU will generate reward value for the customer.

        :param is_gift_card_recharge: The is_gift_card_recharge of this SkulistbyProductId.
        :type is_gift_card_recharge: bool
        """

        self._is_gift_card_recharge = is_gift_card_recharge

    @property
    def is_inventoried(self):
        """Gets the is_inventoried of this SkulistbyProductId.


        :return: The is_inventoried of this SkulistbyProductId.
        :rtype: bool
        """
        return self._is_inventoried

    @is_inventoried.setter
    def is_inventoried(self, is_inventoried):
        """Sets the is_inventoried of this SkulistbyProductId.


        :param is_inventoried: The is_inventoried of this SkulistbyProductId.
        :type is_inventoried: bool
        """

        self._is_inventoried = is_inventoried

    @property
    def is_kit(self):
        """Gets the is_kit of this SkulistbyProductId.

        Flag to set whether the product SKU is made up of one or more SKUs, thereby becoming a bundle. Must be enabled if you are adding a bundle. Once activated, the flag cannot be reverted.

        :return: The is_kit of this SkulistbyProductId.
        :rtype: bool
        """
        return self._is_kit

    @is_kit.setter
    def is_kit(self, is_kit):
        """Sets the is_kit of this SkulistbyProductId.

        Flag to set whether the product SKU is made up of one or more SKUs, thereby becoming a bundle. Must be enabled if you are adding a bundle. Once activated, the flag cannot be reverted.

        :param is_kit: The is_kit of this SkulistbyProductId.
        :type is_kit: bool
        """

        self._is_kit = is_kit

    @property
    def is_persisted(self):
        """Gets the is_persisted of this SkulistbyProductId.

        Defines if the SKU is persisted.

        :return: The is_persisted of this SkulistbyProductId.
        :rtype: bool
        """
        return self._is_persisted

    @is_persisted.setter
    def is_persisted(self, is_persisted):
        """Sets the is_persisted of this SkulistbyProductId.

        Defines if the SKU is persisted.

        :param is_persisted: The is_persisted of this SkulistbyProductId.
        :type is_persisted: bool
        """

        self._is_persisted = is_persisted

    @property
    def is_removed(self):
        """Gets the is_removed of this SkulistbyProductId.

        Defines if the SKU is removed.

        :return: The is_removed of this SkulistbyProductId.
        :rtype: bool
        """
        return self._is_removed

    @is_removed.setter
    def is_removed(self, is_removed):
        """Sets the is_removed of this SkulistbyProductId.

        Defines if the SKU is removed.

        :param is_removed: The is_removed of this SkulistbyProductId.
        :type is_removed: bool
        """

        self._is_removed = is_removed

    @property
    def is_transported(self):
        """Gets the is_transported of this SkulistbyProductId.


        :return: The is_transported of this SkulistbyProductId.
        :rtype: bool
        """
        return self._is_transported

    @is_transported.setter
    def is_transported(self, is_transported):
        """Sets the is_transported of this SkulistbyProductId.


        :param is_transported: The is_transported of this SkulistbyProductId.
        :type is_transported: bool
        """

        self._is_transported = is_transported

    @property
    def length(self):
        """Gets the length of this SkulistbyProductId.

        SKU Length.

        :return: The length of this SkulistbyProductId.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this SkulistbyProductId.

        SKU Length.

        :param length: The length of this SkulistbyProductId.
        :type length: float
        """

        self._length = length

    @property
    def manufacturer_code(self):
        """Gets the manufacturer_code of this SkulistbyProductId.

        Product Supplier ID.

        :return: The manufacturer_code of this SkulistbyProductId.
        :rtype: str
        """
        return self._manufacturer_code

    @manufacturer_code.setter
    def manufacturer_code(self, manufacturer_code):
        """Sets the manufacturer_code of this SkulistbyProductId.

        Product Supplier ID.

        :param manufacturer_code: The manufacturer_code of this SkulistbyProductId.
        :type manufacturer_code: str
        """

        self._manufacturer_code = manufacturer_code

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this SkulistbyProductId.

        Measurement unit.

        :return: The measurement_unit of this SkulistbyProductId.
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this SkulistbyProductId.

        Measurement unit.

        :param measurement_unit: The measurement_unit of this SkulistbyProductId.
        :type measurement_unit: str
        """

        self._measurement_unit = measurement_unit

    @property
    def modal_id(self):
        """Gets the modal_id of this SkulistbyProductId.

        Delivery Method (Modal Type) ID.

        :return: The modal_id of this SkulistbyProductId.
        :rtype: int
        """
        return self._modal_id

    @modal_id.setter
    def modal_id(self, modal_id):
        """Sets the modal_id of this SkulistbyProductId.

        Delivery Method (Modal Type) ID.

        :param modal_id: The modal_id of this SkulistbyProductId.
        :type modal_id: int
        """

        self._modal_id = modal_id

    @property
    def modal_type(self):
        """Gets the modal_type of this SkulistbyProductId.

        Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. \"Chemicals\" or \"Refrigerated products\"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).

        :return: The modal_type of this SkulistbyProductId.
        :rtype: str
        """
        return self._modal_type

    @modal_type.setter
    def modal_type(self, modal_type):
        """Sets the modal_type of this SkulistbyProductId.

        Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. \"Chemicals\" or \"Refrigerated products\"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).

        :param modal_type: The modal_type of this SkulistbyProductId.
        :type modal_type: str
        """

        self._modal_type = modal_type

    @property
    def name(self):
        """Gets the name of this SkulistbyProductId.

        SKU Name.

        :return: The name of this SkulistbyProductId.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SkulistbyProductId.

        SKU Name.

        :param name: The name of this SkulistbyProductId.
        :type name: str
        """

        self._name = name

    @property
    def position(self):
        """Gets the position of this SkulistbyProductId.

        SKU Position.

        :return: The position of this SkulistbyProductId.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this SkulistbyProductId.

        SKU Position.

        :param position: The position of this SkulistbyProductId.
        :type position: int
        """

        self._position = position

    @property
    def product_id(self):
        """Gets the product_id of this SkulistbyProductId.

        Product ID.

        :return: The product_id of this SkulistbyProductId.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this SkulistbyProductId.

        Product ID.

        :param product_id: The product_id of this SkulistbyProductId.
        :type product_id: int
        """

        self._product_id = product_id

    @property
    def real_height(self):
        """Gets the real_height of this SkulistbyProductId.

        Real SKU Height.

        :return: The real_height of this SkulistbyProductId.
        :rtype: float
        """
        return self._real_height

    @real_height.setter
    def real_height(self, real_height):
        """Sets the real_height of this SkulistbyProductId.

        Real SKU Height.

        :param real_height: The real_height of this SkulistbyProductId.
        :type real_height: float
        """

        self._real_height = real_height

    @property
    def real_length(self):
        """Gets the real_length of this SkulistbyProductId.

        Real SKU Length.

        :return: The real_length of this SkulistbyProductId.
        :rtype: float
        """
        return self._real_length

    @real_length.setter
    def real_length(self, real_length):
        """Sets the real_length of this SkulistbyProductId.

        Real SKU Length.

        :param real_length: The real_length of this SkulistbyProductId.
        :type real_length: float
        """

        self._real_length = real_length

    @property
    def real_weight_kg(self):
        """Gets the real_weight_kg of this SkulistbyProductId.

        Real Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.

        :return: The real_weight_kg of this SkulistbyProductId.
        :rtype: float
        """
        return self._real_weight_kg

    @real_weight_kg.setter
    def real_weight_kg(self, real_weight_kg):
        """Sets the real_weight_kg of this SkulistbyProductId.

        Real Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.

        :param real_weight_kg: The real_weight_kg of this SkulistbyProductId.
        :type real_weight_kg: float
        """

        self._real_weight_kg = real_weight_kg

    @property
    def real_width(self):
        """Gets the real_width of this SkulistbyProductId.

        Real SKU Width.

        :return: The real_width of this SkulistbyProductId.
        :rtype: float
        """
        return self._real_width

    @real_width.setter
    def real_width(self, real_width):
        """Sets the real_width of this SkulistbyProductId.

        Real SKU Width.

        :param real_width: The real_width of this SkulistbyProductId.
        :type real_width: float
        """

        self._real_width = real_width

    @property
    def ref_id(self):
        """Gets the ref_id of this SkulistbyProductId.

        Product Reference ID.

        :return: The ref_id of this SkulistbyProductId.
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this SkulistbyProductId.

        Product Reference ID.

        :param ref_id: The ref_id of this SkulistbyProductId.
        :type ref_id: str
        """

        self._ref_id = ref_id

    @property
    def reference_stock_keeping_unit_id(self):
        """Gets the reference_stock_keeping_unit_id of this SkulistbyProductId.

        SKU Reference ID.

        :return: The reference_stock_keeping_unit_id of this SkulistbyProductId.
        :rtype: str
        """
        return self._reference_stock_keeping_unit_id

    @reference_stock_keeping_unit_id.setter
    def reference_stock_keeping_unit_id(self, reference_stock_keeping_unit_id):
        """Sets the reference_stock_keeping_unit_id of this SkulistbyProductId.

        SKU Reference ID.

        :param reference_stock_keeping_unit_id: The reference_stock_keeping_unit_id of this SkulistbyProductId.
        :type reference_stock_keeping_unit_id: str
        """

        self._reference_stock_keeping_unit_id = reference_stock_keeping_unit_id

    @property
    def reward_value(self):
        """Gets the reward_value of this SkulistbyProductId.

        Reward value related to the SKU.

        :return: The reward_value of this SkulistbyProductId.
        :rtype: float
        """
        return self._reward_value

    @reward_value.setter
    def reward_value(self, reward_value):
        """Sets the reward_value of this SkulistbyProductId.

        Reward value related to the SKU.

        :param reward_value: The reward_value of this SkulistbyProductId.
        :type reward_value: float
        """

        self._reward_value = reward_value

    @property
    def unit_multiplier(self):
        """Gets the unit_multiplier of this SkulistbyProductId.

        This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.

        :return: The unit_multiplier of this SkulistbyProductId.
        :rtype: float
        """
        return self._unit_multiplier

    @unit_multiplier.setter
    def unit_multiplier(self, unit_multiplier):
        """Sets the unit_multiplier of this SkulistbyProductId.

        This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.

        :param unit_multiplier: The unit_multiplier of this SkulistbyProductId.
        :type unit_multiplier: float
        """

        self._unit_multiplier = unit_multiplier

    @property
    def weight_kg(self):
        """Gets the weight_kg of this SkulistbyProductId.

        Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.

        :return: The weight_kg of this SkulistbyProductId.
        :rtype: float
        """
        return self._weight_kg

    @weight_kg.setter
    def weight_kg(self, weight_kg):
        """Sets the weight_kg of this SkulistbyProductId.

        Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.

        :param weight_kg: The weight_kg of this SkulistbyProductId.
        :type weight_kg: float
        """

        self._weight_kg = weight_kg

    @property
    def width(self):
        """Gets the width of this SkulistbyProductId.

        SKU Width.

        :return: The width of this SkulistbyProductId.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this SkulistbyProductId.

        SKU Width.

        :param width: The width of this SkulistbyProductId.
        :type width: float
        """

        self._width = width

    @property
    def is_kit_optimized(self):
        """Gets the is_kit_optimized of this SkulistbyProductId.

        Defines if the SKU is a Optimized bundle.

        :return: The is_kit_optimized of this SkulistbyProductId.
        :rtype: bool
        """
        return self._is_kit_optimized

    @is_kit_optimized.setter
    def is_kit_optimized(self, is_kit_optimized):
        """Sets the is_kit_optimized of this SkulistbyProductId.

        Defines if the SKU is a Optimized bundle.

        :param is_kit_optimized: The is_kit_optimized of this SkulistbyProductId.
        :type is_kit_optimized: bool
        """

        self._is_kit_optimized = is_kit_optimized
