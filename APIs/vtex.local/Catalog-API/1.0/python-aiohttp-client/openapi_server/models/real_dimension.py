# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RealDimension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, real_cubic_weight: float=None, real_height: float=None, real_length: float=None, real_weight: float=None, real_width: float=None):
        """RealDimension - a model defined in OpenAPI

        :param real_cubic_weight: The real_cubic_weight of this RealDimension.
        :param real_height: The real_height of this RealDimension.
        :param real_length: The real_length of this RealDimension.
        :param real_weight: The real_weight of this RealDimension.
        :param real_width: The real_width of this RealDimension.
        """
        self.openapi_types = {
            'real_cubic_weight': float,
            'real_height': float,
            'real_length': float,
            'real_weight': float,
            'real_width': float
        }

        self.attribute_map = {
            'real_cubic_weight': 'realCubicWeight',
            'real_height': 'realHeight',
            'real_length': 'realLength',
            'real_weight': 'realWeight',
            'real_width': 'realWidth'
        }

        self._real_cubic_weight = real_cubic_weight
        self._real_height = real_height
        self._real_length = real_length
        self._real_weight = real_weight
        self._real_width = real_width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RealDimension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RealDimension of this RealDimension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def real_cubic_weight(self):
        """Gets the real_cubic_weight of this RealDimension.

        Real SKU Cubic Weight.

        :return: The real_cubic_weight of this RealDimension.
        :rtype: float
        """
        return self._real_cubic_weight

    @real_cubic_weight.setter
    def real_cubic_weight(self, real_cubic_weight):
        """Sets the real_cubic_weight of this RealDimension.

        Real SKU Cubic Weight.

        :param real_cubic_weight: The real_cubic_weight of this RealDimension.
        :type real_cubic_weight: float
        """
        if real_cubic_weight is None:
            raise ValueError("Invalid value for `real_cubic_weight`, must not be `None`")

        self._real_cubic_weight = real_cubic_weight

    @property
    def real_height(self):
        """Gets the real_height of this RealDimension.

        Real SKU Height.

        :return: The real_height of this RealDimension.
        :rtype: float
        """
        return self._real_height

    @real_height.setter
    def real_height(self, real_height):
        """Sets the real_height of this RealDimension.

        Real SKU Height.

        :param real_height: The real_height of this RealDimension.
        :type real_height: float
        """
        if real_height is None:
            raise ValueError("Invalid value for `real_height`, must not be `None`")

        self._real_height = real_height

    @property
    def real_length(self):
        """Gets the real_length of this RealDimension.

        Real SKU Length.

        :return: The real_length of this RealDimension.
        :rtype: float
        """
        return self._real_length

    @real_length.setter
    def real_length(self, real_length):
        """Sets the real_length of this RealDimension.

        Real SKU Length.

        :param real_length: The real_length of this RealDimension.
        :type real_length: float
        """
        if real_length is None:
            raise ValueError("Invalid value for `real_length`, must not be `None`")

        self._real_length = real_length

    @property
    def real_weight(self):
        """Gets the real_weight of this RealDimension.

        Real SKU Weight.

        :return: The real_weight of this RealDimension.
        :rtype: float
        """
        return self._real_weight

    @real_weight.setter
    def real_weight(self, real_weight):
        """Sets the real_weight of this RealDimension.

        Real SKU Weight.

        :param real_weight: The real_weight of this RealDimension.
        :type real_weight: float
        """
        if real_weight is None:
            raise ValueError("Invalid value for `real_weight`, must not be `None`")

        self._real_weight = real_weight

    @property
    def real_width(self):
        """Gets the real_width of this RealDimension.

        Real SKU Width.

        :return: The real_width of this RealDimension.
        :rtype: float
        """
        return self._real_width

    @real_width.setter
    def real_width(self, real_width):
        """Sets the real_width of this RealDimension.

        Real SKU Width.

        :param real_width: The real_width of this RealDimension.
        :type real_width: float
        """
        if real_width is None:
            raise ValueError("Invalid value for `real_width`, must not be `None`")

        self._real_width = real_width
