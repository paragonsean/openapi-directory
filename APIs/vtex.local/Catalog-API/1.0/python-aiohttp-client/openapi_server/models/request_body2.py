# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RequestBody2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, complement_type_id: int=None, parent_sku_id: int=None, sku_id: int=None):
        """RequestBody2 - a model defined in OpenAPI

        :param complement_type_id: The complement_type_id of this RequestBody2.
        :param parent_sku_id: The parent_sku_id of this RequestBody2.
        :param sku_id: The sku_id of this RequestBody2.
        """
        self.openapi_types = {
            'complement_type_id': int,
            'parent_sku_id': int,
            'sku_id': int
        }

        self.attribute_map = {
            'complement_type_id': 'ComplementTypeId',
            'parent_sku_id': 'ParentSkuId',
            'sku_id': 'SkuId'
        }

        self._complement_type_id = complement_type_id
        self._parent_sku_id = parent_sku_id
        self._sku_id = sku_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestBody2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request_body_2 of this RequestBody2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def complement_type_id(self):
        """Gets the complement_type_id of this RequestBody2.

        Complement Type ID. This represents the type of the complement. The possible values are: `1` for Accessory; `2` for Suggestion; `3` for Similar Product; `5` for Show Together.

        :return: The complement_type_id of this RequestBody2.
        :rtype: int
        """
        return self._complement_type_id

    @complement_type_id.setter
    def complement_type_id(self, complement_type_id):
        """Sets the complement_type_id of this RequestBody2.

        Complement Type ID. This represents the type of the complement. The possible values are: `1` for Accessory; `2` for Suggestion; `3` for Similar Product; `5` for Show Together.

        :param complement_type_id: The complement_type_id of this RequestBody2.
        :type complement_type_id: int
        """
        if complement_type_id is None:
            raise ValueError("Invalid value for `complement_type_id`, must not be `None`")

        self._complement_type_id = complement_type_id

    @property
    def parent_sku_id(self):
        """Gets the parent_sku_id of this RequestBody2.

        ID of the Parent SKU, where the Complement is inserted.

        :return: The parent_sku_id of this RequestBody2.
        :rtype: int
        """
        return self._parent_sku_id

    @parent_sku_id.setter
    def parent_sku_id(self, parent_sku_id):
        """Sets the parent_sku_id of this RequestBody2.

        ID of the Parent SKU, where the Complement is inserted.

        :param parent_sku_id: The parent_sku_id of this RequestBody2.
        :type parent_sku_id: int
        """
        if parent_sku_id is None:
            raise ValueError("Invalid value for `parent_sku_id`, must not be `None`")

        self._parent_sku_id = parent_sku_id

    @property
    def sku_id(self):
        """Gets the sku_id of this RequestBody2.

        ID of the SKU which will be inserted as a Complement in the Parent SKU.

        :return: The sku_id of this RequestBody2.
        :rtype: int
        """
        return self._sku_id

    @sku_id.setter
    def sku_id(self, sku_id):
        """Sets the sku_id of this RequestBody2.

        ID of the SKU which will be inserted as a Complement in the Parent SKU.

        :param sku_id: The sku_id of this RequestBody2.
        :type sku_id: int
        """
        if sku_id is None:
            raise ValueError("Invalid value for `sku_id`, must not be `None`")

        self._sku_id = sku_id
