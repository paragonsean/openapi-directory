# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment_response import AttachmentResponse
from openapi_server import util


class ApiCatalogPvtAttachmentsGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[AttachmentResponse]=None, page: int=None, size: int=None, total_page: int=None, total_rows: int=None):
        """ApiCatalogPvtAttachmentsGet200Response - a model defined in OpenAPI

        :param data: The data of this ApiCatalogPvtAttachmentsGet200Response.
        :param page: The page of this ApiCatalogPvtAttachmentsGet200Response.
        :param size: The size of this ApiCatalogPvtAttachmentsGet200Response.
        :param total_page: The total_page of this ApiCatalogPvtAttachmentsGet200Response.
        :param total_rows: The total_rows of this ApiCatalogPvtAttachmentsGet200Response.
        """
        self.openapi_types = {
            'data': List[AttachmentResponse],
            'page': int,
            'size': int,
            'total_page': int,
            'total_rows': int
        }

        self.attribute_map = {
            'data': 'Data',
            'page': 'Page',
            'size': 'Size',
            'total_page': 'TotalPage',
            'total_rows': 'TotalRows'
        }

        self._data = data
        self._page = page
        self._size = size
        self._total_page = total_page
        self._total_rows = total_rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiCatalogPvtAttachmentsGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _api_catalog_pvt_attachments_get_200_response of this ApiCatalogPvtAttachmentsGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this ApiCatalogPvtAttachmentsGet200Response.

        Array containing attachments data.

        :return: The data of this ApiCatalogPvtAttachmentsGet200Response.
        :rtype: List[AttachmentResponse]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ApiCatalogPvtAttachmentsGet200Response.

        Array containing attachments data.

        :param data: The data of this ApiCatalogPvtAttachmentsGet200Response.
        :type data: List[AttachmentResponse]
        """

        self._data = data

    @property
    def page(self):
        """Gets the page of this ApiCatalogPvtAttachmentsGet200Response.

        Current page of results.

        :return: The page of this ApiCatalogPvtAttachmentsGet200Response.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this ApiCatalogPvtAttachmentsGet200Response.

        Current page of results.

        :param page: The page of this ApiCatalogPvtAttachmentsGet200Response.
        :type page: int
        """

        self._page = page

    @property
    def size(self):
        """Gets the size of this ApiCatalogPvtAttachmentsGet200Response.

        Total number of results in the current page.

        :return: The size of this ApiCatalogPvtAttachmentsGet200Response.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ApiCatalogPvtAttachmentsGet200Response.

        Total number of results in the current page.

        :param size: The size of this ApiCatalogPvtAttachmentsGet200Response.
        :type size: int
        """

        self._size = size

    @property
    def total_page(self):
        """Gets the total_page of this ApiCatalogPvtAttachmentsGet200Response.

        Total number of pages with results.

        :return: The total_page of this ApiCatalogPvtAttachmentsGet200Response.
        :rtype: int
        """
        return self._total_page

    @total_page.setter
    def total_page(self, total_page):
        """Sets the total_page of this ApiCatalogPvtAttachmentsGet200Response.

        Total number of pages with results.

        :param total_page: The total_page of this ApiCatalogPvtAttachmentsGet200Response.
        :type total_page: int
        """

        self._total_page = total_page

    @property
    def total_rows(self):
        """Gets the total_rows of this ApiCatalogPvtAttachmentsGet200Response.

        Total number of rows with results.

        :return: The total_rows of this ApiCatalogPvtAttachmentsGet200Response.
        :rtype: int
        """
        return self._total_rows

    @total_rows.setter
    def total_rows(self, total_rows):
        """Sets the total_rows of this ApiCatalogPvtAttachmentsGet200Response.

        Total number of rows with results.

        :param total_rows: The total_rows of this ApiCatalogPvtAttachmentsGet200Response.
        :type total_rows: int
        """

        self._total_rows = total_rows
