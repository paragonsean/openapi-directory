# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SpecificationsInsertFieldUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: int=None, default_value: str=None, description: str=None, field_group_id: int=None, field_group_name: str=None, field_id: int=None, field_type_id: int=None, field_value_id: int=None, is_active: bool=None, is_filter: bool=None, is_on_product_details: bool=None, is_required: bool=None, is_side_menu_link_active: bool=None, is_stock_keeping_unit: bool=None, is_top_menu_link_active: bool=None, is_wizard: bool=None, name: str=None, position: int=None):
        """SpecificationsInsertFieldUpdateRequest - a model defined in OpenAPI

        :param category_id: The category_id of this SpecificationsInsertFieldUpdateRequest.
        :param default_value: The default_value of this SpecificationsInsertFieldUpdateRequest.
        :param description: The description of this SpecificationsInsertFieldUpdateRequest.
        :param field_group_id: The field_group_id of this SpecificationsInsertFieldUpdateRequest.
        :param field_group_name: The field_group_name of this SpecificationsInsertFieldUpdateRequest.
        :param field_id: The field_id of this SpecificationsInsertFieldUpdateRequest.
        :param field_type_id: The field_type_id of this SpecificationsInsertFieldUpdateRequest.
        :param field_value_id: The field_value_id of this SpecificationsInsertFieldUpdateRequest.
        :param is_active: The is_active of this SpecificationsInsertFieldUpdateRequest.
        :param is_filter: The is_filter of this SpecificationsInsertFieldUpdateRequest.
        :param is_on_product_details: The is_on_product_details of this SpecificationsInsertFieldUpdateRequest.
        :param is_required: The is_required of this SpecificationsInsertFieldUpdateRequest.
        :param is_side_menu_link_active: The is_side_menu_link_active of this SpecificationsInsertFieldUpdateRequest.
        :param is_stock_keeping_unit: The is_stock_keeping_unit of this SpecificationsInsertFieldUpdateRequest.
        :param is_top_menu_link_active: The is_top_menu_link_active of this SpecificationsInsertFieldUpdateRequest.
        :param is_wizard: The is_wizard of this SpecificationsInsertFieldUpdateRequest.
        :param name: The name of this SpecificationsInsertFieldUpdateRequest.
        :param position: The position of this SpecificationsInsertFieldUpdateRequest.
        """
        self.openapi_types = {
            'category_id': int,
            'default_value': str,
            'description': str,
            'field_group_id': int,
            'field_group_name': str,
            'field_id': int,
            'field_type_id': int,
            'field_value_id': int,
            'is_active': bool,
            'is_filter': bool,
            'is_on_product_details': bool,
            'is_required': bool,
            'is_side_menu_link_active': bool,
            'is_stock_keeping_unit': bool,
            'is_top_menu_link_active': bool,
            'is_wizard': bool,
            'name': str,
            'position': int
        }

        self.attribute_map = {
            'category_id': 'CategoryId',
            'default_value': 'DefaultValue',
            'description': 'Description',
            'field_group_id': 'FieldGroupId',
            'field_group_name': 'FieldGroupName',
            'field_id': 'FieldId',
            'field_type_id': 'FieldTypeId',
            'field_value_id': 'FieldValueId',
            'is_active': 'IsActive',
            'is_filter': 'IsFilter',
            'is_on_product_details': 'IsOnProductDetails',
            'is_required': 'IsRequired',
            'is_side_menu_link_active': 'IsSideMenuLinkActive',
            'is_stock_keeping_unit': 'IsStockKeepingUnit',
            'is_top_menu_link_active': 'IsTopMenuLinkActive',
            'is_wizard': 'IsWizard',
            'name': 'Name',
            'position': 'Position'
        }

        self._category_id = category_id
        self._default_value = default_value
        self._description = description
        self._field_group_id = field_group_id
        self._field_group_name = field_group_name
        self._field_id = field_id
        self._field_type_id = field_type_id
        self._field_value_id = field_value_id
        self._is_active = is_active
        self._is_filter = is_filter
        self._is_on_product_details = is_on_product_details
        self._is_required = is_required
        self._is_side_menu_link_active = is_side_menu_link_active
        self._is_stock_keeping_unit = is_stock_keeping_unit
        self._is_top_menu_link_active = is_top_menu_link_active
        self._is_wizard = is_wizard
        self._name = name
        self._position = position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpecificationsInsertFieldUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpecificationsInsertFieldUpdateRequest of this SpecificationsInsertFieldUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this SpecificationsInsertFieldUpdateRequest.

        Category ID.

        :return: The category_id of this SpecificationsInsertFieldUpdateRequest.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this SpecificationsInsertFieldUpdateRequest.

        Category ID.

        :param category_id: The category_id of this SpecificationsInsertFieldUpdateRequest.
        :type category_id: int
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")

        self._category_id = category_id

    @property
    def default_value(self):
        """Gets the default_value of this SpecificationsInsertFieldUpdateRequest.

        Specification Field default Value.

        :return: The default_value of this SpecificationsInsertFieldUpdateRequest.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this SpecificationsInsertFieldUpdateRequest.

        Specification Field default Value.

        :param default_value: The default_value of this SpecificationsInsertFieldUpdateRequest.
        :type default_value: str
        """
        if default_value is None:
            raise ValueError("Invalid value for `default_value`, must not be `None`")

        self._default_value = default_value

    @property
    def description(self):
        """Gets the description of this SpecificationsInsertFieldUpdateRequest.

        Specification Field Description.

        :return: The description of this SpecificationsInsertFieldUpdateRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SpecificationsInsertFieldUpdateRequest.

        Specification Field Description.

        :param description: The description of this SpecificationsInsertFieldUpdateRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def field_group_id(self):
        """Gets the field_group_id of this SpecificationsInsertFieldUpdateRequest.

        Specification Field Group ID.

        :return: The field_group_id of this SpecificationsInsertFieldUpdateRequest.
        :rtype: int
        """
        return self._field_group_id

    @field_group_id.setter
    def field_group_id(self, field_group_id):
        """Sets the field_group_id of this SpecificationsInsertFieldUpdateRequest.

        Specification Field Group ID.

        :param field_group_id: The field_group_id of this SpecificationsInsertFieldUpdateRequest.
        :type field_group_id: int
        """
        if field_group_id is None:
            raise ValueError("Invalid value for `field_group_id`, must not be `None`")

        self._field_group_id = field_group_id

    @property
    def field_group_name(self):
        """Gets the field_group_name of this SpecificationsInsertFieldUpdateRequest.

        Specification Field Group Name.

        :return: The field_group_name of this SpecificationsInsertFieldUpdateRequest.
        :rtype: str
        """
        return self._field_group_name

    @field_group_name.setter
    def field_group_name(self, field_group_name):
        """Sets the field_group_name of this SpecificationsInsertFieldUpdateRequest.

        Specification Field Group Name.

        :param field_group_name: The field_group_name of this SpecificationsInsertFieldUpdateRequest.
        :type field_group_name: str
        """
        if field_group_name is None:
            raise ValueError("Invalid value for `field_group_name`, must not be `None`")

        self._field_group_name = field_group_name

    @property
    def field_id(self):
        """Gets the field_id of this SpecificationsInsertFieldUpdateRequest.

        Specification Field ID.

        :return: The field_id of this SpecificationsInsertFieldUpdateRequest.
        :rtype: int
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this SpecificationsInsertFieldUpdateRequest.

        Specification Field ID.

        :param field_id: The field_id of this SpecificationsInsertFieldUpdateRequest.
        :type field_id: int
        """
        if field_id is None:
            raise ValueError("Invalid value for `field_id`, must not be `None`")

        self._field_id = field_id

    @property
    def field_type_id(self):
        """Gets the field_type_id of this SpecificationsInsertFieldUpdateRequest.

        Specification Field Type ID.

        :return: The field_type_id of this SpecificationsInsertFieldUpdateRequest.
        :rtype: int
        """
        return self._field_type_id

    @field_type_id.setter
    def field_type_id(self, field_type_id):
        """Sets the field_type_id of this SpecificationsInsertFieldUpdateRequest.

        Specification Field Type ID.

        :param field_type_id: The field_type_id of this SpecificationsInsertFieldUpdateRequest.
        :type field_type_id: int
        """
        if field_type_id is None:
            raise ValueError("Invalid value for `field_type_id`, must not be `None`")

        self._field_type_id = field_type_id

    @property
    def field_value_id(self):
        """Gets the field_value_id of this SpecificationsInsertFieldUpdateRequest.

        Specification Field Value ID.

        :return: The field_value_id of this SpecificationsInsertFieldUpdateRequest.
        :rtype: int
        """
        return self._field_value_id

    @field_value_id.setter
    def field_value_id(self, field_value_id):
        """Sets the field_value_id of this SpecificationsInsertFieldUpdateRequest.

        Specification Field Value ID.

        :param field_value_id: The field_value_id of this SpecificationsInsertFieldUpdateRequest.
        :type field_value_id: int
        """

        self._field_value_id = field_value_id

    @property
    def is_active(self):
        """Gets the is_active of this SpecificationsInsertFieldUpdateRequest.

        Enables(`true`) or disables (`false`) the Specification Field.

        :return: The is_active of this SpecificationsInsertFieldUpdateRequest.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this SpecificationsInsertFieldUpdateRequest.

        Enables(`true`) or disables (`false`) the Specification Field.

        :param is_active: The is_active of this SpecificationsInsertFieldUpdateRequest.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def is_filter(self):
        """Gets the is_filter of this SpecificationsInsertFieldUpdateRequest.

        Store Framework - Deprecated.  Legacy CMS Portal - To allow the specification to be used as a facet (filter) on the search navigation bar.  

        :return: The is_filter of this SpecificationsInsertFieldUpdateRequest.
        :rtype: bool
        """
        return self._is_filter

    @is_filter.setter
    def is_filter(self, is_filter):
        """Sets the is_filter of this SpecificationsInsertFieldUpdateRequest.

        Store Framework - Deprecated.  Legacy CMS Portal - To allow the specification to be used as a facet (filter) on the search navigation bar.  

        :param is_filter: The is_filter of this SpecificationsInsertFieldUpdateRequest.
        :type is_filter: bool
        """
        if is_filter is None:
            raise ValueError("Invalid value for `is_filter`, must not be `None`")

        self._is_filter = is_filter

    @property
    def is_on_product_details(self):
        """Gets the is_on_product_details of this SpecificationsInsertFieldUpdateRequest.

        Store Framework - Deprecated.  Legacy CMS Portal -If specification is visible on the product page.  

        :return: The is_on_product_details of this SpecificationsInsertFieldUpdateRequest.
        :rtype: bool
        """
        return self._is_on_product_details

    @is_on_product_details.setter
    def is_on_product_details(self, is_on_product_details):
        """Sets the is_on_product_details of this SpecificationsInsertFieldUpdateRequest.

        Store Framework - Deprecated.  Legacy CMS Portal -If specification is visible on the product page.  

        :param is_on_product_details: The is_on_product_details of this SpecificationsInsertFieldUpdateRequest.
        :type is_on_product_details: bool
        """
        if is_on_product_details is None:
            raise ValueError("Invalid value for `is_on_product_details`, must not be `None`")

        self._is_on_product_details = is_on_product_details

    @property
    def is_required(self):
        """Gets the is_required of this SpecificationsInsertFieldUpdateRequest.

        Makes the Specification Field mandatory (`true`) or optional (`false`).

        :return: The is_required of this SpecificationsInsertFieldUpdateRequest.
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this SpecificationsInsertFieldUpdateRequest.

        Makes the Specification Field mandatory (`true`) or optional (`false`).

        :param is_required: The is_required of this SpecificationsInsertFieldUpdateRequest.
        :type is_required: bool
        """
        if is_required is None:
            raise ValueError("Invalid value for `is_required`, must not be `None`")

        self._is_required = is_required

    @property
    def is_side_menu_link_active(self):
        """Gets the is_side_menu_link_active of this SpecificationsInsertFieldUpdateRequest.

        Store Framework - Deprecated.  Legacy CMS Portal - To make the specification field clickable in the search navigation bar.  

        :return: The is_side_menu_link_active of this SpecificationsInsertFieldUpdateRequest.
        :rtype: bool
        """
        return self._is_side_menu_link_active

    @is_side_menu_link_active.setter
    def is_side_menu_link_active(self, is_side_menu_link_active):
        """Sets the is_side_menu_link_active of this SpecificationsInsertFieldUpdateRequest.

        Store Framework - Deprecated.  Legacy CMS Portal - To make the specification field clickable in the search navigation bar.  

        :param is_side_menu_link_active: The is_side_menu_link_active of this SpecificationsInsertFieldUpdateRequest.
        :type is_side_menu_link_active: bool
        """
        if is_side_menu_link_active is None:
            raise ValueError("Invalid value for `is_side_menu_link_active`, must not be `None`")

        self._is_side_menu_link_active = is_side_menu_link_active

    @property
    def is_stock_keeping_unit(self):
        """Gets the is_stock_keeping_unit of this SpecificationsInsertFieldUpdateRequest.

        If `true`, it will be added as a SKU specification field. If `false`, it will be added as a product specification field.

        :return: The is_stock_keeping_unit of this SpecificationsInsertFieldUpdateRequest.
        :rtype: bool
        """
        return self._is_stock_keeping_unit

    @is_stock_keeping_unit.setter
    def is_stock_keeping_unit(self, is_stock_keeping_unit):
        """Sets the is_stock_keeping_unit of this SpecificationsInsertFieldUpdateRequest.

        If `true`, it will be added as a SKU specification field. If `false`, it will be added as a product specification field.

        :param is_stock_keeping_unit: The is_stock_keeping_unit of this SpecificationsInsertFieldUpdateRequest.
        :type is_stock_keeping_unit: bool
        """
        if is_stock_keeping_unit is None:
            raise ValueError("Invalid value for `is_stock_keeping_unit`, must not be `None`")

        self._is_stock_keeping_unit = is_stock_keeping_unit

    @property
    def is_top_menu_link_active(self):
        """Gets the is_top_menu_link_active of this SpecificationsInsertFieldUpdateRequest.

        Store Framework - Deprecated.  Legacy CMS Portal - To make the specification visible in the store's upper menu.  

        :return: The is_top_menu_link_active of this SpecificationsInsertFieldUpdateRequest.
        :rtype: bool
        """
        return self._is_top_menu_link_active

    @is_top_menu_link_active.setter
    def is_top_menu_link_active(self, is_top_menu_link_active):
        """Sets the is_top_menu_link_active of this SpecificationsInsertFieldUpdateRequest.

        Store Framework - Deprecated.  Legacy CMS Portal - To make the specification visible in the store's upper menu.  

        :param is_top_menu_link_active: The is_top_menu_link_active of this SpecificationsInsertFieldUpdateRequest.
        :type is_top_menu_link_active: bool
        """
        if is_top_menu_link_active is None:
            raise ValueError("Invalid value for `is_top_menu_link_active`, must not be `None`")

        self._is_top_menu_link_active = is_top_menu_link_active

    @property
    def is_wizard(self):
        """Gets the is_wizard of this SpecificationsInsertFieldUpdateRequest.

        Deprecated field.

        :return: The is_wizard of this SpecificationsInsertFieldUpdateRequest.
        :rtype: bool
        """
        return self._is_wizard

    @is_wizard.setter
    def is_wizard(self, is_wizard):
        """Sets the is_wizard of this SpecificationsInsertFieldUpdateRequest.

        Deprecated field.

        :param is_wizard: The is_wizard of this SpecificationsInsertFieldUpdateRequest.
        :type is_wizard: bool
        """
        if is_wizard is None:
            raise ValueError("Invalid value for `is_wizard`, must not be `None`")

        self._is_wizard = is_wizard

    @property
    def name(self):
        """Gets the name of this SpecificationsInsertFieldUpdateRequest.

        Specification Field ID.

        :return: The name of this SpecificationsInsertFieldUpdateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SpecificationsInsertFieldUpdateRequest.

        Specification Field ID.

        :param name: The name of this SpecificationsInsertFieldUpdateRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def position(self):
        """Gets the position of this SpecificationsInsertFieldUpdateRequest.

        Specification Field Position.

        :return: The position of this SpecificationsInsertFieldUpdateRequest.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this SpecificationsInsertFieldUpdateRequest.

        Specification Field Position.

        :param position: The position of this SpecificationsInsertFieldUpdateRequest.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position
