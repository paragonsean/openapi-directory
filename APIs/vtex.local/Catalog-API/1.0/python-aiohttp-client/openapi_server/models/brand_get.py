# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BrandGet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, image_url: str=None, is_active: bool=None, meta_tag_description: str=None, name: str=None, title: str=None):
        """BrandGet - a model defined in OpenAPI

        :param id: The id of this BrandGet.
        :param image_url: The image_url of this BrandGet.
        :param is_active: The is_active of this BrandGet.
        :param meta_tag_description: The meta_tag_description of this BrandGet.
        :param name: The name of this BrandGet.
        :param title: The title of this BrandGet.
        """
        self.openapi_types = {
            'id': int,
            'image_url': str,
            'is_active': bool,
            'meta_tag_description': str,
            'name': str,
            'title': str
        }

        self.attribute_map = {
            'id': 'id',
            'image_url': 'imageUrl',
            'is_active': 'isActive',
            'meta_tag_description': 'metaTagDescription',
            'name': 'name',
            'title': 'title'
        }

        self._id = id
        self._image_url = image_url
        self._is_active = is_active
        self._meta_tag_description = meta_tag_description
        self._name = name
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrandGet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BrandGet of this BrandGet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this BrandGet.

        Brand's unique numerical identifier.

        :return: The id of this BrandGet.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BrandGet.

        Brand's unique numerical identifier.

        :param id: The id of this BrandGet.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this BrandGet.

        URL of the brand's image.

        :return: The image_url of this BrandGet.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this BrandGet.

        URL of the brand's image.

        :param image_url: The image_url of this BrandGet.
        :type image_url: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")

        self._image_url = image_url

    @property
    def is_active(self):
        """Gets the is_active of this BrandGet.

        Defines if the brand is active (`true`) or not (`false`).

        :return: The is_active of this BrandGet.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this BrandGet.

        Defines if the brand is active (`true`) or not (`false`).

        :param is_active: The is_active of this BrandGet.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def meta_tag_description(self):
        """Gets the meta_tag_description of this BrandGet.

        Meta Description for the Brand page. A brief description of the brand, displayed by search engines. Since search engines can only display less than 150 characters, we recommend not exceeding this character limit when creating the description.

        :return: The meta_tag_description of this BrandGet.
        :rtype: str
        """
        return self._meta_tag_description

    @meta_tag_description.setter
    def meta_tag_description(self, meta_tag_description):
        """Sets the meta_tag_description of this BrandGet.

        Meta Description for the Brand page. A brief description of the brand, displayed by search engines. Since search engines can only display less than 150 characters, we recommend not exceeding this character limit when creating the description.

        :param meta_tag_description: The meta_tag_description of this BrandGet.
        :type meta_tag_description: str
        """
        if meta_tag_description is None:
            raise ValueError("Invalid value for `meta_tag_description`, must not be `None`")

        self._meta_tag_description = meta_tag_description

    @property
    def name(self):
        """Gets the name of this BrandGet.

        Brand name.

        :return: The name of this BrandGet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BrandGet.

        Brand name.

        :param name: The name of this BrandGet.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def title(self):
        """Gets the title of this BrandGet.

        Meta Title for the Brand page.

        :return: The title of this BrandGet.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BrandGet.

        Meta Title for the Brand page.

        :param title: The title of this BrandGet.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
