# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModelField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_values: str=None, field_name: str=None, max_caracters: str=None):
        """ModelField - a model defined in OpenAPI

        :param domain_values: The domain_values of this ModelField.
        :param field_name: The field_name of this ModelField.
        :param max_caracters: The max_caracters of this ModelField.
        """
        self.openapi_types = {
            'domain_values': str,
            'field_name': str,
            'max_caracters': str
        }

        self.attribute_map = {
            'domain_values': 'DomainValues',
            'field_name': 'FieldName',
            'max_caracters': 'MaxCaracters'
        }

        self._domain_values = domain_values
        self._field_name = field_name
        self._max_caracters = max_caracters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Field of this ModelField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_values(self):
        """Gets the domain_values of this ModelField.

        Allowed key values.

        :return: The domain_values of this ModelField.
        :rtype: str
        """
        return self._domain_values

    @domain_values.setter
    def domain_values(self, domain_values):
        """Sets the domain_values of this ModelField.

        Allowed key values.

        :param domain_values: The domain_values of this ModelField.
        :type domain_values: str
        """
        if domain_values is None:
            raise ValueError("Invalid value for `domain_values`, must not be `None`")

        self._domain_values = domain_values

    @property
    def field_name(self):
        """Gets the field_name of this ModelField.

        Attachment field name.

        :return: The field_name of this ModelField.
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this ModelField.

        Attachment field name.

        :param field_name: The field_name of this ModelField.
        :type field_name: str
        """
        if field_name is None:
            raise ValueError("Invalid value for `field_name`, must not be `None`")

        self._field_name = field_name

    @property
    def max_caracters(self):
        """Gets the max_caracters of this ModelField.

        Maximum number of characters accepted in the attachment field.

        :return: The max_caracters of this ModelField.
        :rtype: str
        """
        return self._max_caracters

    @max_caracters.setter
    def max_caracters(self, max_caracters):
        """Sets the max_caracters of this ModelField.

        Maximum number of characters accepted in the attachment field.

        :param max_caracters: The max_caracters of this ModelField.
        :type max_caracters: str
        """
        if max_caracters is None:
            raise ValueError("Invalid value for `max_caracters`, must not be `None`")

        self._max_caracters = max_caracters
