# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BrandCreateUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, ad_words_remarketing_code: str=None, id: int=None, keywords: str=None, link_id: str=None, lomadee_campaign_code: str=None, menu_home: bool=None, name: str=None, score: int=None, site_title: str=None, text: str=None):
        """BrandCreateUpdate - a model defined in OpenAPI

        :param active: The active of this BrandCreateUpdate.
        :param ad_words_remarketing_code: The ad_words_remarketing_code of this BrandCreateUpdate.
        :param id: The id of this BrandCreateUpdate.
        :param keywords: The keywords of this BrandCreateUpdate.
        :param link_id: The link_id of this BrandCreateUpdate.
        :param lomadee_campaign_code: The lomadee_campaign_code of this BrandCreateUpdate.
        :param menu_home: The menu_home of this BrandCreateUpdate.
        :param name: The name of this BrandCreateUpdate.
        :param score: The score of this BrandCreateUpdate.
        :param site_title: The site_title of this BrandCreateUpdate.
        :param text: The text of this BrandCreateUpdate.
        """
        self.openapi_types = {
            'active': bool,
            'ad_words_remarketing_code': str,
            'id': int,
            'keywords': str,
            'link_id': str,
            'lomadee_campaign_code': str,
            'menu_home': bool,
            'name': str,
            'score': int,
            'site_title': str,
            'text': str
        }

        self.attribute_map = {
            'active': 'Active',
            'ad_words_remarketing_code': 'AdWordsRemarketingCode',
            'id': 'Id',
            'keywords': 'Keywords',
            'link_id': 'LinkId',
            'lomadee_campaign_code': 'LomadeeCampaignCode',
            'menu_home': 'MenuHome',
            'name': 'Name',
            'score': 'Score',
            'site_title': 'SiteTitle',
            'text': 'Text'
        }

        self._active = active
        self._ad_words_remarketing_code = ad_words_remarketing_code
        self._id = id
        self._keywords = keywords
        self._link_id = link_id
        self._lomadee_campaign_code = lomadee_campaign_code
        self._menu_home = menu_home
        self._name = name
        self._score = score
        self._site_title = site_title
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrandCreateUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BrandCreateUpdate of this BrandCreateUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this BrandCreateUpdate.

        Defines if the brand is active (`true`) or not (`false`).

        :return: The active of this BrandCreateUpdate.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this BrandCreateUpdate.

        Defines if the brand is active (`true`) or not (`false`).

        :param active: The active of this BrandCreateUpdate.
        :type active: bool
        """

        self._active = active

    @property
    def ad_words_remarketing_code(self):
        """Gets the ad_words_remarketing_code of this BrandCreateUpdate.

        This is a legacy field. Do not take this information into consideration.

        :return: The ad_words_remarketing_code of this BrandCreateUpdate.
        :rtype: str
        """
        return self._ad_words_remarketing_code

    @ad_words_remarketing_code.setter
    def ad_words_remarketing_code(self, ad_words_remarketing_code):
        """Sets the ad_words_remarketing_code of this BrandCreateUpdate.

        This is a legacy field. Do not take this information into consideration.

        :param ad_words_remarketing_code: The ad_words_remarketing_code of this BrandCreateUpdate.
        :type ad_words_remarketing_code: str
        """

        self._ad_words_remarketing_code = ad_words_remarketing_code

    @property
    def id(self):
        """Gets the id of this BrandCreateUpdate.

        Brand's unique numerical identifier.

        :return: The id of this BrandCreateUpdate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BrandCreateUpdate.

        Brand's unique numerical identifier.

        :param id: The id of this BrandCreateUpdate.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def keywords(self):
        """Gets the keywords of this BrandCreateUpdate.

        Store Framework - Deprecated.  Legacy CMS Portal - Alternative search terms that will lead to the specific brand. The user can find the desired brand even when misspelling it. Used especially when words are of foreign origin and have a distinct spelling that is transcribed into a generic one, or when small spelling mistakes occur.  

        :return: The keywords of this BrandCreateUpdate.
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this BrandCreateUpdate.

        Store Framework - Deprecated.  Legacy CMS Portal - Alternative search terms that will lead to the specific brand. The user can find the desired brand even when misspelling it. Used especially when words are of foreign origin and have a distinct spelling that is transcribed into a generic one, or when small spelling mistakes occur.  

        :param keywords: The keywords of this BrandCreateUpdate.
        :type keywords: str
        """

        self._keywords = keywords

    @property
    def link_id(self):
        """Gets the link_id of this BrandCreateUpdate.

        Brand page slug. Only lowercase letters and hyphens (`-`) are allowed.

        :return: The link_id of this BrandCreateUpdate.
        :rtype: str
        """
        return self._link_id

    @link_id.setter
    def link_id(self, link_id):
        """Sets the link_id of this BrandCreateUpdate.

        Brand page slug. Only lowercase letters and hyphens (`-`) are allowed.

        :param link_id: The link_id of this BrandCreateUpdate.
        :type link_id: str
        """

        self._link_id = link_id

    @property
    def lomadee_campaign_code(self):
        """Gets the lomadee_campaign_code of this BrandCreateUpdate.

        This is a legacy field. Do not take this information into consideration.

        :return: The lomadee_campaign_code of this BrandCreateUpdate.
        :rtype: str
        """
        return self._lomadee_campaign_code

    @lomadee_campaign_code.setter
    def lomadee_campaign_code(self, lomadee_campaign_code):
        """Sets the lomadee_campaign_code of this BrandCreateUpdate.

        This is a legacy field. Do not take this information into consideration.

        :param lomadee_campaign_code: The lomadee_campaign_code of this BrandCreateUpdate.
        :type lomadee_campaign_code: str
        """

        self._lomadee_campaign_code = lomadee_campaign_code

    @property
    def menu_home(self):
        """Gets the menu_home of this BrandCreateUpdate.

        Store Framework - Deprecated.  Legacy CMS Portal - Defines if the Brand appears in the Department Menu control (`<vtex.cmc:departmentNavigator/>`).  

        :return: The menu_home of this BrandCreateUpdate.
        :rtype: bool
        """
        return self._menu_home

    @menu_home.setter
    def menu_home(self, menu_home):
        """Sets the menu_home of this BrandCreateUpdate.

        Store Framework - Deprecated.  Legacy CMS Portal - Defines if the Brand appears in the Department Menu control (`<vtex.cmc:departmentNavigator/>`).  

        :param menu_home: The menu_home of this BrandCreateUpdate.
        :type menu_home: bool
        """

        self._menu_home = menu_home

    @property
    def name(self):
        """Gets the name of this BrandCreateUpdate.

        Brand name.

        :return: The name of this BrandCreateUpdate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BrandCreateUpdate.

        Brand name.

        :param name: The name of this BrandCreateUpdate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def score(self):
        """Gets the score of this BrandCreateUpdate.

        Store Framework - Deprecated  Legacy CMS Portal - Value used to set the priority on the search result page.  

        :return: The score of this BrandCreateUpdate.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this BrandCreateUpdate.

        Store Framework - Deprecated  Legacy CMS Portal - Value used to set the priority on the search result page.  

        :param score: The score of this BrandCreateUpdate.
        :type score: int
        """

        self._score = score

    @property
    def site_title(self):
        """Gets the site_title of this BrandCreateUpdate.

        Meta Title for the Brand page.

        :return: The site_title of this BrandCreateUpdate.
        :rtype: str
        """
        return self._site_title

    @site_title.setter
    def site_title(self, site_title):
        """Sets the site_title of this BrandCreateUpdate.

        Meta Title for the Brand page.

        :param site_title: The site_title of this BrandCreateUpdate.
        :type site_title: str
        """

        self._site_title = site_title

    @property
    def text(self):
        """Gets the text of this BrandCreateUpdate.

        Meta Description for the Brand page. A brief description of the brand, displayed by search engines. Since search engines can only display less than 150 characters, we recommend not exceeding this character limit when creating the description.

        :return: The text of this BrandCreateUpdate.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this BrandCreateUpdate.

        Meta Description for the Brand page. A brief description of the brand, displayed by search engines. Since search engines can only display less than 150 characters, we recommend not exceeding this character limit when creating the description.

        :param text: The text of this BrandCreateUpdate.
        :type text: str
        """

        self._text = text
