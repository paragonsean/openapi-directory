# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_id: int=None, field_name: str=None, field_value_ids: List[int]=None, field_values: List[str]=None):
        """ProductSpecification - a model defined in OpenAPI

        :param field_id: The field_id of this ProductSpecification.
        :param field_name: The field_name of this ProductSpecification.
        :param field_value_ids: The field_value_ids of this ProductSpecification.
        :param field_values: The field_values of this ProductSpecification.
        """
        self.openapi_types = {
            'field_id': int,
            'field_name': str,
            'field_value_ids': List[int],
            'field_values': List[str]
        }

        self.attribute_map = {
            'field_id': 'FieldId',
            'field_name': 'FieldName',
            'field_value_ids': 'FieldValueIds',
            'field_values': 'FieldValues'
        }

        self._field_id = field_id
        self._field_name = field_name
        self._field_value_ids = field_value_ids
        self._field_values = field_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductSpecification of this ProductSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_id(self):
        """Gets the field_id of this ProductSpecification.

        Specification ID.

        :return: The field_id of this ProductSpecification.
        :rtype: int
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this ProductSpecification.

        Specification ID.

        :param field_id: The field_id of this ProductSpecification.
        :type field_id: int
        """
        if field_id is None:
            raise ValueError("Invalid value for `field_id`, must not be `None`")

        self._field_id = field_id

    @property
    def field_name(self):
        """Gets the field_name of this ProductSpecification.

        Specification Name.

        :return: The field_name of this ProductSpecification.
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this ProductSpecification.

        Specification Name.

        :param field_name: The field_name of this ProductSpecification.
        :type field_name: str
        """
        if field_name is None:
            raise ValueError("Invalid value for `field_name`, must not be `None`")

        self._field_name = field_name

    @property
    def field_value_ids(self):
        """Gets the field_value_ids of this ProductSpecification.

        Array with related Specification Values IDs.

        :return: The field_value_ids of this ProductSpecification.
        :rtype: List[int]
        """
        return self._field_value_ids

    @field_value_ids.setter
    def field_value_ids(self, field_value_ids):
        """Sets the field_value_ids of this ProductSpecification.

        Array with related Specification Values IDs.

        :param field_value_ids: The field_value_ids of this ProductSpecification.
        :type field_value_ids: List[int]
        """
        if field_value_ids is None:
            raise ValueError("Invalid value for `field_value_ids`, must not be `None`")

        self._field_value_ids = field_value_ids

    @property
    def field_values(self):
        """Gets the field_values of this ProductSpecification.

        Array with related Specification Values.

        :return: The field_values of this ProductSpecification.
        :rtype: List[str]
        """
        return self._field_values

    @field_values.setter
    def field_values(self, field_values):
        """Sets the field_values of this ProductSpecification.

        Array with related Specification Values.

        :param field_values: The field_values of this ProductSpecification.
        :type field_values: List[str]
        """
        if field_values is None:
            raise ValueError("Invalid value for `field_values`, must not be `None`")

        self._field_values = field_values
