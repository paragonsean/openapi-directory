# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SKUFileURL(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_main: bool=None, label: str=None, name: str=None, text: str=None, url: str=None):
        """SKUFileURL - a model defined in OpenAPI

        :param is_main: The is_main of this SKUFileURL.
        :param label: The label of this SKUFileURL.
        :param name: The name of this SKUFileURL.
        :param text: The text of this SKUFileURL.
        :param url: The url of this SKUFileURL.
        """
        self.openapi_types = {
            'is_main': bool,
            'label': str,
            'name': str,
            'text': str,
            'url': str
        }

        self.attribute_map = {
            'is_main': 'IsMain',
            'label': 'Label',
            'name': 'Name',
            'text': 'Text',
            'url': 'Url'
        }

        self._is_main = is_main
        self._label = label
        self._name = name
        self._text = text
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SKUFileURL':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SKUFileURL of this SKUFileURL.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_main(self):
        """Gets the is_main of this SKUFileURL.

        Defines if the Image is the main image of the SKU.

        :return: The is_main of this SKUFileURL.
        :rtype: bool
        """
        return self._is_main

    @is_main.setter
    def is_main(self, is_main):
        """Sets the is_main of this SKUFileURL.

        Defines if the Image is the main image of the SKU.

        :param is_main: The is_main of this SKUFileURL.
        :type is_main: bool
        """

        self._is_main = is_main

    @property
    def label(self):
        """Gets the label of this SKUFileURL.

        SKU image label.

        :return: The label of this SKUFileURL.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this SKUFileURL.

        SKU image label.

        :param label: The label of this SKUFileURL.
        :type label: str
        """

        self._label = label

    @property
    def name(self):
        """Gets the name of this SKUFileURL.

        SKU image name.

        :return: The name of this SKUFileURL.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SKUFileURL.

        SKU image name.

        :param name: The name of this SKUFileURL.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def text(self):
        """Gets the text of this SKUFileURL.

        General text of the image.

        :return: The text of this SKUFileURL.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SKUFileURL.

        General text of the image.

        :param text: The text of this SKUFileURL.
        :type text: str
        """

        self._text = text

    @property
    def url(self):
        """Gets the url of this SKUFileURL.

        External Image's URL.  The URL must start with the protocol identifier (`http://` or `https://`) and end with the file extension (`.jpg`, `.png` or `.gif`).

        :return: The url of this SKUFileURL.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SKUFileURL.

        External Image's URL.  The URL must start with the protocol identifier (`http://` or `https://`) and end with the file extension (`.jpg`, `.png` or `.gif`).

        :param url: The url of this SKUFileURL.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
