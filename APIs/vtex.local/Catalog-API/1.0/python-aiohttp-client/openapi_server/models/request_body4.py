# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RequestBody4(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_active: bool=None, name: str=None, sku_id: int=None, sku_service_type_id: int=None, sku_service_value_id: int=None, text: str=None):
        """RequestBody4 - a model defined in OpenAPI

        :param is_active: The is_active of this RequestBody4.
        :param name: The name of this RequestBody4.
        :param sku_id: The sku_id of this RequestBody4.
        :param sku_service_type_id: The sku_service_type_id of this RequestBody4.
        :param sku_service_value_id: The sku_service_value_id of this RequestBody4.
        :param text: The text of this RequestBody4.
        """
        self.openapi_types = {
            'is_active': bool,
            'name': str,
            'sku_id': int,
            'sku_service_type_id': int,
            'sku_service_value_id': int,
            'text': str
        }

        self.attribute_map = {
            'is_active': 'IsActive',
            'name': 'Name',
            'sku_id': 'SkuId',
            'sku_service_type_id': 'SkuServiceTypeId',
            'sku_service_value_id': 'SkuServiceValueId',
            'text': 'Text'
        }

        self._is_active = is_active
        self._name = name
        self._sku_id = sku_id
        self._sku_service_type_id = sku_service_type_id
        self._sku_service_value_id = sku_service_value_id
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestBody4':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request_body_4 of this RequestBody4.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_active(self):
        """Gets the is_active of this RequestBody4.

        Defines if the SKU Service is active or not.

        :return: The is_active of this RequestBody4.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this RequestBody4.

        Defines if the SKU Service is active or not.

        :param is_active: The is_active of this RequestBody4.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def name(self):
        """Gets the name of this RequestBody4.

        SKU Service Name. Maximum of 50 characters.

        :return: The name of this RequestBody4.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RequestBody4.

        SKU Service Name. Maximum of 50 characters.

        :param name: The name of this RequestBody4.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def sku_id(self):
        """Gets the sku_id of this RequestBody4.

        SKU ID.

        :return: The sku_id of this RequestBody4.
        :rtype: int
        """
        return self._sku_id

    @sku_id.setter
    def sku_id(self, sku_id):
        """Sets the sku_id of this RequestBody4.

        SKU ID.

        :param sku_id: The sku_id of this RequestBody4.
        :type sku_id: int
        """
        if sku_id is None:
            raise ValueError("Invalid value for `sku_id`, must not be `None`")

        self._sku_id = sku_id

    @property
    def sku_service_type_id(self):
        """Gets the sku_service_type_id of this RequestBody4.

        SKU Service Type ID.

        :return: The sku_service_type_id of this RequestBody4.
        :rtype: int
        """
        return self._sku_service_type_id

    @sku_service_type_id.setter
    def sku_service_type_id(self, sku_service_type_id):
        """Sets the sku_service_type_id of this RequestBody4.

        SKU Service Type ID.

        :param sku_service_type_id: The sku_service_type_id of this RequestBody4.
        :type sku_service_type_id: int
        """
        if sku_service_type_id is None:
            raise ValueError("Invalid value for `sku_service_type_id`, must not be `None`")

        self._sku_service_type_id = sku_service_type_id

    @property
    def sku_service_value_id(self):
        """Gets the sku_service_value_id of this RequestBody4.

        SKU Service Value ID.

        :return: The sku_service_value_id of this RequestBody4.
        :rtype: int
        """
        return self._sku_service_value_id

    @sku_service_value_id.setter
    def sku_service_value_id(self, sku_service_value_id):
        """Sets the sku_service_value_id of this RequestBody4.

        SKU Service Value ID.

        :param sku_service_value_id: The sku_service_value_id of this RequestBody4.
        :type sku_service_value_id: int
        """
        if sku_service_value_id is None:
            raise ValueError("Invalid value for `sku_service_value_id`, must not be `None`")

        self._sku_service_value_id = sku_service_value_id

    @property
    def text(self):
        """Gets the text of this RequestBody4.

        Internal description for the SKU Service. Maximum of 100 characters.

        :return: The text of this RequestBody4.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this RequestBody4.

        Internal description for the SKU Service. Maximum of 100 characters.

        :param text: The text of this RequestBody4.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text
