# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.brand_get import BrandGet
from openapi_server.models.paging import Paging
from openapi_server import util


class BrandListPerPage200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[BrandGet]=None, paging: Paging=None):
        """BrandListPerPage200Response - a model defined in OpenAPI

        :param items: The items of this BrandListPerPage200Response.
        :param paging: The paging of this BrandListPerPage200Response.
        """
        self.openapi_types = {
            'items': List[BrandGet],
            'paging': Paging
        }

        self.attribute_map = {
            'items': 'items',
            'paging': 'paging'
        }

        self._items = items
        self._paging = paging

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrandListPerPage200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BrandListPerPage_200_response of this BrandListPerPage200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this BrandListPerPage200Response.

        Array of objects with information of the store's brands.

        :return: The items of this BrandListPerPage200Response.
        :rtype: List[BrandGet]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this BrandListPerPage200Response.

        Array of objects with information of the store's brands.

        :param items: The items of this BrandListPerPage200Response.
        :type items: List[BrandGet]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def paging(self):
        """Gets the paging of this BrandListPerPage200Response.


        :return: The paging of this BrandListPerPage200Response.
        :rtype: Paging
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this BrandListPerPage200Response.


        :param paging: The paging of this BrandListPerPage200Response.
        :type paging: Paging
        """
        if paging is None:
            raise ValueError("Invalid value for `paging`, must not be `None`")

        self._paging = paging
