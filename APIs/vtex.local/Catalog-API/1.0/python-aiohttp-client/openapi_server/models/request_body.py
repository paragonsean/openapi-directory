# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_id: int=None, field_value_id: int=None, id: int=None, sku_id: int=None, text: str=None):
        """RequestBody - a model defined in OpenAPI

        :param field_id: The field_id of this RequestBody.
        :param field_value_id: The field_value_id of this RequestBody.
        :param id: The id of this RequestBody.
        :param sku_id: The sku_id of this RequestBody.
        :param text: The text of this RequestBody.
        """
        self.openapi_types = {
            'field_id': int,
            'field_value_id': int,
            'id': int,
            'sku_id': int,
            'text': str
        }

        self.attribute_map = {
            'field_id': 'FieldId',
            'field_value_id': 'FieldValueId',
            'id': 'Id',
            'sku_id': 'SkuId',
            'text': 'Text'
        }

        self._field_id = field_id
        self._field_value_id = field_value_id
        self._id = id
        self._sku_id = sku_id
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request_Body of this RequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_id(self):
        """Gets the field_id of this RequestBody.

        Specification unique identifier. This field cannot be updated.

        :return: The field_id of this RequestBody.
        :rtype: int
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this RequestBody.

        Specification unique identifier. This field cannot be updated.

        :param field_id: The field_id of this RequestBody.
        :type field_id: int
        """
        if field_id is None:
            raise ValueError("Invalid value for `field_id`, must not be `None`")

        self._field_id = field_id

    @property
    def field_value_id(self):
        """Gets the field_value_id of this RequestBody.

        Specification value unique identifier. This field can only be updated with other values of the same `FieldId`.

        :return: The field_value_id of this RequestBody.
        :rtype: int
        """
        return self._field_value_id

    @field_value_id.setter
    def field_value_id(self, field_value_id):
        """Sets the field_value_id of this RequestBody.

        Specification value unique identifier. This field can only be updated with other values of the same `FieldId`.

        :param field_value_id: The field_value_id of this RequestBody.
        :type field_value_id: int
        """
        if field_value_id is None:
            raise ValueError("Invalid value for `field_value_id`, must not be `None`")

        self._field_value_id = field_value_id

    @property
    def id(self):
        """Gets the id of this RequestBody.

        Specification and SKU association unique identifier. This field cannot be updated.

        :return: The id of this RequestBody.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RequestBody.

        Specification and SKU association unique identifier. This field cannot be updated.

        :param id: The id of this RequestBody.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def sku_id(self):
        """Gets the sku_id of this RequestBody.

        SKU unique identifier. This field cannot be updated.

        :return: The sku_id of this RequestBody.
        :rtype: int
        """
        return self._sku_id

    @sku_id.setter
    def sku_id(self, sku_id):
        """Sets the sku_id of this RequestBody.

        SKU unique identifier. This field cannot be updated.

        :param sku_id: The sku_id of this RequestBody.
        :type sku_id: int
        """

        self._sku_id = sku_id

    @property
    def text(self):
        """Gets the text of this RequestBody.

        Specification Value Name. This field is automatically updated if the `FieldValue` is updated. Otherwise, the value cannot be modified.

        :return: The text of this RequestBody.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this RequestBody.

        Specification Value Name. This field is automatically updated if the `FieldValue` is updated. Otherwise, the value cannot be modified.

        :param text: The text of this RequestBody.
        :type text: str
        """

        self._text = text
