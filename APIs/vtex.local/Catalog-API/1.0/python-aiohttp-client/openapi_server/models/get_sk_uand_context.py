# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alternate_ids import AlternateIds
from openapi_server.models.attachment import Attachment
from openapi_server.models.dimension import Dimension
from openapi_server.models.image import Image
from openapi_server.models.product_specification import ProductSpecification
from openapi_server.models.real_dimension import RealDimension
from openapi_server.models.sku_seller import SkuSeller
from openapi_server.models.sku_specification import SkuSpecification
from openapi_server import util


class GetSKUandContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_id_values: List[str]=None, alternate_ids: AlternateIds=None, attachments: List[Attachment]=None, brand_id: str=None, brand_name: str=None, csc_identification: str=None, categories: List[str]=None, collections: List[str]=None, commercial_condition_id: int=None, complement_name: str=None, detail_url: str=None, dimension: Dimension=None, estimated_date_arrival: str=None, id: int=None, image_url: str=None, images: List[Image]=None, information_source: str=None, is_active: bool=None, is_gift_card_recharge: bool=None, is_inventoried: bool=None, is_kit: bool=None, is_product_active: bool=None, is_transported: bool=None, key_words: str=None, kit_items: List[str]=None, manufacturer_code: str=None, measurement_unit: str=None, modal_type: str=None, name_complete: str=None, product_categories: Dict[str, Dict[str, str]]=None, product_category_ids: str=None, product_clusters_ids: str=None, product_description: str=None, product_final_score: int=None, product_global_category_id: int=None, product_id: int=None, product_is_visible: bool=None, product_name: str=None, product_ref_id: str=None, product_specifications: List[ProductSpecification]=None, real_dimension: RealDimension=None, release_date: str=None, reward_value: float=None, sales_channels: List[int]=None, services: List[str]=None, show_if_not_available: bool=None, sku_name: str=None, sku_sellers: List[SkuSeller]=None, sku_specifications: List[SkuSpecification]=None, tax_code: str=None, unit_multiplier: float=None):
        """GetSKUandContext - a model defined in OpenAPI

        :param alternate_id_values: The alternate_id_values of this GetSKUandContext.
        :param alternate_ids: The alternate_ids of this GetSKUandContext.
        :param attachments: The attachments of this GetSKUandContext.
        :param brand_id: The brand_id of this GetSKUandContext.
        :param brand_name: The brand_name of this GetSKUandContext.
        :param csc_identification: The csc_identification of this GetSKUandContext.
        :param categories: The categories of this GetSKUandContext.
        :param collections: The collections of this GetSKUandContext.
        :param commercial_condition_id: The commercial_condition_id of this GetSKUandContext.
        :param complement_name: The complement_name of this GetSKUandContext.
        :param detail_url: The detail_url of this GetSKUandContext.
        :param dimension: The dimension of this GetSKUandContext.
        :param estimated_date_arrival: The estimated_date_arrival of this GetSKUandContext.
        :param id: The id of this GetSKUandContext.
        :param image_url: The image_url of this GetSKUandContext.
        :param images: The images of this GetSKUandContext.
        :param information_source: The information_source of this GetSKUandContext.
        :param is_active: The is_active of this GetSKUandContext.
        :param is_gift_card_recharge: The is_gift_card_recharge of this GetSKUandContext.
        :param is_inventoried: The is_inventoried of this GetSKUandContext.
        :param is_kit: The is_kit of this GetSKUandContext.
        :param is_product_active: The is_product_active of this GetSKUandContext.
        :param is_transported: The is_transported of this GetSKUandContext.
        :param key_words: The key_words of this GetSKUandContext.
        :param kit_items: The kit_items of this GetSKUandContext.
        :param manufacturer_code: The manufacturer_code of this GetSKUandContext.
        :param measurement_unit: The measurement_unit of this GetSKUandContext.
        :param modal_type: The modal_type of this GetSKUandContext.
        :param name_complete: The name_complete of this GetSKUandContext.
        :param product_categories: The product_categories of this GetSKUandContext.
        :param product_category_ids: The product_category_ids of this GetSKUandContext.
        :param product_clusters_ids: The product_clusters_ids of this GetSKUandContext.
        :param product_description: The product_description of this GetSKUandContext.
        :param product_final_score: The product_final_score of this GetSKUandContext.
        :param product_global_category_id: The product_global_category_id of this GetSKUandContext.
        :param product_id: The product_id of this GetSKUandContext.
        :param product_is_visible: The product_is_visible of this GetSKUandContext.
        :param product_name: The product_name of this GetSKUandContext.
        :param product_ref_id: The product_ref_id of this GetSKUandContext.
        :param product_specifications: The product_specifications of this GetSKUandContext.
        :param real_dimension: The real_dimension of this GetSKUandContext.
        :param release_date: The release_date of this GetSKUandContext.
        :param reward_value: The reward_value of this GetSKUandContext.
        :param sales_channels: The sales_channels of this GetSKUandContext.
        :param services: The services of this GetSKUandContext.
        :param show_if_not_available: The show_if_not_available of this GetSKUandContext.
        :param sku_name: The sku_name of this GetSKUandContext.
        :param sku_sellers: The sku_sellers of this GetSKUandContext.
        :param sku_specifications: The sku_specifications of this GetSKUandContext.
        :param tax_code: The tax_code of this GetSKUandContext.
        :param unit_multiplier: The unit_multiplier of this GetSKUandContext.
        """
        self.openapi_types = {
            'alternate_id_values': List[str],
            'alternate_ids': AlternateIds,
            'attachments': List[Attachment],
            'brand_id': str,
            'brand_name': str,
            'csc_identification': str,
            'categories': List[str],
            'collections': List[str],
            'commercial_condition_id': int,
            'complement_name': str,
            'detail_url': str,
            'dimension': Dimension,
            'estimated_date_arrival': str,
            'id': int,
            'image_url': str,
            'images': List[Image],
            'information_source': str,
            'is_active': bool,
            'is_gift_card_recharge': bool,
            'is_inventoried': bool,
            'is_kit': bool,
            'is_product_active': bool,
            'is_transported': bool,
            'key_words': str,
            'kit_items': List[str],
            'manufacturer_code': str,
            'measurement_unit': str,
            'modal_type': str,
            'name_complete': str,
            'product_categories': Dict[str, Dict[str, str]],
            'product_category_ids': str,
            'product_clusters_ids': str,
            'product_description': str,
            'product_final_score': int,
            'product_global_category_id': int,
            'product_id': int,
            'product_is_visible': bool,
            'product_name': str,
            'product_ref_id': str,
            'product_specifications': List[ProductSpecification],
            'real_dimension': RealDimension,
            'release_date': str,
            'reward_value': float,
            'sales_channels': List[int],
            'services': List[str],
            'show_if_not_available': bool,
            'sku_name': str,
            'sku_sellers': List[SkuSeller],
            'sku_specifications': List[SkuSpecification],
            'tax_code': str,
            'unit_multiplier': float
        }

        self.attribute_map = {
            'alternate_id_values': 'AlternateIdValues',
            'alternate_ids': 'AlternateIds',
            'attachments': 'Attachments',
            'brand_id': 'BrandId',
            'brand_name': 'BrandName',
            'csc_identification': 'CSCIdentification',
            'categories': 'Categories',
            'collections': 'Collections',
            'commercial_condition_id': 'CommercialConditionId',
            'complement_name': 'ComplementName',
            'detail_url': 'DetailUrl',
            'dimension': 'Dimension',
            'estimated_date_arrival': 'EstimatedDateArrival',
            'id': 'Id',
            'image_url': 'ImageUrl',
            'images': 'Images',
            'information_source': 'InformationSource',
            'is_active': 'IsActive',
            'is_gift_card_recharge': 'IsGiftCardRecharge',
            'is_inventoried': 'IsInventoried',
            'is_kit': 'IsKit',
            'is_product_active': 'IsProductActive',
            'is_transported': 'IsTransported',
            'key_words': 'KeyWords',
            'kit_items': 'KitItems',
            'manufacturer_code': 'ManufacturerCode',
            'measurement_unit': 'MeasurementUnit',
            'modal_type': 'ModalType',
            'name_complete': 'NameComplete',
            'product_categories': 'ProductCategories',
            'product_category_ids': 'ProductCategoryIds',
            'product_clusters_ids': 'ProductClustersIds',
            'product_description': 'ProductDescription',
            'product_final_score': 'ProductFinalScore',
            'product_global_category_id': 'ProductGlobalCategoryId',
            'product_id': 'ProductId',
            'product_is_visible': 'ProductIsVisible',
            'product_name': 'ProductName',
            'product_ref_id': 'ProductRefId',
            'product_specifications': 'ProductSpecifications',
            'real_dimension': 'RealDimension',
            'release_date': 'ReleaseDate',
            'reward_value': 'RewardValue',
            'sales_channels': 'SalesChannels',
            'services': 'Services',
            'show_if_not_available': 'ShowIfNotAvailable',
            'sku_name': 'SkuName',
            'sku_sellers': 'SkuSellers',
            'sku_specifications': 'SkuSpecifications',
            'tax_code': 'TaxCode',
            'unit_multiplier': 'UnitMultiplier'
        }

        self._alternate_id_values = alternate_id_values
        self._alternate_ids = alternate_ids
        self._attachments = attachments
        self._brand_id = brand_id
        self._brand_name = brand_name
        self._csc_identification = csc_identification
        self._categories = categories
        self._collections = collections
        self._commercial_condition_id = commercial_condition_id
        self._complement_name = complement_name
        self._detail_url = detail_url
        self._dimension = dimension
        self._estimated_date_arrival = estimated_date_arrival
        self._id = id
        self._image_url = image_url
        self._images = images
        self._information_source = information_source
        self._is_active = is_active
        self._is_gift_card_recharge = is_gift_card_recharge
        self._is_inventoried = is_inventoried
        self._is_kit = is_kit
        self._is_product_active = is_product_active
        self._is_transported = is_transported
        self._key_words = key_words
        self._kit_items = kit_items
        self._manufacturer_code = manufacturer_code
        self._measurement_unit = measurement_unit
        self._modal_type = modal_type
        self._name_complete = name_complete
        self._product_categories = product_categories
        self._product_category_ids = product_category_ids
        self._product_clusters_ids = product_clusters_ids
        self._product_description = product_description
        self._product_final_score = product_final_score
        self._product_global_category_id = product_global_category_id
        self._product_id = product_id
        self._product_is_visible = product_is_visible
        self._product_name = product_name
        self._product_ref_id = product_ref_id
        self._product_specifications = product_specifications
        self._real_dimension = real_dimension
        self._release_date = release_date
        self._reward_value = reward_value
        self._sales_channels = sales_channels
        self._services = services
        self._show_if_not_available = show_if_not_available
        self._sku_name = sku_name
        self._sku_sellers = sku_sellers
        self._sku_specifications = sku_specifications
        self._tax_code = tax_code
        self._unit_multiplier = unit_multiplier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSKUandContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetSKUandContext of this GetSKUandContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_id_values(self):
        """Gets the alternate_id_values of this GetSKUandContext.

        Array with values of alternative SKU IDs.

        :return: The alternate_id_values of this GetSKUandContext.
        :rtype: List[str]
        """
        return self._alternate_id_values

    @alternate_id_values.setter
    def alternate_id_values(self, alternate_id_values):
        """Sets the alternate_id_values of this GetSKUandContext.

        Array with values of alternative SKU IDs.

        :param alternate_id_values: The alternate_id_values of this GetSKUandContext.
        :type alternate_id_values: List[str]
        """
        if alternate_id_values is None:
            raise ValueError("Invalid value for `alternate_id_values`, must not be `None`")

        self._alternate_id_values = alternate_id_values

    @property
    def alternate_ids(self):
        """Gets the alternate_ids of this GetSKUandContext.


        :return: The alternate_ids of this GetSKUandContext.
        :rtype: AlternateIds
        """
        return self._alternate_ids

    @alternate_ids.setter
    def alternate_ids(self, alternate_ids):
        """Sets the alternate_ids of this GetSKUandContext.


        :param alternate_ids: The alternate_ids of this GetSKUandContext.
        :type alternate_ids: AlternateIds
        """
        if alternate_ids is None:
            raise ValueError("Invalid value for `alternate_ids`, must not be `None`")

        self._alternate_ids = alternate_ids

    @property
    def attachments(self):
        """Gets the attachments of this GetSKUandContext.

        Array with Attachments ID that are related to the SKU.

        :return: The attachments of this GetSKUandContext.
        :rtype: List[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this GetSKUandContext.

        Array with Attachments ID that are related to the SKU.

        :param attachments: The attachments of this GetSKUandContext.
        :type attachments: List[Attachment]
        """
        if attachments is None:
            raise ValueError("Invalid value for `attachments`, must not be `None`")

        self._attachments = attachments

    @property
    def brand_id(self):
        """Gets the brand_id of this GetSKUandContext.

        Product Brand ID.

        :return: The brand_id of this GetSKUandContext.
        :rtype: str
        """
        return self._brand_id

    @brand_id.setter
    def brand_id(self, brand_id):
        """Sets the brand_id of this GetSKUandContext.

        Product Brand ID.

        :param brand_id: The brand_id of this GetSKUandContext.
        :type brand_id: str
        """
        if brand_id is None:
            raise ValueError("Invalid value for `brand_id`, must not be `None`")

        self._brand_id = brand_id

    @property
    def brand_name(self):
        """Gets the brand_name of this GetSKUandContext.

        Product Brand Name.

        :return: The brand_name of this GetSKUandContext.
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this GetSKUandContext.

        Product Brand Name.

        :param brand_name: The brand_name of this GetSKUandContext.
        :type brand_name: str
        """
        if brand_name is None:
            raise ValueError("Invalid value for `brand_name`, must not be `None`")

        self._brand_name = brand_name

    @property
    def csc_identification(self):
        """Gets the csc_identification of this GetSKUandContext.

        SKU Seller identification.

        :return: The csc_identification of this GetSKUandContext.
        :rtype: str
        """
        return self._csc_identification

    @csc_identification.setter
    def csc_identification(self, csc_identification):
        """Sets the csc_identification of this GetSKUandContext.

        SKU Seller identification.

        :param csc_identification: The csc_identification of this GetSKUandContext.
        :type csc_identification: str
        """
        if csc_identification is None:
            raise ValueError("Invalid value for `csc_identification`, must not be `None`")

        self._csc_identification = csc_identification

    @property
    def categories(self):
        """Gets the categories of this GetSKUandContext.

        Array with Categories from the related Product.

        :return: The categories of this GetSKUandContext.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this GetSKUandContext.

        Array with Categories from the related Product.

        :param categories: The categories of this GetSKUandContext.
        :type categories: List[str]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")

        self._categories = categories

    @property
    def collections(self):
        """Gets the collections of this GetSKUandContext.

        Array with Collections ID that are related to the Product.

        :return: The collections of this GetSKUandContext.
        :rtype: List[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this GetSKUandContext.

        Array with Collections ID that are related to the Product.

        :param collections: The collections of this GetSKUandContext.
        :type collections: List[str]
        """
        if collections is None:
            raise ValueError("Invalid value for `collections`, must not be `None`")

        self._collections = collections

    @property
    def commercial_condition_id(self):
        """Gets the commercial_condition_id of this GetSKUandContext.

        SKU Commercial Condition ID.

        :return: The commercial_condition_id of this GetSKUandContext.
        :rtype: int
        """
        return self._commercial_condition_id

    @commercial_condition_id.setter
    def commercial_condition_id(self, commercial_condition_id):
        """Sets the commercial_condition_id of this GetSKUandContext.

        SKU Commercial Condition ID.

        :param commercial_condition_id: The commercial_condition_id of this GetSKUandContext.
        :type commercial_condition_id: int
        """
        if commercial_condition_id is None:
            raise ValueError("Invalid value for `commercial_condition_id`, must not be `None`")

        self._commercial_condition_id = commercial_condition_id

    @property
    def complement_name(self):
        """Gets the complement_name of this GetSKUandContext.

        Product Complement Name.

        :return: The complement_name of this GetSKUandContext.
        :rtype: str
        """
        return self._complement_name

    @complement_name.setter
    def complement_name(self, complement_name):
        """Sets the complement_name of this GetSKUandContext.

        Product Complement Name.

        :param complement_name: The complement_name of this GetSKUandContext.
        :type complement_name: str
        """

        self._complement_name = complement_name

    @property
    def detail_url(self):
        """Gets the detail_url of this GetSKUandContext.

        Product URL.

        :return: The detail_url of this GetSKUandContext.
        :rtype: str
        """
        return self._detail_url

    @detail_url.setter
    def detail_url(self, detail_url):
        """Sets the detail_url of this GetSKUandContext.

        Product URL.

        :param detail_url: The detail_url of this GetSKUandContext.
        :type detail_url: str
        """
        if detail_url is None:
            raise ValueError("Invalid value for `detail_url`, must not be `None`")

        self._detail_url = detail_url

    @property
    def dimension(self):
        """Gets the dimension of this GetSKUandContext.


        :return: The dimension of this GetSKUandContext.
        :rtype: Dimension
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this GetSKUandContext.


        :param dimension: The dimension of this GetSKUandContext.
        :type dimension: Dimension
        """
        if dimension is None:
            raise ValueError("Invalid value for `dimension`, must not be `None`")

        self._dimension = dimension

    @property
    def estimated_date_arrival(self):
        """Gets the estimated_date_arrival of this GetSKUandContext.

        To add the product as pre-sale, enter the product estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format. You must take into consideration both the launch date and the freight calculation for the arrival date.

        :return: The estimated_date_arrival of this GetSKUandContext.
        :rtype: str
        """
        return self._estimated_date_arrival

    @estimated_date_arrival.setter
    def estimated_date_arrival(self, estimated_date_arrival):
        """Sets the estimated_date_arrival of this GetSKUandContext.

        To add the product as pre-sale, enter the product estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format. You must take into consideration both the launch date and the freight calculation for the arrival date.

        :param estimated_date_arrival: The estimated_date_arrival of this GetSKUandContext.
        :type estimated_date_arrival: str
        """
        if estimated_date_arrival is None:
            raise ValueError("Invalid value for `estimated_date_arrival`, must not be `None`")

        self._estimated_date_arrival = estimated_date_arrival

    @property
    def id(self):
        """Gets the id of this GetSKUandContext.

        SKU ID.

        :return: The id of this GetSKUandContext.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetSKUandContext.

        SKU ID.

        :param id: The id of this GetSKUandContext.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this GetSKUandContext.

        SKU image URL.

        :return: The image_url of this GetSKUandContext.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this GetSKUandContext.

        SKU image URL.

        :param image_url: The image_url of this GetSKUandContext.
        :type image_url: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")

        self._image_url = image_url

    @property
    def images(self):
        """Gets the images of this GetSKUandContext.

        Array with SKU images.

        :return: The images of this GetSKUandContext.
        :rtype: List[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this GetSKUandContext.

        Array with SKU images.

        :param images: The images of this GetSKUandContext.
        :type images: List[Image]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def information_source(self):
        """Gets the information_source of this GetSKUandContext.

        Information Source.

        :return: The information_source of this GetSKUandContext.
        :rtype: str
        """
        return self._information_source

    @information_source.setter
    def information_source(self, information_source):
        """Sets the information_source of this GetSKUandContext.

        Information Source.

        :param information_source: The information_source of this GetSKUandContext.
        :type information_source: str
        """
        if information_source is None:
            raise ValueError("Invalid value for `information_source`, must not be `None`")

        self._information_source = information_source

    @property
    def is_active(self):
        """Gets the is_active of this GetSKUandContext.

        Defines if the SKU is active or not.

        :return: The is_active of this GetSKUandContext.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this GetSKUandContext.

        Defines if the SKU is active or not.

        :param is_active: The is_active of this GetSKUandContext.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def is_gift_card_recharge(self):
        """Gets the is_gift_card_recharge of this GetSKUandContext.

        Defines if the purchase will generate a reward.

        :return: The is_gift_card_recharge of this GetSKUandContext.
        :rtype: bool
        """
        return self._is_gift_card_recharge

    @is_gift_card_recharge.setter
    def is_gift_card_recharge(self, is_gift_card_recharge):
        """Sets the is_gift_card_recharge of this GetSKUandContext.

        Defines if the purchase will generate a reward.

        :param is_gift_card_recharge: The is_gift_card_recharge of this GetSKUandContext.
        :type is_gift_card_recharge: bool
        """
        if is_gift_card_recharge is None:
            raise ValueError("Invalid value for `is_gift_card_recharge`, must not be `None`")

        self._is_gift_card_recharge = is_gift_card_recharge

    @property
    def is_inventoried(self):
        """Gets the is_inventoried of this GetSKUandContext.


        :return: The is_inventoried of this GetSKUandContext.
        :rtype: bool
        """
        return self._is_inventoried

    @is_inventoried.setter
    def is_inventoried(self, is_inventoried):
        """Sets the is_inventoried of this GetSKUandContext.


        :param is_inventoried: The is_inventoried of this GetSKUandContext.
        :type is_inventoried: bool
        """
        if is_inventoried is None:
            raise ValueError("Invalid value for `is_inventoried`, must not be `None`")

        self._is_inventoried = is_inventoried

    @property
    def is_kit(self):
        """Gets the is_kit of this GetSKUandContext.

        Defines if the SKU is part of a bundle.

        :return: The is_kit of this GetSKUandContext.
        :rtype: bool
        """
        return self._is_kit

    @is_kit.setter
    def is_kit(self, is_kit):
        """Sets the is_kit of this GetSKUandContext.

        Defines if the SKU is part of a bundle.

        :param is_kit: The is_kit of this GetSKUandContext.
        :type is_kit: bool
        """
        if is_kit is None:
            raise ValueError("Invalid value for `is_kit`, must not be `None`")

        self._is_kit = is_kit

    @property
    def is_product_active(self):
        """Gets the is_product_active of this GetSKUandContext.

        Defines if the product is active or not.

        :return: The is_product_active of this GetSKUandContext.
        :rtype: bool
        """
        return self._is_product_active

    @is_product_active.setter
    def is_product_active(self, is_product_active):
        """Sets the is_product_active of this GetSKUandContext.

        Defines if the product is active or not.

        :param is_product_active: The is_product_active of this GetSKUandContext.
        :type is_product_active: bool
        """

        self._is_product_active = is_product_active

    @property
    def is_transported(self):
        """Gets the is_transported of this GetSKUandContext.


        :return: The is_transported of this GetSKUandContext.
        :rtype: bool
        """
        return self._is_transported

    @is_transported.setter
    def is_transported(self, is_transported):
        """Sets the is_transported of this GetSKUandContext.


        :param is_transported: The is_transported of this GetSKUandContext.
        :type is_transported: bool
        """
        if is_transported is None:
            raise ValueError("Invalid value for `is_transported`, must not be `None`")

        self._is_transported = is_transported

    @property
    def key_words(self):
        """Gets the key_words of this GetSKUandContext.

        Keywords related to the product.

        :return: The key_words of this GetSKUandContext.
        :rtype: str
        """
        return self._key_words

    @key_words.setter
    def key_words(self, key_words):
        """Sets the key_words of this GetSKUandContext.

        Keywords related to the product.

        :param key_words: The key_words of this GetSKUandContext.
        :type key_words: str
        """

        self._key_words = key_words

    @property
    def kit_items(self):
        """Gets the kit_items of this GetSKUandContext.

        Array with SKU IDs of bundle components.

        :return: The kit_items of this GetSKUandContext.
        :rtype: List[str]
        """
        return self._kit_items

    @kit_items.setter
    def kit_items(self, kit_items):
        """Sets the kit_items of this GetSKUandContext.

        Array with SKU IDs of bundle components.

        :param kit_items: The kit_items of this GetSKUandContext.
        :type kit_items: List[str]
        """
        if kit_items is None:
            raise ValueError("Invalid value for `kit_items`, must not be `None`")

        self._kit_items = kit_items

    @property
    def manufacturer_code(self):
        """Gets the manufacturer_code of this GetSKUandContext.

        Product Supplier ID.

        :return: The manufacturer_code of this GetSKUandContext.
        :rtype: str
        """
        return self._manufacturer_code

    @manufacturer_code.setter
    def manufacturer_code(self, manufacturer_code):
        """Sets the manufacturer_code of this GetSKUandContext.

        Product Supplier ID.

        :param manufacturer_code: The manufacturer_code of this GetSKUandContext.
        :type manufacturer_code: str
        """
        if manufacturer_code is None:
            raise ValueError("Invalid value for `manufacturer_code`, must not be `None`")

        self._manufacturer_code = manufacturer_code

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this GetSKUandContext.

        SKU Measurement Unit.

        :return: The measurement_unit of this GetSKUandContext.
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this GetSKUandContext.

        SKU Measurement Unit.

        :param measurement_unit: The measurement_unit of this GetSKUandContext.
        :type measurement_unit: str
        """
        if measurement_unit is None:
            raise ValueError("Invalid value for `measurement_unit`, must not be `None`")

        self._measurement_unit = measurement_unit

    @property
    def modal_type(self):
        """Gets the modal_type of this GetSKUandContext.

        Modal Type.

        :return: The modal_type of this GetSKUandContext.
        :rtype: str
        """
        return self._modal_type

    @modal_type.setter
    def modal_type(self, modal_type):
        """Sets the modal_type of this GetSKUandContext.

        Modal Type.

        :param modal_type: The modal_type of this GetSKUandContext.
        :type modal_type: str
        """
        if modal_type is None:
            raise ValueError("Invalid value for `modal_type`, must not be `None`")

        self._modal_type = modal_type

    @property
    def name_complete(self):
        """Gets the name_complete of this GetSKUandContext.

        Product Name and SKU Name concatenated.

        :return: The name_complete of this GetSKUandContext.
        :rtype: str
        """
        return self._name_complete

    @name_complete.setter
    def name_complete(self, name_complete):
        """Sets the name_complete of this GetSKUandContext.

        Product Name and SKU Name concatenated.

        :param name_complete: The name_complete of this GetSKUandContext.
        :type name_complete: str
        """
        if name_complete is None:
            raise ValueError("Invalid value for `name_complete`, must not be `None`")

        self._name_complete = name_complete

    @property
    def product_categories(self):
        """Gets the product_categories of this GetSKUandContext.

        Object containing product categories. Structure: \"{CategoryID}\": \"{CategoryName}\".

        :return: The product_categories of this GetSKUandContext.
        :rtype: Dict[str, Dict[str, str]]
        """
        return self._product_categories

    @product_categories.setter
    def product_categories(self, product_categories):
        """Sets the product_categories of this GetSKUandContext.

        Object containing product categories. Structure: \"{CategoryID}\": \"{CategoryName}\".

        :param product_categories: The product_categories of this GetSKUandContext.
        :type product_categories: Dict[str, Dict[str, str]]
        """
        if product_categories is None:
            raise ValueError("Invalid value for `product_categories`, must not be `None`")

        self._product_categories = product_categories

    @property
    def product_category_ids(self):
        """Gets the product_category_ids of this GetSKUandContext.

        Category Hierarchy with Category IDs.

        :return: The product_category_ids of this GetSKUandContext.
        :rtype: str
        """
        return self._product_category_ids

    @product_category_ids.setter
    def product_category_ids(self, product_category_ids):
        """Sets the product_category_ids of this GetSKUandContext.

        Category Hierarchy with Category IDs.

        :param product_category_ids: The product_category_ids of this GetSKUandContext.
        :type product_category_ids: str
        """
        if product_category_ids is None:
            raise ValueError("Invalid value for `product_category_ids`, must not be `None`")

        self._product_category_ids = product_category_ids

    @property
    def product_clusters_ids(self):
        """Gets the product_clusters_ids of this GetSKUandContext.

        Product Clusters IDs.

        :return: The product_clusters_ids of this GetSKUandContext.
        :rtype: str
        """
        return self._product_clusters_ids

    @product_clusters_ids.setter
    def product_clusters_ids(self, product_clusters_ids):
        """Sets the product_clusters_ids of this GetSKUandContext.

        Product Clusters IDs.

        :param product_clusters_ids: The product_clusters_ids of this GetSKUandContext.
        :type product_clusters_ids: str
        """
        if product_clusters_ids is None:
            raise ValueError("Invalid value for `product_clusters_ids`, must not be `None`")

        self._product_clusters_ids = product_clusters_ids

    @property
    def product_description(self):
        """Gets the product_description of this GetSKUandContext.

        Product Description. HTML is allowed.

        :return: The product_description of this GetSKUandContext.
        :rtype: str
        """
        return self._product_description

    @product_description.setter
    def product_description(self, product_description):
        """Sets the product_description of this GetSKUandContext.

        Product Description. HTML is allowed.

        :param product_description: The product_description of this GetSKUandContext.
        :type product_description: str
        """
        if product_description is None:
            raise ValueError("Invalid value for `product_description`, must not be `None`")

        self._product_description = product_description

    @property
    def product_final_score(self):
        """Gets the product_final_score of this GetSKUandContext.

        Product Final Score.

        :return: The product_final_score of this GetSKUandContext.
        :rtype: int
        """
        return self._product_final_score

    @product_final_score.setter
    def product_final_score(self, product_final_score):
        """Sets the product_final_score of this GetSKUandContext.

        Product Final Score.

        :param product_final_score: The product_final_score of this GetSKUandContext.
        :type product_final_score: int
        """

        self._product_final_score = product_final_score

    @property
    def product_global_category_id(self):
        """Gets the product_global_category_id of this GetSKUandContext.

        Global Category ID.

        :return: The product_global_category_id of this GetSKUandContext.
        :rtype: int
        """
        return self._product_global_category_id

    @product_global_category_id.setter
    def product_global_category_id(self, product_global_category_id):
        """Sets the product_global_category_id of this GetSKUandContext.

        Global Category ID.

        :param product_global_category_id: The product_global_category_id of this GetSKUandContext.
        :type product_global_category_id: int
        """
        if product_global_category_id is None:
            raise ValueError("Invalid value for `product_global_category_id`, must not be `None`")

        self._product_global_category_id = product_global_category_id

    @property
    def product_id(self):
        """Gets the product_id of this GetSKUandContext.

        ID of the related Product.

        :return: The product_id of this GetSKUandContext.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this GetSKUandContext.

        ID of the related Product.

        :param product_id: The product_id of this GetSKUandContext.
        :type product_id: int
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def product_is_visible(self):
        """Gets the product_is_visible of this GetSKUandContext.

        Defines if the product is visible or not.

        :return: The product_is_visible of this GetSKUandContext.
        :rtype: bool
        """
        return self._product_is_visible

    @product_is_visible.setter
    def product_is_visible(self, product_is_visible):
        """Sets the product_is_visible of this GetSKUandContext.

        Defines if the product is visible or not.

        :param product_is_visible: The product_is_visible of this GetSKUandContext.
        :type product_is_visible: bool
        """

        self._product_is_visible = product_is_visible

    @property
    def product_name(self):
        """Gets the product_name of this GetSKUandContext.

        Product Name.

        :return: The product_name of this GetSKUandContext.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this GetSKUandContext.

        Product Name.

        :param product_name: The product_name of this GetSKUandContext.
        :type product_name: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")

        self._product_name = product_name

    @property
    def product_ref_id(self):
        """Gets the product_ref_id of this GetSKUandContext.

        Reference ID of the related Product.

        :return: The product_ref_id of this GetSKUandContext.
        :rtype: str
        """
        return self._product_ref_id

    @product_ref_id.setter
    def product_ref_id(self, product_ref_id):
        """Sets the product_ref_id of this GetSKUandContext.

        Reference ID of the related Product.

        :param product_ref_id: The product_ref_id of this GetSKUandContext.
        :type product_ref_id: str
        """

        self._product_ref_id = product_ref_id

    @property
    def product_specifications(self):
        """Gets the product_specifications of this GetSKUandContext.

        Array with related Product Specifications.

        :return: The product_specifications of this GetSKUandContext.
        :rtype: List[ProductSpecification]
        """
        return self._product_specifications

    @product_specifications.setter
    def product_specifications(self, product_specifications):
        """Sets the product_specifications of this GetSKUandContext.

        Array with related Product Specifications.

        :param product_specifications: The product_specifications of this GetSKUandContext.
        :type product_specifications: List[ProductSpecification]
        """
        if product_specifications is None:
            raise ValueError("Invalid value for `product_specifications`, must not be `None`")

        self._product_specifications = product_specifications

    @property
    def real_dimension(self):
        """Gets the real_dimension of this GetSKUandContext.


        :return: The real_dimension of this GetSKUandContext.
        :rtype: RealDimension
        """
        return self._real_dimension

    @real_dimension.setter
    def real_dimension(self, real_dimension):
        """Sets the real_dimension of this GetSKUandContext.


        :param real_dimension: The real_dimension of this GetSKUandContext.
        :type real_dimension: RealDimension
        """
        if real_dimension is None:
            raise ValueError("Invalid value for `real_dimension`, must not be `None`")

        self._real_dimension = real_dimension

    @property
    def release_date(self):
        """Gets the release_date of this GetSKUandContext.

        Release date of the product.

        :return: The release_date of this GetSKUandContext.
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this GetSKUandContext.

        Release date of the product.

        :param release_date: The release_date of this GetSKUandContext.
        :type release_date: str
        """

        self._release_date = release_date

    @property
    def reward_value(self):
        """Gets the reward_value of this GetSKUandContext.

        Reward value related to the SKU.

        :return: The reward_value of this GetSKUandContext.
        :rtype: float
        """
        return self._reward_value

    @reward_value.setter
    def reward_value(self, reward_value):
        """Sets the reward_value of this GetSKUandContext.

        Reward value related to the SKU.

        :param reward_value: The reward_value of this GetSKUandContext.
        :type reward_value: float
        """
        if reward_value is None:
            raise ValueError("Invalid value for `reward_value`, must not be `None`")

        self._reward_value = reward_value

    @property
    def sales_channels(self):
        """Gets the sales_channels of this GetSKUandContext.

        Array with the ID of all the Sales Channels that are related to the product.

        :return: The sales_channels of this GetSKUandContext.
        :rtype: List[int]
        """
        return self._sales_channels

    @sales_channels.setter
    def sales_channels(self, sales_channels):
        """Sets the sales_channels of this GetSKUandContext.

        Array with the ID of all the Sales Channels that are related to the product.

        :param sales_channels: The sales_channels of this GetSKUandContext.
        :type sales_channels: List[int]
        """
        if sales_channels is None:
            raise ValueError("Invalid value for `sales_channels`, must not be `None`")

        self._sales_channels = sales_channels

    @property
    def services(self):
        """Gets the services of this GetSKUandContext.

        Array with Service IDs that are related to the SKU.

        :return: The services of this GetSKUandContext.
        :rtype: List[str]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this GetSKUandContext.

        Array with Service IDs that are related to the SKU.

        :param services: The services of this GetSKUandContext.
        :type services: List[str]
        """
        if services is None:
            raise ValueError("Invalid value for `services`, must not be `None`")

        self._services = services

    @property
    def show_if_not_available(self):
        """Gets the show_if_not_available of this GetSKUandContext.

        Defines if the product will be shown if it is not available.

        :return: The show_if_not_available of this GetSKUandContext.
        :rtype: bool
        """
        return self._show_if_not_available

    @show_if_not_available.setter
    def show_if_not_available(self, show_if_not_available):
        """Sets the show_if_not_available of this GetSKUandContext.

        Defines if the product will be shown if it is not available.

        :param show_if_not_available: The show_if_not_available of this GetSKUandContext.
        :type show_if_not_available: bool
        """

        self._show_if_not_available = show_if_not_available

    @property
    def sku_name(self):
        """Gets the sku_name of this GetSKUandContext.

        SKU Name.

        :return: The sku_name of this GetSKUandContext.
        :rtype: str
        """
        return self._sku_name

    @sku_name.setter
    def sku_name(self, sku_name):
        """Sets the sku_name of this GetSKUandContext.

        SKU Name.

        :param sku_name: The sku_name of this GetSKUandContext.
        :type sku_name: str
        """
        if sku_name is None:
            raise ValueError("Invalid value for `sku_name`, must not be `None`")

        self._sku_name = sku_name

    @property
    def sku_sellers(self):
        """Gets the sku_sellers of this GetSKUandContext.

        Array with SKU Sellers data.

        :return: The sku_sellers of this GetSKUandContext.
        :rtype: List[SkuSeller]
        """
        return self._sku_sellers

    @sku_sellers.setter
    def sku_sellers(self, sku_sellers):
        """Sets the sku_sellers of this GetSKUandContext.

        Array with SKU Sellers data.

        :param sku_sellers: The sku_sellers of this GetSKUandContext.
        :type sku_sellers: List[SkuSeller]
        """
        if sku_sellers is None:
            raise ValueError("Invalid value for `sku_sellers`, must not be `None`")

        self._sku_sellers = sku_sellers

    @property
    def sku_specifications(self):
        """Gets the sku_specifications of this GetSKUandContext.

        Array with related SKU Specifications.

        :return: The sku_specifications of this GetSKUandContext.
        :rtype: List[SkuSpecification]
        """
        return self._sku_specifications

    @sku_specifications.setter
    def sku_specifications(self, sku_specifications):
        """Sets the sku_specifications of this GetSKUandContext.

        Array with related SKU Specifications.

        :param sku_specifications: The sku_specifications of this GetSKUandContext.
        :type sku_specifications: List[SkuSpecification]
        """
        if sku_specifications is None:
            raise ValueError("Invalid value for `sku_specifications`, must not be `None`")

        self._sku_specifications = sku_specifications

    @property
    def tax_code(self):
        """Gets the tax_code of this GetSKUandContext.

        SKU Tax Code.

        :return: The tax_code of this GetSKUandContext.
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this GetSKUandContext.

        SKU Tax Code.

        :param tax_code: The tax_code of this GetSKUandContext.
        :type tax_code: str
        """

        self._tax_code = tax_code

    @property
    def unit_multiplier(self):
        """Gets the unit_multiplier of this GetSKUandContext.

        This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.

        :return: The unit_multiplier of this GetSKUandContext.
        :rtype: float
        """
        return self._unit_multiplier

    @unit_multiplier.setter
    def unit_multiplier(self, unit_multiplier):
        """Sets the unit_multiplier of this GetSKUandContext.

        This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.

        :param unit_multiplier: The unit_multiplier of this GetSKUandContext.
        :type unit_multiplier: float
        """
        if unit_multiplier is None:
            raise ValueError("Invalid value for `unit_multiplier`, must not be `None`")

        self._unit_multiplier = unit_multiplier
