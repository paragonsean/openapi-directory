# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RequestBody9(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, quantity: int=None, stock_keeping_unit_id: int=None, stock_keeping_unit_parent: int=None, unit_price: float=None):
        """RequestBody9 - a model defined in OpenAPI

        :param quantity: The quantity of this RequestBody9.
        :param stock_keeping_unit_id: The stock_keeping_unit_id of this RequestBody9.
        :param stock_keeping_unit_parent: The stock_keeping_unit_parent of this RequestBody9.
        :param unit_price: The unit_price of this RequestBody9.
        """
        self.openapi_types = {
            'quantity': int,
            'stock_keeping_unit_id': int,
            'stock_keeping_unit_parent': int,
            'unit_price': float
        }

        self.attribute_map = {
            'quantity': 'Quantity',
            'stock_keeping_unit_id': 'StockKeepingUnitId',
            'stock_keeping_unit_parent': 'StockKeepingUnitParent',
            'unit_price': 'UnitPrice'
        }

        self._quantity = quantity
        self._stock_keeping_unit_id = stock_keeping_unit_id
        self._stock_keeping_unit_parent = stock_keeping_unit_parent
        self._unit_price = unit_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestBody9':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request_body_9 of this RequestBody9.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quantity(self):
        """Gets the quantity of this RequestBody9.

        Component quantity.

        :return: The quantity of this RequestBody9.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this RequestBody9.

        Component quantity.

        :param quantity: The quantity of this RequestBody9.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def stock_keeping_unit_id(self):
        """Gets the stock_keeping_unit_id of this RequestBody9.

        Component SKU ID.

        :return: The stock_keeping_unit_id of this RequestBody9.
        :rtype: int
        """
        return self._stock_keeping_unit_id

    @stock_keeping_unit_id.setter
    def stock_keeping_unit_id(self, stock_keeping_unit_id):
        """Sets the stock_keeping_unit_id of this RequestBody9.

        Component SKU ID.

        :param stock_keeping_unit_id: The stock_keeping_unit_id of this RequestBody9.
        :type stock_keeping_unit_id: int
        """
        if stock_keeping_unit_id is None:
            raise ValueError("Invalid value for `stock_keeping_unit_id`, must not be `None`")

        self._stock_keeping_unit_id = stock_keeping_unit_id

    @property
    def stock_keeping_unit_parent(self):
        """Gets the stock_keeping_unit_parent of this RequestBody9.

        SKU ID of the SKU Kit.

        :return: The stock_keeping_unit_parent of this RequestBody9.
        :rtype: int
        """
        return self._stock_keeping_unit_parent

    @stock_keeping_unit_parent.setter
    def stock_keeping_unit_parent(self, stock_keeping_unit_parent):
        """Sets the stock_keeping_unit_parent of this RequestBody9.

        SKU ID of the SKU Kit.

        :param stock_keeping_unit_parent: The stock_keeping_unit_parent of this RequestBody9.
        :type stock_keeping_unit_parent: int
        """
        if stock_keeping_unit_parent is None:
            raise ValueError("Invalid value for `stock_keeping_unit_parent`, must not be `None`")

        self._stock_keeping_unit_parent = stock_keeping_unit_parent

    @property
    def unit_price(self):
        """Gets the unit_price of this RequestBody9.

        Component price per unit.

        :return: The unit_price of this RequestBody9.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this RequestBody9.

        Component price per unit.

        :param unit_price: The unit_price of this RequestBody9.
        :type unit_price: float
        """
        if unit_price is None:
            raise ValueError("Invalid value for `unit_price`, must not be `None`")

        self._unit_price = unit_price
