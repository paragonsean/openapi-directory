# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiCatalogPvtSubcollectionPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collection_id: int=None, name: str=None, pre_sale: bool=None, release: bool=None, type: str=None):
        """ApiCatalogPvtSubcollectionPostRequest - a model defined in OpenAPI

        :param collection_id: The collection_id of this ApiCatalogPvtSubcollectionPostRequest.
        :param name: The name of this ApiCatalogPvtSubcollectionPostRequest.
        :param pre_sale: The pre_sale of this ApiCatalogPvtSubcollectionPostRequest.
        :param release: The release of this ApiCatalogPvtSubcollectionPostRequest.
        :param type: The type of this ApiCatalogPvtSubcollectionPostRequest.
        """
        self.openapi_types = {
            'collection_id': int,
            'name': str,
            'pre_sale': bool,
            'release': bool,
            'type': str
        }

        self.attribute_map = {
            'collection_id': 'CollectionId',
            'name': 'Name',
            'pre_sale': 'PreSale',
            'release': 'Release',
            'type': 'Type'
        }

        self._collection_id = collection_id
        self._name = name
        self._pre_sale = pre_sale
        self._release = release
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiCatalogPvtSubcollectionPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _api_catalog_pvt_subcollection_post_request of this ApiCatalogPvtSubcollectionPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collection_id(self):
        """Gets the collection_id of this ApiCatalogPvtSubcollectionPostRequest.

        SubCollection ID.

        :return: The collection_id of this ApiCatalogPvtSubcollectionPostRequest.
        :rtype: int
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this ApiCatalogPvtSubcollectionPostRequest.

        SubCollection ID.

        :param collection_id: The collection_id of this ApiCatalogPvtSubcollectionPostRequest.
        :type collection_id: int
        """
        if collection_id is None:
            raise ValueError("Invalid value for `collection_id`, must not be `None`")

        self._collection_id = collection_id

    @property
    def name(self):
        """Gets the name of this ApiCatalogPvtSubcollectionPostRequest.

        SubCollection Name.

        :return: The name of this ApiCatalogPvtSubcollectionPostRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiCatalogPvtSubcollectionPostRequest.

        SubCollection Name.

        :param name: The name of this ApiCatalogPvtSubcollectionPostRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def pre_sale(self):
        """Gets the pre_sale of this ApiCatalogPvtSubcollectionPostRequest.

        Defines PreSale date.

        :return: The pre_sale of this ApiCatalogPvtSubcollectionPostRequest.
        :rtype: bool
        """
        return self._pre_sale

    @pre_sale.setter
    def pre_sale(self, pre_sale):
        """Sets the pre_sale of this ApiCatalogPvtSubcollectionPostRequest.

        Defines PreSale date.

        :param pre_sale: The pre_sale of this ApiCatalogPvtSubcollectionPostRequest.
        :type pre_sale: bool
        """
        if pre_sale is None:
            raise ValueError("Invalid value for `pre_sale`, must not be `None`")

        self._pre_sale = pre_sale

    @property
    def release(self):
        """Gets the release of this ApiCatalogPvtSubcollectionPostRequest.

        Defines Release date.

        :return: The release of this ApiCatalogPvtSubcollectionPostRequest.
        :rtype: bool
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this ApiCatalogPvtSubcollectionPostRequest.

        Defines Release date.

        :param release: The release of this ApiCatalogPvtSubcollectionPostRequest.
        :type release: bool
        """
        if release is None:
            raise ValueError("Invalid value for `release`, must not be `None`")

        self._release = release

    @property
    def type(self):
        """Gets the type of this ApiCatalogPvtSubcollectionPostRequest.

        Either `“Exclusive”` (all the products contained in it will not be used) or `“Inclusive”` (all the products contained in it will be used).

        :return: The type of this ApiCatalogPvtSubcollectionPostRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiCatalogPvtSubcollectionPostRequest.

        Either `“Exclusive”` (all the products contained in it will not be used) or `“Inclusive”` (all the products contained in it will be used).

        :param type: The type of this ApiCatalogPvtSubcollectionPostRequest.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
