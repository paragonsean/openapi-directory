# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alternate_ids import AlternateIds
from openapi_server.models.attachment import Attachment
from openapi_server.models.dimension import Dimension
from openapi_server.models.image import Image
from openapi_server.models.product_specification import ProductSpecification
from openapi_server.models.real_dimension import RealDimension
from openapi_server.models.sku_seller import SkuSeller
from openapi_server.models.sku_specification import SkuSpecification
from openapi_server import util


class GetSKUAltID(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_id_values: List[str]=None, alternate_ids: AlternateIds=None, attachments: List[Attachment]=None, brand_id: str=None, brand_name: str=None, csc_identification: str=None, categories: List[str]=None, categories_full_path: List[str]=None, collections: List[str]=None, commercial_condition_id: int=None, complement_name: str=None, detail_url: str=None, dimension: Dimension=None, estimated_date_arrival: str=None, id: int=None, image_url: str=None, images: List[Image]=None, information_source: str=None, is_active: bool=None, is_direct_category_active: bool=None, is_gift_card_recharge: bool=None, is_inventoried: bool=None, is_kit: bool=None, is_product_active: bool=None, is_transported: bool=None, key_words: str=None, kit_items: List[str]=None, manufacturer_code: str=None, measurement_unit: str=None, modal_type: str=None, name_complete: str=None, positions_in_clusters: Dict[str, Dict[str, int]]=None, product_categories: Dict[str, Dict[str, str]]=None, product_category_ids: str=None, product_cluster_highlights: Dict[str, Dict[str, str]]=None, product_cluster_names: Dict[str, Dict[str, str]]=None, product_clusters_ids: str=None, product_description: str=None, product_final_score: int=None, product_global_category_id: int=None, product_id: int=None, product_is_visible: bool=None, product_name: str=None, product_ref_id: str=None, product_specifications: List[ProductSpecification]=None, real_dimension: RealDimension=None, release_date: str=None, reward_value: float=None, sales_channels: List[int]=None, services: List[str]=None, show_if_not_available: bool=None, sku_name: str=None, sku_sellers: List[SkuSeller]=None, sku_specifications: List[SkuSpecification]=None, tax_code: str=None, unit_multiplier: float=None):
        """GetSKUAltID - a model defined in OpenAPI

        :param alternate_id_values: The alternate_id_values of this GetSKUAltID.
        :param alternate_ids: The alternate_ids of this GetSKUAltID.
        :param attachments: The attachments of this GetSKUAltID.
        :param brand_id: The brand_id of this GetSKUAltID.
        :param brand_name: The brand_name of this GetSKUAltID.
        :param csc_identification: The csc_identification of this GetSKUAltID.
        :param categories: The categories of this GetSKUAltID.
        :param categories_full_path: The categories_full_path of this GetSKUAltID.
        :param collections: The collections of this GetSKUAltID.
        :param commercial_condition_id: The commercial_condition_id of this GetSKUAltID.
        :param complement_name: The complement_name of this GetSKUAltID.
        :param detail_url: The detail_url of this GetSKUAltID.
        :param dimension: The dimension of this GetSKUAltID.
        :param estimated_date_arrival: The estimated_date_arrival of this GetSKUAltID.
        :param id: The id of this GetSKUAltID.
        :param image_url: The image_url of this GetSKUAltID.
        :param images: The images of this GetSKUAltID.
        :param information_source: The information_source of this GetSKUAltID.
        :param is_active: The is_active of this GetSKUAltID.
        :param is_direct_category_active: The is_direct_category_active of this GetSKUAltID.
        :param is_gift_card_recharge: The is_gift_card_recharge of this GetSKUAltID.
        :param is_inventoried: The is_inventoried of this GetSKUAltID.
        :param is_kit: The is_kit of this GetSKUAltID.
        :param is_product_active: The is_product_active of this GetSKUAltID.
        :param is_transported: The is_transported of this GetSKUAltID.
        :param key_words: The key_words of this GetSKUAltID.
        :param kit_items: The kit_items of this GetSKUAltID.
        :param manufacturer_code: The manufacturer_code of this GetSKUAltID.
        :param measurement_unit: The measurement_unit of this GetSKUAltID.
        :param modal_type: The modal_type of this GetSKUAltID.
        :param name_complete: The name_complete of this GetSKUAltID.
        :param positions_in_clusters: The positions_in_clusters of this GetSKUAltID.
        :param product_categories: The product_categories of this GetSKUAltID.
        :param product_category_ids: The product_category_ids of this GetSKUAltID.
        :param product_cluster_highlights: The product_cluster_highlights of this GetSKUAltID.
        :param product_cluster_names: The product_cluster_names of this GetSKUAltID.
        :param product_clusters_ids: The product_clusters_ids of this GetSKUAltID.
        :param product_description: The product_description of this GetSKUAltID.
        :param product_final_score: The product_final_score of this GetSKUAltID.
        :param product_global_category_id: The product_global_category_id of this GetSKUAltID.
        :param product_id: The product_id of this GetSKUAltID.
        :param product_is_visible: The product_is_visible of this GetSKUAltID.
        :param product_name: The product_name of this GetSKUAltID.
        :param product_ref_id: The product_ref_id of this GetSKUAltID.
        :param product_specifications: The product_specifications of this GetSKUAltID.
        :param real_dimension: The real_dimension of this GetSKUAltID.
        :param release_date: The release_date of this GetSKUAltID.
        :param reward_value: The reward_value of this GetSKUAltID.
        :param sales_channels: The sales_channels of this GetSKUAltID.
        :param services: The services of this GetSKUAltID.
        :param show_if_not_available: The show_if_not_available of this GetSKUAltID.
        :param sku_name: The sku_name of this GetSKUAltID.
        :param sku_sellers: The sku_sellers of this GetSKUAltID.
        :param sku_specifications: The sku_specifications of this GetSKUAltID.
        :param tax_code: The tax_code of this GetSKUAltID.
        :param unit_multiplier: The unit_multiplier of this GetSKUAltID.
        """
        self.openapi_types = {
            'alternate_id_values': List[str],
            'alternate_ids': AlternateIds,
            'attachments': List[Attachment],
            'brand_id': str,
            'brand_name': str,
            'csc_identification': str,
            'categories': List[str],
            'categories_full_path': List[str],
            'collections': List[str],
            'commercial_condition_id': int,
            'complement_name': str,
            'detail_url': str,
            'dimension': Dimension,
            'estimated_date_arrival': str,
            'id': int,
            'image_url': str,
            'images': List[Image],
            'information_source': str,
            'is_active': bool,
            'is_direct_category_active': bool,
            'is_gift_card_recharge': bool,
            'is_inventoried': bool,
            'is_kit': bool,
            'is_product_active': bool,
            'is_transported': bool,
            'key_words': str,
            'kit_items': List[str],
            'manufacturer_code': str,
            'measurement_unit': str,
            'modal_type': str,
            'name_complete': str,
            'positions_in_clusters': Dict[str, Dict[str, int]],
            'product_categories': Dict[str, Dict[str, str]],
            'product_category_ids': str,
            'product_cluster_highlights': Dict[str, Dict[str, str]],
            'product_cluster_names': Dict[str, Dict[str, str]],
            'product_clusters_ids': str,
            'product_description': str,
            'product_final_score': int,
            'product_global_category_id': int,
            'product_id': int,
            'product_is_visible': bool,
            'product_name': str,
            'product_ref_id': str,
            'product_specifications': List[ProductSpecification],
            'real_dimension': RealDimension,
            'release_date': str,
            'reward_value': float,
            'sales_channels': List[int],
            'services': List[str],
            'show_if_not_available': bool,
            'sku_name': str,
            'sku_sellers': List[SkuSeller],
            'sku_specifications': List[SkuSpecification],
            'tax_code': str,
            'unit_multiplier': float
        }

        self.attribute_map = {
            'alternate_id_values': 'AlternateIdValues',
            'alternate_ids': 'AlternateIds',
            'attachments': 'Attachments',
            'brand_id': 'BrandId',
            'brand_name': 'BrandName',
            'csc_identification': 'CSCIdentification',
            'categories': 'Categories',
            'categories_full_path': 'CategoriesFullPath',
            'collections': 'Collections',
            'commercial_condition_id': 'CommercialConditionId',
            'complement_name': 'ComplementName',
            'detail_url': 'DetailUrl',
            'dimension': 'Dimension',
            'estimated_date_arrival': 'EstimatedDateArrival',
            'id': 'Id',
            'image_url': 'ImageUrl',
            'images': 'Images',
            'information_source': 'InformationSource',
            'is_active': 'IsActive',
            'is_direct_category_active': 'IsDirectCategoryActive',
            'is_gift_card_recharge': 'IsGiftCardRecharge',
            'is_inventoried': 'IsInventoried',
            'is_kit': 'IsKit',
            'is_product_active': 'IsProductActive',
            'is_transported': 'IsTransported',
            'key_words': 'KeyWords',
            'kit_items': 'KitItems',
            'manufacturer_code': 'ManufacturerCode',
            'measurement_unit': 'MeasurementUnit',
            'modal_type': 'ModalType',
            'name_complete': 'NameComplete',
            'positions_in_clusters': 'PositionsInClusters',
            'product_categories': 'ProductCategories',
            'product_category_ids': 'ProductCategoryIds',
            'product_cluster_highlights': 'ProductClusterHighlights',
            'product_cluster_names': 'ProductClusterNames',
            'product_clusters_ids': 'ProductClustersIds',
            'product_description': 'ProductDescription',
            'product_final_score': 'ProductFinalScore',
            'product_global_category_id': 'ProductGlobalCategoryId',
            'product_id': 'ProductId',
            'product_is_visible': 'ProductIsVisible',
            'product_name': 'ProductName',
            'product_ref_id': 'ProductRefId',
            'product_specifications': 'ProductSpecifications',
            'real_dimension': 'RealDimension',
            'release_date': 'ReleaseDate',
            'reward_value': 'RewardValue',
            'sales_channels': 'SalesChannels',
            'services': 'Services',
            'show_if_not_available': 'ShowIfNotAvailable',
            'sku_name': 'SkuName',
            'sku_sellers': 'SkuSellers',
            'sku_specifications': 'SkuSpecifications',
            'tax_code': 'TaxCode',
            'unit_multiplier': 'UnitMultiplier'
        }

        self._alternate_id_values = alternate_id_values
        self._alternate_ids = alternate_ids
        self._attachments = attachments
        self._brand_id = brand_id
        self._brand_name = brand_name
        self._csc_identification = csc_identification
        self._categories = categories
        self._categories_full_path = categories_full_path
        self._collections = collections
        self._commercial_condition_id = commercial_condition_id
        self._complement_name = complement_name
        self._detail_url = detail_url
        self._dimension = dimension
        self._estimated_date_arrival = estimated_date_arrival
        self._id = id
        self._image_url = image_url
        self._images = images
        self._information_source = information_source
        self._is_active = is_active
        self._is_direct_category_active = is_direct_category_active
        self._is_gift_card_recharge = is_gift_card_recharge
        self._is_inventoried = is_inventoried
        self._is_kit = is_kit
        self._is_product_active = is_product_active
        self._is_transported = is_transported
        self._key_words = key_words
        self._kit_items = kit_items
        self._manufacturer_code = manufacturer_code
        self._measurement_unit = measurement_unit
        self._modal_type = modal_type
        self._name_complete = name_complete
        self._positions_in_clusters = positions_in_clusters
        self._product_categories = product_categories
        self._product_category_ids = product_category_ids
        self._product_cluster_highlights = product_cluster_highlights
        self._product_cluster_names = product_cluster_names
        self._product_clusters_ids = product_clusters_ids
        self._product_description = product_description
        self._product_final_score = product_final_score
        self._product_global_category_id = product_global_category_id
        self._product_id = product_id
        self._product_is_visible = product_is_visible
        self._product_name = product_name
        self._product_ref_id = product_ref_id
        self._product_specifications = product_specifications
        self._real_dimension = real_dimension
        self._release_date = release_date
        self._reward_value = reward_value
        self._sales_channels = sales_channels
        self._services = services
        self._show_if_not_available = show_if_not_available
        self._sku_name = sku_name
        self._sku_sellers = sku_sellers
        self._sku_specifications = sku_specifications
        self._tax_code = tax_code
        self._unit_multiplier = unit_multiplier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSKUAltID':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetSKUAltID of this GetSKUAltID.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_id_values(self):
        """Gets the alternate_id_values of this GetSKUAltID.

        Array with values of alternative SKU IDs.

        :return: The alternate_id_values of this GetSKUAltID.
        :rtype: List[str]
        """
        return self._alternate_id_values

    @alternate_id_values.setter
    def alternate_id_values(self, alternate_id_values):
        """Sets the alternate_id_values of this GetSKUAltID.

        Array with values of alternative SKU IDs.

        :param alternate_id_values: The alternate_id_values of this GetSKUAltID.
        :type alternate_id_values: List[str]
        """
        if alternate_id_values is None:
            raise ValueError("Invalid value for `alternate_id_values`, must not be `None`")

        self._alternate_id_values = alternate_id_values

    @property
    def alternate_ids(self):
        """Gets the alternate_ids of this GetSKUAltID.


        :return: The alternate_ids of this GetSKUAltID.
        :rtype: AlternateIds
        """
        return self._alternate_ids

    @alternate_ids.setter
    def alternate_ids(self, alternate_ids):
        """Sets the alternate_ids of this GetSKUAltID.


        :param alternate_ids: The alternate_ids of this GetSKUAltID.
        :type alternate_ids: AlternateIds
        """
        if alternate_ids is None:
            raise ValueError("Invalid value for `alternate_ids`, must not be `None`")

        self._alternate_ids = alternate_ids

    @property
    def attachments(self):
        """Gets the attachments of this GetSKUAltID.

        Array with Attachments ID that are related to the SKU.

        :return: The attachments of this GetSKUAltID.
        :rtype: List[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this GetSKUAltID.

        Array with Attachments ID that are related to the SKU.

        :param attachments: The attachments of this GetSKUAltID.
        :type attachments: List[Attachment]
        """
        if attachments is None:
            raise ValueError("Invalid value for `attachments`, must not be `None`")

        self._attachments = attachments

    @property
    def brand_id(self):
        """Gets the brand_id of this GetSKUAltID.

        Brand ID.

        :return: The brand_id of this GetSKUAltID.
        :rtype: str
        """
        return self._brand_id

    @brand_id.setter
    def brand_id(self, brand_id):
        """Sets the brand_id of this GetSKUAltID.

        Brand ID.

        :param brand_id: The brand_id of this GetSKUAltID.
        :type brand_id: str
        """
        if brand_id is None:
            raise ValueError("Invalid value for `brand_id`, must not be `None`")

        self._brand_id = brand_id

    @property
    def brand_name(self):
        """Gets the brand_name of this GetSKUAltID.

        Brand Name.

        :return: The brand_name of this GetSKUAltID.
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this GetSKUAltID.

        Brand Name.

        :param brand_name: The brand_name of this GetSKUAltID.
        :type brand_name: str
        """
        if brand_name is None:
            raise ValueError("Invalid value for `brand_name`, must not be `None`")

        self._brand_name = brand_name

    @property
    def csc_identification(self):
        """Gets the csc_identification of this GetSKUAltID.

        SKU Seller Identification.

        :return: The csc_identification of this GetSKUAltID.
        :rtype: str
        """
        return self._csc_identification

    @csc_identification.setter
    def csc_identification(self, csc_identification):
        """Sets the csc_identification of this GetSKUAltID.

        SKU Seller Identification.

        :param csc_identification: The csc_identification of this GetSKUAltID.
        :type csc_identification: str
        """
        if csc_identification is None:
            raise ValueError("Invalid value for `csc_identification`, must not be `None`")

        self._csc_identification = csc_identification

    @property
    def categories(self):
        """Gets the categories of this GetSKUAltID.

        Categories of the related product.

        :return: The categories of this GetSKUAltID.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this GetSKUAltID.

        Categories of the related product.

        :param categories: The categories of this GetSKUAltID.
        :type categories: List[str]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")

        self._categories = categories

    @property
    def categories_full_path(self):
        """Gets the categories_full_path of this GetSKUAltID.

        Path of Categories of the related product.

        :return: The categories_full_path of this GetSKUAltID.
        :rtype: List[str]
        """
        return self._categories_full_path

    @categories_full_path.setter
    def categories_full_path(self, categories_full_path):
        """Sets the categories_full_path of this GetSKUAltID.

        Path of Categories of the related product.

        :param categories_full_path: The categories_full_path of this GetSKUAltID.
        :type categories_full_path: List[str]
        """

        self._categories_full_path = categories_full_path

    @property
    def collections(self):
        """Gets the collections of this GetSKUAltID.

        Array with Collections IDs that are related to the Product.

        :return: The collections of this GetSKUAltID.
        :rtype: List[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this GetSKUAltID.

        Array with Collections IDs that are related to the Product.

        :param collections: The collections of this GetSKUAltID.
        :type collections: List[str]
        """
        if collections is None:
            raise ValueError("Invalid value for `collections`, must not be `None`")

        self._collections = collections

    @property
    def commercial_condition_id(self):
        """Gets the commercial_condition_id of this GetSKUAltID.

        SKU Commercial Condition ID.

        :return: The commercial_condition_id of this GetSKUAltID.
        :rtype: int
        """
        return self._commercial_condition_id

    @commercial_condition_id.setter
    def commercial_condition_id(self, commercial_condition_id):
        """Sets the commercial_condition_id of this GetSKUAltID.

        SKU Commercial Condition ID.

        :param commercial_condition_id: The commercial_condition_id of this GetSKUAltID.
        :type commercial_condition_id: int
        """
        if commercial_condition_id is None:
            raise ValueError("Invalid value for `commercial_condition_id`, must not be `None`")

        self._commercial_condition_id = commercial_condition_id

    @property
    def complement_name(self):
        """Gets the complement_name of this GetSKUAltID.

        Product Complement Name.

        :return: The complement_name of this GetSKUAltID.
        :rtype: str
        """
        return self._complement_name

    @complement_name.setter
    def complement_name(self, complement_name):
        """Sets the complement_name of this GetSKUAltID.

        Product Complement Name.

        :param complement_name: The complement_name of this GetSKUAltID.
        :type complement_name: str
        """

        self._complement_name = complement_name

    @property
    def detail_url(self):
        """Gets the detail_url of this GetSKUAltID.

        Product slug.

        :return: The detail_url of this GetSKUAltID.
        :rtype: str
        """
        return self._detail_url

    @detail_url.setter
    def detail_url(self, detail_url):
        """Sets the detail_url of this GetSKUAltID.

        Product slug.

        :param detail_url: The detail_url of this GetSKUAltID.
        :type detail_url: str
        """
        if detail_url is None:
            raise ValueError("Invalid value for `detail_url`, must not be `None`")

        self._detail_url = detail_url

    @property
    def dimension(self):
        """Gets the dimension of this GetSKUAltID.


        :return: The dimension of this GetSKUAltID.
        :rtype: Dimension
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this GetSKUAltID.


        :param dimension: The dimension of this GetSKUAltID.
        :type dimension: Dimension
        """
        if dimension is None:
            raise ValueError("Invalid value for `dimension`, must not be `None`")

        self._dimension = dimension

    @property
    def estimated_date_arrival(self):
        """Gets the estimated_date_arrival of this GetSKUAltID.

        SKU estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, when the product is on pre-sale. You must take into consideration both the launch date and the freight calculation for the arrival date.

        :return: The estimated_date_arrival of this GetSKUAltID.
        :rtype: str
        """
        return self._estimated_date_arrival

    @estimated_date_arrival.setter
    def estimated_date_arrival(self, estimated_date_arrival):
        """Sets the estimated_date_arrival of this GetSKUAltID.

        SKU estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format, when the product is on pre-sale. You must take into consideration both the launch date and the freight calculation for the arrival date.

        :param estimated_date_arrival: The estimated_date_arrival of this GetSKUAltID.
        :type estimated_date_arrival: str
        """
        if estimated_date_arrival is None:
            raise ValueError("Invalid value for `estimated_date_arrival`, must not be `None`")

        self._estimated_date_arrival = estimated_date_arrival

    @property
    def id(self):
        """Gets the id of this GetSKUAltID.

        SKU ID.

        :return: The id of this GetSKUAltID.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetSKUAltID.

        SKU ID.

        :param id: The id of this GetSKUAltID.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this GetSKUAltID.

        SKU image URL.

        :return: The image_url of this GetSKUAltID.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this GetSKUAltID.

        SKU image URL.

        :param image_url: The image_url of this GetSKUAltID.
        :type image_url: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")

        self._image_url = image_url

    @property
    def images(self):
        """Gets the images of this GetSKUAltID.

        Array of objects with SKU image details.

        :return: The images of this GetSKUAltID.
        :rtype: List[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this GetSKUAltID.

        Array of objects with SKU image details.

        :param images: The images of this GetSKUAltID.
        :type images: List[Image]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def information_source(self):
        """Gets the information_source of this GetSKUAltID.

        Information Source.

        :return: The information_source of this GetSKUAltID.
        :rtype: str
        """
        return self._information_source

    @information_source.setter
    def information_source(self, information_source):
        """Sets the information_source of this GetSKUAltID.

        Information Source.

        :param information_source: The information_source of this GetSKUAltID.
        :type information_source: str
        """
        if information_source is None:
            raise ValueError("Invalid value for `information_source`, must not be `None`")

        self._information_source = information_source

    @property
    def is_active(self):
        """Gets the is_active of this GetSKUAltID.

        Defines if the SKU is active or not.

        :return: The is_active of this GetSKUAltID.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this GetSKUAltID.

        Defines if the SKU is active or not.

        :param is_active: The is_active of this GetSKUAltID.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def is_direct_category_active(self):
        """Gets the is_direct_category_active of this GetSKUAltID.

        Indicates if the direct Product Category is active or not.

        :return: The is_direct_category_active of this GetSKUAltID.
        :rtype: bool
        """
        return self._is_direct_category_active

    @is_direct_category_active.setter
    def is_direct_category_active(self, is_direct_category_active):
        """Sets the is_direct_category_active of this GetSKUAltID.

        Indicates if the direct Product Category is active or not.

        :param is_direct_category_active: The is_direct_category_active of this GetSKUAltID.
        :type is_direct_category_active: bool
        """

        self._is_direct_category_active = is_direct_category_active

    @property
    def is_gift_card_recharge(self):
        """Gets the is_gift_card_recharge of this GetSKUAltID.

        Defines if the purchase of the SKU will generate reward value for the customer.

        :return: The is_gift_card_recharge of this GetSKUAltID.
        :rtype: bool
        """
        return self._is_gift_card_recharge

    @is_gift_card_recharge.setter
    def is_gift_card_recharge(self, is_gift_card_recharge):
        """Sets the is_gift_card_recharge of this GetSKUAltID.

        Defines if the purchase of the SKU will generate reward value for the customer.

        :param is_gift_card_recharge: The is_gift_card_recharge of this GetSKUAltID.
        :type is_gift_card_recharge: bool
        """
        if is_gift_card_recharge is None:
            raise ValueError("Invalid value for `is_gift_card_recharge`, must not be `None`")

        self._is_gift_card_recharge = is_gift_card_recharge

    @property
    def is_inventoried(self):
        """Gets the is_inventoried of this GetSKUAltID.


        :return: The is_inventoried of this GetSKUAltID.
        :rtype: bool
        """
        return self._is_inventoried

    @is_inventoried.setter
    def is_inventoried(self, is_inventoried):
        """Sets the is_inventoried of this GetSKUAltID.


        :param is_inventoried: The is_inventoried of this GetSKUAltID.
        :type is_inventoried: bool
        """
        if is_inventoried is None:
            raise ValueError("Invalid value for `is_inventoried`, must not be `None`")

        self._is_inventoried = is_inventoried

    @property
    def is_kit(self):
        """Gets the is_kit of this GetSKUAltID.

        Defines if the SKU is part of a bundle.

        :return: The is_kit of this GetSKUAltID.
        :rtype: bool
        """
        return self._is_kit

    @is_kit.setter
    def is_kit(self, is_kit):
        """Sets the is_kit of this GetSKUAltID.

        Defines if the SKU is part of a bundle.

        :param is_kit: The is_kit of this GetSKUAltID.
        :type is_kit: bool
        """
        if is_kit is None:
            raise ValueError("Invalid value for `is_kit`, must not be `None`")

        self._is_kit = is_kit

    @property
    def is_product_active(self):
        """Gets the is_product_active of this GetSKUAltID.

        Defines if the product is active or not.

        :return: The is_product_active of this GetSKUAltID.
        :rtype: bool
        """
        return self._is_product_active

    @is_product_active.setter
    def is_product_active(self, is_product_active):
        """Sets the is_product_active of this GetSKUAltID.

        Defines if the product is active or not.

        :param is_product_active: The is_product_active of this GetSKUAltID.
        :type is_product_active: bool
        """

        self._is_product_active = is_product_active

    @property
    def is_transported(self):
        """Gets the is_transported of this GetSKUAltID.


        :return: The is_transported of this GetSKUAltID.
        :rtype: bool
        """
        return self._is_transported

    @is_transported.setter
    def is_transported(self, is_transported):
        """Sets the is_transported of this GetSKUAltID.


        :param is_transported: The is_transported of this GetSKUAltID.
        :type is_transported: bool
        """
        if is_transported is None:
            raise ValueError("Invalid value for `is_transported`, must not be `None`")

        self._is_transported = is_transported

    @property
    def key_words(self):
        """Gets the key_words of this GetSKUAltID.

        Keywords related to the product.

        :return: The key_words of this GetSKUAltID.
        :rtype: str
        """
        return self._key_words

    @key_words.setter
    def key_words(self, key_words):
        """Sets the key_words of this GetSKUAltID.

        Keywords related to the product.

        :param key_words: The key_words of this GetSKUAltID.
        :type key_words: str
        """

        self._key_words = key_words

    @property
    def kit_items(self):
        """Gets the kit_items of this GetSKUAltID.

        Array with SKU IDs of bundle components.

        :return: The kit_items of this GetSKUAltID.
        :rtype: List[str]
        """
        return self._kit_items

    @kit_items.setter
    def kit_items(self, kit_items):
        """Sets the kit_items of this GetSKUAltID.

        Array with SKU IDs of bundle components.

        :param kit_items: The kit_items of this GetSKUAltID.
        :type kit_items: List[str]
        """
        if kit_items is None:
            raise ValueError("Invalid value for `kit_items`, must not be `None`")

        self._kit_items = kit_items

    @property
    def manufacturer_code(self):
        """Gets the manufacturer_code of this GetSKUAltID.

        Product Supplier ID.

        :return: The manufacturer_code of this GetSKUAltID.
        :rtype: str
        """
        return self._manufacturer_code

    @manufacturer_code.setter
    def manufacturer_code(self, manufacturer_code):
        """Sets the manufacturer_code of this GetSKUAltID.

        Product Supplier ID.

        :param manufacturer_code: The manufacturer_code of this GetSKUAltID.
        :type manufacturer_code: str
        """
        if manufacturer_code is None:
            raise ValueError("Invalid value for `manufacturer_code`, must not be `None`")

        self._manufacturer_code = manufacturer_code

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this GetSKUAltID.

        Measurement unit.

        :return: The measurement_unit of this GetSKUAltID.
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this GetSKUAltID.

        Measurement unit.

        :param measurement_unit: The measurement_unit of this GetSKUAltID.
        :type measurement_unit: str
        """
        if measurement_unit is None:
            raise ValueError("Invalid value for `measurement_unit`, must not be `None`")

        self._measurement_unit = measurement_unit

    @property
    def modal_type(self):
        """Gets the modal_type of this GetSKUAltID.

        Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. \"Chemicals\" or \"Refrigerated products\"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).

        :return: The modal_type of this GetSKUAltID.
        :rtype: str
        """
        return self._modal_type

    @modal_type.setter
    def modal_type(self, modal_type):
        """Sets the modal_type of this GetSKUAltID.

        Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. \"Chemicals\" or \"Refrigerated products\"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).

        :param modal_type: The modal_type of this GetSKUAltID.
        :type modal_type: str
        """
        if modal_type is None:
            raise ValueError("Invalid value for `modal_type`, must not be `None`")

        self._modal_type = modal_type

    @property
    def name_complete(self):
        """Gets the name_complete of this GetSKUAltID.

        Product Name and SKU Name combined.

        :return: The name_complete of this GetSKUAltID.
        :rtype: str
        """
        return self._name_complete

    @name_complete.setter
    def name_complete(self, name_complete):
        """Sets the name_complete of this GetSKUAltID.

        Product Name and SKU Name combined.

        :param name_complete: The name_complete of this GetSKUAltID.
        :type name_complete: str
        """
        if name_complete is None:
            raise ValueError("Invalid value for `name_complete`, must not be `None`")

        self._name_complete = name_complete

    @property
    def positions_in_clusters(self):
        """Gets the positions_in_clusters of this GetSKUAltID.

        Product Clusters position in each Cluster. Structure: \"{Product Cluster ID}\": {Position}.  `{Product Cluster ID}` is a string, while `{Position}` is an integer.

        :return: The positions_in_clusters of this GetSKUAltID.
        :rtype: Dict[str, Dict[str, int]]
        """
        return self._positions_in_clusters

    @positions_in_clusters.setter
    def positions_in_clusters(self, positions_in_clusters):
        """Sets the positions_in_clusters of this GetSKUAltID.

        Product Clusters position in each Cluster. Structure: \"{Product Cluster ID}\": {Position}.  `{Product Cluster ID}` is a string, while `{Position}` is an integer.

        :param positions_in_clusters: The positions_in_clusters of this GetSKUAltID.
        :type positions_in_clusters: Dict[str, Dict[str, int]]
        """

        self._positions_in_clusters = positions_in_clusters

    @property
    def product_categories(self):
        """Gets the product_categories of this GetSKUAltID.

        Object containing product categories. Structure: \"{CategoryID}\": \"{CategoryName}\". Both the key and the value are strings.

        :return: The product_categories of this GetSKUAltID.
        :rtype: Dict[str, Dict[str, str]]
        """
        return self._product_categories

    @product_categories.setter
    def product_categories(self, product_categories):
        """Sets the product_categories of this GetSKUAltID.

        Object containing product categories. Structure: \"{CategoryID}\": \"{CategoryName}\". Both the key and the value are strings.

        :param product_categories: The product_categories of this GetSKUAltID.
        :type product_categories: Dict[str, Dict[str, str]]
        """
        if product_categories is None:
            raise ValueError("Invalid value for `product_categories`, must not be `None`")

        self._product_categories = product_categories

    @property
    def product_category_ids(self):
        """Gets the product_category_ids of this GetSKUAltID.

        Category path composed by category IDs separated by `/`.

        :return: The product_category_ids of this GetSKUAltID.
        :rtype: str
        """
        return self._product_category_ids

    @product_category_ids.setter
    def product_category_ids(self, product_category_ids):
        """Sets the product_category_ids of this GetSKUAltID.

        Category path composed by category IDs separated by `/`.

        :param product_category_ids: The product_category_ids of this GetSKUAltID.
        :type product_category_ids: str
        """
        if product_category_ids is None:
            raise ValueError("Invalid value for `product_category_ids`, must not be `None`")

        self._product_category_ids = product_category_ids

    @property
    def product_cluster_highlights(self):
        """Gets the product_cluster_highlights of this GetSKUAltID.

        Product Clusters Highlights. Structure: \"{Product Cluster ID}\": \"{Product Cluster Name}\". Both the key and the value are strings.

        :return: The product_cluster_highlights of this GetSKUAltID.
        :rtype: Dict[str, Dict[str, str]]
        """
        return self._product_cluster_highlights

    @product_cluster_highlights.setter
    def product_cluster_highlights(self, product_cluster_highlights):
        """Sets the product_cluster_highlights of this GetSKUAltID.

        Product Clusters Highlights. Structure: \"{Product Cluster ID}\": \"{Product Cluster Name}\". Both the key and the value are strings.

        :param product_cluster_highlights: The product_cluster_highlights of this GetSKUAltID.
        :type product_cluster_highlights: Dict[str, Dict[str, str]]
        """

        self._product_cluster_highlights = product_cluster_highlights

    @property
    def product_cluster_names(self):
        """Gets the product_cluster_names of this GetSKUAltID.

        Product Clusters Names. Structure: \"{Product Cluster ID}\": \"{Product Cluster Name}\". Both the key and the value are strings.

        :return: The product_cluster_names of this GetSKUAltID.
        :rtype: Dict[str, Dict[str, str]]
        """
        return self._product_cluster_names

    @product_cluster_names.setter
    def product_cluster_names(self, product_cluster_names):
        """Sets the product_cluster_names of this GetSKUAltID.

        Product Clusters Names. Structure: \"{Product Cluster ID}\": \"{Product Cluster Name}\". Both the key and the value are strings.

        :param product_cluster_names: The product_cluster_names of this GetSKUAltID.
        :type product_cluster_names: Dict[str, Dict[str, str]]
        """

        self._product_cluster_names = product_cluster_names

    @property
    def product_clusters_ids(self):
        """Gets the product_clusters_ids of this GetSKUAltID.

        Product Cluster IDs separated by comma (`,`).

        :return: The product_clusters_ids of this GetSKUAltID.
        :rtype: str
        """
        return self._product_clusters_ids

    @product_clusters_ids.setter
    def product_clusters_ids(self, product_clusters_ids):
        """Sets the product_clusters_ids of this GetSKUAltID.

        Product Cluster IDs separated by comma (`,`).

        :param product_clusters_ids: The product_clusters_ids of this GetSKUAltID.
        :type product_clusters_ids: str
        """
        if product_clusters_ids is None:
            raise ValueError("Invalid value for `product_clusters_ids`, must not be `None`")

        self._product_clusters_ids = product_clusters_ids

    @property
    def product_description(self):
        """Gets the product_description of this GetSKUAltID.

        Product Description. HTML is allowed.

        :return: The product_description of this GetSKUAltID.
        :rtype: str
        """
        return self._product_description

    @product_description.setter
    def product_description(self, product_description):
        """Sets the product_description of this GetSKUAltID.

        Product Description. HTML is allowed.

        :param product_description: The product_description of this GetSKUAltID.
        :type product_description: str
        """
        if product_description is None:
            raise ValueError("Invalid value for `product_description`, must not be `None`")

        self._product_description = product_description

    @property
    def product_final_score(self):
        """Gets the product_final_score of this GetSKUAltID.

        Product Final Score.

        :return: The product_final_score of this GetSKUAltID.
        :rtype: int
        """
        return self._product_final_score

    @product_final_score.setter
    def product_final_score(self, product_final_score):
        """Sets the product_final_score of this GetSKUAltID.

        Product Final Score.

        :param product_final_score: The product_final_score of this GetSKUAltID.
        :type product_final_score: int
        """

        self._product_final_score = product_final_score

    @property
    def product_global_category_id(self):
        """Gets the product_global_category_id of this GetSKUAltID.

        Product Global Category ID.

        :return: The product_global_category_id of this GetSKUAltID.
        :rtype: int
        """
        return self._product_global_category_id

    @product_global_category_id.setter
    def product_global_category_id(self, product_global_category_id):
        """Sets the product_global_category_id of this GetSKUAltID.

        Product Global Category ID.

        :param product_global_category_id: The product_global_category_id of this GetSKUAltID.
        :type product_global_category_id: int
        """
        if product_global_category_id is None:
            raise ValueError("Invalid value for `product_global_category_id`, must not be `None`")

        self._product_global_category_id = product_global_category_id

    @property
    def product_id(self):
        """Gets the product_id of this GetSKUAltID.

        Product ID.

        :return: The product_id of this GetSKUAltID.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this GetSKUAltID.

        Product ID.

        :param product_id: The product_id of this GetSKUAltID.
        :type product_id: int
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def product_is_visible(self):
        """Gets the product_is_visible of this GetSKUAltID.

        Defines if the product is visible or not.

        :return: The product_is_visible of this GetSKUAltID.
        :rtype: bool
        """
        return self._product_is_visible

    @product_is_visible.setter
    def product_is_visible(self, product_is_visible):
        """Sets the product_is_visible of this GetSKUAltID.

        Defines if the product is visible or not.

        :param product_is_visible: The product_is_visible of this GetSKUAltID.
        :type product_is_visible: bool
        """

        self._product_is_visible = product_is_visible

    @property
    def product_name(self):
        """Gets the product_name of this GetSKUAltID.

        Product Name.

        :return: The product_name of this GetSKUAltID.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this GetSKUAltID.

        Product Name.

        :param product_name: The product_name of this GetSKUAltID.
        :type product_name: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")

        self._product_name = product_name

    @property
    def product_ref_id(self):
        """Gets the product_ref_id of this GetSKUAltID.

        Product Reference ID.

        :return: The product_ref_id of this GetSKUAltID.
        :rtype: str
        """
        return self._product_ref_id

    @product_ref_id.setter
    def product_ref_id(self, product_ref_id):
        """Sets the product_ref_id of this GetSKUAltID.

        Product Reference ID.

        :param product_ref_id: The product_ref_id of this GetSKUAltID.
        :type product_ref_id: str
        """

        self._product_ref_id = product_ref_id

    @property
    def product_specifications(self):
        """Gets the product_specifications of this GetSKUAltID.

        Array with related Product Specifications.

        :return: The product_specifications of this GetSKUAltID.
        :rtype: List[ProductSpecification]
        """
        return self._product_specifications

    @product_specifications.setter
    def product_specifications(self, product_specifications):
        """Sets the product_specifications of this GetSKUAltID.

        Array with related Product Specifications.

        :param product_specifications: The product_specifications of this GetSKUAltID.
        :type product_specifications: List[ProductSpecification]
        """
        if product_specifications is None:
            raise ValueError("Invalid value for `product_specifications`, must not be `None`")

        self._product_specifications = product_specifications

    @property
    def real_dimension(self):
        """Gets the real_dimension of this GetSKUAltID.


        :return: The real_dimension of this GetSKUAltID.
        :rtype: RealDimension
        """
        return self._real_dimension

    @real_dimension.setter
    def real_dimension(self, real_dimension):
        """Sets the real_dimension of this GetSKUAltID.


        :param real_dimension: The real_dimension of this GetSKUAltID.
        :type real_dimension: RealDimension
        """
        if real_dimension is None:
            raise ValueError("Invalid value for `real_dimension`, must not be `None`")

        self._real_dimension = real_dimension

    @property
    def release_date(self):
        """Gets the release_date of this GetSKUAltID.

        Release date of the product.

        :return: The release_date of this GetSKUAltID.
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this GetSKUAltID.

        Release date of the product.

        :param release_date: The release_date of this GetSKUAltID.
        :type release_date: str
        """

        self._release_date = release_date

    @property
    def reward_value(self):
        """Gets the reward_value of this GetSKUAltID.

        Reward value related to the SKU.

        :return: The reward_value of this GetSKUAltID.
        :rtype: float
        """
        return self._reward_value

    @reward_value.setter
    def reward_value(self, reward_value):
        """Sets the reward_value of this GetSKUAltID.

        Reward value related to the SKU.

        :param reward_value: The reward_value of this GetSKUAltID.
        :type reward_value: float
        """
        if reward_value is None:
            raise ValueError("Invalid value for `reward_value`, must not be `None`")

        self._reward_value = reward_value

    @property
    def sales_channels(self):
        """Gets the sales_channels of this GetSKUAltID.

        Array of trade policy IDs.

        :return: The sales_channels of this GetSKUAltID.
        :rtype: List[int]
        """
        return self._sales_channels

    @sales_channels.setter
    def sales_channels(self, sales_channels):
        """Sets the sales_channels of this GetSKUAltID.

        Array of trade policy IDs.

        :param sales_channels: The sales_channels of this GetSKUAltID.
        :type sales_channels: List[int]
        """
        if sales_channels is None:
            raise ValueError("Invalid value for `sales_channels`, must not be `None`")

        self._sales_channels = sales_channels

    @property
    def services(self):
        """Gets the services of this GetSKUAltID.

        Array with Service IDs that are related to the SKU.

        :return: The services of this GetSKUAltID.
        :rtype: List[str]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this GetSKUAltID.

        Array with Service IDs that are related to the SKU.

        :param services: The services of this GetSKUAltID.
        :type services: List[str]
        """
        if services is None:
            raise ValueError("Invalid value for `services`, must not be `None`")

        self._services = services

    @property
    def show_if_not_available(self):
        """Gets the show_if_not_available of this GetSKUAltID.

        Defines if the product will be shown if it is not available.

        :return: The show_if_not_available of this GetSKUAltID.
        :rtype: bool
        """
        return self._show_if_not_available

    @show_if_not_available.setter
    def show_if_not_available(self, show_if_not_available):
        """Sets the show_if_not_available of this GetSKUAltID.

        Defines if the product will be shown if it is not available.

        :param show_if_not_available: The show_if_not_available of this GetSKUAltID.
        :type show_if_not_available: bool
        """

        self._show_if_not_available = show_if_not_available

    @property
    def sku_name(self):
        """Gets the sku_name of this GetSKUAltID.

        SKU Name.

        :return: The sku_name of this GetSKUAltID.
        :rtype: str
        """
        return self._sku_name

    @sku_name.setter
    def sku_name(self, sku_name):
        """Sets the sku_name of this GetSKUAltID.

        SKU Name.

        :param sku_name: The sku_name of this GetSKUAltID.
        :type sku_name: str
        """
        if sku_name is None:
            raise ValueError("Invalid value for `sku_name`, must not be `None`")

        self._sku_name = sku_name

    @property
    def sku_sellers(self):
        """Gets the sku_sellers of this GetSKUAltID.

        Array with related Sellers data.

        :return: The sku_sellers of this GetSKUAltID.
        :rtype: List[SkuSeller]
        """
        return self._sku_sellers

    @sku_sellers.setter
    def sku_sellers(self, sku_sellers):
        """Sets the sku_sellers of this GetSKUAltID.

        Array with related Sellers data.

        :param sku_sellers: The sku_sellers of this GetSKUAltID.
        :type sku_sellers: List[SkuSeller]
        """
        if sku_sellers is None:
            raise ValueError("Invalid value for `sku_sellers`, must not be `None`")

        self._sku_sellers = sku_sellers

    @property
    def sku_specifications(self):
        """Gets the sku_specifications of this GetSKUAltID.

        Array with related SKU Specifications.

        :return: The sku_specifications of this GetSKUAltID.
        :rtype: List[SkuSpecification]
        """
        return self._sku_specifications

    @sku_specifications.setter
    def sku_specifications(self, sku_specifications):
        """Sets the sku_specifications of this GetSKUAltID.

        Array with related SKU Specifications.

        :param sku_specifications: The sku_specifications of this GetSKUAltID.
        :type sku_specifications: List[SkuSpecification]
        """
        if sku_specifications is None:
            raise ValueError("Invalid value for `sku_specifications`, must not be `None`")

        self._sku_specifications = sku_specifications

    @property
    def tax_code(self):
        """Gets the tax_code of this GetSKUAltID.

        SKU Tax Code.

        :return: The tax_code of this GetSKUAltID.
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this GetSKUAltID.

        SKU Tax Code.

        :param tax_code: The tax_code of this GetSKUAltID.
        :type tax_code: str
        """

        self._tax_code = tax_code

    @property
    def unit_multiplier(self):
        """Gets the unit_multiplier of this GetSKUAltID.

        This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.

        :return: The unit_multiplier of this GetSKUAltID.
        :rtype: float
        """
        return self._unit_multiplier

    @unit_multiplier.setter
    def unit_multiplier(self, unit_multiplier):
        """Sets the unit_multiplier of this GetSKUAltID.

        This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.

        :param unit_multiplier: The unit_multiplier of this GetSKUAltID.
        :type unit_multiplier: float
        """
        if unit_multiplier is None:
            raise ValueError("Invalid value for `unit_multiplier`, must not be `None`")

        self._unit_multiplier = unit_multiplier
