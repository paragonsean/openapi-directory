# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Category(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_store_front_link: bool=None, ad_words_remarketing_code: str=None, description: str=None, father_category_id: int=None, global_category_id: int=None, has_children: bool=None, id: int=None, is_active: bool=None, keywords: str=None, link_id: str=None, lomadee_campaign_code: str=None, name: str=None, score: int=None, show_brand_filter: bool=None, show_in_store_front: bool=None, stock_keeping_unit_selection_mode: str=None, title: str=None):
        """Category - a model defined in OpenAPI

        :param active_store_front_link: The active_store_front_link of this Category.
        :param ad_words_remarketing_code: The ad_words_remarketing_code of this Category.
        :param description: The description of this Category.
        :param father_category_id: The father_category_id of this Category.
        :param global_category_id: The global_category_id of this Category.
        :param has_children: The has_children of this Category.
        :param id: The id of this Category.
        :param is_active: The is_active of this Category.
        :param keywords: The keywords of this Category.
        :param link_id: The link_id of this Category.
        :param lomadee_campaign_code: The lomadee_campaign_code of this Category.
        :param name: The name of this Category.
        :param score: The score of this Category.
        :param show_brand_filter: The show_brand_filter of this Category.
        :param show_in_store_front: The show_in_store_front of this Category.
        :param stock_keeping_unit_selection_mode: The stock_keeping_unit_selection_mode of this Category.
        :param title: The title of this Category.
        """
        self.openapi_types = {
            'active_store_front_link': bool,
            'ad_words_remarketing_code': str,
            'description': str,
            'father_category_id': int,
            'global_category_id': int,
            'has_children': bool,
            'id': int,
            'is_active': bool,
            'keywords': str,
            'link_id': str,
            'lomadee_campaign_code': str,
            'name': str,
            'score': int,
            'show_brand_filter': bool,
            'show_in_store_front': bool,
            'stock_keeping_unit_selection_mode': str,
            'title': str
        }

        self.attribute_map = {
            'active_store_front_link': 'ActiveStoreFrontLink',
            'ad_words_remarketing_code': 'AdWordsRemarketingCode',
            'description': 'Description',
            'father_category_id': 'FatherCategoryId',
            'global_category_id': 'GlobalCategoryId',
            'has_children': 'HasChildren',
            'id': 'Id',
            'is_active': 'IsActive',
            'keywords': 'Keywords',
            'link_id': 'LinkId',
            'lomadee_campaign_code': 'LomadeeCampaignCode',
            'name': 'Name',
            'score': 'Score',
            'show_brand_filter': 'ShowBrandFilter',
            'show_in_store_front': 'ShowInStoreFront',
            'stock_keeping_unit_selection_mode': 'StockKeepingUnitSelectionMode',
            'title': 'Title'
        }

        self._active_store_front_link = active_store_front_link
        self._ad_words_remarketing_code = ad_words_remarketing_code
        self._description = description
        self._father_category_id = father_category_id
        self._global_category_id = global_category_id
        self._has_children = has_children
        self._id = id
        self._is_active = is_active
        self._keywords = keywords
        self._link_id = link_id
        self._lomadee_campaign_code = lomadee_campaign_code
        self._name = name
        self._score = score
        self._show_brand_filter = show_brand_filter
        self._show_in_store_front = show_in_store_front
        self._stock_keeping_unit_selection_mode = stock_keeping_unit_selection_mode
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Category':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Category of this Category.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_store_front_link(self):
        """Gets the active_store_front_link of this Category.

        Defines if the Category has an active link on the website (`true`) or not (`false`).

        :return: The active_store_front_link of this Category.
        :rtype: bool
        """
        return self._active_store_front_link

    @active_store_front_link.setter
    def active_store_front_link(self, active_store_front_link):
        """Sets the active_store_front_link of this Category.

        Defines if the Category has an active link on the website (`true`) or not (`false`).

        :param active_store_front_link: The active_store_front_link of this Category.
        :type active_store_front_link: bool
        """
        if active_store_front_link is None:
            raise ValueError("Invalid value for `active_store_front_link`, must not be `None`")

        self._active_store_front_link = active_store_front_link

    @property
    def ad_words_remarketing_code(self):
        """Gets the ad_words_remarketing_code of this Category.

        This is a legacy field. Do not take this information into consideration.

        :return: The ad_words_remarketing_code of this Category.
        :rtype: str
        """
        return self._ad_words_remarketing_code

    @ad_words_remarketing_code.setter
    def ad_words_remarketing_code(self, ad_words_remarketing_code):
        """Sets the ad_words_remarketing_code of this Category.

        This is a legacy field. Do not take this information into consideration.

        :param ad_words_remarketing_code: The ad_words_remarketing_code of this Category.
        :type ad_words_remarketing_code: str
        """
        if ad_words_remarketing_code is None:
            raise ValueError("Invalid value for `ad_words_remarketing_code`, must not be `None`")

        self._ad_words_remarketing_code = ad_words_remarketing_code

    @property
    def description(self):
        """Gets the description of this Category.

        Describes details about the category.

        :return: The description of this Category.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Category.

        Describes details about the category.

        :param description: The description of this Category.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def father_category_id(self):
        """Gets the father_category_id of this Category.

        ID of the father category, apply in case of category and subcategory.

        :return: The father_category_id of this Category.
        :rtype: int
        """
        return self._father_category_id

    @father_category_id.setter
    def father_category_id(self, father_category_id):
        """Sets the father_category_id of this Category.

        ID of the father category, apply in case of category and subcategory.

        :param father_category_id: The father_category_id of this Category.
        :type father_category_id: int
        """
        if father_category_id is None:
            raise ValueError("Invalid value for `father_category_id`, must not be `None`")

        self._father_category_id = father_category_id

    @property
    def global_category_id(self):
        """Gets the global_category_id of this Category.

        Google Global Category ID.

        :return: The global_category_id of this Category.
        :rtype: int
        """
        return self._global_category_id

    @global_category_id.setter
    def global_category_id(self, global_category_id):
        """Sets the global_category_id of this Category.

        Google Global Category ID.

        :param global_category_id: The global_category_id of this Category.
        :type global_category_id: int
        """
        if global_category_id is None:
            raise ValueError("Invalid value for `global_category_id`, must not be `None`")

        self._global_category_id = global_category_id

    @property
    def has_children(self):
        """Gets the has_children of this Category.

        Defines if the category has child categories (`true`) or not (`false`).

        :return: The has_children of this Category.
        :rtype: bool
        """
        return self._has_children

    @has_children.setter
    def has_children(self, has_children):
        """Sets the has_children of this Category.

        Defines if the category has child categories (`true`) or not (`false`).

        :param has_children: The has_children of this Category.
        :type has_children: bool
        """
        if has_children is None:
            raise ValueError("Invalid value for `has_children`, must not be `None`")

        self._has_children = has_children

    @property
    def id(self):
        """Gets the id of this Category.

        Category ID.

        :return: The id of this Category.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Category.

        Category ID.

        :param id: The id of this Category.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this Category.

        Shows if the category is active (`true`) or not (`false`).

        :return: The is_active of this Category.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Category.

        Shows if the category is active (`true`) or not (`false`).

        :param is_active: The is_active of this Category.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def keywords(self):
        """Gets the keywords of this Category.

        Substitutes words for the category.

        :return: The keywords of this Category.
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Category.

        Substitutes words for the category.

        :param keywords: The keywords of this Category.
        :type keywords: str
        """
        if keywords is None:
            raise ValueError("Invalid value for `keywords`, must not be `None`")

        self._keywords = keywords

    @property
    def link_id(self):
        """Gets the link_id of this Category.

        Text Link.

        :return: The link_id of this Category.
        :rtype: str
        """
        return self._link_id

    @link_id.setter
    def link_id(self, link_id):
        """Sets the link_id of this Category.

        Text Link.

        :param link_id: The link_id of this Category.
        :type link_id: str
        """
        if link_id is None:
            raise ValueError("Invalid value for `link_id`, must not be `None`")

        self._link_id = link_id

    @property
    def lomadee_campaign_code(self):
        """Gets the lomadee_campaign_code of this Category.

        This is a legacy field. Do not take this information into consideration.

        :return: The lomadee_campaign_code of this Category.
        :rtype: str
        """
        return self._lomadee_campaign_code

    @lomadee_campaign_code.setter
    def lomadee_campaign_code(self, lomadee_campaign_code):
        """Sets the lomadee_campaign_code of this Category.

        This is a legacy field. Do not take this information into consideration.

        :param lomadee_campaign_code: The lomadee_campaign_code of this Category.
        :type lomadee_campaign_code: str
        """
        if lomadee_campaign_code is None:
            raise ValueError("Invalid value for `lomadee_campaign_code`, must not be `None`")

        self._lomadee_campaign_code = lomadee_campaign_code

    @property
    def name(self):
        """Gets the name of this Category.

        Category name.

        :return: The name of this Category.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Category.

        Category name.

        :param name: The name of this Category.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def score(self):
        """Gets the score of this Category.

        Score for search ordination.

        :return: The score of this Category.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Category.

        Score for search ordination.

        :param score: The score of this Category.
        :type score: int
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def show_brand_filter(self):
        """Gets the show_brand_filter of this Category.

        Defines if the category has brand filter (`true`) or not (`false`).

        :return: The show_brand_filter of this Category.
        :rtype: bool
        """
        return self._show_brand_filter

    @show_brand_filter.setter
    def show_brand_filter(self, show_brand_filter):
        """Sets the show_brand_filter of this Category.

        Defines if the category has brand filter (`true`) or not (`false`).

        :param show_brand_filter: The show_brand_filter of this Category.
        :type show_brand_filter: bool
        """
        if show_brand_filter is None:
            raise ValueError("Invalid value for `show_brand_filter`, must not be `None`")

        self._show_brand_filter = show_brand_filter

    @property
    def show_in_store_front(self):
        """Gets the show_in_store_front of this Category.

        Defines if the category is shown on side and upper menu (`true`) or not (`false`).

        :return: The show_in_store_front of this Category.
        :rtype: bool
        """
        return self._show_in_store_front

    @show_in_store_front.setter
    def show_in_store_front(self, show_in_store_front):
        """Sets the show_in_store_front of this Category.

        Defines if the category is shown on side and upper menu (`true`) or not (`false`).

        :param show_in_store_front: The show_in_store_front of this Category.
        :type show_in_store_front: bool
        """
        if show_in_store_front is None:
            raise ValueError("Invalid value for `show_in_store_front`, must not be `None`")

        self._show_in_store_front = show_in_store_front

    @property
    def stock_keeping_unit_selection_mode(self):
        """Gets the stock_keeping_unit_selection_mode of this Category.

        Defines how the SKU will be exhibited.

        :return: The stock_keeping_unit_selection_mode of this Category.
        :rtype: str
        """
        return self._stock_keeping_unit_selection_mode

    @stock_keeping_unit_selection_mode.setter
    def stock_keeping_unit_selection_mode(self, stock_keeping_unit_selection_mode):
        """Sets the stock_keeping_unit_selection_mode of this Category.

        Defines how the SKU will be exhibited.

        :param stock_keeping_unit_selection_mode: The stock_keeping_unit_selection_mode of this Category.
        :type stock_keeping_unit_selection_mode: str
        """
        if stock_keeping_unit_selection_mode is None:
            raise ValueError("Invalid value for `stock_keeping_unit_selection_mode`, must not be `None`")

        self._stock_keeping_unit_selection_mode = stock_keeping_unit_selection_mode

    @property
    def title(self):
        """Gets the title of this Category.

        Category page title.

        :return: The title of this Category.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Category.

        Category page title.

        :param title: The title of this Category.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
