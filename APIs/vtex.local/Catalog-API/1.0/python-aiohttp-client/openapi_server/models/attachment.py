# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_field import ModelField
from openapi_server import util


class Attachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: List[ModelField]=None, id: int=None, is_active: bool=None, is_required: bool=None, keys: List[str]=None, name: str=None):
        """Attachment - a model defined in OpenAPI

        :param fields: The fields of this Attachment.
        :param id: The id of this Attachment.
        :param is_active: The is_active of this Attachment.
        :param is_required: The is_required of this Attachment.
        :param keys: The keys of this Attachment.
        :param name: The name of this Attachment.
        """
        self.openapi_types = {
            'fields': List[ModelField],
            'id': int,
            'is_active': bool,
            'is_required': bool,
            'keys': List[str],
            'name': str
        }

        self.attribute_map = {
            'fields': 'Fields',
            'id': 'Id',
            'is_active': 'IsActive',
            'is_required': 'IsRequired',
            'keys': 'Keys',
            'name': 'Name'
        }

        self._fields = fields
        self._id = id
        self._is_active = is_active
        self._is_required = is_required
        self._keys = keys
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attachment of this Attachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this Attachment.

        Array containing Attachment fields.

        :return: The fields of this Attachment.
        :rtype: List[ModelField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Attachment.

        Array containing Attachment fields.

        :param fields: The fields of this Attachment.
        :type fields: List[ModelField]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def id(self):
        """Gets the id of this Attachment.

        Attachment ID.

        :return: The id of this Attachment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Attachment.

        Attachment ID.

        :param id: The id of this Attachment.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this Attachment.

        Defines if the Attachment is active or not.

        :return: The is_active of this Attachment.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Attachment.

        Defines if the Attachment is active or not.

        :param is_active: The is_active of this Attachment.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def is_required(self):
        """Gets the is_required of this Attachment.

        Defines if the Attachment is required or not.

        :return: The is_required of this Attachment.
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this Attachment.

        Defines if the Attachment is required or not.

        :param is_required: The is_required of this Attachment.
        :type is_required: bool
        """
        if is_required is None:
            raise ValueError("Invalid value for `is_required`, must not be `None`")

        self._is_required = is_required

    @property
    def keys(self):
        """Gets the keys of this Attachment.

        Attachment Keys.

        :return: The keys of this Attachment.
        :rtype: List[str]
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this Attachment.

        Attachment Keys.

        :param keys: The keys of this Attachment.
        :type keys: List[str]
        """
        if keys is None:
            raise ValueError("Invalid value for `keys`, must not be `None`")

        self._keys = keys

    @property
    def name(self):
        """Gets the name of this Attachment.

        Attachment Name.

        :return: The name of this Attachment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Attachment.

        Attachment Name.

        :param name: The name of this Attachment.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
