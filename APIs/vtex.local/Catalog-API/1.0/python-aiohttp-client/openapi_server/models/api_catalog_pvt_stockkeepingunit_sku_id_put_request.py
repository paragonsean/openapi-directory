# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiCatalogPvtStockkeepingunitSkuIdPutRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activate_if_possible: bool=None, commercial_condition_id: int=None, creation_date: str=None, cubic_weight: float=None, estimated_date_arrival: str=None, height: float=None, is_active: bool=None, is_kit: bool=None, kit_itens_sell_apart: bool=None, length: float=None, manufacturer_code: str=None, measurement_unit: str=None, modal_type: str=None, name: str=None, packaged_height: float=None, packaged_length: float=None, packaged_weight_kg: int=None, packaged_width: float=None, product_id: int=None, ref_id: str=None, reward_value: float=None, unit_multiplier: float=None, videos: List[str]=None, weight_kg: float=None, width: float=None):
        """ApiCatalogPvtStockkeepingunitSkuIdPutRequest - a model defined in OpenAPI

        :param activate_if_possible: The activate_if_possible of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param commercial_condition_id: The commercial_condition_id of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param creation_date: The creation_date of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param cubic_weight: The cubic_weight of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param estimated_date_arrival: The estimated_date_arrival of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param height: The height of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param is_active: The is_active of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param is_kit: The is_kit of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param kit_itens_sell_apart: The kit_itens_sell_apart of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param length: The length of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param manufacturer_code: The manufacturer_code of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param measurement_unit: The measurement_unit of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param modal_type: The modal_type of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param name: The name of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param packaged_height: The packaged_height of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param packaged_length: The packaged_length of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param packaged_weight_kg: The packaged_weight_kg of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param packaged_width: The packaged_width of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param product_id: The product_id of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param ref_id: The ref_id of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param reward_value: The reward_value of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param unit_multiplier: The unit_multiplier of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param videos: The videos of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param weight_kg: The weight_kg of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :param width: The width of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        """
        self.openapi_types = {
            'activate_if_possible': bool,
            'commercial_condition_id': int,
            'creation_date': str,
            'cubic_weight': float,
            'estimated_date_arrival': str,
            'height': float,
            'is_active': bool,
            'is_kit': bool,
            'kit_itens_sell_apart': bool,
            'length': float,
            'manufacturer_code': str,
            'measurement_unit': str,
            'modal_type': str,
            'name': str,
            'packaged_height': float,
            'packaged_length': float,
            'packaged_weight_kg': int,
            'packaged_width': float,
            'product_id': int,
            'ref_id': str,
            'reward_value': float,
            'unit_multiplier': float,
            'videos': List[str],
            'weight_kg': float,
            'width': float
        }

        self.attribute_map = {
            'activate_if_possible': 'ActivateIfPossible',
            'commercial_condition_id': 'CommercialConditionId',
            'creation_date': 'CreationDate',
            'cubic_weight': 'CubicWeight',
            'estimated_date_arrival': 'EstimatedDateArrival',
            'height': 'Height',
            'is_active': 'IsActive',
            'is_kit': 'IsKit',
            'kit_itens_sell_apart': 'KitItensSellApart',
            'length': 'Length',
            'manufacturer_code': 'ManufacturerCode',
            'measurement_unit': 'MeasurementUnit',
            'modal_type': 'ModalType',
            'name': 'Name',
            'packaged_height': 'PackagedHeight',
            'packaged_length': 'PackagedLength',
            'packaged_weight_kg': 'PackagedWeightKg',
            'packaged_width': 'PackagedWidth',
            'product_id': 'ProductId',
            'ref_id': 'RefId',
            'reward_value': 'RewardValue',
            'unit_multiplier': 'UnitMultiplier',
            'videos': 'Videos',
            'weight_kg': 'WeightKg',
            'width': 'Width'
        }

        self._activate_if_possible = activate_if_possible
        self._commercial_condition_id = commercial_condition_id
        self._creation_date = creation_date
        self._cubic_weight = cubic_weight
        self._estimated_date_arrival = estimated_date_arrival
        self._height = height
        self._is_active = is_active
        self._is_kit = is_kit
        self._kit_itens_sell_apart = kit_itens_sell_apart
        self._length = length
        self._manufacturer_code = manufacturer_code
        self._measurement_unit = measurement_unit
        self._modal_type = modal_type
        self._name = name
        self._packaged_height = packaged_height
        self._packaged_length = packaged_length
        self._packaged_weight_kg = packaged_weight_kg
        self._packaged_width = packaged_width
        self._product_id = product_id
        self._ref_id = ref_id
        self._reward_value = reward_value
        self._unit_multiplier = unit_multiplier
        self._videos = videos
        self._weight_kg = weight_kg
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiCatalogPvtStockkeepingunitSkuIdPutRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _api_catalog_pvt_stockkeepingunit__skuId__put_request of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activate_if_possible(self):
        """Gets the activate_if_possible of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        When set to `true`, this attribute will automatically update the SKU as active once associated with an image or an active component.

        :return: The activate_if_possible of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: bool
        """
        return self._activate_if_possible

    @activate_if_possible.setter
    def activate_if_possible(self, activate_if_possible):
        """Sets the activate_if_possible of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        When set to `true`, this attribute will automatically update the SKU as active once associated with an image or an active component.

        :param activate_if_possible: The activate_if_possible of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type activate_if_possible: bool
        """

        self._activate_if_possible = activate_if_possible

    @property
    def commercial_condition_id(self):
        """Gets the commercial_condition_id of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Used to define SKU specific promotions or installment rules. In case of no specific condition, use `1` (default value). This field does not accept `0`. Find out more by reading [Registering a commercial condition](https://help.vtex.com/tutorial/registering-a-commercial-condition--tutorials_445).

        :return: The commercial_condition_id of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: int
        """
        return self._commercial_condition_id

    @commercial_condition_id.setter
    def commercial_condition_id(self, commercial_condition_id):
        """Sets the commercial_condition_id of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Used to define SKU specific promotions or installment rules. In case of no specific condition, use `1` (default value). This field does not accept `0`. Find out more by reading [Registering a commercial condition](https://help.vtex.com/tutorial/registering-a-commercial-condition--tutorials_445).

        :param commercial_condition_id: The commercial_condition_id of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type commercial_condition_id: int
        """

        self._commercial_condition_id = commercial_condition_id

    @property
    def creation_date(self):
        """Gets the creation_date of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Date and time of the SKU's creation.

        :return: The creation_date of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Date and time of the SKU's creation.

        :param creation_date: The creation_date of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type creation_date: str
        """

        self._creation_date = creation_date

    @property
    def cubic_weight(self):
        """Gets the cubic_weight of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        [Cubic weight](https://help.vtex.com/en/tutorial/understanding-the-cubic-weight-factor--tutorials_128).

        :return: The cubic_weight of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: float
        """
        return self._cubic_weight

    @cubic_weight.setter
    def cubic_weight(self, cubic_weight):
        """Sets the cubic_weight of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        [Cubic weight](https://help.vtex.com/en/tutorial/understanding-the-cubic-weight-factor--tutorials_128).

        :param cubic_weight: The cubic_weight of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type cubic_weight: float
        """

        self._cubic_weight = cubic_weight

    @property
    def estimated_date_arrival(self):
        """Gets the estimated_date_arrival of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        To add the product as pre-sale, enter the product estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format. You must take into consideration both the launch date and the freight calculation for the arrival date.

        :return: The estimated_date_arrival of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: str
        """
        return self._estimated_date_arrival

    @estimated_date_arrival.setter
    def estimated_date_arrival(self, estimated_date_arrival):
        """Sets the estimated_date_arrival of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        To add the product as pre-sale, enter the product estimated arrival date in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format. You must take into consideration both the launch date and the freight calculation for the arrival date.

        :param estimated_date_arrival: The estimated_date_arrival of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type estimated_date_arrival: str
        """

        self._estimated_date_arrival = estimated_date_arrival

    @property
    def height(self):
        """Gets the height of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        SKU real height.

        :return: The height of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        SKU real height.

        :param height: The height of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type height: float
        """

        self._height = height

    @property
    def is_active(self):
        """Gets the is_active of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Shows if the SKU is active (`true`) or not (`false`).

        :return: The is_active of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Shows if the SKU is active (`true`) or not (`false`).

        :param is_active: The is_active of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_kit(self):
        """Gets the is_kit of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Flag to set whether the product SKU is made up of one or more SKUs, thereby becoming a bundle. Must be enabled if you are adding a bundle. Once activated, the flag cannot be reverted.

        :return: The is_kit of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: bool
        """
        return self._is_kit

    @is_kit.setter
    def is_kit(self, is_kit):
        """Sets the is_kit of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Flag to set whether the product SKU is made up of one or more SKUs, thereby becoming a bundle. Must be enabled if you are adding a bundle. Once activated, the flag cannot be reverted.

        :param is_kit: The is_kit of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type is_kit: bool
        """

        self._is_kit = is_kit

    @property
    def kit_itens_sell_apart(self):
        """Gets the kit_itens_sell_apart of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Defines if Kit components can be sold apart.

        :return: The kit_itens_sell_apart of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: bool
        """
        return self._kit_itens_sell_apart

    @kit_itens_sell_apart.setter
    def kit_itens_sell_apart(self, kit_itens_sell_apart):
        """Sets the kit_itens_sell_apart of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Defines if Kit components can be sold apart.

        :param kit_itens_sell_apart: The kit_itens_sell_apart of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type kit_itens_sell_apart: bool
        """

        self._kit_itens_sell_apart = kit_itens_sell_apart

    @property
    def length(self):
        """Gets the length of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        SKU real length.

        :return: The length of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        SKU real length.

        :param length: The length of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type length: float
        """

        self._length = length

    @property
    def manufacturer_code(self):
        """Gets the manufacturer_code of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Provided by the manufacturers to identify their product. This field should be filled in if the product has a specific manufacturer’s code.

        :return: The manufacturer_code of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: str
        """
        return self._manufacturer_code

    @manufacturer_code.setter
    def manufacturer_code(self, manufacturer_code):
        """Sets the manufacturer_code of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Provided by the manufacturers to identify their product. This field should be filled in if the product has a specific manufacturer’s code.

        :param manufacturer_code: The manufacturer_code of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type manufacturer_code: str
        """

        self._manufacturer_code = manufacturer_code

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Used only in cases when you need to convert the unit of measure for sale. If a product is sold in boxes for example, but customers want to buy per square meter (m²). In common cases, use `'un'`.

        :return: The measurement_unit of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Used only in cases when you need to convert the unit of measure for sale. If a product is sold in boxes for example, but customers want to buy per square meter (m²). In common cases, use `'un'`.

        :param measurement_unit: The measurement_unit of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type measurement_unit: str
        """

        self._measurement_unit = measurement_unit

    @property
    def modal_type(self):
        """Gets the modal_type of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. \"Chemicals\" or \"Refrigerated products\"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).

        :return: The modal_type of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: str
        """
        return self._modal_type

    @modal_type.setter
    def modal_type(self, modal_type):
        """Sets the modal_type of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Links an unusual type of SKU to a carrier specialized in delivering it. This field should be filled in with the name of the modal (e.g. \"Chemicals\" or \"Refrigerated products\"). To learn more about this feature, read our articles [How the modal works](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125) and [Setting up modal for carriers](https://help.vtex.com/en/tutorial/configure-modal--3jhLqxuPhuiq24UoykCcqy).

        :param modal_type: The modal_type of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type modal_type: str
        """

        self._modal_type = modal_type

    @property
    def name(self):
        """Gets the name of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        SKU name, meaning the variation of the previously added product. For example: **Product** - _Fridge_, **SKU** - _110V_.

        :return: The name of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        SKU name, meaning the variation of the previously added product. For example: **Product** - _Fridge_, **SKU** - _110V_.

        :param name: The name of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def packaged_height(self):
        """Gets the packaged_height of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Height used for shipping calculation.

        :return: The packaged_height of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: float
        """
        return self._packaged_height

    @packaged_height.setter
    def packaged_height(self, packaged_height):
        """Sets the packaged_height of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Height used for shipping calculation.

        :param packaged_height: The packaged_height of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type packaged_height: float
        """
        if packaged_height is None:
            raise ValueError("Invalid value for `packaged_height`, must not be `None`")

        self._packaged_height = packaged_height

    @property
    def packaged_length(self):
        """Gets the packaged_length of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Length used for shipping calculation.

        :return: The packaged_length of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: float
        """
        return self._packaged_length

    @packaged_length.setter
    def packaged_length(self, packaged_length):
        """Sets the packaged_length of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Length used for shipping calculation.

        :param packaged_length: The packaged_length of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type packaged_length: float
        """
        if packaged_length is None:
            raise ValueError("Invalid value for `packaged_length`, must not be `None`")

        self._packaged_length = packaged_length

    @property
    def packaged_weight_kg(self):
        """Gets the packaged_weight_kg of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Weight used for shipping calculation, in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.

        :return: The packaged_weight_kg of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: int
        """
        return self._packaged_weight_kg

    @packaged_weight_kg.setter
    def packaged_weight_kg(self, packaged_weight_kg):
        """Sets the packaged_weight_kg of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Weight used for shipping calculation, in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.

        :param packaged_weight_kg: The packaged_weight_kg of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type packaged_weight_kg: int
        """
        if packaged_weight_kg is None:
            raise ValueError("Invalid value for `packaged_weight_kg`, must not be `None`")

        self._packaged_weight_kg = packaged_weight_kg

    @property
    def packaged_width(self):
        """Gets the packaged_width of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Width used for shipping calculation.

        :return: The packaged_width of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: float
        """
        return self._packaged_width

    @packaged_width.setter
    def packaged_width(self, packaged_width):
        """Sets the packaged_width of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Width used for shipping calculation.

        :param packaged_width: The packaged_width of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type packaged_width: float
        """
        if packaged_width is None:
            raise ValueError("Invalid value for `packaged_width`, must not be `None`")

        self._packaged_width = packaged_width

    @property
    def product_id(self):
        """Gets the product_id of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        ID of the Product associated with this SKU.

        :return: The product_id of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        ID of the Product associated with this SKU.

        :param product_id: The product_id of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type product_id: int
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def ref_id(self):
        """Gets the ref_id of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Reference code used internally for organizational purposes. Must be unique. It is not required only if EAN code already exists. If not, this field must be provided.

        :return: The ref_id of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Reference code used internally for organizational purposes. Must be unique. It is not required only if EAN code already exists. If not, this field must be provided.

        :param ref_id: The ref_id of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type ref_id: str
        """

        self._ref_id = ref_id

    @property
    def reward_value(self):
        """Gets the reward_value of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Credit that the customer receives when finalizing an order of one specific SKU unit. By filling this field out with `1`, the customer gets U$ 1 credit on the site.

        :return: The reward_value of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: float
        """
        return self._reward_value

    @reward_value.setter
    def reward_value(self, reward_value):
        """Sets the reward_value of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Credit that the customer receives when finalizing an order of one specific SKU unit. By filling this field out with `1`, the customer gets U$ 1 credit on the site.

        :param reward_value: The reward_value of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type reward_value: float
        """

        self._reward_value = reward_value

    @property
    def unit_multiplier(self):
        """Gets the unit_multiplier of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.

        :return: The unit_multiplier of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: float
        """
        return self._unit_multiplier

    @unit_multiplier.setter
    def unit_multiplier(self, unit_multiplier):
        """Sets the unit_multiplier of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        This is the multiple number of SKU. If the Multiplier is 5.0000, the product can be added in multiple quantities of 5, 10, 15, 20, onward.

        :param unit_multiplier: The unit_multiplier of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type unit_multiplier: float
        """

        self._unit_multiplier = unit_multiplier

    @property
    def videos(self):
        """Gets the videos of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Videos URLs

        :return: The videos of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: List[str]
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Videos URLs

        :param videos: The videos of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type videos: List[str]
        """

        self._videos = videos

    @property
    def weight_kg(self):
        """Gets the weight_kg of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.

        :return: The weight_kg of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: float
        """
        return self._weight_kg

    @weight_kg.setter
    def weight_kg(self, weight_kg):
        """Sets the weight_kg of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        Weight of the SKU in the measurement [configured in the store](https://help.vtex.com/en/tutorial/filling-in-system-settings--tutorials_269), which by default is in grams.

        :param weight_kg: The weight_kg of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type weight_kg: float
        """

        self._weight_kg = weight_kg

    @property
    def width(self):
        """Gets the width of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        SKU real width.

        :return: The width of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.

        SKU real width.

        :param width: The width of this ApiCatalogPvtStockkeepingunitSkuIdPutRequest.
        :type width: float
        """

        self._width = width
