# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.domains_inner import DomainsInner
from openapi_server import util


class AttachmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domains: List[DomainsInner]=None, is_active: bool=None, is_required: bool=None, name: str=None):
        """AttachmentRequest - a model defined in OpenAPI

        :param domains: The domains of this AttachmentRequest.
        :param is_active: The is_active of this AttachmentRequest.
        :param is_required: The is_required of this AttachmentRequest.
        :param name: The name of this AttachmentRequest.
        """
        self.openapi_types = {
            'domains': List[DomainsInner],
            'is_active': bool,
            'is_required': bool,
            'name': str
        }

        self.attribute_map = {
            'domains': 'Domains',
            'is_active': 'IsActive',
            'is_required': 'IsRequired',
            'name': 'Name'
        }

        self._domains = domains
        self._is_active = is_active
        self._is_required = is_required
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttachmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttachmentRequest of this AttachmentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domains(self):
        """Gets the domains of this AttachmentRequest.

        List of characteristics related to the attachment.

        :return: The domains of this AttachmentRequest.
        :rtype: List[DomainsInner]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this AttachmentRequest.

        List of characteristics related to the attachment.

        :param domains: The domains of this AttachmentRequest.
        :type domains: List[DomainsInner]
        """
        if domains is None:
            raise ValueError("Invalid value for `domains`, must not be `None`")

        self._domains = domains

    @property
    def is_active(self):
        """Gets the is_active of this AttachmentRequest.

        Defines if the attachment is active or not.

        :return: The is_active of this AttachmentRequest.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this AttachmentRequest.

        Defines if the attachment is active or not.

        :param is_active: The is_active of this AttachmentRequest.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def is_required(self):
        """Gets the is_required of this AttachmentRequest.

        Defines if the attachment is required or not.

        :return: The is_required of this AttachmentRequest.
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this AttachmentRequest.

        Defines if the attachment is required or not.

        :param is_required: The is_required of this AttachmentRequest.
        :type is_required: bool
        """
        if is_required is None:
            raise ValueError("Invalid value for `is_required`, must not be `None`")

        self._is_required = is_required

    @property
    def name(self):
        """Gets the name of this AttachmentRequest.

        Attachment Name.

        :return: The name of this AttachmentRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttachmentRequest.

        Attachment Name.

        :param name: The name of this AttachmentRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
