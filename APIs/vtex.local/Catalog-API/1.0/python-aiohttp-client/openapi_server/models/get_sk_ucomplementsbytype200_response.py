# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetSKUcomplementsbytype200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, complement_sku_ids: List[int]=None, parent_sku_id: int=None, type: str=None):
        """GetSKUcomplementsbytype200Response - a model defined in OpenAPI

        :param complement_sku_ids: The complement_sku_ids of this GetSKUcomplementsbytype200Response.
        :param parent_sku_id: The parent_sku_id of this GetSKUcomplementsbytype200Response.
        :param type: The type of this GetSKUcomplementsbytype200Response.
        """
        self.openapi_types = {
            'complement_sku_ids': List[int],
            'parent_sku_id': int,
            'type': str
        }

        self.attribute_map = {
            'complement_sku_ids': 'ComplementSkuIds',
            'parent_sku_id': 'ParentSkuId',
            'type': 'Type'
        }

        self._complement_sku_ids = complement_sku_ids
        self._parent_sku_id = parent_sku_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSKUcomplementsbytype200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetSKUcomplementsbytype_200_response of this GetSKUcomplementsbytype200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def complement_sku_ids(self):
        """Gets the complement_sku_ids of this GetSKUcomplementsbytype200Response.

        Array with SKU complements IDs.

        :return: The complement_sku_ids of this GetSKUcomplementsbytype200Response.
        :rtype: List[int]
        """
        return self._complement_sku_ids

    @complement_sku_ids.setter
    def complement_sku_ids(self, complement_sku_ids):
        """Sets the complement_sku_ids of this GetSKUcomplementsbytype200Response.

        Array with SKU complements IDs.

        :param complement_sku_ids: The complement_sku_ids of this GetSKUcomplementsbytype200Response.
        :type complement_sku_ids: List[int]
        """
        if complement_sku_ids is None:
            raise ValueError("Invalid value for `complement_sku_ids`, must not be `None`")

        self._complement_sku_ids = complement_sku_ids

    @property
    def parent_sku_id(self):
        """Gets the parent_sku_id of this GetSKUcomplementsbytype200Response.

        ID of the Parent SKU, where the Complement is inserted.

        :return: The parent_sku_id of this GetSKUcomplementsbytype200Response.
        :rtype: int
        """
        return self._parent_sku_id

    @parent_sku_id.setter
    def parent_sku_id(self, parent_sku_id):
        """Sets the parent_sku_id of this GetSKUcomplementsbytype200Response.

        ID of the Parent SKU, where the Complement is inserted.

        :param parent_sku_id: The parent_sku_id of this GetSKUcomplementsbytype200Response.
        :type parent_sku_id: int
        """
        if parent_sku_id is None:
            raise ValueError("Invalid value for `parent_sku_id`, must not be `None`")

        self._parent_sku_id = parent_sku_id

    @property
    def type(self):
        """Gets the type of this GetSKUcomplementsbytype200Response.

        Complement Type ID. This represents the type of the complement. The possible values are: `1` for Accessory; `2` for Suggestion; `3` for Similar Product; `5` for Show Together.

        :return: The type of this GetSKUcomplementsbytype200Response.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetSKUcomplementsbytype200Response.

        Complement Type ID. This represents the type of the complement. The possible values are: `1` for Accessory; `2` for Suggestion; `3` for Similar Product; `5` for Show Together.

        :param type: The type of this GetSKUcomplementsbytype200Response.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
