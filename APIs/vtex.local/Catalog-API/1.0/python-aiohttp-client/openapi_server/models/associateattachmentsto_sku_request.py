# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssociateattachmentstoSKURequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachment_names: List[str]=None, sku_id: int=None):
        """AssociateattachmentstoSKURequest - a model defined in OpenAPI

        :param attachment_names: The attachment_names of this AssociateattachmentstoSKURequest.
        :param sku_id: The sku_id of this AssociateattachmentstoSKURequest.
        """
        self.openapi_types = {
            'attachment_names': List[str],
            'sku_id': int
        }

        self.attribute_map = {
            'attachment_names': 'AttachmentNames',
            'sku_id': 'SkuId'
        }

        self._attachment_names = attachment_names
        self._sku_id = sku_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateattachmentstoSKURequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateattachmentstoSKU_request of this AssociateattachmentstoSKURequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachment_names(self):
        """Gets the attachment_names of this AssociateattachmentstoSKURequest.

        Array with all the names of the attachments that you need to associate to the SKU.

        :return: The attachment_names of this AssociateattachmentstoSKURequest.
        :rtype: List[str]
        """
        return self._attachment_names

    @attachment_names.setter
    def attachment_names(self, attachment_names):
        """Sets the attachment_names of this AssociateattachmentstoSKURequest.

        Array with all the names of the attachments that you need to associate to the SKU.

        :param attachment_names: The attachment_names of this AssociateattachmentstoSKURequest.
        :type attachment_names: List[str]
        """
        if attachment_names is None:
            raise ValueError("Invalid value for `attachment_names`, must not be `None`")

        self._attachment_names = attachment_names

    @property
    def sku_id(self):
        """Gets the sku_id of this AssociateattachmentstoSKURequest.

        Unique identifier of the SKU.

        :return: The sku_id of this AssociateattachmentstoSKURequest.
        :rtype: int
        """
        return self._sku_id

    @sku_id.setter
    def sku_id(self, sku_id):
        """Sets the sku_id of this AssociateattachmentstoSKURequest.

        Unique identifier of the SKU.

        :param sku_id: The sku_id of this AssociateattachmentstoSKURequest.
        :type sku_id: int
        """
        if sku_id is None:
            raise ValueError("Invalid value for `sku_id`, must not be `None`")

        self._sku_id = sku_id
