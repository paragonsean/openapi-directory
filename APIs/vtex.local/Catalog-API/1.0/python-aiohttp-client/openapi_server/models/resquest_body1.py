# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResquestBody1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_from: str=None, date_to: str=None, highlight: bool=None, name: str=None, searchable: bool=None):
        """ResquestBody1 - a model defined in OpenAPI

        :param date_from: The date_from of this ResquestBody1.
        :param date_to: The date_to of this ResquestBody1.
        :param highlight: The highlight of this ResquestBody1.
        :param name: The name of this ResquestBody1.
        :param searchable: The searchable of this ResquestBody1.
        """
        self.openapi_types = {
            'date_from': str,
            'date_to': str,
            'highlight': bool,
            'name': str,
            'searchable': bool
        }

        self.attribute_map = {
            'date_from': 'DateFrom',
            'date_to': 'DateTo',
            'highlight': 'Highlight',
            'name': 'Name',
            'searchable': 'Searchable'
        }

        self._date_from = date_from
        self._date_to = date_to
        self._highlight = highlight
        self._name = name
        self._searchable = searchable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResquestBody1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Resquest_body_1 of this ResquestBody1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_from(self):
        """Gets the date_from of this ResquestBody1.

        Initial value date for the Collection.

        :return: The date_from of this ResquestBody1.
        :rtype: str
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this ResquestBody1.

        Initial value date for the Collection.

        :param date_from: The date_from of this ResquestBody1.
        :type date_from: str
        """
        if date_from is None:
            raise ValueError("Invalid value for `date_from`, must not be `None`")

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this ResquestBody1.

        Final value date for the Collection.

        :return: The date_to of this ResquestBody1.
        :rtype: str
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this ResquestBody1.

        Final value date for the Collection.

        :param date_to: The date_to of this ResquestBody1.
        :type date_to: str
        """
        if date_to is None:
            raise ValueError("Invalid value for `date_to`, must not be `None`")

        self._date_to = date_to

    @property
    def highlight(self):
        """Gets the highlight of this ResquestBody1.

        Defines if the Collection is highlighted or not

        :return: The highlight of this ResquestBody1.
        :rtype: bool
        """
        return self._highlight

    @highlight.setter
    def highlight(self, highlight):
        """Sets the highlight of this ResquestBody1.

        Defines if the Collection is highlighted or not

        :param highlight: The highlight of this ResquestBody1.
        :type highlight: bool
        """
        if highlight is None:
            raise ValueError("Invalid value for `highlight`, must not be `None`")

        self._highlight = highlight

    @property
    def name(self):
        """Gets the name of this ResquestBody1.

        Collection Name.

        :return: The name of this ResquestBody1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResquestBody1.

        Collection Name.

        :param name: The name of this ResquestBody1.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def searchable(self):
        """Gets the searchable of this ResquestBody1.

        Defines if the Collection is searchable or not.

        :return: The searchable of this ResquestBody1.
        :rtype: bool
        """
        return self._searchable

    @searchable.setter
    def searchable(self, searchable):
        """Sets the searchable of this ResquestBody1.

        Defines if the Collection is searchable or not.

        :param searchable: The searchable of this ResquestBody1.
        :type searchable: bool
        """
        if searchable is None:
            raise ValueError("Invalid value for `searchable`, must not be `None`")

        self._searchable = searchable
