# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RequestBody1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachment_id: int=None, sku_id: int=None):
        """RequestBody1 - a model defined in OpenAPI

        :param attachment_id: The attachment_id of this RequestBody1.
        :param sku_id: The sku_id of this RequestBody1.
        """
        self.openapi_types = {
            'attachment_id': int,
            'sku_id': int
        }

        self.attribute_map = {
            'attachment_id': 'AttachmentId',
            'sku_id': 'SkuId'
        }

        self._attachment_id = attachment_id
        self._sku_id = sku_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestBody1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request_body_1 of this RequestBody1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachment_id(self):
        """Gets the attachment_id of this RequestBody1.

        Attachment ID.

        :return: The attachment_id of this RequestBody1.
        :rtype: int
        """
        return self._attachment_id

    @attachment_id.setter
    def attachment_id(self, attachment_id):
        """Sets the attachment_id of this RequestBody1.

        Attachment ID.

        :param attachment_id: The attachment_id of this RequestBody1.
        :type attachment_id: int
        """
        if attachment_id is None:
            raise ValueError("Invalid value for `attachment_id`, must not be `None`")

        self._attachment_id = attachment_id

    @property
    def sku_id(self):
        """Gets the sku_id of this RequestBody1.

        Unique identifier of an SKU.

        :return: The sku_id of this RequestBody1.
        :rtype: int
        """
        return self._sku_id

    @sku_id.setter
    def sku_id(self, sku_id):
        """Sets the sku_id of this RequestBody1.

        Unique identifier of an SKU.

        :param sku_id: The sku_id of this RequestBody1.
        :type sku_id: int
        """
        if sku_id is None:
            raise ValueError("Invalid value for `sku_id`, must not be `None`")

        self._sku_id = sku_id
