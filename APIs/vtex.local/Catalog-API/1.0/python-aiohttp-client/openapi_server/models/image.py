# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Image(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_id: int=None, image_name: str=None, image_url: str=None):
        """Image - a model defined in OpenAPI

        :param file_id: The file_id of this Image.
        :param image_name: The image_name of this Image.
        :param image_url: The image_url of this Image.
        """
        self.openapi_types = {
            'file_id': int,
            'image_name': str,
            'image_url': str
        }

        self.attribute_map = {
            'file_id': 'FileId',
            'image_name': 'ImageName',
            'image_url': 'ImageUrl'
        }

        self._file_id = file_id
        self._image_name = image_name
        self._image_url = image_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Image':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Image of this Image.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_id(self):
        """Gets the file_id of this Image.

        SKU image ID.

        :return: The file_id of this Image.
        :rtype: int
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this Image.

        SKU image ID.

        :param file_id: The file_id of this Image.
        :type file_id: int
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def image_name(self):
        """Gets the image_name of this Image.

        Image label.

        :return: The image_name of this Image.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this Image.

        Image label.

        :param image_name: The image_name of this Image.
        :type image_name: str
        """
        if image_name is None:
            raise ValueError("Invalid value for `image_name`, must not be `None`")

        self._image_name = image_name

    @property
    def image_url(self):
        """Gets the image_url of this Image.

        Image URL.

        :return: The image_url of this Image.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this Image.

        Image URL.

        :param image_url: The image_url of this Image.
        :type image_url: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")

        self._image_url = image_url
