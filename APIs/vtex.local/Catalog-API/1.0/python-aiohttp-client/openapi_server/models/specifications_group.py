# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SpecificationsGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: int=None, id: int=None, name: str=None, position: int=None):
        """SpecificationsGroup - a model defined in OpenAPI

        :param category_id: The category_id of this SpecificationsGroup.
        :param id: The id of this SpecificationsGroup.
        :param name: The name of this SpecificationsGroup.
        :param position: The position of this SpecificationsGroup.
        """
        self.openapi_types = {
            'category_id': int,
            'id': int,
            'name': str,
            'position': int
        }

        self.attribute_map = {
            'category_id': 'CategoryId',
            'id': 'Id',
            'name': 'Name',
            'position': 'Position'
        }

        self._category_id = category_id
        self._id = id
        self._name = name
        self._position = position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpecificationsGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpecificationsGroup of this SpecificationsGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this SpecificationsGroup.

        Category ID.

        :return: The category_id of this SpecificationsGroup.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this SpecificationsGroup.

        Category ID.

        :param category_id: The category_id of this SpecificationsGroup.
        :type category_id: int
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")

        self._category_id = category_id

    @property
    def id(self):
        """Gets the id of this SpecificationsGroup.

        Specification Group ID.

        :return: The id of this SpecificationsGroup.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SpecificationsGroup.

        Specification Group ID.

        :param id: The id of this SpecificationsGroup.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this SpecificationsGroup.

        Specification Group Name.

        :return: The name of this SpecificationsGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SpecificationsGroup.

        Specification Group Name.

        :param name: The name of this SpecificationsGroup.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def position(self):
        """Gets the position of this SpecificationsGroup.

        Specification Group Position.

        :return: The position of this SpecificationsGroup.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this SpecificationsGroup.

        Specification Group Position.

        :param position: The position of this SpecificationsGroup.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position
