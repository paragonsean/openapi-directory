# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SKUServiceValueResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost: float=None, id: int=None, name: str=None, sku_service_type_id: int=None, value: float=None):
        """SKUServiceValueResponse - a model defined in OpenAPI

        :param cost: The cost of this SKUServiceValueResponse.
        :param id: The id of this SKUServiceValueResponse.
        :param name: The name of this SKUServiceValueResponse.
        :param sku_service_type_id: The sku_service_type_id of this SKUServiceValueResponse.
        :param value: The value of this SKUServiceValueResponse.
        """
        self.openapi_types = {
            'cost': float,
            'id': int,
            'name': str,
            'sku_service_type_id': int,
            'value': float
        }

        self.attribute_map = {
            'cost': 'Cost',
            'id': 'Id',
            'name': 'Name',
            'sku_service_type_id': 'SkuServiceTypeId',
            'value': 'Value'
        }

        self._cost = cost
        self._id = id
        self._name = name
        self._sku_service_type_id = sku_service_type_id
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SKUServiceValueResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SKUServiceValueResponse of this SKUServiceValueResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self):
        """Gets the cost of this SKUServiceValueResponse.

        SKU Service Value cost.

        :return: The cost of this SKUServiceValueResponse.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this SKUServiceValueResponse.

        SKU Service Value cost.

        :param cost: The cost of this SKUServiceValueResponse.
        :type cost: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")

        self._cost = cost

    @property
    def id(self):
        """Gets the id of this SKUServiceValueResponse.

        SKU Service Value ID.

        :return: The id of this SKUServiceValueResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SKUServiceValueResponse.

        SKU Service Value ID.

        :param id: The id of this SKUServiceValueResponse.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SKUServiceValueResponse.

        SKU Service Value name. Maximum of 100 characters.

        :return: The name of this SKUServiceValueResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SKUServiceValueResponse.

        SKU Service Value name. Maximum of 100 characters.

        :param name: The name of this SKUServiceValueResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def sku_service_type_id(self):
        """Gets the sku_service_type_id of this SKUServiceValueResponse.

        SKU Service Type ID.

        :return: The sku_service_type_id of this SKUServiceValueResponse.
        :rtype: int
        """
        return self._sku_service_type_id

    @sku_service_type_id.setter
    def sku_service_type_id(self, sku_service_type_id):
        """Sets the sku_service_type_id of this SKUServiceValueResponse.

        SKU Service Type ID.

        :param sku_service_type_id: The sku_service_type_id of this SKUServiceValueResponse.
        :type sku_service_type_id: int
        """
        if sku_service_type_id is None:
            raise ValueError("Invalid value for `sku_service_type_id`, must not be `None`")

        self._sku_service_type_id = sku_service_type_id

    @property
    def value(self):
        """Gets the value of this SKUServiceValueResponse.

        SKU Service Value value.

        :return: The value of this SKUServiceValueResponse.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SKUServiceValueResponse.

        SKU Service Value value.

        :param value: The value of this SKUServiceValueResponse.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
