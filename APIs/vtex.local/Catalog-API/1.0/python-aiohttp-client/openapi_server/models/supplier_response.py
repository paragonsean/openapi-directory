# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SupplierResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cell_phone: str=None, cnpj: str=None, corporate_name: str=None, corporte_phone: str=None, email: str=None, id: int=None, is_active: bool=None, name: str=None, phone: str=None, state_inscription: str=None):
        """SupplierResponse - a model defined in OpenAPI

        :param cell_phone: The cell_phone of this SupplierResponse.
        :param cnpj: The cnpj of this SupplierResponse.
        :param corporate_name: The corporate_name of this SupplierResponse.
        :param corporte_phone: The corporte_phone of this SupplierResponse.
        :param email: The email of this SupplierResponse.
        :param id: The id of this SupplierResponse.
        :param is_active: The is_active of this SupplierResponse.
        :param name: The name of this SupplierResponse.
        :param phone: The phone of this SupplierResponse.
        :param state_inscription: The state_inscription of this SupplierResponse.
        """
        self.openapi_types = {
            'cell_phone': str,
            'cnpj': str,
            'corporate_name': str,
            'corporte_phone': str,
            'email': str,
            'id': int,
            'is_active': bool,
            'name': str,
            'phone': str,
            'state_inscription': str
        }

        self.attribute_map = {
            'cell_phone': 'CellPhone',
            'cnpj': 'Cnpj',
            'corporate_name': 'CorporateName',
            'corporte_phone': 'CorportePhone',
            'email': 'Email',
            'id': 'Id',
            'is_active': 'IsActive',
            'name': 'Name',
            'phone': 'Phone',
            'state_inscription': 'StateInscription'
        }

        self._cell_phone = cell_phone
        self._cnpj = cnpj
        self._corporate_name = corporate_name
        self._corporte_phone = corporte_phone
        self._email = email
        self._id = id
        self._is_active = is_active
        self._name = name
        self._phone = phone
        self._state_inscription = state_inscription

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SupplierResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SupplierResponse of this SupplierResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cell_phone(self):
        """Gets the cell_phone of this SupplierResponse.

        Supplier Cellphone.

        :return: The cell_phone of this SupplierResponse.
        :rtype: str
        """
        return self._cell_phone

    @cell_phone.setter
    def cell_phone(self, cell_phone):
        """Sets the cell_phone of this SupplierResponse.

        Supplier Cellphone.

        :param cell_phone: The cell_phone of this SupplierResponse.
        :type cell_phone: str
        """

        self._cell_phone = cell_phone

    @property
    def cnpj(self):
        """Gets the cnpj of this SupplierResponse.

        Corporate legal ID.

        :return: The cnpj of this SupplierResponse.
        :rtype: str
        """
        return self._cnpj

    @cnpj.setter
    def cnpj(self, cnpj):
        """Sets the cnpj of this SupplierResponse.

        Corporate legal ID.

        :param cnpj: The cnpj of this SupplierResponse.
        :type cnpj: str
        """

        self._cnpj = cnpj

    @property
    def corporate_name(self):
        """Gets the corporate_name of this SupplierResponse.

        Supplier Corporate Name.

        :return: The corporate_name of this SupplierResponse.
        :rtype: str
        """
        return self._corporate_name

    @corporate_name.setter
    def corporate_name(self, corporate_name):
        """Sets the corporate_name of this SupplierResponse.

        Supplier Corporate Name.

        :param corporate_name: The corporate_name of this SupplierResponse.
        :type corporate_name: str
        """

        self._corporate_name = corporate_name

    @property
    def corporte_phone(self):
        """Gets the corporte_phone of this SupplierResponse.

        Supplier Corporate Phone.

        :return: The corporte_phone of this SupplierResponse.
        :rtype: str
        """
        return self._corporte_phone

    @corporte_phone.setter
    def corporte_phone(self, corporte_phone):
        """Sets the corporte_phone of this SupplierResponse.

        Supplier Corporate Phone.

        :param corporte_phone: The corporte_phone of this SupplierResponse.
        :type corporte_phone: str
        """

        self._corporte_phone = corporte_phone

    @property
    def email(self):
        """Gets the email of this SupplierResponse.

        Supplier email.

        :return: The email of this SupplierResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SupplierResponse.

        Supplier email.

        :param email: The email of this SupplierResponse.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this SupplierResponse.

        Supplier unique identifier code.

        :return: The id of this SupplierResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SupplierResponse.

        Supplier unique identifier code.

        :param id: The id of this SupplierResponse.
        :type id: int
        """

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this SupplierResponse.

        Defines if the Supplier is active (`true`) or not (`false`).

        :return: The is_active of this SupplierResponse.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this SupplierResponse.

        Defines if the Supplier is active (`true`) or not (`false`).

        :param is_active: The is_active of this SupplierResponse.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def name(self):
        """Gets the name of this SupplierResponse.

        Supplier Name.

        :return: The name of this SupplierResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SupplierResponse.

        Supplier Name.

        :param name: The name of this SupplierResponse.
        :type name: str
        """

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this SupplierResponse.

        Supplier Phone.

        :return: The phone of this SupplierResponse.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this SupplierResponse.

        Supplier Phone.

        :param phone: The phone of this SupplierResponse.
        :type phone: str
        """

        self._phone = phone

    @property
    def state_inscription(self):
        """Gets the state_inscription of this SupplierResponse.

        State Inscription.

        :return: The state_inscription of this SupplierResponse.
        :rtype: str
        """
        return self._state_inscription

    @state_inscription.setter
    def state_inscription(self, state_inscription):
        """Sets the state_inscription of this SupplierResponse.

        State Inscription.

        :param state_inscription: The state_inscription of this SupplierResponse.
        :type state_inscription: str
        """

        self._state_inscription = state_inscription
