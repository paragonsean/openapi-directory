# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_name: str=None, field_values: List[str]=None, group_name: str=None, root_level_specification: bool=None):
        """ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest - a model defined in OpenAPI

        :param field_name: The field_name of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.
        :param field_values: The field_values of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.
        :param group_name: The group_name of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.
        :param root_level_specification: The root_level_specification of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.
        """
        self.openapi_types = {
            'field_name': str,
            'field_values': List[str],
            'group_name': str,
            'root_level_specification': bool
        }

        self.attribute_map = {
            'field_name': 'FieldName',
            'field_values': 'FieldValues',
            'group_name': 'GroupName',
            'root_level_specification': 'RootLevelSpecification'
        }

        self._field_name = field_name
        self._field_values = field_values
        self._group_name = group_name
        self._root_level_specification = root_level_specification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _api_catalog_pvt_stockkeepingunit__skuId__specificationvalue_put_request of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_name(self):
        """Gets the field_name of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.

        Specification name.

        :return: The field_name of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.

        Specification name.

        :param field_name: The field_name of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.
        :type field_name: str
        """
        if field_name is None:
            raise ValueError("Invalid value for `field_name`, must not be `None`")

        self._field_name = field_name

    @property
    def field_values(self):
        """Gets the field_values of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.

        Array of specification values. SKU Specifications must contain only one value.

        :return: The field_values of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.
        :rtype: List[str]
        """
        return self._field_values

    @field_values.setter
    def field_values(self, field_values):
        """Sets the field_values of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.

        Array of specification values. SKU Specifications must contain only one value.

        :param field_values: The field_values of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.
        :type field_values: List[str]
        """
        if field_values is None:
            raise ValueError("Invalid value for `field_values`, must not be `None`")

        self._field_values = field_values

    @property
    def group_name(self):
        """Gets the group_name of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.

        Group name.

        :return: The group_name of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.

        Group name.

        :param group_name: The group_name of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.
        :type group_name: str
        """
        if group_name is None:
            raise ValueError("Invalid value for `group_name`, must not be `None`")

        self._group_name = group_name

    @property
    def root_level_specification(self):
        """Gets the root_level_specification of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.

        Root level specification.

        :return: The root_level_specification of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.
        :rtype: bool
        """
        return self._root_level_specification

    @root_level_specification.setter
    def root_level_specification(self, root_level_specification):
        """Sets the root_level_specification of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.

        Root level specification.

        :param root_level_specification: The root_level_specification of this ApiCatalogPvtStockkeepingunitSkuIdSpecificationvaluePutRequest.
        :type root_level_specification: bool
        """
        if root_level_specification is None:
            raise ValueError("Invalid value for `root_level_specification`, must not be `None`")

        self._root_level_specification = root_level_specification
