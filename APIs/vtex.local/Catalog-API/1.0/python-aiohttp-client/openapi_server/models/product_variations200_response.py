# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_variations200_response_skus_inner import ProductVariations200ResponseSkusInner
from openapi_server import util


class ProductVariations200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: bool=None, dimensions: List[str]=None, dimensions_input_type: Dict[str, str]=None, dimensions_map: Dict[str, List[object]]=None, display_mode: str=None, name: str=None, product_id: int=None, sales_channel: str=None, skus: List[ProductVariations200ResponseSkusInner]=None):
        """ProductVariations200Response - a model defined in OpenAPI

        :param available: The available of this ProductVariations200Response.
        :param dimensions: The dimensions of this ProductVariations200Response.
        :param dimensions_input_type: The dimensions_input_type of this ProductVariations200Response.
        :param dimensions_map: The dimensions_map of this ProductVariations200Response.
        :param display_mode: The display_mode of this ProductVariations200Response.
        :param name: The name of this ProductVariations200Response.
        :param product_id: The product_id of this ProductVariations200Response.
        :param sales_channel: The sales_channel of this ProductVariations200Response.
        :param skus: The skus of this ProductVariations200Response.
        """
        self.openapi_types = {
            'available': bool,
            'dimensions': List[str],
            'dimensions_input_type': Dict[str, str],
            'dimensions_map': Dict[str, List[object]],
            'display_mode': str,
            'name': str,
            'product_id': int,
            'sales_channel': str,
            'skus': List[ProductVariations200ResponseSkusInner]
        }

        self.attribute_map = {
            'available': 'available',
            'dimensions': 'dimensions',
            'dimensions_input_type': 'dimensionsInputType',
            'dimensions_map': 'dimensionsMap',
            'display_mode': 'displayMode',
            'name': 'name',
            'product_id': 'productId',
            'sales_channel': 'salesChannel',
            'skus': 'skus'
        }

        self._available = available
        self._dimensions = dimensions
        self._dimensions_input_type = dimensions_input_type
        self._dimensions_map = dimensions_map
        self._display_mode = display_mode
        self._name = name
        self._product_id = product_id
        self._sales_channel = sales_channel
        self._skus = skus

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductVariations200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductVariations_200_response of this ProductVariations200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this ProductVariations200Response.

        Defines if the product is available (`true`) or not (`false`).

        :return: The available of this ProductVariations200Response.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this ProductVariations200Response.

        Defines if the product is available (`true`) or not (`false`).

        :param available: The available of this ProductVariations200Response.
        :type available: bool
        """

        self._available = available

    @property
    def dimensions(self):
        """Gets the dimensions of this ProductVariations200Response.

        Lists SKU specifications.

        :return: The dimensions of this ProductVariations200Response.
        :rtype: List[str]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this ProductVariations200Response.

        Lists SKU specifications.

        :param dimensions: The dimensions of this ProductVariations200Response.
        :type dimensions: List[str]
        """

        self._dimensions = dimensions

    @property
    def dimensions_input_type(self):
        """Gets the dimensions_input_type of this ProductVariations200Response.

        Lists SKU specifications and their field type, in the following format: `\"{specificationName}\":\"{fieldType}\"`.

        :return: The dimensions_input_type of this ProductVariations200Response.
        :rtype: Dict[str, str]
        """
        return self._dimensions_input_type

    @dimensions_input_type.setter
    def dimensions_input_type(self, dimensions_input_type):
        """Sets the dimensions_input_type of this ProductVariations200Response.

        Lists SKU specifications and their field type, in the following format: `\"{specificationName}\":\"{fieldType}\"`.

        :param dimensions_input_type: The dimensions_input_type of this ProductVariations200Response.
        :type dimensions_input_type: Dict[str, str]
        """

        self._dimensions_input_type = dimensions_input_type

    @property
    def dimensions_map(self):
        """Gets the dimensions_map of this ProductVariations200Response.

        Lists SKU specifications and their possible values inside arrays.

        :return: The dimensions_map of this ProductVariations200Response.
        :rtype: Dict[str, List[object]]
        """
        return self._dimensions_map

    @dimensions_map.setter
    def dimensions_map(self, dimensions_map):
        """Sets the dimensions_map of this ProductVariations200Response.

        Lists SKU specifications and their possible values inside arrays.

        :param dimensions_map: The dimensions_map of this ProductVariations200Response.
        :type dimensions_map: Dict[str, List[object]]
        """

        self._dimensions_map = dimensions_map

    @property
    def display_mode(self):
        """Gets the display_mode of this ProductVariations200Response.

        Defines the mannner SKUs are displayed.

        :return: The display_mode of this ProductVariations200Response.
        :rtype: str
        """
        return self._display_mode

    @display_mode.setter
    def display_mode(self, display_mode):
        """Sets the display_mode of this ProductVariations200Response.

        Defines the mannner SKUs are displayed.

        :param display_mode: The display_mode of this ProductVariations200Response.
        :type display_mode: str
        """

        self._display_mode = display_mode

    @property
    def name(self):
        """Gets the name of this ProductVariations200Response.

        Product name.

        :return: The name of this ProductVariations200Response.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductVariations200Response.

        Product name.

        :param name: The name of this ProductVariations200Response.
        :type name: str
        """

        self._name = name

    @property
    def product_id(self):
        """Gets the product_id of this ProductVariations200Response.

        Product’s unique numerical identifier.

        :return: The product_id of this ProductVariations200Response.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductVariations200Response.

        Product’s unique numerical identifier.

        :param product_id: The product_id of this ProductVariations200Response.
        :type product_id: int
        """

        self._product_id = product_id

    @property
    def sales_channel(self):
        """Gets the sales_channel of this ProductVariations200Response.

        Trade policy ID.

        :return: The sales_channel of this ProductVariations200Response.
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this ProductVariations200Response.

        Trade policy ID.

        :param sales_channel: The sales_channel of this ProductVariations200Response.
        :type sales_channel: str
        """

        self._sales_channel = sales_channel

    @property
    def skus(self):
        """Gets the skus of this ProductVariations200Response.

        Array containing information about the product's SKUs.

        :return: The skus of this ProductVariations200Response.
        :rtype: List[ProductVariations200ResponseSkusInner]
        """
        return self._skus

    @skus.setter
    def skus(self, skus):
        """Sets the skus of this ProductVariations200Response.

        Array containing information about the product's SKUs.

        :param skus: The skus of this ProductVariations200Response.
        :type skus: List[ProductVariations200ResponseSkusInner]
        """

        self._skus = skus
