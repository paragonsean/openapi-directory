# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency_format_info import CurrencyFormatInfo
from openapi_server import util


class SalesChannelbyId200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition_rule: str=None, country_code: str=None, culture_info: str=None, currency_code: str=None, currency_decimal_digits: int=None, currency_format_info: CurrencyFormatInfo=None, currency_locale: int=None, currency_symbol: str=None, id: int=None, is_active: bool=None, name: str=None, origin: str=None, position: int=None, product_cluster_id: int=None, time_zone: str=None):
        """SalesChannelbyId200Response - a model defined in OpenAPI

        :param condition_rule: The condition_rule of this SalesChannelbyId200Response.
        :param country_code: The country_code of this SalesChannelbyId200Response.
        :param culture_info: The culture_info of this SalesChannelbyId200Response.
        :param currency_code: The currency_code of this SalesChannelbyId200Response.
        :param currency_decimal_digits: The currency_decimal_digits of this SalesChannelbyId200Response.
        :param currency_format_info: The currency_format_info of this SalesChannelbyId200Response.
        :param currency_locale: The currency_locale of this SalesChannelbyId200Response.
        :param currency_symbol: The currency_symbol of this SalesChannelbyId200Response.
        :param id: The id of this SalesChannelbyId200Response.
        :param is_active: The is_active of this SalesChannelbyId200Response.
        :param name: The name of this SalesChannelbyId200Response.
        :param origin: The origin of this SalesChannelbyId200Response.
        :param position: The position of this SalesChannelbyId200Response.
        :param product_cluster_id: The product_cluster_id of this SalesChannelbyId200Response.
        :param time_zone: The time_zone of this SalesChannelbyId200Response.
        """
        self.openapi_types = {
            'condition_rule': str,
            'country_code': str,
            'culture_info': str,
            'currency_code': str,
            'currency_decimal_digits': int,
            'currency_format_info': CurrencyFormatInfo,
            'currency_locale': int,
            'currency_symbol': str,
            'id': int,
            'is_active': bool,
            'name': str,
            'origin': str,
            'position': int,
            'product_cluster_id': int,
            'time_zone': str
        }

        self.attribute_map = {
            'condition_rule': 'ConditionRule',
            'country_code': 'CountryCode',
            'culture_info': 'CultureInfo',
            'currency_code': 'CurrencyCode',
            'currency_decimal_digits': 'CurrencyDecimalDigits',
            'currency_format_info': 'CurrencyFormatInfo',
            'currency_locale': 'CurrencyLocale',
            'currency_symbol': 'CurrencySymbol',
            'id': 'Id',
            'is_active': 'IsActive',
            'name': 'Name',
            'origin': 'Origin',
            'position': 'Position',
            'product_cluster_id': 'ProductClusterId',
            'time_zone': 'TimeZone'
        }

        self._condition_rule = condition_rule
        self._country_code = country_code
        self._culture_info = culture_info
        self._currency_code = currency_code
        self._currency_decimal_digits = currency_decimal_digits
        self._currency_format_info = currency_format_info
        self._currency_locale = currency_locale
        self._currency_symbol = currency_symbol
        self._id = id
        self._is_active = is_active
        self._name = name
        self._origin = origin
        self._position = position
        self._product_cluster_id = product_cluster_id
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesChannelbyId200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SalesChannelbyId_200_response of this SalesChannelbyId200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition_rule(self):
        """Gets the condition_rule of this SalesChannelbyId200Response.

        Defines what is the conditional rule to activate de Sales Channel.

        :return: The condition_rule of this SalesChannelbyId200Response.
        :rtype: str
        """
        return self._condition_rule

    @condition_rule.setter
    def condition_rule(self, condition_rule):
        """Sets the condition_rule of this SalesChannelbyId200Response.

        Defines what is the conditional rule to activate de Sales Channel.

        :param condition_rule: The condition_rule of this SalesChannelbyId200Response.
        :type condition_rule: str
        """

        self._condition_rule = condition_rule

    @property
    def country_code(self):
        """Gets the country_code of this SalesChannelbyId200Response.

        Country Code in ISO 3166-1 alfa-3 Standard.

        :return: The country_code of this SalesChannelbyId200Response.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this SalesChannelbyId200Response.

        Country Code in ISO 3166-1 alfa-3 Standard.

        :param country_code: The country_code of this SalesChannelbyId200Response.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def culture_info(self):
        """Gets the culture_info of this SalesChannelbyId200Response.

        Language Country code in LCIDstring Standard.

        :return: The culture_info of this SalesChannelbyId200Response.
        :rtype: str
        """
        return self._culture_info

    @culture_info.setter
    def culture_info(self, culture_info):
        """Sets the culture_info of this SalesChannelbyId200Response.

        Language Country code in LCIDstring Standard.

        :param culture_info: The culture_info of this SalesChannelbyId200Response.
        :type culture_info: str
        """

        self._culture_info = culture_info

    @property
    def currency_code(self):
        """Gets the currency_code of this SalesChannelbyId200Response.

        Currency Code in ISO 4217 standard.

        :return: The currency_code of this SalesChannelbyId200Response.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this SalesChannelbyId200Response.

        Currency Code in ISO 4217 standard.

        :param currency_code: The currency_code of this SalesChannelbyId200Response.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def currency_decimal_digits(self):
        """Gets the currency_decimal_digits of this SalesChannelbyId200Response.

        Quantity of Currency Decimal Digits.

        :return: The currency_decimal_digits of this SalesChannelbyId200Response.
        :rtype: int
        """
        return self._currency_decimal_digits

    @currency_decimal_digits.setter
    def currency_decimal_digits(self, currency_decimal_digits):
        """Sets the currency_decimal_digits of this SalesChannelbyId200Response.

        Quantity of Currency Decimal Digits.

        :param currency_decimal_digits: The currency_decimal_digits of this SalesChannelbyId200Response.
        :type currency_decimal_digits: int
        """

        self._currency_decimal_digits = currency_decimal_digits

    @property
    def currency_format_info(self):
        """Gets the currency_format_info of this SalesChannelbyId200Response.


        :return: The currency_format_info of this SalesChannelbyId200Response.
        :rtype: CurrencyFormatInfo
        """
        return self._currency_format_info

    @currency_format_info.setter
    def currency_format_info(self, currency_format_info):
        """Sets the currency_format_info of this SalesChannelbyId200Response.


        :param currency_format_info: The currency_format_info of this SalesChannelbyId200Response.
        :type currency_format_info: CurrencyFormatInfo
        """

        self._currency_format_info = currency_format_info

    @property
    def currency_locale(self):
        """Gets the currency_locale of this SalesChannelbyId200Response.

        Currency Locale Code in LCID standard.

        :return: The currency_locale of this SalesChannelbyId200Response.
        :rtype: int
        """
        return self._currency_locale

    @currency_locale.setter
    def currency_locale(self, currency_locale):
        """Sets the currency_locale of this SalesChannelbyId200Response.

        Currency Locale Code in LCID standard.

        :param currency_locale: The currency_locale of this SalesChannelbyId200Response.
        :type currency_locale: int
        """

        self._currency_locale = currency_locale

    @property
    def currency_symbol(self):
        """Gets the currency_symbol of this SalesChannelbyId200Response.

        Currency symbol.

        :return: The currency_symbol of this SalesChannelbyId200Response.
        :rtype: str
        """
        return self._currency_symbol

    @currency_symbol.setter
    def currency_symbol(self, currency_symbol):
        """Sets the currency_symbol of this SalesChannelbyId200Response.

        Currency symbol.

        :param currency_symbol: The currency_symbol of this SalesChannelbyId200Response.
        :type currency_symbol: str
        """

        self._currency_symbol = currency_symbol

    @property
    def id(self):
        """Gets the id of this SalesChannelbyId200Response.

        Sales Channel unique identifier.

        :return: The id of this SalesChannelbyId200Response.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SalesChannelbyId200Response.

        Sales Channel unique identifier.

        :param id: The id of this SalesChannelbyId200Response.
        :type id: int
        """

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this SalesChannelbyId200Response.

        Defines if the Sales Channel is active (`true`) or not (`false`).

        :return: The is_active of this SalesChannelbyId200Response.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this SalesChannelbyId200Response.

        Defines if the Sales Channel is active (`true`) or not (`false`).

        :param is_active: The is_active of this SalesChannelbyId200Response.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def name(self):
        """Gets the name of this SalesChannelbyId200Response.

        Sales Channel name.

        :return: The name of this SalesChannelbyId200Response.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SalesChannelbyId200Response.

        Sales Channel name.

        :param name: The name of this SalesChannelbyId200Response.
        :type name: str
        """

        self._name = name

    @property
    def origin(self):
        """Gets the origin of this SalesChannelbyId200Response.

        Origin of products in the Sales Channel.

        :return: The origin of this SalesChannelbyId200Response.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this SalesChannelbyId200Response.

        Origin of products in the Sales Channel.

        :param origin: The origin of this SalesChannelbyId200Response.
        :type origin: str
        """

        self._origin = origin

    @property
    def position(self):
        """Gets the position of this SalesChannelbyId200Response.

        Defines the position on index.

        :return: The position of this SalesChannelbyId200Response.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this SalesChannelbyId200Response.

        Defines the position on index.

        :param position: The position of this SalesChannelbyId200Response.
        :type position: int
        """

        self._position = position

    @property
    def product_cluster_id(self):
        """Gets the product_cluster_id of this SalesChannelbyId200Response.

        Product Cluster ID, if the Sales Channel has releated Product Cluster.

        :return: The product_cluster_id of this SalesChannelbyId200Response.
        :rtype: int
        """
        return self._product_cluster_id

    @product_cluster_id.setter
    def product_cluster_id(self, product_cluster_id):
        """Sets the product_cluster_id of this SalesChannelbyId200Response.

        Product Cluster ID, if the Sales Channel has releated Product Cluster.

        :param product_cluster_id: The product_cluster_id of this SalesChannelbyId200Response.
        :type product_cluster_id: int
        """

        self._product_cluster_id = product_cluster_id

    @property
    def time_zone(self):
        """Gets the time_zone of this SalesChannelbyId200Response.

        Name of Time Zone.

        :return: The time_zone of this SalesChannelbyId200Response.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this SalesChannelbyId200Response.

        Name of Time Zone.

        :param time_zone: The time_zone of this SalesChannelbyId200Response.
        :type time_zone: str
        """

        self._time_zone = time_zone
