# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RequestBody12(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sku_id: int=None):
        """RequestBody12 - a model defined in OpenAPI

        :param sku_id: The sku_id of this RequestBody12.
        """
        self.openapi_types = {
            'sku_id': int
        }

        self.attribute_map = {
            'sku_id': 'SkuId'
        }

        self._sku_id = sku_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestBody12':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request_body_12 of this RequestBody12.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sku_id(self):
        """Gets the sku_id of this RequestBody12.

        Unique identifier of an SKU.

        :return: The sku_id of this RequestBody12.
        :rtype: int
        """
        return self._sku_id

    @sku_id.setter
    def sku_id(self, sku_id):
        """Sets the sku_id of this RequestBody12.

        Unique identifier of an SKU.

        :param sku_id: The sku_id of this RequestBody12.
        :type sku_id: int
        """
        if sku_id is None:
            raise ValueError("Invalid value for `sku_id`, must not be `None`")

        self._sku_id = sku_id
