# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlternateIds(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ean: str=None, ref_id: str=None):
        """AlternateIds - a model defined in OpenAPI

        :param ean: The ean of this AlternateIds.
        :param ref_id: The ref_id of this AlternateIds.
        """
        self.openapi_types = {
            'ean': str,
            'ref_id': str
        }

        self.attribute_map = {
            'ean': 'Ean',
            'ref_id': 'RefId'
        }

        self._ean = ean
        self._ref_id = ref_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlternateIds':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlternateIds of this AlternateIds.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ean(self):
        """Gets the ean of this AlternateIds.

        SKU EAN.

        :return: The ean of this AlternateIds.
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this AlternateIds.

        SKU EAN.

        :param ean: The ean of this AlternateIds.
        :type ean: str
        """

        self._ean = ean

    @property
    def ref_id(self):
        """Gets the ref_id of this AlternateIds.

        SKU Reference ID.

        :return: The ref_id of this AlternateIds.
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this AlternateIds.

        SKU Reference ID.

        :param ref_id: The ref_id of this AlternateIds.
        :type ref_id: str
        """

        self._ref_id = ref_id
