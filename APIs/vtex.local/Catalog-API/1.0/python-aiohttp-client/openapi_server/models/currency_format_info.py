# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CurrencyFormatInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_decimal_digits: int=None, currency_decimal_separator: str=None, currency_group_separator: str=None, currency_group_size: int=None, starts_with_currency_symbol: bool=None):
        """CurrencyFormatInfo - a model defined in OpenAPI

        :param currency_decimal_digits: The currency_decimal_digits of this CurrencyFormatInfo.
        :param currency_decimal_separator: The currency_decimal_separator of this CurrencyFormatInfo.
        :param currency_group_separator: The currency_group_separator of this CurrencyFormatInfo.
        :param currency_group_size: The currency_group_size of this CurrencyFormatInfo.
        :param starts_with_currency_symbol: The starts_with_currency_symbol of this CurrencyFormatInfo.
        """
        self.openapi_types = {
            'currency_decimal_digits': int,
            'currency_decimal_separator': str,
            'currency_group_separator': str,
            'currency_group_size': int,
            'starts_with_currency_symbol': bool
        }

        self.attribute_map = {
            'currency_decimal_digits': 'CurrencyDecimalDigits',
            'currency_decimal_separator': 'CurrencyDecimalSeparator',
            'currency_group_separator': 'CurrencyGroupSeparator',
            'currency_group_size': 'CurrencyGroupSize',
            'starts_with_currency_symbol': 'StartsWithCurrencySymbol'
        }

        self._currency_decimal_digits = currency_decimal_digits
        self._currency_decimal_separator = currency_decimal_separator
        self._currency_group_separator = currency_group_separator
        self._currency_group_size = currency_group_size
        self._starts_with_currency_symbol = starts_with_currency_symbol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CurrencyFormatInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CurrencyFormatInfo of this CurrencyFormatInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_decimal_digits(self):
        """Gets the currency_decimal_digits of this CurrencyFormatInfo.

        Quantity of Currency Decimal Digits.

        :return: The currency_decimal_digits of this CurrencyFormatInfo.
        :rtype: int
        """
        return self._currency_decimal_digits

    @currency_decimal_digits.setter
    def currency_decimal_digits(self, currency_decimal_digits):
        """Sets the currency_decimal_digits of this CurrencyFormatInfo.

        Quantity of Currency Decimal Digits.

        :param currency_decimal_digits: The currency_decimal_digits of this CurrencyFormatInfo.
        :type currency_decimal_digits: int
        """

        self._currency_decimal_digits = currency_decimal_digits

    @property
    def currency_decimal_separator(self):
        """Gets the currency_decimal_separator of this CurrencyFormatInfo.

        Defines which Currency Decimal Separator will be applied.

        :return: The currency_decimal_separator of this CurrencyFormatInfo.
        :rtype: str
        """
        return self._currency_decimal_separator

    @currency_decimal_separator.setter
    def currency_decimal_separator(self, currency_decimal_separator):
        """Sets the currency_decimal_separator of this CurrencyFormatInfo.

        Defines which Currency Decimal Separator will be applied.

        :param currency_decimal_separator: The currency_decimal_separator of this CurrencyFormatInfo.
        :type currency_decimal_separator: str
        """

        self._currency_decimal_separator = currency_decimal_separator

    @property
    def currency_group_separator(self):
        """Gets the currency_group_separator of this CurrencyFormatInfo.

        Defines which Currency Group Separator will be applied.

        :return: The currency_group_separator of this CurrencyFormatInfo.
        :rtype: str
        """
        return self._currency_group_separator

    @currency_group_separator.setter
    def currency_group_separator(self, currency_group_separator):
        """Sets the currency_group_separator of this CurrencyFormatInfo.

        Defines which Currency Group Separator will be applied.

        :param currency_group_separator: The currency_group_separator of this CurrencyFormatInfo.
        :type currency_group_separator: str
        """

        self._currency_group_separator = currency_group_separator

    @property
    def currency_group_size(self):
        """Gets the currency_group_size of this CurrencyFormatInfo.

        Define how many characters will be grouped.

        :return: The currency_group_size of this CurrencyFormatInfo.
        :rtype: int
        """
        return self._currency_group_size

    @currency_group_size.setter
    def currency_group_size(self, currency_group_size):
        """Sets the currency_group_size of this CurrencyFormatInfo.

        Define how many characters will be grouped.

        :param currency_group_size: The currency_group_size of this CurrencyFormatInfo.
        :type currency_group_size: int
        """

        self._currency_group_size = currency_group_size

    @property
    def starts_with_currency_symbol(self):
        """Gets the starts_with_currency_symbol of this CurrencyFormatInfo.

        Defines if all prices will be initiated with Currency Symbol (`true`) or not (`false`).

        :return: The starts_with_currency_symbol of this CurrencyFormatInfo.
        :rtype: bool
        """
        return self._starts_with_currency_symbol

    @starts_with_currency_symbol.setter
    def starts_with_currency_symbol(self, starts_with_currency_symbol):
        """Sets the starts_with_currency_symbol of this CurrencyFormatInfo.

        Defines if all prices will be initiated with Currency Symbol (`true`) or not (`false`).

        :param starts_with_currency_symbol: The starts_with_currency_symbol of this CurrencyFormatInfo.
        :type starts_with_currency_symbol: bool
        """

        self._starts_with_currency_symbol = starts_with_currency_symbol
