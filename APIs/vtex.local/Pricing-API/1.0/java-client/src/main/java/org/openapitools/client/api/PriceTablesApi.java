/*
 * Pricing API
 *   > Check the new [Pricing onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/pricing-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Pricing and is organized by focusing on the developer's journey.    Pricing is the VTEX module responsible for the SKU's price list. At this module we have the base price of each SKU, some optional fixed prices by trade policy, and some rules that can be applied to generate dynamically different final prices according to the purchase context and the trade policy. The variables used in this collection are:      * **{{accountName}}** = You VTEX account name.    * **{{tradePolicyId}}** = Current Trade Policy ID.    * **{{itemId}}** = SKU ID.    * **{{X-VTEX-API-AppKey}}** and **{{X-VTEX-API-AppToken}}** = Credentials.    You can get more information about how to use this module and its business logic at [VTEX Help](http://help.vtex.com).    ## Rate Limits    ### Limits per route    - `GET`:  routes are not rate limited at the moment  - `PUT or POST`: `40 requests/second/account` in any **price insert/update route** with 1000 *Burst Credits*  - `DELETE`: `16 requests/second/account` in any **price deletion route**, with 300 *Burst Credits*.    ### What are Burst Credits?    In case the account exceeds the limit frequency for a  `Rate Limiter` (for instance, when one account makes `41 requests/second` in any `price insert/update route`), we decrease from the *Burst Credit* count the exceeding (in this example, *1 Credit*).    In the event of the *Burst Credits* reaching **0 (zero)**, the request is blocked with a `Status 429` response.    The credits fill up over time when the route is not being used, in the same rate as the route's `Rate Limiter`. In our example, for each second not sending a **PUT or POST request**, we increase *40 Burst Credits* to this `Rate Limiter`    ### New Response Headers    In the response headers of any request to Pricing v2 there are some new headers indicating the current status of the Rate Limiting.  This information may be useful to evaluate the ideal frequency to send requests to a route, and when to send a new request in the event of reaching a Rate Limit.    - `Ratelimit-Limit` - Total *Burst Credits* offered to a route  - `Ratelimit-Remaining` - How many *Burst Credits* are still available to use  - `Ratelimit-Reset` - How long (in seconds) it will take to the *Burst Credits* to fill up completely (It will fill up to the `Ratelimit-Limit`)  - `Retry-After` - Indicates how many seconds you will need to wait until the `Rate Limiter` accepts a new request to this route again. If this header response exists, this means your current request has been rate limited and has not been processed.    ### How to integrate with Pricing v2 considering our Rate Limits    Integrate considering the limits of **requests/route/account** specified in the [*Limits per route*](#rate-limits) section, avoiding to surpass this frequency.    If you happen to be Rate Limited, wait the time in seconds specified in `Retry-After` before making another request to the service, and reduce the rate of requests per second that your integration is making.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Getallpricetablesandrules200ResponseInner;
import org.openapitools.client.model.Getrulesforapricetable200Response;
import org.openapitools.client.model.PricingPipelineCatalogPriceTableIdPutRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PriceTablesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PriceTablesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PriceTablesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getallpricetablesandrules
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getallpricetablesandrulesCall(String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.vtex.com/{account}/pricing" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pricing/pipeline/catalog";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getallpricetablesandrulesValidateBeforeCall(String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getallpricetablesandrules(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getallpricetablesandrules(Async)");
        }

        return getallpricetablesandrulesCall(contentType, accept, _callback);

    }

    /**
     * Get all price tables and their rules
     * This method will retrieve all price tables and their rules.    ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;tradePolicyId\&quot;: \&quot;2\&quot;,          \&quot;rules\&quot;: [              {                  \&quot;id\&quot;: 0,                  \&quot;context\&quot;: {                      \&quot;categories\&quot;: {},                      \&quot;brands\&quot;: {},                      \&quot;stockStatuses\&quot;: null,                      \&quot;internalCategories\&quot;: null,                      \&quot;markupRange\&quot;: null,                      \&quot;dateRange\&quot;: null                  },                  \&quot;percentualModifier\&quot;: 20              }          ]      },      {          \&quot;tradePolicyId\&quot;: \&quot;b2c\&quot;,          \&quot;rules\&quot;: [              {                  \&quot;id\&quot;: 0,                  \&quot;context\&quot;: {                      \&quot;categories\&quot;: {},                      \&quot;brands\&quot;: {                          \&quot;2000009\&quot;: \&quot;Whiskas\&quot;                      },                      \&quot;stockStatuses\&quot;: null,                      \&quot;internalCategories\&quot;: null,                      \&quot;markupRange\&quot;: null,                      \&quot;dateRange\&quot;: null                  },                  \&quot;percentualModifier\&quot;: 15              }          ]      }  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @return List&lt;Getallpricetablesandrules200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Getallpricetablesandrules200ResponseInner> getallpricetablesandrules(String contentType, String accept) throws ApiException {
        ApiResponse<List<Getallpricetablesandrules200ResponseInner>> localVarResp = getallpricetablesandrulesWithHttpInfo(contentType, accept);
        return localVarResp.getData();
    }

    /**
     * Get all price tables and their rules
     * This method will retrieve all price tables and their rules.    ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;tradePolicyId\&quot;: \&quot;2\&quot;,          \&quot;rules\&quot;: [              {                  \&quot;id\&quot;: 0,                  \&quot;context\&quot;: {                      \&quot;categories\&quot;: {},                      \&quot;brands\&quot;: {},                      \&quot;stockStatuses\&quot;: null,                      \&quot;internalCategories\&quot;: null,                      \&quot;markupRange\&quot;: null,                      \&quot;dateRange\&quot;: null                  },                  \&quot;percentualModifier\&quot;: 20              }          ]      },      {          \&quot;tradePolicyId\&quot;: \&quot;b2c\&quot;,          \&quot;rules\&quot;: [              {                  \&quot;id\&quot;: 0,                  \&quot;context\&quot;: {                      \&quot;categories\&quot;: {},                      \&quot;brands\&quot;: {                          \&quot;2000009\&quot;: \&quot;Whiskas\&quot;                      },                      \&quot;stockStatuses\&quot;: null,                      \&quot;internalCategories\&quot;: null,                      \&quot;markupRange\&quot;: null,                      \&quot;dateRange\&quot;: null                  },                  \&quot;percentualModifier\&quot;: 15              }          ]      }  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @return ApiResponse&lt;List&lt;Getallpricetablesandrules200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Getallpricetablesandrules200ResponseInner>> getallpricetablesandrulesWithHttpInfo(String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = getallpricetablesandrulesValidateBeforeCall(contentType, accept, null);
        Type localVarReturnType = new TypeToken<List<Getallpricetablesandrules200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all price tables and their rules (asynchronously)
     * This method will retrieve all price tables and their rules.    ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;tradePolicyId\&quot;: \&quot;2\&quot;,          \&quot;rules\&quot;: [              {                  \&quot;id\&quot;: 0,                  \&quot;context\&quot;: {                      \&quot;categories\&quot;: {},                      \&quot;brands\&quot;: {},                      \&quot;stockStatuses\&quot;: null,                      \&quot;internalCategories\&quot;: null,                      \&quot;markupRange\&quot;: null,                      \&quot;dateRange\&quot;: null                  },                  \&quot;percentualModifier\&quot;: 20              }          ]      },      {          \&quot;tradePolicyId\&quot;: \&quot;b2c\&quot;,          \&quot;rules\&quot;: [              {                  \&quot;id\&quot;: 0,                  \&quot;context\&quot;: {                      \&quot;categories\&quot;: {},                      \&quot;brands\&quot;: {                          \&quot;2000009\&quot;: \&quot;Whiskas\&quot;                      },                      \&quot;stockStatuses\&quot;: null,                      \&quot;internalCategories\&quot;: null,                      \&quot;markupRange\&quot;: null,                      \&quot;dateRange\&quot;: null                  },                  \&quot;percentualModifier\&quot;: 15              }          ]      }  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getallpricetablesandrulesAsync(String contentType, String accept, final ApiCallback<List<Getallpricetablesandrules200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getallpricetablesandrulesValidateBeforeCall(contentType, accept, _callback);
        Type localVarReturnType = new TypeToken<List<Getallpricetablesandrules200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getrulesforapricetable
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param priceTableId Price Table Name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getrulesforapricetableCall(String contentType, String accept, String priceTableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.vtex.com/{account}/pricing" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pricing/pipeline/catalog/{priceTableId}"
            .replace("{" + "priceTableId" + "}", localVarApiClient.escapeString(priceTableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getrulesforapricetableValidateBeforeCall(String contentType, String accept, String priceTableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getrulesforapricetable(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getrulesforapricetable(Async)");
        }

        // verify the required parameter 'priceTableId' is set
        if (priceTableId == null) {
            throw new ApiException("Missing the required parameter 'priceTableId' when calling getrulesforapricetable(Async)");
        }

        return getrulesforapricetableCall(contentType, accept, priceTableId, _callback);

    }

    /**
     * Get rules for a price table
     * This method will retrieve the rules from a specific Price Table.    ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;tradePolicyId\&quot;: \&quot;b2c\&quot;,      \&quot;rules\&quot;: [{          \&quot;id\&quot;: 0,          \&quot;context\&quot;: {              \&quot;categories\&quot;: {},              \&quot;brands\&quot;: {                  \&quot;2000009\&quot;: \&quot;Whiskas\&quot;              },              \&quot;stockStatuses\&quot;: null,              \&quot;internalCategories\&quot;: null,              \&quot;markupRange\&quot;: null,              \&quot;dateRange\&quot;: null          },          \&quot;percentualModifier\&quot;: 15      }]  }  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param priceTableId Price Table Name. (required)
     * @return Getrulesforapricetable200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public Getrulesforapricetable200Response getrulesforapricetable(String contentType, String accept, String priceTableId) throws ApiException {
        ApiResponse<Getrulesforapricetable200Response> localVarResp = getrulesforapricetableWithHttpInfo(contentType, accept, priceTableId);
        return localVarResp.getData();
    }

    /**
     * Get rules for a price table
     * This method will retrieve the rules from a specific Price Table.    ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;tradePolicyId\&quot;: \&quot;b2c\&quot;,      \&quot;rules\&quot;: [{          \&quot;id\&quot;: 0,          \&quot;context\&quot;: {              \&quot;categories\&quot;: {},              \&quot;brands\&quot;: {                  \&quot;2000009\&quot;: \&quot;Whiskas\&quot;              },              \&quot;stockStatuses\&quot;: null,              \&quot;internalCategories\&quot;: null,              \&quot;markupRange\&quot;: null,              \&quot;dateRange\&quot;: null          },          \&quot;percentualModifier\&quot;: 15      }]  }  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param priceTableId Price Table Name. (required)
     * @return ApiResponse&lt;Getrulesforapricetable200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Getrulesforapricetable200Response> getrulesforapricetableWithHttpInfo(String contentType, String accept, String priceTableId) throws ApiException {
        okhttp3.Call localVarCall = getrulesforapricetableValidateBeforeCall(contentType, accept, priceTableId, null);
        Type localVarReturnType = new TypeToken<Getrulesforapricetable200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get rules for a price table (asynchronously)
     * This method will retrieve the rules from a specific Price Table.    ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;tradePolicyId\&quot;: \&quot;b2c\&quot;,      \&quot;rules\&quot;: [{          \&quot;id\&quot;: 0,          \&quot;context\&quot;: {              \&quot;categories\&quot;: {},              \&quot;brands\&quot;: {                  \&quot;2000009\&quot;: \&quot;Whiskas\&quot;              },              \&quot;stockStatuses\&quot;: null,              \&quot;internalCategories\&quot;: null,              \&quot;markupRange\&quot;: null,              \&quot;dateRange\&quot;: null          },          \&quot;percentualModifier\&quot;: 15      }]  }  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param priceTableId Price Table Name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getrulesforapricetableAsync(String contentType, String accept, String priceTableId, final ApiCallback<Getrulesforapricetable200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getrulesforapricetableValidateBeforeCall(contentType, accept, priceTableId, _callback);
        Type localVarReturnType = new TypeToken<Getrulesforapricetable200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listpricetables
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listpricetablesCall(String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.vtex.com/{account}/pricing" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pricing/tables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listpricetablesValidateBeforeCall(String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling listpricetables(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling listpricetables(Async)");
        }

        return listpricetablesCall(contentType, accept, _callback);

    }

    /**
     * List price tables
     * This method will list all price tables.    ## Response body example    &#x60;&#x60;&#x60;json  [      \&quot;1\&quot;,      \&quot;2\&quot;,      \&quot;3\&quot;,      \&quot;b2c\&quot;,      \&quot;b2b\&quot;,      \&quot;gold\&quot;  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<String> listpricetables(String contentType, String accept) throws ApiException {
        ApiResponse<List<String>> localVarResp = listpricetablesWithHttpInfo(contentType, accept);
        return localVarResp.getData();
    }

    /**
     * List price tables
     * This method will list all price tables.    ## Response body example    &#x60;&#x60;&#x60;json  [      \&quot;1\&quot;,      \&quot;2\&quot;,      \&quot;3\&quot;,      \&quot;b2c\&quot;,      \&quot;b2b\&quot;,      \&quot;gold\&quot;  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> listpricetablesWithHttpInfo(String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = listpricetablesValidateBeforeCall(contentType, accept, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List price tables (asynchronously)
     * This method will list all price tables.    ## Response body example    &#x60;&#x60;&#x60;json  [      \&quot;1\&quot;,      \&quot;2\&quot;,      \&quot;3\&quot;,      \&quot;b2c\&quot;,      \&quot;b2b\&quot;,      \&quot;gold\&quot;  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listpricetablesAsync(String contentType, String accept, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listpricetablesValidateBeforeCall(contentType, accept, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pricingPipelineCatalogPriceTableIdPut
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param priceTableId Price Table Name. (required)
     * @param pricingPipelineCatalogPriceTableIdPutRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pricingPipelineCatalogPriceTableIdPutCall(String contentType, String accept, String priceTableId, PricingPipelineCatalogPriceTableIdPutRequest pricingPipelineCatalogPriceTableIdPutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pricingPipelineCatalogPriceTableIdPutRequest;

        // create path and map variables
        String localVarPath = "/pricing/pipeline/catalog/{priceTableId}"
            .replace("{" + "priceTableId" + "}", localVarApiClient.escapeString(priceTableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pricingPipelineCatalogPriceTableIdPutValidateBeforeCall(String contentType, String accept, String priceTableId, PricingPipelineCatalogPriceTableIdPutRequest pricingPipelineCatalogPriceTableIdPutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling pricingPipelineCatalogPriceTableIdPut(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling pricingPipelineCatalogPriceTableIdPut(Async)");
        }

        // verify the required parameter 'priceTableId' is set
        if (priceTableId == null) {
            throw new ApiException("Missing the required parameter 'priceTableId' when calling pricingPipelineCatalogPriceTableIdPut(Async)");
        }

        return pricingPipelineCatalogPriceTableIdPutCall(contentType, accept, priceTableId, pricingPipelineCatalogPriceTableIdPutRequest, _callback);

    }

    /**
     * Update rules for a price table
     * This method will update the rules from a specific Price Table. It will delete all the rules from the requested Price Table and create new rules based on the content of the request.    ## Request body example    &#x60;&#x60;&#x60;json  {      \&quot;rules\&quot;: [            {                 \&quot;id\&quot;: 1,                 \&quot;context\&quot;: {                      \&quot;categories\&quot;: {                           \&quot;Category ID\&quot;: \&quot;1\&quot;,                           \&quot;Category Name\&quot;: \&quot;Alimentação\&quot;                      },                      \&quot;brands\&quot;: {                           \&quot;Brand ID\&quot;: \&quot;2000002\&quot;,                           \&quot;Brand Name\&quot;: \&quot;Whiskas\&quot;                      },                      \&quot;markupRange\&quot;: {                           \&quot;from\&quot;: 0,                           \&quot;to\&quot;: 200                      },                      \&quot;dateRange\&quot;: {                           \&quot;from\&quot;: \&quot;2022-01-23T19:00:00.000Z\&quot;,                           \&quot;to\&quot;: \&quot;2023-10-26T00:00:00.000Z\&quot;                      }                 },                 \&quot;percentualModifier\&quot;: 0            }      ]  }  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param priceTableId Price Table Name. (required)
     * @param pricingPipelineCatalogPriceTableIdPutRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public void pricingPipelineCatalogPriceTableIdPut(String contentType, String accept, String priceTableId, PricingPipelineCatalogPriceTableIdPutRequest pricingPipelineCatalogPriceTableIdPutRequest) throws ApiException {
        pricingPipelineCatalogPriceTableIdPutWithHttpInfo(contentType, accept, priceTableId, pricingPipelineCatalogPriceTableIdPutRequest);
    }

    /**
     * Update rules for a price table
     * This method will update the rules from a specific Price Table. It will delete all the rules from the requested Price Table and create new rules based on the content of the request.    ## Request body example    &#x60;&#x60;&#x60;json  {      \&quot;rules\&quot;: [            {                 \&quot;id\&quot;: 1,                 \&quot;context\&quot;: {                      \&quot;categories\&quot;: {                           \&quot;Category ID\&quot;: \&quot;1\&quot;,                           \&quot;Category Name\&quot;: \&quot;Alimentação\&quot;                      },                      \&quot;brands\&quot;: {                           \&quot;Brand ID\&quot;: \&quot;2000002\&quot;,                           \&quot;Brand Name\&quot;: \&quot;Whiskas\&quot;                      },                      \&quot;markupRange\&quot;: {                           \&quot;from\&quot;: 0,                           \&quot;to\&quot;: 200                      },                      \&quot;dateRange\&quot;: {                           \&quot;from\&quot;: \&quot;2022-01-23T19:00:00.000Z\&quot;,                           \&quot;to\&quot;: \&quot;2023-10-26T00:00:00.000Z\&quot;                      }                 },                 \&quot;percentualModifier\&quot;: 0            }      ]  }  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param priceTableId Price Table Name. (required)
     * @param pricingPipelineCatalogPriceTableIdPutRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pricingPipelineCatalogPriceTableIdPutWithHttpInfo(String contentType, String accept, String priceTableId, PricingPipelineCatalogPriceTableIdPutRequest pricingPipelineCatalogPriceTableIdPutRequest) throws ApiException {
        okhttp3.Call localVarCall = pricingPipelineCatalogPriceTableIdPutValidateBeforeCall(contentType, accept, priceTableId, pricingPipelineCatalogPriceTableIdPutRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update rules for a price table (asynchronously)
     * This method will update the rules from a specific Price Table. It will delete all the rules from the requested Price Table and create new rules based on the content of the request.    ## Request body example    &#x60;&#x60;&#x60;json  {      \&quot;rules\&quot;: [            {                 \&quot;id\&quot;: 1,                 \&quot;context\&quot;: {                      \&quot;categories\&quot;: {                           \&quot;Category ID\&quot;: \&quot;1\&quot;,                           \&quot;Category Name\&quot;: \&quot;Alimentação\&quot;                      },                      \&quot;brands\&quot;: {                           \&quot;Brand ID\&quot;: \&quot;2000002\&quot;,                           \&quot;Brand Name\&quot;: \&quot;Whiskas\&quot;                      },                      \&quot;markupRange\&quot;: {                           \&quot;from\&quot;: 0,                           \&quot;to\&quot;: 200                      },                      \&quot;dateRange\&quot;: {                           \&quot;from\&quot;: \&quot;2022-01-23T19:00:00.000Z\&quot;,                           \&quot;to\&quot;: \&quot;2023-10-26T00:00:00.000Z\&quot;                      }                 },                 \&quot;percentualModifier\&quot;: 0            }      ]  }  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param priceTableId Price Table Name. (required)
     * @param pricingPipelineCatalogPriceTableIdPutRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pricingPipelineCatalogPriceTableIdPutAsync(String contentType, String accept, String priceTableId, PricingPipelineCatalogPriceTableIdPutRequest pricingPipelineCatalogPriceTableIdPutRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pricingPipelineCatalogPriceTableIdPutValidateBeforeCall(contentType, accept, priceTableId, pricingPipelineCatalogPriceTableIdPutRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
