/*
 * Pricing API
 *   > Check the new [Pricing onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/pricing-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Pricing and is organized by focusing on the developer's journey.    Pricing is the VTEX module responsible for the SKU's price list. At this module we have the base price of each SKU, some optional fixed prices by trade policy, and some rules that can be applied to generate dynamically different final prices according to the purchase context and the trade policy. The variables used in this collection are:      * **{{accountName}}** = You VTEX account name.    * **{{tradePolicyId}}** = Current Trade Policy ID.    * **{{itemId}}** = SKU ID.    * **{{X-VTEX-API-AppKey}}** and **{{X-VTEX-API-AppToken}}** = Credentials.    You can get more information about how to use this module and its business logic at [VTEX Help](http://help.vtex.com).    ## Rate Limits    ### Limits per route    - `GET`:  routes are not rate limited at the moment  - `PUT or POST`: `40 requests/second/account` in any **price insert/update route** with 1000 *Burst Credits*  - `DELETE`: `16 requests/second/account` in any **price deletion route**, with 300 *Burst Credits*.    ### What are Burst Credits?    In case the account exceeds the limit frequency for a  `Rate Limiter` (for instance, when one account makes `41 requests/second` in any `price insert/update route`), we decrease from the *Burst Credit* count the exceeding (in this example, *1 Credit*).    In the event of the *Burst Credits* reaching **0 (zero)**, the request is blocked with a `Status 429` response.    The credits fill up over time when the route is not being used, in the same rate as the route's `Rate Limiter`. In our example, for each second not sending a **PUT or POST request**, we increase *40 Burst Credits* to this `Rate Limiter`    ### New Response Headers    In the response headers of any request to Pricing v2 there are some new headers indicating the current status of the Rate Limiting.  This information may be useful to evaluate the ideal frequency to send requests to a route, and when to send a new request in the event of reaching a Rate Limit.    - `Ratelimit-Limit` - Total *Burst Credits* offered to a route  - `Ratelimit-Remaining` - How many *Burst Credits* are still available to use  - `Ratelimit-Reset` - How long (in seconds) it will take to the *Burst Credits* to fill up completely (It will fill up to the `Ratelimit-Limit`)  - `Retry-After` - Indicates how many seconds you will need to wait until the `Rate Limiter` accepts a new request to this route again. If this header response exists, this means your current request has been rate limited and has not been processed.    ### How to integrate with Pricing v2 considering our Rate Limits    Integrate considering the limits of **requests/route/account** specified in the [*Limits per route*](#rate-limits) section, avoiding to surpass this frequency.    If you happen to be Rate Limited, wait the time in seconds specified in `Retry-After` before making another request to the service, and reduce the rate of requests per second that your integration is making.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PricingConfigurationTradePolicyConfigsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:16.791934-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PricingConfigurationTradePolicyConfigsInner {
  public static final String SERIALIZED_NAME_MINIMUM_MARKUP = "minimumMarkup";
  @SerializedName(SERIALIZED_NAME_MINIMUM_MARKUP)
  private Integer minimumMarkup;

  public static final String SERIALIZED_NAME_RULES_SHOULD_AFFECT_LIST_PRICE = "rulesShouldAffectListPrice";
  @SerializedName(SERIALIZED_NAME_RULES_SHOULD_AFFECT_LIST_PRICE)
  private Boolean rulesShouldAffectListPrice;

  public static final String SERIALIZED_NAME_TRADE_POLICY_ID = "tradePolicyId";
  @SerializedName(SERIALIZED_NAME_TRADE_POLICY_ID)
  private String tradePolicyId;

  public PricingConfigurationTradePolicyConfigsInner() {
  }

  public PricingConfigurationTradePolicyConfigsInner minimumMarkup(Integer minimumMarkup) {
    this.minimumMarkup = minimumMarkup;
    return this;
  }

  /**
   * Trade Policy Minimum Markup.
   * @return minimumMarkup
   */
  @javax.annotation.Nullable
  public Integer getMinimumMarkup() {
    return minimumMarkup;
  }

  public void setMinimumMarkup(Integer minimumMarkup) {
    this.minimumMarkup = minimumMarkup;
  }


  public PricingConfigurationTradePolicyConfigsInner rulesShouldAffectListPrice(Boolean rulesShouldAffectListPrice) {
    this.rulesShouldAffectListPrice = rulesShouldAffectListPrice;
    return this;
  }

  /**
   * Defines if the Price Rule should affect the list price too.
   * @return rulesShouldAffectListPrice
   */
  @javax.annotation.Nullable
  public Boolean getRulesShouldAffectListPrice() {
    return rulesShouldAffectListPrice;
  }

  public void setRulesShouldAffectListPrice(Boolean rulesShouldAffectListPrice) {
    this.rulesShouldAffectListPrice = rulesShouldAffectListPrice;
  }


  public PricingConfigurationTradePolicyConfigsInner tradePolicyId(String tradePolicyId) {
    this.tradePolicyId = tradePolicyId;
    return this;
  }

  /**
   * Trade Policy ID.
   * @return tradePolicyId
   */
  @javax.annotation.Nullable
  public String getTradePolicyId() {
    return tradePolicyId;
  }

  public void setTradePolicyId(String tradePolicyId) {
    this.tradePolicyId = tradePolicyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PricingConfigurationTradePolicyConfigsInner pricingConfigurationTradePolicyConfigsInner = (PricingConfigurationTradePolicyConfigsInner) o;
    return Objects.equals(this.minimumMarkup, pricingConfigurationTradePolicyConfigsInner.minimumMarkup) &&
        Objects.equals(this.rulesShouldAffectListPrice, pricingConfigurationTradePolicyConfigsInner.rulesShouldAffectListPrice) &&
        Objects.equals(this.tradePolicyId, pricingConfigurationTradePolicyConfigsInner.tradePolicyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minimumMarkup, rulesShouldAffectListPrice, tradePolicyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PricingConfigurationTradePolicyConfigsInner {\n");
    sb.append("    minimumMarkup: ").append(toIndentedString(minimumMarkup)).append("\n");
    sb.append("    rulesShouldAffectListPrice: ").append(toIndentedString(rulesShouldAffectListPrice)).append("\n");
    sb.append("    tradePolicyId: ").append(toIndentedString(tradePolicyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("minimumMarkup");
    openapiFields.add("rulesShouldAffectListPrice");
    openapiFields.add("tradePolicyId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PricingConfigurationTradePolicyConfigsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PricingConfigurationTradePolicyConfigsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PricingConfigurationTradePolicyConfigsInner is not found in the empty JSON string", PricingConfigurationTradePolicyConfigsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PricingConfigurationTradePolicyConfigsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PricingConfigurationTradePolicyConfigsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("tradePolicyId") != null && !jsonObj.get("tradePolicyId").isJsonNull()) && !jsonObj.get("tradePolicyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tradePolicyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tradePolicyId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PricingConfigurationTradePolicyConfigsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PricingConfigurationTradePolicyConfigsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PricingConfigurationTradePolicyConfigsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PricingConfigurationTradePolicyConfigsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PricingConfigurationTradePolicyConfigsInner>() {
           @Override
           public void write(JsonWriter out, PricingConfigurationTradePolicyConfigsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PricingConfigurationTradePolicyConfigsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PricingConfigurationTradePolicyConfigsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PricingConfigurationTradePolicyConfigsInner
   * @throws IOException if the JSON string is invalid with respect to PricingConfigurationTradePolicyConfigsInner
   */
  public static PricingConfigurationTradePolicyConfigsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PricingConfigurationTradePolicyConfigsInner.class);
  }

  /**
   * Convert an instance of PricingConfigurationTradePolicyConfigsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

