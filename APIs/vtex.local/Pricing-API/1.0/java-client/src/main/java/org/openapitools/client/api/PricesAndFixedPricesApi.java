/*
 * Pricing API
 *   > Check the new [Pricing onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/pricing-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Pricing and is organized by focusing on the developer's journey.    Pricing is the VTEX module responsible for the SKU's price list. At this module we have the base price of each SKU, some optional fixed prices by trade policy, and some rules that can be applied to generate dynamically different final prices according to the purchase context and the trade policy. The variables used in this collection are:      * **{{accountName}}** = You VTEX account name.    * **{{tradePolicyId}}** = Current Trade Policy ID.    * **{{itemId}}** = SKU ID.    * **{{X-VTEX-API-AppKey}}** and **{{X-VTEX-API-AppToken}}** = Credentials.    You can get more information about how to use this module and its business logic at [VTEX Help](http://help.vtex.com).    ## Rate Limits    ### Limits per route    - `GET`:  routes are not rate limited at the moment  - `PUT or POST`: `40 requests/second/account` in any **price insert/update route** with 1000 *Burst Credits*  - `DELETE`: `16 requests/second/account` in any **price deletion route**, with 300 *Burst Credits*.    ### What are Burst Credits?    In case the account exceeds the limit frequency for a  `Rate Limiter` (for instance, when one account makes `41 requests/second` in any `price insert/update route`), we decrease from the *Burst Credit* count the exceeding (in this example, *1 Credit*).    In the event of the *Burst Credits* reaching **0 (zero)**, the request is blocked with a `Status 429` response.    The credits fill up over time when the route is not being used, in the same rate as the route's `Rate Limiter`. In our example, for each second not sending a **PUT or POST request**, we increase *40 Burst Credits* to this `Rate Limiter`    ### New Response Headers    In the response headers of any request to Pricing v2 there are some new headers indicating the current status of the Rate Limiting.  This information may be useful to evaluate the ideal frequency to send requests to a route, and when to send a new request in the event of reaching a Rate Limit.    - `Ratelimit-Limit` - Total *Burst Credits* offered to a route  - `Ratelimit-Remaining` - How many *Burst Credits* are still available to use  - `Ratelimit-Reset` - How long (in seconds) it will take to the *Burst Credits* to fill up completely (It will fill up to the `Ratelimit-Limit`)  - `Retry-After` - Indicates how many seconds you will need to wait until the `Rate Limiter` accepts a new request to this route again. If this header response exists, this means your current request has been rate limited and has not been processed.    ### How to integrate with Pricing v2 considering our Rate Limits    Integrate considering the limits of **requests/route/account** specified in the [*Limits per route*](#rate-limits) section, avoiding to surpass this frequency.    If you happen to be Rate Limited, wait the time in seconds specified in `Retry-After` before making another request to the service, and reduce the rate of requests per second that your integration is making.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateUpdatePriceOrFixedPriceRequest;
import org.openapitools.client.model.CreateorupdatefixedpricesonpricetableortradepolicyRequestInner;
import org.openapitools.client.model.FixedPrice;
import org.openapitools.client.model.Getcomputedprice;
import org.openapitools.client.model.Getprice;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PricesAndFixedPricesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PricesAndFixedPricesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PricesAndFixedPricesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createUpdatePriceOrFixedPrice
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param itemId SKU unique identifier number. (required)
     * @param createUpdatePriceOrFixedPriceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUpdatePriceOrFixedPriceCall(String accept, String contentType, Integer itemId, CreateUpdatePriceOrFixedPriceRequest createUpdatePriceOrFixedPriceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdatePriceOrFixedPriceRequest;

        // create path and map variables
        String localVarPath = "/pricing/prices/{itemId}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUpdatePriceOrFixedPriceValidateBeforeCall(String accept, String contentType, Integer itemId, CreateUpdatePriceOrFixedPriceRequest createUpdatePriceOrFixedPriceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createUpdatePriceOrFixedPrice(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createUpdatePriceOrFixedPrice(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling createUpdatePriceOrFixedPrice(Async)");
        }

        return createUpdatePriceOrFixedPriceCall(accept, contentType, itemId, createUpdatePriceOrFixedPriceRequest, _callback);

    }

    /**
     * Create or Update Base Price or Fixed Prices
     * Creates or updates an SKU Base Price or Fixed Prices. The **base price** is the basic selling price of a product, it comprises the cost price and the markup wanted in the sale of the product. The **fixed price** is an optional price of the SKU for a specific trade policy with a specific minimum quantity to be activated.     &lt;p&gt; You may optionally set a list price. Additionally, you may set either a cost price or a markup value. By defining either one of them, the other will be calculated to conform to the formula &lt;code&gt;costPrice * (1 + markup) &#x3D; basePrice&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Request body example&lt;/h2&gt;    &#x60;&#x60;&#x60;json  {      \&quot;markup\&quot;: 30,      \&quot;basePrice\&quot;: 100,      \&quot;listPrice\&quot;: 35,      \&quot;fixedPrices\&quot;: [          {              \&quot;tradePolicyId\&quot;: \&quot;1\&quot;,              \&quot;value\&quot;: 31,              \&quot;listPrice\&quot;: 32,              \&quot;minQuantity\&quot;: 1,              \&quot;dateRange\&quot;: {                  \&quot;from\&quot;: \&quot;2022-05-21T22:00:00Z\&quot;,                  \&quot;to\&quot;: \&quot;2023-05-28T22:00:00Z\&quot;              }          },          {              \&quot;tradePolicyId\&quot;: \&quot;1\&quot;,              \&quot;value\&quot;: 31.5,              \&quot;listPrice\&quot;: 33,              \&quot;minQuantity\&quot;: 2          }      ]  }  &#x60;&#x60;&#x60;
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param itemId SKU unique identifier number. (required)
     * @param createUpdatePriceOrFixedPriceRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void createUpdatePriceOrFixedPrice(String accept, String contentType, Integer itemId, CreateUpdatePriceOrFixedPriceRequest createUpdatePriceOrFixedPriceRequest) throws ApiException {
        createUpdatePriceOrFixedPriceWithHttpInfo(accept, contentType, itemId, createUpdatePriceOrFixedPriceRequest);
    }

    /**
     * Create or Update Base Price or Fixed Prices
     * Creates or updates an SKU Base Price or Fixed Prices. The **base price** is the basic selling price of a product, it comprises the cost price and the markup wanted in the sale of the product. The **fixed price** is an optional price of the SKU for a specific trade policy with a specific minimum quantity to be activated.     &lt;p&gt; You may optionally set a list price. Additionally, you may set either a cost price or a markup value. By defining either one of them, the other will be calculated to conform to the formula &lt;code&gt;costPrice * (1 + markup) &#x3D; basePrice&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Request body example&lt;/h2&gt;    &#x60;&#x60;&#x60;json  {      \&quot;markup\&quot;: 30,      \&quot;basePrice\&quot;: 100,      \&quot;listPrice\&quot;: 35,      \&quot;fixedPrices\&quot;: [          {              \&quot;tradePolicyId\&quot;: \&quot;1\&quot;,              \&quot;value\&quot;: 31,              \&quot;listPrice\&quot;: 32,              \&quot;minQuantity\&quot;: 1,              \&quot;dateRange\&quot;: {                  \&quot;from\&quot;: \&quot;2022-05-21T22:00:00Z\&quot;,                  \&quot;to\&quot;: \&quot;2023-05-28T22:00:00Z\&quot;              }          },          {              \&quot;tradePolicyId\&quot;: \&quot;1\&quot;,              \&quot;value\&quot;: 31.5,              \&quot;listPrice\&quot;: 33,              \&quot;minQuantity\&quot;: 2          }      ]  }  &#x60;&#x60;&#x60;
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param itemId SKU unique identifier number. (required)
     * @param createUpdatePriceOrFixedPriceRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createUpdatePriceOrFixedPriceWithHttpInfo(String accept, String contentType, Integer itemId, CreateUpdatePriceOrFixedPriceRequest createUpdatePriceOrFixedPriceRequest) throws ApiException {
        okhttp3.Call localVarCall = createUpdatePriceOrFixedPriceValidateBeforeCall(accept, contentType, itemId, createUpdatePriceOrFixedPriceRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or Update Base Price or Fixed Prices (asynchronously)
     * Creates or updates an SKU Base Price or Fixed Prices. The **base price** is the basic selling price of a product, it comprises the cost price and the markup wanted in the sale of the product. The **fixed price** is an optional price of the SKU for a specific trade policy with a specific minimum quantity to be activated.     &lt;p&gt; You may optionally set a list price. Additionally, you may set either a cost price or a markup value. By defining either one of them, the other will be calculated to conform to the formula &lt;code&gt;costPrice * (1 + markup) &#x3D; basePrice&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Request body example&lt;/h2&gt;    &#x60;&#x60;&#x60;json  {      \&quot;markup\&quot;: 30,      \&quot;basePrice\&quot;: 100,      \&quot;listPrice\&quot;: 35,      \&quot;fixedPrices\&quot;: [          {              \&quot;tradePolicyId\&quot;: \&quot;1\&quot;,              \&quot;value\&quot;: 31,              \&quot;listPrice\&quot;: 32,              \&quot;minQuantity\&quot;: 1,              \&quot;dateRange\&quot;: {                  \&quot;from\&quot;: \&quot;2022-05-21T22:00:00Z\&quot;,                  \&quot;to\&quot;: \&quot;2023-05-28T22:00:00Z\&quot;              }          },          {              \&quot;tradePolicyId\&quot;: \&quot;1\&quot;,              \&quot;value\&quot;: 31.5,              \&quot;listPrice\&quot;: 33,              \&quot;minQuantity\&quot;: 2          }      ]  }  &#x60;&#x60;&#x60;
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param itemId SKU unique identifier number. (required)
     * @param createUpdatePriceOrFixedPriceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUpdatePriceOrFixedPriceAsync(String accept, String contentType, Integer itemId, CreateUpdatePriceOrFixedPriceRequest createUpdatePriceOrFixedPriceRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUpdatePriceOrFixedPriceValidateBeforeCall(accept, contentType, itemId, createUpdatePriceOrFixedPriceRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createorupdatefixedpricesonpricetableortradepolicy
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param itemId SKU ID. (required)
     * @param priceTableId SKU **price table** name or **trade policy** ID. (required)
     * @param createorupdatefixedpricesonpricetableortradepolicyRequestInner  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createorupdatefixedpricesonpricetableortradepolicyCall(String contentType, String accept, Integer itemId, String priceTableId, List<CreateorupdatefixedpricesonpricetableortradepolicyRequestInner> createorupdatefixedpricesonpricetableortradepolicyRequestInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createorupdatefixedpricesonpricetableortradepolicyRequestInner;

        // create path and map variables
        String localVarPath = "/pricing/prices/{itemId}/fixed/{priceTableId}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "priceTableId" + "}", localVarApiClient.escapeString(priceTableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createorupdatefixedpricesonpricetableortradepolicyValidateBeforeCall(String contentType, String accept, Integer itemId, String priceTableId, List<CreateorupdatefixedpricesonpricetableortradepolicyRequestInner> createorupdatefixedpricesonpricetableortradepolicyRequestInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createorupdatefixedpricesonpricetableortradepolicy(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createorupdatefixedpricesonpricetableortradepolicy(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling createorupdatefixedpricesonpricetableortradepolicy(Async)");
        }

        // verify the required parameter 'priceTableId' is set
        if (priceTableId == null) {
            throw new ApiException("Missing the required parameter 'priceTableId' when calling createorupdatefixedpricesonpricetableortradepolicy(Async)");
        }

        return createorupdatefixedpricesonpricetableortradepolicyCall(contentType, accept, itemId, priceTableId, createorupdatefixedpricesonpricetableortradepolicyRequestInner, _callback);

    }

    /**
     * Create or Update Fixed Prices on a price table or trade policy
     * Creates or updates the fixed prices of an SKU for a specific price table or trade policy. You can add one or multiple fixed prices per SKU.     ## Request body example    &#x60;&#x60;&#x60;json  [    {      \&quot;value\&quot;: 50.5,      \&quot;listPrice\&quot;: 50.5,      \&quot;minQuantity\&quot;: 2,      \&quot;dateRange\&quot;: {        \&quot;from\&quot;: \&quot;2021-12-30T22:00:00-03:00\&quot;,        \&quot;to\&quot;: \&quot;2021-12-30T22:00:00-04:00\&quot;      }    }  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param itemId SKU ID. (required)
     * @param priceTableId SKU **price table** name or **trade policy** ID. (required)
     * @param createorupdatefixedpricesonpricetableortradepolicyRequestInner  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void createorupdatefixedpricesonpricetableortradepolicy(String contentType, String accept, Integer itemId, String priceTableId, List<CreateorupdatefixedpricesonpricetableortradepolicyRequestInner> createorupdatefixedpricesonpricetableortradepolicyRequestInner) throws ApiException {
        createorupdatefixedpricesonpricetableortradepolicyWithHttpInfo(contentType, accept, itemId, priceTableId, createorupdatefixedpricesonpricetableortradepolicyRequestInner);
    }

    /**
     * Create or Update Fixed Prices on a price table or trade policy
     * Creates or updates the fixed prices of an SKU for a specific price table or trade policy. You can add one or multiple fixed prices per SKU.     ## Request body example    &#x60;&#x60;&#x60;json  [    {      \&quot;value\&quot;: 50.5,      \&quot;listPrice\&quot;: 50.5,      \&quot;minQuantity\&quot;: 2,      \&quot;dateRange\&quot;: {        \&quot;from\&quot;: \&quot;2021-12-30T22:00:00-03:00\&quot;,        \&quot;to\&quot;: \&quot;2021-12-30T22:00:00-04:00\&quot;      }    }  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param itemId SKU ID. (required)
     * @param priceTableId SKU **price table** name or **trade policy** ID. (required)
     * @param createorupdatefixedpricesonpricetableortradepolicyRequestInner  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createorupdatefixedpricesonpricetableortradepolicyWithHttpInfo(String contentType, String accept, Integer itemId, String priceTableId, List<CreateorupdatefixedpricesonpricetableortradepolicyRequestInner> createorupdatefixedpricesonpricetableortradepolicyRequestInner) throws ApiException {
        okhttp3.Call localVarCall = createorupdatefixedpricesonpricetableortradepolicyValidateBeforeCall(contentType, accept, itemId, priceTableId, createorupdatefixedpricesonpricetableortradepolicyRequestInner, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or Update Fixed Prices on a price table or trade policy (asynchronously)
     * Creates or updates the fixed prices of an SKU for a specific price table or trade policy. You can add one or multiple fixed prices per SKU.     ## Request body example    &#x60;&#x60;&#x60;json  [    {      \&quot;value\&quot;: 50.5,      \&quot;listPrice\&quot;: 50.5,      \&quot;minQuantity\&quot;: 2,      \&quot;dateRange\&quot;: {        \&quot;from\&quot;: \&quot;2021-12-30T22:00:00-03:00\&quot;,        \&quot;to\&quot;: \&quot;2021-12-30T22:00:00-04:00\&quot;      }    }  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param itemId SKU ID. (required)
     * @param priceTableId SKU **price table** name or **trade policy** ID. (required)
     * @param createorupdatefixedpricesonpricetableortradepolicyRequestInner  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createorupdatefixedpricesonpricetableortradepolicyAsync(String contentType, String accept, Integer itemId, String priceTableId, List<CreateorupdatefixedpricesonpricetableortradepolicyRequestInner> createorupdatefixedpricesonpricetableortradepolicyRequestInner, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createorupdatefixedpricesonpricetableortradepolicyValidateBeforeCall(contentType, accept, itemId, priceTableId, createorupdatefixedpricesonpricetableortradepolicyRequestInner, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePrice
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param itemId SKU ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePriceCall(String contentType, String accept, Integer itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pricing/prices/{itemId}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePriceValidateBeforeCall(String contentType, String accept, Integer itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deletePrice(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling deletePrice(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling deletePrice(Async)");
        }

        return deletePriceCall(contentType, accept, itemId, _callback);

    }

    /**
     * Delete Price
     * Deletes the Base Price and all available Fixed Prices for an SKU in all trade policies.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param itemId SKU ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deletePrice(String contentType, String accept, Integer itemId) throws ApiException {
        deletePriceWithHttpInfo(contentType, accept, itemId);
    }

    /**
     * Delete Price
     * Deletes the Base Price and all available Fixed Prices for an SKU in all trade policies.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param itemId SKU ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePriceWithHttpInfo(String contentType, String accept, Integer itemId) throws ApiException {
        okhttp3.Call localVarCall = deletePriceValidateBeforeCall(contentType, accept, itemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Price (asynchronously)
     * Deletes the Base Price and all available Fixed Prices for an SKU in all trade policies.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param itemId SKU ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePriceAsync(String contentType, String accept, Integer itemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePriceValidateBeforeCall(contentType, accept, itemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletefixedpricesonapricetableortradepolicy
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param itemId SKU ID. (required)
     * @param priceTableId Price Table or Trade Policy Name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletefixedpricesonapricetableortradepolicyCall(String contentType, String accept, Integer itemId, String priceTableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pricing/prices/{itemId}/fixed/{priceTableId}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "priceTableId" + "}", localVarApiClient.escapeString(priceTableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletefixedpricesonapricetableortradepolicyValidateBeforeCall(String contentType, String accept, Integer itemId, String priceTableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deletefixedpricesonapricetableortradepolicy(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling deletefixedpricesonapricetableortradepolicy(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling deletefixedpricesonapricetableortradepolicy(Async)");
        }

        // verify the required parameter 'priceTableId' is set
        if (priceTableId == null) {
            throw new ApiException("Missing the required parameter 'priceTableId' when calling deletefixedpricesonapricetableortradepolicy(Async)");
        }

        return deletefixedpricesonapricetableortradepolicyCall(contentType, accept, itemId, priceTableId, _callback);

    }

    /**
     * Delete Fixed Prices on a price table or trade policy
     * Deletes all Fixed Prices of an SKU in a specific Price Table or Trade Policy.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param itemId SKU ID. (required)
     * @param priceTableId Price Table or Trade Policy Name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deletefixedpricesonapricetableortradepolicy(String contentType, String accept, Integer itemId, String priceTableId) throws ApiException {
        deletefixedpricesonapricetableortradepolicyWithHttpInfo(contentType, accept, itemId, priceTableId);
    }

    /**
     * Delete Fixed Prices on a price table or trade policy
     * Deletes all Fixed Prices of an SKU in a specific Price Table or Trade Policy.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param itemId SKU ID. (required)
     * @param priceTableId Price Table or Trade Policy Name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletefixedpricesonapricetableortradepolicyWithHttpInfo(String contentType, String accept, Integer itemId, String priceTableId) throws ApiException {
        okhttp3.Call localVarCall = deletefixedpricesonapricetableortradepolicyValidateBeforeCall(contentType, accept, itemId, priceTableId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Fixed Prices on a price table or trade policy (asynchronously)
     * Deletes all Fixed Prices of an SKU in a specific Price Table or Trade Policy.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param itemId SKU ID. (required)
     * @param priceTableId Price Table or Trade Policy Name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletefixedpricesonapricetableortradepolicyAsync(String contentType, String accept, Integer itemId, String priceTableId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletefixedpricesonapricetableortradepolicyValidateBeforeCall(contentType, accept, itemId, priceTableId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getComputedPricebypricetable
     * @param categoryIds Category ID. (required)
     * @param brandId Brand ID. (required)
     * @param quantity SKU quantity. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param itemId SKU ID. (required)
     * @param priceTableId SKU Price Table Name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getComputedPricebypricetableCall(Integer categoryIds, Integer brandId, Integer quantity, String contentType, String accept, Integer itemId, String priceTableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://api.vtex.com/{account}/pricing" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pricing/prices/{itemId}/computed/{priceTableId}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "priceTableId" + "}", localVarApiClient.escapeString(priceTableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryIds", categoryIds));
        }

        if (brandId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("brandId", brandId));
        }

        if (quantity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quantity", quantity));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getComputedPricebypricetableValidateBeforeCall(Integer categoryIds, Integer brandId, Integer quantity, String contentType, String accept, Integer itemId, String priceTableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryIds' is set
        if (categoryIds == null) {
            throw new ApiException("Missing the required parameter 'categoryIds' when calling getComputedPricebypricetable(Async)");
        }

        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling getComputedPricebypricetable(Async)");
        }

        // verify the required parameter 'quantity' is set
        if (quantity == null) {
            throw new ApiException("Missing the required parameter 'quantity' when calling getComputedPricebypricetable(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getComputedPricebypricetable(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getComputedPricebypricetable(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getComputedPricebypricetable(Async)");
        }

        // verify the required parameter 'priceTableId' is set
        if (priceTableId == null) {
            throw new ApiException("Missing the required parameter 'priceTableId' when calling getComputedPricebypricetable(Async)");
        }

        return getComputedPricebypricetableCall(categoryIds, brandId, quantity, contentType, accept, itemId, priceTableId, _callback);

    }

    /**
     * Get Computed Price by price table or trade policy
     * Gets the Computed Price, which is the price after all the steps in the Pricing pipeline, for an SKU in a specific price table or trade policy.     ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;tradePolicyId\&quot;: \&quot;1\&quot;,      \&quot;listPrice\&quot;: 30,      \&quot;costPrice\&quot;: 76.92,      \&quot;sellingPrice\&quot;: 18.9,      \&quot;priceValidUntil\&quot;: \&quot;2018-12-20T18:12:14Z\&quot;  }  &#x60;&#x60;&#x60;
     * @param categoryIds Category ID. (required)
     * @param brandId Brand ID. (required)
     * @param quantity SKU quantity. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param itemId SKU ID. (required)
     * @param priceTableId SKU Price Table Name. (required)
     * @return Getcomputedprice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Getcomputedprice getComputedPricebypricetable(Integer categoryIds, Integer brandId, Integer quantity, String contentType, String accept, Integer itemId, String priceTableId) throws ApiException {
        ApiResponse<Getcomputedprice> localVarResp = getComputedPricebypricetableWithHttpInfo(categoryIds, brandId, quantity, contentType, accept, itemId, priceTableId);
        return localVarResp.getData();
    }

    /**
     * Get Computed Price by price table or trade policy
     * Gets the Computed Price, which is the price after all the steps in the Pricing pipeline, for an SKU in a specific price table or trade policy.     ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;tradePolicyId\&quot;: \&quot;1\&quot;,      \&quot;listPrice\&quot;: 30,      \&quot;costPrice\&quot;: 76.92,      \&quot;sellingPrice\&quot;: 18.9,      \&quot;priceValidUntil\&quot;: \&quot;2018-12-20T18:12:14Z\&quot;  }  &#x60;&#x60;&#x60;
     * @param categoryIds Category ID. (required)
     * @param brandId Brand ID. (required)
     * @param quantity SKU quantity. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param itemId SKU ID. (required)
     * @param priceTableId SKU Price Table Name. (required)
     * @return ApiResponse&lt;Getcomputedprice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Getcomputedprice> getComputedPricebypricetableWithHttpInfo(Integer categoryIds, Integer brandId, Integer quantity, String contentType, String accept, Integer itemId, String priceTableId) throws ApiException {
        okhttp3.Call localVarCall = getComputedPricebypricetableValidateBeforeCall(categoryIds, brandId, quantity, contentType, accept, itemId, priceTableId, null);
        Type localVarReturnType = new TypeToken<Getcomputedprice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Computed Price by price table or trade policy (asynchronously)
     * Gets the Computed Price, which is the price after all the steps in the Pricing pipeline, for an SKU in a specific price table or trade policy.     ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;tradePolicyId\&quot;: \&quot;1\&quot;,      \&quot;listPrice\&quot;: 30,      \&quot;costPrice\&quot;: 76.92,      \&quot;sellingPrice\&quot;: 18.9,      \&quot;priceValidUntil\&quot;: \&quot;2018-12-20T18:12:14Z\&quot;  }  &#x60;&#x60;&#x60;
     * @param categoryIds Category ID. (required)
     * @param brandId Brand ID. (required)
     * @param quantity SKU quantity. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param itemId SKU ID. (required)
     * @param priceTableId SKU Price Table Name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getComputedPricebypricetableAsync(Integer categoryIds, Integer brandId, Integer quantity, String contentType, String accept, Integer itemId, String priceTableId, final ApiCallback<Getcomputedprice> _callback) throws ApiException {

        okhttp3.Call localVarCall = getComputedPricebypricetableValidateBeforeCall(categoryIds, brandId, quantity, contentType, accept, itemId, priceTableId, _callback);
        Type localVarReturnType = new TypeToken<Getcomputedprice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFixedPrices
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param itemId SKU ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFixedPricesCall(String accept, String contentType, Integer itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pricing/prices/{itemId}/fixed"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFixedPricesValidateBeforeCall(String accept, String contentType, Integer itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getFixedPrices(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getFixedPrices(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getFixedPrices(Async)");
        }

        return getFixedPricesCall(accept, contentType, itemId, _callback);

    }

    /**
     * Get Fixed Prices
     * The **fixed price** is an optional price of the SKU for a specific trade policy with a specific minimum quantity to be activated. This method retrieves an array of Fixed Prices for an SKU in a Trade Policy with Minimum Quantities.     The default value for a Minimum Quantity is &#x60;1&#x60;. This means a Fixed Price will be valid for a SKU in a Trade Policy for orders containing the specified number of Minimum Quantity or above, unless a higher Minimum Quantity is specified.     Fixed prices may, optionally, be scheduled. If so, these objects will contain the &#x60;dateRange&#x60; object with &#x60;from&#x60; and &#x60;to&#x60; properties, indicating the start and end time of the scheduled fixed price in the RFC3339 timestamp format (&#x60;YYYY-MM-DDT23:59:60Z&#x60;).     Note that the &#39;Z&#39;, at the end, represents the UTC time (GMT+00:00). If it was in GMT-03:00, for example, it would be (&#x60;YYYY-MM-DDT23:59:60-03:00&#x60;).     ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;tradePolicyId\&quot;: \&quot;6\&quot;,          \&quot;value\&quot;: 20.9,          \&quot;listPrice\&quot;: 22.9,          \&quot;minQuantity\&quot;: 1,          \&quot;dateRange\&quot;: {              \&quot;from\&quot;: \&quot;2021-12-30T22:00:00-03:00\&quot;,              \&quot;to\&quot;: \&quot;2021-12-30T22:00:00-03:00\&quot;          }      },      {          \&quot;tradePolicyId\&quot;: \&quot;1\&quot;,          \&quot;value\&quot;: 18.9,          \&quot;listPrice\&quot;: null,          \&quot;minQuantity\&quot;: 1,          \&quot;dateRange\&quot;: {              \&quot;from\&quot;: \&quot;2021-12-30T22:00:00-03:00\&quot;,              \&quot;to\&quot;: \&quot;2021-12-30T22:00:00-03:00\&quot;          }      }  ]  &#x60;&#x60;&#x60;
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param itemId SKU ID. (required)
     * @return List&lt;FixedPrice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<FixedPrice> getFixedPrices(String accept, String contentType, Integer itemId) throws ApiException {
        ApiResponse<List<FixedPrice>> localVarResp = getFixedPricesWithHttpInfo(accept, contentType, itemId);
        return localVarResp.getData();
    }

    /**
     * Get Fixed Prices
     * The **fixed price** is an optional price of the SKU for a specific trade policy with a specific minimum quantity to be activated. This method retrieves an array of Fixed Prices for an SKU in a Trade Policy with Minimum Quantities.     The default value for a Minimum Quantity is &#x60;1&#x60;. This means a Fixed Price will be valid for a SKU in a Trade Policy for orders containing the specified number of Minimum Quantity or above, unless a higher Minimum Quantity is specified.     Fixed prices may, optionally, be scheduled. If so, these objects will contain the &#x60;dateRange&#x60; object with &#x60;from&#x60; and &#x60;to&#x60; properties, indicating the start and end time of the scheduled fixed price in the RFC3339 timestamp format (&#x60;YYYY-MM-DDT23:59:60Z&#x60;).     Note that the &#39;Z&#39;, at the end, represents the UTC time (GMT+00:00). If it was in GMT-03:00, for example, it would be (&#x60;YYYY-MM-DDT23:59:60-03:00&#x60;).     ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;tradePolicyId\&quot;: \&quot;6\&quot;,          \&quot;value\&quot;: 20.9,          \&quot;listPrice\&quot;: 22.9,          \&quot;minQuantity\&quot;: 1,          \&quot;dateRange\&quot;: {              \&quot;from\&quot;: \&quot;2021-12-30T22:00:00-03:00\&quot;,              \&quot;to\&quot;: \&quot;2021-12-30T22:00:00-03:00\&quot;          }      },      {          \&quot;tradePolicyId\&quot;: \&quot;1\&quot;,          \&quot;value\&quot;: 18.9,          \&quot;listPrice\&quot;: null,          \&quot;minQuantity\&quot;: 1,          \&quot;dateRange\&quot;: {              \&quot;from\&quot;: \&quot;2021-12-30T22:00:00-03:00\&quot;,              \&quot;to\&quot;: \&quot;2021-12-30T22:00:00-03:00\&quot;          }      }  ]  &#x60;&#x60;&#x60;
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param itemId SKU ID. (required)
     * @return ApiResponse&lt;List&lt;FixedPrice&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FixedPrice>> getFixedPricesWithHttpInfo(String accept, String contentType, Integer itemId) throws ApiException {
        okhttp3.Call localVarCall = getFixedPricesValidateBeforeCall(accept, contentType, itemId, null);
        Type localVarReturnType = new TypeToken<List<FixedPrice>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Fixed Prices (asynchronously)
     * The **fixed price** is an optional price of the SKU for a specific trade policy with a specific minimum quantity to be activated. This method retrieves an array of Fixed Prices for an SKU in a Trade Policy with Minimum Quantities.     The default value for a Minimum Quantity is &#x60;1&#x60;. This means a Fixed Price will be valid for a SKU in a Trade Policy for orders containing the specified number of Minimum Quantity or above, unless a higher Minimum Quantity is specified.     Fixed prices may, optionally, be scheduled. If so, these objects will contain the &#x60;dateRange&#x60; object with &#x60;from&#x60; and &#x60;to&#x60; properties, indicating the start and end time of the scheduled fixed price in the RFC3339 timestamp format (&#x60;YYYY-MM-DDT23:59:60Z&#x60;).     Note that the &#39;Z&#39;, at the end, represents the UTC time (GMT+00:00). If it was in GMT-03:00, for example, it would be (&#x60;YYYY-MM-DDT23:59:60-03:00&#x60;).     ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;tradePolicyId\&quot;: \&quot;6\&quot;,          \&quot;value\&quot;: 20.9,          \&quot;listPrice\&quot;: 22.9,          \&quot;minQuantity\&quot;: 1,          \&quot;dateRange\&quot;: {              \&quot;from\&quot;: \&quot;2021-12-30T22:00:00-03:00\&quot;,              \&quot;to\&quot;: \&quot;2021-12-30T22:00:00-03:00\&quot;          }      },      {          \&quot;tradePolicyId\&quot;: \&quot;1\&quot;,          \&quot;value\&quot;: 18.9,          \&quot;listPrice\&quot;: null,          \&quot;minQuantity\&quot;: 1,          \&quot;dateRange\&quot;: {              \&quot;from\&quot;: \&quot;2021-12-30T22:00:00-03:00\&quot;,              \&quot;to\&quot;: \&quot;2021-12-30T22:00:00-03:00\&quot;          }      }  ]  &#x60;&#x60;&#x60;
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param itemId SKU ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFixedPricesAsync(String accept, String contentType, Integer itemId, final ApiCallback<List<FixedPrice>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFixedPricesValidateBeforeCall(accept, contentType, itemId, _callback);
        Type localVarReturnType = new TypeToken<List<FixedPrice>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFixedPricesonapricetable
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept  (required)
     * @param itemId SKU ID. (required)
     * @param priceTableId Price Table Name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFixedPricesonapricetableCall(String contentType, String accept, Integer itemId, String priceTableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pricing/prices/{itemId}/fixed/{priceTableId}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "priceTableId" + "}", localVarApiClient.escapeString(priceTableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFixedPricesonapricetableValidateBeforeCall(String contentType, String accept, Integer itemId, String priceTableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getFixedPricesonapricetable(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getFixedPricesonapricetable(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getFixedPricesonapricetable(Async)");
        }

        // verify the required parameter 'priceTableId' is set
        if (priceTableId == null) {
            throw new ApiException("Missing the required parameter 'priceTableId' when calling getFixedPricesonapricetable(Async)");
        }

        return getFixedPricesonapricetableCall(contentType, accept, itemId, priceTableId, _callback);

    }

    /**
     * Get Fixed Prices on a price table or trade policy
     * Retrieves all Fixed Prices on a price table or trade policy.     ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;tradePolicyId\&quot;: \&quot;6\&quot;,          \&quot;value\&quot;: 20.9,          \&quot;listPrice\&quot;: 22.9,          \&quot;minQuantity\&quot;: 1,          \&quot;dateRange\&quot;: {              \&quot;from\&quot;: \&quot;2021-12-30T22:00:00-03:00\&quot;,              \&quot;to\&quot;: \&quot;2021-12-30T22:00:00-04:00\&quot;          }      },      {          \&quot;tradePolicyId\&quot;: \&quot;1\&quot;,          \&quot;value\&quot;: 18.9,          \&quot;listPrice\&quot;: null,          \&quot;minQuantity\&quot;: 1      }  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept  (required)
     * @param itemId SKU ID. (required)
     * @param priceTableId Price Table Name (required)
     * @return List&lt;FixedPrice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<FixedPrice> getFixedPricesonapricetable(String contentType, String accept, Integer itemId, String priceTableId) throws ApiException {
        ApiResponse<List<FixedPrice>> localVarResp = getFixedPricesonapricetableWithHttpInfo(contentType, accept, itemId, priceTableId);
        return localVarResp.getData();
    }

    /**
     * Get Fixed Prices on a price table or trade policy
     * Retrieves all Fixed Prices on a price table or trade policy.     ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;tradePolicyId\&quot;: \&quot;6\&quot;,          \&quot;value\&quot;: 20.9,          \&quot;listPrice\&quot;: 22.9,          \&quot;minQuantity\&quot;: 1,          \&quot;dateRange\&quot;: {              \&quot;from\&quot;: \&quot;2021-12-30T22:00:00-03:00\&quot;,              \&quot;to\&quot;: \&quot;2021-12-30T22:00:00-04:00\&quot;          }      },      {          \&quot;tradePolicyId\&quot;: \&quot;1\&quot;,          \&quot;value\&quot;: 18.9,          \&quot;listPrice\&quot;: null,          \&quot;minQuantity\&quot;: 1      }  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept  (required)
     * @param itemId SKU ID. (required)
     * @param priceTableId Price Table Name (required)
     * @return ApiResponse&lt;List&lt;FixedPrice&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FixedPrice>> getFixedPricesonapricetableWithHttpInfo(String contentType, String accept, Integer itemId, String priceTableId) throws ApiException {
        okhttp3.Call localVarCall = getFixedPricesonapricetableValidateBeforeCall(contentType, accept, itemId, priceTableId, null);
        Type localVarReturnType = new TypeToken<List<FixedPrice>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Fixed Prices on a price table or trade policy (asynchronously)
     * Retrieves all Fixed Prices on a price table or trade policy.     ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;tradePolicyId\&quot;: \&quot;6\&quot;,          \&quot;value\&quot;: 20.9,          \&quot;listPrice\&quot;: 22.9,          \&quot;minQuantity\&quot;: 1,          \&quot;dateRange\&quot;: {              \&quot;from\&quot;: \&quot;2021-12-30T22:00:00-03:00\&quot;,              \&quot;to\&quot;: \&quot;2021-12-30T22:00:00-04:00\&quot;          }      },      {          \&quot;tradePolicyId\&quot;: \&quot;1\&quot;,          \&quot;value\&quot;: 18.9,          \&quot;listPrice\&quot;: null,          \&quot;minQuantity\&quot;: 1      }  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept  (required)
     * @param itemId SKU ID. (required)
     * @param priceTableId Price Table Name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFixedPricesonapricetableAsync(String contentType, String accept, Integer itemId, String priceTableId, final ApiCallback<List<FixedPrice>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFixedPricesonapricetableValidateBeforeCall(contentType, accept, itemId, priceTableId, _callback);
        Type localVarReturnType = new TypeToken<List<FixedPrice>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPrice
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param itemId SKU ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPriceCall(String contentType, String accept, Integer itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pricing/prices/{itemId}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPriceValidateBeforeCall(String contentType, String accept, Integer itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getPrice(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getPrice(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getPrice(Async)");
        }

        return getPriceCall(contentType, accept, itemId, _callback);

    }

    /**
     * Get Price
     * Retrieves price data given a specific SKU ID. Within the &#x60;fixedPrices&#x60; object, there might be a list of prices for specific Trade Policies and Minimium Quantities of the SKU. Fixed Prices may also be scheduled.     ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;itemId\&quot;: \&quot;1\&quot;,      \&quot;listPrice\&quot;: 50,      \&quot;costPrice\&quot;: 90,      \&quot;markup\&quot;: 30,      \&quot;basePrice\&quot;: 117,      \&quot;fixedPrices\&quot;: [          {              \&quot;tradePolicyId\&quot;: \&quot;1\&quot;,              \&quot;value\&quot;: 50.5,              \&quot;listPrice\&quot;: 50.5,              \&quot;minQuantity\&quot;: 2,              \&quot;dateRange\&quot;: {                  \&quot;from\&quot;: \&quot;2021-12-31T01:00:00Z\&quot;,                  \&quot;to\&quot;: \&quot;2022-12-31T01:00:00Z\&quot;              }          },          {              \&quot;tradePolicyId\&quot;: \&quot;2\&quot;,              \&quot;value\&quot;: 30,              \&quot;listPrice\&quot;: 50,              \&quot;minQuantity\&quot;: 2          }      ]  }  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param itemId SKU ID. (required)
     * @return Getprice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Getprice getPrice(String contentType, String accept, Integer itemId) throws ApiException {
        ApiResponse<Getprice> localVarResp = getPriceWithHttpInfo(contentType, accept, itemId);
        return localVarResp.getData();
    }

    /**
     * Get Price
     * Retrieves price data given a specific SKU ID. Within the &#x60;fixedPrices&#x60; object, there might be a list of prices for specific Trade Policies and Minimium Quantities of the SKU. Fixed Prices may also be scheduled.     ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;itemId\&quot;: \&quot;1\&quot;,      \&quot;listPrice\&quot;: 50,      \&quot;costPrice\&quot;: 90,      \&quot;markup\&quot;: 30,      \&quot;basePrice\&quot;: 117,      \&quot;fixedPrices\&quot;: [          {              \&quot;tradePolicyId\&quot;: \&quot;1\&quot;,              \&quot;value\&quot;: 50.5,              \&quot;listPrice\&quot;: 50.5,              \&quot;minQuantity\&quot;: 2,              \&quot;dateRange\&quot;: {                  \&quot;from\&quot;: \&quot;2021-12-31T01:00:00Z\&quot;,                  \&quot;to\&quot;: \&quot;2022-12-31T01:00:00Z\&quot;              }          },          {              \&quot;tradePolicyId\&quot;: \&quot;2\&quot;,              \&quot;value\&quot;: 30,              \&quot;listPrice\&quot;: 50,              \&quot;minQuantity\&quot;: 2          }      ]  }  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param itemId SKU ID. (required)
     * @return ApiResponse&lt;Getprice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Getprice> getPriceWithHttpInfo(String contentType, String accept, Integer itemId) throws ApiException {
        okhttp3.Call localVarCall = getPriceValidateBeforeCall(contentType, accept, itemId, null);
        Type localVarReturnType = new TypeToken<Getprice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Price (asynchronously)
     * Retrieves price data given a specific SKU ID. Within the &#x60;fixedPrices&#x60; object, there might be a list of prices for specific Trade Policies and Minimium Quantities of the SKU. Fixed Prices may also be scheduled.     ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;itemId\&quot;: \&quot;1\&quot;,      \&quot;listPrice\&quot;: 50,      \&quot;costPrice\&quot;: 90,      \&quot;markup\&quot;: 30,      \&quot;basePrice\&quot;: 117,      \&quot;fixedPrices\&quot;: [          {              \&quot;tradePolicyId\&quot;: \&quot;1\&quot;,              \&quot;value\&quot;: 50.5,              \&quot;listPrice\&quot;: 50.5,              \&quot;minQuantity\&quot;: 2,              \&quot;dateRange\&quot;: {                  \&quot;from\&quot;: \&quot;2021-12-31T01:00:00Z\&quot;,                  \&quot;to\&quot;: \&quot;2022-12-31T01:00:00Z\&quot;              }          },          {              \&quot;tradePolicyId\&quot;: \&quot;2\&quot;,              \&quot;value\&quot;: 30,              \&quot;listPrice\&quot;: 50,              \&quot;minQuantity\&quot;: 2          }      ]  }  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param itemId SKU ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPriceAsync(String contentType, String accept, Integer itemId, final ApiCallback<Getprice> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPriceValidateBeforeCall(contentType, accept, itemId, _callback);
        Type localVarReturnType = new TypeToken<Getprice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
