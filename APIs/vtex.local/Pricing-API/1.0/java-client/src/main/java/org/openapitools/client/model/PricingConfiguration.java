/*
 * Pricing API
 *   > Check the new [Pricing onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/pricing-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Pricing and is organized by focusing on the developer's journey.    Pricing is the VTEX module responsible for the SKU's price list. At this module we have the base price of each SKU, some optional fixed prices by trade policy, and some rules that can be applied to generate dynamically different final prices according to the purchase context and the trade policy. The variables used in this collection are:      * **{{accountName}}** = You VTEX account name.    * **{{tradePolicyId}}** = Current Trade Policy ID.    * **{{itemId}}** = SKU ID.    * **{{X-VTEX-API-AppKey}}** and **{{X-VTEX-API-AppToken}}** = Credentials.    You can get more information about how to use this module and its business logic at [VTEX Help](http://help.vtex.com).    ## Rate Limits    ### Limits per route    - `GET`:  routes are not rate limited at the moment  - `PUT or POST`: `40 requests/second/account` in any **price insert/update route** with 1000 *Burst Credits*  - `DELETE`: `16 requests/second/account` in any **price deletion route**, with 300 *Burst Credits*.    ### What are Burst Credits?    In case the account exceeds the limit frequency for a  `Rate Limiter` (for instance, when one account makes `41 requests/second` in any `price insert/update route`), we decrease from the *Burst Credit* count the exceeding (in this example, *1 Credit*).    In the event of the *Burst Credits* reaching **0 (zero)**, the request is blocked with a `Status 429` response.    The credits fill up over time when the route is not being used, in the same rate as the route's `Rate Limiter`. In our example, for each second not sending a **PUT or POST request**, we increase *40 Burst Credits* to this `Rate Limiter`    ### New Response Headers    In the response headers of any request to Pricing v2 there are some new headers indicating the current status of the Rate Limiting.  This information may be useful to evaluate the ideal frequency to send requests to a route, and when to send a new request in the event of reaching a Rate Limit.    - `Ratelimit-Limit` - Total *Burst Credits* offered to a route  - `Ratelimit-Remaining` - How many *Burst Credits* are still available to use  - `Ratelimit-Reset` - How long (in seconds) it will take to the *Burst Credits* to fill up completely (It will fill up to the `Ratelimit-Limit`)  - `Retry-After` - Indicates how many seconds you will need to wait until the `Rate Limiter` accepts a new request to this route again. If this header response exists, this means your current request has been rate limited and has not been processed.    ### How to integrate with Pricing v2 considering our Rate Limits    Integrate considering the limits of **requests/route/account** specified in the [*Limits per route*](#rate-limits) section, avoiding to surpass this frequency.    If you happen to be Rate Limited, wait the time in seconds specified in `Retry-After` before making another request to the service, and reduce the rate of requests per second that your integration is making.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.PricingConfigurationPriceVariation;
import org.openapitools.client.model.PricingConfigurationTradePolicyConfigsInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PricingConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:16.791934-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PricingConfiguration {
  public static final String SERIALIZED_NAME_BLOCK_ACCOUNT = "blockAccount";
  @SerializedName(SERIALIZED_NAME_BLOCK_ACCOUNT)
  private Boolean blockAccount;

  public static final String SERIALIZED_NAME_BLOCKED_ROUTES = "blockedRoutes";
  @SerializedName(SERIALIZED_NAME_BLOCKED_ROUTES)
  private List<String> blockedRoutes;

  public static final String SERIALIZED_NAME_DEFAULT_MARKUP = "defaultMarkup";
  @SerializedName(SERIALIZED_NAME_DEFAULT_MARKUP)
  private Integer defaultMarkup;

  public static final String SERIALIZED_NAME_HAS_MIGRATED = "hasMigrated";
  @SerializedName(SERIALIZED_NAME_HAS_MIGRATED)
  private Boolean hasMigrated;

  public static final String SERIALIZED_NAME_HAS_OPTIONAL_BASE_PRICE = "hasOptionalBasePrice";
  @SerializedName(SERIALIZED_NAME_HAS_OPTIONAL_BASE_PRICE)
  private Boolean hasOptionalBasePrice;

  public static final String SERIALIZED_NAME_HAS_PRICE_INHERITANCE = "hasPriceInheritance";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_HAS_PRICE_INHERITANCE)
  private Boolean hasPriceInheritance;

  public static final String SERIALIZED_NAME_MIGRATION_STATUS = "migrationStatus";
  @SerializedName(SERIALIZED_NAME_MIGRATION_STATUS)
  private String migrationStatus;

  public static final String SERIALIZED_NAME_MINIMUM_MARKUPS = "minimumMarkups";
  @SerializedName(SERIALIZED_NAME_MINIMUM_MARKUPS)
  private Map<String, Integer> minimumMarkups = new HashMap<>();

  public static final String SERIALIZED_NAME_PRICE_INHERITANCE = "priceInheritance";
  @SerializedName(SERIALIZED_NAME_PRICE_INHERITANCE)
  private String priceInheritance;

  public static final String SERIALIZED_NAME_PRICE_TABLE_LIMIT = "priceTableLimit";
  @SerializedName(SERIALIZED_NAME_PRICE_TABLE_LIMIT)
  private Integer priceTableLimit;

  public static final String SERIALIZED_NAME_PRICE_TABLE_SELECTION_STRATEGY = "priceTableSelectionStrategy";
  @SerializedName(SERIALIZED_NAME_PRICE_TABLE_SELECTION_STRATEGY)
  private String priceTableSelectionStrategy = "first";

  public static final String SERIALIZED_NAME_PRICE_VARIATION = "priceVariation";
  @SerializedName(SERIALIZED_NAME_PRICE_VARIATION)
  private PricingConfigurationPriceVariation priceVariation;

  public static final String SERIALIZED_NAME_SELLERS_TO_OVERRIDE = "sellersToOverride";
  @SerializedName(SERIALIZED_NAME_SELLERS_TO_OVERRIDE)
  private List<Object> sellersToOverride = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRADE_POLICY_CONFIGS = "tradePolicyConfigs";
  @SerializedName(SERIALIZED_NAME_TRADE_POLICY_CONFIGS)
  private List<PricingConfigurationTradePolicyConfigsInner> tradePolicyConfigs = new ArrayList<>();

  public PricingConfiguration() {
  }

  public PricingConfiguration blockAccount(Boolean blockAccount) {
    this.blockAccount = blockAccount;
    return this;
  }

  /**
   * Defines if access to the Pricing APIs is blocked for external requests.
   * @return blockAccount
   */
  @javax.annotation.Nullable
  public Boolean getBlockAccount() {
    return blockAccount;
  }

  public void setBlockAccount(Boolean blockAccount) {
    this.blockAccount = blockAccount;
  }


  public PricingConfiguration blockedRoutes(List<String> blockedRoutes) {
    this.blockedRoutes = blockedRoutes;
    return this;
  }

  public PricingConfiguration addBlockedRoutesItem(String blockedRoutesItem) {
    if (this.blockedRoutes == null) {
      this.blockedRoutes = new ArrayList<>();
    }
    this.blockedRoutes.add(blockedRoutesItem);
    return this;
  }

  /**
   * Array with all blocked routes.
   * @return blockedRoutes
   */
  @javax.annotation.Nullable
  public List<String> getBlockedRoutes() {
    return blockedRoutes;
  }

  public void setBlockedRoutes(List<String> blockedRoutes) {
    this.blockedRoutes = blockedRoutes;
  }


  public PricingConfiguration defaultMarkup(Integer defaultMarkup) {
    this.defaultMarkup = defaultMarkup;
    return this;
  }

  /**
   * Account default markup.
   * @return defaultMarkup
   */
  @javax.annotation.Nonnull
  public Integer getDefaultMarkup() {
    return defaultMarkup;
  }

  public void setDefaultMarkup(Integer defaultMarkup) {
    this.defaultMarkup = defaultMarkup;
  }


  public PricingConfiguration hasMigrated(Boolean hasMigrated) {
    this.hasMigrated = hasMigrated;
    return this;
  }

  /**
   * Defines if the account has migrated to Pricing V2.
   * @return hasMigrated
   */
  @javax.annotation.Nonnull
  public Boolean getHasMigrated() {
    return hasMigrated;
  }

  public void setHasMigrated(Boolean hasMigrated) {
    this.hasMigrated = hasMigrated;
  }


  public PricingConfiguration hasOptionalBasePrice(Boolean hasOptionalBasePrice) {
    this.hasOptionalBasePrice = hasOptionalBasePrice;
    return this;
  }

  /**
   * Defines if optional base price is allowed.
   * @return hasOptionalBasePrice
   */
  @javax.annotation.Nullable
  public Boolean getHasOptionalBasePrice() {
    return hasOptionalBasePrice;
  }

  public void setHasOptionalBasePrice(Boolean hasOptionalBasePrice) {
    this.hasOptionalBasePrice = hasOptionalBasePrice;
  }


  @Deprecated
  public PricingConfiguration hasPriceInheritance(Boolean hasPriceInheritance) {
    this.hasPriceInheritance = hasPriceInheritance;
    return this;
  }

  /**
   * Deprecated. Use the &#x60;priceInheritance&#x60; field instead.
   * @return hasPriceInheritance
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getHasPriceInheritance() {
    return hasPriceInheritance;
  }

  @Deprecated
  public void setHasPriceInheritance(Boolean hasPriceInheritance) {
    this.hasPriceInheritance = hasPriceInheritance;
  }


  public PricingConfiguration migrationStatus(String migrationStatus) {
    this.migrationStatus = migrationStatus;
    return this;
  }

  /**
   * Pricing V2 migration status.
   * @return migrationStatus
   */
  @javax.annotation.Nullable
  public String getMigrationStatus() {
    return migrationStatus;
  }

  public void setMigrationStatus(String migrationStatus) {
    this.migrationStatus = migrationStatus;
  }


  public PricingConfiguration minimumMarkups(Map<String, Integer> minimumMarkups) {
    this.minimumMarkups = minimumMarkups;
    return this;
  }

  public PricingConfiguration putMinimumMarkupsItem(String key, Integer minimumMarkupsItem) {
    if (this.minimumMarkups == null) {
      this.minimumMarkups = new HashMap<>();
    }
    this.minimumMarkups.put(key, minimumMarkupsItem);
    return this;
  }

  /**
   * Account minimum markup.
   * @return minimumMarkups
   */
  @javax.annotation.Nonnull
  public Map<String, Integer> getMinimumMarkups() {
    return minimumMarkups;
  }

  public void setMinimumMarkups(Map<String, Integer> minimumMarkups) {
    this.minimumMarkups = minimumMarkups;
  }


  public PricingConfiguration priceInheritance(String priceInheritance) {
    this.priceInheritance = priceInheritance;
    return this;
  }

  /**
   * Condition of price inheritance from its parent account. This field can have three possible values: &#x60;never&#x60; if the store should never inherit prices, &#x60;nonexistent&#x60; if the store should only inherit prices in case of nonexistent prices for a given product, or &#x60;always&#x60; if the store should always inherit prices, regardless of its own prices.
   * @return priceInheritance
   */
  @javax.annotation.Nullable
  public String getPriceInheritance() {
    return priceInheritance;
  }

  public void setPriceInheritance(String priceInheritance) {
    this.priceInheritance = priceInheritance;
  }


  public PricingConfiguration priceTableLimit(Integer priceTableLimit) {
    this.priceTableLimit = priceTableLimit;
    return this;
  }

  /**
   * Price Table Limit.
   * @return priceTableLimit
   */
  @javax.annotation.Nullable
  public Integer getPriceTableLimit() {
    return priceTableLimit;
  }

  public void setPriceTableLimit(Integer priceTableLimit) {
    this.priceTableLimit = priceTableLimit;
  }


  public PricingConfiguration priceTableSelectionStrategy(String priceTableSelectionStrategy) {
    this.priceTableSelectionStrategy = priceTableSelectionStrategy;
    return this;
  }

  /**
   * The strategy used to get prices when there is more than one option. Possible values: &#x60;first&#x60;, &#x60;highest&#x60;, &#x60;lowest&#x60;. Default: &#x60;first&#x60;.
   * @return priceTableSelectionStrategy
   */
  @javax.annotation.Nullable
  public String getPriceTableSelectionStrategy() {
    return priceTableSelectionStrategy;
  }

  public void setPriceTableSelectionStrategy(String priceTableSelectionStrategy) {
    this.priceTableSelectionStrategy = priceTableSelectionStrategy;
  }


  public PricingConfiguration priceVariation(PricingConfigurationPriceVariation priceVariation) {
    this.priceVariation = priceVariation;
    return this;
  }

  /**
   * Get priceVariation
   * @return priceVariation
   */
  @javax.annotation.Nullable
  public PricingConfigurationPriceVariation getPriceVariation() {
    return priceVariation;
  }

  public void setPriceVariation(PricingConfigurationPriceVariation priceVariation) {
    this.priceVariation = priceVariation;
  }


  public PricingConfiguration sellersToOverride(List<Object> sellersToOverride) {
    this.sellersToOverride = sellersToOverride;
    return this;
  }

  public PricingConfiguration addSellersToOverrideItem(Object sellersToOverrideItem) {
    if (this.sellersToOverride == null) {
      this.sellersToOverride = new ArrayList<>();
    }
    this.sellersToOverride.add(sellersToOverrideItem);
    return this;
  }

  /**
   * Overrides prices from sellers.
   * @return sellersToOverride
   */
  @javax.annotation.Nullable
  public List<Object> getSellersToOverride() {
    return sellersToOverride;
  }

  public void setSellersToOverride(List<Object> sellersToOverride) {
    this.sellersToOverride = sellersToOverride;
  }


  public PricingConfiguration tradePolicyConfigs(List<PricingConfigurationTradePolicyConfigsInner> tradePolicyConfigs) {
    this.tradePolicyConfigs = tradePolicyConfigs;
    return this;
  }

  public PricingConfiguration addTradePolicyConfigsItem(PricingConfigurationTradePolicyConfigsInner tradePolicyConfigsItem) {
    if (this.tradePolicyConfigs == null) {
      this.tradePolicyConfigs = new ArrayList<>();
    }
    this.tradePolicyConfigs.add(tradePolicyConfigsItem);
    return this;
  }

  /**
   * Trade Policy Configurations array.
   * @return tradePolicyConfigs
   */
  @javax.annotation.Nullable
  public List<PricingConfigurationTradePolicyConfigsInner> getTradePolicyConfigs() {
    return tradePolicyConfigs;
  }

  public void setTradePolicyConfigs(List<PricingConfigurationTradePolicyConfigsInner> tradePolicyConfigs) {
    this.tradePolicyConfigs = tradePolicyConfigs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PricingConfiguration pricingConfiguration = (PricingConfiguration) o;
    return Objects.equals(this.blockAccount, pricingConfiguration.blockAccount) &&
        Objects.equals(this.blockedRoutes, pricingConfiguration.blockedRoutes) &&
        Objects.equals(this.defaultMarkup, pricingConfiguration.defaultMarkup) &&
        Objects.equals(this.hasMigrated, pricingConfiguration.hasMigrated) &&
        Objects.equals(this.hasOptionalBasePrice, pricingConfiguration.hasOptionalBasePrice) &&
        Objects.equals(this.hasPriceInheritance, pricingConfiguration.hasPriceInheritance) &&
        Objects.equals(this.migrationStatus, pricingConfiguration.migrationStatus) &&
        Objects.equals(this.minimumMarkups, pricingConfiguration.minimumMarkups) &&
        Objects.equals(this.priceInheritance, pricingConfiguration.priceInheritance) &&
        Objects.equals(this.priceTableLimit, pricingConfiguration.priceTableLimit) &&
        Objects.equals(this.priceTableSelectionStrategy, pricingConfiguration.priceTableSelectionStrategy) &&
        Objects.equals(this.priceVariation, pricingConfiguration.priceVariation) &&
        Objects.equals(this.sellersToOverride, pricingConfiguration.sellersToOverride) &&
        Objects.equals(this.tradePolicyConfigs, pricingConfiguration.tradePolicyConfigs);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockAccount, blockedRoutes, defaultMarkup, hasMigrated, hasOptionalBasePrice, hasPriceInheritance, migrationStatus, minimumMarkups, priceInheritance, priceTableLimit, priceTableSelectionStrategy, priceVariation, sellersToOverride, tradePolicyConfigs);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PricingConfiguration {\n");
    sb.append("    blockAccount: ").append(toIndentedString(blockAccount)).append("\n");
    sb.append("    blockedRoutes: ").append(toIndentedString(blockedRoutes)).append("\n");
    sb.append("    defaultMarkup: ").append(toIndentedString(defaultMarkup)).append("\n");
    sb.append("    hasMigrated: ").append(toIndentedString(hasMigrated)).append("\n");
    sb.append("    hasOptionalBasePrice: ").append(toIndentedString(hasOptionalBasePrice)).append("\n");
    sb.append("    hasPriceInheritance: ").append(toIndentedString(hasPriceInheritance)).append("\n");
    sb.append("    migrationStatus: ").append(toIndentedString(migrationStatus)).append("\n");
    sb.append("    minimumMarkups: ").append(toIndentedString(minimumMarkups)).append("\n");
    sb.append("    priceInheritance: ").append(toIndentedString(priceInheritance)).append("\n");
    sb.append("    priceTableLimit: ").append(toIndentedString(priceTableLimit)).append("\n");
    sb.append("    priceTableSelectionStrategy: ").append(toIndentedString(priceTableSelectionStrategy)).append("\n");
    sb.append("    priceVariation: ").append(toIndentedString(priceVariation)).append("\n");
    sb.append("    sellersToOverride: ").append(toIndentedString(sellersToOverride)).append("\n");
    sb.append("    tradePolicyConfigs: ").append(toIndentedString(tradePolicyConfigs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blockAccount");
    openapiFields.add("blockedRoutes");
    openapiFields.add("defaultMarkup");
    openapiFields.add("hasMigrated");
    openapiFields.add("hasOptionalBasePrice");
    openapiFields.add("hasPriceInheritance");
    openapiFields.add("migrationStatus");
    openapiFields.add("minimumMarkups");
    openapiFields.add("priceInheritance");
    openapiFields.add("priceTableLimit");
    openapiFields.add("priceTableSelectionStrategy");
    openapiFields.add("priceVariation");
    openapiFields.add("sellersToOverride");
    openapiFields.add("tradePolicyConfigs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("defaultMarkup");
    openapiRequiredFields.add("hasMigrated");
    openapiRequiredFields.add("minimumMarkups");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PricingConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PricingConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PricingConfiguration is not found in the empty JSON string", PricingConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PricingConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PricingConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PricingConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("blockedRoutes") != null && !jsonObj.get("blockedRoutes").isJsonNull() && !jsonObj.get("blockedRoutes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockedRoutes` to be an array in the JSON string but got `%s`", jsonObj.get("blockedRoutes").toString()));
      }
      if ((jsonObj.get("migrationStatus") != null && !jsonObj.get("migrationStatus").isJsonNull()) && !jsonObj.get("migrationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `migrationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("migrationStatus").toString()));
      }
      if ((jsonObj.get("priceInheritance") != null && !jsonObj.get("priceInheritance").isJsonNull()) && !jsonObj.get("priceInheritance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceInheritance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceInheritance").toString()));
      }
      if ((jsonObj.get("priceTableSelectionStrategy") != null && !jsonObj.get("priceTableSelectionStrategy").isJsonNull()) && !jsonObj.get("priceTableSelectionStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceTableSelectionStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceTableSelectionStrategy").toString()));
      }
      // validate the optional field `priceVariation`
      if (jsonObj.get("priceVariation") != null && !jsonObj.get("priceVariation").isJsonNull()) {
        PricingConfigurationPriceVariation.validateJsonElement(jsonObj.get("priceVariation"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sellersToOverride") != null && !jsonObj.get("sellersToOverride").isJsonNull() && !jsonObj.get("sellersToOverride").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellersToOverride` to be an array in the JSON string but got `%s`", jsonObj.get("sellersToOverride").toString()));
      }
      if (jsonObj.get("tradePolicyConfigs") != null && !jsonObj.get("tradePolicyConfigs").isJsonNull()) {
        JsonArray jsonArraytradePolicyConfigs = jsonObj.getAsJsonArray("tradePolicyConfigs");
        if (jsonArraytradePolicyConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tradePolicyConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tradePolicyConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("tradePolicyConfigs").toString()));
          }

          // validate the optional field `tradePolicyConfigs` (array)
          for (int i = 0; i < jsonArraytradePolicyConfigs.size(); i++) {
            PricingConfigurationTradePolicyConfigsInner.validateJsonElement(jsonArraytradePolicyConfigs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PricingConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PricingConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PricingConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PricingConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<PricingConfiguration>() {
           @Override
           public void write(JsonWriter out, PricingConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PricingConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PricingConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PricingConfiguration
   * @throws IOException if the JSON string is invalid with respect to PricingConfiguration
   */
  public static PricingConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PricingConfiguration.class);
  }

  /**
   * Convert an instance of PricingConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

