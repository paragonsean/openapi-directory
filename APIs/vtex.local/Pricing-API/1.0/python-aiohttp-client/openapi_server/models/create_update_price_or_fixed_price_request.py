# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fixed_prices import FixedPrices
from openapi_server import util


class CreateUpdatePriceOrFixedPriceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_price: float=100, cost_price: float=35, fixed_prices: List[FixedPrices]=None, list_price: float=50, markup: int=30):
        """CreateUpdatePriceOrFixedPriceRequest - a model defined in OpenAPI

        :param base_price: The base_price of this CreateUpdatePriceOrFixedPriceRequest.
        :param cost_price: The cost_price of this CreateUpdatePriceOrFixedPriceRequest.
        :param fixed_prices: The fixed_prices of this CreateUpdatePriceOrFixedPriceRequest.
        :param list_price: The list_price of this CreateUpdatePriceOrFixedPriceRequest.
        :param markup: The markup of this CreateUpdatePriceOrFixedPriceRequest.
        """
        self.openapi_types = {
            'base_price': float,
            'cost_price': float,
            'fixed_prices': List[FixedPrices],
            'list_price': float,
            'markup': int
        }

        self.attribute_map = {
            'base_price': 'basePrice',
            'cost_price': 'costPrice',
            'fixed_prices': 'fixedPrices',
            'list_price': 'listPrice',
            'markup': 'markup'
        }

        self._base_price = base_price
        self._cost_price = cost_price
        self._fixed_prices = fixed_prices
        self._list_price = list_price
        self._markup = markup

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUpdatePriceOrFixedPriceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUpdatePriceOrFixedPrice_request of this CreateUpdatePriceOrFixedPriceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_price(self):
        """Gets the base_price of this CreateUpdatePriceOrFixedPriceRequest.

        SKU selling base price. If you decide to fill only the `basePrice` item, the `markup` and `costPrice` will be automatically generated to adapt to the number inserted in `basePrice`.

        :return: The base_price of this CreateUpdatePriceOrFixedPriceRequest.
        :rtype: float
        """
        return self._base_price

    @base_price.setter
    def base_price(self, base_price):
        """Sets the base_price of this CreateUpdatePriceOrFixedPriceRequest.

        SKU selling base price. If you decide to fill only the `basePrice` item, the `markup` and `costPrice` will be automatically generated to adapt to the number inserted in `basePrice`.

        :param base_price: The base_price of this CreateUpdatePriceOrFixedPriceRequest.
        :type base_price: float
        """
        if base_price is None:
            raise ValueError("Invalid value for `base_price`, must not be `None`")

        self._base_price = base_price

    @property
    def cost_price(self):
        """Gets the cost_price of this CreateUpdatePriceOrFixedPriceRequest.

        SKU selling cost price. If you decide to fill the `costPrice` item, you must also fill the `markup` and `basePrice` will be automatically generated based on both values.

        :return: The cost_price of this CreateUpdatePriceOrFixedPriceRequest.
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this CreateUpdatePriceOrFixedPriceRequest.

        SKU selling cost price. If you decide to fill the `costPrice` item, you must also fill the `markup` and `basePrice` will be automatically generated based on both values.

        :param cost_price: The cost_price of this CreateUpdatePriceOrFixedPriceRequest.
        :type cost_price: float
        """

        self._cost_price = cost_price

    @property
    def fixed_prices(self):
        """Gets the fixed_prices of this CreateUpdatePriceOrFixedPriceRequest.


        :return: The fixed_prices of this CreateUpdatePriceOrFixedPriceRequest.
        :rtype: List[FixedPrices]
        """
        return self._fixed_prices

    @fixed_prices.setter
    def fixed_prices(self, fixed_prices):
        """Sets the fixed_prices of this CreateUpdatePriceOrFixedPriceRequest.


        :param fixed_prices: The fixed_prices of this CreateUpdatePriceOrFixedPriceRequest.
        :type fixed_prices: List[FixedPrices]
        """

        self._fixed_prices = fixed_prices

    @property
    def list_price(self):
        """Gets the list_price of this CreateUpdatePriceOrFixedPriceRequest.

        SKU's suggested selling price.

        :return: The list_price of this CreateUpdatePriceOrFixedPriceRequest.
        :rtype: float
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this CreateUpdatePriceOrFixedPriceRequest.

        SKU's suggested selling price.

        :param list_price: The list_price of this CreateUpdatePriceOrFixedPriceRequest.
        :type list_price: float
        """
        if list_price is None:
            raise ValueError("Invalid value for `list_price`, must not be `None`")

        self._list_price = list_price

    @property
    def markup(self):
        """Gets the markup of this CreateUpdatePriceOrFixedPriceRequest.

        The profit percentage that is to be obtained from the sale of that SKU. If you decide to fill the `markup` item, you must also fill the `costPrice`. The `basePrice` will be automatically generated based on both values.

        :return: The markup of this CreateUpdatePriceOrFixedPriceRequest.
        :rtype: int
        """
        return self._markup

    @markup.setter
    def markup(self, markup):
        """Sets the markup of this CreateUpdatePriceOrFixedPriceRequest.

        The profit percentage that is to be obtained from the sale of that SKU. If you decide to fill the `markup` item, you must also fill the `costPrice`. The `basePrice` will be automatically generated based on both values.

        :param markup: The markup of this CreateUpdatePriceOrFixedPriceRequest.
        :type markup: int
        """
        if markup is None:
            raise ValueError("Invalid value for `markup`, must not be `None`")

        self._markup = markup
