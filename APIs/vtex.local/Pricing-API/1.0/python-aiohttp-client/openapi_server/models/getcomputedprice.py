# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Getcomputedprice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_price: float=None, list_price: int=None, price_valid_until: str=None, selling_price: float=None, trade_policy_id: str=None):
        """Getcomputedprice - a model defined in OpenAPI

        :param cost_price: The cost_price of this Getcomputedprice.
        :param list_price: The list_price of this Getcomputedprice.
        :param price_valid_until: The price_valid_until of this Getcomputedprice.
        :param selling_price: The selling_price of this Getcomputedprice.
        :param trade_policy_id: The trade_policy_id of this Getcomputedprice.
        """
        self.openapi_types = {
            'cost_price': float,
            'list_price': int,
            'price_valid_until': str,
            'selling_price': float,
            'trade_policy_id': str
        }

        self.attribute_map = {
            'cost_price': 'costPrice',
            'list_price': 'listPrice',
            'price_valid_until': 'priceValidUntil',
            'selling_price': 'sellingPrice',
            'trade_policy_id': 'tradePolicyId'
        }

        self._cost_price = cost_price
        self._list_price = list_price
        self._price_valid_until = price_valid_until
        self._selling_price = selling_price
        self._trade_policy_id = trade_policy_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Getcomputedprice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Getcomputedprice of this Getcomputedprice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_price(self):
        """Gets the cost_price of this Getcomputedprice.

        Cost price.

        :return: The cost_price of this Getcomputedprice.
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this Getcomputedprice.

        Cost price.

        :param cost_price: The cost_price of this Getcomputedprice.
        :type cost_price: float
        """

        self._cost_price = cost_price

    @property
    def list_price(self):
        """Gets the list_price of this Getcomputedprice.

        Trade Policy List Price, also known as \"from\" price.

        :return: The list_price of this Getcomputedprice.
        :rtype: int
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this Getcomputedprice.

        Trade Policy List Price, also known as \"from\" price.

        :param list_price: The list_price of this Getcomputedprice.
        :type list_price: int
        """
        if list_price is None:
            raise ValueError("Invalid value for `list_price`, must not be `None`")

        self._list_price = list_price

    @property
    def price_valid_until(self):
        """Gets the price_valid_until of this Getcomputedprice.

        Date until when the computed price will be valid, due to price scheduling. If no price scheduling applies, this will be set a year from the current time.

        :return: The price_valid_until of this Getcomputedprice.
        :rtype: str
        """
        return self._price_valid_until

    @price_valid_until.setter
    def price_valid_until(self, price_valid_until):
        """Sets the price_valid_until of this Getcomputedprice.

        Date until when the computed price will be valid, due to price scheduling. If no price scheduling applies, this will be set a year from the current time.

        :param price_valid_until: The price_valid_until of this Getcomputedprice.
        :type price_valid_until: str
        """
        if price_valid_until is None:
            raise ValueError("Invalid value for `price_valid_until`, must not be `None`")

        self._price_valid_until = price_valid_until

    @property
    def selling_price(self):
        """Gets the selling_price of this Getcomputedprice.

        Computed Price before applying coupons, promotions and taxes. This price may change before reaching the shelf.

        :return: The selling_price of this Getcomputedprice.
        :rtype: float
        """
        return self._selling_price

    @selling_price.setter
    def selling_price(self, selling_price):
        """Sets the selling_price of this Getcomputedprice.

        Computed Price before applying coupons, promotions and taxes. This price may change before reaching the shelf.

        :param selling_price: The selling_price of this Getcomputedprice.
        :type selling_price: float
        """
        if selling_price is None:
            raise ValueError("Invalid value for `selling_price`, must not be `None`")

        self._selling_price = selling_price

    @property
    def trade_policy_id(self):
        """Gets the trade_policy_id of this Getcomputedprice.

        Trade Policy ID.

        :return: The trade_policy_id of this Getcomputedprice.
        :rtype: str
        """
        return self._trade_policy_id

    @trade_policy_id.setter
    def trade_policy_id(self, trade_policy_id):
        """Sets the trade_policy_id of this Getcomputedprice.

        Trade Policy ID.

        :param trade_policy_id: The trade_policy_id of this Getcomputedprice.
        :type trade_policy_id: str
        """
        if trade_policy_id is None:
            raise ValueError("Invalid value for `trade_policy_id`, must not be `None`")

        self._trade_policy_id = trade_policy_id
