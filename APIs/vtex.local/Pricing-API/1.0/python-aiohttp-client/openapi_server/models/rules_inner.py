# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.context import Context
from openapi_server import util


class RulesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: Context=None, id: int=None, percentual_modifier: float=None):
        """RulesInner - a model defined in OpenAPI

        :param context: The context of this RulesInner.
        :param id: The id of this RulesInner.
        :param percentual_modifier: The percentual_modifier of this RulesInner.
        """
        self.openapi_types = {
            'context': Context,
            'id': int,
            'percentual_modifier': float
        }

        self.attribute_map = {
            'context': 'context',
            'id': 'id',
            'percentual_modifier': 'percentualModifier'
        }

        self._context = context
        self._id = id
        self._percentual_modifier = percentual_modifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RulesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rules_inner of this RulesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this RulesInner.


        :return: The context of this RulesInner.
        :rtype: Context
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this RulesInner.


        :param context: The context of this RulesInner.
        :type context: Context
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")

        self._context = context

    @property
    def id(self):
        """Gets the id of this RulesInner.

        Rule ID.

        :return: The id of this RulesInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RulesInner.

        Rule ID.

        :param id: The id of this RulesInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def percentual_modifier(self):
        """Gets the percentual_modifier of this RulesInner.

        Percentual modifier.

        :return: The percentual_modifier of this RulesInner.
        :rtype: float
        """
        return self._percentual_modifier

    @percentual_modifier.setter
    def percentual_modifier(self, percentual_modifier):
        """Sets the percentual_modifier of this RulesInner.

        Percentual modifier.

        :param percentual_modifier: The percentual_modifier of this RulesInner.
        :type percentual_modifier: float
        """
        if percentual_modifier is None:
            raise ValueError("Invalid value for `percentual_modifier`, must not be `None`")

        self._percentual_modifier = percentual_modifier
