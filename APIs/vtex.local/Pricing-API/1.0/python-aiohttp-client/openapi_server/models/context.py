# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_range import DateRange
from openapi_server.models.markup_range import MarkupRange
from openapi_server import util


class Context(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brands: Dict[str, Dict[str, str]]=None, categories: Dict[str, Dict[str, str]]=None, date_range: DateRange=None, internal_categories: object=None, markup_range: MarkupRange=None, stock_statuses: object=None):
        """Context - a model defined in OpenAPI

        :param brands: The brands of this Context.
        :param categories: The categories of this Context.
        :param date_range: The date_range of this Context.
        :param internal_categories: The internal_categories of this Context.
        :param markup_range: The markup_range of this Context.
        :param stock_statuses: The stock_statuses of this Context.
        """
        self.openapi_types = {
            'brands': Dict[str, Dict[str, str]],
            'categories': Dict[str, Dict[str, str]],
            'date_range': DateRange,
            'internal_categories': object,
            'markup_range': MarkupRange,
            'stock_statuses': object
        }

        self.attribute_map = {
            'brands': 'brands',
            'categories': 'categories',
            'date_range': 'dateRange',
            'internal_categories': 'internalCategories',
            'markup_range': 'markupRange',
            'stock_statuses': 'stockStatuses'
        }

        self._brands = brands
        self._categories = categories
        self._date_range = date_range
        self._internal_categories = internal_categories
        self._markup_range = markup_range
        self._stock_statuses = stock_statuses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Context':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The context of this Context.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brands(self):
        """Gets the brands of this Context.

        Brands that an item should have to be eligible for the rule. Format: key: `brandId`, value: `brandName`.

        :return: The brands of this Context.
        :rtype: Dict[str, Dict[str, str]]
        """
        return self._brands

    @brands.setter
    def brands(self, brands):
        """Sets the brands of this Context.

        Brands that an item should have to be eligible for the rule. Format: key: `brandId`, value: `brandName`.

        :param brands: The brands of this Context.
        :type brands: Dict[str, Dict[str, str]]
        """
        if brands is None:
            raise ValueError("Invalid value for `brands`, must not be `None`")

        self._brands = brands

    @property
    def categories(self):
        """Gets the categories of this Context.

        Categories that an item should have to be eligible for the rule. Format: key: `categoryId`, value: `categoryName`.

        :return: The categories of this Context.
        :rtype: Dict[str, Dict[str, str]]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Context.

        Categories that an item should have to be eligible for the rule. Format: key: `categoryId`, value: `categoryName`.

        :param categories: The categories of this Context.
        :type categories: Dict[str, Dict[str, str]]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")

        self._categories = categories

    @property
    def date_range(self):
        """Gets the date_range of this Context.


        :return: The date_range of this Context.
        :rtype: DateRange
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this Context.


        :param date_range: The date_range of this Context.
        :type date_range: DateRange
        """
        if date_range is None:
            raise ValueError("Invalid value for `date_range`, must not be `None`")

        self._date_range = date_range

    @property
    def internal_categories(self):
        """Gets the internal_categories of this Context.

        Internal Categories.

        :return: The internal_categories of this Context.
        :rtype: object
        """
        return self._internal_categories

    @internal_categories.setter
    def internal_categories(self, internal_categories):
        """Sets the internal_categories of this Context.

        Internal Categories.

        :param internal_categories: The internal_categories of this Context.
        :type internal_categories: object
        """

        self._internal_categories = internal_categories

    @property
    def markup_range(self):
        """Gets the markup_range of this Context.


        :return: The markup_range of this Context.
        :rtype: MarkupRange
        """
        return self._markup_range

    @markup_range.setter
    def markup_range(self, markup_range):
        """Sets the markup_range of this Context.


        :param markup_range: The markup_range of this Context.
        :type markup_range: MarkupRange
        """
        if markup_range is None:
            raise ValueError("Invalid value for `markup_range`, must not be `None`")

        self._markup_range = markup_range

    @property
    def stock_statuses(self):
        """Gets the stock_statuses of this Context.

        Stock statuses.

        :return: The stock_statuses of this Context.
        :rtype: object
        """
        return self._stock_statuses

    @stock_statuses.setter
    def stock_statuses(self, stock_statuses):
        """Sets the stock_statuses of this Context.

        Stock statuses.

        :param stock_statuses: The stock_statuses of this Context.
        :type stock_statuses: object
        """

        self._stock_statuses = stock_statuses
