# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pricing_configuration_price_variation import PricingConfigurationPriceVariation
from openapi_server.models.pricing_configuration_trade_policy_configs_inner import PricingConfigurationTradePolicyConfigsInner
from openapi_server import util


class PricingConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, block_account: bool=None, blocked_routes: List[str]=None, default_markup: int=None, has_migrated: bool=None, has_optional_base_price: bool=None, has_price_inheritance: bool=None, migration_status: str=None, minimum_markups: Dict[str, int]=None, price_inheritance: str=None, price_table_limit: int=None, price_table_selection_strategy: str='first', price_variation: PricingConfigurationPriceVariation=None, sellers_to_override: List[object]=None, trade_policy_configs: List[PricingConfigurationTradePolicyConfigsInner]=None):
        """PricingConfiguration - a model defined in OpenAPI

        :param block_account: The block_account of this PricingConfiguration.
        :param blocked_routes: The blocked_routes of this PricingConfiguration.
        :param default_markup: The default_markup of this PricingConfiguration.
        :param has_migrated: The has_migrated of this PricingConfiguration.
        :param has_optional_base_price: The has_optional_base_price of this PricingConfiguration.
        :param has_price_inheritance: The has_price_inheritance of this PricingConfiguration.
        :param migration_status: The migration_status of this PricingConfiguration.
        :param minimum_markups: The minimum_markups of this PricingConfiguration.
        :param price_inheritance: The price_inheritance of this PricingConfiguration.
        :param price_table_limit: The price_table_limit of this PricingConfiguration.
        :param price_table_selection_strategy: The price_table_selection_strategy of this PricingConfiguration.
        :param price_variation: The price_variation of this PricingConfiguration.
        :param sellers_to_override: The sellers_to_override of this PricingConfiguration.
        :param trade_policy_configs: The trade_policy_configs of this PricingConfiguration.
        """
        self.openapi_types = {
            'block_account': bool,
            'blocked_routes': List[str],
            'default_markup': int,
            'has_migrated': bool,
            'has_optional_base_price': bool,
            'has_price_inheritance': bool,
            'migration_status': str,
            'minimum_markups': Dict[str, int],
            'price_inheritance': str,
            'price_table_limit': int,
            'price_table_selection_strategy': str,
            'price_variation': PricingConfigurationPriceVariation,
            'sellers_to_override': List[object],
            'trade_policy_configs': List[PricingConfigurationTradePolicyConfigsInner]
        }

        self.attribute_map = {
            'block_account': 'blockAccount',
            'blocked_routes': 'blockedRoutes',
            'default_markup': 'defaultMarkup',
            'has_migrated': 'hasMigrated',
            'has_optional_base_price': 'hasOptionalBasePrice',
            'has_price_inheritance': 'hasPriceInheritance',
            'migration_status': 'migrationStatus',
            'minimum_markups': 'minimumMarkups',
            'price_inheritance': 'priceInheritance',
            'price_table_limit': 'priceTableLimit',
            'price_table_selection_strategy': 'priceTableSelectionStrategy',
            'price_variation': 'priceVariation',
            'sellers_to_override': 'sellersToOverride',
            'trade_policy_configs': 'tradePolicyConfigs'
        }

        self._block_account = block_account
        self._blocked_routes = blocked_routes
        self._default_markup = default_markup
        self._has_migrated = has_migrated
        self._has_optional_base_price = has_optional_base_price
        self._has_price_inheritance = has_price_inheritance
        self._migration_status = migration_status
        self._minimum_markups = minimum_markups
        self._price_inheritance = price_inheritance
        self._price_table_limit = price_table_limit
        self._price_table_selection_strategy = price_table_selection_strategy
        self._price_variation = price_variation
        self._sellers_to_override = sellers_to_override
        self._trade_policy_configs = trade_policy_configs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PricingConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PricingConfiguration of this PricingConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def block_account(self):
        """Gets the block_account of this PricingConfiguration.

        Defines if access to the Pricing APIs is blocked for external requests.

        :return: The block_account of this PricingConfiguration.
        :rtype: bool
        """
        return self._block_account

    @block_account.setter
    def block_account(self, block_account):
        """Sets the block_account of this PricingConfiguration.

        Defines if access to the Pricing APIs is blocked for external requests.

        :param block_account: The block_account of this PricingConfiguration.
        :type block_account: bool
        """

        self._block_account = block_account

    @property
    def blocked_routes(self):
        """Gets the blocked_routes of this PricingConfiguration.

        Array with all blocked routes.

        :return: The blocked_routes of this PricingConfiguration.
        :rtype: List[str]
        """
        return self._blocked_routes

    @blocked_routes.setter
    def blocked_routes(self, blocked_routes):
        """Sets the blocked_routes of this PricingConfiguration.

        Array with all blocked routes.

        :param blocked_routes: The blocked_routes of this PricingConfiguration.
        :type blocked_routes: List[str]
        """

        self._blocked_routes = blocked_routes

    @property
    def default_markup(self):
        """Gets the default_markup of this PricingConfiguration.

        Account default markup.

        :return: The default_markup of this PricingConfiguration.
        :rtype: int
        """
        return self._default_markup

    @default_markup.setter
    def default_markup(self, default_markup):
        """Sets the default_markup of this PricingConfiguration.

        Account default markup.

        :param default_markup: The default_markup of this PricingConfiguration.
        :type default_markup: int
        """
        if default_markup is None:
            raise ValueError("Invalid value for `default_markup`, must not be `None`")

        self._default_markup = default_markup

    @property
    def has_migrated(self):
        """Gets the has_migrated of this PricingConfiguration.

        Defines if the account has migrated to Pricing V2.

        :return: The has_migrated of this PricingConfiguration.
        :rtype: bool
        """
        return self._has_migrated

    @has_migrated.setter
    def has_migrated(self, has_migrated):
        """Sets the has_migrated of this PricingConfiguration.

        Defines if the account has migrated to Pricing V2.

        :param has_migrated: The has_migrated of this PricingConfiguration.
        :type has_migrated: bool
        """
        if has_migrated is None:
            raise ValueError("Invalid value for `has_migrated`, must not be `None`")

        self._has_migrated = has_migrated

    @property
    def has_optional_base_price(self):
        """Gets the has_optional_base_price of this PricingConfiguration.

        Defines if optional base price is allowed.

        :return: The has_optional_base_price of this PricingConfiguration.
        :rtype: bool
        """
        return self._has_optional_base_price

    @has_optional_base_price.setter
    def has_optional_base_price(self, has_optional_base_price):
        """Sets the has_optional_base_price of this PricingConfiguration.

        Defines if optional base price is allowed.

        :param has_optional_base_price: The has_optional_base_price of this PricingConfiguration.
        :type has_optional_base_price: bool
        """

        self._has_optional_base_price = has_optional_base_price

    @property
    def has_price_inheritance(self):
        """Gets the has_price_inheritance of this PricingConfiguration.

        Deprecated. Use the `priceInheritance` field instead.

        :return: The has_price_inheritance of this PricingConfiguration.
        :rtype: bool
        """
        return self._has_price_inheritance

    @has_price_inheritance.setter
    def has_price_inheritance(self, has_price_inheritance):
        """Sets the has_price_inheritance of this PricingConfiguration.

        Deprecated. Use the `priceInheritance` field instead.

        :param has_price_inheritance: The has_price_inheritance of this PricingConfiguration.
        :type has_price_inheritance: bool
        """

        self._has_price_inheritance = has_price_inheritance

    @property
    def migration_status(self):
        """Gets the migration_status of this PricingConfiguration.

        Pricing V2 migration status.

        :return: The migration_status of this PricingConfiguration.
        :rtype: str
        """
        return self._migration_status

    @migration_status.setter
    def migration_status(self, migration_status):
        """Sets the migration_status of this PricingConfiguration.

        Pricing V2 migration status.

        :param migration_status: The migration_status of this PricingConfiguration.
        :type migration_status: str
        """

        self._migration_status = migration_status

    @property
    def minimum_markups(self):
        """Gets the minimum_markups of this PricingConfiguration.

        Account minimum markup.

        :return: The minimum_markups of this PricingConfiguration.
        :rtype: Dict[str, int]
        """
        return self._minimum_markups

    @minimum_markups.setter
    def minimum_markups(self, minimum_markups):
        """Sets the minimum_markups of this PricingConfiguration.

        Account minimum markup.

        :param minimum_markups: The minimum_markups of this PricingConfiguration.
        :type minimum_markups: Dict[str, int]
        """
        if minimum_markups is None:
            raise ValueError("Invalid value for `minimum_markups`, must not be `None`")

        self._minimum_markups = minimum_markups

    @property
    def price_inheritance(self):
        """Gets the price_inheritance of this PricingConfiguration.

        Condition of price inheritance from its parent account. This field can have three possible values: `never` if the store should never inherit prices, `nonexistent` if the store should only inherit prices in case of nonexistent prices for a given product, or `always` if the store should always inherit prices, regardless of its own prices.

        :return: The price_inheritance of this PricingConfiguration.
        :rtype: str
        """
        return self._price_inheritance

    @price_inheritance.setter
    def price_inheritance(self, price_inheritance):
        """Sets the price_inheritance of this PricingConfiguration.

        Condition of price inheritance from its parent account. This field can have three possible values: `never` if the store should never inherit prices, `nonexistent` if the store should only inherit prices in case of nonexistent prices for a given product, or `always` if the store should always inherit prices, regardless of its own prices.

        :param price_inheritance: The price_inheritance of this PricingConfiguration.
        :type price_inheritance: str
        """

        self._price_inheritance = price_inheritance

    @property
    def price_table_limit(self):
        """Gets the price_table_limit of this PricingConfiguration.

        Price Table Limit.

        :return: The price_table_limit of this PricingConfiguration.
        :rtype: int
        """
        return self._price_table_limit

    @price_table_limit.setter
    def price_table_limit(self, price_table_limit):
        """Sets the price_table_limit of this PricingConfiguration.

        Price Table Limit.

        :param price_table_limit: The price_table_limit of this PricingConfiguration.
        :type price_table_limit: int
        """

        self._price_table_limit = price_table_limit

    @property
    def price_table_selection_strategy(self):
        """Gets the price_table_selection_strategy of this PricingConfiguration.

        The strategy used to get prices when there is more than one option. Possible values: `first`, `highest`, `lowest`. Default: `first`.

        :return: The price_table_selection_strategy of this PricingConfiguration.
        :rtype: str
        """
        return self._price_table_selection_strategy

    @price_table_selection_strategy.setter
    def price_table_selection_strategy(self, price_table_selection_strategy):
        """Sets the price_table_selection_strategy of this PricingConfiguration.

        The strategy used to get prices when there is more than one option. Possible values: `first`, `highest`, `lowest`. Default: `first`.

        :param price_table_selection_strategy: The price_table_selection_strategy of this PricingConfiguration.
        :type price_table_selection_strategy: str
        """

        self._price_table_selection_strategy = price_table_selection_strategy

    @property
    def price_variation(self):
        """Gets the price_variation of this PricingConfiguration.


        :return: The price_variation of this PricingConfiguration.
        :rtype: PricingConfigurationPriceVariation
        """
        return self._price_variation

    @price_variation.setter
    def price_variation(self, price_variation):
        """Sets the price_variation of this PricingConfiguration.


        :param price_variation: The price_variation of this PricingConfiguration.
        :type price_variation: PricingConfigurationPriceVariation
        """

        self._price_variation = price_variation

    @property
    def sellers_to_override(self):
        """Gets the sellers_to_override of this PricingConfiguration.

        Overrides prices from sellers.

        :return: The sellers_to_override of this PricingConfiguration.
        :rtype: List[object]
        """
        return self._sellers_to_override

    @sellers_to_override.setter
    def sellers_to_override(self, sellers_to_override):
        """Sets the sellers_to_override of this PricingConfiguration.

        Overrides prices from sellers.

        :param sellers_to_override: The sellers_to_override of this PricingConfiguration.
        :type sellers_to_override: List[object]
        """

        self._sellers_to_override = sellers_to_override

    @property
    def trade_policy_configs(self):
        """Gets the trade_policy_configs of this PricingConfiguration.

        Trade Policy Configurations array.

        :return: The trade_policy_configs of this PricingConfiguration.
        :rtype: List[PricingConfigurationTradePolicyConfigsInner]
        """
        return self._trade_policy_configs

    @trade_policy_configs.setter
    def trade_policy_configs(self, trade_policy_configs):
        """Sets the trade_policy_configs of this PricingConfiguration.

        Trade Policy Configurations array.

        :param trade_policy_configs: The trade_policy_configs of this PricingConfiguration.
        :type trade_policy_configs: List[PricingConfigurationTradePolicyConfigsInner]
        """

        self._trade_policy_configs = trade_policy_configs
