# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fixed_price import FixedPrice
from openapi_server import util


class Getprice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_price: int=None, cost_price: int=None, fixed_prices: List[FixedPrice]=None, item_id: str=None, list_price: int=None, markup: int=None):
        """Getprice - a model defined in OpenAPI

        :param base_price: The base_price of this Getprice.
        :param cost_price: The cost_price of this Getprice.
        :param fixed_prices: The fixed_prices of this Getprice.
        :param item_id: The item_id of this Getprice.
        :param list_price: The list_price of this Getprice.
        :param markup: The markup of this Getprice.
        """
        self.openapi_types = {
            'base_price': int,
            'cost_price': int,
            'fixed_prices': List[FixedPrice],
            'item_id': str,
            'list_price': int,
            'markup': int
        }

        self.attribute_map = {
            'base_price': 'basePrice',
            'cost_price': 'costPrice',
            'fixed_prices': 'fixedPrices',
            'item_id': 'itemId',
            'list_price': 'listPrice',
            'markup': 'markup'
        }

        self._base_price = base_price
        self._cost_price = cost_price
        self._fixed_prices = fixed_prices
        self._item_id = item_id
        self._list_price = list_price
        self._markup = markup

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Getprice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Getprice of this Getprice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_price(self):
        """Gets the base_price of this Getprice.

        SKU's reference price.

        :return: The base_price of this Getprice.
        :rtype: int
        """
        return self._base_price

    @base_price.setter
    def base_price(self, base_price):
        """Sets the base_price of this Getprice.

        SKU's reference price.

        :param base_price: The base_price of this Getprice.
        :type base_price: int
        """
        if base_price is None:
            raise ValueError("Invalid value for `base_price`, must not be `None`")

        self._base_price = base_price

    @property
    def cost_price(self):
        """Gets the cost_price of this Getprice.

        SKU's cost price.

        :return: The cost_price of this Getprice.
        :rtype: int
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this Getprice.

        SKU's cost price.

        :param cost_price: The cost_price of this Getprice.
        :type cost_price: int
        """
        if cost_price is None:
            raise ValueError("Invalid value for `cost_price`, must not be `None`")

        self._cost_price = cost_price

    @property
    def fixed_prices(self):
        """Gets the fixed_prices of this Getprice.

        The fixed price is a price that overlaps all other existing price configurations of a price table.

        :return: The fixed_prices of this Getprice.
        :rtype: List[FixedPrice]
        """
        return self._fixed_prices

    @fixed_prices.setter
    def fixed_prices(self, fixed_prices):
        """Sets the fixed_prices of this Getprice.

        The fixed price is a price that overlaps all other existing price configurations of a price table.

        :param fixed_prices: The fixed_prices of this Getprice.
        :type fixed_prices: List[FixedPrice]
        """
        if fixed_prices is None:
            raise ValueError("Invalid value for `fixed_prices`, must not be `None`")

        self._fixed_prices = fixed_prices

    @property
    def item_id(self):
        """Gets the item_id of this Getprice.

        SKU ID.

        :return: The item_id of this Getprice.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Getprice.

        SKU ID.

        :param item_id: The item_id of this Getprice.
        :type item_id: str
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")

        self._item_id = item_id

    @property
    def list_price(self):
        """Gets the list_price of this Getprice.

        Suggested retail price for the SKU.

        :return: The list_price of this Getprice.
        :rtype: int
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this Getprice.

        Suggested retail price for the SKU.

        :param list_price: The list_price of this Getprice.
        :type list_price: int
        """
        if list_price is None:
            raise ValueError("Invalid value for `list_price`, must not be `None`")

        self._list_price = list_price

    @property
    def markup(self):
        """Gets the markup of this Getprice.

        Desired profit margin with the SKU's sale.

        :return: The markup of this Getprice.
        :rtype: int
        """
        return self._markup

    @markup.setter
    def markup(self, markup):
        """Sets the markup of this Getprice.

        Desired profit margin with the SKU's sale.

        :param markup: The markup of this Getprice.
        :type markup: int
        """
        if markup is None:
            raise ValueError("Invalid value for `markup`, must not be `None`")

        self._markup = markup
