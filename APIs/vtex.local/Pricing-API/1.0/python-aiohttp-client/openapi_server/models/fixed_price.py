# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_range import DateRange
from openapi_server import util


class FixedPrice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_range: DateRange=None, list_price: float=None, min_quantity: int=None, trade_policy_id: str=None, value: float=None):
        """FixedPrice - a model defined in OpenAPI

        :param date_range: The date_range of this FixedPrice.
        :param list_price: The list_price of this FixedPrice.
        :param min_quantity: The min_quantity of this FixedPrice.
        :param trade_policy_id: The trade_policy_id of this FixedPrice.
        :param value: The value of this FixedPrice.
        """
        self.openapi_types = {
            'date_range': DateRange,
            'list_price': float,
            'min_quantity': int,
            'trade_policy_id': str,
            'value': float
        }

        self.attribute_map = {
            'date_range': 'dateRange',
            'list_price': 'listPrice',
            'min_quantity': 'minQuantity',
            'trade_policy_id': 'tradePolicyId',
            'value': 'value'
        }

        self._date_range = date_range
        self._list_price = list_price
        self._min_quantity = min_quantity
        self._trade_policy_id = trade_policy_id
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FixedPrice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FixedPrice of this FixedPrice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_range(self):
        """Gets the date_range of this FixedPrice.


        :return: The date_range of this FixedPrice.
        :rtype: DateRange
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this FixedPrice.


        :param date_range: The date_range of this FixedPrice.
        :type date_range: DateRange
        """

        self._date_range = date_range

    @property
    def list_price(self):
        """Gets the list_price of this FixedPrice.

        Trade Policy List Price Value.

        :return: The list_price of this FixedPrice.
        :rtype: float
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this FixedPrice.

        Trade Policy List Price Value.

        :param list_price: The list_price of this FixedPrice.
        :type list_price: float
        """
        if list_price is None:
            raise ValueError("Invalid value for `list_price`, must not be `None`")

        self._list_price = list_price

    @property
    def min_quantity(self):
        """Gets the min_quantity of this FixedPrice.

        Trade Policy Fixed Price Minimum Item Quantity.

        :return: The min_quantity of this FixedPrice.
        :rtype: int
        """
        return self._min_quantity

    @min_quantity.setter
    def min_quantity(self, min_quantity):
        """Sets the min_quantity of this FixedPrice.

        Trade Policy Fixed Price Minimum Item Quantity.

        :param min_quantity: The min_quantity of this FixedPrice.
        :type min_quantity: int
        """
        if min_quantity is None:
            raise ValueError("Invalid value for `min_quantity`, must not be `None`")

        self._min_quantity = min_quantity

    @property
    def trade_policy_id(self):
        """Gets the trade_policy_id of this FixedPrice.

        Trade Policy ID.

        :return: The trade_policy_id of this FixedPrice.
        :rtype: str
        """
        return self._trade_policy_id

    @trade_policy_id.setter
    def trade_policy_id(self, trade_policy_id):
        """Sets the trade_policy_id of this FixedPrice.

        Trade Policy ID.

        :param trade_policy_id: The trade_policy_id of this FixedPrice.
        :type trade_policy_id: str
        """
        if trade_policy_id is None:
            raise ValueError("Invalid value for `trade_policy_id`, must not be `None`")

        self._trade_policy_id = trade_policy_id

    @property
    def value(self):
        """Gets the value of this FixedPrice.

        Trade Policy Fixed Price Value.

        :return: The value of this FixedPrice.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FixedPrice.

        Trade Policy Fixed Price Value.

        :param value: The value of this FixedPrice.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
