/**
 * Pricing API
 *   > Check the new [Pricing onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/pricing-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Pricing and is organized by focusing on the developer's journey.    Pricing is the VTEX module responsible for the SKU's price list. At this module we have the base price of each SKU, some optional fixed prices by trade policy, and some rules that can be applied to generate dynamically different final prices according to the purchase context and the trade policy. The variables used in this collection are:      * **{{accountName}}** = You VTEX account name.    * **{{tradePolicyId}}** = Current Trade Policy ID.    * **{{itemId}}** = SKU ID.    * **{{X-VTEX-API-AppKey}}** and **{{X-VTEX-API-AppToken}}** = Credentials.    You can get more information about how to use this module and its business logic at [VTEX Help](http://help.vtex.com).    ## Rate Limits    ### Limits per route    - `GET`:  routes are not rate limited at the moment  - `PUT or POST`: `40 requests/second/account` in any **price insert/update route** with 1000 *Burst Credits*  - `DELETE`: `16 requests/second/account` in any **price deletion route**, with 300 *Burst Credits*.    ### What are Burst Credits?    In case the account exceeds the limit frequency for a  `Rate Limiter` (for instance, when one account makes `41 requests/second` in any `price insert/update route`), we decrease from the *Burst Credit* count the exceeding (in this example, *1 Credit*).    In the event of the *Burst Credits* reaching **0 (zero)**, the request is blocked with a `Status 429` response.    The credits fill up over time when the route is not being used, in the same rate as the route's `Rate Limiter`. In our example, for each second not sending a **PUT or POST request**, we increase *40 Burst Credits* to this `Rate Limiter`    ### New Response Headers    In the response headers of any request to Pricing v2 there are some new headers indicating the current status of the Rate Limiting.  This information may be useful to evaluate the ideal frequency to send requests to a route, and when to send a new request in the event of reaching a Rate Limit.    - `Ratelimit-Limit` - Total *Burst Credits* offered to a route  - `Ratelimit-Remaining` - How many *Burst Credits* are still available to use  - `Ratelimit-Reset` - How long (in seconds) it will take to the *Burst Credits* to fill up completely (It will fill up to the `Ratelimit-Limit`)  - `Retry-After` - Indicates how many seconds you will need to wait until the `Rate Limiter` accepts a new request to this route again. If this header response exists, this means your current request has been rate limited and has not been processed.    ### How to integrate with Pricing v2 considering our Rate Limits    Integrate considering the limits of **requests/route/account** specified in the [*Limits per route*](#rate-limits) section, avoiding to surpass this frequency.    If you happen to be Rate Limited, wait the time in seconds specified in `Retry-After` before making another request to the service, and reduce the rate of requests per second that your integration is making.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPriceTablesApi_H
#define OAI_OAIPriceTablesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetallpricetablesandrules_200_response_inner.h"
#include "OAIGetrulesforapricetable_200_response.h"
#include "OAI_pricing_pipeline_catalog__priceTableId__put_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPriceTablesApi : public QObject {
    Q_OBJECT

public:
    OAIPriceTablesApi(const int timeOut = 0);
    ~OAIPriceTablesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void getallpricetablesandrules(const QString &content_type, const QString &accept);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  price_table_id QString [required]
    */
    virtual void getrulesforapricetable(const QString &content_type, const QString &accept, const QString &price_table_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void listpricetables(const QString &content_type, const QString &accept);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  price_table_id QString [required]
    * @param[in]  oai_pricing_pipeline_catalog__price_table_id__put_request OAI_pricing_pipeline_catalog__priceTableId__put_request [optional]
    */
    virtual void pricingPipelineCatalogPriceTableIdPut(const QString &content_type, const QString &accept, const QString &price_table_id, const ::OpenAPI::OptionalParam<OAI_pricing_pipeline_catalog__priceTableId__put_request> &oai_pricing_pipeline_catalog__price_table_id__put_request = ::OpenAPI::OptionalParam<OAI_pricing_pipeline_catalog__priceTableId__put_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getallpricetablesandrulesCallback(OAIHttpRequestWorker *worker);
    void getrulesforapricetableCallback(OAIHttpRequestWorker *worker);
    void listpricetablesCallback(OAIHttpRequestWorker *worker);
    void pricingPipelineCatalogPriceTableIdPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getallpricetablesandrulesSignal(QList<OAIGetallpricetablesandrules_200_response_inner> summary);
    void getrulesforapricetableSignal(OAIGetrulesforapricetable_200_response summary);
    void listpricetablesSignal(QList<QString> summary);
    void pricingPipelineCatalogPriceTableIdPutSignal();


    void getallpricetablesandrulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetallpricetablesandrules_200_response_inner> summary);
    void getrulesforapricetableSignalFull(OAIHttpRequestWorker *worker, OAIGetrulesforapricetable_200_response summary);
    void listpricetablesSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void pricingPipelineCatalogPriceTableIdPutSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getallpricetablesandrulesSignalError() instead")
    void getallpricetablesandrulesSignalE(QList<OAIGetallpricetablesandrules_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getallpricetablesandrulesSignalError(QList<OAIGetallpricetablesandrules_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getrulesforapricetableSignalError() instead")
    void getrulesforapricetableSignalE(OAIGetrulesforapricetable_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getrulesforapricetableSignalError(OAIGetrulesforapricetable_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listpricetablesSignalError() instead")
    void listpricetablesSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listpricetablesSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingPipelineCatalogPriceTableIdPutSignalError() instead")
    void pricingPipelineCatalogPriceTableIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pricingPipelineCatalogPriceTableIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getallpricetablesandrulesSignalErrorFull() instead")
    void getallpricetablesandrulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getallpricetablesandrulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getrulesforapricetableSignalErrorFull() instead")
    void getrulesforapricetableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getrulesforapricetableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listpricetablesSignalErrorFull() instead")
    void listpricetablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listpricetablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingPipelineCatalogPriceTableIdPutSignalErrorFull() instead")
    void pricingPipelineCatalogPriceTableIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pricingPipelineCatalogPriceTableIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
