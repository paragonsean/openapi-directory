/**
 * Pricing API
 *   > Check the new [Pricing onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/pricing-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Pricing and is organized by focusing on the developer's journey.    Pricing is the VTEX module responsible for the SKU's price list. At this module we have the base price of each SKU, some optional fixed prices by trade policy, and some rules that can be applied to generate dynamically different final prices according to the purchase context and the trade policy. The variables used in this collection are:      * **{{accountName}}** = You VTEX account name.    * **{{tradePolicyId}}** = Current Trade Policy ID.    * **{{itemId}}** = SKU ID.    * **{{X-VTEX-API-AppKey}}** and **{{X-VTEX-API-AppToken}}** = Credentials.    You can get more information about how to use this module and its business logic at [VTEX Help](http://help.vtex.com).    ## Rate Limits    ### Limits per route    - `GET`:  routes are not rate limited at the moment  - `PUT or POST`: `40 requests/second/account` in any **price insert/update route** with 1000 *Burst Credits*  - `DELETE`: `16 requests/second/account` in any **price deletion route**, with 300 *Burst Credits*.    ### What are Burst Credits?    In case the account exceeds the limit frequency for a  `Rate Limiter` (for instance, when one account makes `41 requests/second` in any `price insert/update route`), we decrease from the *Burst Credit* count the exceeding (in this example, *1 Credit*).    In the event of the *Burst Credits* reaching **0 (zero)**, the request is blocked with a `Status 429` response.    The credits fill up over time when the route is not being used, in the same rate as the route's `Rate Limiter`. In our example, for each second not sending a **PUT or POST request**, we increase *40 Burst Credits* to this `Rate Limiter`    ### New Response Headers    In the response headers of any request to Pricing v2 there are some new headers indicating the current status of the Rate Limiting.  This information may be useful to evaluate the ideal frequency to send requests to a route, and when to send a new request in the event of reaching a Rate Limit.    - `Ratelimit-Limit` - Total *Burst Credits* offered to a route  - `Ratelimit-Remaining` - How many *Burst Credits* are still available to use  - `Ratelimit-Reset` - How long (in seconds) it will take to the *Burst Credits* to fill up completely (It will fill up to the `Ratelimit-Limit`)  - `Retry-After` - Indicates how many seconds you will need to wait until the `Rate Limiter` accepts a new request to this route again. If this header response exists, this means your current request has been rate limited and has not been processed.    ### How to integrate with Pricing v2 considering our Rate Limits    Integrate considering the limits of **requests/route/account** specified in the [*Limits per route*](#rate-limits) section, avoiding to surpass this frequency.    If you happen to be Rate Limited, wait the time in seconds specified in `Retry-After` before making another request to the service, and reduce the rate of requests per second that your integration is making.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPricesAndFixedPricesApi_H
#define OAI_OAIPricesAndFixedPricesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateUpdatePriceOrFixedPrice_request.h"
#include "OAICreateorupdatefixedpricesonpricetableortradepolicy_request_inner.h"
#include "OAIFixedPrice.h"
#include "OAIGetcomputedprice.h"
#include "OAIGetprice.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPricesAndFixedPricesApi : public QObject {
    Q_OBJECT

public:
    OAIPricesAndFixedPricesApi(const int timeOut = 0);
    ~OAIPricesAndFixedPricesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  item_id qint32 [required]
    * @param[in]  oai_create_update_price_or_fixed_price_request OAICreateUpdatePriceOrFixedPrice_request [optional]
    */
    virtual void createUpdatePriceOrFixedPrice(const QString &accept, const QString &content_type, const qint32 &item_id, const ::OpenAPI::OptionalParam<OAICreateUpdatePriceOrFixedPrice_request> &oai_create_update_price_or_fixed_price_request = ::OpenAPI::OptionalParam<OAICreateUpdatePriceOrFixedPrice_request>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  item_id qint32 [required]
    * @param[in]  price_table_id QString [required]
    * @param[in]  oai_createorupdatefixedpricesonpricetableortradepolicy_request_inner QList<OAICreateorupdatefixedpricesonpricetableortradepolicy_request_inner> [optional]
    */
    virtual void createorupdatefixedpricesonpricetableortradepolicy(const QString &content_type, const QString &accept, const qint32 &item_id, const QString &price_table_id, const ::OpenAPI::OptionalParam<QList<OAICreateorupdatefixedpricesonpricetableortradepolicy_request_inner>> &oai_createorupdatefixedpricesonpricetableortradepolicy_request_inner = ::OpenAPI::OptionalParam<QList<OAICreateorupdatefixedpricesonpricetableortradepolicy_request_inner>>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  item_id qint32 [required]
    */
    virtual void deletePrice(const QString &content_type, const QString &accept, const qint32 &item_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  item_id qint32 [required]
    * @param[in]  price_table_id QString [required]
    */
    virtual void deletefixedpricesonapricetableortradepolicy(const QString &content_type, const QString &accept, const qint32 &item_id, const QString &price_table_id);

    /**
    * @param[in]  category_ids qint32 [required]
    * @param[in]  brand_id qint32 [required]
    * @param[in]  quantity qint32 [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  item_id qint32 [required]
    * @param[in]  price_table_id QString [required]
    */
    virtual void getComputedPricebypricetable(const qint32 &category_ids, const qint32 &brand_id, const qint32 &quantity, const QString &content_type, const QString &accept, const qint32 &item_id, const QString &price_table_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  item_id qint32 [required]
    */
    virtual void getFixedPrices(const QString &accept, const QString &content_type, const qint32 &item_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  item_id qint32 [required]
    * @param[in]  price_table_id QString [required]
    */
    virtual void getFixedPricesonapricetable(const QString &content_type, const QString &accept, const qint32 &item_id, const QString &price_table_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  item_id qint32 [required]
    */
    virtual void getPrice(const QString &content_type, const QString &accept, const qint32 &item_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createUpdatePriceOrFixedPriceCallback(OAIHttpRequestWorker *worker);
    void createorupdatefixedpricesonpricetableortradepolicyCallback(OAIHttpRequestWorker *worker);
    void deletePriceCallback(OAIHttpRequestWorker *worker);
    void deletefixedpricesonapricetableortradepolicyCallback(OAIHttpRequestWorker *worker);
    void getComputedPricebypricetableCallback(OAIHttpRequestWorker *worker);
    void getFixedPricesCallback(OAIHttpRequestWorker *worker);
    void getFixedPricesonapricetableCallback(OAIHttpRequestWorker *worker);
    void getPriceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createUpdatePriceOrFixedPriceSignal();
    void createorupdatefixedpricesonpricetableortradepolicySignal();
    void deletePriceSignal();
    void deletefixedpricesonapricetableortradepolicySignal();
    void getComputedPricebypricetableSignal(OAIGetcomputedprice summary);
    void getFixedPricesSignal(QList<OAIFixedPrice> summary);
    void getFixedPricesonapricetableSignal(QList<OAIFixedPrice> summary);
    void getPriceSignal(OAIGetprice summary);


    void createUpdatePriceOrFixedPriceSignalFull(OAIHttpRequestWorker *worker);
    void createorupdatefixedpricesonpricetableortradepolicySignalFull(OAIHttpRequestWorker *worker);
    void deletePriceSignalFull(OAIHttpRequestWorker *worker);
    void deletefixedpricesonapricetableortradepolicySignalFull(OAIHttpRequestWorker *worker);
    void getComputedPricebypricetableSignalFull(OAIHttpRequestWorker *worker, OAIGetcomputedprice summary);
    void getFixedPricesSignalFull(OAIHttpRequestWorker *worker, QList<OAIFixedPrice> summary);
    void getFixedPricesonapricetableSignalFull(OAIHttpRequestWorker *worker, QList<OAIFixedPrice> summary);
    void getPriceSignalFull(OAIHttpRequestWorker *worker, OAIGetprice summary);

    Q_DECL_DEPRECATED_X("Use createUpdatePriceOrFixedPriceSignalError() instead")
    void createUpdatePriceOrFixedPriceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createUpdatePriceOrFixedPriceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createorupdatefixedpricesonpricetableortradepolicySignalError() instead")
    void createorupdatefixedpricesonpricetableortradepolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createorupdatefixedpricesonpricetableortradepolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePriceSignalError() instead")
    void deletePriceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePriceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletefixedpricesonapricetableortradepolicySignalError() instead")
    void deletefixedpricesonapricetableortradepolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletefixedpricesonapricetableortradepolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getComputedPricebypricetableSignalError() instead")
    void getComputedPricebypricetableSignalE(OAIGetcomputedprice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getComputedPricebypricetableSignalError(OAIGetcomputedprice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFixedPricesSignalError() instead")
    void getFixedPricesSignalE(QList<OAIFixedPrice> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFixedPricesSignalError(QList<OAIFixedPrice> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFixedPricesonapricetableSignalError() instead")
    void getFixedPricesonapricetableSignalE(QList<OAIFixedPrice> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFixedPricesonapricetableSignalError(QList<OAIFixedPrice> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPriceSignalError() instead")
    void getPriceSignalE(OAIGetprice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPriceSignalError(OAIGetprice summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createUpdatePriceOrFixedPriceSignalErrorFull() instead")
    void createUpdatePriceOrFixedPriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUpdatePriceOrFixedPriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createorupdatefixedpricesonpricetableortradepolicySignalErrorFull() instead")
    void createorupdatefixedpricesonpricetableortradepolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createorupdatefixedpricesonpricetableortradepolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePriceSignalErrorFull() instead")
    void deletePriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletefixedpricesonapricetableortradepolicySignalErrorFull() instead")
    void deletefixedpricesonapricetableortradepolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletefixedpricesonapricetableortradepolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getComputedPricebypricetableSignalErrorFull() instead")
    void getComputedPricebypricetableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getComputedPricebypricetableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFixedPricesSignalErrorFull() instead")
    void getFixedPricesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFixedPricesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFixedPricesonapricetableSignalErrorFull() instead")
    void getFixedPricesonapricetableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFixedPricesonapricetableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPriceSignalErrorFull() instead")
    void getPriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
