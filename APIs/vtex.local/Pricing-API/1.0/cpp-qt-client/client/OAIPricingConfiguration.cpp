/**
 * Pricing API
 *   > Check the new [Pricing onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/pricing-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Pricing and is organized by focusing on the developer's journey.    Pricing is the VTEX module responsible for the SKU's price list. At this module we have the base price of each SKU, some optional fixed prices by trade policy, and some rules that can be applied to generate dynamically different final prices according to the purchase context and the trade policy. The variables used in this collection are:      * **{{accountName}}** = You VTEX account name.    * **{{tradePolicyId}}** = Current Trade Policy ID.    * **{{itemId}}** = SKU ID.    * **{{X-VTEX-API-AppKey}}** and **{{X-VTEX-API-AppToken}}** = Credentials.    You can get more information about how to use this module and its business logic at [VTEX Help](http://help.vtex.com).    ## Rate Limits    ### Limits per route    - `GET`:  routes are not rate limited at the moment  - `PUT or POST`: `40 requests/second/account` in any **price insert/update route** with 1000 *Burst Credits*  - `DELETE`: `16 requests/second/account` in any **price deletion route**, with 300 *Burst Credits*.    ### What are Burst Credits?    In case the account exceeds the limit frequency for a  `Rate Limiter` (for instance, when one account makes `41 requests/second` in any `price insert/update route`), we decrease from the *Burst Credit* count the exceeding (in this example, *1 Credit*).    In the event of the *Burst Credits* reaching **0 (zero)**, the request is blocked with a `Status 429` response.    The credits fill up over time when the route is not being used, in the same rate as the route's `Rate Limiter`. In our example, for each second not sending a **PUT or POST request**, we increase *40 Burst Credits* to this `Rate Limiter`    ### New Response Headers    In the response headers of any request to Pricing v2 there are some new headers indicating the current status of the Rate Limiting.  This information may be useful to evaluate the ideal frequency to send requests to a route, and when to send a new request in the event of reaching a Rate Limit.    - `Ratelimit-Limit` - Total *Burst Credits* offered to a route  - `Ratelimit-Remaining` - How many *Burst Credits* are still available to use  - `Ratelimit-Reset` - How long (in seconds) it will take to the *Burst Credits* to fill up completely (It will fill up to the `Ratelimit-Limit`)  - `Retry-After` - Indicates how many seconds you will need to wait until the `Rate Limiter` accepts a new request to this route again. If this header response exists, this means your current request has been rate limited and has not been processed.    ### How to integrate with Pricing v2 considering our Rate Limits    Integrate considering the limits of **requests/route/account** specified in the [*Limits per route*](#rate-limits) section, avoiding to surpass this frequency.    If you happen to be Rate Limited, wait the time in seconds specified in `Retry-After` before making another request to the service, and reduce the rate of requests per second that your integration is making.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPricingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPricingConfiguration::OAIPricingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPricingConfiguration::OAIPricingConfiguration() {
    this->initializeModel();
}

OAIPricingConfiguration::~OAIPricingConfiguration() {}

void OAIPricingConfiguration::initializeModel() {

    m_block_account_isSet = false;
    m_block_account_isValid = false;

    m_blocked_routes_isSet = false;
    m_blocked_routes_isValid = false;

    m_default_markup_isSet = false;
    m_default_markup_isValid = false;

    m_has_migrated_isSet = false;
    m_has_migrated_isValid = false;

    m_has_optional_base_price_isSet = false;
    m_has_optional_base_price_isValid = false;

    m_has_price_inheritance_isSet = false;
    m_has_price_inheritance_isValid = false;

    m_migration_status_isSet = false;
    m_migration_status_isValid = false;

    m_minimum_markups_isSet = false;
    m_minimum_markups_isValid = false;

    m_price_inheritance_isSet = false;
    m_price_inheritance_isValid = false;

    m_price_table_limit_isSet = false;
    m_price_table_limit_isValid = false;

    m_price_table_selection_strategy_isSet = false;
    m_price_table_selection_strategy_isValid = false;

    m_price_variation_isSet = false;
    m_price_variation_isValid = false;

    m_sellers_to_override_isSet = false;
    m_sellers_to_override_isValid = false;

    m_trade_policy_configs_isSet = false;
    m_trade_policy_configs_isValid = false;
}

void OAIPricingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPricingConfiguration::fromJsonObject(QJsonObject json) {

    m_block_account_isValid = ::OpenAPI::fromJsonValue(m_block_account, json[QString("blockAccount")]);
    m_block_account_isSet = !json[QString("blockAccount")].isNull() && m_block_account_isValid;

    m_blocked_routes_isValid = ::OpenAPI::fromJsonValue(m_blocked_routes, json[QString("blockedRoutes")]);
    m_blocked_routes_isSet = !json[QString("blockedRoutes")].isNull() && m_blocked_routes_isValid;

    m_default_markup_isValid = ::OpenAPI::fromJsonValue(m_default_markup, json[QString("defaultMarkup")]);
    m_default_markup_isSet = !json[QString("defaultMarkup")].isNull() && m_default_markup_isValid;

    m_has_migrated_isValid = ::OpenAPI::fromJsonValue(m_has_migrated, json[QString("hasMigrated")]);
    m_has_migrated_isSet = !json[QString("hasMigrated")].isNull() && m_has_migrated_isValid;

    m_has_optional_base_price_isValid = ::OpenAPI::fromJsonValue(m_has_optional_base_price, json[QString("hasOptionalBasePrice")]);
    m_has_optional_base_price_isSet = !json[QString("hasOptionalBasePrice")].isNull() && m_has_optional_base_price_isValid;

    m_has_price_inheritance_isValid = ::OpenAPI::fromJsonValue(m_has_price_inheritance, json[QString("hasPriceInheritance")]);
    m_has_price_inheritance_isSet = !json[QString("hasPriceInheritance")].isNull() && m_has_price_inheritance_isValid;

    m_migration_status_isValid = ::OpenAPI::fromJsonValue(m_migration_status, json[QString("migrationStatus")]);
    m_migration_status_isSet = !json[QString("migrationStatus")].isNull() && m_migration_status_isValid;

    m_minimum_markups_isValid = ::OpenAPI::fromJsonValue(m_minimum_markups, json[QString("minimumMarkups")]);
    m_minimum_markups_isSet = !json[QString("minimumMarkups")].isNull() && m_minimum_markups_isValid;

    m_price_inheritance_isValid = ::OpenAPI::fromJsonValue(m_price_inheritance, json[QString("priceInheritance")]);
    m_price_inheritance_isSet = !json[QString("priceInheritance")].isNull() && m_price_inheritance_isValid;

    m_price_table_limit_isValid = ::OpenAPI::fromJsonValue(m_price_table_limit, json[QString("priceTableLimit")]);
    m_price_table_limit_isSet = !json[QString("priceTableLimit")].isNull() && m_price_table_limit_isValid;

    m_price_table_selection_strategy_isValid = ::OpenAPI::fromJsonValue(m_price_table_selection_strategy, json[QString("priceTableSelectionStrategy")]);
    m_price_table_selection_strategy_isSet = !json[QString("priceTableSelectionStrategy")].isNull() && m_price_table_selection_strategy_isValid;

    m_price_variation_isValid = ::OpenAPI::fromJsonValue(m_price_variation, json[QString("priceVariation")]);
    m_price_variation_isSet = !json[QString("priceVariation")].isNull() && m_price_variation_isValid;

    m_sellers_to_override_isValid = ::OpenAPI::fromJsonValue(m_sellers_to_override, json[QString("sellersToOverride")]);
    m_sellers_to_override_isSet = !json[QString("sellersToOverride")].isNull() && m_sellers_to_override_isValid;

    m_trade_policy_configs_isValid = ::OpenAPI::fromJsonValue(m_trade_policy_configs, json[QString("tradePolicyConfigs")]);
    m_trade_policy_configs_isSet = !json[QString("tradePolicyConfigs")].isNull() && m_trade_policy_configs_isValid;
}

QString OAIPricingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPricingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_block_account_isSet) {
        obj.insert(QString("blockAccount"), ::OpenAPI::toJsonValue(m_block_account));
    }
    if (m_blocked_routes.size() > 0) {
        obj.insert(QString("blockedRoutes"), ::OpenAPI::toJsonValue(m_blocked_routes));
    }
    if (m_default_markup_isSet) {
        obj.insert(QString("defaultMarkup"), ::OpenAPI::toJsonValue(m_default_markup));
    }
    if (m_has_migrated_isSet) {
        obj.insert(QString("hasMigrated"), ::OpenAPI::toJsonValue(m_has_migrated));
    }
    if (m_has_optional_base_price_isSet) {
        obj.insert(QString("hasOptionalBasePrice"), ::OpenAPI::toJsonValue(m_has_optional_base_price));
    }
    if (m_has_price_inheritance_isSet) {
        obj.insert(QString("hasPriceInheritance"), ::OpenAPI::toJsonValue(m_has_price_inheritance));
    }
    if (m_migration_status_isSet) {
        obj.insert(QString("migrationStatus"), ::OpenAPI::toJsonValue(m_migration_status));
    }
    if (m_minimum_markups.size() > 0) {
        obj.insert(QString("minimumMarkups"), ::OpenAPI::toJsonValue(m_minimum_markups));
    }
    if (m_price_inheritance_isSet) {
        obj.insert(QString("priceInheritance"), ::OpenAPI::toJsonValue(m_price_inheritance));
    }
    if (m_price_table_limit_isSet) {
        obj.insert(QString("priceTableLimit"), ::OpenAPI::toJsonValue(m_price_table_limit));
    }
    if (m_price_table_selection_strategy_isSet) {
        obj.insert(QString("priceTableSelectionStrategy"), ::OpenAPI::toJsonValue(m_price_table_selection_strategy));
    }
    if (m_price_variation.isSet()) {
        obj.insert(QString("priceVariation"), ::OpenAPI::toJsonValue(m_price_variation));
    }
    if (m_sellers_to_override.size() > 0) {
        obj.insert(QString("sellersToOverride"), ::OpenAPI::toJsonValue(m_sellers_to_override));
    }
    if (m_trade_policy_configs.size() > 0) {
        obj.insert(QString("tradePolicyConfigs"), ::OpenAPI::toJsonValue(m_trade_policy_configs));
    }
    return obj;
}

bool OAIPricingConfiguration::isBlockAccount() const {
    return m_block_account;
}
void OAIPricingConfiguration::setBlockAccount(const bool &block_account) {
    m_block_account = block_account;
    m_block_account_isSet = true;
}

bool OAIPricingConfiguration::is_block_account_Set() const{
    return m_block_account_isSet;
}

bool OAIPricingConfiguration::is_block_account_Valid() const{
    return m_block_account_isValid;
}

QList<QString> OAIPricingConfiguration::getBlockedRoutes() const {
    return m_blocked_routes;
}
void OAIPricingConfiguration::setBlockedRoutes(const QList<QString> &blocked_routes) {
    m_blocked_routes = blocked_routes;
    m_blocked_routes_isSet = true;
}

bool OAIPricingConfiguration::is_blocked_routes_Set() const{
    return m_blocked_routes_isSet;
}

bool OAIPricingConfiguration::is_blocked_routes_Valid() const{
    return m_blocked_routes_isValid;
}

qint32 OAIPricingConfiguration::getDefaultMarkup() const {
    return m_default_markup;
}
void OAIPricingConfiguration::setDefaultMarkup(const qint32 &default_markup) {
    m_default_markup = default_markup;
    m_default_markup_isSet = true;
}

bool OAIPricingConfiguration::is_default_markup_Set() const{
    return m_default_markup_isSet;
}

bool OAIPricingConfiguration::is_default_markup_Valid() const{
    return m_default_markup_isValid;
}

bool OAIPricingConfiguration::isHasMigrated() const {
    return m_has_migrated;
}
void OAIPricingConfiguration::setHasMigrated(const bool &has_migrated) {
    m_has_migrated = has_migrated;
    m_has_migrated_isSet = true;
}

bool OAIPricingConfiguration::is_has_migrated_Set() const{
    return m_has_migrated_isSet;
}

bool OAIPricingConfiguration::is_has_migrated_Valid() const{
    return m_has_migrated_isValid;
}

bool OAIPricingConfiguration::isHasOptionalBasePrice() const {
    return m_has_optional_base_price;
}
void OAIPricingConfiguration::setHasOptionalBasePrice(const bool &has_optional_base_price) {
    m_has_optional_base_price = has_optional_base_price;
    m_has_optional_base_price_isSet = true;
}

bool OAIPricingConfiguration::is_has_optional_base_price_Set() const{
    return m_has_optional_base_price_isSet;
}

bool OAIPricingConfiguration::is_has_optional_base_price_Valid() const{
    return m_has_optional_base_price_isValid;
}

bool OAIPricingConfiguration::isHasPriceInheritance() const {
    return m_has_price_inheritance;
}
void OAIPricingConfiguration::setHasPriceInheritance(const bool &has_price_inheritance) {
    m_has_price_inheritance = has_price_inheritance;
    m_has_price_inheritance_isSet = true;
}

bool OAIPricingConfiguration::is_has_price_inheritance_Set() const{
    return m_has_price_inheritance_isSet;
}

bool OAIPricingConfiguration::is_has_price_inheritance_Valid() const{
    return m_has_price_inheritance_isValid;
}

QString OAIPricingConfiguration::getMigrationStatus() const {
    return m_migration_status;
}
void OAIPricingConfiguration::setMigrationStatus(const QString &migration_status) {
    m_migration_status = migration_status;
    m_migration_status_isSet = true;
}

bool OAIPricingConfiguration::is_migration_status_Set() const{
    return m_migration_status_isSet;
}

bool OAIPricingConfiguration::is_migration_status_Valid() const{
    return m_migration_status_isValid;
}

QMap<QString, qint32> OAIPricingConfiguration::getMinimumMarkups() const {
    return m_minimum_markups;
}
void OAIPricingConfiguration::setMinimumMarkups(const QMap<QString, qint32> &minimum_markups) {
    m_minimum_markups = minimum_markups;
    m_minimum_markups_isSet = true;
}

bool OAIPricingConfiguration::is_minimum_markups_Set() const{
    return m_minimum_markups_isSet;
}

bool OAIPricingConfiguration::is_minimum_markups_Valid() const{
    return m_minimum_markups_isValid;
}

QString OAIPricingConfiguration::getPriceInheritance() const {
    return m_price_inheritance;
}
void OAIPricingConfiguration::setPriceInheritance(const QString &price_inheritance) {
    m_price_inheritance = price_inheritance;
    m_price_inheritance_isSet = true;
}

bool OAIPricingConfiguration::is_price_inheritance_Set() const{
    return m_price_inheritance_isSet;
}

bool OAIPricingConfiguration::is_price_inheritance_Valid() const{
    return m_price_inheritance_isValid;
}

qint32 OAIPricingConfiguration::getPriceTableLimit() const {
    return m_price_table_limit;
}
void OAIPricingConfiguration::setPriceTableLimit(const qint32 &price_table_limit) {
    m_price_table_limit = price_table_limit;
    m_price_table_limit_isSet = true;
}

bool OAIPricingConfiguration::is_price_table_limit_Set() const{
    return m_price_table_limit_isSet;
}

bool OAIPricingConfiguration::is_price_table_limit_Valid() const{
    return m_price_table_limit_isValid;
}

QString OAIPricingConfiguration::getPriceTableSelectionStrategy() const {
    return m_price_table_selection_strategy;
}
void OAIPricingConfiguration::setPriceTableSelectionStrategy(const QString &price_table_selection_strategy) {
    m_price_table_selection_strategy = price_table_selection_strategy;
    m_price_table_selection_strategy_isSet = true;
}

bool OAIPricingConfiguration::is_price_table_selection_strategy_Set() const{
    return m_price_table_selection_strategy_isSet;
}

bool OAIPricingConfiguration::is_price_table_selection_strategy_Valid() const{
    return m_price_table_selection_strategy_isValid;
}

OAIPricingConfiguration_priceVariation OAIPricingConfiguration::getPriceVariation() const {
    return m_price_variation;
}
void OAIPricingConfiguration::setPriceVariation(const OAIPricingConfiguration_priceVariation &price_variation) {
    m_price_variation = price_variation;
    m_price_variation_isSet = true;
}

bool OAIPricingConfiguration::is_price_variation_Set() const{
    return m_price_variation_isSet;
}

bool OAIPricingConfiguration::is_price_variation_Valid() const{
    return m_price_variation_isValid;
}

QList<QJsonValue> OAIPricingConfiguration::getSellersToOverride() const {
    return m_sellers_to_override;
}
void OAIPricingConfiguration::setSellersToOverride(const QList<QJsonValue> &sellers_to_override) {
    m_sellers_to_override = sellers_to_override;
    m_sellers_to_override_isSet = true;
}

bool OAIPricingConfiguration::is_sellers_to_override_Set() const{
    return m_sellers_to_override_isSet;
}

bool OAIPricingConfiguration::is_sellers_to_override_Valid() const{
    return m_sellers_to_override_isValid;
}

QList<OAIPricingConfiguration_tradePolicyConfigs_inner> OAIPricingConfiguration::getTradePolicyConfigs() const {
    return m_trade_policy_configs;
}
void OAIPricingConfiguration::setTradePolicyConfigs(const QList<OAIPricingConfiguration_tradePolicyConfigs_inner> &trade_policy_configs) {
    m_trade_policy_configs = trade_policy_configs;
    m_trade_policy_configs_isSet = true;
}

bool OAIPricingConfiguration::is_trade_policy_configs_Set() const{
    return m_trade_policy_configs_isSet;
}

bool OAIPricingConfiguration::is_trade_policy_configs_Valid() const{
    return m_trade_policy_configs_isValid;
}

bool OAIPricingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_block_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_routes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_markup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_migrated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_optional_base_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_price_inheritance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_markups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_inheritance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_table_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_table_selection_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_variation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sellers_to_override.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trade_policy_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPricingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_default_markup_isValid && m_has_migrated_isValid && m_minimum_markups_isValid && true;
}

} // namespace OpenAPI
