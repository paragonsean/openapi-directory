/**
 * Pricing API
 *   > Check the new [Pricing onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/pricing-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Pricing and is organized by focusing on the developer's journey.    Pricing is the VTEX module responsible for the SKU's price list. At this module we have the base price of each SKU, some optional fixed prices by trade policy, and some rules that can be applied to generate dynamically different final prices according to the purchase context and the trade policy. The variables used in this collection are:      * **{{accountName}}** = You VTEX account name.    * **{{tradePolicyId}}** = Current Trade Policy ID.    * **{{itemId}}** = SKU ID.    * **{{X-VTEX-API-AppKey}}** and **{{X-VTEX-API-AppToken}}** = Credentials.    You can get more information about how to use this module and its business logic at [VTEX Help](http://help.vtex.com).    ## Rate Limits    ### Limits per route    - `GET`:  routes are not rate limited at the moment  - `PUT or POST`: `40 requests/second/account` in any **price insert/update route** with 1000 *Burst Credits*  - `DELETE`: `16 requests/second/account` in any **price deletion route**, with 300 *Burst Credits*.    ### What are Burst Credits?    In case the account exceeds the limit frequency for a  `Rate Limiter` (for instance, when one account makes `41 requests/second` in any `price insert/update route`), we decrease from the *Burst Credit* count the exceeding (in this example, *1 Credit*).    In the event of the *Burst Credits* reaching **0 (zero)**, the request is blocked with a `Status 429` response.    The credits fill up over time when the route is not being used, in the same rate as the route's `Rate Limiter`. In our example, for each second not sending a **PUT or POST request**, we increase *40 Burst Credits* to this `Rate Limiter`    ### New Response Headers    In the response headers of any request to Pricing v2 there are some new headers indicating the current status of the Rate Limiting.  This information may be useful to evaluate the ideal frequency to send requests to a route, and when to send a new request in the event of reaching a Rate Limit.    - `Ratelimit-Limit` - Total *Burst Credits* offered to a route  - `Ratelimit-Remaining` - How many *Burst Credits* are still available to use  - `Ratelimit-Reset` - How long (in seconds) it will take to the *Burst Credits* to fill up completely (It will fill up to the `Ratelimit-Limit`)  - `Retry-After` - Indicates how many seconds you will need to wait until the `Rate Limiter` accepts a new request to this route again. If this header response exists, this means your current request has been rate limited and has not been processed.    ### How to integrate with Pricing v2 considering our Rate Limits    Integrate considering the limits of **requests/route/account** specified in the [*Limits per route*](#rate-limits) section, avoiding to surpass this frequency.    If you happen to be Rate Limited, wait the time in seconds specified in `Retry-After` before making another request to the service, and reduce the rate of requests per second that your integration is making.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPricingConfiguration.h
 *
 * 
 */

#ifndef OAIPricingConfiguration_H
#define OAIPricingConfiguration_H

#include <QJsonObject>

#include "OAIPricingConfiguration_priceVariation.h"
#include "OAIPricingConfiguration_tradePolicyConfigs_inner.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPricingConfiguration_priceVariation;
class OAIPricingConfiguration_tradePolicyConfigs_inner;

class OAIPricingConfiguration : public OAIObject {
public:
    OAIPricingConfiguration();
    OAIPricingConfiguration(QString json);
    ~OAIPricingConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isBlockAccount() const;
    void setBlockAccount(const bool &block_account);
    bool is_block_account_Set() const;
    bool is_block_account_Valid() const;

    QList<QString> getBlockedRoutes() const;
    void setBlockedRoutes(const QList<QString> &blocked_routes);
    bool is_blocked_routes_Set() const;
    bool is_blocked_routes_Valid() const;

    qint32 getDefaultMarkup() const;
    void setDefaultMarkup(const qint32 &default_markup);
    bool is_default_markup_Set() const;
    bool is_default_markup_Valid() const;

    bool isHasMigrated() const;
    void setHasMigrated(const bool &has_migrated);
    bool is_has_migrated_Set() const;
    bool is_has_migrated_Valid() const;

    bool isHasOptionalBasePrice() const;
    void setHasOptionalBasePrice(const bool &has_optional_base_price);
    bool is_has_optional_base_price_Set() const;
    bool is_has_optional_base_price_Valid() const;

    Q_DECL_DEPRECATED bool isHasPriceInheritance() const;
    Q_DECL_DEPRECATED void setHasPriceInheritance(const bool &has_price_inheritance);
    Q_DECL_DEPRECATED bool is_has_price_inheritance_Set() const;
    Q_DECL_DEPRECATED bool is_has_price_inheritance_Valid() const;

    QString getMigrationStatus() const;
    void setMigrationStatus(const QString &migration_status);
    bool is_migration_status_Set() const;
    bool is_migration_status_Valid() const;

    QMap<QString, qint32> getMinimumMarkups() const;
    void setMinimumMarkups(const QMap<QString, qint32> &minimum_markups);
    bool is_minimum_markups_Set() const;
    bool is_minimum_markups_Valid() const;

    QString getPriceInheritance() const;
    void setPriceInheritance(const QString &price_inheritance);
    bool is_price_inheritance_Set() const;
    bool is_price_inheritance_Valid() const;

    qint32 getPriceTableLimit() const;
    void setPriceTableLimit(const qint32 &price_table_limit);
    bool is_price_table_limit_Set() const;
    bool is_price_table_limit_Valid() const;

    QString getPriceTableSelectionStrategy() const;
    void setPriceTableSelectionStrategy(const QString &price_table_selection_strategy);
    bool is_price_table_selection_strategy_Set() const;
    bool is_price_table_selection_strategy_Valid() const;

    OAIPricingConfiguration_priceVariation getPriceVariation() const;
    void setPriceVariation(const OAIPricingConfiguration_priceVariation &price_variation);
    bool is_price_variation_Set() const;
    bool is_price_variation_Valid() const;

    QList<QJsonValue> getSellersToOverride() const;
    void setSellersToOverride(const QList<QJsonValue> &sellers_to_override);
    bool is_sellers_to_override_Set() const;
    bool is_sellers_to_override_Valid() const;

    QList<OAIPricingConfiguration_tradePolicyConfigs_inner> getTradePolicyConfigs() const;
    void setTradePolicyConfigs(const QList<OAIPricingConfiguration_tradePolicyConfigs_inner> &trade_policy_configs);
    bool is_trade_policy_configs_Set() const;
    bool is_trade_policy_configs_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_block_account;
    bool m_block_account_isSet;
    bool m_block_account_isValid;

    QList<QString> m_blocked_routes;
    bool m_blocked_routes_isSet;
    bool m_blocked_routes_isValid;

    qint32 m_default_markup;
    bool m_default_markup_isSet;
    bool m_default_markup_isValid;

    bool m_has_migrated;
    bool m_has_migrated_isSet;
    bool m_has_migrated_isValid;

    bool m_has_optional_base_price;
    bool m_has_optional_base_price_isSet;
    bool m_has_optional_base_price_isValid;

    bool m_has_price_inheritance;
    bool m_has_price_inheritance_isSet;
    bool m_has_price_inheritance_isValid;

    QString m_migration_status;
    bool m_migration_status_isSet;
    bool m_migration_status_isValid;

    QMap<QString, qint32> m_minimum_markups;
    bool m_minimum_markups_isSet;
    bool m_minimum_markups_isValid;

    QString m_price_inheritance;
    bool m_price_inheritance_isSet;
    bool m_price_inheritance_isValid;

    qint32 m_price_table_limit;
    bool m_price_table_limit_isSet;
    bool m_price_table_limit_isValid;

    QString m_price_table_selection_strategy;
    bool m_price_table_selection_strategy_isSet;
    bool m_price_table_selection_strategy_isValid;

    OAIPricingConfiguration_priceVariation m_price_variation;
    bool m_price_variation_isSet;
    bool m_price_variation_isValid;

    QList<QJsonValue> m_sellers_to_override;
    bool m_sellers_to_override_isSet;
    bool m_sellers_to_override_isValid;

    QList<OAIPricingConfiguration_tradePolicyConfigs_inner> m_trade_policy_configs;
    bool m_trade_policy_configs_isSet;
    bool m_trade_policy_configs_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPricingConfiguration)

#endif // OAIPricingConfiguration_H
