/**
 * Pricing API
 *   > Check the new [Pricing onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/pricing-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Pricing and is organized by focusing on the developer's journey.    Pricing is the VTEX module responsible for the SKU's price list. At this module we have the base price of each SKU, some optional fixed prices by trade policy, and some rules that can be applied to generate dynamically different final prices according to the purchase context and the trade policy. The variables used in this collection are:      * **{{accountName}}** = You VTEX account name.    * **{{tradePolicyId}}** = Current Trade Policy ID.    * **{{itemId}}** = SKU ID.    * **{{X-VTEX-API-AppKey}}** and **{{X-VTEX-API-AppToken}}** = Credentials.    You can get more information about how to use this module and its business logic at [VTEX Help](http://help.vtex.com).    ## Rate Limits    ### Limits per route    - `GET`:  routes are not rate limited at the moment  - `PUT or POST`: `40 requests/second/account` in any **price insert/update route** with 1000 *Burst Credits*  - `DELETE`: `16 requests/second/account` in any **price deletion route**, with 300 *Burst Credits*.    ### What are Burst Credits?    In case the account exceeds the limit frequency for a  `Rate Limiter` (for instance, when one account makes `41 requests/second` in any `price insert/update route`), we decrease from the *Burst Credit* count the exceeding (in this example, *1 Credit*).    In the event of the *Burst Credits* reaching **0 (zero)**, the request is blocked with a `Status 429` response.    The credits fill up over time when the route is not being used, in the same rate as the route's `Rate Limiter`. In our example, for each second not sending a **PUT or POST request**, we increase *40 Burst Credits* to this `Rate Limiter`    ### New Response Headers    In the response headers of any request to Pricing v2 there are some new headers indicating the current status of the Rate Limiting.  This information may be useful to evaluate the ideal frequency to send requests to a route, and when to send a new request in the event of reaching a Rate Limit.    - `Ratelimit-Limit` - Total *Burst Credits* offered to a route  - `Ratelimit-Remaining` - How many *Burst Credits* are still available to use  - `Ratelimit-Reset` - How long (in seconds) it will take to the *Burst Credits* to fill up completely (It will fill up to the `Ratelimit-Limit`)  - `Retry-After` - Indicates how many seconds you will need to wait until the `Rate Limiter` accepts a new request to this route again. If this header response exists, this means your current request has been rate limited and has not been processed.    ### How to integrate with Pricing v2 considering our Rate Limits    Integrate considering the limits of **requests/route/account** specified in the [*Limits per route*](#rate-limits) section, avoiding to surpass this frequency.    If you happen to be Rate Limited, wait the time in seconds specified in `Retry-After` before making another request to the service, and reduce the rate of requests per second that your integration is making.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateUpdatePriceOrFixedPriceRequest from '../model/CreateUpdatePriceOrFixedPriceRequest';
import CreateorupdatefixedpricesonpricetableortradepolicyRequestInner from '../model/CreateorupdatefixedpricesonpricetableortradepolicyRequestInner';
import FixedPrice from '../model/FixedPrice';
import Getcomputedprice from '../model/Getcomputedprice';
import Getprice from '../model/Getprice';

/**
* PricesAndFixedPrices service.
* @module api/PricesAndFixedPricesApi
* @version 1.0
*/
export default class PricesAndFixedPricesApi {

    /**
    * Constructs a new PricesAndFixedPricesApi. 
    * @alias module:api/PricesAndFixedPricesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createUpdatePriceOrFixedPrice operation.
     * @callback module:api/PricesAndFixedPricesApi~createUpdatePriceOrFixedPriceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or Update Base Price or Fixed Prices
     * Creates or updates an SKU Base Price or Fixed Prices. The **base price** is the basic selling price of a product, it comprises the cost price and the markup wanted in the sale of the product. The **fixed price** is an optional price of the SKU for a specific trade policy with a specific minimum quantity to be activated.     <p> You may optionally set a list price. Additionally, you may set either a cost price or a markup value. By defining either one of them, the other will be calculated to conform to the formula <code>costPrice * (1 + markup) = basePrice</code>.</p> <h2>Request body example</h2>    ```json  {      \"markup\": 30,      \"basePrice\": 100,      \"listPrice\": 35,      \"fixedPrices\": [          {              \"tradePolicyId\": \"1\",              \"value\": 31,              \"listPrice\": 32,              \"minQuantity\": 1,              \"dateRange\": {                  \"from\": \"2022-05-21T22:00:00Z\",                  \"to\": \"2023-05-28T22:00:00Z\"              }          },          {              \"tradePolicyId\": \"1\",              \"value\": 31.5,              \"listPrice\": 33,              \"minQuantity\": 2          }      ]  }  ```
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {Number} itemId SKU unique identifier number.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateUpdatePriceOrFixedPriceRequest} [createUpdatePriceOrFixedPriceRequest] 
     * @param {module:api/PricesAndFixedPricesApi~createUpdatePriceOrFixedPriceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createUpdatePriceOrFixedPrice(accept, contentType, itemId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createUpdatePriceOrFixedPriceRequest'];
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createUpdatePriceOrFixedPrice");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createUpdatePriceOrFixedPrice");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling createUpdatePriceOrFixedPrice");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/pricing/prices/{itemId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createorupdatefixedpricesonpricetableortradepolicy operation.
     * @callback module:api/PricesAndFixedPricesApi~createorupdatefixedpricesonpricetableortradepolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or Update Fixed Prices on a price table or trade policy
     * Creates or updates the fixed prices of an SKU for a specific price table or trade policy. You can add one or multiple fixed prices per SKU.     ## Request body example    ```json  [    {      \"value\": 50.5,      \"listPrice\": 50.5,      \"minQuantity\": 2,      \"dateRange\": {        \"from\": \"2021-12-30T22:00:00-03:00\",        \"to\": \"2021-12-30T22:00:00-04:00\"      }    }  ]  ```
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {Number} itemId SKU ID.
     * @param {String} priceTableId SKU **price table** name or **trade policy** ID.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/CreateorupdatefixedpricesonpricetableortradepolicyRequestInner>} [createorupdatefixedpricesonpricetableortradepolicyRequestInner] 
     * @param {module:api/PricesAndFixedPricesApi~createorupdatefixedpricesonpricetableortradepolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createorupdatefixedpricesonpricetableortradepolicy(contentType, accept, itemId, priceTableId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createorupdatefixedpricesonpricetableortradepolicyRequestInner'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createorupdatefixedpricesonpricetableortradepolicy");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createorupdatefixedpricesonpricetableortradepolicy");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling createorupdatefixedpricesonpricetableortradepolicy");
      }
      // verify the required parameter 'priceTableId' is set
      if (priceTableId === undefined || priceTableId === null) {
        throw new Error("Missing the required parameter 'priceTableId' when calling createorupdatefixedpricesonpricetableortradepolicy");
      }

      let pathParams = {
        'itemId': itemId,
        'priceTableId': priceTableId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/pricing/prices/{itemId}/fixed/{priceTableId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePrice operation.
     * @callback module:api/PricesAndFixedPricesApi~deletePriceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Price
     * Deletes the Base Price and all available Fixed Prices for an SKU in all trade policies.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {Number} itemId SKU ID.
     * @param {module:api/PricesAndFixedPricesApi~deletePriceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePrice(contentType, accept, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deletePrice");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deletePrice");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling deletePrice");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/pricing/prices/{itemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletefixedpricesonapricetableortradepolicy operation.
     * @callback module:api/PricesAndFixedPricesApi~deletefixedpricesonapricetableortradepolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Fixed Prices on a price table or trade policy
     * Deletes all Fixed Prices of an SKU in a specific Price Table or Trade Policy.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {Number} itemId SKU ID.
     * @param {String} priceTableId Price Table or Trade Policy Name.
     * @param {module:api/PricesAndFixedPricesApi~deletefixedpricesonapricetableortradepolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletefixedpricesonapricetableortradepolicy(contentType, accept, itemId, priceTableId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deletefixedpricesonapricetableortradepolicy");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deletefixedpricesonapricetableortradepolicy");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling deletefixedpricesonapricetableortradepolicy");
      }
      // verify the required parameter 'priceTableId' is set
      if (priceTableId === undefined || priceTableId === null) {
        throw new Error("Missing the required parameter 'priceTableId' when calling deletefixedpricesonapricetableortradepolicy");
      }

      let pathParams = {
        'itemId': itemId,
        'priceTableId': priceTableId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/pricing/prices/{itemId}/fixed/{priceTableId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComputedPricebypricetable operation.
     * @callback module:api/PricesAndFixedPricesApi~getComputedPricebypricetableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Getcomputedprice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Computed Price by price table or trade policy
     * Gets the Computed Price, which is the price after all the steps in the Pricing pipeline, for an SKU in a specific price table or trade policy.     ## Response body example    ```json  {      \"tradePolicyId\": \"1\",      \"listPrice\": 30,      \"costPrice\": 76.92,      \"sellingPrice\": 18.9,      \"priceValidUntil\": \"2018-12-20T18:12:14Z\"  }  ```
     * @param {Number} categoryIds Category ID.
     * @param {Number} brandId Brand ID.
     * @param {Number} quantity SKU quantity.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {Number} itemId SKU ID.
     * @param {String} priceTableId SKU Price Table Name.
     * @param {module:api/PricesAndFixedPricesApi~getComputedPricebypricetableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Getcomputedprice}
     */
    getComputedPricebypricetable(categoryIds, brandId, quantity, contentType, accept, itemId, priceTableId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'categoryIds' is set
      if (categoryIds === undefined || categoryIds === null) {
        throw new Error("Missing the required parameter 'categoryIds' when calling getComputedPricebypricetable");
      }
      // verify the required parameter 'brandId' is set
      if (brandId === undefined || brandId === null) {
        throw new Error("Missing the required parameter 'brandId' when calling getComputedPricebypricetable");
      }
      // verify the required parameter 'quantity' is set
      if (quantity === undefined || quantity === null) {
        throw new Error("Missing the required parameter 'quantity' when calling getComputedPricebypricetable");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getComputedPricebypricetable");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getComputedPricebypricetable");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getComputedPricebypricetable");
      }
      // verify the required parameter 'priceTableId' is set
      if (priceTableId === undefined || priceTableId === null) {
        throw new Error("Missing the required parameter 'priceTableId' when calling getComputedPricebypricetable");
      }

      let pathParams = {
        'itemId': itemId,
        'priceTableId': priceTableId
      };
      let queryParams = {
        'categoryIds': categoryIds,
        'brandId': brandId,
        'quantity': quantity
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = Getcomputedprice;
      let basePaths = ['https://api.vtex.com/{account}/pricing'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/pricing/prices/{itemId}/computed/{priceTableId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the getFixedPrices operation.
     * @callback module:api/PricesAndFixedPricesApi~getFixedPricesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FixedPrice>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Fixed Prices
     * The **fixed price** is an optional price of the SKU for a specific trade policy with a specific minimum quantity to be activated. This method retrieves an array of Fixed Prices for an SKU in a Trade Policy with Minimum Quantities.     The default value for a Minimum Quantity is `1`. This means a Fixed Price will be valid for a SKU in a Trade Policy for orders containing the specified number of Minimum Quantity or above, unless a higher Minimum Quantity is specified.     Fixed prices may, optionally, be scheduled. If so, these objects will contain the `dateRange` object with `from` and `to` properties, indicating the start and end time of the scheduled fixed price in the RFC3339 timestamp format (`YYYY-MM-DDT23:59:60Z`).     Note that the 'Z', at the end, represents the UTC time (GMT+00:00). If it was in GMT-03:00, for example, it would be (`YYYY-MM-DDT23:59:60-03:00`).     ## Response body example    ```json  [      {          \"tradePolicyId\": \"6\",          \"value\": 20.9,          \"listPrice\": 22.9,          \"minQuantity\": 1,          \"dateRange\": {              \"from\": \"2021-12-30T22:00:00-03:00\",              \"to\": \"2021-12-30T22:00:00-03:00\"          }      },      {          \"tradePolicyId\": \"1\",          \"value\": 18.9,          \"listPrice\": null,          \"minQuantity\": 1,          \"dateRange\": {              \"from\": \"2021-12-30T22:00:00-03:00\",              \"to\": \"2021-12-30T22:00:00-03:00\"          }      }  ]  ```
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {Number} itemId SKU ID.
     * @param {module:api/PricesAndFixedPricesApi~getFixedPricesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FixedPrice>}
     */
    getFixedPrices(accept, contentType, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getFixedPrices");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getFixedPrices");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getFixedPrices");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [FixedPrice];
      return this.apiClient.callApi(
        '/pricing/prices/{itemId}/fixed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFixedPricesonapricetable operation.
     * @callback module:api/PricesAndFixedPricesApi~getFixedPricesonapricetableCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FixedPrice>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Fixed Prices on a price table or trade policy
     * Retrieves all Fixed Prices on a price table or trade policy.     ## Response body example    ```json  [      {          \"tradePolicyId\": \"6\",          \"value\": 20.9,          \"listPrice\": 22.9,          \"minQuantity\": 1,          \"dateRange\": {              \"from\": \"2021-12-30T22:00:00-03:00\",              \"to\": \"2021-12-30T22:00:00-04:00\"          }      },      {          \"tradePolicyId\": \"1\",          \"value\": 18.9,          \"listPrice\": null,          \"minQuantity\": 1      }  ]  ```
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept 
     * @param {Number} itemId SKU ID.
     * @param {String} priceTableId Price Table Name
     * @param {module:api/PricesAndFixedPricesApi~getFixedPricesonapricetableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FixedPrice>}
     */
    getFixedPricesonapricetable(contentType, accept, itemId, priceTableId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getFixedPricesonapricetable");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getFixedPricesonapricetable");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getFixedPricesonapricetable");
      }
      // verify the required parameter 'priceTableId' is set
      if (priceTableId === undefined || priceTableId === null) {
        throw new Error("Missing the required parameter 'priceTableId' when calling getFixedPricesonapricetable");
      }

      let pathParams = {
        'itemId': itemId,
        'priceTableId': priceTableId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [FixedPrice];
      return this.apiClient.callApi(
        '/pricing/prices/{itemId}/fixed/{priceTableId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPrice operation.
     * @callback module:api/PricesAndFixedPricesApi~getPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Getprice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Price
     * Retrieves price data given a specific SKU ID. Within the `fixedPrices` object, there might be a list of prices for specific Trade Policies and Minimium Quantities of the SKU. Fixed Prices may also be scheduled.     ## Response body example    ```json  {      \"itemId\": \"1\",      \"listPrice\": 50,      \"costPrice\": 90,      \"markup\": 30,      \"basePrice\": 117,      \"fixedPrices\": [          {              \"tradePolicyId\": \"1\",              \"value\": 50.5,              \"listPrice\": 50.5,              \"minQuantity\": 2,              \"dateRange\": {                  \"from\": \"2021-12-31T01:00:00Z\",                  \"to\": \"2022-12-31T01:00:00Z\"              }          },          {              \"tradePolicyId\": \"2\",              \"value\": 30,              \"listPrice\": 50,              \"minQuantity\": 2          }      ]  }  ```
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {Number} itemId SKU ID.
     * @param {module:api/PricesAndFixedPricesApi~getPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Getprice}
     */
    getPrice(contentType, accept, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getPrice");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getPrice");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getPrice");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Getprice;
      return this.apiClient.callApi(
        '/pricing/prices/{itemId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
