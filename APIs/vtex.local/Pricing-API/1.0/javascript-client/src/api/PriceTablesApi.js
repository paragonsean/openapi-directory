/**
 * Pricing API
 *   > Check the new [Pricing onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/pricing-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Pricing and is organized by focusing on the developer's journey.    Pricing is the VTEX module responsible for the SKU's price list. At this module we have the base price of each SKU, some optional fixed prices by trade policy, and some rules that can be applied to generate dynamically different final prices according to the purchase context and the trade policy. The variables used in this collection are:      * **{{accountName}}** = You VTEX account name.    * **{{tradePolicyId}}** = Current Trade Policy ID.    * **{{itemId}}** = SKU ID.    * **{{X-VTEX-API-AppKey}}** and **{{X-VTEX-API-AppToken}}** = Credentials.    You can get more information about how to use this module and its business logic at [VTEX Help](http://help.vtex.com).    ## Rate Limits    ### Limits per route    - `GET`:  routes are not rate limited at the moment  - `PUT or POST`: `40 requests/second/account` in any **price insert/update route** with 1000 *Burst Credits*  - `DELETE`: `16 requests/second/account` in any **price deletion route**, with 300 *Burst Credits*.    ### What are Burst Credits?    In case the account exceeds the limit frequency for a  `Rate Limiter` (for instance, when one account makes `41 requests/second` in any `price insert/update route`), we decrease from the *Burst Credit* count the exceeding (in this example, *1 Credit*).    In the event of the *Burst Credits* reaching **0 (zero)**, the request is blocked with a `Status 429` response.    The credits fill up over time when the route is not being used, in the same rate as the route's `Rate Limiter`. In our example, for each second not sending a **PUT or POST request**, we increase *40 Burst Credits* to this `Rate Limiter`    ### New Response Headers    In the response headers of any request to Pricing v2 there are some new headers indicating the current status of the Rate Limiting.  This information may be useful to evaluate the ideal frequency to send requests to a route, and when to send a new request in the event of reaching a Rate Limit.    - `Ratelimit-Limit` - Total *Burst Credits* offered to a route  - `Ratelimit-Remaining` - How many *Burst Credits* are still available to use  - `Ratelimit-Reset` - How long (in seconds) it will take to the *Burst Credits* to fill up completely (It will fill up to the `Ratelimit-Limit`)  - `Retry-After` - Indicates how many seconds you will need to wait until the `Rate Limiter` accepts a new request to this route again. If this header response exists, this means your current request has been rate limited and has not been processed.    ### How to integrate with Pricing v2 considering our Rate Limits    Integrate considering the limits of **requests/route/account** specified in the [*Limits per route*](#rate-limits) section, avoiding to surpass this frequency.    If you happen to be Rate Limited, wait the time in seconds specified in `Retry-After` before making another request to the service, and reduce the rate of requests per second that your integration is making.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Getallpricetablesandrules200ResponseInner from '../model/Getallpricetablesandrules200ResponseInner';
import Getrulesforapricetable200Response from '../model/Getrulesforapricetable200Response';
import PricingPipelineCatalogPriceTableIdPutRequest from '../model/PricingPipelineCatalogPriceTableIdPutRequest';

/**
* PriceTables service.
* @module api/PriceTablesApi
* @version 1.0
*/
export default class PriceTablesApi {

    /**
    * Constructs a new PriceTablesApi. 
    * @alias module:api/PriceTablesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getallpricetablesandrules operation.
     * @callback module:api/PriceTablesApi~getallpricetablesandrulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Getallpricetablesandrules200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all price tables and their rules
     * This method will retrieve all price tables and their rules.    ## Response body example    ```json  [      {          \"tradePolicyId\": \"2\",          \"rules\": [              {                  \"id\": 0,                  \"context\": {                      \"categories\": {},                      \"brands\": {},                      \"stockStatuses\": null,                      \"internalCategories\": null,                      \"markupRange\": null,                      \"dateRange\": null                  },                  \"percentualModifier\": 20              }          ]      },      {          \"tradePolicyId\": \"b2c\",          \"rules\": [              {                  \"id\": 0,                  \"context\": {                      \"categories\": {},                      \"brands\": {                          \"2000009\": \"Whiskas\"                      },                      \"stockStatuses\": null,                      \"internalCategories\": null,                      \"markupRange\": null,                      \"dateRange\": null                  },                  \"percentualModifier\": 15              }          ]      }  ]  ```
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {module:api/PriceTablesApi~getallpricetablesandrulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Getallpricetablesandrules200ResponseInner>}
     */
    getallpricetablesandrules(contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getallpricetablesandrules");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getallpricetablesandrules");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Getallpricetablesandrules200ResponseInner];
      let basePaths = ['https://api.vtex.com/{account}/pricing'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/pricing/pipeline/catalog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the getrulesforapricetable operation.
     * @callback module:api/PriceTablesApi~getrulesforapricetableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Getrulesforapricetable200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get rules for a price table
     * This method will retrieve the rules from a specific Price Table.    ## Response body example    ```json  {      \"tradePolicyId\": \"b2c\",      \"rules\": [{          \"id\": 0,          \"context\": {              \"categories\": {},              \"brands\": {                  \"2000009\": \"Whiskas\"              },              \"stockStatuses\": null,              \"internalCategories\": null,              \"markupRange\": null,              \"dateRange\": null          },          \"percentualModifier\": 15      }]  }  ```
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} priceTableId Price Table Name.
     * @param {module:api/PriceTablesApi~getrulesforapricetableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Getrulesforapricetable200Response}
     */
    getrulesforapricetable(contentType, accept, priceTableId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getrulesforapricetable");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getrulesforapricetable");
      }
      // verify the required parameter 'priceTableId' is set
      if (priceTableId === undefined || priceTableId === null) {
        throw new Error("Missing the required parameter 'priceTableId' when calling getrulesforapricetable");
      }

      let pathParams = {
        'priceTableId': priceTableId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Getrulesforapricetable200Response;
      let basePaths = ['https://api.vtex.com/{account}/pricing'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/pricing/pipeline/catalog/{priceTableId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listpricetables operation.
     * @callback module:api/PriceTablesApi~listpricetablesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List price tables
     * This method will list all price tables.    ## Response body example    ```json  [      \"1\",      \"2\",      \"3\",      \"b2c\",      \"b2b\",      \"gold\"  ]  ```
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {module:api/PriceTablesApi~listpricetablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    listpricetables(contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling listpricetables");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling listpricetables");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      let basePaths = ['https://api.vtex.com/{account}/pricing'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/pricing/tables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the pricingPipelineCatalogPriceTableIdPut operation.
     * @callback module:api/PriceTablesApi~pricingPipelineCatalogPriceTableIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update rules for a price table
     * This method will update the rules from a specific Price Table. It will delete all the rules from the requested Price Table and create new rules based on the content of the request.    ## Request body example    ```json  {      \"rules\": [            {                 \"id\": 1,                 \"context\": {                      \"categories\": {                           \"Category ID\": \"1\",                           \"Category Name\": \"Alimentação\"                      },                      \"brands\": {                           \"Brand ID\": \"2000002\",                           \"Brand Name\": \"Whiskas\"                      },                      \"markupRange\": {                           \"from\": 0,                           \"to\": 200                      },                      \"dateRange\": {                           \"from\": \"2022-01-23T19:00:00.000Z\",                           \"to\": \"2023-10-26T00:00:00.000Z\"                      }                 },                 \"percentualModifier\": 0            }      ]  }  ```
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} priceTableId Price Table Name.
     * @param {Object} opts Optional parameters
     * @param {module:model/PricingPipelineCatalogPriceTableIdPutRequest} [pricingPipelineCatalogPriceTableIdPutRequest] 
     * @param {module:api/PriceTablesApi~pricingPipelineCatalogPriceTableIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pricingPipelineCatalogPriceTableIdPut(contentType, accept, priceTableId, opts, callback) {
      opts = opts || {};
      let postBody = opts['pricingPipelineCatalogPriceTableIdPutRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pricingPipelineCatalogPriceTableIdPut");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling pricingPipelineCatalogPriceTableIdPut");
      }
      // verify the required parameter 'priceTableId' is set
      if (priceTableId === undefined || priceTableId === null) {
        throw new Error("Missing the required parameter 'priceTableId' when calling pricingPipelineCatalogPriceTableIdPut");
      }

      let pathParams = {
        'priceTableId': priceTableId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/pricing/pipeline/catalog/{priceTableId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
