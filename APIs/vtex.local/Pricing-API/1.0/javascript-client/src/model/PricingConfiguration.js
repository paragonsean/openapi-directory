/**
 * Pricing API
 *   > Check the new [Pricing onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/pricing-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Pricing and is organized by focusing on the developer's journey.    Pricing is the VTEX module responsible for the SKU's price list. At this module we have the base price of each SKU, some optional fixed prices by trade policy, and some rules that can be applied to generate dynamically different final prices according to the purchase context and the trade policy. The variables used in this collection are:      * **{{accountName}}** = You VTEX account name.    * **{{tradePolicyId}}** = Current Trade Policy ID.    * **{{itemId}}** = SKU ID.    * **{{X-VTEX-API-AppKey}}** and **{{X-VTEX-API-AppToken}}** = Credentials.    You can get more information about how to use this module and its business logic at [VTEX Help](http://help.vtex.com).    ## Rate Limits    ### Limits per route    - `GET`:  routes are not rate limited at the moment  - `PUT or POST`: `40 requests/second/account` in any **price insert/update route** with 1000 *Burst Credits*  - `DELETE`: `16 requests/second/account` in any **price deletion route**, with 300 *Burst Credits*.    ### What are Burst Credits?    In case the account exceeds the limit frequency for a  `Rate Limiter` (for instance, when one account makes `41 requests/second` in any `price insert/update route`), we decrease from the *Burst Credit* count the exceeding (in this example, *1 Credit*).    In the event of the *Burst Credits* reaching **0 (zero)**, the request is blocked with a `Status 429` response.    The credits fill up over time when the route is not being used, in the same rate as the route's `Rate Limiter`. In our example, for each second not sending a **PUT or POST request**, we increase *40 Burst Credits* to this `Rate Limiter`    ### New Response Headers    In the response headers of any request to Pricing v2 there are some new headers indicating the current status of the Rate Limiting.  This information may be useful to evaluate the ideal frequency to send requests to a route, and when to send a new request in the event of reaching a Rate Limit.    - `Ratelimit-Limit` - Total *Burst Credits* offered to a route  - `Ratelimit-Remaining` - How many *Burst Credits* are still available to use  - `Ratelimit-Reset` - How long (in seconds) it will take to the *Burst Credits* to fill up completely (It will fill up to the `Ratelimit-Limit`)  - `Retry-After` - Indicates how many seconds you will need to wait until the `Rate Limiter` accepts a new request to this route again. If this header response exists, this means your current request has been rate limited and has not been processed.    ### How to integrate with Pricing v2 considering our Rate Limits    Integrate considering the limits of **requests/route/account** specified in the [*Limits per route*](#rate-limits) section, avoiding to surpass this frequency.    If you happen to be Rate Limited, wait the time in seconds specified in `Retry-After` before making another request to the service, and reduce the rate of requests per second that your integration is making.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PricingConfigurationPriceVariation from './PricingConfigurationPriceVariation';
import PricingConfigurationTradePolicyConfigsInner from './PricingConfigurationTradePolicyConfigsInner';

/**
 * The PricingConfiguration model module.
 * @module model/PricingConfiguration
 * @version 1.0
 */
class PricingConfiguration {
    /**
     * Constructs a new <code>PricingConfiguration</code>.
     * @alias module:model/PricingConfiguration
     * @param defaultMarkup {Number} Account default markup.
     * @param hasMigrated {Boolean} Defines if the account has migrated to Pricing V2.
     * @param minimumMarkups {Object.<String, Number>} Account minimum markup.
     */
    constructor(defaultMarkup, hasMigrated, minimumMarkups) { 
        
        PricingConfiguration.initialize(this, defaultMarkup, hasMigrated, minimumMarkups);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, defaultMarkup, hasMigrated, minimumMarkups) { 
        obj['defaultMarkup'] = defaultMarkup;
        obj['hasMigrated'] = hasMigrated;
        obj['minimumMarkups'] = minimumMarkups;
        obj['priceTableSelectionStrategy'] = 'first';
    }

    /**
     * Constructs a <code>PricingConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PricingConfiguration} obj Optional instance to populate.
     * @return {module:model/PricingConfiguration} The populated <code>PricingConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PricingConfiguration();

            if (data.hasOwnProperty('blockAccount')) {
                obj['blockAccount'] = ApiClient.convertToType(data['blockAccount'], 'Boolean');
            }
            if (data.hasOwnProperty('blockedRoutes')) {
                obj['blockedRoutes'] = ApiClient.convertToType(data['blockedRoutes'], ['String']);
            }
            if (data.hasOwnProperty('defaultMarkup')) {
                obj['defaultMarkup'] = ApiClient.convertToType(data['defaultMarkup'], 'Number');
            }
            if (data.hasOwnProperty('hasMigrated')) {
                obj['hasMigrated'] = ApiClient.convertToType(data['hasMigrated'], 'Boolean');
            }
            if (data.hasOwnProperty('hasOptionalBasePrice')) {
                obj['hasOptionalBasePrice'] = ApiClient.convertToType(data['hasOptionalBasePrice'], 'Boolean');
            }
            if (data.hasOwnProperty('hasPriceInheritance')) {
                obj['hasPriceInheritance'] = ApiClient.convertToType(data['hasPriceInheritance'], 'Boolean');
            }
            if (data.hasOwnProperty('migrationStatus')) {
                obj['migrationStatus'] = ApiClient.convertToType(data['migrationStatus'], 'String');
            }
            if (data.hasOwnProperty('minimumMarkups')) {
                obj['minimumMarkups'] = ApiClient.convertToType(data['minimumMarkups'], {'String': 'Number'});
            }
            if (data.hasOwnProperty('priceInheritance')) {
                obj['priceInheritance'] = ApiClient.convertToType(data['priceInheritance'], 'String');
            }
            if (data.hasOwnProperty('priceTableLimit')) {
                obj['priceTableLimit'] = ApiClient.convertToType(data['priceTableLimit'], 'Number');
            }
            if (data.hasOwnProperty('priceTableSelectionStrategy')) {
                obj['priceTableSelectionStrategy'] = ApiClient.convertToType(data['priceTableSelectionStrategy'], 'String');
            }
            if (data.hasOwnProperty('priceVariation')) {
                obj['priceVariation'] = PricingConfigurationPriceVariation.constructFromObject(data['priceVariation']);
            }
            if (data.hasOwnProperty('sellersToOverride')) {
                obj['sellersToOverride'] = ApiClient.convertToType(data['sellersToOverride'], [Object]);
            }
            if (data.hasOwnProperty('tradePolicyConfigs')) {
                obj['tradePolicyConfigs'] = ApiClient.convertToType(data['tradePolicyConfigs'], [PricingConfigurationTradePolicyConfigsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PricingConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PricingConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PricingConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['blockedRoutes'])) {
            throw new Error("Expected the field `blockedRoutes` to be an array in the JSON data but got " + data['blockedRoutes']);
        }
        // ensure the json data is a string
        if (data['migrationStatus'] && !(typeof data['migrationStatus'] === 'string' || data['migrationStatus'] instanceof String)) {
            throw new Error("Expected the field `migrationStatus` to be a primitive type in the JSON string but got " + data['migrationStatus']);
        }
        // ensure the json data is a string
        if (data['priceInheritance'] && !(typeof data['priceInheritance'] === 'string' || data['priceInheritance'] instanceof String)) {
            throw new Error("Expected the field `priceInheritance` to be a primitive type in the JSON string but got " + data['priceInheritance']);
        }
        // ensure the json data is a string
        if (data['priceTableSelectionStrategy'] && !(typeof data['priceTableSelectionStrategy'] === 'string' || data['priceTableSelectionStrategy'] instanceof String)) {
            throw new Error("Expected the field `priceTableSelectionStrategy` to be a primitive type in the JSON string but got " + data['priceTableSelectionStrategy']);
        }
        // validate the optional field `priceVariation`
        if (data['priceVariation']) { // data not null
          PricingConfigurationPriceVariation.validateJSON(data['priceVariation']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sellersToOverride'])) {
            throw new Error("Expected the field `sellersToOverride` to be an array in the JSON data but got " + data['sellersToOverride']);
        }
        if (data['tradePolicyConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tradePolicyConfigs'])) {
                throw new Error("Expected the field `tradePolicyConfigs` to be an array in the JSON data but got " + data['tradePolicyConfigs']);
            }
            // validate the optional field `tradePolicyConfigs` (array)
            for (const item of data['tradePolicyConfigs']) {
                PricingConfigurationTradePolicyConfigsInner.validateJSON(item);
            };
        }

        return true;
    }


}

PricingConfiguration.RequiredProperties = ["defaultMarkup", "hasMigrated", "minimumMarkups"];

/**
 * Defines if access to the Pricing APIs is blocked for external requests.
 * @member {Boolean} blockAccount
 */
PricingConfiguration.prototype['blockAccount'] = undefined;

/**
 * Array with all blocked routes.
 * @member {Array.<String>} blockedRoutes
 */
PricingConfiguration.prototype['blockedRoutes'] = undefined;

/**
 * Account default markup.
 * @member {Number} defaultMarkup
 */
PricingConfiguration.prototype['defaultMarkup'] = undefined;

/**
 * Defines if the account has migrated to Pricing V2.
 * @member {Boolean} hasMigrated
 */
PricingConfiguration.prototype['hasMigrated'] = undefined;

/**
 * Defines if optional base price is allowed.
 * @member {Boolean} hasOptionalBasePrice
 */
PricingConfiguration.prototype['hasOptionalBasePrice'] = undefined;

/**
 * Deprecated. Use the `priceInheritance` field instead.
 * @member {Boolean} hasPriceInheritance
 */
PricingConfiguration.prototype['hasPriceInheritance'] = undefined;

/**
 * Pricing V2 migration status.
 * @member {String} migrationStatus
 */
PricingConfiguration.prototype['migrationStatus'] = undefined;

/**
 * Account minimum markup.
 * @member {Object.<String, Number>} minimumMarkups
 */
PricingConfiguration.prototype['minimumMarkups'] = undefined;

/**
 * Condition of price inheritance from its parent account. This field can have three possible values: `never` if the store should never inherit prices, `nonexistent` if the store should only inherit prices in case of nonexistent prices for a given product, or `always` if the store should always inherit prices, regardless of its own prices.
 * @member {String} priceInheritance
 */
PricingConfiguration.prototype['priceInheritance'] = undefined;

/**
 * Price Table Limit.
 * @member {Number} priceTableLimit
 */
PricingConfiguration.prototype['priceTableLimit'] = undefined;

/**
 * The strategy used to get prices when there is more than one option. Possible values: `first`, `highest`, `lowest`. Default: `first`.
 * @member {String} priceTableSelectionStrategy
 * @default 'first'
 */
PricingConfiguration.prototype['priceTableSelectionStrategy'] = 'first';

/**
 * @member {module:model/PricingConfigurationPriceVariation} priceVariation
 */
PricingConfiguration.prototype['priceVariation'] = undefined;

/**
 * Overrides prices from sellers.
 * @member {Array.<Object>} sellersToOverride
 */
PricingConfiguration.prototype['sellersToOverride'] = undefined;

/**
 * Trade Policy Configurations array.
 * @member {Array.<module:model/PricingConfigurationTradePolicyConfigsInner>} tradePolicyConfigs
 */
PricingConfiguration.prototype['tradePolicyConfigs'] = undefined;






export default PricingConfiguration;

