/**
 * Pricing API
 *   > Check the new [Pricing onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/pricing-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Pricing and is organized by focusing on the developer's journey.    Pricing is the VTEX module responsible for the SKU's price list. At this module we have the base price of each SKU, some optional fixed prices by trade policy, and some rules that can be applied to generate dynamically different final prices according to the purchase context and the trade policy. The variables used in this collection are:      * **{{accountName}}** = You VTEX account name.    * **{{tradePolicyId}}** = Current Trade Policy ID.    * **{{itemId}}** = SKU ID.    * **{{X-VTEX-API-AppKey}}** and **{{X-VTEX-API-AppToken}}** = Credentials.    You can get more information about how to use this module and its business logic at [VTEX Help](http://help.vtex.com).    ## Rate Limits    ### Limits per route    - `GET`:  routes are not rate limited at the moment  - `PUT or POST`: `40 requests/second/account` in any **price insert/update route** with 1000 *Burst Credits*  - `DELETE`: `16 requests/second/account` in any **price deletion route**, with 300 *Burst Credits*.    ### What are Burst Credits?    In case the account exceeds the limit frequency for a  `Rate Limiter` (for instance, when one account makes `41 requests/second` in any `price insert/update route`), we decrease from the *Burst Credit* count the exceeding (in this example, *1 Credit*).    In the event of the *Burst Credits* reaching **0 (zero)**, the request is blocked with a `Status 429` response.    The credits fill up over time when the route is not being used, in the same rate as the route's `Rate Limiter`. In our example, for each second not sending a **PUT or POST request**, we increase *40 Burst Credits* to this `Rate Limiter`    ### New Response Headers    In the response headers of any request to Pricing v2 there are some new headers indicating the current status of the Rate Limiting.  This information may be useful to evaluate the ideal frequency to send requests to a route, and when to send a new request in the event of reaching a Rate Limit.    - `Ratelimit-Limit` - Total *Burst Credits* offered to a route  - `Ratelimit-Remaining` - How many *Burst Credits* are still available to use  - `Ratelimit-Reset` - How long (in seconds) it will take to the *Burst Credits* to fill up completely (It will fill up to the `Ratelimit-Limit`)  - `Retry-After` - Indicates how many seconds you will need to wait until the `Rate Limiter` accepts a new request to this route again. If this header response exists, this means your current request has been rate limited and has not been processed.    ### How to integrate with Pricing v2 considering our Rate Limits    Integrate considering the limits of **requests/route/account** specified in the [*Limits per route*](#rate-limits) section, avoiding to surpass this frequency.    If you happen to be Rate Limited, wait the time in seconds specified in `Retry-After` before making another request to the service, and reduce the rate of requests per second that your integration is making.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Getcomputedprice model module.
 * @module model/Getcomputedprice
 * @version 1.0
 */
class Getcomputedprice {
    /**
     * Constructs a new <code>Getcomputedprice</code>.
     * @alias module:model/Getcomputedprice
     * @param listPrice {Number} Trade Policy List Price, also known as \"from\" price.
     * @param priceValidUntil {String} Date until when the computed price will be valid, due to price scheduling. If no price scheduling applies, this will be set a year from the current time.
     * @param sellingPrice {Number} Computed Price before applying coupons, promotions and taxes. This price may change before reaching the shelf.
     * @param tradePolicyId {String} Trade Policy ID.
     */
    constructor(listPrice, priceValidUntil, sellingPrice, tradePolicyId) { 
        
        Getcomputedprice.initialize(this, listPrice, priceValidUntil, sellingPrice, tradePolicyId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, listPrice, priceValidUntil, sellingPrice, tradePolicyId) { 
        obj['listPrice'] = listPrice;
        obj['priceValidUntil'] = priceValidUntil;
        obj['sellingPrice'] = sellingPrice;
        obj['tradePolicyId'] = tradePolicyId;
    }

    /**
     * Constructs a <code>Getcomputedprice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Getcomputedprice} obj Optional instance to populate.
     * @return {module:model/Getcomputedprice} The populated <code>Getcomputedprice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Getcomputedprice();

            if (data.hasOwnProperty('costPrice')) {
                obj['costPrice'] = ApiClient.convertToType(data['costPrice'], 'Number');
            }
            if (data.hasOwnProperty('listPrice')) {
                obj['listPrice'] = ApiClient.convertToType(data['listPrice'], 'Number');
            }
            if (data.hasOwnProperty('priceValidUntil')) {
                obj['priceValidUntil'] = ApiClient.convertToType(data['priceValidUntil'], 'String');
            }
            if (data.hasOwnProperty('sellingPrice')) {
                obj['sellingPrice'] = ApiClient.convertToType(data['sellingPrice'], 'Number');
            }
            if (data.hasOwnProperty('tradePolicyId')) {
                obj['tradePolicyId'] = ApiClient.convertToType(data['tradePolicyId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Getcomputedprice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Getcomputedprice</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Getcomputedprice.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['priceValidUntil'] && !(typeof data['priceValidUntil'] === 'string' || data['priceValidUntil'] instanceof String)) {
            throw new Error("Expected the field `priceValidUntil` to be a primitive type in the JSON string but got " + data['priceValidUntil']);
        }
        // ensure the json data is a string
        if (data['tradePolicyId'] && !(typeof data['tradePolicyId'] === 'string' || data['tradePolicyId'] instanceof String)) {
            throw new Error("Expected the field `tradePolicyId` to be a primitive type in the JSON string but got " + data['tradePolicyId']);
        }

        return true;
    }


}

Getcomputedprice.RequiredProperties = ["listPrice", "priceValidUntil", "sellingPrice", "tradePolicyId"];

/**
 * Cost price.
 * @member {Number} costPrice
 */
Getcomputedprice.prototype['costPrice'] = undefined;

/**
 * Trade Policy List Price, also known as \"from\" price.
 * @member {Number} listPrice
 */
Getcomputedprice.prototype['listPrice'] = undefined;

/**
 * Date until when the computed price will be valid, due to price scheduling. If no price scheduling applies, this will be set a year from the current time.
 * @member {String} priceValidUntil
 */
Getcomputedprice.prototype['priceValidUntil'] = undefined;

/**
 * Computed Price before applying coupons, promotions and taxes. This price may change before reaching the shelf.
 * @member {Number} sellingPrice
 */
Getcomputedprice.prototype['sellingPrice'] = undefined;

/**
 * Trade Policy ID.
 * @member {String} tradePolicyId
 */
Getcomputedprice.prototype['tradePolicyId'] = undefined;






export default Getcomputedprice;

