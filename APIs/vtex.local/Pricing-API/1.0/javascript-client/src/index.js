/**
 * Pricing API
 *   > Check the new [Pricing onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/pricing-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Pricing and is organized by focusing on the developer's journey.    Pricing is the VTEX module responsible for the SKU's price list. At this module we have the base price of each SKU, some optional fixed prices by trade policy, and some rules that can be applied to generate dynamically different final prices according to the purchase context and the trade policy. The variables used in this collection are:      * **{{accountName}}** = You VTEX account name.    * **{{tradePolicyId}}** = Current Trade Policy ID.    * **{{itemId}}** = SKU ID.    * **{{X-VTEX-API-AppKey}}** and **{{X-VTEX-API-AppToken}}** = Credentials.    You can get more information about how to use this module and its business logic at [VTEX Help](http://help.vtex.com).    ## Rate Limits    ### Limits per route    - `GET`:  routes are not rate limited at the moment  - `PUT or POST`: `40 requests/second/account` in any **price insert/update route** with 1000 *Burst Credits*  - `DELETE`: `16 requests/second/account` in any **price deletion route**, with 300 *Burst Credits*.    ### What are Burst Credits?    In case the account exceeds the limit frequency for a  `Rate Limiter` (for instance, when one account makes `41 requests/second` in any `price insert/update route`), we decrease from the *Burst Credit* count the exceeding (in this example, *1 Credit*).    In the event of the *Burst Credits* reaching **0 (zero)**, the request is blocked with a `Status 429` response.    The credits fill up over time when the route is not being used, in the same rate as the route's `Rate Limiter`. In our example, for each second not sending a **PUT or POST request**, we increase *40 Burst Credits* to this `Rate Limiter`    ### New Response Headers    In the response headers of any request to Pricing v2 there are some new headers indicating the current status of the Rate Limiting.  This information may be useful to evaluate the ideal frequency to send requests to a route, and when to send a new request in the event of reaching a Rate Limit.    - `Ratelimit-Limit` - Total *Burst Credits* offered to a route  - `Ratelimit-Remaining` - How many *Burst Credits* are still available to use  - `Ratelimit-Reset` - How long (in seconds) it will take to the *Burst Credits* to fill up completely (It will fill up to the `Ratelimit-Limit`)  - `Retry-After` - Indicates how many seconds you will need to wait until the `Rate Limiter` accepts a new request to this route again. If this header response exists, this means your current request has been rate limited and has not been processed.    ### How to integrate with Pricing v2 considering our Rate Limits    Integrate considering the limits of **requests/route/account** specified in the [*Limits per route*](#rate-limits) section, avoiding to surpass this frequency.    If you happen to be Rate Limited, wait the time in seconds specified in `Retry-After` before making another request to the service, and reduce the rate of requests per second that your integration is making.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Context from './model/Context';
import CreateUpdatePriceOrFixedPriceRequest from './model/CreateUpdatePriceOrFixedPriceRequest';
import CreateorupdatefixedpricesonpricetableortradepolicyRequestInner from './model/CreateorupdatefixedpricesonpricetableortradepolicyRequestInner';
import DateRange from './model/DateRange';
import DateRange1 from './model/DateRange1';
import DateRange2 from './model/DateRange2';
import FixedPrice from './model/FixedPrice';
import FixedPrices from './model/FixedPrices';
import GetPricingv2Status200Response from './model/GetPricingv2Status200Response';
import Getallpricetablesandrules200ResponseInner from './model/Getallpricetablesandrules200ResponseInner';
import Getallpricetablesandrules200ResponseInnerRulesInner from './model/Getallpricetablesandrules200ResponseInnerRulesInner';
import Getallpricetablesandrules200ResponseInnerRulesInnerContext from './model/Getallpricetablesandrules200ResponseInnerRulesInnerContext';
import Getallpricetablesandrules200ResponseInnerRulesInnerContextDateRange from './model/Getallpricetablesandrules200ResponseInnerRulesInnerContextDateRange';
import Getallpricetablesandrules200ResponseInnerRulesInnerContextMarkupRange from './model/Getallpricetablesandrules200ResponseInnerRulesInnerContextMarkupRange';
import Getcomputedprice from './model/Getcomputedprice';
import Getprice from './model/Getprice';
import Getrulesforapricetable200Response from './model/Getrulesforapricetable200Response';
import MarkupRange from './model/MarkupRange';
import PricingConfiguration from './model/PricingConfiguration';
import PricingConfigurationPriceVariation from './model/PricingConfigurationPriceVariation';
import PricingConfigurationTradePolicyConfigsInner from './model/PricingConfigurationTradePolicyConfigsInner';
import PricingPipelineCatalogPriceTableIdPutRequest from './model/PricingPipelineCatalogPriceTableIdPutRequest';
import RulesInner from './model/RulesInner';
import PriceTablesApi from './api/PriceTablesApi';
import PricesAndFixedPricesApi from './api/PricesAndFixedPricesApi';
import PricingConfigurationApi from './api/PricingConfigurationApi';


/**
*   &gt; Check the new [Pricing onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/pricing-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Pricing and is organized by focusing on the developer&#39;s journey.    Pricing is the VTEX module responsible for the SKU&#39;s price list. At this module we have the base price of each SKU, some optional fixed prices by trade policy, and some rules that can be applied to generate dynamically different final prices according to the purchase context and the trade policy. The variables used in this collection are:      * **{{accountName}}** &#x3D; You VTEX account name.    * **{{tradePolicyId}}** &#x3D; Current Trade Policy ID.    * **{{itemId}}** &#x3D; SKU ID.    * **{{X-VTEX-API-AppKey}}** and **{{X-VTEX-API-AppToken}}** &#x3D; Credentials.    You can get more information about how to use this module and its business logic at [VTEX Help](http://help.vtex.com).    ## Rate Limits    ### Limits per route    - &#x60;GET&#x60;:  routes are not rate limited at the moment  - &#x60;PUT or POST&#x60;: &#x60;40 requests/second/account&#x60; in any **price insert/update route** with 1000 *Burst Credits*  - &#x60;DELETE&#x60;: &#x60;16 requests/second/account&#x60; in any **price deletion route**, with 300 *Burst Credits*.    ### What are Burst Credits?    In case the account exceeds the limit frequency for a  &#x60;Rate Limiter&#x60; (for instance, when one account makes &#x60;41 requests/second&#x60; in any &#x60;price insert/update route&#x60;), we decrease from the *Burst Credit* count the exceeding (in this example, *1 Credit*).    In the event of the *Burst Credits* reaching **0 (zero)**, the request is blocked with a &#x60;Status 429&#x60; response.    The credits fill up over time when the route is not being used, in the same rate as the route&#39;s &#x60;Rate Limiter&#x60;. In our example, for each second not sending a **PUT or POST request**, we increase *40 Burst Credits* to this &#x60;Rate Limiter&#x60;    ### New Response Headers    In the response headers of any request to Pricing v2 there are some new headers indicating the current status of the Rate Limiting.  This information may be useful to evaluate the ideal frequency to send requests to a route, and when to send a new request in the event of reaching a Rate Limit.    - &#x60;Ratelimit-Limit&#x60; - Total *Burst Credits* offered to a route  - &#x60;Ratelimit-Remaining&#x60; - How many *Burst Credits* are still available to use  - &#x60;Ratelimit-Reset&#x60; - How long (in seconds) it will take to the *Burst Credits* to fill up completely (It will fill up to the &#x60;Ratelimit-Limit&#x60;)  - &#x60;Retry-After&#x60; - Indicates how many seconds you will need to wait until the &#x60;Rate Limiter&#x60; accepts a new request to this route again. If this header response exists, this means your current request has been rate limited and has not been processed.    ### How to integrate with Pricing v2 considering our Rate Limits    Integrate considering the limits of **requests/route/account** specified in the [*Limits per route*](#rate-limits) section, avoiding to surpass this frequency.    If you happen to be Rate Limited, wait the time in seconds specified in &#x60;Retry-After&#x60; before making another request to the service, and reduce the rate of requests per second that your integration is making..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var PricingApi = require('index'); // See note below*.
* var xxxSvc = new PricingApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new PricingApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new PricingApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new PricingApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Context model constructor.
     * @property {module:model/Context}
     */
    Context,

    /**
     * The CreateUpdatePriceOrFixedPriceRequest model constructor.
     * @property {module:model/CreateUpdatePriceOrFixedPriceRequest}
     */
    CreateUpdatePriceOrFixedPriceRequest,

    /**
     * The CreateorupdatefixedpricesonpricetableortradepolicyRequestInner model constructor.
     * @property {module:model/CreateorupdatefixedpricesonpricetableortradepolicyRequestInner}
     */
    CreateorupdatefixedpricesonpricetableortradepolicyRequestInner,

    /**
     * The DateRange model constructor.
     * @property {module:model/DateRange}
     */
    DateRange,

    /**
     * The DateRange1 model constructor.
     * @property {module:model/DateRange1}
     */
    DateRange1,

    /**
     * The DateRange2 model constructor.
     * @property {module:model/DateRange2}
     */
    DateRange2,

    /**
     * The FixedPrice model constructor.
     * @property {module:model/FixedPrice}
     */
    FixedPrice,

    /**
     * The FixedPrices model constructor.
     * @property {module:model/FixedPrices}
     */
    FixedPrices,

    /**
     * The GetPricingv2Status200Response model constructor.
     * @property {module:model/GetPricingv2Status200Response}
     */
    GetPricingv2Status200Response,

    /**
     * The Getallpricetablesandrules200ResponseInner model constructor.
     * @property {module:model/Getallpricetablesandrules200ResponseInner}
     */
    Getallpricetablesandrules200ResponseInner,

    /**
     * The Getallpricetablesandrules200ResponseInnerRulesInner model constructor.
     * @property {module:model/Getallpricetablesandrules200ResponseInnerRulesInner}
     */
    Getallpricetablesandrules200ResponseInnerRulesInner,

    /**
     * The Getallpricetablesandrules200ResponseInnerRulesInnerContext model constructor.
     * @property {module:model/Getallpricetablesandrules200ResponseInnerRulesInnerContext}
     */
    Getallpricetablesandrules200ResponseInnerRulesInnerContext,

    /**
     * The Getallpricetablesandrules200ResponseInnerRulesInnerContextDateRange model constructor.
     * @property {module:model/Getallpricetablesandrules200ResponseInnerRulesInnerContextDateRange}
     */
    Getallpricetablesandrules200ResponseInnerRulesInnerContextDateRange,

    /**
     * The Getallpricetablesandrules200ResponseInnerRulesInnerContextMarkupRange model constructor.
     * @property {module:model/Getallpricetablesandrules200ResponseInnerRulesInnerContextMarkupRange}
     */
    Getallpricetablesandrules200ResponseInnerRulesInnerContextMarkupRange,

    /**
     * The Getcomputedprice model constructor.
     * @property {module:model/Getcomputedprice}
     */
    Getcomputedprice,

    /**
     * The Getprice model constructor.
     * @property {module:model/Getprice}
     */
    Getprice,

    /**
     * The Getrulesforapricetable200Response model constructor.
     * @property {module:model/Getrulesforapricetable200Response}
     */
    Getrulesforapricetable200Response,

    /**
     * The MarkupRange model constructor.
     * @property {module:model/MarkupRange}
     */
    MarkupRange,

    /**
     * The PricingConfiguration model constructor.
     * @property {module:model/PricingConfiguration}
     */
    PricingConfiguration,

    /**
     * The PricingConfigurationPriceVariation model constructor.
     * @property {module:model/PricingConfigurationPriceVariation}
     */
    PricingConfigurationPriceVariation,

    /**
     * The PricingConfigurationTradePolicyConfigsInner model constructor.
     * @property {module:model/PricingConfigurationTradePolicyConfigsInner}
     */
    PricingConfigurationTradePolicyConfigsInner,

    /**
     * The PricingPipelineCatalogPriceTableIdPutRequest model constructor.
     * @property {module:model/PricingPipelineCatalogPriceTableIdPutRequest}
     */
    PricingPipelineCatalogPriceTableIdPutRequest,

    /**
     * The RulesInner model constructor.
     * @property {module:model/RulesInner}
     */
    RulesInner,

    /**
    * The PriceTablesApi service constructor.
    * @property {module:api/PriceTablesApi}
    */
    PriceTablesApi,

    /**
    * The PricesAndFixedPricesApi service constructor.
    * @property {module:api/PricesAndFixedPricesApi}
    */
    PricesAndFixedPricesApi,

    /**
    * The PricingConfigurationApi service constructor.
    * @property {module:api/PricingConfigurationApi}
    */
    PricingConfigurationApi
};
