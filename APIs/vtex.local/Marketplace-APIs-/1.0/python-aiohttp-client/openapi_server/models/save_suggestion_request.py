# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image import Image
from openapi_server.models.product_specification import ProductSpecification
from openapi_server.models.save_suggestion_request_pricing import SaveSuggestionRequestPricing
from openapi_server.models.sku_specification import SkuSpecification
from openapi_server import util


class SaveSuggestionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_quantity: int=None, brand_name: str=None, category_full_path: str=None, ean: str='EAN10', height: int=10, images: List[Image]=None, length: int=10, measurement_unit: str=None, pricing: SaveSuggestionRequestPricing=None, product_description: str=None, product_id: str='1234', product_name: str='', product_specifications: List[ProductSpecification]=None, ref_id: str='REF10', seller_id: str='1', seller_stock_keeping_unit_id: int=None, sku_name: str=None, sku_specifications: List[SkuSpecification]=None, unit_multiplier: int=None, weight: int=100, width: int=10):
        """SaveSuggestionRequest - a model defined in OpenAPI

        :param available_quantity: The available_quantity of this SaveSuggestionRequest.
        :param brand_name: The brand_name of this SaveSuggestionRequest.
        :param category_full_path: The category_full_path of this SaveSuggestionRequest.
        :param ean: The ean of this SaveSuggestionRequest.
        :param height: The height of this SaveSuggestionRequest.
        :param images: The images of this SaveSuggestionRequest.
        :param length: The length of this SaveSuggestionRequest.
        :param measurement_unit: The measurement_unit of this SaveSuggestionRequest.
        :param pricing: The pricing of this SaveSuggestionRequest.
        :param product_description: The product_description of this SaveSuggestionRequest.
        :param product_id: The product_id of this SaveSuggestionRequest.
        :param product_name: The product_name of this SaveSuggestionRequest.
        :param product_specifications: The product_specifications of this SaveSuggestionRequest.
        :param ref_id: The ref_id of this SaveSuggestionRequest.
        :param seller_id: The seller_id of this SaveSuggestionRequest.
        :param seller_stock_keeping_unit_id: The seller_stock_keeping_unit_id of this SaveSuggestionRequest.
        :param sku_name: The sku_name of this SaveSuggestionRequest.
        :param sku_specifications: The sku_specifications of this SaveSuggestionRequest.
        :param unit_multiplier: The unit_multiplier of this SaveSuggestionRequest.
        :param weight: The weight of this SaveSuggestionRequest.
        :param width: The width of this SaveSuggestionRequest.
        """
        self.openapi_types = {
            'available_quantity': int,
            'brand_name': str,
            'category_full_path': str,
            'ean': str,
            'height': int,
            'images': List[Image],
            'length': int,
            'measurement_unit': str,
            'pricing': SaveSuggestionRequestPricing,
            'product_description': str,
            'product_id': str,
            'product_name': str,
            'product_specifications': List[ProductSpecification],
            'ref_id': str,
            'seller_id': str,
            'seller_stock_keeping_unit_id': int,
            'sku_name': str,
            'sku_specifications': List[SkuSpecification],
            'unit_multiplier': int,
            'weight': int,
            'width': int
        }

        self.attribute_map = {
            'available_quantity': 'AvailableQuantity',
            'brand_name': 'BrandName',
            'category_full_path': 'CategoryFullPath',
            'ean': 'EAN',
            'height': 'Height',
            'images': 'Images',
            'length': 'Length',
            'measurement_unit': 'MeasurementUnit',
            'pricing': 'Pricing',
            'product_description': 'ProductDescription',
            'product_id': 'ProductId',
            'product_name': 'ProductName',
            'product_specifications': 'ProductSpecifications',
            'ref_id': 'RefId',
            'seller_id': 'SellerId',
            'seller_stock_keeping_unit_id': 'SellerStockKeepingUnitId',
            'sku_name': 'SkuName',
            'sku_specifications': 'SkuSpecifications',
            'unit_multiplier': 'UnitMultiplier',
            'weight': 'Weight',
            'width': 'Width'
        }

        self._available_quantity = available_quantity
        self._brand_name = brand_name
        self._category_full_path = category_full_path
        self._ean = ean
        self._height = height
        self._images = images
        self._length = length
        self._measurement_unit = measurement_unit
        self._pricing = pricing
        self._product_description = product_description
        self._product_id = product_id
        self._product_name = product_name
        self._product_specifications = product_specifications
        self._ref_id = ref_id
        self._seller_id = seller_id
        self._seller_stock_keeping_unit_id = seller_stock_keeping_unit_id
        self._sku_name = sku_name
        self._sku_specifications = sku_specifications
        self._unit_multiplier = unit_multiplier
        self._weight = weight
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SaveSuggestionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SaveSuggestionRequest of this SaveSuggestionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_quantity(self):
        """Gets the available_quantity of this SaveSuggestionRequest.

        

        :return: The available_quantity of this SaveSuggestionRequest.
        :rtype: int
        """
        return self._available_quantity

    @available_quantity.setter
    def available_quantity(self, available_quantity):
        """Sets the available_quantity of this SaveSuggestionRequest.

        

        :param available_quantity: The available_quantity of this SaveSuggestionRequest.
        :type available_quantity: int
        """
        if available_quantity is None:
            raise ValueError("Invalid value for `available_quantity`, must not be `None`")

        self._available_quantity = available_quantity

    @property
    def brand_name(self):
        """Gets the brand_name of this SaveSuggestionRequest.

        Name of the brand to which this SKU belongs. It must match the brand created in the marketplace.

        :return: The brand_name of this SaveSuggestionRequest.
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this SaveSuggestionRequest.

        Name of the brand to which this SKU belongs. It must match the brand created in the marketplace.

        :param brand_name: The brand_name of this SaveSuggestionRequest.
        :type brand_name: str
        """
        if brand_name is None:
            raise ValueError("Invalid value for `brand_name`, must not be `None`")

        self._brand_name = brand_name

    @property
    def category_full_path(self):
        """Gets the category_full_path of this SaveSuggestionRequest.

        Full path to the SKU's category. It should be written as {department}/{category}. For example: if the department is **Appliances** and the category is **Oven**, the full path should be 'Appliances/Oven'.

        :return: The category_full_path of this SaveSuggestionRequest.
        :rtype: str
        """
        return self._category_full_path

    @category_full_path.setter
    def category_full_path(self, category_full_path):
        """Sets the category_full_path of this SaveSuggestionRequest.

        Full path to the SKU's category. It should be written as {department}/{category}. For example: if the department is **Appliances** and the category is **Oven**, the full path should be 'Appliances/Oven'.

        :param category_full_path: The category_full_path of this SaveSuggestionRequest.
        :type category_full_path: str
        """
        if category_full_path is None:
            raise ValueError("Invalid value for `category_full_path`, must not be `None`")

        self._category_full_path = category_full_path

    @property
    def ean(self):
        """Gets the ean of this SaveSuggestionRequest.

        SKU reference code. Mandatory if the RefId is not informed.

        :return: The ean of this SaveSuggestionRequest.
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this SaveSuggestionRequest.

        SKU reference code. Mandatory if the RefId is not informed.

        :param ean: The ean of this SaveSuggestionRequest.
        :type ean: str
        """
        if ean is None:
            raise ValueError("Invalid value for `ean`, must not be `None`")

        self._ean = ean

    @property
    def height(self):
        """Gets the height of this SaveSuggestionRequest.

        Height of the SKU.

        :return: The height of this SaveSuggestionRequest.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this SaveSuggestionRequest.

        Height of the SKU.

        :param height: The height of this SaveSuggestionRequest.
        :type height: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def images(self):
        """Gets the images of this SaveSuggestionRequest.

        Array containing the URLs and names the SKU images.

        :return: The images of this SaveSuggestionRequest.
        :rtype: List[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this SaveSuggestionRequest.

        Array containing the URLs and names the SKU images.

        :param images: The images of this SaveSuggestionRequest.
        :type images: List[Image]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def length(self):
        """Gets the length of this SaveSuggestionRequest.

        Length of the SKU.

        :return: The length of this SaveSuggestionRequest.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this SaveSuggestionRequest.

        Length of the SKU.

        :param length: The length of this SaveSuggestionRequest.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this SaveSuggestionRequest.

        Measurement unit that should be used for this SKU. If this information doesn't apply, you should use the default value `un`.

        :return: The measurement_unit of this SaveSuggestionRequest.
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this SaveSuggestionRequest.

        Measurement unit that should be used for this SKU. If this information doesn't apply, you should use the default value `un`.

        :param measurement_unit: The measurement_unit of this SaveSuggestionRequest.
        :type measurement_unit: str
        """

        self._measurement_unit = measurement_unit

    @property
    def pricing(self):
        """Gets the pricing of this SaveSuggestionRequest.


        :return: The pricing of this SaveSuggestionRequest.
        :rtype: SaveSuggestionRequestPricing
        """
        return self._pricing

    @pricing.setter
    def pricing(self, pricing):
        """Sets the pricing of this SaveSuggestionRequest.


        :param pricing: The pricing of this SaveSuggestionRequest.
        :type pricing: SaveSuggestionRequestPricing
        """
        if pricing is None:
            raise ValueError("Invalid value for `pricing`, must not be `None`")

        self._pricing = pricing

    @property
    def product_description(self):
        """Gets the product_description of this SaveSuggestionRequest.

        Product Description containing the main information about the product (not the SKU).

        :return: The product_description of this SaveSuggestionRequest.
        :rtype: str
        """
        return self._product_description

    @product_description.setter
    def product_description(self, product_description):
        """Sets the product_description of this SaveSuggestionRequest.

        Product Description containing the main information about the product (not the SKU).

        :param product_description: The product_description of this SaveSuggestionRequest.
        :type product_description: str
        """
        if product_description is None:
            raise ValueError("Invalid value for `product_description`, must not be `None`")

        self._product_description = product_description

    @property
    def product_id(self):
        """Gets the product_id of this SaveSuggestionRequest.

        Product ID in seller's account.

        :return: The product_id of this SaveSuggestionRequest.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this SaveSuggestionRequest.

        Product ID in seller's account.

        :param product_id: The product_id of this SaveSuggestionRequest.
        :type product_id: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def product_name(self):
        """Gets the product_name of this SaveSuggestionRequest.

        Name of the suggested product. This field has a limit of 150 characters.

        :return: The product_name of this SaveSuggestionRequest.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this SaveSuggestionRequest.

        Name of the suggested product. This field has a limit of 150 characters.

        :param product_name: The product_name of this SaveSuggestionRequest.
        :type product_name: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")

        self._product_name = product_name

    @property
    def product_specifications(self):
        """Gets the product_specifications of this SaveSuggestionRequest.

        Array containing the names and values of the product specifications.

        :return: The product_specifications of this SaveSuggestionRequest.
        :rtype: List[ProductSpecification]
        """
        return self._product_specifications

    @product_specifications.setter
    def product_specifications(self, product_specifications):
        """Sets the product_specifications of this SaveSuggestionRequest.

        Array containing the names and values of the product specifications.

        :param product_specifications: The product_specifications of this SaveSuggestionRequest.
        :type product_specifications: List[ProductSpecification]
        """

        self._product_specifications = product_specifications

    @property
    def ref_id(self):
        """Gets the ref_id of this SaveSuggestionRequest.

        SKU reference code. Mandotory if the EAN is not informed.

        :return: The ref_id of this SaveSuggestionRequest.
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this SaveSuggestionRequest.

        SKU reference code. Mandotory if the EAN is not informed.

        :param ref_id: The ref_id of this SaveSuggestionRequest.
        :type ref_id: str
        """
        if ref_id is None:
            raise ValueError("Invalid value for `ref_id`, must not be `None`")

        self._ref_id = ref_id

    @property
    def seller_id(self):
        """Gets the seller_id of this SaveSuggestionRequest.

        ID of the seller in the marketplace. This ID must be created by the marketplace and informed to the seller before the integration is built.

        :return: The seller_id of this SaveSuggestionRequest.
        :rtype: str
        """
        return self._seller_id

    @seller_id.setter
    def seller_id(self, seller_id):
        """Sets the seller_id of this SaveSuggestionRequest.

        ID of the seller in the marketplace. This ID must be created by the marketplace and informed to the seller before the integration is built.

        :param seller_id: The seller_id of this SaveSuggestionRequest.
        :type seller_id: str
        """
        if seller_id is None:
            raise ValueError("Invalid value for `seller_id`, must not be `None`")

        self._seller_id = seller_id

    @property
    def seller_stock_keeping_unit_id(self):
        """Gets the seller_stock_keeping_unit_id of this SaveSuggestionRequest.

        ID of the SKU registered in the seller.

        :return: The seller_stock_keeping_unit_id of this SaveSuggestionRequest.
        :rtype: int
        """
        return self._seller_stock_keeping_unit_id

    @seller_stock_keeping_unit_id.setter
    def seller_stock_keeping_unit_id(self, seller_stock_keeping_unit_id):
        """Sets the seller_stock_keeping_unit_id of this SaveSuggestionRequest.

        ID of the SKU registered in the seller.

        :param seller_stock_keeping_unit_id: The seller_stock_keeping_unit_id of this SaveSuggestionRequest.
        :type seller_stock_keeping_unit_id: int
        """

        self._seller_stock_keeping_unit_id = seller_stock_keeping_unit_id

    @property
    def sku_name(self):
        """Gets the sku_name of this SaveSuggestionRequest.

        Name of the suggested SKU.

        :return: The sku_name of this SaveSuggestionRequest.
        :rtype: str
        """
        return self._sku_name

    @sku_name.setter
    def sku_name(self, sku_name):
        """Sets the sku_name of this SaveSuggestionRequest.

        Name of the suggested SKU.

        :param sku_name: The sku_name of this SaveSuggestionRequest.
        :type sku_name: str
        """
        if sku_name is None:
            raise ValueError("Invalid value for `sku_name`, must not be `None`")

        self._sku_name = sku_name

    @property
    def sku_specifications(self):
        """Gets the sku_specifications of this SaveSuggestionRequest.

        Array containing the names and values of the SKU specifications.

        :return: The sku_specifications of this SaveSuggestionRequest.
        :rtype: List[SkuSpecification]
        """
        return self._sku_specifications

    @sku_specifications.setter
    def sku_specifications(self, sku_specifications):
        """Sets the sku_specifications of this SaveSuggestionRequest.

        Array containing the names and values of the SKU specifications.

        :param sku_specifications: The sku_specifications of this SaveSuggestionRequest.
        :type sku_specifications: List[SkuSpecification]
        """

        self._sku_specifications = sku_specifications

    @property
    def unit_multiplier(self):
        """Gets the unit_multiplier of this SaveSuggestionRequest.

        Unit multiplier for this SKU. If this information doesn't apply, you should use the default value `1`.

        :return: The unit_multiplier of this SaveSuggestionRequest.
        :rtype: int
        """
        return self._unit_multiplier

    @unit_multiplier.setter
    def unit_multiplier(self, unit_multiplier):
        """Sets the unit_multiplier of this SaveSuggestionRequest.

        Unit multiplier for this SKU. If this information doesn't apply, you should use the default value `1`.

        :param unit_multiplier: The unit_multiplier of this SaveSuggestionRequest.
        :type unit_multiplier: int
        """

        self._unit_multiplier = unit_multiplier

    @property
    def weight(self):
        """Gets the weight of this SaveSuggestionRequest.

        Weight of the SKU in grams.

        :return: The weight of this SaveSuggestionRequest.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this SaveSuggestionRequest.

        Weight of the SKU in grams.

        :param weight: The weight of this SaveSuggestionRequest.
        :type weight: int
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")

        self._weight = weight

    @property
    def width(self):
        """Gets the width of this SaveSuggestionRequest.

        Width of the SKU.

        :return: The width of this SaveSuggestionRequest.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this SaveSuggestionRequest.

        Width of the SKU.

        :param width: The width of this SaveSuggestionRequest.
        :type width: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")

        self._width = width
