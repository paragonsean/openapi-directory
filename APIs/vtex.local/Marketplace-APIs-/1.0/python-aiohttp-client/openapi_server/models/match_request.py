# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product import Product
from openapi_server.models.sku import Sku
from openapi_server import util


class MatchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, match_type: str='itemMatch', matcher_id: str='vtex-matcher', product: Product=None, product_ref: str='', score: str='80', sku: Sku=None, sku_ref: str=''):
        """MatchRequest - a model defined in OpenAPI

        :param match_type: The match_type of this MatchRequest.
        :param matcher_id: The matcher_id of this MatchRequest.
        :param product: The product of this MatchRequest.
        :param product_ref: The product_ref of this MatchRequest.
        :param score: The score of this MatchRequest.
        :param sku: The sku of this MatchRequest.
        :param sku_ref: The sku_ref of this MatchRequest.
        """
        self.openapi_types = {
            'match_type': str,
            'matcher_id': str,
            'product': Product,
            'product_ref': str,
            'score': str,
            'sku': Sku,
            'sku_ref': str
        }

        self.attribute_map = {
            'match_type': 'matchType',
            'matcher_id': 'matcherId',
            'product': 'product',
            'product_ref': 'productRef',
            'score': 'score',
            'sku': 'sku',
            'sku_ref': 'skuRef'
        }

        self._match_type = match_type
        self._matcher_id = matcher_id
        self._product = product
        self._product_ref = product_ref
        self._score = score
        self._sku = sku
        self._sku_ref = sku_ref

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MatchRequest of this MatchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def match_type(self):
        """Gets the match_type of this MatchRequest.

        Define the action you want to apply to each SKU. Values include:   1. `newproduct`: match the SKU as a new product.   2. `itemMatch`: associate the received SKU to an existing SKU.   3. `productMatch`: associate the received SKU to an existing product.   4. `deny`: deny the received SKU.   5. `pending`: the received SKU requires attention.   6. `incomplete`: the received SKU is lacking information to be matched.   7. `insufficientScore`: the score given by the Matcher to this received SKU doesn't qualify it to be matched.   Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.

        :return: The match_type of this MatchRequest.
        :rtype: str
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this MatchRequest.

        Define the action you want to apply to each SKU. Values include:   1. `newproduct`: match the SKU as a new product.   2. `itemMatch`: associate the received SKU to an existing SKU.   3. `productMatch`: associate the received SKU to an existing product.   4. `deny`: deny the received SKU.   5. `pending`: the received SKU requires attention.   6. `incomplete`: the received SKU is lacking information to be matched.   7. `insufficientScore`: the score given by the Matcher to this received SKU doesn't qualify it to be matched.   Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.

        :param match_type: The match_type of this MatchRequest.
        :type match_type: str
        """
        if match_type is None:
            raise ValueError("Invalid value for `match_type`, must not be `None`")

        self._match_type = match_type

    @property
    def matcher_id(self):
        """Gets the matcher_id of this MatchRequest.

        Identifies the matching entity. It can be either VTEX's matcher, or an external matcher developed by partners, for example. The `matcherId`'s value can be obtained through the [Get SKU Suggestion by ID](https://developers.vtex.com/vtex-rest-api/reference/getsuggestion) endpoint.

        :return: The matcher_id of this MatchRequest.
        :rtype: str
        """
        return self._matcher_id

    @matcher_id.setter
    def matcher_id(self, matcher_id):
        """Sets the matcher_id of this MatchRequest.

        Identifies the matching entity. It can be either VTEX's matcher, or an external matcher developed by partners, for example. The `matcherId`'s value can be obtained through the [Get SKU Suggestion by ID](https://developers.vtex.com/vtex-rest-api/reference/getsuggestion) endpoint.

        :param matcher_id: The matcher_id of this MatchRequest.
        :type matcher_id: str
        """
        if matcher_id is None:
            raise ValueError("Invalid value for `matcher_id`, must not be `None`")

        self._matcher_id = matcher_id

    @property
    def product(self):
        """Gets the product of this MatchRequest.


        :return: The product of this MatchRequest.
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this MatchRequest.


        :param product: The product of this MatchRequest.
        :type product: Product
        """

        self._product = product

    @property
    def product_ref(self):
        """Gets the product_ref of this MatchRequest.

        In `productMatch` actions, fill in this field on your request to match the item to an existing product in the marketplace.

        :return: The product_ref of this MatchRequest.
        :rtype: str
        """
        return self._product_ref

    @product_ref.setter
    def product_ref(self, product_ref):
        """Sets the product_ref of this MatchRequest.

        In `productMatch` actions, fill in this field on your request to match the item to an existing product in the marketplace.

        :param product_ref: The product_ref of this MatchRequest.
        :type product_ref: str
        """

        self._product_ref = product_ref

    @property
    def score(self):
        """Gets the score of this MatchRequest.

        Matcher rates received SKUs by correlating the data sent by sellers, to existing fields in the marketplace. The calculation of these scores determines whether the product has been:   `Approved`: score equal to or greater than 80 points.   `Pending`: from 31 to 79 points.  `Denied`: from 0 to 30 points.   Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.

        :return: The score of this MatchRequest.
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this MatchRequest.

        Matcher rates received SKUs by correlating the data sent by sellers, to existing fields in the marketplace. The calculation of these scores determines whether the product has been:   `Approved`: score equal to or greater than 80 points.   `Pending`: from 31 to 79 points.  `Denied`: from 0 to 30 points.   Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.

        :param score: The score of this MatchRequest.
        :type score: str
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def sku(self):
        """Gets the sku of this MatchRequest.


        :return: The sku of this MatchRequest.
        :rtype: Sku
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this MatchRequest.


        :param sku: The sku of this MatchRequest.
        :type sku: Sku
        """

        self._sku = sku

    @property
    def sku_ref(self):
        """Gets the sku_ref of this MatchRequest.

        In `itemMatch` actions, fill in this field on your request to match the item to an existing SKU in the marketplace.

        :return: The sku_ref of this MatchRequest.
        :rtype: str
        """
        return self._sku_ref

    @sku_ref.setter
    def sku_ref(self, sku_ref):
        """Sets the sku_ref of this MatchRequest.

        In `itemMatch` actions, fill in this field on your request to match the item to an existing SKU in the marketplace.

        :param sku_ref: The sku_ref of this MatchRequest.
        :type sku_ref: str
        """

        self._sku_ref = sku_ref
