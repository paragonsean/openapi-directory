# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Score(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approve: int=80, reject: int=30):
        """Score - a model defined in OpenAPI

        :param approve: The approve of this Score.
        :param reject: The reject of this Score.
        """
        self.openapi_types = {
            'approve': int,
            'reject': int
        }

        self.attribute_map = {
            'approve': 'Approve',
            'reject': 'Reject'
        }

        self._approve = approve
        self._reject = reject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Score':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Score of this Score.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approve(self):
        """Gets the approve of this Score.

        Insert in this field the desired minimum score to approve SKUs. If this field is set as 99, it means all approvals will be made manually.

        :return: The approve of this Score.
        :rtype: int
        """
        return self._approve

    @approve.setter
    def approve(self, approve):
        """Sets the approve of this Score.

        Insert in this field the desired minimum score to approve SKUs. If this field is set as 99, it means all approvals will be made manually.

        :param approve: The approve of this Score.
        :type approve: int
        """
        if approve is None:
            raise ValueError("Invalid value for `approve`, must not be `None`")

        self._approve = approve

    @property
    def reject(self):
        """Gets the reject of this Score.

        Insert in this field the desired maximum score to reject SKUs.

        :return: The reject of this Score.
        :rtype: int
        """
        return self._reject

    @reject.setter
    def reject(self, reject):
        """Sets the reject of this Score.

        Insert in this field the desired maximum score to reject SKUs.

        :param reject: The reject of this Score.
        :type reject: int
        """
        if reject is None:
            raise ValueError("Invalid value for `reject`, must not be `None`")

        self._reject = reject
