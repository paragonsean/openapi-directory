# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.saveaccountconfig200_response_rules import Saveaccountconfig200ResponseRules
from openapi_server.models.saveaccountconfig200_response_score import Saveaccountconfig200ResponseScore
from openapi_server import util


class Saveaccountconfig200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, match_flux: str=None, matchers: List[object]=None, rules: Saveaccountconfig200ResponseRules=None, score: Saveaccountconfig200ResponseScore=None, specifications_mapping: List[object]=None):
        """Saveaccountconfig200Response - a model defined in OpenAPI

        :param match_flux: The match_flux of this Saveaccountconfig200Response.
        :param matchers: The matchers of this Saveaccountconfig200Response.
        :param rules: The rules of this Saveaccountconfig200Response.
        :param score: The score of this Saveaccountconfig200Response.
        :param specifications_mapping: The specifications_mapping of this Saveaccountconfig200Response.
        """
        self.openapi_types = {
            'match_flux': str,
            'matchers': List[object],
            'rules': Saveaccountconfig200ResponseRules,
            'score': Saveaccountconfig200ResponseScore,
            'specifications_mapping': List[object]
        }

        self.attribute_map = {
            'match_flux': 'MatchFlux',
            'matchers': 'Matchers',
            'rules': 'Rules',
            'score': 'Score',
            'specifications_mapping': 'SpecificationsMapping'
        }

        self._match_flux = match_flux
        self._matchers = matchers
        self._rules = rules
        self._score = score
        self._specifications_mapping = specifications_mapping

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Saveaccountconfig200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Saveaccountconfig_200_response of this Saveaccountconfig200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def match_flux(self):
        """Gets the match_flux of this Saveaccountconfig200Response.

        Type of approval configuration that apply to received SKUs sent by sellers. The possible values are:   `default`: the matcher approves the SKU.   `manual`: manual SKU's approvals.   `AutoApprove`: automatic SKU's approvals.

        :return: The match_flux of this Saveaccountconfig200Response.
        :rtype: str
        """
        return self._match_flux

    @match_flux.setter
    def match_flux(self, match_flux):
        """Sets the match_flux of this Saveaccountconfig200Response.

        Type of approval configuration that apply to received SKUs sent by sellers. The possible values are:   `default`: the matcher approves the SKU.   `manual`: manual SKU's approvals.   `AutoApprove`: automatic SKU's approvals.

        :param match_flux: The match_flux of this Saveaccountconfig200Response.
        :type match_flux: str
        """

        self._match_flux = match_flux

    @property
    def matchers(self):
        """Gets the matchers of this Saveaccountconfig200Response.

        [Matchers](https://help.vtex.com/en/tutorial/understanding-vtex-matcher-scoring) configurations for approving and rejecting [received SKUs](https://help.vtex.com/en/tutorial/cataloging-received-skus--tutorials_396) sent by sellers.

        :return: The matchers of this Saveaccountconfig200Response.
        :rtype: List[object]
        """
        return self._matchers

    @matchers.setter
    def matchers(self, matchers):
        """Sets the matchers of this Saveaccountconfig200Response.

        [Matchers](https://help.vtex.com/en/tutorial/understanding-vtex-matcher-scoring) configurations for approving and rejecting [received SKUs](https://help.vtex.com/en/tutorial/cataloging-received-skus--tutorials_396) sent by sellers.

        :param matchers: The matchers of this Saveaccountconfig200Response.
        :type matchers: List[object]
        """

        self._matchers = matchers

    @property
    def rules(self):
        """Gets the rules of this Saveaccountconfig200Response.


        :return: The rules of this Saveaccountconfig200Response.
        :rtype: Saveaccountconfig200ResponseRules
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this Saveaccountconfig200Response.


        :param rules: The rules of this Saveaccountconfig200Response.
        :type rules: Saveaccountconfig200ResponseRules
        """

        self._rules = rules

    @property
    def score(self):
        """Gets the score of this Saveaccountconfig200Response.


        :return: The score of this Saveaccountconfig200Response.
        :rtype: Saveaccountconfig200ResponseScore
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Saveaccountconfig200Response.


        :param score: The score of this Saveaccountconfig200Response.
        :type score: Saveaccountconfig200ResponseScore
        """

        self._score = score

    @property
    def specifications_mapping(self):
        """Gets the specifications_mapping of this Saveaccountconfig200Response.

        This attribute maps product and SKU's specifications between the marketplace and the seller.

        :return: The specifications_mapping of this Saveaccountconfig200Response.
        :rtype: List[object]
        """
        return self._specifications_mapping

    @specifications_mapping.setter
    def specifications_mapping(self, specifications_mapping):
        """Sets the specifications_mapping of this Saveaccountconfig200Response.

        This attribute maps product and SKU's specifications between the marketplace and the seller.

        :param specifications_mapping: The specifications_mapping of this Saveaccountconfig200Response.
        :type specifications_mapping: List[object]
        """

        self._specifications_mapping = specifications_mapping
