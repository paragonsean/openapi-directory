# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.matcher import Matcher
from openapi_server.models.score import Score
from openapi_server import util


class SaveaccountconfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, match_flux: str='autoApprove', matchers: List[Matcher]=None, score: Score=None, specifications_mapping: List[str]=None):
        """SaveaccountconfigRequest - a model defined in OpenAPI

        :param match_flux: The match_flux of this SaveaccountconfigRequest.
        :param matchers: The matchers of this SaveaccountconfigRequest.
        :param score: The score of this SaveaccountconfigRequest.
        :param specifications_mapping: The specifications_mapping of this SaveaccountconfigRequest.
        """
        self.openapi_types = {
            'match_flux': str,
            'matchers': List[Matcher],
            'score': Score,
            'specifications_mapping': List[str]
        }

        self.attribute_map = {
            'match_flux': 'MatchFlux',
            'matchers': 'Matchers',
            'score': 'Score',
            'specifications_mapping': 'SpecificationsMapping'
        }

        self._match_flux = match_flux
        self._matchers = matchers
        self._score = score
        self._specifications_mapping = specifications_mapping

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SaveaccountconfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SaveaccountconfigRequest of this SaveaccountconfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def match_flux(self):
        """Gets the match_flux of this SaveaccountconfigRequest.

        This field determines the type of approval configuration applied to SKUs received  from a seller. The possible values include:   - `default` where the Matcher reviews the SKU, and approves it based on its score   - `manual` for manual approvals through the Received SKU UI or Match API   - `autoApprove` for every SKU received from a given seller to be approved automatically, regardless of the Matcher Score.

        :return: The match_flux of this SaveaccountconfigRequest.
        :rtype: str
        """
        return self._match_flux

    @match_flux.setter
    def match_flux(self, match_flux):
        """Sets the match_flux of this SaveaccountconfigRequest.

        This field determines the type of approval configuration applied to SKUs received  from a seller. The possible values include:   - `default` where the Matcher reviews the SKU, and approves it based on its score   - `manual` for manual approvals through the Received SKU UI or Match API   - `autoApprove` for every SKU received from a given seller to be approved automatically, regardless of the Matcher Score.

        :param match_flux: The match_flux of this SaveaccountconfigRequest.
        :type match_flux: str
        """
        if match_flux is None:
            raise ValueError("Invalid value for `match_flux`, must not be `None`")

        self._match_flux = match_flux

    @property
    def matchers(self):
        """Gets the matchers of this SaveaccountconfigRequest.

        Matchers for approving and rejecting SKUs received from sellers.

        :return: The matchers of this SaveaccountconfigRequest.
        :rtype: List[Matcher]
        """
        return self._matchers

    @matchers.setter
    def matchers(self, matchers):
        """Sets the matchers of this SaveaccountconfigRequest.

        Matchers for approving and rejecting SKUs received from sellers.

        :param matchers: The matchers of this SaveaccountconfigRequest.
        :type matchers: List[Matcher]
        """
        if matchers is None:
            raise ValueError("Invalid value for `matchers`, must not be `None`")

        self._matchers = matchers

    @property
    def score(self):
        """Gets the score of this SaveaccountconfigRequest.


        :return: The score of this SaveaccountconfigRequest.
        :rtype: Score
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this SaveaccountconfigRequest.


        :param score: The score of this SaveaccountconfigRequest.
        :type score: Score
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def specifications_mapping(self):
        """Gets the specifications_mapping of this SaveaccountconfigRequest.

        This attribute maps product and SKU specifications.

        :return: The specifications_mapping of this SaveaccountconfigRequest.
        :rtype: List[str]
        """
        return self._specifications_mapping

    @specifications_mapping.setter
    def specifications_mapping(self, specifications_mapping):
        """Sets the specifications_mapping of this SaveaccountconfigRequest.

        This attribute maps product and SKU specifications.

        :param specifications_mapping: The specifications_mapping of this SaveaccountconfigRequest.
        :type specifications_mapping: List[str]
        """
        if specifications_mapping is None:
            raise ValueError("Invalid value for `specifications_mapping`, must not be `None`")

        self._specifications_mapping = specifications_mapping
