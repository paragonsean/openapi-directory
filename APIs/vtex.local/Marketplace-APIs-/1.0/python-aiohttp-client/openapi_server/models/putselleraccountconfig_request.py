# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutselleraccountconfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mapping: object=None, match_flux: str='autoApprove', seller_id: str='seller123'):
        """PutselleraccountconfigRequest - a model defined in OpenAPI

        :param mapping: The mapping of this PutselleraccountconfigRequest.
        :param match_flux: The match_flux of this PutselleraccountconfigRequest.
        :param seller_id: The seller_id of this PutselleraccountconfigRequest.
        """
        self.openapi_types = {
            'mapping': object,
            'match_flux': str,
            'seller_id': str
        }

        self.attribute_map = {
            'mapping': 'mapping',
            'match_flux': 'matchFlux',
            'seller_id': 'sellerId'
        }

        self._mapping = mapping
        self._match_flux = match_flux
        self._seller_id = seller_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutselleraccountconfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutselleraccountconfigRequest of this PutselleraccountconfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mapping(self):
        """Gets the mapping of this PutselleraccountconfigRequest.

        Mapping of SKU and product Specifications. This object should be sent in the following format for all fields you wish to map:  {specificationName}:{specificationValue},  Example:  Choose voltage: Voltage,  Choose size: Size

        :return: The mapping of this PutselleraccountconfigRequest.
        :rtype: object
        """
        return self._mapping

    @mapping.setter
    def mapping(self, mapping):
        """Sets the mapping of this PutselleraccountconfigRequest.

        Mapping of SKU and product Specifications. This object should be sent in the following format for all fields you wish to map:  {specificationName}:{specificationValue},  Example:  Choose voltage: Voltage,  Choose size: Size

        :param mapping: The mapping of this PutselleraccountconfigRequest.
        :type mapping: object
        """
        if mapping is None:
            raise ValueError("Invalid value for `mapping`, must not be `None`")

        self._mapping = mapping

    @property
    def match_flux(self):
        """Gets the match_flux of this PutselleraccountconfigRequest.

        This field determines the type of approval configuration applied to SKUs received  from a seller. The possible values include:   - `default` where the Matcher reviews the SKU, and approves it based on its score   - `manual` for manual approvals through the Received SKU UI or Match API   - `autoApprove` for every SKU received from a given seller to be approved automatically, regardless of the Matcher Score.

        :return: The match_flux of this PutselleraccountconfigRequest.
        :rtype: str
        """
        return self._match_flux

    @match_flux.setter
    def match_flux(self, match_flux):
        """Sets the match_flux of this PutselleraccountconfigRequest.

        This field determines the type of approval configuration applied to SKUs received  from a seller. The possible values include:   - `default` where the Matcher reviews the SKU, and approves it based on its score   - `manual` for manual approvals through the Received SKU UI or Match API   - `autoApprove` for every SKU received from a given seller to be approved automatically, regardless of the Matcher Score.

        :param match_flux: The match_flux of this PutselleraccountconfigRequest.
        :type match_flux: str
        """
        if match_flux is None:
            raise ValueError("Invalid value for `match_flux`, must not be `None`")

        self._match_flux = match_flux

    @property
    def seller_id(self):
        """Gets the seller_id of this PutselleraccountconfigRequest.

        A string that identifies the seller in the marketplace. This ID must be created by the marketplace.

        :return: The seller_id of this PutselleraccountconfigRequest.
        :rtype: str
        """
        return self._seller_id

    @seller_id.setter
    def seller_id(self, seller_id):
        """Sets the seller_id of this PutselleraccountconfigRequest.

        A string that identifies the seller in the marketplace. This ID must be created by the marketplace.

        :param seller_id: The seller_id of this PutselleraccountconfigRequest.
        :type seller_id: str
        """
        if seller_id is None:
            raise ValueError("Invalid value for `seller_id`, must not be `None`")

        self._seller_id = seller_id
