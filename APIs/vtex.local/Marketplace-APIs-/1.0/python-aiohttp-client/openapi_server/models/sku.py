# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.specifications import Specifications
from openapi_server import util


class Sku(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, eans: List[str]=["12345678901213"], height: int=10, images: List[object]=None, length: int=10, measurement_unit: str='un', name: str='', ref_id: str='1234', specifications: Specifications=None, unit_multiplier: int=1, weight: int=100, width: int=20):
        """Sku - a model defined in OpenAPI

        :param eans: The eans of this Sku.
        :param height: The height of this Sku.
        :param images: The images of this Sku.
        :param length: The length of this Sku.
        :param measurement_unit: The measurement_unit of this Sku.
        :param name: The name of this Sku.
        :param ref_id: The ref_id of this Sku.
        :param specifications: The specifications of this Sku.
        :param unit_multiplier: The unit_multiplier of this Sku.
        :param weight: The weight of this Sku.
        :param width: The width of this Sku.
        """
        self.openapi_types = {
            'eans': List[str],
            'height': int,
            'images': List[object],
            'length': int,
            'measurement_unit': str,
            'name': str,
            'ref_id': str,
            'specifications': Specifications,
            'unit_multiplier': int,
            'weight': int,
            'width': int
        }

        self.attribute_map = {
            'eans': 'eans',
            'height': 'height',
            'images': 'images',
            'length': 'length',
            'measurement_unit': 'measurementUnit',
            'name': 'name',
            'ref_id': 'refId',
            'specifications': 'specifications',
            'unit_multiplier': 'unitMultiplier',
            'weight': 'weight',
            'width': 'width'
        }

        self._eans = eans
        self._height = height
        self._images = images
        self._length = length
        self._measurement_unit = measurement_unit
        self._name = name
        self._ref_id = ref_id
        self._specifications = specifications
        self._unit_multiplier = unit_multiplier
        self._weight = weight
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sku':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sku of this Sku.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eans(self):
        """Gets the eans of this Sku.

        SKU reference code.

        :return: The eans of this Sku.
        :rtype: List[str]
        """
        return self._eans

    @eans.setter
    def eans(self, eans):
        """Sets the eans of this Sku.

        SKU reference code.

        :param eans: The eans of this Sku.
        :type eans: List[str]
        """
        if eans is None:
            raise ValueError("Invalid value for `eans`, must not be `None`")

        self._eans = eans

    @property
    def height(self):
        """Gets the height of this Sku.

        Height of the SKU.

        :return: The height of this Sku.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Sku.

        Height of the SKU.

        :param height: The height of this Sku.
        :type height: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def images(self):
        """Gets the images of this Sku.


        :return: The images of this Sku.
        :rtype: List[object]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Sku.


        :param images: The images of this Sku.
        :type images: List[object]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def length(self):
        """Gets the length of this Sku.

        Length of the SKU.

        :return: The length of this Sku.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Sku.

        Length of the SKU.

        :param length: The length of this Sku.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this Sku.

        Measurement unit that should be used for this SKU. If this information doesn't apply, you should use the default value un.

        :return: The measurement_unit of this Sku.
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this Sku.

        Measurement unit that should be used for this SKU. If this information doesn't apply, you should use the default value un.

        :param measurement_unit: The measurement_unit of this Sku.
        :type measurement_unit: str
        """
        if measurement_unit is None:
            raise ValueError("Invalid value for `measurement_unit`, must not be `None`")

        self._measurement_unit = measurement_unit

    @property
    def name(self):
        """Gets the name of this Sku.

        

        :return: The name of this Sku.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sku.

        

        :param name: The name of this Sku.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def ref_id(self):
        """Gets the ref_id of this Sku.

        SKU reference code.

        :return: The ref_id of this Sku.
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this Sku.

        SKU reference code.

        :param ref_id: The ref_id of this Sku.
        :type ref_id: str
        """
        if ref_id is None:
            raise ValueError("Invalid value for `ref_id`, must not be `None`")

        self._ref_id = ref_id

    @property
    def specifications(self):
        """Gets the specifications of this Sku.


        :return: The specifications of this Sku.
        :rtype: Specifications
        """
        return self._specifications

    @specifications.setter
    def specifications(self, specifications):
        """Sets the specifications of this Sku.


        :param specifications: The specifications of this Sku.
        :type specifications: Specifications
        """
        if specifications is None:
            raise ValueError("Invalid value for `specifications`, must not be `None`")

        self._specifications = specifications

    @property
    def unit_multiplier(self):
        """Gets the unit_multiplier of this Sku.

        Unit multiplier for this SKU. If this information doesn't apply, you should use the default value 1.

        :return: The unit_multiplier of this Sku.
        :rtype: int
        """
        return self._unit_multiplier

    @unit_multiplier.setter
    def unit_multiplier(self, unit_multiplier):
        """Sets the unit_multiplier of this Sku.

        Unit multiplier for this SKU. If this information doesn't apply, you should use the default value 1.

        :param unit_multiplier: The unit_multiplier of this Sku.
        :type unit_multiplier: int
        """
        if unit_multiplier is None:
            raise ValueError("Invalid value for `unit_multiplier`, must not be `None`")

        self._unit_multiplier = unit_multiplier

    @property
    def weight(self):
        """Gets the weight of this Sku.

        Weight of the SKU.

        :return: The weight of this Sku.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Sku.

        Weight of the SKU.

        :param weight: The weight of this Sku.
        :type weight: int
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")

        self._weight = weight

    @property
    def width(self):
        """Gets the width of this Sku.

        Width of the SKU.

        :return: The width of this Sku.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Sku.

        Width of the SKU.

        :param width: The width of this Sku.
        :type width: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")

        self._width = width
