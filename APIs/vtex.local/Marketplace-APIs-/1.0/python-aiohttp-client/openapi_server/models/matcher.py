# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Matcher(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, is_active: bool=True, matcher_id: str='vtex-matcher', updates_notification_endpoint: str=None, hook_base_address: str='http://simple-suggestion-matcher.vtex.com.br'):
        """Matcher - a model defined in OpenAPI

        :param description: The description of this Matcher.
        :param is_active: The is_active of this Matcher.
        :param matcher_id: The matcher_id of this Matcher.
        :param updates_notification_endpoint: The updates_notification_endpoint of this Matcher.
        :param hook_base_address: The hook_base_address of this Matcher.
        """
        self.openapi_types = {
            'description': str,
            'is_active': bool,
            'matcher_id': str,
            'updates_notification_endpoint': str,
            'hook_base_address': str
        }

        self.attribute_map = {
            'description': 'Description',
            'is_active': 'IsActive',
            'matcher_id': 'MatcherId',
            'updates_notification_endpoint': 'UpdatesNotificationEndpoint',
            'hook_base_address': 'hook-base-address'
        }

        self._description = description
        self._is_active = is_active
        self._matcher_id = matcher_id
        self._updates_notification_endpoint = updates_notification_endpoint
        self._hook_base_address = hook_base_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Matcher':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Matcher of this Matcher.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Matcher.

        Insert in this field any notes about the approval. This field is optional.

        :return: The description of this Matcher.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Matcher.

        Insert in this field any notes about the approval. This field is optional.

        :param description: The description of this Matcher.
        :type description: str
        """

        self._description = description

    @property
    def is_active(self):
        """Gets the is_active of this Matcher.

        Whether the matcher is active in the account (`true`), or not (`false`).

        :return: The is_active of this Matcher.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Matcher.

        Whether the matcher is active in the account (`true`), or not (`false`).

        :param is_active: The is_active of this Matcher.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def matcher_id(self):
        """Gets the matcher_id of this Matcher.

        Identifies the matching entity. It can be either VTEX's matcher, or an external matcher developed by partners, for example. The `matcherId`'s value can be obtained through the [Get SKU Suggestion by ID](https://developers.vtex.com/vtex-rest-api/reference/getsuggestion) endpoint.

        :return: The matcher_id of this Matcher.
        :rtype: str
        """
        return self._matcher_id

    @matcher_id.setter
    def matcher_id(self, matcher_id):
        """Sets the matcher_id of this Matcher.

        Identifies the matching entity. It can be either VTEX's matcher, or an external matcher developed by partners, for example. The `matcherId`'s value can be obtained through the [Get SKU Suggestion by ID](https://developers.vtex.com/vtex-rest-api/reference/getsuggestion) endpoint.

        :param matcher_id: The matcher_id of this Matcher.
        :type matcher_id: str
        """
        if matcher_id is None:
            raise ValueError("Invalid value for `matcher_id`, must not be `None`")

        self._matcher_id = matcher_id

    @property
    def updates_notification_endpoint(self):
        """Gets the updates_notification_endpoint of this Matcher.

        The Received SKUs module uses this endpoint to send updates about a suggestion, to the chosen Matcher.

        :return: The updates_notification_endpoint of this Matcher.
        :rtype: str
        """
        return self._updates_notification_endpoint

    @updates_notification_endpoint.setter
    def updates_notification_endpoint(self, updates_notification_endpoint):
        """Sets the updates_notification_endpoint of this Matcher.

        The Received SKUs module uses this endpoint to send updates about a suggestion, to the chosen Matcher.

        :param updates_notification_endpoint: The updates_notification_endpoint of this Matcher.
        :type updates_notification_endpoint: str
        """
        if updates_notification_endpoint is None:
            raise ValueError("Invalid value for `updates_notification_endpoint`, must not be `None`")

        self._updates_notification_endpoint = updates_notification_endpoint

    @property
    def hook_base_address(self):
        """Gets the hook_base_address of this Matcher.

        The chosen Matcher's url. It is the endpoint that the Received SKUs module calls, to send new suggestions for the Matcher's review.

        :return: The hook_base_address of this Matcher.
        :rtype: str
        """
        return self._hook_base_address

    @hook_base_address.setter
    def hook_base_address(self, hook_base_address):
        """Sets the hook_base_address of this Matcher.

        The chosen Matcher's url. It is the endpoint that the Received SKUs module calls, to send new suggestions for the Matcher's review.

        :param hook_base_address: The hook_base_address of this Matcher.
        :type hook_base_address: str
        """
        if hook_base_address is None:
            raise ValueError("Invalid value for `hook_base_address`, must not be `None`")

        self._hook_base_address = hook_base_address
