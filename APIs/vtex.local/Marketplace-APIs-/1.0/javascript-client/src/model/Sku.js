/**
 * Suggestions
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Specifications from './Specifications';

/**
 * The Sku model module.
 * @module model/Sku
 * @version 1.0
 */
class Sku {
    /**
     * Constructs a new <code>Sku</code>.
     * @alias module:model/Sku
     * @param eans {Array.<String>} SKU reference code.
     * @param height {Number} Height of the SKU.
     * @param images {Array.<Object>} 
     * @param length {Number} Length of the SKU.
     * @param measurementUnit {String} Measurement unit that should be used for this SKU. If this information doesn't apply, you should use the default value un.
     * @param name {String} 
     * @param refId {String} SKU reference code.
     * @param specifications {module:model/Specifications} 
     * @param unitMultiplier {Number} Unit multiplier for this SKU. If this information doesn't apply, you should use the default value 1.
     * @param weight {Number} Weight of the SKU.
     * @param width {Number} Width of the SKU.
     */
    constructor(eans, height, images, length, measurementUnit, name, refId, specifications, unitMultiplier, weight, width) { 
        
        Sku.initialize(this, eans, height, images, length, measurementUnit, name, refId, specifications, unitMultiplier, weight, width);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eans, height, images, length, measurementUnit, name, refId, specifications, unitMultiplier, weight, width) { 
        obj['eans'] = eans;
        obj['height'] = height || 10;
        obj['images'] = images;
        obj['length'] = length || 10;
        obj['measurementUnit'] = measurementUnit || 'un';
        obj['name'] = name || '';
        obj['refId'] = refId || '1234';
        obj['specifications'] = specifications;
        obj['unitMultiplier'] = unitMultiplier || 1;
        obj['weight'] = weight || 100;
        obj['width'] = width || 20;
    }

    /**
     * Constructs a <code>Sku</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Sku} obj Optional instance to populate.
     * @return {module:model/Sku} The populated <code>Sku</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Sku();

            if (data.hasOwnProperty('eans')) {
                obj['eans'] = ApiClient.convertToType(data['eans'], ['String']);
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [Object]);
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('measurementUnit')) {
                obj['measurementUnit'] = ApiClient.convertToType(data['measurementUnit'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('refId')) {
                obj['refId'] = ApiClient.convertToType(data['refId'], 'String');
            }
            if (data.hasOwnProperty('specifications')) {
                obj['specifications'] = Specifications.constructFromObject(data['specifications']);
            }
            if (data.hasOwnProperty('unitMultiplier')) {
                obj['unitMultiplier'] = ApiClient.convertToType(data['unitMultiplier'], 'Number');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Sku</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Sku</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Sku.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['eans'])) {
            throw new Error("Expected the field `eans` to be an array in the JSON data but got " + data['eans']);
        }
        // ensure the json data is a string
        if (data['measurementUnit'] && !(typeof data['measurementUnit'] === 'string' || data['measurementUnit'] instanceof String)) {
            throw new Error("Expected the field `measurementUnit` to be a primitive type in the JSON string but got " + data['measurementUnit']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['refId'] && !(typeof data['refId'] === 'string' || data['refId'] instanceof String)) {
            throw new Error("Expected the field `refId` to be a primitive type in the JSON string but got " + data['refId']);
        }
        // validate the optional field `specifications`
        if (data['specifications']) { // data not null
          Specifications.validateJSON(data['specifications']);
        }

        return true;
    }


}

Sku.RequiredProperties = ["eans", "height", "images", "length", "measurementUnit", "name", "refId", "specifications", "unitMultiplier", "weight", "width"];

/**
 * SKU reference code.
 * @member {Array.<String>} eans
 */
Sku.prototype['eans'] = undefined;

/**
 * Height of the SKU.
 * @member {Number} height
 * @default 10
 */
Sku.prototype['height'] = 10;

/**
 * @member {Array.<Object>} images
 */
Sku.prototype['images'] = undefined;

/**
 * Length of the SKU.
 * @member {Number} length
 * @default 10
 */
Sku.prototype['length'] = 10;

/**
 * Measurement unit that should be used for this SKU. If this information doesn't apply, you should use the default value un.
 * @member {String} measurementUnit
 * @default 'un'
 */
Sku.prototype['measurementUnit'] = 'un';

/**
 * 
 * @member {String} name
 * @default ''
 */
Sku.prototype['name'] = '';

/**
 * SKU reference code.
 * @member {String} refId
 * @default '1234'
 */
Sku.prototype['refId'] = '1234';

/**
 * @member {module:model/Specifications} specifications
 */
Sku.prototype['specifications'] = undefined;

/**
 * Unit multiplier for this SKU. If this information doesn't apply, you should use the default value 1.
 * @member {Number} unitMultiplier
 * @default 1
 */
Sku.prototype['unitMultiplier'] = 1;

/**
 * Weight of the SKU.
 * @member {Number} weight
 * @default 100
 */
Sku.prototype['weight'] = 100;

/**
 * Width of the SKU.
 * @member {Number} width
 * @default 20
 */
Sku.prototype['width'] = 20;






export default Sku;

