/**
 * Suggestions
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Image from './Image';
import ProductSpecification from './ProductSpecification';
import SaveSuggestionRequestPricing from './SaveSuggestionRequestPricing';
import SkuSpecification from './SkuSpecification';

/**
 * The SaveSuggestionRequest model module.
 * @module model/SaveSuggestionRequest
 * @version 1.0
 */
class SaveSuggestionRequest {
    /**
     * Constructs a new <code>SaveSuggestionRequest</code>.
     * @alias module:model/SaveSuggestionRequest
     * @param availableQuantity {Number} 
     * @param brandName {String} Name of the brand to which this SKU belongs. It must match the brand created in the marketplace.
     * @param categoryFullPath {String} Full path to the SKU's category. It should be written as {department}/{category}. For example: if the department is **Appliances** and the category is **Oven**, the full path should be 'Appliances/Oven'.
     * @param EAN {String} SKU reference code. Mandatory if the RefId is not informed.
     * @param height {Number} Height of the SKU.
     * @param images {Array.<module:model/Image>} Array containing the URLs and names the SKU images.
     * @param length {Number} Length of the SKU.
     * @param pricing {module:model/SaveSuggestionRequestPricing} 
     * @param productDescription {String} Product Description containing the main information about the product (not the SKU).
     * @param productId {String} Product ID in seller's account.
     * @param productName {String} Name of the suggested product. This field has a limit of 150 characters.
     * @param refId {String} SKU reference code. Mandotory if the EAN is not informed.
     * @param sellerId {String} ID of the seller in the marketplace. This ID must be created by the marketplace and informed to the seller before the integration is built.
     * @param skuName {String} Name of the suggested SKU.
     * @param weight {Number} Weight of the SKU in grams.
     * @param width {Number} Width of the SKU.
     */
    constructor(availableQuantity, brandName, categoryFullPath, EAN, height, images, length, pricing, productDescription, productId, productName, refId, sellerId, skuName, weight, width) { 
        
        SaveSuggestionRequest.initialize(this, availableQuantity, brandName, categoryFullPath, EAN, height, images, length, pricing, productDescription, productId, productName, refId, sellerId, skuName, weight, width);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, availableQuantity, brandName, categoryFullPath, EAN, height, images, length, pricing, productDescription, productId, productName, refId, sellerId, skuName, weight, width) { 
        obj['AvailableQuantity'] = availableQuantity;
        obj['BrandName'] = brandName;
        obj['CategoryFullPath'] = categoryFullPath;
        obj['EAN'] = EAN || 'EAN10';
        obj['Height'] = height || 10;
        obj['Images'] = images;
        obj['Length'] = length || 10;
        obj['Pricing'] = pricing;
        obj['ProductDescription'] = productDescription;
        obj['ProductId'] = productId || '1234';
        obj['ProductName'] = productName || '';
        obj['RefId'] = refId || 'REF10';
        obj['SellerId'] = sellerId || '1';
        obj['SkuName'] = skuName;
        obj['Weight'] = weight || 100;
        obj['Width'] = width || 10;
    }

    /**
     * Constructs a <code>SaveSuggestionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SaveSuggestionRequest} obj Optional instance to populate.
     * @return {module:model/SaveSuggestionRequest} The populated <code>SaveSuggestionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SaveSuggestionRequest();

            if (data.hasOwnProperty('AvailableQuantity')) {
                obj['AvailableQuantity'] = ApiClient.convertToType(data['AvailableQuantity'], 'Number');
            }
            if (data.hasOwnProperty('BrandName')) {
                obj['BrandName'] = ApiClient.convertToType(data['BrandName'], 'String');
            }
            if (data.hasOwnProperty('CategoryFullPath')) {
                obj['CategoryFullPath'] = ApiClient.convertToType(data['CategoryFullPath'], 'String');
            }
            if (data.hasOwnProperty('EAN')) {
                obj['EAN'] = ApiClient.convertToType(data['EAN'], 'String');
            }
            if (data.hasOwnProperty('Height')) {
                obj['Height'] = ApiClient.convertToType(data['Height'], 'Number');
            }
            if (data.hasOwnProperty('Images')) {
                obj['Images'] = ApiClient.convertToType(data['Images'], [Image]);
            }
            if (data.hasOwnProperty('Length')) {
                obj['Length'] = ApiClient.convertToType(data['Length'], 'Number');
            }
            if (data.hasOwnProperty('MeasurementUnit')) {
                obj['MeasurementUnit'] = ApiClient.convertToType(data['MeasurementUnit'], 'String');
            }
            if (data.hasOwnProperty('Pricing')) {
                obj['Pricing'] = SaveSuggestionRequestPricing.constructFromObject(data['Pricing']);
            }
            if (data.hasOwnProperty('ProductDescription')) {
                obj['ProductDescription'] = ApiClient.convertToType(data['ProductDescription'], 'String');
            }
            if (data.hasOwnProperty('ProductId')) {
                obj['ProductId'] = ApiClient.convertToType(data['ProductId'], 'String');
            }
            if (data.hasOwnProperty('ProductName')) {
                obj['ProductName'] = ApiClient.convertToType(data['ProductName'], 'String');
            }
            if (data.hasOwnProperty('ProductSpecifications')) {
                obj['ProductSpecifications'] = ApiClient.convertToType(data['ProductSpecifications'], [ProductSpecification]);
            }
            if (data.hasOwnProperty('RefId')) {
                obj['RefId'] = ApiClient.convertToType(data['RefId'], 'String');
            }
            if (data.hasOwnProperty('SellerId')) {
                obj['SellerId'] = ApiClient.convertToType(data['SellerId'], 'String');
            }
            if (data.hasOwnProperty('SellerStockKeepingUnitId')) {
                obj['SellerStockKeepingUnitId'] = ApiClient.convertToType(data['SellerStockKeepingUnitId'], 'Number');
            }
            if (data.hasOwnProperty('SkuName')) {
                obj['SkuName'] = ApiClient.convertToType(data['SkuName'], 'String');
            }
            if (data.hasOwnProperty('SkuSpecifications')) {
                obj['SkuSpecifications'] = ApiClient.convertToType(data['SkuSpecifications'], [SkuSpecification]);
            }
            if (data.hasOwnProperty('UnitMultiplier')) {
                obj['UnitMultiplier'] = ApiClient.convertToType(data['UnitMultiplier'], 'Number');
            }
            if (data.hasOwnProperty('Weight')) {
                obj['Weight'] = ApiClient.convertToType(data['Weight'], 'Number');
            }
            if (data.hasOwnProperty('Width')) {
                obj['Width'] = ApiClient.convertToType(data['Width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SaveSuggestionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SaveSuggestionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SaveSuggestionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['BrandName'] && !(typeof data['BrandName'] === 'string' || data['BrandName'] instanceof String)) {
            throw new Error("Expected the field `BrandName` to be a primitive type in the JSON string but got " + data['BrandName']);
        }
        // ensure the json data is a string
        if (data['CategoryFullPath'] && !(typeof data['CategoryFullPath'] === 'string' || data['CategoryFullPath'] instanceof String)) {
            throw new Error("Expected the field `CategoryFullPath` to be a primitive type in the JSON string but got " + data['CategoryFullPath']);
        }
        // ensure the json data is a string
        if (data['EAN'] && !(typeof data['EAN'] === 'string' || data['EAN'] instanceof String)) {
            throw new Error("Expected the field `EAN` to be a primitive type in the JSON string but got " + data['EAN']);
        }
        if (data['Images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Images'])) {
                throw new Error("Expected the field `Images` to be an array in the JSON data but got " + data['Images']);
            }
            // validate the optional field `Images` (array)
            for (const item of data['Images']) {
                Image.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['MeasurementUnit'] && !(typeof data['MeasurementUnit'] === 'string' || data['MeasurementUnit'] instanceof String)) {
            throw new Error("Expected the field `MeasurementUnit` to be a primitive type in the JSON string but got " + data['MeasurementUnit']);
        }
        // validate the optional field `Pricing`
        if (data['Pricing']) { // data not null
          SaveSuggestionRequestPricing.validateJSON(data['Pricing']);
        }
        // ensure the json data is a string
        if (data['ProductDescription'] && !(typeof data['ProductDescription'] === 'string' || data['ProductDescription'] instanceof String)) {
            throw new Error("Expected the field `ProductDescription` to be a primitive type in the JSON string but got " + data['ProductDescription']);
        }
        // ensure the json data is a string
        if (data['ProductId'] && !(typeof data['ProductId'] === 'string' || data['ProductId'] instanceof String)) {
            throw new Error("Expected the field `ProductId` to be a primitive type in the JSON string but got " + data['ProductId']);
        }
        // ensure the json data is a string
        if (data['ProductName'] && !(typeof data['ProductName'] === 'string' || data['ProductName'] instanceof String)) {
            throw new Error("Expected the field `ProductName` to be a primitive type in the JSON string but got " + data['ProductName']);
        }
        if (data['ProductSpecifications']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ProductSpecifications'])) {
                throw new Error("Expected the field `ProductSpecifications` to be an array in the JSON data but got " + data['ProductSpecifications']);
            }
            // validate the optional field `ProductSpecifications` (array)
            for (const item of data['ProductSpecifications']) {
                ProductSpecification.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['RefId'] && !(typeof data['RefId'] === 'string' || data['RefId'] instanceof String)) {
            throw new Error("Expected the field `RefId` to be a primitive type in the JSON string but got " + data['RefId']);
        }
        // ensure the json data is a string
        if (data['SellerId'] && !(typeof data['SellerId'] === 'string' || data['SellerId'] instanceof String)) {
            throw new Error("Expected the field `SellerId` to be a primitive type in the JSON string but got " + data['SellerId']);
        }
        // ensure the json data is a string
        if (data['SkuName'] && !(typeof data['SkuName'] === 'string' || data['SkuName'] instanceof String)) {
            throw new Error("Expected the field `SkuName` to be a primitive type in the JSON string but got " + data['SkuName']);
        }
        if (data['SkuSpecifications']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['SkuSpecifications'])) {
                throw new Error("Expected the field `SkuSpecifications` to be an array in the JSON data but got " + data['SkuSpecifications']);
            }
            // validate the optional field `SkuSpecifications` (array)
            for (const item of data['SkuSpecifications']) {
                SkuSpecification.validateJSON(item);
            };
        }

        return true;
    }


}

SaveSuggestionRequest.RequiredProperties = ["AvailableQuantity", "BrandName", "CategoryFullPath", "EAN", "Height", "Images", "Length", "Pricing", "ProductDescription", "ProductId", "ProductName", "RefId", "SellerId", "SkuName", "Weight", "Width"];

/**
 * 
 * @member {Number} AvailableQuantity
 */
SaveSuggestionRequest.prototype['AvailableQuantity'] = undefined;

/**
 * Name of the brand to which this SKU belongs. It must match the brand created in the marketplace.
 * @member {String} BrandName
 */
SaveSuggestionRequest.prototype['BrandName'] = undefined;

/**
 * Full path to the SKU's category. It should be written as {department}/{category}. For example: if the department is **Appliances** and the category is **Oven**, the full path should be 'Appliances/Oven'.
 * @member {String} CategoryFullPath
 */
SaveSuggestionRequest.prototype['CategoryFullPath'] = undefined;

/**
 * SKU reference code. Mandatory if the RefId is not informed.
 * @member {String} EAN
 * @default 'EAN10'
 */
SaveSuggestionRequest.prototype['EAN'] = 'EAN10';

/**
 * Height of the SKU.
 * @member {Number} Height
 * @default 10
 */
SaveSuggestionRequest.prototype['Height'] = 10;

/**
 * Array containing the URLs and names the SKU images.
 * @member {Array.<module:model/Image>} Images
 */
SaveSuggestionRequest.prototype['Images'] = undefined;

/**
 * Length of the SKU.
 * @member {Number} Length
 * @default 10
 */
SaveSuggestionRequest.prototype['Length'] = 10;

/**
 * Measurement unit that should be used for this SKU. If this information doesn't apply, you should use the default value `un`.
 * @member {String} MeasurementUnit
 */
SaveSuggestionRequest.prototype['MeasurementUnit'] = undefined;

/**
 * @member {module:model/SaveSuggestionRequestPricing} Pricing
 */
SaveSuggestionRequest.prototype['Pricing'] = undefined;

/**
 * Product Description containing the main information about the product (not the SKU).
 * @member {String} ProductDescription
 */
SaveSuggestionRequest.prototype['ProductDescription'] = undefined;

/**
 * Product ID in seller's account.
 * @member {String} ProductId
 * @default '1234'
 */
SaveSuggestionRequest.prototype['ProductId'] = '1234';

/**
 * Name of the suggested product. This field has a limit of 150 characters.
 * @member {String} ProductName
 * @default ''
 */
SaveSuggestionRequest.prototype['ProductName'] = '';

/**
 * Array containing the names and values of the product specifications.
 * @member {Array.<module:model/ProductSpecification>} ProductSpecifications
 */
SaveSuggestionRequest.prototype['ProductSpecifications'] = undefined;

/**
 * SKU reference code. Mandotory if the EAN is not informed.
 * @member {String} RefId
 * @default 'REF10'
 */
SaveSuggestionRequest.prototype['RefId'] = 'REF10';

/**
 * ID of the seller in the marketplace. This ID must be created by the marketplace and informed to the seller before the integration is built.
 * @member {String} SellerId
 * @default '1'
 */
SaveSuggestionRequest.prototype['SellerId'] = '1';

/**
 * ID of the SKU registered in the seller.
 * @member {Number} SellerStockKeepingUnitId
 */
SaveSuggestionRequest.prototype['SellerStockKeepingUnitId'] = undefined;

/**
 * Name of the suggested SKU.
 * @member {String} SkuName
 */
SaveSuggestionRequest.prototype['SkuName'] = undefined;

/**
 * Array containing the names and values of the SKU specifications.
 * @member {Array.<module:model/SkuSpecification>} SkuSpecifications
 */
SaveSuggestionRequest.prototype['SkuSpecifications'] = undefined;

/**
 * Unit multiplier for this SKU. If this information doesn't apply, you should use the default value `1`.
 * @member {Number} UnitMultiplier
 */
SaveSuggestionRequest.prototype['UnitMultiplier'] = undefined;

/**
 * Weight of the SKU in grams.
 * @member {Number} Weight
 * @default 100
 */
SaveSuggestionRequest.prototype['Weight'] = 100;

/**
 * Width of the SKU.
 * @member {Number} Width
 * @default 10
 */
SaveSuggestionRequest.prototype['Width'] = 10;






export default SaveSuggestionRequest;

