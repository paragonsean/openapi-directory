/**
 * Suggestions
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Product from './Product';
import Sku from './Sku';

/**
 * The MatchRequest model module.
 * @module model/MatchRequest
 * @version 1.0
 */
class MatchRequest {
    /**
     * Constructs a new <code>MatchRequest</code>.
     * @alias module:model/MatchRequest
     * @param matchType {String} Define the action you want to apply to each SKU. Values include:   1. `newproduct`: match the SKU as a new product.   2. `itemMatch`: associate the received SKU to an existing SKU.   3. `productMatch`: associate the received SKU to an existing product.   4. `deny`: deny the received SKU.   5. `pending`: the received SKU requires attention.   6. `incomplete`: the received SKU is lacking information to be matched.   7. `insufficientScore`: the score given by the Matcher to this received SKU doesn't qualify it to be matched.   Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.
     * @param matcherId {String} Identifies the matching entity. It can be either VTEX's matcher, or an external matcher developed by partners, for example. The `matcherId`'s value can be obtained through the [Get SKU Suggestion by ID](https://developers.vtex.com/vtex-rest-api/reference/getsuggestion) endpoint.
     * @param score {String} Matcher rates received SKUs by correlating the data sent by sellers, to existing fields in the marketplace. The calculation of these scores determines whether the product has been:   `Approved`: score equal to or greater than 80 points.   `Pending`: from 31 to 79 points.  `Denied`: from 0 to 30 points.   Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.
     */
    constructor(matchType, matcherId, score) { 
        
        MatchRequest.initialize(this, matchType, matcherId, score);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, matchType, matcherId, score) { 
        obj['matchType'] = matchType || 'itemMatch';
        obj['matcherId'] = matcherId || 'vtex-matcher';
        obj['productRef'] = '';
        obj['score'] = score || '80';
        obj['skuRef'] = '';
    }

    /**
     * Constructs a <code>MatchRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MatchRequest} obj Optional instance to populate.
     * @return {module:model/MatchRequest} The populated <code>MatchRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MatchRequest();

            if (data.hasOwnProperty('matchType')) {
                obj['matchType'] = ApiClient.convertToType(data['matchType'], 'String');
            }
            if (data.hasOwnProperty('matcherId')) {
                obj['matcherId'] = ApiClient.convertToType(data['matcherId'], 'String');
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = Product.constructFromObject(data['product']);
            }
            if (data.hasOwnProperty('productRef')) {
                obj['productRef'] = ApiClient.convertToType(data['productRef'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = Sku.constructFromObject(data['sku']);
            }
            if (data.hasOwnProperty('skuRef')) {
                obj['skuRef'] = ApiClient.convertToType(data['skuRef'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MatchRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MatchRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MatchRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['matchType'] && !(typeof data['matchType'] === 'string' || data['matchType'] instanceof String)) {
            throw new Error("Expected the field `matchType` to be a primitive type in the JSON string but got " + data['matchType']);
        }
        // ensure the json data is a string
        if (data['matcherId'] && !(typeof data['matcherId'] === 'string' || data['matcherId'] instanceof String)) {
            throw new Error("Expected the field `matcherId` to be a primitive type in the JSON string but got " + data['matcherId']);
        }
        // validate the optional field `product`
        if (data['product']) { // data not null
          Product.validateJSON(data['product']);
        }
        // ensure the json data is a string
        if (data['productRef'] && !(typeof data['productRef'] === 'string' || data['productRef'] instanceof String)) {
            throw new Error("Expected the field `productRef` to be a primitive type in the JSON string but got " + data['productRef']);
        }
        // ensure the json data is a string
        if (data['score'] && !(typeof data['score'] === 'string' || data['score'] instanceof String)) {
            throw new Error("Expected the field `score` to be a primitive type in the JSON string but got " + data['score']);
        }
        // validate the optional field `sku`
        if (data['sku']) { // data not null
          Sku.validateJSON(data['sku']);
        }
        // ensure the json data is a string
        if (data['skuRef'] && !(typeof data['skuRef'] === 'string' || data['skuRef'] instanceof String)) {
            throw new Error("Expected the field `skuRef` to be a primitive type in the JSON string but got " + data['skuRef']);
        }

        return true;
    }


}

MatchRequest.RequiredProperties = ["matchType", "matcherId", "score"];

/**
 * Define the action you want to apply to each SKU. Values include:   1. `newproduct`: match the SKU as a new product.   2. `itemMatch`: associate the received SKU to an existing SKU.   3. `productMatch`: associate the received SKU to an existing product.   4. `deny`: deny the received SKU.   5. `pending`: the received SKU requires attention.   6. `incomplete`: the received SKU is lacking information to be matched.   7. `insufficientScore`: the score given by the Matcher to this received SKU doesn't qualify it to be matched.   Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.
 * @member {String} matchType
 * @default 'itemMatch'
 */
MatchRequest.prototype['matchType'] = 'itemMatch';

/**
 * Identifies the matching entity. It can be either VTEX's matcher, or an external matcher developed by partners, for example. The `matcherId`'s value can be obtained through the [Get SKU Suggestion by ID](https://developers.vtex.com/vtex-rest-api/reference/getsuggestion) endpoint.
 * @member {String} matcherId
 * @default 'vtex-matcher'
 */
MatchRequest.prototype['matcherId'] = 'vtex-matcher';

/**
 * @member {module:model/Product} product
 */
MatchRequest.prototype['product'] = undefined;

/**
 * In `productMatch` actions, fill in this field on your request to match the item to an existing product in the marketplace.
 * @member {String} productRef
 * @default ''
 */
MatchRequest.prototype['productRef'] = '';

/**
 * Matcher rates received SKUs by correlating the data sent by sellers, to existing fields in the marketplace. The calculation of these scores determines whether the product has been:   `Approved`: score equal to or greater than 80 points.   `Pending`: from 31 to 79 points.  `Denied`: from 0 to 30 points.   Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.
 * @member {String} score
 * @default '80'
 */
MatchRequest.prototype['score'] = '80';

/**
 * @member {module:model/Sku} sku
 */
MatchRequest.prototype['sku'] = undefined;

/**
 * In `itemMatch` actions, fill in this field on your request to match the item to an existing SKU in the marketplace.
 * @member {String} skuRef
 * @default ''
 */
MatchRequest.prototype['skuRef'] = '';






export default MatchRequest;

